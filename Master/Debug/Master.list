
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe44  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08010114  08010114  00011114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000012c2  08010570  08010570  00011570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000028  08011834  08011834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0801185c  0801185c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000010  08011864  08011864  00012864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011874  08011874  00012874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000228  24000000  08011878  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  24000228  08011aa0  00013228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000a8c  08011aa0  00013a8c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00013228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000325b7  00000000  00000000  00013256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007608  00000000  00000000  0004580d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002058  00000000  00000000  0004ce18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000182b  00000000  00000000  0004ee70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039070  00000000  00000000  0005069b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b660  00000000  00000000  0008970b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00172090  00000000  00000000  000b4d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c2  00000000  00000000  00226dfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009184  00000000  00000000  00226ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00230044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000228 	.word	0x24000228
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080100fc 	.word	0x080100fc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400022c 	.word	0x2400022c
 800030c:	080100fc 	.word	0x080100fc

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80003b6:	f001 fc93 	bl	8001ce0 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003ba:	f002 fa03 	bl	80027c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80003be:	f000 fad7 	bl	8000970 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80003c2:	f000 fb43 	bl	8000a4c <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003c6:	f000 fea7 	bl	8001118 <MX_GPIO_Init>
	MX_CRC_Init();
 80003ca:	f000 fcc5 	bl	8000d58 <MX_CRC_Init>
	MX_DMA2D_Init();
 80003ce:	f000 fce5 	bl	8000d9c <MX_DMA2D_Init>
	MX_ADC1_Init();
 80003d2:	f000 fb6b 	bl	8000aac <MX_ADC1_Init>
	MX_I2C1_Init();
 80003d6:	f000 fd1b 	bl	8000e10 <MX_I2C1_Init>
	MX_SPI1_Init();
 80003da:	f000 fd59 	bl	8000e90 <MX_SPI1_Init>
	MX_TIM2_Init();
 80003de:	f000 fdaf 	bl	8000f40 <MX_TIM2_Init>
	MX_TIM3_Init();
 80003e2:	f000 fe21 	bl	8001028 <MX_TIM3_Init>
	MX_ADC2_Init();
 80003e6:	f000 fbdb 	bl	8000ba0 <MX_ADC2_Init>
	MX_ADC3_Init();
 80003ea:	f000 fc41 	bl	8000c70 <MX_ADC3_Init>
	/* USER CODE BEGIN 2 */
	serial_communication_variable_init();
 80003ee:	f001 fca9 	bl	8001d44 <serial_communication_variable_init>
	speed_joystickX = 0;
 80003f2:	4bbf      	ldr	r3, [pc, #764]	@ (80006f0 <main+0x340>)
 80003f4:	f04f 0200 	mov.w	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
	speed_joystickY = 0;
 80003fa:	4bbe      	ldr	r3, [pc, #760]	@ (80006f4 <main+0x344>)
 80003fc:	f04f 0200 	mov.w	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
	speed_joystickZ = 0;
 8000402:	4bbd      	ldr	r3, [pc, #756]	@ (80006f8 <main+0x348>)
 8000404:	f04f 0200 	mov.w	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
	speed_joystickT = 0;
 800040a:	4bbc      	ldr	r3, [pc, #752]	@ (80006fc <main+0x34c>)
 800040c:	f04f 0200 	mov.w	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
	solenoid_tear_1_status = 0;
 8000412:	4bbb      	ldr	r3, [pc, #748]	@ (8000700 <main+0x350>)
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
	solenoid_tear_2_status = 0;
 8000418:	4bba      	ldr	r3, [pc, #744]	@ (8000704 <main+0x354>)
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
	solenoid_tear_clamp_status = 0;
 800041e:	4bba      	ldr	r3, [pc, #744]	@ (8000708 <main+0x358>)
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
	solenoid_tear_lock_status = 0;
 8000424:	4bb9      	ldr	r3, [pc, #740]	@ (800070c <main+0x35c>)
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
	control_mode = 1;
 800042a:	4bb9      	ldr	r3, [pc, #740]	@ (8000710 <main+0x360>)
 800042c:	2201      	movs	r2, #1
 800042e:	601a      	str	r2, [r3, #0]
	bond_power_now = 0;
 8000430:	4bb8      	ldr	r3, [pc, #736]	@ (8000714 <main+0x364>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	bond_power_before = 0;
 8000436:	4bb8      	ldr	r3, [pc, #736]	@ (8000718 <main+0x368>)
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]
	search_height_adj_1 = 0;
 800043c:	4bb7      	ldr	r3, [pc, #732]	@ (800071c <main+0x36c>)
 800043e:	f04f 0200 	mov.w	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
	search_height_adj_2 = 0;
 8000444:	4bb6      	ldr	r3, [pc, #728]	@ (8000720 <main+0x370>)
 8000446:	f04f 0200 	mov.w	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
	measured_temperature_gauge = 0;
 800044c:	4bb5      	ldr	r3, [pc, #724]	@ (8000724 <main+0x374>)
 800044e:	f04f 0200 	mov.w	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
	debug_head_touched = 0;
 8000454:	4bb4      	ldr	r3, [pc, #720]	@ (8000728 <main+0x378>)
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
	fine_adjustment = 0;
 800045a:	4bb4      	ldr	r3, [pc, #720]	@ (800072c <main+0x37c>)
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]

	if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8000460:	48b3      	ldr	r0, [pc, #716]	@ (8000730 <main+0x380>)
 8000462:	f00b ff79 	bl	800c358 <HAL_TIM_Base_Start_IT>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <main+0xc0>
	{
		/* Starting Error */
		Error_Handler();
 800046c:	f001 fc64 	bl	8001d38 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000470:	2108      	movs	r1, #8
 8000472:	48b0      	ldr	r0, [pc, #704]	@ (8000734 <main+0x384>)
 8000474:	f00c f8b8 	bl	800c5e8 <HAL_TIM_PWM_Start>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	position_joystick = 0;
 8000478:	4baf      	ldr	r3, [pc, #700]	@ (8000738 <main+0x388>)
 800047a:	f04f 0200 	mov.w	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
	ui32_to_f conv;
	//https://deepbluembedded.com/stm32-potentiometer-read-examples-single-multiple-potentiometers/
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 8000480:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000484:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000488:	48ac      	ldr	r0, [pc, #688]	@ (800073c <main+0x38c>)
 800048a:	f004 fbb9 	bl	8004c00 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 800048e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000492:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000496:	48aa      	ldr	r0, [pc, #680]	@ (8000740 <main+0x390>)
 8000498:	f004 fbb2 	bl	8004c00 <HAL_ADCEx_Calibration_Start>

	//Disable the ultrasonic driver
	HAL_GPIO_WritePin(ULTRASONIC_ENABLE_GPIO_Port, ULTRASONIC_ENABLE_Pin, GPIO_PIN_SET);
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004a2:	48a8      	ldr	r0, [pc, #672]	@ (8000744 <main+0x394>)
 80004a4:	f005 fcc4 	bl	8005e30 <HAL_GPIO_WritePin>

	//Reset position at startup
	write_uint32_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_MODE, POS_MODE);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2105      	movs	r1, #5
 80004ac:	202c      	movs	r0, #44	@ 0x2c
 80004ae:	f001 fb39 	bl	8001b24 <write_uint32_to_slave>
	HAL_Delay(10);
 80004b2:	200a      	movs	r0, #10
 80004b4:	f002 fa18 	bl	80028e8 <HAL_Delay>
	write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, -0.5);
 80004b8:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 80004bc:	2100      	movs	r1, #0
 80004be:	202c      	movs	r0, #44	@ 0x2c
 80004c0:	f001 fb0c 	bl	8001adc <write_float_to_slave>

	write_uint32_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_MODE, SPD_MODE);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2105      	movs	r1, #5
 80004c8:	2028      	movs	r0, #40	@ 0x28
 80004ca:	f001 fb2b 	bl	8001b24 <write_uint32_to_slave>
	write_float_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_SPEED, 0);
 80004ce:	ed9f 0a9e 	vldr	s0, [pc, #632]	@ 8000748 <main+0x398>
 80004d2:	2101      	movs	r1, #1
 80004d4:	2028      	movs	r0, #40	@ 0x28
 80004d6:	f001 fb01 	bl	8001adc <write_float_to_slave>

	write_uint32_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_MODE, SPD_MODE);
 80004da:	2201      	movs	r2, #1
 80004dc:	2105      	movs	r1, #5
 80004de:	202a      	movs	r0, #42	@ 0x2a
 80004e0:	f001 fb20 	bl	8001b24 <write_uint32_to_slave>
	write_float_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_SPEED, 0);
 80004e4:	ed9f 0a98 	vldr	s0, [pc, #608]	@ 8000748 <main+0x398>
 80004e8:	2101      	movs	r1, #1
 80004ea:	202a      	movs	r0, #42	@ 0x2a
 80004ec:	f001 faf6 	bl	8001adc <write_float_to_slave>

	write_uint32_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_MODE, SPD_MODE);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2105      	movs	r1, #5
 80004f4:	202c      	movs	r0, #44	@ 0x2c
 80004f6:	f001 fb15 	bl	8001b24 <write_uint32_to_slave>

	while (1)
	{
		prepare_READ_packet(tx_buffer, VIRTUAL_MEM_POSITION_MEAS);
 80004fa:	2103      	movs	r1, #3
 80004fc:	4893      	ldr	r0, [pc, #588]	@ (800074c <main+0x39c>)
 80004fe:	f001 fc61 	bl	8001dc4 <prepare_READ_packet>
		HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_MOTOR_Z, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 8000502:	2364      	movs	r3, #100	@ 0x64
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2307      	movs	r3, #7
 8000508:	4a90      	ldr	r2, [pc, #576]	@ (800074c <main+0x39c>)
 800050a:	212c      	movs	r1, #44	@ 0x2c
 800050c:	4890      	ldr	r0, [pc, #576]	@ (8000750 <main+0x3a0>)
 800050e:	f005 fd5f 	bl	8005fd0 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive_IT(&hi2c1, ADDRESS_MOTOR_Z, rx_buffer, MAX_COMM_BUFFER_SIZE);
 8000512:	2307      	movs	r3, #7
 8000514:	4a8f      	ldr	r2, [pc, #572]	@ (8000754 <main+0x3a4>)
 8000516:	212c      	movs	r1, #44	@ 0x2c
 8000518:	488d      	ldr	r0, [pc, #564]	@ (8000750 <main+0x3a0>)
 800051a:	f005 fe71 	bl	8006200 <HAL_I2C_Master_Receive_IT>

		HAL_Delay(10);
 800051e:	200a      	movs	r0, #10
 8000520:	f002 f9e2 	bl	80028e8 <HAL_Delay>
		//		debug_head_touched = HAL_GPIO_ReadPin(PLATFORM_TOUCH_GPIO_Port, PLATFORM_TOUCH_Pin);
		//		HAL_Delay(100);
		//


		HAL_ADC_Start(&hadc1);
 8000524:	4885      	ldr	r0, [pc, #532]	@ (800073c <main+0x38c>)
 8000526:	f002 ff5b 	bl	80033e0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 800052a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800052e:	4883      	ldr	r0, [pc, #524]	@ (800073c <main+0x38c>)
 8000530:	f003 f854 	bl	80035dc <HAL_ADC_PollForConversion>
		ADC_raw[0] = HAL_ADC_GetValue(&hadc1);
 8000534:	4881      	ldr	r0, [pc, #516]	@ (800073c <main+0x38c>)
 8000536:	f003 f945 	bl	80037c4 <HAL_ADC_GetValue>
 800053a:	4603      	mov	r3, r0
 800053c:	4a86      	ldr	r2, [pc, #536]	@ (8000758 <main+0x3a8>)
 800053e:	6013      	str	r3, [r2, #0]

		HAL_ADC_Start(&hadc3);
 8000540:	4886      	ldr	r0, [pc, #536]	@ (800075c <main+0x3ac>)
 8000542:	f002 ff4d 	bl	80033e0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, 1000);
 8000546:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800054a:	4884      	ldr	r0, [pc, #528]	@ (800075c <main+0x3ac>)
 800054c:	f003 f846 	bl	80035dc <HAL_ADC_PollForConversion>
		ADC_raw[1] = HAL_ADC_GetValue(&hadc3);
 8000550:	4882      	ldr	r0, [pc, #520]	@ (800075c <main+0x3ac>)
 8000552:	f003 f937 	bl	80037c4 <HAL_ADC_GetValue>
 8000556:	4603      	mov	r3, r0
 8000558:	4a7f      	ldr	r2, [pc, #508]	@ (8000758 <main+0x3a8>)
 800055a:	6053      	str	r3, [r2, #4]

		//Enable XY jog mode
		measure_joystick_and_send_to_slave();
 800055c:	f001 f8ac 	bl	80016b8 <measure_joystick_and_send_to_slave>
		}
		HAL_Delay(100);
#endif


		if(HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_RESET && FSM_currentState != FSM_nextState)
 8000560:	2180      	movs	r1, #128	@ 0x80
 8000562:	4878      	ldr	r0, [pc, #480]	@ (8000744 <main+0x394>)
 8000564:	f005 fc4c 	bl	8005e00 <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d109      	bne.n	8000582 <main+0x1d2>
 800056e:	4b7c      	ldr	r3, [pc, #496]	@ (8000760 <main+0x3b0>)
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	4b7c      	ldr	r3, [pc, #496]	@ (8000764 <main+0x3b4>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	429a      	cmp	r2, r3
 8000578:	d003      	beq.n	8000582 <main+0x1d2>
		{
			FSM_currentState = FSM_nextState;
 800057a:	4b7a      	ldr	r3, [pc, #488]	@ (8000764 <main+0x3b4>)
 800057c:	781a      	ldrb	r2, [r3, #0]
 800057e:	4b78      	ldr	r3, [pc, #480]	@ (8000760 <main+0x3b0>)
 8000580:	701a      	strb	r2, [r3, #0]
			// second bond
			// wire cut
			// Reset position
		}

		switch(FSM_currentState){
 8000582:	4b77      	ldr	r3, [pc, #476]	@ (8000760 <main+0x3b0>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	3b01      	subs	r3, #1
 8000588:	2b09      	cmp	r3, #9
 800058a:	f200 817b 	bhi.w	8000884 <main+0x4d4>
 800058e:	a201      	add	r2, pc, #4	@ (adr r2, 8000594 <main+0x1e4>)
 8000590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000594:	080005bd 	.word	0x080005bd
 8000598:	080005ef 	.word	0x080005ef
 800059c:	08000619 	.word	0x08000619
 80005a0:	080006bd 	.word	0x080006bd
 80005a4:	08000789 	.word	0x08000789
 80005a8:	080007b3 	.word	0x080007b3
 80005ac:	08000885 	.word	0x08000885
 80005b0:	08000885 	.word	0x08000885
 80005b4:	08000885 	.word	0x08000885
 80005b8:	08000867 	.word	0x08000867
		case FIRST_SEARCH_HEIGHT:
			HAL_GPIO_WritePin(SOLENOID_LOCK_GPIO_Port, SOLENOID_LOCK_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2101      	movs	r1, #1
 80005c0:	4860      	ldr	r0, [pc, #384]	@ (8000744 <main+0x394>)
 80005c2:	f005 fc35 	bl	8005e30 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80005c6:	20c8      	movs	r0, #200	@ 0xc8
 80005c8:	f002 f98e 	bl	80028e8 <HAL_Delay>
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, search_height_1);
 80005cc:	4b66      	ldr	r3, [pc, #408]	@ (8000768 <main+0x3b8>)
 80005ce:	edd3 7a00 	vldr	s15, [r3]
 80005d2:	eeb0 0a67 	vmov.f32	s0, s15
 80005d6:	2100      	movs	r1, #0
 80005d8:	202c      	movs	r0, #44	@ 0x2c
 80005da:	f001 fa7f 	bl	8001adc <write_float_to_slave>
			HAL_Delay(4000);
 80005de:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80005e2:	f002 f981 	bl	80028e8 <HAL_Delay>
			//HAL_I2C_Master_Receive_IT(&hi2c1, ADDRESS_MOTOR_Z, rx_buffer, MAX_COMM_BUFFER_SIZE);

			// Se non va sostituire con delay

			//if(read_position == search_height_1)
			FSM_nextState = START_DESCEND1;
 80005e6:	4b5f      	ldr	r3, [pc, #380]	@ (8000764 <main+0x3b4>)
 80005e8:	2202      	movs	r2, #2
 80005ea:	701a      	strb	r2, [r3, #0]
			break;
 80005ec:	e14b      	b.n	8000886 <main+0x4d6>
		case START_DESCEND1:
			HAL_GPIO_WritePin(SOLENOID_LOCK_GPIO_Port, SOLENOID_LOCK_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2101      	movs	r1, #1
 80005f2:	4854      	ldr	r0, [pc, #336]	@ (8000744 <main+0x394>)
 80005f4:	f005 fc1c 	bl	8005e30 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80005f8:	20c8      	movs	r0, #200	@ 0xc8
 80005fa:	f002 f975 	bl	80028e8 <HAL_Delay>
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, -1);
 80005fe:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8000602:	2100      	movs	r1, #0
 8000604:	202c      	movs	r0, #44	@ 0x2c
 8000606:	f001 fa69 	bl	8001adc <write_float_to_slave>
			FSM_currentState = BOND1;
 800060a:	4b55      	ldr	r3, [pc, #340]	@ (8000760 <main+0x3b0>)
 800060c:	2203      	movs	r2, #3
 800060e:	701a      	strb	r2, [r3, #0]
			FSM_nextState = BOND1;
 8000610:	4b54      	ldr	r3, [pc, #336]	@ (8000764 <main+0x3b4>)
 8000612:	2203      	movs	r2, #3
 8000614:	701a      	strb	r2, [r3, #0]
			break;
 8000616:	e136      	b.n	8000886 <main+0x4d6>
		case BOND1:
			// Posso bloccare il resto mentre faccio primo bond
			HAL_Delay(200);
 8000618:	20c8      	movs	r0, #200	@ 0xc8
 800061a:	f002 f965 	bl	80028e8 <HAL_Delay>
			prepare_READ_packet(tx_buffer, VIRTUAL_MEM_POSITION_MEAS);
 800061e:	2103      	movs	r1, #3
 8000620:	484a      	ldr	r0, [pc, #296]	@ (800074c <main+0x39c>)
 8000622:	f001 fbcf 	bl	8001dc4 <prepare_READ_packet>
			HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_MOTOR_Z, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 8000626:	2364      	movs	r3, #100	@ 0x64
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2307      	movs	r3, #7
 800062c:	4a47      	ldr	r2, [pc, #284]	@ (800074c <main+0x39c>)
 800062e:	212c      	movs	r1, #44	@ 0x2c
 8000630:	4847      	ldr	r0, [pc, #284]	@ (8000750 <main+0x3a0>)
 8000632:	f005 fccd 	bl	8005fd0 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive_IT(&hi2c1, ADDRESS_MOTOR_Z, rx_buffer, MAX_COMM_BUFFER_SIZE);
 8000636:	2307      	movs	r3, #7
 8000638:	4a46      	ldr	r2, [pc, #280]	@ (8000754 <main+0x3a4>)
 800063a:	212c      	movs	r1, #44	@ 0x2c
 800063c:	4844      	ldr	r0, [pc, #272]	@ (8000750 <main+0x3a0>)
 800063e:	f005 fddf 	bl	8006200 <HAL_I2C_Master_Receive_IT>
			if(head_touched){
 8000642:	4b4a      	ldr	r3, [pc, #296]	@ (800076c <main+0x3bc>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d031      	beq.n	80006ae <main+0x2fe>
				write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, read_position - further_descent);
 800064a:	4b49      	ldr	r3, [pc, #292]	@ (8000770 <main+0x3c0>)
 800064c:	ed93 7a00 	vldr	s14, [r3]
 8000650:	4b48      	ldr	r3, [pc, #288]	@ (8000774 <main+0x3c4>)
 8000652:	edd3 7a00 	vldr	s15, [r3]
 8000656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800065a:	eeb0 0a67 	vmov.f32	s0, s15
 800065e:	2100      	movs	r1, #0
 8000660:	202c      	movs	r0, #44	@ 0x2c
 8000662:	f001 fa3b 	bl	8001adc <write_float_to_slave>
				HAL_Delay(1000);
 8000666:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800066a:	f002 f93d 	bl	80028e8 <HAL_Delay>
				perform_bond(bond_time_1);
 800066e:	4b42      	ldr	r3, [pc, #264]	@ (8000778 <main+0x3c8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fa76 	bl	8001b64 <perform_bond>
				// Open clamp solenoid
				HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2108      	movs	r1, #8
 800067c:	483f      	ldr	r0, [pc, #252]	@ (800077c <main+0x3cc>)
 800067e:	f005 fbd7 	bl	8005e30 <HAL_GPIO_WritePin>
				//Go to loop height
				write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, (read_position - further_descent) + loop_height);
 8000682:	4b3b      	ldr	r3, [pc, #236]	@ (8000770 <main+0x3c0>)
 8000684:	ed93 7a00 	vldr	s14, [r3]
 8000688:	4b3a      	ldr	r3, [pc, #232]	@ (8000774 <main+0x3c4>)
 800068a:	edd3 7a00 	vldr	s15, [r3]
 800068e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000692:	4b3b      	ldr	r3, [pc, #236]	@ (8000780 <main+0x3d0>)
 8000694:	edd3 7a00 	vldr	s15, [r3]
 8000698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800069c:	eeb0 0a67 	vmov.f32	s0, s15
 80006a0:	2100      	movs	r1, #0
 80006a2:	202c      	movs	r0, #44	@ 0x2c
 80006a4:	f001 fa1a 	bl	8001adc <write_float_to_slave>
				FSM_nextState = SECOND_SEARCH_HEIGHT;
 80006a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000764 <main+0x3b4>)
 80006aa:	2204      	movs	r2, #4
 80006ac:	701a      	strb	r2, [r3, #0]
			}
			head_touched = false;
 80006ae:	4b2f      	ldr	r3, [pc, #188]	@ (800076c <main+0x3bc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 80006b4:	2064      	movs	r0, #100	@ 0x64
 80006b6:	f002 f917 	bl	80028e8 <HAL_Delay>
			break;
 80006ba:	e0e4      	b.n	8000886 <main+0x4d6>
		case SECOND_SEARCH_HEIGHT:
			HAL_GPIO_WritePin(SOLENOID_LOCK_GPIO_Port, SOLENOID_LOCK_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2101      	movs	r1, #1
 80006c0:	4820      	ldr	r0, [pc, #128]	@ (8000744 <main+0x394>)
 80006c2:	f005 fbb5 	bl	8005e30 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80006c6:	20c8      	movs	r0, #200	@ 0xc8
 80006c8:	f002 f90e 	bl	80028e8 <HAL_Delay>
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, search_height_2);
 80006cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <main+0x3d4>)
 80006ce:	edd3 7a00 	vldr	s15, [r3]
 80006d2:	eeb0 0a67 	vmov.f32	s0, s15
 80006d6:	2100      	movs	r1, #0
 80006d8:	202c      	movs	r0, #44	@ 0x2c
 80006da:	f001 f9ff 	bl	8001adc <write_float_to_slave>
			HAL_Delay(4000);
 80006de:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80006e2:	f002 f901 	bl	80028e8 <HAL_Delay>
			//prepare_READ_packet(tx_buffer, VIRTUAL_MEM_POSITION_MEAS);
			//HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_MOTOR_Z, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
			//HAL_I2C_Master_Receive_IT(&hi2c1, ADDRESS_MOTOR_Z, rx_buffer, MAX_COMM_BUFFER_SIZE);

			//if(read_position == search_height_2)
			FSM_nextState = START_DESCEND2;
 80006e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <main+0x3b4>)
 80006e8:	2205      	movs	r2, #5
 80006ea:	701a      	strb	r2, [r3, #0]
			break;
 80006ec:	e0cb      	b.n	8000886 <main+0x4d6>
 80006ee:	bf00      	nop
 80006f0:	240005c4 	.word	0x240005c4
 80006f4:	240005c8 	.word	0x240005c8
 80006f8:	240005cc 	.word	0x240005cc
 80006fc:	240005d0 	.word	0x240005d0
 8000700:	240005d4 	.word	0x240005d4
 8000704:	240005d8 	.word	0x240005d8
 8000708:	240005dc 	.word	0x240005dc
 800070c:	240005e0 	.word	0x240005e0
 8000710:	24000600 	.word	0x24000600
 8000714:	240005f0 	.word	0x240005f0
 8000718:	240005f1 	.word	0x240005f1
 800071c:	24000594 	.word	0x24000594
 8000720:	24000598 	.word	0x24000598
 8000724:	2400059c 	.word	0x2400059c
 8000728:	240005a0 	.word	0x240005a0
 800072c:	240005ec 	.word	0x240005ec
 8000730:	240004fc 	.word	0x240004fc
 8000734:	24000548 	.word	0x24000548
 8000738:	240005c0 	.word	0x240005c0
 800073c:	24000244 	.word	0x24000244
 8000740:	240002b4 	.word	0x240002b4
 8000744:	58021400 	.word	0x58021400
 8000748:	00000000 	.word	0x00000000
 800074c:	2400067c 	.word	0x2400067c
 8000750:	24000420 	.word	0x24000420
 8000754:	24000684 	.word	0x24000684
 8000758:	240005f4 	.word	0x240005f4
 800075c:	24000324 	.word	0x24000324
 8000760:	2400001c 	.word	0x2400001c
 8000764:	240005fd 	.word	0x240005fd
 8000768:	24000000 	.word	0x24000000
 800076c:	240005b0 	.word	0x240005b0
 8000770:	240005ac 	.word	0x240005ac
 8000774:	24000008 	.word	0x24000008
 8000778:	24000014 	.word	0x24000014
 800077c:	58020400 	.word	0x58020400
 8000780:	2400000c 	.word	0x2400000c
 8000784:	24000004 	.word	0x24000004
		case START_DESCEND2:
			HAL_GPIO_WritePin(SOLENOID_LOCK_GPIO_Port, SOLENOID_LOCK_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2101      	movs	r1, #1
 800078c:	4866      	ldr	r0, [pc, #408]	@ (8000928 <main+0x578>)
 800078e:	f005 fb4f 	bl	8005e30 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000792:	20c8      	movs	r0, #200	@ 0xc8
 8000794:	f002 f8a8 	bl	80028e8 <HAL_Delay>
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, -1);
 8000798:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800079c:	2100      	movs	r1, #0
 800079e:	202c      	movs	r0, #44	@ 0x2c
 80007a0:	f001 f99c 	bl	8001adc <write_float_to_slave>
			FSM_currentState = BOND2;
 80007a4:	4b61      	ldr	r3, [pc, #388]	@ (800092c <main+0x57c>)
 80007a6:	2206      	movs	r2, #6
 80007a8:	701a      	strb	r2, [r3, #0]
			FSM_nextState = BOND2;
 80007aa:	4b61      	ldr	r3, [pc, #388]	@ (8000930 <main+0x580>)
 80007ac:	2206      	movs	r2, #6
 80007ae:	701a      	strb	r2, [r3, #0]
			break;
 80007b0:	e069      	b.n	8000886 <main+0x4d6>

		case BOND2:
			// Posso bloccare il resto mentre faccio primo bond
			prepare_READ_packet(tx_buffer, VIRTUAL_MEM_POSITION_MEAS);
 80007b2:	2103      	movs	r1, #3
 80007b4:	485f      	ldr	r0, [pc, #380]	@ (8000934 <main+0x584>)
 80007b6:	f001 fb05 	bl	8001dc4 <prepare_READ_packet>
			HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_MOTOR_Z, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 80007ba:	2364      	movs	r3, #100	@ 0x64
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2307      	movs	r3, #7
 80007c0:	4a5c      	ldr	r2, [pc, #368]	@ (8000934 <main+0x584>)
 80007c2:	212c      	movs	r1, #44	@ 0x2c
 80007c4:	485c      	ldr	r0, [pc, #368]	@ (8000938 <main+0x588>)
 80007c6:	f005 fc03 	bl	8005fd0 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive_IT(&hi2c1, ADDRESS_MOTOR_Z, rx_buffer, MAX_COMM_BUFFER_SIZE);
 80007ca:	2307      	movs	r3, #7
 80007cc:	4a5b      	ldr	r2, [pc, #364]	@ (800093c <main+0x58c>)
 80007ce:	212c      	movs	r1, #44	@ 0x2c
 80007d0:	4859      	ldr	r0, [pc, #356]	@ (8000938 <main+0x588>)
 80007d2:	f005 fd15 	bl	8006200 <HAL_I2C_Master_Receive_IT>
			if(head_touched){
 80007d6:	4b5a      	ldr	r3, [pc, #360]	@ (8000940 <main+0x590>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d03c      	beq.n	8000858 <main+0x4a8>
				write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, read_position - further_descent);
 80007de:	4b59      	ldr	r3, [pc, #356]	@ (8000944 <main+0x594>)
 80007e0:	ed93 7a00 	vldr	s14, [r3]
 80007e4:	4b58      	ldr	r3, [pc, #352]	@ (8000948 <main+0x598>)
 80007e6:	edd3 7a00 	vldr	s15, [r3]
 80007ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007ee:	eeb0 0a67 	vmov.f32	s0, s15
 80007f2:	2100      	movs	r1, #0
 80007f4:	202c      	movs	r0, #44	@ 0x2c
 80007f6:	f001 f971 	bl	8001adc <write_float_to_slave>
				HAL_Delay(1000);
 80007fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007fe:	f002 f873 	bl	80028e8 <HAL_Delay>
				perform_bond(bond_time_2);
 8000802:	4b52      	ldr	r3, [pc, #328]	@ (800094c <main+0x59c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f001 f9ac 	bl	8001b64 <perform_bond>


				HAL_GPIO_WritePin(SOLENOID_TEAR_2_GPIO_Port, SOLENOID_TEAR_2_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	2110      	movs	r1, #16
 8000810:	484f      	ldr	r0, [pc, #316]	@ (8000950 <main+0x5a0>)
 8000812:	f005 fb0d 	bl	8005e30 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081c:	484d      	ldr	r0, [pc, #308]	@ (8000954 <main+0x5a4>)
 800081e:	f005 fb07 	bl	8005e30 <HAL_GPIO_WritePin>

				HAL_Delay(1000);
 8000822:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000826:	f002 f85f 	bl	80028e8 <HAL_Delay>

				// Close clamp solenoid
				HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2108      	movs	r1, #8
 800082e:	4848      	ldr	r0, [pc, #288]	@ (8000950 <main+0x5a0>)
 8000830:	f005 fafe 	bl	8005e30 <HAL_GPIO_WritePin>
				// Strappo
				HAL_GPIO_WritePin(SOLENOID_TEAR_2_GPIO_Port, SOLENOID_TEAR_2_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2110      	movs	r1, #16
 8000838:	4845      	ldr	r0, [pc, #276]	@ (8000950 <main+0x5a0>)
 800083a:	f005 faf9 	bl	8005e30 <HAL_GPIO_WritePin>

				// Go back up
				write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, 0);
 800083e:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8000958 <main+0x5a8>
 8000842:	2100      	movs	r1, #0
 8000844:	202c      	movs	r0, #44	@ 0x2c
 8000846:	f001 f949 	bl	8001adc <write_float_to_slave>

				HAL_Delay(1000);
 800084a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800084e:	f002 f84b 	bl	80028e8 <HAL_Delay>

				FSM_nextState = RESET_POSITION;
 8000852:	4b37      	ldr	r3, [pc, #220]	@ (8000930 <main+0x580>)
 8000854:	220a      	movs	r2, #10
 8000856:	701a      	strb	r2, [r3, #0]
			}
			head_touched = false;
 8000858:	4b39      	ldr	r3, [pc, #228]	@ (8000940 <main+0x590>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
			HAL_Delay(100);
 800085e:	2064      	movs	r0, #100	@ 0x64
 8000860:	f002 f842 	bl	80028e8 <HAL_Delay>
			break;
 8000864:	e00f      	b.n	8000886 <main+0x4d6>
		case RESET_POSITION:
			HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800086c:	4839      	ldr	r0, [pc, #228]	@ (8000954 <main+0x5a4>)
 800086e:	f005 fadf 	bl	8005e30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2108      	movs	r1, #8
 8000876:	4836      	ldr	r0, [pc, #216]	@ (8000950 <main+0x5a0>)
 8000878:	f005 fada 	bl	8005e30 <HAL_GPIO_WritePin>

			FSM_nextState = FIRST_SEARCH_HEIGHT;
 800087c:	4b2c      	ldr	r3, [pc, #176]	@ (8000930 <main+0x580>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
			break;
 8000882:	e000      	b.n	8000886 <main+0x4d6>
		default:
			break;
 8000884:	bf00      	nop
			fine_adjustment = 0;
		}
#endif

#if 1
		if(solenoid_tear_1_status)
 8000886:	4b35      	ldr	r3, [pc, #212]	@ (800095c <main+0x5ac>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d006      	beq.n	800089c <main+0x4ec>
			HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000894:	482f      	ldr	r0, [pc, #188]	@ (8000954 <main+0x5a4>)
 8000896:	f005 facb 	bl	8005e30 <HAL_GPIO_WritePin>
 800089a:	e005      	b.n	80008a8 <main+0x4f8>
		else
			HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008a2:	482c      	ldr	r0, [pc, #176]	@ (8000954 <main+0x5a4>)
 80008a4:	f005 fac4 	bl	8005e30 <HAL_GPIO_WritePin>

		if(solenoid_tear_2_status)
 80008a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000960 <main+0x5b0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d005      	beq.n	80008bc <main+0x50c>
			HAL_GPIO_WritePin(SOLENOID_TEAR_2_GPIO_Port, SOLENOID_TEAR_2_Pin, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2110      	movs	r1, #16
 80008b4:	4826      	ldr	r0, [pc, #152]	@ (8000950 <main+0x5a0>)
 80008b6:	f005 fabb 	bl	8005e30 <HAL_GPIO_WritePin>
 80008ba:	e004      	b.n	80008c6 <main+0x516>
		else
			HAL_GPIO_WritePin(SOLENOID_TEAR_2_GPIO_Port, SOLENOID_TEAR_2_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2110      	movs	r1, #16
 80008c0:	4823      	ldr	r0, [pc, #140]	@ (8000950 <main+0x5a0>)
 80008c2:	f005 fab5 	bl	8005e30 <HAL_GPIO_WritePin>

		if(solenoid_tear_clamp_status)
 80008c6:	4b27      	ldr	r3, [pc, #156]	@ (8000964 <main+0x5b4>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d005      	beq.n	80008da <main+0x52a>
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2108      	movs	r1, #8
 80008d2:	481f      	ldr	r0, [pc, #124]	@ (8000950 <main+0x5a0>)
 80008d4:	f005 faac 	bl	8005e30 <HAL_GPIO_WritePin>
 80008d8:	e004      	b.n	80008e4 <main+0x534>
		else
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2108      	movs	r1, #8
 80008de:	481c      	ldr	r0, [pc, #112]	@ (8000950 <main+0x5a0>)
 80008e0:	f005 faa6 	bl	8005e30 <HAL_GPIO_WritePin>

		if(solenoid_lock_status)
 80008e4:	4b20      	ldr	r3, [pc, #128]	@ (8000968 <main+0x5b8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d005      	beq.n	80008f8 <main+0x548>
			HAL_GPIO_WritePin(SOLENOID_LOCK_GPIO_Port, SOLENOID_LOCK_Pin, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2101      	movs	r1, #1
 80008f0:	480d      	ldr	r0, [pc, #52]	@ (8000928 <main+0x578>)
 80008f2:	f005 fa9d 	bl	8005e30 <HAL_GPIO_WritePin>
 80008f6:	e004      	b.n	8000902 <main+0x552>
		else
			HAL_GPIO_WritePin(SOLENOID_LOCK_GPIO_Port, SOLENOID_LOCK_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2101      	movs	r1, #1
 80008fc:	480a      	ldr	r0, [pc, #40]	@ (8000928 <main+0x578>)
 80008fe:	f005 fa97 	bl	8005e30 <HAL_GPIO_WritePin>

		if(lamp_status)
 8000902:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <main+0x5bc>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d005      	beq.n	8000916 <main+0x566>
			HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	2102      	movs	r1, #2
 800090e:	4806      	ldr	r0, [pc, #24]	@ (8000928 <main+0x578>)
 8000910:	f005 fa8e 	bl	8005e30 <HAL_GPIO_WritePin>
 8000914:	e004      	b.n	8000920 <main+0x570>
		else
			HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2102      	movs	r1, #2
 800091a:	4803      	ldr	r0, [pc, #12]	@ (8000928 <main+0x578>)
 800091c:	f005 fa88 	bl	8005e30 <HAL_GPIO_WritePin>
		//HAL_I2C_Master_Seq_Receive_IT(&hi2c1, ADDRESS_MOTOR_X, rx_buffer, MAX_COMM_BUFFER_SIZE, I2C_FIRST_AND_LAST_FRAME);

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_Delay(100);
 8000920:	2064      	movs	r0, #100	@ 0x64
 8000922:	f001 ffe1 	bl	80028e8 <HAL_Delay>
		prepare_READ_packet(tx_buffer, VIRTUAL_MEM_POSITION_MEAS);
 8000926:	e5e8      	b.n	80004fa <main+0x14a>
 8000928:	58021400 	.word	0x58021400
 800092c:	2400001c 	.word	0x2400001c
 8000930:	240005fd 	.word	0x240005fd
 8000934:	2400067c 	.word	0x2400067c
 8000938:	24000420 	.word	0x24000420
 800093c:	24000684 	.word	0x24000684
 8000940:	240005b0 	.word	0x240005b0
 8000944:	240005ac 	.word	0x240005ac
 8000948:	24000008 	.word	0x24000008
 800094c:	24000018 	.word	0x24000018
 8000950:	58020400 	.word	0x58020400
 8000954:	58020800 	.word	0x58020800
 8000958:	00000000 	.word	0x00000000
 800095c:	240005d4 	.word	0x240005d4
 8000960:	240005d8 	.word	0x240005d8
 8000964:	240005dc 	.word	0x240005dc
 8000968:	240005e4 	.word	0x240005e4
 800096c:	240005e8 	.word	0x240005e8

08000970 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b09c      	sub	sp, #112	@ 0x70
 8000974:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097a:	224c      	movs	r2, #76	@ 0x4c
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f00e fdb3 	bl	800f4ea <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2220      	movs	r2, #32
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f00e fdad 	bl	800f4ea <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000990:	2002      	movs	r0, #2
 8000992:	f007 fd1f 	bl	80083d4 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a48 <SystemClock_Config+0xd8>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a2a      	ldr	r2, [pc, #168]	@ (8000a48 <SystemClock_Config+0xd8>)
 80009a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	4b28      	ldr	r3, [pc, #160]	@ (8000a48 <SystemClock_Config+0xd8>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009b2:	bf00      	nop
 80009b4:	4b24      	ldr	r3, [pc, #144]	@ (8000a48 <SystemClock_Config+0xd8>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009c0:	d1f8      	bne.n	80009b4 <SystemClock_Config+0x44>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c2:	2302      	movs	r3, #2
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 80009ca:	2340      	movs	r3, #64	@ 0x40
 80009cc:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ce:	2302      	movs	r3, #2
 80009d0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009d2:	2300      	movs	r3, #0
 80009d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80009d6:	2304      	movs	r3, #4
 80009d8:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 80009da:	230c      	movs	r3, #12
 80009dc:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 80009de:	2301      	movs	r3, #1
 80009e0:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80009e2:	2304      	movs	r3, #4
 80009e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009ea:	230c      	movs	r3, #12
 80009ec:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009fa:	4618      	mov	r0, r3
 80009fc:	f007 fd24 	bl	8008448 <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000a06:	f001 f997 	bl	8001d38 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	233f      	movs	r3, #63	@ 0x3f
 8000a0c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a1a:	2340      	movs	r3, #64	@ 0x40
 8000a1c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a1e:	2340      	movs	r3, #64	@ 0x40
 8000a20:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a26:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a28:	2340      	movs	r3, #64	@ 0x40
 8000a2a:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2102      	movs	r1, #2
 8000a30:	4618      	mov	r0, r3
 8000a32:	f008 f8e3 	bl	8008bfc <HAL_RCC_ClockConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0xd0>
	{
		Error_Handler();
 8000a3c:	f001 f97c 	bl	8001d38 <Error_Handler>
	}
}
 8000a40:	bf00      	nop
 8000a42:	3770      	adds	r7, #112	@ 0x70
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	58024800 	.word	0x58024800

08000a4c <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b0ae      	sub	sp, #184	@ 0xb8
 8000a50:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a52:	463b      	mov	r3, r7
 8000a54:	22b8      	movs	r2, #184	@ 0xb8
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f00e fd46 	bl	800f4ea <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a5e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a62:	f04f 0300 	mov.w	r3, #0
 8000a66:	e9c7 2300 	strd	r2, r3, [r7]
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a7e:	23c0      	movs	r3, #192	@ 0xc0
 8000a80:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8000a86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a92:	463b      	mov	r3, r7
 8000a94:	4618      	mov	r0, r3
 8000a96:	f008 fc27 	bl	80092e8 <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <PeriphCommonClock_Config+0x58>
	{
		Error_Handler();
 8000aa0:	f001 f94a 	bl	8001d38 <Error_Handler>
	}
}
 8000aa4:	bf00      	nop
 8000aa6:	37b8      	adds	r7, #184	@ 0xb8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	@ 0x30
 8000ab0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8000ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000abe:	463b      	mov	r3, r7
 8000ac0:	2224      	movs	r2, #36	@ 0x24
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f00e fd10 	bl	800f4ea <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000aca:	4b32      	ldr	r3, [pc, #200]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000acc:	4a32      	ldr	r2, [pc, #200]	@ (8000b98 <MX_ADC1_Init+0xec>)
 8000ace:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ad0:	4b30      	ldr	r3, [pc, #192]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000ad8:	221c      	movs	r2, #28
 8000ada:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000adc:	4b2d      	ldr	r3, [pc, #180]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000aee:	4b29      	ldr	r3, [pc, #164]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8000af4:	4b27      	ldr	r3, [pc, #156]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000afa:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b02:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b08:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b14:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc1.Init.OversamplingMode = DISABLE;
 8000b20:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	hadc1.Init.Oversampling.Ratio = 1;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b2e:	4819      	ldr	r0, [pc, #100]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000b30:	f002 fa4e 	bl	8002fd0 <HAL_ADC_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_ADC1_Init+0x92>
	{
		Error_Handler();
 8000b3a:	f001 f8fd 	bl	8001d38 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	4812      	ldr	r0, [pc, #72]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000b4a:	f004 f8ef 	bl	8004d2c <HAL_ADCEx_MultiModeConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 8000b54:	f001 f8f0 	bl	8001d38 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000b58:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <MX_ADC1_Init+0xf0>)
 8000b5a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b5c:	2306      	movs	r3, #6
 8000b5e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b64:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b68:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <MX_ADC1_Init+0xe8>)
 8000b7e:	f003 f87d 	bl	8003c7c <HAL_ADC_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_ADC1_Init+0xe0>
	{
		Error_Handler();
 8000b88:	f001 f8d6 	bl	8001d38 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	3730      	adds	r7, #48	@ 0x30
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	24000244 	.word	0x24000244
 8000b98:	40022000 	.word	0x40022000
 8000b9c:	08600004 	.word	0x08600004

08000ba0 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	@ 0x28
 8000ba4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2224      	movs	r2, #36	@ 0x24
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f00e fc9c 	bl	800f4ea <memset>

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8000bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c64 <MX_ADC2_Init+0xc4>)
 8000bb4:	4a2c      	ldr	r2, [pc, #176]	@ (8000c68 <MX_ADC2_Init+0xc8>)
 8000bb6:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c64 <MX_ADC2_Init+0xc4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000bbe:	4b29      	ldr	r3, [pc, #164]	@ (8000c64 <MX_ADC2_Init+0xc4>)
 8000bc0:	2208      	movs	r2, #8
 8000bc2:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bc4:	4b27      	ldr	r3, [pc, #156]	@ (8000c64 <MX_ADC2_Init+0xc4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bca:	4b26      	ldr	r3, [pc, #152]	@ (8000c64 <MX_ADC2_Init+0xc4>)
 8000bcc:	2204      	movs	r2, #4
 8000bce:	615a      	str	r2, [r3, #20]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8000bd0:	4b24      	ldr	r3, [pc, #144]	@ (8000c64 <MX_ADC2_Init+0xc4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	761a      	strb	r2, [r3, #24]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000bd6:	4b23      	ldr	r3, [pc, #140]	@ (8000c64 <MX_ADC2_Init+0xc4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	765a      	strb	r2, [r3, #25]
	hadc2.Init.NbrOfConversion = 1;
 8000bdc:	4b21      	ldr	r3, [pc, #132]	@ (8000c64 <MX_ADC2_Init+0xc4>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	61da      	str	r2, [r3, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000be2:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <MX_ADC2_Init+0xc4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bea:	4b1e      	ldr	r3, [pc, #120]	@ (8000c64 <MX_ADC2_Init+0xc4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <MX_ADC2_Init+0xc4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c64 <MX_ADC2_Init+0xc4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bfc:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <MX_ADC2_Init+0xc4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c02:	4b18      	ldr	r3, [pc, #96]	@ (8000c64 <MX_ADC2_Init+0xc4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc2.Init.OversamplingMode = DISABLE;
 8000c08:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <MX_ADC2_Init+0xc4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	hadc2.Init.Oversampling.Ratio = 1;
 8000c10:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <MX_ADC2_Init+0xc4>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c16:	4813      	ldr	r0, [pc, #76]	@ (8000c64 <MX_ADC2_Init+0xc4>)
 8000c18:	f002 f9da 	bl	8002fd0 <HAL_ADC_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC2_Init+0x86>
	{
		Error_Handler();
 8000c22:	f001 f889 	bl	8001d38 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_ADC2_Init+0xcc>)
 8000c28:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c2a:	2306      	movs	r3, #6
 8000c2c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c32:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c36:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4806      	ldr	r0, [pc, #24]	@ (8000c64 <MX_ADC2_Init+0xc4>)
 8000c4c:	f003 f816 	bl	8003c7c <HAL_ADC_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC2_Init+0xba>
	{
		Error_Handler();
 8000c56:	f001 f86f 	bl	8001d38 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	@ 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	240002b4 	.word	0x240002b4
 8000c68:	40022100 	.word	0x40022100
 8000c6c:	14f00020 	.word	0x14f00020

08000c70 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	@ 0x28
 8000c74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2224      	movs	r2, #36	@ 0x24
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f00e fc34 	bl	800f4ea <memset>

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 8000c82:	4b32      	ldr	r3, [pc, #200]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000c84:	4a32      	ldr	r2, [pc, #200]	@ (8000d50 <MX_ADC3_Init+0xe0>)
 8000c86:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c88:	4b30      	ldr	r3, [pc, #192]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8000c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000c90:	221c      	movs	r2, #28
 8000c92:	609a      	str	r2, [r3, #8]
	hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000c94:	4b2d      	ldr	r3, [pc, #180]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ca6:	4b29      	ldr	r3, [pc, #164]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	761a      	strb	r2, [r3, #24]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8000cac:	4b27      	ldr	r3, [pc, #156]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	765a      	strb	r2, [r3, #25]
	hadc3.Init.NbrOfConversion = 1;
 8000cb2:	4b26      	ldr	r3, [pc, #152]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	61da      	str	r2, [r3, #28]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000cb8:	4b24      	ldr	r3, [pc, #144]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc3.Init.OversamplingMode = DISABLE;
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000cfa:	4814      	ldr	r0, [pc, #80]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000cfc:	f002 f968 	bl	8002fd0 <HAL_ADC_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_ADC3_Init+0x9a>
	{
		Error_Handler();
 8000d06:	f001 f817 	bl	8001d38 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000d0a:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <MX_ADC3_Init+0xe4>)
 8000d0c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d0e:	2306      	movs	r3, #6
 8000d10:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d16:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d1a:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	@ (8000d4c <MX_ADC3_Init+0xdc>)
 8000d34:	f002 ffa2 	bl	8003c7c <HAL_ADC_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_ADC3_Init+0xd2>
	{
		Error_Handler();
 8000d3e:	f000 fffb 	bl	8001d38 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	3728      	adds	r7, #40	@ 0x28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	24000324 	.word	0x24000324
 8000d50:	58026000 	.word	0x58026000
 8000d54:	04300002 	.word	0x04300002

08000d58 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <MX_CRC_Init+0x3c>)
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d98 <MX_CRC_Init+0x40>)
 8000d60:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d62:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <MX_CRC_Init+0x3c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d68:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <MX_CRC_Init+0x3c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <MX_CRC_Init+0x3c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d74:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <MX_CRC_Init+0x3c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d7a:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <MX_CRC_Init+0x3c>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d80:	4804      	ldr	r0, [pc, #16]	@ (8000d94 <MX_CRC_Init+0x3c>)
 8000d82:	f004 fa3d 	bl	8005200 <HAL_CRC_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 8000d8c:	f000 ffd4 	bl	8001d38 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	24000394 	.word	0x24000394
 8000d98:	58024c00 	.word	0x58024c00

08000d9c <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8000da0:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <MX_DMA2D_Init+0x6c>)
 8000da2:	4a1a      	ldr	r2, [pc, #104]	@ (8000e0c <MX_DMA2D_Init+0x70>)
 8000da4:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8000da6:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <MX_DMA2D_Init+0x6c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000dac:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <MX_DMA2D_Init+0x6c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <MX_DMA2D_Init+0x6c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8000db8:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <MX_DMA2D_Init+0x6c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	645a      	str	r2, [r3, #68]	@ 0x44
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000dbe:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <MX_DMA2D_Init+0x6c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	649a      	str	r2, [r3, #72]	@ 0x48
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000dc4:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <MX_DMA2D_Init+0x6c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	64da      	str	r2, [r3, #76]	@ 0x4c
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <MX_DMA2D_Init+0x6c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	651a      	str	r2, [r3, #80]	@ 0x50
	hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e08 <MX_DMA2D_Init+0x6c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	655a      	str	r2, [r3, #84]	@ 0x54
	hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <MX_DMA2D_Init+0x6c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	659a      	str	r2, [r3, #88]	@ 0x58
	hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8000e08 <MX_DMA2D_Init+0x6c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	65da      	str	r2, [r3, #92]	@ 0x5c
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000de2:	4809      	ldr	r0, [pc, #36]	@ (8000e08 <MX_DMA2D_Init+0x6c>)
 8000de4:	f004 fd52 	bl	800588c <HAL_DMA2D_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 8000dee:	f000 ffa3 	bl	8001d38 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000df2:	2101      	movs	r1, #1
 8000df4:	4804      	ldr	r0, [pc, #16]	@ (8000e08 <MX_DMA2D_Init+0x6c>)
 8000df6:	f004 fdad 	bl	8005954 <HAL_DMA2D_ConfigLayer>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_DMA2D_Init+0x68>
	{
		Error_Handler();
 8000e00:	f000 ff9a 	bl	8001d38 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	240003b8 	.word	0x240003b8
 8000e0c:	52001000 	.word	0x52001000

08000e10 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e16:	4a1c      	ldr	r2, [pc, #112]	@ (8000e88 <MX_I2C1_Init+0x78>)
 8000e18:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10B0DCFB;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e8c <MX_I2C1_Init+0x7c>)
 8000e1e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000e20:	4b18      	ldr	r3, [pc, #96]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e26:	4b17      	ldr	r3, [pc, #92]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e2c:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000e32:	4b14      	ldr	r3, [pc, #80]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e4a:	480e      	ldr	r0, [pc, #56]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e4c:	f005 f824 	bl	8005e98 <HAL_I2C_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8000e56:	f000 ff6f 	bl	8001d38 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4809      	ldr	r0, [pc, #36]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e5e:	f007 fa21 	bl	80082a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8000e68:	f000 ff66 	bl	8001d38 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4805      	ldr	r0, [pc, #20]	@ (8000e84 <MX_I2C1_Init+0x74>)
 8000e70:	f007 fa63 	bl	800833a <HAL_I2CEx_ConfigDigitalFilter>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8000e7a:	f000 ff5d 	bl	8001d38 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	24000420 	.word	0x24000420
 8000e88:	40005400 	.word	0x40005400
 8000e8c:	10b0dcfb 	.word	0x10b0dcfb

08000e90 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000e94:	4b28      	ldr	r3, [pc, #160]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000e96:	4a29      	ldr	r2, [pc, #164]	@ (8000f3c <MX_SPI1_Init+0xac>)
 8000e98:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e9a:	4b27      	ldr	r3, [pc, #156]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000e9c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ea0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000ea2:	4b25      	ldr	r3, [pc, #148]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000ea4:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000ea8:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eaa:	4b23      	ldr	r3, [pc, #140]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eb0:	4b21      	ldr	r3, [pc, #132]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb6:	4b20      	ldr	r3, [pc, #128]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000ebe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ec2:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000ec6:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000eca:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 8000ede:	4b16      	ldr	r3, [pc, #88]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000ee6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eea:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	645a      	str	r2, [r3, #68]	@ 0x44
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f10:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	659a      	str	r2, [r3, #88]	@ 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <MX_SPI1_Init+0xa8>)
 8000f24:	f00a fdc6 	bl	800bab4 <HAL_SPI_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_SPI1_Init+0xa2>
	{
		Error_Handler();
 8000f2e:	f000 ff03 	bl	8001d38 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	24000474 	.word	0x24000474
 8000f3c:	40013000 	.word	0x40013000

08000f40 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	@ 0x38
 8000f44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000f60:	463b      	mov	r3, r7
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]
 8000f6e:	615a      	str	r2, [r3, #20]
 8000f70:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000f72:	4b2c      	ldr	r3, [pc, #176]	@ (8001024 <MX_TIM2_Init+0xe4>)
 8000f74:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f78:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 19200-1;
 8000f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001024 <MX_TIM2_Init+0xe4>)
 8000f7c:	f644 22ff 	movw	r2, #19199	@ 0x4aff
 8000f80:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f82:	4b28      	ldr	r3, [pc, #160]	@ (8001024 <MX_TIM2_Init+0xe4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000-1;
 8000f88:	4b26      	ldr	r3, [pc, #152]	@ (8001024 <MX_TIM2_Init+0xe4>)
 8000f8a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000f8e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f90:	4b24      	ldr	r3, [pc, #144]	@ (8001024 <MX_TIM2_Init+0xe4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f96:	4b23      	ldr	r3, [pc, #140]	@ (8001024 <MX_TIM2_Init+0xe4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f9c:	4821      	ldr	r0, [pc, #132]	@ (8001024 <MX_TIM2_Init+0xe4>)
 8000f9e:	f00b f984 	bl	800c2aa <HAL_TIM_Base_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM2_Init+0x6c>
	{
		Error_Handler();
 8000fa8:	f000 fec6 	bl	8001d38 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	481a      	ldr	r0, [pc, #104]	@ (8001024 <MX_TIM2_Init+0xe4>)
 8000fba:	f00b fec7 	bl	800cd4c <HAL_TIM_ConfigClockSource>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM2_Init+0x88>
	{
		Error_Handler();
 8000fc4:	f000 feb8 	bl	8001d38 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000fc8:	4816      	ldr	r0, [pc, #88]	@ (8001024 <MX_TIM2_Init+0xe4>)
 8000fca:	f00b fa4b 	bl	800c464 <HAL_TIM_OC_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM2_Init+0x98>
	{
		Error_Handler();
 8000fd4:	f000 feb0 	bl	8001d38 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480f      	ldr	r0, [pc, #60]	@ (8001024 <MX_TIM2_Init+0xe4>)
 8000fe8:	f00c fc16 	bl	800d818 <HAL_TIMEx_MasterConfigSynchronization>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM2_Init+0xb6>
	{
		Error_Handler();
 8000ff2:	f000 fea1 	bl	8001d38 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	2200      	movs	r2, #0
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	@ (8001024 <MX_TIM2_Init+0xe4>)
 800100e:	f00b fd0f 	bl	800ca30 <HAL_TIM_OC_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM2_Init+0xdc>
	{
		Error_Handler();
 8001018:	f000 fe8e 	bl	8001d38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	3738      	adds	r7, #56	@ 0x38
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	240004fc 	.word	0x240004fc

08001028 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08e      	sub	sp, #56	@ 0x38
 800102c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	615a      	str	r2, [r3, #20]
 8001058:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800105a:	4b2d      	ldr	r3, [pc, #180]	@ (8001110 <MX_TIM3_Init+0xe8>)
 800105c:	4a2d      	ldr	r2, [pc, #180]	@ (8001114 <MX_TIM3_Init+0xec>)
 800105e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 192-1;
 8001060:	4b2b      	ldr	r3, [pc, #172]	@ (8001110 <MX_TIM3_Init+0xe8>)
 8001062:	22bf      	movs	r2, #191	@ 0xbf
 8001064:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001066:	4b2a      	ldr	r3, [pc, #168]	@ (8001110 <MX_TIM3_Init+0xe8>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000-1;
 800106c:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <MX_TIM3_Init+0xe8>)
 800106e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001072:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001074:	4b26      	ldr	r3, [pc, #152]	@ (8001110 <MX_TIM3_Init+0xe8>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800107a:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <MX_TIM3_Init+0xe8>)
 800107c:	2280      	movs	r2, #128	@ 0x80
 800107e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001080:	4823      	ldr	r0, [pc, #140]	@ (8001110 <MX_TIM3_Init+0xe8>)
 8001082:	f00b f912 	bl	800c2aa <HAL_TIM_Base_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 800108c:	f000 fe54 	bl	8001d38 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001096:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800109a:	4619      	mov	r1, r3
 800109c:	481c      	ldr	r0, [pc, #112]	@ (8001110 <MX_TIM3_Init+0xe8>)
 800109e:	f00b fe55 	bl	800cd4c <HAL_TIM_ConfigClockSource>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 80010a8:	f000 fe46 	bl	8001d38 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010ac:	4818      	ldr	r0, [pc, #96]	@ (8001110 <MX_TIM3_Init+0xe8>)
 80010ae:	f00b fa3a 	bl	800c526 <HAL_TIM_PWM_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 80010b8:	f000 fe3e 	bl	8001d38 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	4811      	ldr	r0, [pc, #68]	@ (8001110 <MX_TIM3_Init+0xe8>)
 80010cc:	f00c fba4 	bl	800d818 <HAL_TIMEx_MasterConfigSynchronization>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 80010d6:	f000 fe2f 	bl	8001d38 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010da:	2360      	movs	r3, #96	@ 0x60
 80010dc:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010ea:	463b      	mov	r3, r7
 80010ec:	2208      	movs	r2, #8
 80010ee:	4619      	mov	r1, r3
 80010f0:	4807      	ldr	r0, [pc, #28]	@ (8001110 <MX_TIM3_Init+0xe8>)
 80010f2:	f00b fd17 	bl	800cb24 <HAL_TIM_PWM_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 80010fc:	f000 fe1c 	bl	8001d38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001100:	4803      	ldr	r0, [pc, #12]	@ (8001110 <MX_TIM3_Init+0xe8>)
 8001102:	f001 f921 	bl	8002348 <HAL_TIM_MspPostInit>

}
 8001106:	bf00      	nop
 8001108:	3738      	adds	r7, #56	@ 0x38
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	24000548 	.word	0x24000548
 8001114:	40000400 	.word	0x40000400

08001118 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	@ 0x30
 800111c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800112e:	4bbe      	ldr	r3, [pc, #760]	@ (8001428 <MX_GPIO_Init+0x310>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001134:	4abc      	ldr	r2, [pc, #752]	@ (8001428 <MX_GPIO_Init+0x310>)
 8001136:	f043 0310 	orr.w	r3, r3, #16
 800113a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800113e:	4bba      	ldr	r3, [pc, #744]	@ (8001428 <MX_GPIO_Init+0x310>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001144:	f003 0310 	and.w	r3, r3, #16
 8001148:	61bb      	str	r3, [r7, #24]
 800114a:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800114c:	4bb6      	ldr	r3, [pc, #728]	@ (8001428 <MX_GPIO_Init+0x310>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001152:	4ab5      	ldr	r2, [pc, #724]	@ (8001428 <MX_GPIO_Init+0x310>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800115c:	4bb2      	ldr	r3, [pc, #712]	@ (8001428 <MX_GPIO_Init+0x310>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800116a:	4baf      	ldr	r3, [pc, #700]	@ (8001428 <MX_GPIO_Init+0x310>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001170:	4aad      	ldr	r2, [pc, #692]	@ (8001428 <MX_GPIO_Init+0x310>)
 8001172:	f043 0320 	orr.w	r3, r3, #32
 8001176:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800117a:	4bab      	ldr	r3, [pc, #684]	@ (8001428 <MX_GPIO_Init+0x310>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001180:	f003 0320 	and.w	r3, r3, #32
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4ba7      	ldr	r3, [pc, #668]	@ (8001428 <MX_GPIO_Init+0x310>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800118e:	4aa6      	ldr	r2, [pc, #664]	@ (8001428 <MX_GPIO_Init+0x310>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001198:	4ba3      	ldr	r3, [pc, #652]	@ (8001428 <MX_GPIO_Init+0x310>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	4ba0      	ldr	r3, [pc, #640]	@ (8001428 <MX_GPIO_Init+0x310>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ac:	4a9e      	ldr	r2, [pc, #632]	@ (8001428 <MX_GPIO_Init+0x310>)
 80011ae:	f043 0302 	orr.w	r3, r3, #2
 80011b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b6:	4b9c      	ldr	r3, [pc, #624]	@ (8001428 <MX_GPIO_Init+0x310>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80011c4:	4b98      	ldr	r3, [pc, #608]	@ (8001428 <MX_GPIO_Init+0x310>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ca:	4a97      	ldr	r2, [pc, #604]	@ (8001428 <MX_GPIO_Init+0x310>)
 80011cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011d4:	4b94      	ldr	r3, [pc, #592]	@ (8001428 <MX_GPIO_Init+0x310>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80011e2:	4b91      	ldr	r3, [pc, #580]	@ (8001428 <MX_GPIO_Init+0x310>)
 80011e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e8:	4a8f      	ldr	r2, [pc, #572]	@ (8001428 <MX_GPIO_Init+0x310>)
 80011ea:	f043 0308 	orr.w	r3, r3, #8
 80011ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011f2:	4b8d      	ldr	r3, [pc, #564]	@ (8001428 <MX_GPIO_Init+0x310>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001206:	4889      	ldr	r0, [pc, #548]	@ (800142c <MX_GPIO_Init+0x314>)
 8001208:	f004 fe12 	bl	8005e30 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, SOLENOID_LOCK_Pin|LAMP_Pin|ULTRASONIC_ENABLE_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f241 0103 	movw	r1, #4099	@ 0x1003
 8001212:	4887      	ldr	r0, [pc, #540]	@ (8001430 <MX_GPIO_Init+0x318>)
 8001214:	f004 fe0c 	bl	8005e30 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2108      	movs	r1, #8
 800121c:	4885      	ldr	r0, [pc, #532]	@ (8001434 <MX_GPIO_Init+0x31c>)
 800121e:	f004 fe07 	bl	8005e30 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SOLENOID_CLAMP_Pin|SOLENOID_TEAR_2_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2118      	movs	r1, #24
 8001226:	4884      	ldr	r0, [pc, #528]	@ (8001438 <MX_GPIO_Init+0x320>)
 8001228:	f004 fe02 	bl	8005e30 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800122c:	2304      	movs	r3, #4
 800122e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800123c:	2309      	movs	r3, #9
 800123e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	4619      	mov	r1, r3
 8001246:	487d      	ldr	r0, [pc, #500]	@ (800143c <MX_GPIO_Init+0x324>)
 8001248:	f004 fc32 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pins : HEATER_TEMP_Pin TOUCHSCREEN_Y_Pin TOUCHSCREEN_X_Pin */
	GPIO_InitStruct.Pin = HEATER_TEMP_Pin|TOUCHSCREEN_Y_Pin|TOUCHSCREEN_X_Pin;
 800124c:	230b      	movs	r3, #11
 800124e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001250:	2303      	movs	r3, #3
 8001252:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	4619      	mov	r1, r3
 800125e:	4877      	ldr	r0, [pc, #476]	@ (800143c <MX_GPIO_Init+0x324>)
 8001260:	f004 fc26 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE4 PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001264:	2370      	movs	r3, #112	@ 0x70
 8001266:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001274:	230d      	movs	r3, #13
 8001276:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	486f      	ldr	r0, [pc, #444]	@ (800143c <MX_GPIO_Init+0x324>)
 8001280:	f004 fc16 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SOLENOID_TEAR_1_Pin */
	GPIO_InitStruct.Pin = SOLENOID_TEAR_1_Pin;
 8001284:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001288:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(SOLENOID_TEAR_1_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4863      	ldr	r0, [pc, #396]	@ (800142c <MX_GPIO_Init+0x314>)
 800129e:	f004 fc07 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SOLENOID_LOCK_Pin LAMP_Pin ULTRASONIC_ENABLE_Pin */
	GPIO_InitStruct.Pin = SOLENOID_LOCK_Pin|LAMP_Pin|ULTRASONIC_ENABLE_Pin;
 80012a2:	f241 0303 	movw	r3, #4099	@ 0x1003
 80012a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	4619      	mov	r1, r3
 80012ba:	485d      	ldr	r0, [pc, #372]	@ (8001430 <MX_GPIO_Init+0x318>)
 80012bc:	f004 fbf8 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : HEATER_Pin */
	GPIO_InitStruct.Pin = HEATER_Pin;
 80012c0:	2304      	movs	r3, #4
 80012c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012c8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4856      	ldr	r0, [pc, #344]	@ (8001430 <MX_GPIO_Init+0x318>)
 80012d6:	f004 fbeb 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PLATFORM_TOUCH_Pin */
	GPIO_InitStruct.Pin = PLATFORM_TOUCH_Pin;
 80012da:	2308      	movs	r3, #8
 80012dc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012e2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(PLATFORM_TOUCH_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	4619      	mov	r1, r3
 80012ee:	4850      	ldr	r0, [pc, #320]	@ (8001430 <MX_GPIO_Init+0x318>)
 80012f0:	f004 fbde 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULTRASONIC_CURRENT_Pin ULTRASONIC_VOLTAGE_Pin */
	GPIO_InitStruct.Pin = ULTRASONIC_CURRENT_Pin|ULTRASONIC_VOLTAGE_Pin;
 80012f4:	2330      	movs	r3, #48	@ 0x30
 80012f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f8:	2303      	movs	r3, #3
 80012fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4619      	mov	r1, r3
 8001306:	484a      	ldr	r0, [pc, #296]	@ (8001430 <MX_GPIO_Init+0x318>)
 8001308:	f004 fbd2 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PF6 PF8 PF9 */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 800130c:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8001310:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800131e:	230a      	movs	r3, #10
 8001320:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4841      	ldr	r0, [pc, #260]	@ (8001430 <MX_GPIO_Init+0x318>)
 800132a:	f004 fbc1 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_START_BOND_Pin */
	GPIO_InitStruct.Pin = BUTTON_START_BOND_Pin;
 800132e:	2380      	movs	r3, #128	@ 0x80
 8001330:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001336:	2301      	movs	r3, #1
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(BUTTON_START_BOND_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	483b      	ldr	r0, [pc, #236]	@ (8001430 <MX_GPIO_Init+0x318>)
 8001342:	f004 fbb5 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PF10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001346:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800134a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001358:	2309      	movs	r3, #9
 800135a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4833      	ldr	r0, [pc, #204]	@ (8001430 <MX_GPIO_Init+0x318>)
 8001364:	f004 fba4 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001368:	2301      	movs	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8001378:	230b      	movs	r3, #11
 800137a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	482a      	ldr	r0, [pc, #168]	@ (800142c <MX_GPIO_Init+0x314>)
 8001384:	f004 fb94 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001388:	2302      	movs	r3, #2
 800138a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001398:	230a      	movs	r3, #10
 800139a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	4619      	mov	r1, r3
 80013a2:	4822      	ldr	r0, [pc, #136]	@ (800142c <MX_GPIO_Init+0x314>)
 80013a4:	f004 fb84 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013a8:	2304      	movs	r3, #4
 80013aa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 80013b8:	2304      	movs	r3, #4
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	481a      	ldr	r0, [pc, #104]	@ (800142c <MX_GPIO_Init+0x314>)
 80013c4:	f004 fb74 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF12_OCTOSPIM_P1;
 80013d8:	230c      	movs	r3, #12
 80013da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4619      	mov	r1, r3
 80013e2:	4814      	ldr	r0, [pc, #80]	@ (8001434 <MX_GPIO_Init+0x31c>)
 80013e4:	f004 fb64 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_CS_Pin */
	GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80013e8:	2308      	movs	r3, #8
 80013ea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	480d      	ldr	r0, [pc, #52]	@ (8001434 <MX_GPIO_Init+0x31c>)
 8001400:	f004 fb56 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 PA6 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10;
 8001404:	f44f 63ca 	mov.w	r3, #1616	@ 0x650
 8001408:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001416:	230d      	movs	r3, #13
 8001418:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	4804      	ldr	r0, [pc, #16]	@ (8001434 <MX_GPIO_Init+0x31c>)
 8001422:	f004 fb45 	bl	8005ab0 <HAL_GPIO_Init>
 8001426:	e00b      	b.n	8001440 <MX_GPIO_Init+0x328>
 8001428:	58024400 	.word	0x58024400
 800142c:	58020800 	.word	0x58020800
 8001430:	58021400 	.word	0x58021400
 8001434:	58020000 	.word	0x58020000
 8001438:	58020400 	.word	0x58020400
 800143c:	58021000 	.word	0x58021000

	/*Configure GPIO pins : PA7 PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12;
 8001440:	f44f 53c4 	mov.w	r3, #6272	@ 0x1880
 8001444:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001452:	230e      	movs	r3, #14
 8001454:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	4619      	mov	r1, r3
 800145c:	488f      	ldr	r0, [pc, #572]	@ (800169c <MX_GPIO_Init+0x584>)
 800145e:	f004 fb27 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 PC6 PC7 PC10
                           PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10
 8001462:	f44f 53a7 	mov.w	r3, #5344	@ 0x14e0
 8001466:	61fb      	str	r3, [r7, #28]
			|GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001474:	230e      	movs	r3, #14
 8001476:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	4888      	ldr	r0, [pc, #544]	@ (80016a0 <MX_GPIO_Init+0x588>)
 8001480:	f004 fb16 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001484:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001488:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001496:	230a      	movs	r3, #10
 8001498:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4619      	mov	r1, r3
 80014a0:	4880      	ldr	r0, [pc, #512]	@ (80016a4 <MX_GPIO_Init+0x58c>)
 80014a2:	f004 fb05 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014aa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 80014b8:	230b      	movs	r3, #11
 80014ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4619      	mov	r1, r3
 80014c2:	4878      	ldr	r0, [pc, #480]	@ (80016a4 <MX_GPIO_Init+0x58c>)
 80014c4:	f004 faf4 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014cc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014da:	230e      	movs	r3, #14
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	486f      	ldr	r0, [pc, #444]	@ (80016a4 <MX_GPIO_Init+0x58c>)
 80014e6:	f004 fae3 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB11 PB8 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8;
 80014ea:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 80014ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014fc:	230e      	movs	r3, #14
 80014fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	4868      	ldr	r0, [pc, #416]	@ (80016a8 <MX_GPIO_Init+0x590>)
 8001508:	f004 fad2 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG6 PG7 PG8 */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800150c:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001510:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800151e:	230e      	movs	r3, #14
 8001520:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	4619      	mov	r1, r3
 8001528:	4860      	ldr	r0, [pc, #384]	@ (80016ac <MX_GPIO_Init+0x594>)
 800152a:	f004 fac1 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800152e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001532:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001540:	230d      	movs	r3, #13
 8001542:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	4855      	ldr	r0, [pc, #340]	@ (80016a0 <MX_GPIO_Init+0x588>)
 800154c:	f004 fab0 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001550:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001554:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001562:	230d      	movs	r3, #13
 8001564:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	484b      	ldr	r0, [pc, #300]	@ (800169c <MX_GPIO_Init+0x584>)
 800156e:	f004 fa9f 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001576:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001584:	2309      	movs	r3, #9
 8001586:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	4843      	ldr	r0, [pc, #268]	@ (800169c <MX_GPIO_Init+0x584>)
 8001590:	f004 fa8e 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001594:	2304      	movs	r3, #4
 8001596:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015a4:	2309      	movs	r3, #9
 80015a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	4840      	ldr	r0, [pc, #256]	@ (80016b0 <MX_GPIO_Init+0x598>)
 80015b0:	f004 fa7e 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015b4:	2308      	movs	r3, #8
 80015b6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015c4:	230d      	movs	r3, #13
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4619      	mov	r1, r3
 80015ce:	4838      	ldr	r0, [pc, #224]	@ (80016b0 <MX_GPIO_Init+0x598>)
 80015d0:	f004 fa6e 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015d4:	2340      	movs	r3, #64	@ 0x40
 80015d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015e4:	230e      	movs	r3, #14
 80015e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	4830      	ldr	r0, [pc, #192]	@ (80016b0 <MX_GPIO_Init+0x598>)
 80015f0:	f004 fa5e 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015f8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001606:	230d      	movs	r3, #13
 8001608:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	4826      	ldr	r0, [pc, #152]	@ (80016ac <MX_GPIO_Init+0x594>)
 8001612:	f004 fa4d 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001616:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800161a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001628:	2309      	movs	r3, #9
 800162a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	4619      	mov	r1, r3
 8001632:	481e      	ldr	r0, [pc, #120]	@ (80016ac <MX_GPIO_Init+0x594>)
 8001634:	f004 fa3c 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SOLENOID_CLAMP_Pin SOLENOID_TEAR_2_Pin */
	GPIO_InitStruct.Pin = SOLENOID_CLAMP_Pin|SOLENOID_TEAR_2_Pin;
 8001638:	2318      	movs	r3, #24
 800163a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	4816      	ldr	r0, [pc, #88]	@ (80016a8 <MX_GPIO_Init+0x590>)
 8001650:	f004 fa2e 	bl	8005ab0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001654:	2320      	movs	r3, #32
 8001656:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF3_LTDC;
 8001664:	2303      	movs	r3, #3
 8001666:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	4619      	mov	r1, r3
 800166e:	480e      	ldr	r0, [pc, #56]	@ (80016a8 <MX_GPIO_Init+0x590>)
 8001670:	f004 fa1e 	bl	8005ab0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(HEATER_EXTI_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2008      	movs	r0, #8
 800167a:	f003 fd14 	bl	80050a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(HEATER_EXTI_IRQn);
 800167e:	2008      	movs	r0, #8
 8001680:	f003 fd2b 	bl	80050da <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(PLATFORM_TOUCH_EXTI_IRQn, 0, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	2009      	movs	r0, #9
 800168a:	f003 fd0c 	bl	80050a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(PLATFORM_TOUCH_EXTI_IRQn);
 800168e:	2009      	movs	r0, #9
 8001690:	f003 fd23 	bl	80050da <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001694:	bf00      	nop
 8001696:	3730      	adds	r7, #48	@ 0x30
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	58020000 	.word	0x58020000
 80016a0:	58020800 	.word	0x58020800
 80016a4:	58021000 	.word	0x58021000
 80016a8:	58020400 	.word	0x58020400
 80016ac:	58021800 	.word	0x58021800
 80016b0:	58020c00 	.word	0x58020c00
 80016b4:	00000000 	.word	0x00000000

080016b8 <measure_joystick_and_send_to_slave>:

/* USER CODE BEGIN 4 */
void measure_joystick_and_send_to_slave(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
	float divider;
	ADC_valX = ADC_raw[0] - 127.5;
 80016be:	4b58      	ldr	r3, [pc, #352]	@ (8001820 <measure_joystick_and_send_to_slave+0x168>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80016ca:	ed9f 6b53 	vldr	d6, [pc, #332]	@ 8001818 <measure_joystick_and_send_to_slave+0x160>
 80016ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80016d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016d6:	4b53      	ldr	r3, [pc, #332]	@ (8001824 <measure_joystick_and_send_to_slave+0x16c>)
 80016d8:	edc3 7a00 	vstr	s15, [r3]
	ADC_valY = ADC_raw[1] - 127.5;         // Read The ADC Conversion Result
 80016dc:	4b50      	ldr	r3, [pc, #320]	@ (8001820 <measure_joystick_and_send_to_slave+0x168>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80016e8:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8001818 <measure_joystick_and_send_to_slave+0x160>
 80016ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80016f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001828 <measure_joystick_and_send_to_slave+0x170>)
 80016f6:	edc3 7a00 	vstr	s15, [r3]
	/*
	 * Fine: /250.0
	 * Coarse: /50.0
	 */
	if (fine_adjustment)
 80016fa:	4b4c      	ldr	r3, [pc, #304]	@ (800182c <measure_joystick_and_send_to_slave+0x174>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <measure_joystick_and_send_to_slave+0x50>
		divider = 100.0;
 8001702:	4b4b      	ldr	r3, [pc, #300]	@ (8001830 <measure_joystick_and_send_to_slave+0x178>)
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	e002      	b.n	800170e <measure_joystick_and_send_to_slave+0x56>
	else
		divider = 1.0;
 8001708:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800170c:	607b      	str	r3, [r7, #4]

	if (fabs(ADC_valX) > 40)
 800170e:	4b45      	ldr	r3, [pc, #276]	@ (8001824 <measure_joystick_and_send_to_slave+0x16c>)
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	eef0 7ae7 	vabs.f32	s15, s15
 8001718:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001834 <measure_joystick_and_send_to_slave+0x17c>
 800171c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001724:	dd04      	ble.n	8001730 <measure_joystick_and_send_to_slave+0x78>
				speed_joystickX = ADC_valX;
 8001726:	4b3f      	ldr	r3, [pc, #252]	@ (8001824 <measure_joystick_and_send_to_slave+0x16c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a43      	ldr	r2, [pc, #268]	@ (8001838 <measure_joystick_and_send_to_slave+0x180>)
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e003      	b.n	8001738 <measure_joystick_and_send_to_slave+0x80>
			else
				speed_joystickX = 0;
 8001730:	4b41      	ldr	r3, [pc, #260]	@ (8001838 <measure_joystick_and_send_to_slave+0x180>)
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	601a      	str	r2, [r3, #0]

			if (fabs(ADC_valY) > 40)
 8001738:	4b3b      	ldr	r3, [pc, #236]	@ (8001828 <measure_joystick_and_send_to_slave+0x170>)
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	eef0 7ae7 	vabs.f32	s15, s15
 8001742:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001834 <measure_joystick_and_send_to_slave+0x17c>
 8001746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174e:	dd04      	ble.n	800175a <measure_joystick_and_send_to_slave+0xa2>
				speed_joystickY = ADC_valY;
 8001750:	4b35      	ldr	r3, [pc, #212]	@ (8001828 <measure_joystick_and_send_to_slave+0x170>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a39      	ldr	r2, [pc, #228]	@ (800183c <measure_joystick_and_send_to_slave+0x184>)
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	e003      	b.n	8001762 <measure_joystick_and_send_to_slave+0xaa>
			else
				speed_joystickY = 0;
 800175a:	4b38      	ldr	r3, [pc, #224]	@ (800183c <measure_joystick_and_send_to_slave+0x184>)
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	601a      	str	r2, [r3, #0]

			speed_joystickT = speed_joystickX;
 8001762:	4b35      	ldr	r3, [pc, #212]	@ (8001838 <measure_joystick_and_send_to_slave+0x180>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a36      	ldr	r2, [pc, #216]	@ (8001840 <measure_joystick_and_send_to_slave+0x188>)
 8001768:	6013      	str	r3, [r2, #0]
			speed_joystickZ = speed_joystickY;
 800176a:	4b34      	ldr	r3, [pc, #208]	@ (800183c <measure_joystick_and_send_to_slave+0x184>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a35      	ldr	r2, [pc, #212]	@ (8001844 <measure_joystick_and_send_to_slave+0x18c>)
 8001770:	6013      	str	r3, [r2, #0]

	switch (control_mode)
 8001772:	4b35      	ldr	r3, [pc, #212]	@ (8001848 <measure_joystick_and_send_to_slave+0x190>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d032      	beq.n	80017e0 <measure_joystick_and_send_to_slave+0x128>
 800177a:	2b02      	cmp	r3, #2
 800177c:	d846      	bhi.n	800180c <measure_joystick_and_send_to_slave+0x154>
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <measure_joystick_and_send_to_slave+0xd0>
 8001782:	2b01      	cmp	r3, #1
 8001784:	d01b      	beq.n	80017be <measure_joystick_and_send_to_slave+0x106>
		write_uint32_to_slave(ADDRESS_MOTOR_T, VIRTUAL_MEM_MODE, POS_MODE);
		HAL_Delay(10);
		write_float_to_slave(ADDRESS_MOTOR_T, VIRTUAL_MEM_POSITION, speed_joystickT / divider);
		break;
	}
}
 8001786:	e041      	b.n	800180c <measure_joystick_and_send_to_slave+0x154>
		write_float_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_SPEED, speed_joystickX / divider);
 8001788:	4b2b      	ldr	r3, [pc, #172]	@ (8001838 <measure_joystick_and_send_to_slave+0x180>)
 800178a:	ed93 7a00 	vldr	s14, [r3]
 800178e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001792:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001796:	eeb0 0a66 	vmov.f32	s0, s13
 800179a:	2101      	movs	r1, #1
 800179c:	2028      	movs	r0, #40	@ 0x28
 800179e:	f000 f99d 	bl	8001adc <write_float_to_slave>
		write_float_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_SPEED, speed_joystickY / divider);
 80017a2:	4b26      	ldr	r3, [pc, #152]	@ (800183c <measure_joystick_and_send_to_slave+0x184>)
 80017a4:	ed93 7a00 	vldr	s14, [r3]
 80017a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017b0:	eeb0 0a66 	vmov.f32	s0, s13
 80017b4:	2101      	movs	r1, #1
 80017b6:	202a      	movs	r0, #42	@ 0x2a
 80017b8:	f000 f990 	bl	8001adc <write_float_to_slave>
		break;
 80017bc:	e026      	b.n	800180c <measure_joystick_and_send_to_slave+0x154>
		HAL_Delay(10);
 80017be:	200a      	movs	r0, #10
 80017c0:	f001 f892 	bl	80028e8 <HAL_Delay>
		write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_SPEED, speed_joystickZ / divider);
 80017c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001844 <measure_joystick_and_send_to_slave+0x18c>)
 80017c6:	ed93 7a00 	vldr	s14, [r3]
 80017ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017d2:	eeb0 0a66 	vmov.f32	s0, s13
 80017d6:	2101      	movs	r1, #1
 80017d8:	202c      	movs	r0, #44	@ 0x2c
 80017da:	f000 f97f 	bl	8001adc <write_float_to_slave>
		break;
 80017de:	e015      	b.n	800180c <measure_joystick_and_send_to_slave+0x154>
		write_uint32_to_slave(ADDRESS_MOTOR_T, VIRTUAL_MEM_MODE, POS_MODE);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2105      	movs	r1, #5
 80017e4:	202e      	movs	r0, #46	@ 0x2e
 80017e6:	f000 f99d 	bl	8001b24 <write_uint32_to_slave>
		HAL_Delay(10);
 80017ea:	200a      	movs	r0, #10
 80017ec:	f001 f87c 	bl	80028e8 <HAL_Delay>
		write_float_to_slave(ADDRESS_MOTOR_T, VIRTUAL_MEM_POSITION, speed_joystickT / divider);
 80017f0:	4b13      	ldr	r3, [pc, #76]	@ (8001840 <measure_joystick_and_send_to_slave+0x188>)
 80017f2:	ed93 7a00 	vldr	s14, [r3]
 80017f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017fe:	eeb0 0a66 	vmov.f32	s0, s13
 8001802:	2100      	movs	r1, #0
 8001804:	202e      	movs	r0, #46	@ 0x2e
 8001806:	f000 f969 	bl	8001adc <write_float_to_slave>
		break;
 800180a:	bf00      	nop
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	f3af 8000 	nop.w
 8001818:	00000000 	.word	0x00000000
 800181c:	405fe000 	.word	0x405fe000
 8001820:	240005f4 	.word	0x240005f4
 8001824:	240005b8 	.word	0x240005b8
 8001828:	240005bc 	.word	0x240005bc
 800182c:	240005ec 	.word	0x240005ec
 8001830:	42c80000 	.word	0x42c80000
 8001834:	42200000 	.word	0x42200000
 8001838:	240005c4 	.word	0x240005c4
 800183c:	240005c8 	.word	0x240005c8
 8001840:	240005d0 	.word	0x240005d0
 8001844:	240005cc 	.word	0x240005cc
 8001848:	24000600 	.word	0x24000600

0800184c <read_temp_from_ADC>:
uint32_t index1=0, index2=1;
int32_t feedback_pred =0;


float read_temp_from_ADC(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
	uint32_t ADC_value;

	ADC_value = HAL_ADC_GetValue(&hadc2);
 8001852:	4823      	ldr	r0, [pc, #140]	@ (80018e0 <read_temp_from_ADC+0x94>)
 8001854:	f001 ffb6 	bl	80037c4 <HAL_ADC_GetValue>
 8001858:	60f8      	str	r0, [r7, #12]

	if (ADC_value < ADC_MIN)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8001860:	d203      	bcs.n	800186a <read_temp_from_ADC+0x1e>
	{
		ADC_value = ADC_MIN;
 8001862:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	e006      	b.n	8001878 <read_temp_from_ADC+0x2c>
	}
	else if (ADC_value > ADC_MAX)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f5b3 6f58 	cmp.w	r3, #3456	@ 0xd80
 8001870:	d902      	bls.n	8001878 <read_temp_from_ADC+0x2c>
	{
		ADC_value = ADC_MAX;
 8001872:	f44f 6358 	mov.w	r3, #3456	@ 0xd80
 8001876:	60fb      	str	r3, [r7, #12]

	//Read_temp = Tlook[ADC_value - 195];  //209

	// Interpolating...

	int16_t adc_index = (ADC_value >> DECIMATION) - (ADC_MIN >> DECIMATION);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	095b      	lsrs	r3, r3, #5
 800187c:	b29b      	uxth	r3, r3
 800187e:	3b09      	subs	r3, #9
 8001880:	b29b      	uxth	r3, r3
 8001882:	817b      	strh	r3, [r7, #10]

	int32_t delta_T = Tlook[adc_index + 1] - Tlook[adc_index];
 8001884:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001888:	3301      	adds	r3, #1
 800188a:	4a16      	ldr	r2, [pc, #88]	@ (80018e4 <read_temp_from_ADC+0x98>)
 800188c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001890:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001894:	4913      	ldr	r1, [pc, #76]	@ (80018e4 <read_temp_from_ADC+0x98>)
 8001896:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	607b      	str	r3, [r7, #4]

	int16_t delta_ADC = ADC_value - ((adc_index + (ADC_MIN >> DECIMATION)) << DECIMATION);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	897b      	ldrh	r3, [r7, #10]
 80018a4:	3309      	adds	r3, #9
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	015b      	lsls	r3, r3, #5
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	807b      	strh	r3, [r7, #2]

	return ((delta_T * delta_ADC) + (Tlook[adc_index] << DECIMATION)) >> DECIMATION;
 80018b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	fb03 f202 	mul.w	r2, r3, r2
 80018bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018c0:	4908      	ldr	r1, [pc, #32]	@ (80018e4 <read_temp_from_ADC+0x98>)
 80018c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018c6:	015b      	lsls	r3, r3, #5
 80018c8:	4413      	add	r3, r2
 80018ca:	115b      	asrs	r3, r3, #5
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	240002b4 	.word	0x240002b4
 80018e4:	24000024 	.word	0x24000024

080018e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	@ 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	int32_t Read_temp, PI_error, PI_output, integral = 0, proportional, PI_prev_error = 0, limMaxInt = 0, limMinInt = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]

	if(htim == &htim2) {
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a66      	ldr	r2, [pc, #408]	@ (8001a9c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	f040 80c4 	bne.w	8001a92 <HAL_TIM_PeriodElapsedCallback+0x1aa>
		/* Read ADC */
		HAL_ADC_Start(&hadc2);
 800190a:	4865      	ldr	r0, [pc, #404]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800190c:	f001 fd68 	bl	80033e0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 1000);
 8001910:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001914:	4862      	ldr	r0, [pc, #392]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001916:	f001 fe61 	bl	80035dc <HAL_ADC_PollForConversion>
		Read_temp = read_temp_from_ADC();
 800191a:	f7ff ff97 	bl	800184c <read_temp_from_ADC>
 800191e:	eef0 7a40 	vmov.f32	s15, s0
 8001922:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001926:	ee17 3a90 	vmov	r3, s15
 800192a:	613b      	str	r3, [r7, #16]
		HAL_ADC_Stop(&hadc2);
 800192c:	485c      	ldr	r0, [pc, #368]	@ (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800192e:	f001 fe21 	bl	8003574 <HAL_ADC_Stop>

		measured_temperature_gauge = ((float)(Read_temp>>10)) - 273.5;
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	129b      	asrs	r3, r3, #10
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193e:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001aa4 <HAL_TIM_PeriodElapsedCallback+0x1bc>
 8001942:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001946:	4b58      	ldr	r3, [pc, #352]	@ (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001948:	edc3 7a00 	vstr	s15, [r3]
		temperature_testpoint = Read_temp;
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4a57      	ldr	r2, [pc, #348]	@ (8001aac <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001950:	6013      	str	r3, [r2, #0]

		/* PI Controller */
		//error = setpoint - feedback_pred;
		PI_error = setpoint - Read_temp;
 8001952:	4b57      	ldr	r3, [pc, #348]	@ (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	60fb      	str	r3, [r7, #12]

		proportional = Kp * PI_error;
 800195c:	225a      	movs	r2, #90	@ 0x5a
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	fb02 f303 	mul.w	r3, r2, r3
 8001964:	60bb      	str	r3, [r7, #8]

		// Dynamic Anti-wind-up limits calculation
		if (PLMAX > proportional && proportional >= 0) {
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800196c:	da07      	bge.n	800197e <HAL_TIM_PeriodElapsedCallback+0x96>
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db04      	blt.n	800197e <HAL_TIM_PeriodElapsedCallback+0x96>
			limMaxInt = PLMAX - proportional;
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800197a:	61fb      	str	r3, [r7, #28]
 800197c:	e001      	b.n	8001982 <HAL_TIM_PeriodElapsedCallback+0x9a>
		}
		else {
			limMaxInt = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
		}

		integral = integral + Ki * Sample_time * (PI_prev_error + PI_error);
 8001982:	2300      	movs	r3, #0
 8001984:	2201      	movs	r2, #1
 8001986:	fb02 f303 	mul.w	r3, r2, r3
 800198a:	69b9      	ldr	r1, [r7, #24]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	440a      	add	r2, r1
 8001990:	fb02 f303 	mul.w	r3, r2, r3
 8001994:	6a3a      	ldr	r2, [r7, #32]
 8001996:	4413      	add	r3, r2
 8001998:	623b      	str	r3, [r7, #32]
		PI_prev_error = PI_error;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	61bb      	str	r3, [r7, #24]

		// Anti-wind-up integrator limits clamping
		if (integral > limMaxInt) {
 800199e:	6a3a      	ldr	r2, [r7, #32]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	dd02      	ble.n	80019ac <HAL_TIM_PeriodElapsedCallback+0xc4>
			integral = limMaxInt;
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	623b      	str	r3, [r7, #32]
 80019aa:	e005      	b.n	80019b8 <HAL_TIM_PeriodElapsedCallback+0xd0>
		}
		else if (integral < limMinInt) {
 80019ac:	6a3a      	ldr	r2, [r7, #32]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	da01      	bge.n	80019b8 <HAL_TIM_PeriodElapsedCallback+0xd0>
			integral = limMinInt;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	623b      	str	r3, [r7, #32]
		}

		// output to PWM value conditioning
		PI_output = ((integral + proportional) >> 10) * 50;
 80019b8:	6a3a      	ldr	r2, [r7, #32]
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	4413      	add	r3, r2
 80019be:	129b      	asrs	r3, r3, #10
 80019c0:	2232      	movs	r2, #50	@ 0x32
 80019c2:	fb02 f303 	mul.w	r3, r2, r3
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24

		if (PI_output > OLMAX) {
 80019c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019ce:	dd03      	ble.n	80019d8 <HAL_TIM_PeriodElapsedCallback+0xf0>
			PI_output = 1000;
 80019d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d6:	e004      	b.n	80019e2 <HAL_TIM_PeriodElapsedCallback+0xfa>
		}
		else if (PI_output < 0) {
 80019d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019da:	2b00      	cmp	r3, #0
 80019dc:	da01      	bge.n	80019e2 <HAL_TIM_PeriodElapsedCallback+0xfa>
			PI_output = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		/* End PI Controller */

		TIM3->CCR3 = PI_output;
 80019e2:	4a34      	ldr	r2, [pc, #208]	@ (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80019e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e6:	63d3      	str	r3, [r2, #60]	@ 0x3c

		// Output diventa 2^10
		output2 = PI_output * 20;
 80019e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b30      	ldr	r3, [pc, #192]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80019f6:	601a      	str	r2, [r3, #0]

		// 2^20 -> 2^10
		in_model = (((output2 * output2) >> 10) * 82) >> 10;
 80019f8:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a2e      	ldr	r2, [pc, #184]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	129b      	asrs	r3, r3, #10
 8001a06:	2252      	movs	r2, #82	@ 0x52
 8001a08:	fb02 f303 	mul.w	r3, r2, r3
 8001a0c:	129b      	asrs	r3, r3, #10
 8001a0e:	4a2b      	ldr	r2, [pc, #172]	@ (8001abc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001a10:	6013      	str	r3, [r2, #0]

		//L'uscita è 2^10
		out_model =  (out_model_prev * ad + bu * in_model + bd * in_model_prev) >> 16;
 8001a12:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f64f 72c5 	movw	r2, #65477	@ 0xffc5
 8001a1a:	fb03 f202 	mul.w	r2, r3, r2
 8001a1e:	21d1      	movs	r1, #209	@ 0xd1
 8001a20:	4b26      	ldr	r3, [pc, #152]	@ (8001abc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	fb01 f303 	mul.w	r3, r1, r3
 8001a28:	441a      	add	r2, r3
 8001a2a:	21d1      	movs	r1, #209	@ 0xd1
 8001a2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	141b      	asrs	r3, r3, #16
 8001a38:	4a23      	ldr	r2, [pc, #140]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001a3a:	6013      	str	r3, [r2, #0]

		in_model_prev = in_model;
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001abc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a20      	ldr	r2, [pc, #128]	@ (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001a42:	6013      	str	r3, [r2, #0]
		out_model_prev = out_model;
 8001a44:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001a4a:	6013      	str	r3, [r2, #0]

		// Prendo primo blocco
		out_delayed = delay_vect[index1];
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001acc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a1f      	ldr	r2, [pc, #124]	@ (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a56:	4a1f      	ldr	r2, [pc, #124]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001a58:	6013      	str	r3, [r2, #0]

		delay_vect[index1] = out_model;
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	491b      	ldr	r1, [pc, #108]	@ (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		index1++;
 8001a68:	4b18      	ldr	r3, [pc, #96]	@ (8001acc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	4a17      	ldr	r2, [pc, #92]	@ (8001acc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a70:	6013      	str	r3, [r2, #0]

		if (index1 > 21)
 8001a72:	4b16      	ldr	r3, [pc, #88]	@ (8001acc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b15      	cmp	r3, #21
 8001a78:	d902      	bls.n	8001a80 <HAL_TIM_PeriodElapsedCallback+0x198>
			index1 = 0;
 8001a7a:	4b14      	ldr	r3, [pc, #80]	@ (8001acc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]


		feedback_pred = Read_temp - out_delayed + out_model;
 8001a80:	4b14      	ldr	r3, [pc, #80]	@ (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	1ad2      	subs	r2, r2, r3
 8001a88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001a90:	6013      	str	r3, [r2, #0]

	}
}
 8001a92:	bf00      	nop
 8001a94:	3728      	adds	r7, #40	@ 0x28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	240004fc 	.word	0x240004fc
 8001aa0:	240002b4 	.word	0x240002b4
 8001aa4:	4388c000 	.word	0x4388c000
 8001aa8:	2400059c 	.word	0x2400059c
 8001aac:	240005b4 	.word	0x240005b4
 8001ab0:	24000020 	.word	0x24000020
 8001ab4:	40000400 	.word	0x40000400
 8001ab8:	24000614 	.word	0x24000614
 8001abc:	2400060c 	.word	0x2400060c
 8001ac0:	24000608 	.word	0x24000608
 8001ac4:	24000604 	.word	0x24000604
 8001ac8:	24000610 	.word	0x24000610
 8001acc:	24000674 	.word	0x24000674
 8001ad0:	2400061c 	.word	0x2400061c
 8001ad4:	24000618 	.word	0x24000618
 8001ad8:	24000678 	.word	0x24000678

08001adc <write_float_to_slave>:


void write_float_to_slave(uint8_t slave_address, uint8_t virtual_memory_address, float value)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af02      	add	r7, sp, #8
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	460a      	mov	r2, r1
 8001ae6:	ed87 0a00 	vstr	s0, [r7]
 8001aea:	71fb      	strb	r3, [r7, #7]
 8001aec:	4613      	mov	r3, r2
 8001aee:	71bb      	strb	r3, [r7, #6]
	ui32_to_f conv;
	conv.f = value;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	60fb      	str	r3, [r7, #12]
	prepare_WRITE_packet(tx_buffer, virtual_memory_address, conv.ui32);
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	79bb      	ldrb	r3, [r7, #6]
 8001af8:	4619      	mov	r1, r3
 8001afa:	4808      	ldr	r0, [pc, #32]	@ (8001b1c <write_float_to_slave+0x40>)
 8001afc:	f000 f934 	bl	8001d68 <prepare_WRITE_packet>
	HAL_I2C_Master_Transmit(&hi2c1, slave_address, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	b299      	uxth	r1, r3
 8001b04:	2364      	movs	r3, #100	@ 0x64
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2307      	movs	r3, #7
 8001b0a:	4a04      	ldr	r2, [pc, #16]	@ (8001b1c <write_float_to_slave+0x40>)
 8001b0c:	4804      	ldr	r0, [pc, #16]	@ (8001b20 <write_float_to_slave+0x44>)
 8001b0e:	f004 fa5f 	bl	8005fd0 <HAL_I2C_Master_Transmit>
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2400067c 	.word	0x2400067c
 8001b20:	24000420 	.word	0x24000420

08001b24 <write_uint32_to_slave>:

void write_uint32_to_slave(uint8_t slave_address, uint8_t virtual_memory_address, uint32_t value)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	603a      	str	r2, [r7, #0]
 8001b2e:	71fb      	strb	r3, [r7, #7]
 8001b30:	460b      	mov	r3, r1
 8001b32:	71bb      	strb	r3, [r7, #6]
	prepare_WRITE_packet(tx_buffer, virtual_memory_address, value);
 8001b34:	79bb      	ldrb	r3, [r7, #6]
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4808      	ldr	r0, [pc, #32]	@ (8001b5c <write_uint32_to_slave+0x38>)
 8001b3c:	f000 f914 	bl	8001d68 <prepare_WRITE_packet>
	HAL_I2C_Master_Transmit(&hi2c1, slave_address, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	b299      	uxth	r1, r3
 8001b44:	2364      	movs	r3, #100	@ 0x64
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2307      	movs	r3, #7
 8001b4a:	4a04      	ldr	r2, [pc, #16]	@ (8001b5c <write_uint32_to_slave+0x38>)
 8001b4c:	4804      	ldr	r0, [pc, #16]	@ (8001b60 <write_uint32_to_slave+0x3c>)
 8001b4e:	f004 fa3f 	bl	8005fd0 <HAL_I2C_Master_Transmit>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2400067c 	.word	0x2400067c
 8001b60:	24000420 	.word	0x24000420

08001b64 <perform_bond>:

void perform_bond(uint32_t bond_time)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	//Perform the bond

	//Enable the ultrasonic driver
	HAL_GPIO_WritePin(ULTRASONIC_ENABLE_GPIO_Port, ULTRASONIC_ENABLE_Pin, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b72:	480f      	ldr	r0, [pc, #60]	@ (8001bb0 <perform_bond+0x4c>)
 8001b74:	f004 f95c 	bl	8005e30 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001b78:	2064      	movs	r0, #100	@ 0x64
 8001b7a:	f000 feb5 	bl	80028e8 <HAL_Delay>
	write_bond_power_to_trimmer(bond_power);
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <perform_bond+0x50>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 f818 	bl	8001bb8 <write_bond_power_to_trimmer>
	HAL_Delay(bond_time);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 fead 	bl	80028e8 <HAL_Delay>
	write_bond_power_to_trimmer(0);
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f000 f812 	bl	8001bb8 <write_bond_power_to_trimmer>
	HAL_Delay(100);
 8001b94:	2064      	movs	r0, #100	@ 0x64
 8001b96:	f000 fea7 	bl	80028e8 <HAL_Delay>
	//Disable the ultrasonic driver
	HAL_GPIO_WritePin(ULTRASONIC_ENABLE_GPIO_Port, ULTRASONIC_ENABLE_Pin, GPIO_PIN_SET);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ba0:	4803      	ldr	r0, [pc, #12]	@ (8001bb0 <perform_bond+0x4c>)
 8001ba2:	f004 f945 	bl	8005e30 <HAL_GPIO_WritePin>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	58021400 	.word	0x58021400
 8001bb4:	24000010 	.word	0x24000010

08001bb8 <write_bond_power_to_trimmer>:
	// Wait for the user to release the button
	wait_for_button_release();
}

void write_bond_power_to_trimmer(uint8_t bond_power)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
	uint8_t payload[2] = {0x11, bond_power};
 8001bc2:	2311      	movs	r3, #17
 8001bc4:	733b      	strb	r3, [r7, #12]
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2108      	movs	r1, #8
 8001bce:	4809      	ldr	r0, [pc, #36]	@ (8001bf4 <write_bond_power_to_trimmer+0x3c>)
 8001bd0:	f004 f92e 	bl	8005e30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, payload, 2, 100);
 8001bd4:	f107 010c 	add.w	r1, r7, #12
 8001bd8:	2364      	movs	r3, #100	@ 0x64
 8001bda:	2202      	movs	r2, #2
 8001bdc:	4806      	ldr	r0, [pc, #24]	@ (8001bf8 <write_bond_power_to_trimmer+0x40>)
 8001bde:	f00a f88d 	bl	800bcfc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001be2:	2201      	movs	r2, #1
 8001be4:	2108      	movs	r1, #8
 8001be6:	4803      	ldr	r0, [pc, #12]	@ (8001bf4 <write_bond_power_to_trimmer+0x3c>)
 8001be8:	f004 f922 	bl	8005e30 <HAL_GPIO_WritePin>

	return;
 8001bec:	bf00      	nop
}
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	58020000 	.word	0x58020000
 8001bf8:	24000474 	.word	0x24000474

08001bfc <HAL_GPIO_EXTI_Callback>:
/**
 * @brief Handles the GPIO callback
 * @param GPIO_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PLATFORM_TOUCH_Pin)
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d102      	bne.n	8001c12 <HAL_GPIO_EXTI_Callback+0x16>
	{
		head_touched = true;
 8001c0c:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <HAL_GPIO_EXTI_Callback+0x24>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
	}
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	240005b0 	.word	0x240005b0

08001c24 <execute_write_command>:

int execute_write_command(uint8_t write_address, uint32_t data)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
	int ret_val = COMM_ERR;
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295
 8001c34:	60fb      	str	r3, [r7, #12]
	ui32_to_f conv;
	conv.ui32 = data;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	60bb      	str	r3, [r7, #8]

	switch (write_address)
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d108      	bne.n	8001c52 <execute_write_command+0x2e>
	{
	case VIRTUAL_MEM_POSITION_MEAS:
		read_position = conv.f;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4a09      	ldr	r2, [pc, #36]	@ (8001c68 <execute_write_command+0x44>)
 8001c44:	6013      	str	r3, [r2, #0]
		data_ready = true;
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <execute_write_command+0x48>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]
		ret_val = COMM_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
		break;
 8001c50:	e003      	b.n	8001c5a <execute_write_command+0x36>

	default:
		ret_val = COMM_ERR;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	60fb      	str	r3, [r7, #12]
		break;
 8001c58:	bf00      	nop
	}

	return ret_val;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	240005ac 	.word	0x240005ac
 8001c6c:	240005b1 	.word	0x240005b1

08001c70 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c1)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	//Perform different actions based on the received command
	switch (rx_buffer[0])
 8001c78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <HAL_I2C_MasterRxCpltCallback+0x38>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b05      	cmp	r3, #5
 8001c7e:	d10e      	bne.n	8001c9e <HAL_I2C_MasterRxCpltCallback+0x2e>
	{
	case COMMAND_WRITE:
		read_data_from_WRITE_command(rx_buffer, &received_address, &received_data);
 8001c80:	4a0a      	ldr	r2, [pc, #40]	@ (8001cac <HAL_I2C_MasterRxCpltCallback+0x3c>)
 8001c82:	490b      	ldr	r1, [pc, #44]	@ (8001cb0 <HAL_I2C_MasterRxCpltCallback+0x40>)
 8001c84:	4808      	ldr	r0, [pc, #32]	@ (8001ca8 <HAL_I2C_MasterRxCpltCallback+0x38>)
 8001c86:	f000 f8b8 	bl	8001dfa <read_data_from_WRITE_command>
		execute_write_command(received_address, received_data);
 8001c8a:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <HAL_I2C_MasterRxCpltCallback+0x40>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	4a07      	ldr	r2, [pc, #28]	@ (8001cac <HAL_I2C_MasterRxCpltCallback+0x3c>)
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ffc5 	bl	8001c24 <execute_write_command>
		break;
 8001c9a:	bf00      	nop
	}
	return;
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
}
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	24000684 	.word	0x24000684
 8001cac:	240005a4 	.word	0x240005a4
 8001cb0:	240005a8 	.word	0x240005a8

08001cb4 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

	if(hadc == &hadc1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a06      	ldr	r2, [pc, #24]	@ (8001cd8 <HAL_ADC_ConvCpltCallback+0x24>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d102      	bne.n	8001cca <HAL_ADC_ConvCpltCallback+0x16>
		ADC_ready = 1;
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <HAL_ADC_ConvCpltCallback+0x28>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	24000244 	.word	0x24000244
 8001cdc:	240005fc 	.word	0x240005fc

08001ce0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8001cf2:	f003 fa0d 	bl	8005110 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001d02:	231f      	movs	r3, #31
 8001d04:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8001d06:	2387      	movs	r3, #135	@ 0x87
 8001d08:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001d12:	2301      	movs	r3, #1
 8001d14:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001d16:	2301      	movs	r3, #1
 8001d18:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d22:	463b      	mov	r3, r7
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 fa2b 	bl	8005180 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001d2a:	2004      	movs	r0, #4
 8001d2c:	f003 fa08 	bl	8005140 <HAL_MPU_Enable>

}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d3c:	b672      	cpsid	i
}
 8001d3e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <Error_Handler+0x8>

08001d44 <serial_communication_variable_init>:
 **********************************************************************************************/
/**
 * Zeroes the tx and rx buffers
 */
void serial_communication_variable_init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
	memset(tx_buffer, 0x00, MAX_COMM_BUFFER_SIZE);
 8001d48:	2207      	movs	r2, #7
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4804      	ldr	r0, [pc, #16]	@ (8001d60 <serial_communication_variable_init+0x1c>)
 8001d4e:	f00d fbcc 	bl	800f4ea <memset>
	memset(rx_buffer, 0x00, MAX_COMM_BUFFER_SIZE);
 8001d52:	2207      	movs	r2, #7
 8001d54:	2100      	movs	r1, #0
 8001d56:	4803      	ldr	r0, [pc, #12]	@ (8001d64 <serial_communication_variable_init+0x20>)
 8001d58:	f00d fbc7 	bl	800f4ea <memset>
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	2400067c 	.word	0x2400067c
 8001d64:	24000684 	.word	0x24000684

08001d68 <prepare_WRITE_packet>:
 *
 * @param buffer tx buffer pointer
 * @return total message length
 */
uint16_t prepare_WRITE_packet(uint8_t * buffer, uint8_t virtual_memory_address, uint32_t value)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	460b      	mov	r3, r1
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	72fb      	strb	r3, [r7, #11]
	uint16_t packet_size = 7;
 8001d76:	2307      	movs	r3, #7
 8001d78:	82fb      	strh	r3, [r7, #22]
	ui32_to_ui8 conversion_union;

	conversion_union.ui32 = value;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	613b      	str	r3, [r7, #16]

	buffer[0] = COMMAND_WRITE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2205      	movs	r2, #5
 8001d82:	701a      	strb	r2, [r3, #0]
	buffer[1] = packet_size;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3301      	adds	r3, #1
 8001d88:	8afa      	ldrh	r2, [r7, #22]
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	701a      	strb	r2, [r3, #0]
	buffer[2] = virtual_memory_address;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3302      	adds	r3, #2
 8001d92:	7afa      	ldrb	r2, [r7, #11]
 8001d94:	701a      	strb	r2, [r3, #0]
	buffer[3] = conversion_union.ui8[0];
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3303      	adds	r3, #3
 8001d9a:	7c3a      	ldrb	r2, [r7, #16]
 8001d9c:	701a      	strb	r2, [r3, #0]
	buffer[4] = conversion_union.ui8[1];
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3304      	adds	r3, #4
 8001da2:	7c7a      	ldrb	r2, [r7, #17]
 8001da4:	701a      	strb	r2, [r3, #0]
	buffer[5] = conversion_union.ui8[2];
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3305      	adds	r3, #5
 8001daa:	7cba      	ldrb	r2, [r7, #18]
 8001dac:	701a      	strb	r2, [r3, #0]
	buffer[6] = conversion_union.ui8[3];
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3306      	adds	r3, #6
 8001db2:	7cfa      	ldrb	r2, [r7, #19]
 8001db4:	701a      	strb	r2, [r3, #0]
	return packet_size;
 8001db6:	8afb      	ldrh	r3, [r7, #22]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <prepare_READ_packet>:
 *
 * @param buffer tx buffer pointer
 * @return total message length
 */
uint16_t prepare_READ_packet(uint8_t * buffer, uint8_t read_address)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	70fb      	strb	r3, [r7, #3]
	uint16_t packet_size = 3;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	81fb      	strh	r3, [r7, #14]
	buffer[0] = COMMAND_READ;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2206      	movs	r2, #6
 8001dd8:	701a      	strb	r2, [r3, #0]
	buffer[1] = packet_size;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	89fa      	ldrh	r2, [r7, #14]
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	701a      	strb	r2, [r3, #0]
	buffer[2] = read_address;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3302      	adds	r3, #2
 8001de8:	78fa      	ldrb	r2, [r7, #3]
 8001dea:	701a      	strb	r2, [r3, #0]
	return packet_size;
 8001dec:	89fb      	ldrh	r3, [r7, #14]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <read_data_from_WRITE_command>:
 * @param buffer pointer to the input buffer (it contains the received WRITE command)
 * @param read_address address at which the WRITE command is directed
 * @param data received uint32_t word
 */
void read_data_from_WRITE_command(uint8_t * buffer, uint8_t * read_address, uint32_t * data)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b087      	sub	sp, #28
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
	ui32_to_ui8 conversion_union;
	(*read_address) = buffer[2];
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	789a      	ldrb	r2, [r3, #2]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	701a      	strb	r2, [r3, #0]
	conversion_union.ui8[0] = buffer[3];
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	78db      	ldrb	r3, [r3, #3]
 8001e12:	753b      	strb	r3, [r7, #20]
	conversion_union.ui8[1] = buffer[4];
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	791b      	ldrb	r3, [r3, #4]
 8001e18:	757b      	strb	r3, [r7, #21]
	conversion_union.ui8[2] = buffer[5];
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	795b      	ldrb	r3, [r3, #5]
 8001e1e:	75bb      	strb	r3, [r7, #22]
	conversion_union.ui8[3] = buffer[6];
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	799b      	ldrb	r3, [r3, #6]
 8001e24:	75fb      	strb	r3, [r7, #23]
	(*data) = conversion_union.ui32;
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	601a      	str	r2, [r3, #0]

	return;
 8001e2c:	bf00      	nop
}
 8001e2e:	371c      	adds	r7, #28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <HAL_MspInit+0x30>)
 8001e40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e44:	4a08      	ldr	r2, [pc, #32]	@ (8001e68 <HAL_MspInit+0x30>)
 8001e46:	f043 0302 	orr.w	r3, r3, #2
 8001e4a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e4e:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_MspInit+0x30>)
 8001e50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	58024400 	.word	0x58024400

08001e6c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08e      	sub	sp, #56	@ 0x38
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a64      	ldr	r2, [pc, #400]	@ (800201c <HAL_ADC_MspInit+0x1b0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d157      	bne.n	8001f3e <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e8e:	4b64      	ldr	r3, [pc, #400]	@ (8002020 <HAL_ADC_MspInit+0x1b4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	3301      	adds	r3, #1
 8001e94:	4a62      	ldr	r2, [pc, #392]	@ (8002020 <HAL_ADC_MspInit+0x1b4>)
 8001e96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e98:	4b61      	ldr	r3, [pc, #388]	@ (8002020 <HAL_ADC_MspInit+0x1b4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d10e      	bne.n	8001ebe <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ea0:	4b60      	ldr	r3, [pc, #384]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001ea2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ea6:	4a5f      	ldr	r2, [pc, #380]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001ea8:	f043 0320 	orr.w	r3, r3, #32
 8001eac:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001eb0:	4b5c      	ldr	r3, [pc, #368]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001eb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001eb6:	f003 0320 	and.w	r3, r3, #32
 8001eba:	623b      	str	r3, [r7, #32]
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebe:	4b59      	ldr	r3, [pc, #356]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec4:	4a57      	ldr	r2, [pc, #348]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001ec6:	f043 0302 	orr.w	r3, r3, #2
 8001eca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ece:	4b55      	ldr	r3, [pc, #340]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001edc:	4b51      	ldr	r3, [pc, #324]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee2:	4a50      	ldr	r2, [pc, #320]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001ee4:	f043 0320 	orr.w	r3, r3, #32
 8001ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eec:	4b4d      	ldr	r3, [pc, #308]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef2:	f003 0320 	and.w	r3, r3, #32
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001efa:	2302      	movs	r3, #2
 8001efc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001efe:	2303      	movs	r3, #3
 8001f00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4846      	ldr	r0, [pc, #280]	@ (8002028 <HAL_ADC_MspInit+0x1bc>)
 8001f0e:	f003 fdcf 	bl	8005ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f24:	4619      	mov	r1, r3
 8001f26:	4841      	ldr	r0, [pc, #260]	@ (800202c <HAL_ADC_MspInit+0x1c0>)
 8001f28:	f003 fdc2 	bl	8005ab0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2101      	movs	r1, #1
 8001f30:	2012      	movs	r0, #18
 8001f32:	f003 f8b8 	bl	80050a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f36:	2012      	movs	r0, #18
 8001f38:	f003 f8cf 	bl	80050da <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f3c:	e069      	b.n	8002012 <HAL_ADC_MspInit+0x1a6>
  else if(hadc->Instance==ADC2)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a3b      	ldr	r2, [pc, #236]	@ (8002030 <HAL_ADC_MspInit+0x1c4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d13b      	bne.n	8001fc0 <HAL_ADC_MspInit+0x154>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f48:	4b35      	ldr	r3, [pc, #212]	@ (8002020 <HAL_ADC_MspInit+0x1b4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	4a34      	ldr	r2, [pc, #208]	@ (8002020 <HAL_ADC_MspInit+0x1b4>)
 8001f50:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f52:	4b33      	ldr	r3, [pc, #204]	@ (8002020 <HAL_ADC_MspInit+0x1b4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d10e      	bne.n	8001f78 <HAL_ADC_MspInit+0x10c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f5a:	4b32      	ldr	r3, [pc, #200]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001f5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f60:	4a30      	ldr	r2, [pc, #192]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001f62:	f043 0320 	orr.w	r3, r3, #32
 8001f66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001f6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f70:	f003 0320 	and.w	r3, r3, #32
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f78:	4b2a      	ldr	r3, [pc, #168]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f7e:	4a29      	ldr	r2, [pc, #164]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f88:	4b26      	ldr	r3, [pc, #152]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f96:	2302      	movs	r3, #2
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	481f      	ldr	r0, [pc, #124]	@ (8002028 <HAL_ADC_MspInit+0x1bc>)
 8001faa:	f003 fd81 	bl	8005ab0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	2012      	movs	r0, #18
 8001fb4:	f003 f877 	bl	80050a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001fb8:	2012      	movs	r0, #18
 8001fba:	f003 f88e 	bl	80050da <HAL_NVIC_EnableIRQ>
}
 8001fbe:	e028      	b.n	8002012 <HAL_ADC_MspInit+0x1a6>
  else if(hadc->Instance==ADC3)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8002034 <HAL_ADC_MspInit+0x1c8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d123      	bne.n	8002012 <HAL_ADC_MspInit+0x1a6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001fca:	4b16      	ldr	r3, [pc, #88]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fd0:	4a14      	ldr	r2, [pc, #80]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001fd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fda:	4b12      	ldr	r3, [pc, #72]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fe0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fee:	4a0d      	ldr	r2, [pc, #52]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <HAL_ADC_MspInit+0x1b8>)
 8001ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002006:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800200a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800200e:	f000 fc8f 	bl	8002930 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8002012:	bf00      	nop
 8002014:	3738      	adds	r7, #56	@ 0x38
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40022000 	.word	0x40022000
 8002020:	2400068c 	.word	0x2400068c
 8002024:	58024400 	.word	0x58024400
 8002028:	58020400 	.word	0x58020400
 800202c:	58021400 	.word	0x58021400
 8002030:	40022100 	.word	0x40022100
 8002034:	58026000 	.word	0x58026000

08002038 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0b      	ldr	r2, [pc, #44]	@ (8002074 <HAL_CRC_MspInit+0x3c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d10e      	bne.n	8002068 <HAL_CRC_MspInit+0x30>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800204a:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <HAL_CRC_MspInit+0x40>)
 800204c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002050:	4a09      	ldr	r2, [pc, #36]	@ (8002078 <HAL_CRC_MspInit+0x40>)
 8002052:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002056:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800205a:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <HAL_CRC_MspInit+0x40>)
 800205c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002060:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	58024c00 	.word	0x58024c00
 8002078:	58024400 	.word	0x58024400

0800207c <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0b      	ldr	r2, [pc, #44]	@ (80020b8 <HAL_DMA2D_MspInit+0x3c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10e      	bne.n	80020ac <HAL_DMA2D_MspInit+0x30>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800208e:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <HAL_DMA2D_MspInit+0x40>)
 8002090:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002094:	4a09      	ldr	r2, [pc, #36]	@ (80020bc <HAL_DMA2D_MspInit+0x40>)
 8002096:	f043 0310 	orr.w	r3, r3, #16
 800209a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800209e:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <HAL_DMA2D_MspInit+0x40>)
 80020a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	52001000 	.word	0x52001000
 80020bc:	58024400 	.word	0x58024400

080020c0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b0b8      	sub	sp, #224	@ 0xe0
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	22b8      	movs	r2, #184	@ 0xb8
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f00d fa02 	bl	800f4ea <memset>
  if(hi2c->Instance==I2C1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a2e      	ldr	r2, [pc, #184]	@ (80021a4 <HAL_I2C_MspInit+0xe4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d155      	bne.n	800219c <HAL_I2C_MspInit+0xdc>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020f0:	f04f 0208 	mov.w	r2, #8
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002102:	f107 0310 	add.w	r3, r7, #16
 8002106:	4618      	mov	r0, r3
 8002108:	f007 f8ee 	bl	80092e8 <HAL_RCCEx_PeriphCLKConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002112:	f7ff fe11 	bl	8001d38 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002116:	4b24      	ldr	r3, [pc, #144]	@ (80021a8 <HAL_I2C_MspInit+0xe8>)
 8002118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800211c:	4a22      	ldr	r2, [pc, #136]	@ (80021a8 <HAL_I2C_MspInit+0xe8>)
 800211e:	f043 0302 	orr.w	r3, r3, #2
 8002122:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002126:	4b20      	ldr	r3, [pc, #128]	@ (80021a8 <HAL_I2C_MspInit+0xe8>)
 8002128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002134:	23c0      	movs	r3, #192	@ 0xc0
 8002136:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800213a:	2312      	movs	r3, #18
 800213c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002140:	2301      	movs	r3, #1
 8002142:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800214c:	2304      	movs	r3, #4
 800214e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002152:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002156:	4619      	mov	r1, r3
 8002158:	4814      	ldr	r0, [pc, #80]	@ (80021ac <HAL_I2C_MspInit+0xec>)
 800215a:	f003 fca9 	bl	8005ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800215e:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <HAL_I2C_MspInit+0xe8>)
 8002160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002164:	4a10      	ldr	r2, [pc, #64]	@ (80021a8 <HAL_I2C_MspInit+0xe8>)
 8002166:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800216a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800216e:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <HAL_I2C_MspInit+0xe8>)
 8002170:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800217c:	2200      	movs	r2, #0
 800217e:	2100      	movs	r1, #0
 8002180:	201f      	movs	r0, #31
 8002182:	f002 ff90 	bl	80050a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002186:	201f      	movs	r0, #31
 8002188:	f002 ffa7 	bl	80050da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800218c:	2200      	movs	r2, #0
 800218e:	2100      	movs	r1, #0
 8002190:	2020      	movs	r0, #32
 8002192:	f002 ff88 	bl	80050a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002196:	2020      	movs	r0, #32
 8002198:	f002 ff9f 	bl	80050da <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800219c:	bf00      	nop
 800219e:	37e0      	adds	r7, #224	@ 0xe0
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40005400 	.word	0x40005400
 80021a8:	58024400 	.word	0x58024400
 80021ac:	58020400 	.word	0x58020400

080021b0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b0ba      	sub	sp, #232	@ 0xe8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c8:	f107 0318 	add.w	r3, r7, #24
 80021cc:	22b8      	movs	r2, #184	@ 0xb8
 80021ce:	2100      	movs	r1, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f00d f98a 	bl	800f4ea <memset>
  if(hspi->Instance==SPI1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a38      	ldr	r2, [pc, #224]	@ (80022bc <HAL_SPI_MspInit+0x10c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d168      	bne.n	80022b2 <HAL_SPI_MspInit+0x102>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80021e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021f0:	f107 0318 	add.w	r3, r7, #24
 80021f4:	4618      	mov	r0, r3
 80021f6:	f007 f877 	bl	80092e8 <HAL_RCCEx_PeriphCLKConfig>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002200:	f7ff fd9a 	bl	8001d38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002204:	4b2e      	ldr	r3, [pc, #184]	@ (80022c0 <HAL_SPI_MspInit+0x110>)
 8002206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800220a:	4a2d      	ldr	r2, [pc, #180]	@ (80022c0 <HAL_SPI_MspInit+0x110>)
 800220c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002210:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002214:	4b2a      	ldr	r3, [pc, #168]	@ (80022c0 <HAL_SPI_MspInit+0x110>)
 8002216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800221a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	4b27      	ldr	r3, [pc, #156]	@ (80022c0 <HAL_SPI_MspInit+0x110>)
 8002224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002228:	4a25      	ldr	r2, [pc, #148]	@ (80022c0 <HAL_SPI_MspInit+0x110>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002232:	4b23      	ldr	r3, [pc, #140]	@ (80022c0 <HAL_SPI_MspInit+0x110>)
 8002234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002240:	4b1f      	ldr	r3, [pc, #124]	@ (80022c0 <HAL_SPI_MspInit+0x110>)
 8002242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002246:	4a1e      	ldr	r2, [pc, #120]	@ (80022c0 <HAL_SPI_MspInit+0x110>)
 8002248:	f043 0308 	orr.w	r3, r3, #8
 800224c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002250:	4b1b      	ldr	r3, [pc, #108]	@ (80022c0 <HAL_SPI_MspInit+0x110>)
 8002252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800225e:	2320      	movs	r3, #32
 8002260:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002276:	2305      	movs	r3, #5
 8002278:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002280:	4619      	mov	r1, r3
 8002282:	4810      	ldr	r0, [pc, #64]	@ (80022c4 <HAL_SPI_MspInit+0x114>)
 8002284:	f003 fc14 	bl	8005ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002288:	2380      	movs	r3, #128	@ 0x80
 800228a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022a0:	2305      	movs	r3, #5
 80022a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022aa:	4619      	mov	r1, r3
 80022ac:	4806      	ldr	r0, [pc, #24]	@ (80022c8 <HAL_SPI_MspInit+0x118>)
 80022ae:	f003 fbff 	bl	8005ab0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80022b2:	bf00      	nop
 80022b4:	37e8      	adds	r7, #232	@ 0xe8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40013000 	.word	0x40013000
 80022c0:	58024400 	.word	0x58024400
 80022c4:	58020000 	.word	0x58020000
 80022c8:	58020c00 	.word	0x58020c00

080022cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022dc:	d117      	bne.n	800230e <HAL_TIM_Base_MspInit+0x42>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022de:	4b18      	ldr	r3, [pc, #96]	@ (8002340 <HAL_TIM_Base_MspInit+0x74>)
 80022e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022e4:	4a16      	ldr	r2, [pc, #88]	@ (8002340 <HAL_TIM_Base_MspInit+0x74>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022ee:	4b14      	ldr	r3, [pc, #80]	@ (8002340 <HAL_TIM_Base_MspInit+0x74>)
 80022f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	201c      	movs	r0, #28
 8002302:	f002 fed0 	bl	80050a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002306:	201c      	movs	r0, #28
 8002308:	f002 fee7 	bl	80050da <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800230c:	e013      	b.n	8002336 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM3)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a0c      	ldr	r2, [pc, #48]	@ (8002344 <HAL_TIM_Base_MspInit+0x78>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d10e      	bne.n	8002336 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002318:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <HAL_TIM_Base_MspInit+0x74>)
 800231a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800231e:	4a08      	ldr	r2, [pc, #32]	@ (8002340 <HAL_TIM_Base_MspInit+0x74>)
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002328:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <HAL_TIM_Base_MspInit+0x74>)
 800232a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	58024400 	.word	0x58024400
 8002344:	40000400 	.word	0x40000400

08002348 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a12      	ldr	r2, [pc, #72]	@ (80023b0 <HAL_TIM_MspPostInit+0x68>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d11e      	bne.n	80023a8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236a:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <HAL_TIM_MspPostInit+0x6c>)
 800236c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002370:	4a10      	ldr	r2, [pc, #64]	@ (80023b4 <HAL_TIM_MspPostInit+0x6c>)
 8002372:	f043 0302 	orr.w	r3, r3, #2
 8002376:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800237a:	4b0e      	ldr	r3, [pc, #56]	@ (80023b4 <HAL_TIM_MspPostInit+0x6c>)
 800237c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002388:	2301      	movs	r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002398:	2302      	movs	r3, #2
 800239a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	4619      	mov	r1, r3
 80023a2:	4805      	ldr	r0, [pc, #20]	@ (80023b8 <HAL_TIM_MspPostInit+0x70>)
 80023a4:	f003 fb84 	bl	8005ab0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80023a8:	bf00      	nop
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40000400 	.word	0x40000400
 80023b4:	58024400 	.word	0x58024400
 80023b8:	58020400 	.word	0x58020400

080023bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <NMI_Handler+0x4>

080023c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <HardFault_Handler+0x4>

080023cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d0:	bf00      	nop
 80023d2:	e7fd      	b.n	80023d0 <MemManage_Handler+0x4>

080023d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <BusFault_Handler+0x4>

080023dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <UsageFault_Handler+0x4>

080023e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002412:	f000 fa49 	bl	80028a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}

0800241a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HEATER_Pin);
 800241e:	2004      	movs	r0, #4
 8002420:	f003 fd1f 	bl	8005e62 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}

08002428 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PLATFORM_TOUCH_Pin);
 800242c:	2008      	movs	r0, #8
 800242e:	f003 fd18 	bl	8005e62 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800243c:	4803      	ldr	r0, [pc, #12]	@ (800244c <ADC_IRQHandler+0x14>)
 800243e:	f001 f9cf 	bl	80037e0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002442:	4803      	ldr	r0, [pc, #12]	@ (8002450 <ADC_IRQHandler+0x18>)
 8002444:	f001 f9cc 	bl	80037e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}
 800244c:	24000244 	.word	0x24000244
 8002450:	240002b4 	.word	0x240002b4

08002454 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002458:	4802      	ldr	r0, [pc, #8]	@ (8002464 <TIM2_IRQHandler+0x10>)
 800245a:	f00a f9e1 	bl	800c820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	240004fc 	.word	0x240004fc

08002468 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800246c:	4802      	ldr	r0, [pc, #8]	@ (8002478 <I2C1_EV_IRQHandler+0x10>)
 800246e:	f003 ff37 	bl	80062e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	24000420 	.word	0x24000420

0800247c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002480:	4802      	ldr	r0, [pc, #8]	@ (800248c <I2C1_ER_IRQHandler+0x10>)
 8002482:	f003 ff47 	bl	8006314 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	24000420 	.word	0x24000420

08002490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return 1;
 8002494:	2301      	movs	r3, #1
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <_kill>:

int _kill(int pid, int sig)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024aa:	f00d f8c1 	bl	800f630 <__errno>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2216      	movs	r2, #22
 80024b2:	601a      	str	r2, [r3, #0]
  return -1;
 80024b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <_exit>:

void _exit (int status)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024c8:	f04f 31ff 	mov.w	r1, #4294967295
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ffe7 	bl	80024a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024d2:	bf00      	nop
 80024d4:	e7fd      	b.n	80024d2 <_exit+0x12>

080024d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b086      	sub	sp, #24
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	e00a      	b.n	80024fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024e8:	f3af 8000 	nop.w
 80024ec:	4601      	mov	r1, r0
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	60ba      	str	r2, [r7, #8]
 80024f4:	b2ca      	uxtb	r2, r1
 80024f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	3301      	adds	r3, #1
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	429a      	cmp	r2, r3
 8002504:	dbf0      	blt.n	80024e8 <_read+0x12>
  }

  return len;
 8002506:	687b      	ldr	r3, [r7, #4]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	e009      	b.n	8002536 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	60ba      	str	r2, [r7, #8]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	3301      	adds	r3, #1
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	429a      	cmp	r2, r3
 800253c:	dbf1      	blt.n	8002522 <_write+0x12>
  }
  return len;
 800253e:	687b      	ldr	r3, [r7, #4]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <_close>:

int _close(int file)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002570:	605a      	str	r2, [r3, #4]
  return 0;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_isatty>:

int _isatty(int file)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002588:	2301      	movs	r3, #1
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002596:	b480      	push	{r7}
 8002598:	b085      	sub	sp, #20
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b8:	4a14      	ldr	r2, [pc, #80]	@ (800260c <_sbrk+0x5c>)
 80025ba:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <_sbrk+0x60>)
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c4:	4b13      	ldr	r3, [pc, #76]	@ (8002614 <_sbrk+0x64>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025cc:	4b11      	ldr	r3, [pc, #68]	@ (8002614 <_sbrk+0x64>)
 80025ce:	4a12      	ldr	r2, [pc, #72]	@ (8002618 <_sbrk+0x68>)
 80025d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025d2:	4b10      	ldr	r3, [pc, #64]	@ (8002614 <_sbrk+0x64>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d207      	bcs.n	80025f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025e0:	f00d f826 	bl	800f630 <__errno>
 80025e4:	4603      	mov	r3, r0
 80025e6:	220c      	movs	r2, #12
 80025e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	e009      	b.n	8002604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025f0:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <_sbrk+0x64>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025f6:	4b07      	ldr	r3, [pc, #28]	@ (8002614 <_sbrk+0x64>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	4a05      	ldr	r2, [pc, #20]	@ (8002614 <_sbrk+0x64>)
 8002600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002602:	68fb      	ldr	r3, [r7, #12]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	24050000 	.word	0x24050000
 8002610:	00000400 	.word	0x00000400
 8002614:	24000690 	.word	0x24000690
 8002618:	24000a90 	.word	0x24000a90

0800261c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002620:	4b3e      	ldr	r3, [pc, #248]	@ (800271c <SystemInit+0x100>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002626:	4a3d      	ldr	r2, [pc, #244]	@ (800271c <SystemInit+0x100>)
 8002628:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800262c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002630:	4b3b      	ldr	r3, [pc, #236]	@ (8002720 <SystemInit+0x104>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	2b06      	cmp	r3, #6
 800263a:	d807      	bhi.n	800264c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800263c:	4b38      	ldr	r3, [pc, #224]	@ (8002720 <SystemInit+0x104>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 030f 	bic.w	r3, r3, #15
 8002644:	4a36      	ldr	r2, [pc, #216]	@ (8002720 <SystemInit+0x104>)
 8002646:	f043 0307 	orr.w	r3, r3, #7
 800264a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800264c:	4b35      	ldr	r3, [pc, #212]	@ (8002724 <SystemInit+0x108>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a34      	ldr	r2, [pc, #208]	@ (8002724 <SystemInit+0x108>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002658:	4b32      	ldr	r3, [pc, #200]	@ (8002724 <SystemInit+0x108>)
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800265e:	4b31      	ldr	r3, [pc, #196]	@ (8002724 <SystemInit+0x108>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4930      	ldr	r1, [pc, #192]	@ (8002724 <SystemInit+0x108>)
 8002664:	4b30      	ldr	r3, [pc, #192]	@ (8002728 <SystemInit+0x10c>)
 8002666:	4013      	ands	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800266a:	4b2d      	ldr	r3, [pc, #180]	@ (8002720 <SystemInit+0x104>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002676:	4b2a      	ldr	r3, [pc, #168]	@ (8002720 <SystemInit+0x104>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 030f 	bic.w	r3, r3, #15
 800267e:	4a28      	ldr	r2, [pc, #160]	@ (8002720 <SystemInit+0x104>)
 8002680:	f043 0307 	orr.w	r3, r3, #7
 8002684:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002686:	4b27      	ldr	r3, [pc, #156]	@ (8002724 <SystemInit+0x108>)
 8002688:	2200      	movs	r2, #0
 800268a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800268c:	4b25      	ldr	r3, [pc, #148]	@ (8002724 <SystemInit+0x108>)
 800268e:	2200      	movs	r2, #0
 8002690:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002692:	4b24      	ldr	r3, [pc, #144]	@ (8002724 <SystemInit+0x108>)
 8002694:	2200      	movs	r2, #0
 8002696:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002698:	4b22      	ldr	r3, [pc, #136]	@ (8002724 <SystemInit+0x108>)
 800269a:	4a24      	ldr	r2, [pc, #144]	@ (800272c <SystemInit+0x110>)
 800269c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800269e:	4b21      	ldr	r3, [pc, #132]	@ (8002724 <SystemInit+0x108>)
 80026a0:	4a23      	ldr	r2, [pc, #140]	@ (8002730 <SystemInit+0x114>)
 80026a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80026a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002724 <SystemInit+0x108>)
 80026a6:	4a23      	ldr	r2, [pc, #140]	@ (8002734 <SystemInit+0x118>)
 80026a8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002724 <SystemInit+0x108>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80026b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002724 <SystemInit+0x108>)
 80026b2:	4a20      	ldr	r2, [pc, #128]	@ (8002734 <SystemInit+0x118>)
 80026b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80026b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <SystemInit+0x108>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80026bc:	4b19      	ldr	r3, [pc, #100]	@ (8002724 <SystemInit+0x108>)
 80026be:	4a1d      	ldr	r2, [pc, #116]	@ (8002734 <SystemInit+0x118>)
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80026c2:	4b18      	ldr	r3, [pc, #96]	@ (8002724 <SystemInit+0x108>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026c8:	4b16      	ldr	r3, [pc, #88]	@ (8002724 <SystemInit+0x108>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a15      	ldr	r2, [pc, #84]	@ (8002724 <SystemInit+0x108>)
 80026ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026d4:	4b13      	ldr	r3, [pc, #76]	@ (8002724 <SystemInit+0x108>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80026da:	4b12      	ldr	r3, [pc, #72]	@ (8002724 <SystemInit+0x108>)
 80026dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80026e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d113      	bne.n	8002710 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80026e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002724 <SystemInit+0x108>)
 80026ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80026ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002724 <SystemInit+0x108>)
 80026f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80026f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002738 <SystemInit+0x11c>)
 80026fa:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80026fe:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002700:	4b08      	ldr	r3, [pc, #32]	@ (8002724 <SystemInit+0x108>)
 8002702:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002706:	4a07      	ldr	r2, [pc, #28]	@ (8002724 <SystemInit+0x108>)
 8002708:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800270c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000ed00 	.word	0xe000ed00
 8002720:	52002000 	.word	0x52002000
 8002724:	58024400 	.word	0x58024400
 8002728:	eaf6ed7f 	.word	0xeaf6ed7f
 800272c:	02020200 	.word	0x02020200
 8002730:	01ff0000 	.word	0x01ff0000
 8002734:	01010280 	.word	0x01010280
 8002738:	52004000 	.word	0x52004000

0800273c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002740:	4b09      	ldr	r3, [pc, #36]	@ (8002768 <ExitRun0Mode+0x2c>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4a08      	ldr	r2, [pc, #32]	@ (8002768 <ExitRun0Mode+0x2c>)
 8002746:	f043 0302 	orr.w	r3, r3, #2
 800274a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800274c:	bf00      	nop
 800274e:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <ExitRun0Mode+0x2c>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f9      	beq.n	800274e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800275a:	bf00      	nop
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	58024800 	.word	0x58024800

0800276c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack      /* set stack pointer */
 800276c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80027a8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002770:	f7ff ffe4 	bl	800273c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002774:	f7ff ff52 	bl	800261c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002778:	480c      	ldr	r0, [pc, #48]	@ (80027ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800277a:	490d      	ldr	r1, [pc, #52]	@ (80027b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800277c:	4a0d      	ldr	r2, [pc, #52]	@ (80027b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002780:	e002      	b.n	8002788 <LoopCopyDataInit>

08002782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002786:	3304      	adds	r3, #4

08002788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800278a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800278c:	d3f9      	bcc.n	8002782 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800278e:	4a0a      	ldr	r2, [pc, #40]	@ (80027b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002790:	4c0a      	ldr	r4, [pc, #40]	@ (80027bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002794:	e001      	b.n	800279a <LoopFillZerobss>

08002796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002798:	3204      	adds	r2, #4

0800279a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800279a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800279c:	d3fb      	bcc.n	8002796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800279e:	f00c ff4d 	bl	800f63c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027a2:	f7fd fe05 	bl	80003b0 <main>
  bx  lr
 80027a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027a8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80027ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80027b0:	24000228 	.word	0x24000228
  ldr r2, =_sidata
 80027b4:	08011878 	.word	0x08011878
  ldr r2, =_sbss
 80027b8:	24000228 	.word	0x24000228
  ldr r4, =_ebss
 80027bc:	24000a8c 	.word	0x24000a8c

080027c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027c0:	e7fe      	b.n	80027c0 <ADC3_IRQHandler>
	...

080027c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ca:	2003      	movs	r0, #3
 80027cc:	f002 fc60 	bl	8005090 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027d0:	f006 fbca 	bl	8008f68 <HAL_RCC_GetSysClockFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b15      	ldr	r3, [pc, #84]	@ (800282c <HAL_Init+0x68>)
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	4913      	ldr	r1, [pc, #76]	@ (8002830 <HAL_Init+0x6c>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
 80027ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027ee:	4b0f      	ldr	r3, [pc, #60]	@ (800282c <HAL_Init+0x68>)
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002830 <HAL_Init+0x6c>)
 80027f8:	5cd3      	ldrb	r3, [r2, r3]
 80027fa:	f003 031f 	and.w	r3, r3, #31
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
 8002804:	4a0b      	ldr	r2, [pc, #44]	@ (8002834 <HAL_Init+0x70>)
 8002806:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002808:	4a0b      	ldr	r2, [pc, #44]	@ (8002838 <HAL_Init+0x74>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800280e:	2000      	movs	r0, #0
 8002810:	f000 f814 	bl	800283c <HAL_InitTick>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e002      	b.n	8002824 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800281e:	f7ff fb0b 	bl	8001e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	58024400 	.word	0x58024400
 8002830:	080103b8 	.word	0x080103b8
 8002834:	240001b8 	.word	0x240001b8
 8002838:	240001b4 	.word	0x240001b4

0800283c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002844:	4b15      	ldr	r3, [pc, #84]	@ (800289c <HAL_InitTick+0x60>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e021      	b.n	8002894 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002850:	4b13      	ldr	r3, [pc, #76]	@ (80028a0 <HAL_InitTick+0x64>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b11      	ldr	r3, [pc, #68]	@ (800289c <HAL_InitTick+0x60>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	4619      	mov	r1, r3
 800285a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800285e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002862:	fbb2 f3f3 	udiv	r3, r2, r3
 8002866:	4618      	mov	r0, r3
 8002868:	f002 fc45 	bl	80050f6 <HAL_SYSTICK_Config>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e00e      	b.n	8002894 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b0f      	cmp	r3, #15
 800287a:	d80a      	bhi.n	8002892 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800287c:	2200      	movs	r2, #0
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	f002 fc0f 	bl	80050a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002888:	4a06      	ldr	r2, [pc, #24]	@ (80028a4 <HAL_InitTick+0x68>)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	e000      	b.n	8002894 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	240001c0 	.word	0x240001c0
 80028a0:	240001b4 	.word	0x240001b4
 80028a4:	240001bc 	.word	0x240001bc

080028a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028ac:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <HAL_IncTick+0x20>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <HAL_IncTick+0x24>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4413      	add	r3, r2
 80028b8:	4a04      	ldr	r2, [pc, #16]	@ (80028cc <HAL_IncTick+0x24>)
 80028ba:	6013      	str	r3, [r2, #0]
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	240001c0 	.word	0x240001c0
 80028cc:	24000694 	.word	0x24000694

080028d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return uwTick;
 80028d4:	4b03      	ldr	r3, [pc, #12]	@ (80028e4 <HAL_GetTick+0x14>)
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	24000694 	.word	0x24000694

080028e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028f0:	f7ff ffee 	bl	80028d0 <HAL_GetTick>
 80028f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d005      	beq.n	800290e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002902:	4b0a      	ldr	r3, [pc, #40]	@ (800292c <HAL_Delay+0x44>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4413      	add	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800290e:	bf00      	nop
 8002910:	f7ff ffde 	bl	80028d0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	429a      	cmp	r2, r3
 800291e:	d8f7      	bhi.n	8002910 <HAL_Delay+0x28>
  {
  }
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	240001c0 	.word	0x240001c0

08002930 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800293a:	4b07      	ldr	r3, [pc, #28]	@ (8002958 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	43db      	mvns	r3, r3
 8002942:	401a      	ands	r2, r3
 8002944:	4904      	ldr	r1, [pc, #16]	@ (8002958 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	58000400 	.word	0x58000400

0800295c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	609a      	str	r2, [r3, #8]
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	609a      	str	r2, [r3, #8]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a18      	ldr	r2, [pc, #96]	@ (8002a34 <LL_ADC_SetChannelPreselection+0x70>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d027      	beq.n	8002a26 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d107      	bne.n	80029f0 <LL_ADC_SetChannelPreselection+0x2c>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	0e9b      	lsrs	r3, r3, #26
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	2201      	movs	r2, #1
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	e015      	b.n	8002a1c <LL_ADC_SetChannelPreselection+0x58>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8002a06:	2320      	movs	r3, #32
 8002a08:	e003      	b.n	8002a12 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	fab3 f383 	clz	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2201      	movs	r2, #1
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	69d2      	ldr	r2, [r2, #28]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8002a26:	bf00      	nop
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	58026000 	.word	0x58026000

08002a38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3360      	adds	r3, #96	@ 0x60
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4a10      	ldr	r2, [pc, #64]	@ (8002a98 <LL_ADC_SetOffset+0x60>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d10b      	bne.n	8002a74 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a72:	e00b      	b.n	8002a8c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	430b      	orrs	r3, r1
 8002a86:	431a      	orrs	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	601a      	str	r2, [r3, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	58026000 	.word	0x58026000

08002a9c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3360      	adds	r3, #96	@ 0x60
 8002aaa:	461a      	mov	r2, r3
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	611a      	str	r2, [r3, #16]
}
 8002aee:	bf00      	nop
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b3c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00e      	beq.n	8002b2e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3360      	adds	r3, #96	@ 0x60
 8002b14:	461a      	mov	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	601a      	str	r2, [r3, #0]
  }
}
 8002b2e:	bf00      	nop
 8002b30:	371c      	adds	r7, #28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	58026000 	.word	0x58026000

08002b40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b80 <LL_ADC_SetOffsetSaturation+0x40>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d10e      	bne.n	8002b72 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3360      	adds	r3, #96	@ 0x60
 8002b58:	461a      	mov	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002b72:	bf00      	nop
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	58026000 	.word	0x58026000

08002b84 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4a0c      	ldr	r2, [pc, #48]	@ (8002bc4 <LL_ADC_SetOffsetSign+0x40>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d10e      	bne.n	8002bb6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	3360      	adds	r3, #96	@ 0x60
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	371c      	adds	r7, #28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	58026000 	.word	0x58026000

08002bc8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	3360      	adds	r3, #96	@ 0x60
 8002bd8:	461a      	mov	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4a0c      	ldr	r2, [pc, #48]	@ (8002c18 <LL_ADC_SetOffsetState+0x50>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d108      	bne.n	8002bfc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002bfa:	e007      	b.n	8002c0c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	601a      	str	r2, [r3, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	371c      	adds	r7, #28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	58026000 	.word	0x58026000

08002c1c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b087      	sub	sp, #28
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3330      	adds	r3, #48	@ 0x30
 8002c52:	461a      	mov	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	0a1b      	lsrs	r3, r3, #8
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	4413      	add	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	211f      	movs	r1, #31
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	401a      	ands	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	f003 011f 	and.w	r1, r3, #31
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	fa01 f303 	lsl.w	r3, r1, r3
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c8e:	bf00      	nop
 8002c90:	371c      	adds	r7, #28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	3314      	adds	r3, #20
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	0e5b      	lsrs	r3, r3, #25
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	4413      	add	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	0d1b      	lsrs	r3, r3, #20
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	2107      	movs	r1, #7
 8002cee:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	401a      	ands	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	0d1b      	lsrs	r3, r3, #20
 8002cfa:	f003 031f 	and.w	r3, r3, #31
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	fa01 f303 	lsl.w	r3, r1, r3
 8002d04:	431a      	orrs	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4a1a      	ldr	r2, [pc, #104]	@ (8002d90 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d115      	bne.n	8002d58 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f003 0318 	and.w	r3, r3, #24
 8002d42:	4914      	ldr	r1, [pc, #80]	@ (8002d94 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002d44:	40d9      	lsrs	r1, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	400b      	ands	r3, r1
 8002d4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002d56:	e014      	b.n	8002d82 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d64:	43db      	mvns	r3, r3
 8002d66:	401a      	ands	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0318 	and.w	r3, r3, #24
 8002d6e:	4909      	ldr	r1, [pc, #36]	@ (8002d94 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002d70:	40d9      	lsrs	r1, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	400b      	ands	r3, r1
 8002d76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	58026000 	.word	0x58026000
 8002d94:	000fffff 	.word	0x000fffff

08002d98 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 031f 	and.w	r3, r3, #31
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	4b04      	ldr	r3, [pc, #16]	@ (8002df0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6093      	str	r3, [r2, #8]
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	5fffffc0 	.word	0x5fffffc0

08002df4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e08:	d101      	bne.n	8002e0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	4b05      	ldr	r3, [pc, #20]	@ (8002e40 <LL_ADC_EnableInternalRegulator+0x24>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	6fffffc0 	.word	0x6fffffc0

08002e44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e58:	d101      	bne.n	8002e5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <LL_ADC_Enable+0x24>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	f043 0201 	orr.w	r2, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	7fffffc0 	.word	0x7fffffc0

08002e94 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	4b05      	ldr	r3, [pc, #20]	@ (8002eb8 <LL_ADC_Disable+0x24>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	f043 0202 	orr.w	r2, r3, #2
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	7fffffc0 	.word	0x7fffffc0

08002ebc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <LL_ADC_IsEnabled+0x18>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <LL_ADC_IsEnabled+0x1a>
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d101      	bne.n	8002efa <LL_ADC_IsDisableOngoing+0x18>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <LL_ADC_IsDisableOngoing+0x1a>
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	4b05      	ldr	r3, [pc, #20]	@ (8002f2c <LL_ADC_REG_StartConversion+0x24>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	f043 0204 	orr.w	r2, r3, #4
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	7fffffc0 	.word	0x7fffffc0

08002f30 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <LL_ADC_REG_StopConversion+0x24>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	f043 0210 	orr.w	r2, r3, #16
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	7fffffc0 	.word	0x7fffffc0

08002f58 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d101      	bne.n	8002f70 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	4b05      	ldr	r3, [pc, #20]	@ (8002fa4 <LL_ADC_INJ_StopConversion+0x24>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	f043 0220 	orr.w	r2, r3, #32
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	7fffffc0 	.word	0x7fffffc0

08002fa8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d101      	bne.n	8002fc0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b089      	sub	sp, #36	@ 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e1ee      	b.n	80033c8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d109      	bne.n	800300c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7fe ff37 	bl	8001e6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff feef 	bl	8002df4 <LL_ADC_IsDeepPowerDownEnabled>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d004      	beq.n	8003026 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fed5 	bl	8002dd0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff ff0a 	bl	8002e44 <LL_ADC_IsInternalRegulatorEnabled>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d114      	bne.n	8003060 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff feee 	bl	8002e1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003040:	4b8e      	ldr	r3, [pc, #568]	@ (800327c <HAL_ADC_Init+0x2ac>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	099b      	lsrs	r3, r3, #6
 8003046:	4a8e      	ldr	r2, [pc, #568]	@ (8003280 <HAL_ADC_Init+0x2b0>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	099b      	lsrs	r3, r3, #6
 800304e:	3301      	adds	r3, #1
 8003050:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003052:	e002      	b.n	800305a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	3b01      	subs	r3, #1
 8003058:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f9      	bne.n	8003054 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff feed 	bl	8002e44 <LL_ADC_IsInternalRegulatorEnabled>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10d      	bne.n	800308c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003074:	f043 0210 	orr.w	r2, r3, #16
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003080:	f043 0201 	orr.w	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ff61 	bl	8002f58 <LL_ADC_REG_IsConversionOngoing>
 8003096:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f040 8188 	bne.w	80033b6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f040 8184 	bne.w	80033b6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80030b6:	f043 0202 	orr.w	r2, r3, #2
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fefa 	bl	8002ebc <LL_ADC_IsEnabled>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d136      	bne.n	800313c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a6c      	ldr	r2, [pc, #432]	@ (8003284 <HAL_ADC_Init+0x2b4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d004      	beq.n	80030e2 <HAL_ADC_Init+0x112>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a6a      	ldr	r2, [pc, #424]	@ (8003288 <HAL_ADC_Init+0x2b8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d10e      	bne.n	8003100 <HAL_ADC_Init+0x130>
 80030e2:	4868      	ldr	r0, [pc, #416]	@ (8003284 <HAL_ADC_Init+0x2b4>)
 80030e4:	f7ff feea 	bl	8002ebc <LL_ADC_IsEnabled>
 80030e8:	4604      	mov	r4, r0
 80030ea:	4867      	ldr	r0, [pc, #412]	@ (8003288 <HAL_ADC_Init+0x2b8>)
 80030ec:	f7ff fee6 	bl	8002ebc <LL_ADC_IsEnabled>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4323      	orrs	r3, r4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e008      	b.n	8003112 <HAL_ADC_Init+0x142>
 8003100:	4862      	ldr	r0, [pc, #392]	@ (800328c <HAL_ADC_Init+0x2bc>)
 8003102:	f7ff fedb 	bl	8002ebc <LL_ADC_IsEnabled>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d012      	beq.n	800313c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a5a      	ldr	r2, [pc, #360]	@ (8003284 <HAL_ADC_Init+0x2b4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d004      	beq.n	800312a <HAL_ADC_Init+0x15a>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a58      	ldr	r2, [pc, #352]	@ (8003288 <HAL_ADC_Init+0x2b8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d101      	bne.n	800312e <HAL_ADC_Init+0x15e>
 800312a:	4a59      	ldr	r2, [pc, #356]	@ (8003290 <HAL_ADC_Init+0x2c0>)
 800312c:	e000      	b.n	8003130 <HAL_ADC_Init+0x160>
 800312e:	4a59      	ldr	r2, [pc, #356]	@ (8003294 <HAL_ADC_Init+0x2c4>)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4619      	mov	r1, r3
 8003136:	4610      	mov	r0, r2
 8003138:	f7ff fc10 	bl	800295c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a52      	ldr	r2, [pc, #328]	@ (800328c <HAL_ADC_Init+0x2bc>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d129      	bne.n	800319a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	7e5b      	ldrb	r3, [r3, #25]
 800314a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003150:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003156:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b08      	cmp	r3, #8
 800315e:	d013      	beq.n	8003188 <HAL_ADC_Init+0x1b8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b0c      	cmp	r3, #12
 8003166:	d00d      	beq.n	8003184 <HAL_ADC_Init+0x1b4>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b1c      	cmp	r3, #28
 800316e:	d007      	beq.n	8003180 <HAL_ADC_Init+0x1b0>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b18      	cmp	r3, #24
 8003176:	d101      	bne.n	800317c <HAL_ADC_Init+0x1ac>
 8003178:	2318      	movs	r3, #24
 800317a:	e006      	b.n	800318a <HAL_ADC_Init+0x1ba>
 800317c:	2300      	movs	r3, #0
 800317e:	e004      	b.n	800318a <HAL_ADC_Init+0x1ba>
 8003180:	2310      	movs	r3, #16
 8003182:	e002      	b.n	800318a <HAL_ADC_Init+0x1ba>
 8003184:	2308      	movs	r3, #8
 8003186:	e000      	b.n	800318a <HAL_ADC_Init+0x1ba>
 8003188:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800318a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003192:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
 8003198:	e00e      	b.n	80031b8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	7e5b      	ldrb	r3, [r3, #25]
 800319e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031a4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80031aa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d106      	bne.n	80031d0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	3b01      	subs	r3, #1
 80031c8:	045b      	lsls	r3, r3, #17
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d009      	beq.n	80031ec <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031dc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a26      	ldr	r2, [pc, #152]	@ (800328c <HAL_ADC_Init+0x2bc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d115      	bne.n	8003222 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	4b26      	ldr	r3, [pc, #152]	@ (8003298 <HAL_ADC_Init+0x2c8>)
 80031fe:	4013      	ands	r3, r2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	69b9      	ldr	r1, [r7, #24]
 8003206:	430b      	orrs	r3, r1
 8003208:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	611a      	str	r2, [r3, #16]
 8003220:	e009      	b.n	8003236 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	4b1c      	ldr	r3, [pc, #112]	@ (800329c <HAL_ADC_Init+0x2cc>)
 800322a:	4013      	ands	r3, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	69b9      	ldr	r1, [r7, #24]
 8003232:	430b      	orrs	r3, r1
 8003234:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fe8c 	bl	8002f58 <LL_ADC_REG_IsConversionOngoing>
 8003240:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff feae 	bl	8002fa8 <LL_ADC_INJ_IsConversionOngoing>
 800324c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f040 808e 	bne.w	8003372 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	f040 808a 	bne.w	8003372 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a0a      	ldr	r2, [pc, #40]	@ (800328c <HAL_ADC_Init+0x2bc>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d11b      	bne.n	80032a0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	7e1b      	ldrb	r3, [r3, #24]
 800326c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003274:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	e018      	b.n	80032ae <HAL_ADC_Init+0x2de>
 800327c:	240001b4 	.word	0x240001b4
 8003280:	053e2d63 	.word	0x053e2d63
 8003284:	40022000 	.word	0x40022000
 8003288:	40022100 	.word	0x40022100
 800328c:	58026000 	.word	0x58026000
 8003290:	40022300 	.word	0x40022300
 8003294:	58026300 	.word	0x58026300
 8003298:	fff04007 	.word	0xfff04007
 800329c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7e1b      	ldrb	r3, [r3, #24]
 80032a4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	4b46      	ldr	r3, [pc, #280]	@ (80033d0 <HAL_ADC_Init+0x400>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	69b9      	ldr	r1, [r7, #24]
 80032be:	430b      	orrs	r3, r1
 80032c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d137      	bne.n	800333c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a3f      	ldr	r2, [pc, #252]	@ (80033d4 <HAL_ADC_Init+0x404>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d116      	bne.n	800330a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	4b3d      	ldr	r3, [pc, #244]	@ (80033d8 <HAL_ADC_Init+0x408>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032ee:	4311      	orrs	r1, r2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032f4:	4311      	orrs	r1, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80032fa:	430a      	orrs	r2, r1
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	611a      	str	r2, [r3, #16]
 8003308:	e020      	b.n	800334c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	4b32      	ldr	r3, [pc, #200]	@ (80033dc <HAL_ADC_Init+0x40c>)
 8003312:	4013      	ands	r3, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003318:	3a01      	subs	r2, #1
 800331a:	0411      	lsls	r1, r2, #16
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003320:	4311      	orrs	r1, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003326:	4311      	orrs	r1, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800332c:	430a      	orrs	r2, r1
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0201 	orr.w	r2, r2, #1
 8003338:	611a      	str	r2, [r3, #16]
 800333a:	e007      	b.n	800334c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a1b      	ldr	r2, [pc, #108]	@ (80033d4 <HAL_ADC_Init+0x404>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d002      	beq.n	8003372 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f001 faff 	bl	8004970 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d10c      	bne.n	8003394 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003380:	f023 010f 	bic.w	r1, r3, #15
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	1e5a      	subs	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	631a      	str	r2, [r3, #48]	@ 0x30
 8003392:	e007      	b.n	80033a4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 020f 	bic.w	r2, r2, #15
 80033a2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a8:	f023 0303 	bic.w	r3, r3, #3
 80033ac:	f043 0201 	orr.w	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	661a      	str	r2, [r3, #96]	@ 0x60
 80033b4:	e007      	b.n	80033c6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ba:	f043 0210 	orr.w	r2, r3, #16
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3724      	adds	r7, #36	@ 0x24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd90      	pop	{r4, r7, pc}
 80033d0:	ffffbffc 	.word	0xffffbffc
 80033d4:	58026000 	.word	0x58026000
 80033d8:	fc00f81f 	.word	0xfc00f81f
 80033dc:	fc00f81e 	.word	0xfc00f81e

080033e0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a5c      	ldr	r2, [pc, #368]	@ (8003560 <HAL_ADC_Start+0x180>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d004      	beq.n	80033fc <HAL_ADC_Start+0x1c>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003564 <HAL_ADC_Start+0x184>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d101      	bne.n	8003400 <HAL_ADC_Start+0x20>
 80033fc:	4b5a      	ldr	r3, [pc, #360]	@ (8003568 <HAL_ADC_Start+0x188>)
 80033fe:	e000      	b.n	8003402 <HAL_ADC_Start+0x22>
 8003400:	4b5a      	ldr	r3, [pc, #360]	@ (800356c <HAL_ADC_Start+0x18c>)
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fcc8 	bl	8002d98 <LL_ADC_GetMultimode>
 8003408:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fda2 	bl	8002f58 <LL_ADC_REG_IsConversionOngoing>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	f040 809a 	bne.w	8003550 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_ADC_Start+0x4a>
 8003426:	2302      	movs	r3, #2
 8003428:	e095      	b.n	8003556 <HAL_ADC_Start+0x176>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f001 f9b2 	bl	800479c <ADC_Enable>
 8003438:	4603      	mov	r3, r0
 800343a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800343c:	7dfb      	ldrb	r3, [r7, #23]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f040 8081 	bne.w	8003546 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003448:	4b49      	ldr	r3, [pc, #292]	@ (8003570 <HAL_ADC_Start+0x190>)
 800344a:	4013      	ands	r3, r2
 800344c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a42      	ldr	r2, [pc, #264]	@ (8003564 <HAL_ADC_Start+0x184>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d002      	beq.n	8003464 <HAL_ADC_Start+0x84>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	e000      	b.n	8003466 <HAL_ADC_Start+0x86>
 8003464:	4b3e      	ldr	r3, [pc, #248]	@ (8003560 <HAL_ADC_Start+0x180>)
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	4293      	cmp	r3, r2
 800346c:	d002      	beq.n	8003474 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d105      	bne.n	8003480 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003478:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003484:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003488:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800348c:	d106      	bne.n	800349c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003492:	f023 0206 	bic.w	r2, r3, #6
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	665a      	str	r2, [r3, #100]	@ 0x64
 800349a:	e002      	b.n	80034a2 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	221c      	movs	r2, #28
 80034a8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a2b      	ldr	r2, [pc, #172]	@ (8003564 <HAL_ADC_Start+0x184>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d002      	beq.n	80034c2 <HAL_ADC_Start+0xe2>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	e000      	b.n	80034c4 <HAL_ADC_Start+0xe4>
 80034c2:	4b27      	ldr	r3, [pc, #156]	@ (8003560 <HAL_ADC_Start+0x180>)
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d008      	beq.n	80034de <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b05      	cmp	r3, #5
 80034d6:	d002      	beq.n	80034de <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	2b09      	cmp	r3, #9
 80034dc:	d114      	bne.n	8003508 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d007      	beq.n	80034fc <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80034f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff fd01 	bl	8002f08 <LL_ADC_REG_StartConversion>
 8003506:	e025      	b.n	8003554 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800350c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a12      	ldr	r2, [pc, #72]	@ (8003564 <HAL_ADC_Start+0x184>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d002      	beq.n	8003524 <HAL_ADC_Start+0x144>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	e000      	b.n	8003526 <HAL_ADC_Start+0x146>
 8003524:	4b0e      	ldr	r3, [pc, #56]	@ (8003560 <HAL_ADC_Start+0x180>)
 8003526:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00f      	beq.n	8003554 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003538:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800353c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	661a      	str	r2, [r3, #96]	@ 0x60
 8003544:	e006      	b.n	8003554 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800354e:	e001      	b.n	8003554 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003550:	2302      	movs	r3, #2
 8003552:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003554:	7dfb      	ldrb	r3, [r7, #23]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40022000 	.word	0x40022000
 8003564:	40022100 	.word	0x40022100
 8003568:	40022300 	.word	0x40022300
 800356c:	58026300 	.word	0x58026300
 8003570:	fffff0fe 	.word	0xfffff0fe

08003574 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_ADC_Stop+0x16>
 8003586:	2302      	movs	r3, #2
 8003588:	e021      	b.n	80035ce <HAL_ADC_Stop+0x5a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003592:	2103      	movs	r1, #3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f001 f845 	bl	8004624 <ADC_ConversionStop>
 800359a:	4603      	mov	r3, r0
 800359c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10f      	bne.n	80035c4 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f001 f983 	bl	80048b0 <ADC_Disable>
 80035aa:	4603      	mov	r3, r0
 80035ac:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d107      	bne.n	80035c4 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80035b8:	4b07      	ldr	r3, [pc, #28]	@ (80035d8 <HAL_ADC_Stop+0x64>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	f043 0201 	orr.w	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	ffffeefe 	.word	0xffffeefe

080035dc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a72      	ldr	r2, [pc, #456]	@ (80037b4 <HAL_ADC_PollForConversion+0x1d8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d004      	beq.n	80035fa <HAL_ADC_PollForConversion+0x1e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a70      	ldr	r2, [pc, #448]	@ (80037b8 <HAL_ADC_PollForConversion+0x1dc>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d101      	bne.n	80035fe <HAL_ADC_PollForConversion+0x22>
 80035fa:	4b70      	ldr	r3, [pc, #448]	@ (80037bc <HAL_ADC_PollForConversion+0x1e0>)
 80035fc:	e000      	b.n	8003600 <HAL_ADC_PollForConversion+0x24>
 80035fe:	4b70      	ldr	r3, [pc, #448]	@ (80037c0 <HAL_ADC_PollForConversion+0x1e4>)
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fbc9 	bl	8002d98 <LL_ADC_GetMultimode>
 8003606:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	2b08      	cmp	r3, #8
 800360e:	d102      	bne.n	8003616 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003610:	2308      	movs	r3, #8
 8003612:	61fb      	str	r3, [r7, #28]
 8003614:	e037      	b.n	8003686 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2b05      	cmp	r3, #5
 8003620:	d002      	beq.n	8003628 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b09      	cmp	r3, #9
 8003626:	d111      	bne.n	800364c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d007      	beq.n	8003646 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363a:	f043 0220 	orr.w	r2, r3, #32
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e0b1      	b.n	80037aa <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003646:	2304      	movs	r3, #4
 8003648:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800364a:	e01c      	b.n	8003686 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a58      	ldr	r2, [pc, #352]	@ (80037b4 <HAL_ADC_PollForConversion+0x1d8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d004      	beq.n	8003660 <HAL_ADC_PollForConversion+0x84>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a57      	ldr	r2, [pc, #348]	@ (80037b8 <HAL_ADC_PollForConversion+0x1dc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d101      	bne.n	8003664 <HAL_ADC_PollForConversion+0x88>
 8003660:	4b56      	ldr	r3, [pc, #344]	@ (80037bc <HAL_ADC_PollForConversion+0x1e0>)
 8003662:	e000      	b.n	8003666 <HAL_ADC_PollForConversion+0x8a>
 8003664:	4b56      	ldr	r3, [pc, #344]	@ (80037c0 <HAL_ADC_PollForConversion+0x1e4>)
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fba4 	bl	8002db4 <LL_ADC_GetMultiDMATransfer>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e093      	b.n	80037aa <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003682:	2304      	movs	r3, #4
 8003684:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003686:	f7ff f923 	bl	80028d0 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800368c:	e021      	b.n	80036d2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d01d      	beq.n	80036d2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003696:	f7ff f91b 	bl	80028d0 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d302      	bcc.n	80036ac <HAL_ADC_PollForConversion+0xd0>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d112      	bne.n	80036d2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10b      	bne.n	80036d2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036be:	f043 0204 	orr.w	r2, r3, #4
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e06b      	b.n	80037aa <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0d6      	beq.n	800368e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fa93 	bl	8002c1c <LL_ADC_REG_IsTriggerSourceSWStart>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01c      	beq.n	8003736 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	7e5b      	ldrb	r3, [r3, #25]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d118      	bne.n	8003736 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b08      	cmp	r3, #8
 8003710:	d111      	bne.n	8003736 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003716:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003722:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d105      	bne.n	8003736 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372e:	f043 0201 	orr.w	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a1f      	ldr	r2, [pc, #124]	@ (80037b8 <HAL_ADC_PollForConversion+0x1dc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d002      	beq.n	8003746 <HAL_ADC_PollForConversion+0x16a>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	e000      	b.n	8003748 <HAL_ADC_PollForConversion+0x16c>
 8003746:	4b1b      	ldr	r3, [pc, #108]	@ (80037b4 <HAL_ADC_PollForConversion+0x1d8>)
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	4293      	cmp	r3, r2
 800374e:	d008      	beq.n	8003762 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b05      	cmp	r3, #5
 800375a:	d002      	beq.n	8003762 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b09      	cmp	r3, #9
 8003760:	d104      	bne.n	800376c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	e00c      	b.n	8003786 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a11      	ldr	r2, [pc, #68]	@ (80037b8 <HAL_ADC_PollForConversion+0x1dc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d002      	beq.n	800377c <HAL_ADC_PollForConversion+0x1a0>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	e000      	b.n	800377e <HAL_ADC_PollForConversion+0x1a2>
 800377c:	4b0d      	ldr	r3, [pc, #52]	@ (80037b4 <HAL_ADC_PollForConversion+0x1d8>)
 800377e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	2b08      	cmp	r3, #8
 800378a:	d104      	bne.n	8003796 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2208      	movs	r2, #8
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	e008      	b.n	80037a8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d103      	bne.n	80037a8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	220c      	movs	r2, #12
 80037a6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3720      	adds	r7, #32
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40022000 	.word	0x40022000
 80037b8:	40022100 	.word	0x40022100
 80037bc:	40022300 	.word	0x40022300
 80037c0:	58026300 	.word	0x58026300

080037c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	@ 0x28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80037e8:	2300      	movs	r3, #0
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a87      	ldr	r2, [pc, #540]	@ (8003a20 <HAL_ADC_IRQHandler+0x240>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d004      	beq.n	8003810 <HAL_ADC_IRQHandler+0x30>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a86      	ldr	r2, [pc, #536]	@ (8003a24 <HAL_ADC_IRQHandler+0x244>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d101      	bne.n	8003814 <HAL_ADC_IRQHandler+0x34>
 8003810:	4b85      	ldr	r3, [pc, #532]	@ (8003a28 <HAL_ADC_IRQHandler+0x248>)
 8003812:	e000      	b.n	8003816 <HAL_ADC_IRQHandler+0x36>
 8003814:	4b85      	ldr	r3, [pc, #532]	@ (8003a2c <HAL_ADC_IRQHandler+0x24c>)
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fabe 	bl	8002d98 <LL_ADC_GetMultimode>
 800381c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d017      	beq.n	8003858 <HAL_ADC_IRQHandler+0x78>
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d012      	beq.n	8003858 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003836:	f003 0310 	and.w	r3, r3, #16
 800383a:	2b00      	cmp	r3, #0
 800383c:	d105      	bne.n	800384a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003842:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f001 fa64 	bl	8004d18 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2202      	movs	r2, #2
 8003856:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <HAL_ADC_IRQHandler+0x8c>
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10a      	bne.n	8003882 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 8083 	beq.w	800397e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d07d      	beq.n	800397e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b00      	cmp	r3, #0
 800388c:	d105      	bne.n	800389a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003892:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff f9bc 	bl	8002c1c <LL_ADC_REG_IsTriggerSourceSWStart>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d062      	beq.n	8003970 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a5d      	ldr	r2, [pc, #372]	@ (8003a24 <HAL_ADC_IRQHandler+0x244>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d002      	beq.n	80038ba <HAL_ADC_IRQHandler+0xda>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	e000      	b.n	80038bc <HAL_ADC_IRQHandler+0xdc>
 80038ba:	4b59      	ldr	r3, [pc, #356]	@ (8003a20 <HAL_ADC_IRQHandler+0x240>)
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d008      	beq.n	80038d6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d005      	beq.n	80038d6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b05      	cmp	r3, #5
 80038ce:	d002      	beq.n	80038d6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2b09      	cmp	r3, #9
 80038d4:	d104      	bne.n	80038e0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	623b      	str	r3, [r7, #32]
 80038de:	e00c      	b.n	80038fa <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003a24 <HAL_ADC_IRQHandler+0x244>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d002      	beq.n	80038f0 <HAL_ADC_IRQHandler+0x110>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	e000      	b.n	80038f2 <HAL_ADC_IRQHandler+0x112>
 80038f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003a20 <HAL_ADC_IRQHandler+0x240>)
 80038f2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d135      	bne.n	8003970 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b08      	cmp	r3, #8
 8003910:	d12e      	bne.n	8003970 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff fb1e 	bl	8002f58 <LL_ADC_REG_IsConversionOngoing>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d11a      	bne.n	8003958 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 020c 	bic.w	r2, r2, #12
 8003930:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003936:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003942:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d112      	bne.n	8003970 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800394e:	f043 0201 	orr.w	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	661a      	str	r2, [r3, #96]	@ 0x60
 8003956:	e00b      	b.n	8003970 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800395c:	f043 0210 	orr.w	r2, r3, #16
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7fe f99f 	bl	8001cb4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	220c      	movs	r2, #12
 800397c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d004      	beq.n	8003992 <HAL_ADC_IRQHandler+0x1b2>
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10b      	bne.n	80039aa <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80a0 	beq.w	8003ade <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 809a 	beq.w	8003ade <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d105      	bne.n	80039c2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ba:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff f967 	bl	8002c9a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80039cc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff f922 	bl	8002c1c <LL_ADC_REG_IsTriggerSourceSWStart>
 80039d8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a11      	ldr	r2, [pc, #68]	@ (8003a24 <HAL_ADC_IRQHandler+0x244>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d002      	beq.n	80039ea <HAL_ADC_IRQHandler+0x20a>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	e000      	b.n	80039ec <HAL_ADC_IRQHandler+0x20c>
 80039ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003a20 <HAL_ADC_IRQHandler+0x240>)
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d008      	beq.n	8003a06 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b06      	cmp	r3, #6
 80039fe:	d002      	beq.n	8003a06 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2b07      	cmp	r3, #7
 8003a04:	d104      	bne.n	8003a10 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	623b      	str	r3, [r7, #32]
 8003a0e:	e014      	b.n	8003a3a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a03      	ldr	r2, [pc, #12]	@ (8003a24 <HAL_ADC_IRQHandler+0x244>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00a      	beq.n	8003a30 <HAL_ADC_IRQHandler+0x250>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	e008      	b.n	8003a32 <HAL_ADC_IRQHandler+0x252>
 8003a20:	40022000 	.word	0x40022000
 8003a24:	40022100 	.word	0x40022100
 8003a28:	40022300 	.word	0x40022300
 8003a2c:	58026300 	.word	0x58026300
 8003a30:	4b84      	ldr	r3, [pc, #528]	@ (8003c44 <HAL_ADC_IRQHandler+0x464>)
 8003a32:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d047      	beq.n	8003ad0 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d007      	beq.n	8003a5a <HAL_ADC_IRQHandler+0x27a>
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d03f      	beq.n	8003ad0 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d13a      	bne.n	8003ad0 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a64:	2b40      	cmp	r3, #64	@ 0x40
 8003a66:	d133      	bne.n	8003ad0 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d12e      	bne.n	8003ad0 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fa96 	bl	8002fa8 <LL_ADC_INJ_IsConversionOngoing>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d11a      	bne.n	8003ab8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a90:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d112      	bne.n	8003ad0 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aae:	f043 0201 	orr.w	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	661a      	str	r2, [r3, #96]	@ 0x60
 8003ab6:	e00b      	b.n	8003ad0 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003abc:	f043 0210 	orr.w	r2, r3, #16
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ac8:	f043 0201 	orr.w	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f001 f8f9 	bl	8004cc8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2260      	movs	r2, #96	@ 0x60
 8003adc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d011      	beq.n	8003b0c <HAL_ADC_IRQHandler+0x32c>
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00c      	beq.n	8003b0c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f8a8 	bl	8003c54 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2280      	movs	r2, #128	@ 0x80
 8003b0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d012      	beq.n	8003b3c <HAL_ADC_IRQHandler+0x35c>
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00d      	beq.n	8003b3c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b24:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f001 f8df 	bl	8004cf0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d012      	beq.n	8003b6c <HAL_ADC_IRQHandler+0x38c>
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00d      	beq.n	8003b6c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b54:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f001 f8d1 	bl	8004d04 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d043      	beq.n	8003bfe <HAL_ADC_IRQHandler+0x41e>
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d03e      	beq.n	8003bfe <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d102      	bne.n	8003b8e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b8c:	e021      	b.n	8003bd2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d015      	beq.n	8003bc0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a2a      	ldr	r2, [pc, #168]	@ (8003c44 <HAL_ADC_IRQHandler+0x464>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d004      	beq.n	8003ba8 <HAL_ADC_IRQHandler+0x3c8>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a29      	ldr	r2, [pc, #164]	@ (8003c48 <HAL_ADC_IRQHandler+0x468>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d101      	bne.n	8003bac <HAL_ADC_IRQHandler+0x3cc>
 8003ba8:	4b28      	ldr	r3, [pc, #160]	@ (8003c4c <HAL_ADC_IRQHandler+0x46c>)
 8003baa:	e000      	b.n	8003bae <HAL_ADC_IRQHandler+0x3ce>
 8003bac:	4b28      	ldr	r3, [pc, #160]	@ (8003c50 <HAL_ADC_IRQHandler+0x470>)
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff f900 	bl	8002db4 <LL_ADC_GetMultiDMATransfer>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bbe:	e008      	b.n	8003bd2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d10e      	bne.n	8003bf6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bdc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003be8:	f043 0202 	orr.w	r2, r3, #2
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f839 	bl	8003c68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2210      	movs	r2, #16
 8003bfc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d018      	beq.n	8003c3a <HAL_ADC_IRQHandler+0x45a>
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d013      	beq.n	8003c3a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c16:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c22:	f043 0208 	orr.w	r2, r3, #8
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c32:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f001 f851 	bl	8004cdc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003c3a:	bf00      	nop
 8003c3c:	3728      	adds	r7, #40	@ 0x28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40022000 	.word	0x40022000
 8003c48:	40022100 	.word	0x40022100
 8003c4c:	40022300 	.word	0x40022300
 8003c50:	58026300 	.word	0x58026300

08003c54 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c7c:	b590      	push	{r4, r7, lr}
 8003c7e:	b0a5      	sub	sp, #148	@ 0x94
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c96:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4aa4      	ldr	r2, [pc, #656]	@ (8003f30 <HAL_ADC_ConfigChannel+0x2b4>)
 8003c9e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d102      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0x34>
 8003caa:	2302      	movs	r3, #2
 8003cac:	f000 bca2 	b.w	80045f4 <HAL_ADC_ConfigChannel+0x978>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff f94b 	bl	8002f58 <LL_ADC_REG_IsConversionOngoing>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f040 8486 	bne.w	80045d6 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	db31      	blt.n	8003d36 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a97      	ldr	r2, [pc, #604]	@ (8003f34 <HAL_ADC_ConfigChannel+0x2b8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d02c      	beq.n	8003d36 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d108      	bne.n	8003cfa <HAL_ADC_ConfigChannel+0x7e>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	0e9b      	lsrs	r3, r3, #26
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	e016      	b.n	8003d28 <HAL_ADC_ConfigChannel+0xac>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d02:	fa93 f3a3 	rbit	r3, r3
 8003d06:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003d08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d0a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003d0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8003d12:	2320      	movs	r3, #32
 8003d14:	e003      	b.n	8003d1e <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8003d16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d18:	fab3 f383 	clz	r3, r3
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	f003 031f 	and.w	r3, r3, #31
 8003d22:	2201      	movs	r2, #1
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	69d1      	ldr	r1, [r2, #28]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	430b      	orrs	r3, r1
 8003d34:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6859      	ldr	r1, [r3, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	f7fe ff7d 	bl	8002c42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff f903 	bl	8002f58 <LL_ADC_REG_IsConversionOngoing>
 8003d52:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff f924 	bl	8002fa8 <LL_ADC_INJ_IsConversionOngoing>
 8003d60:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f040 824a 	bne.w	8004202 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f040 8245 	bne.w	8004202 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	6819      	ldr	r1, [r3, #0]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	461a      	mov	r2, r3
 8003d86:	f7fe ff9b 	bl	8002cc0 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a69      	ldr	r2, [pc, #420]	@ (8003f34 <HAL_ADC_ConfigChannel+0x2b8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d10d      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	695a      	ldr	r2, [r3, #20]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	08db      	lsrs	r3, r3, #3
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003dae:	e032      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003db0:	4b61      	ldr	r3, [pc, #388]	@ (8003f38 <HAL_ADC_ConfigChannel+0x2bc>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003db8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dbc:	d10b      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x15a>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	089b      	lsrs	r3, r3, #2
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	e01d      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x196>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10b      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x180>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	695a      	ldr	r2, [r3, #20]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	089b      	lsrs	r3, r3, #2
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	e00a      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x196>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	695a      	ldr	r2, [r3, #20]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	089b      	lsrs	r3, r3, #2
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d048      	beq.n	8003eb0 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6919      	ldr	r1, [r3, #16]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e2e:	f7fe fe03 	bl	8002a38 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a3f      	ldr	r2, [pc, #252]	@ (8003f34 <HAL_ADC_ConfigChannel+0x2b8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d119      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6919      	ldr	r1, [r3, #16]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	f7fe fe9b 	bl	8002b84 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	6919      	ldr	r1, [r3, #16]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d102      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x1ea>
 8003e60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e64:	e000      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x1ec>
 8003e66:	2300      	movs	r3, #0
 8003e68:	461a      	mov	r2, r3
 8003e6a:	f7fe fe69 	bl	8002b40 <LL_ADC_SetOffsetSaturation>
 8003e6e:	e1c8      	b.n	8004202 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	6919      	ldr	r1, [r3, #16]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d102      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x20c>
 8003e82:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003e86:	e000      	b.n	8003e8a <HAL_ADC_ConfigChannel+0x20e>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f7fe fe36 	bl	8002afc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	6919      	ldr	r1, [r3, #16]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	7e1b      	ldrb	r3, [r3, #24]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d102      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x22a>
 8003ea0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003ea4:	e000      	b.n	8003ea8 <HAL_ADC_ConfigChannel+0x22c>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f7fe fe0d 	bl	8002ac8 <LL_ADC_SetDataRightShift>
 8003eae:	e1a8      	b.n	8004202 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f34 <HAL_ADC_ConfigChannel+0x2b8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	f040 815b 	bne.w	8004172 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe fdea 	bl	8002a9c <LL_ADC_GetOffsetChannel>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10a      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x26c>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fe fddf 	bl	8002a9c <LL_ADC_GetOffsetChannel>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	0e9b      	lsrs	r3, r3, #26
 8003ee2:	f003 021f 	and.w	r2, r3, #31
 8003ee6:	e017      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x29c>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe fdd4 	bl	8002a9c <LL_ADC_GetOffsetChannel>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003f00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f02:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003f0a:	2320      	movs	r3, #32
 8003f0c:	e003      	b.n	8003f16 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8003f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f10:	fab3 f383 	clz	r3, r3
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	461a      	mov	r2, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10b      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x2c0>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	0e9b      	lsrs	r3, r3, #26
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	e017      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x2e4>
 8003f30:	47ff0000 	.word	0x47ff0000
 8003f34:	58026000 	.word	0x58026000
 8003f38:	5c001000 	.word	0x5c001000
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f44:	fa93 f3a3 	rbit	r3, r3
 8003f48:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003f4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f4c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003f4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8003f54:	2320      	movs	r3, #32
 8003f56:	e003      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003f58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f5a:	fab3 f383 	clz	r3, r3
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d106      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fe fe2b 	bl	8002bc8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2101      	movs	r1, #1
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fe fd8f 	bl	8002a9c <LL_ADC_GetOffsetChannel>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x322>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fe fd84 	bl	8002a9c <LL_ADC_GetOffsetChannel>
 8003f94:	4603      	mov	r3, r0
 8003f96:	0e9b      	lsrs	r3, r3, #26
 8003f98:	f003 021f 	and.w	r2, r3, #31
 8003f9c:	e017      	b.n	8003fce <HAL_ADC_ConfigChannel+0x352>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fe fd79 	bl	8002a9c <LL_ADC_GetOffsetChannel>
 8003faa:	4603      	mov	r3, r0
 8003fac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fb0:	fa93 f3a3 	rbit	r3, r3
 8003fb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fb8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	e003      	b.n	8003fcc <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8003fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc6:	fab3 f383 	clz	r3, r3
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d105      	bne.n	8003fe6 <HAL_ADC_ConfigChannel+0x36a>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	0e9b      	lsrs	r3, r3, #26
 8003fe0:	f003 031f 	and.w	r3, r3, #31
 8003fe4:	e011      	b.n	800400a <HAL_ADC_ConfigChannel+0x38e>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fee:	fa93 f3a3 	rbit	r3, r3
 8003ff2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003ff8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003ffe:	2320      	movs	r3, #32
 8004000:	e003      	b.n	800400a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8004002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004004:	fab3 f383 	clz	r3, r3
 8004008:	b2db      	uxtb	r3, r3
 800400a:	429a      	cmp	r2, r3
 800400c:	d106      	bne.n	800401c <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2200      	movs	r2, #0
 8004014:	2101      	movs	r1, #1
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe fdd6 	bl	8002bc8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2102      	movs	r1, #2
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe fd3a 	bl	8002a9c <LL_ADC_GetOffsetChannel>
 8004028:	4603      	mov	r3, r0
 800402a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10a      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x3cc>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2102      	movs	r1, #2
 8004038:	4618      	mov	r0, r3
 800403a:	f7fe fd2f 	bl	8002a9c <LL_ADC_GetOffsetChannel>
 800403e:	4603      	mov	r3, r0
 8004040:	0e9b      	lsrs	r3, r3, #26
 8004042:	f003 021f 	and.w	r2, r3, #31
 8004046:	e017      	b.n	8004078 <HAL_ADC_ConfigChannel+0x3fc>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2102      	movs	r1, #2
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe fd24 	bl	8002a9c <LL_ADC_GetOffsetChannel>
 8004054:	4603      	mov	r3, r0
 8004056:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800405a:	fa93 f3a3 	rbit	r3, r3
 800405e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800406a:	2320      	movs	r3, #32
 800406c:	e003      	b.n	8004076 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800406e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004070:	fab3 f383 	clz	r3, r3
 8004074:	b2db      	uxtb	r3, r3
 8004076:	461a      	mov	r2, r3
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004080:	2b00      	cmp	r3, #0
 8004082:	d105      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x414>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	0e9b      	lsrs	r3, r3, #26
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	e011      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x438>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004098:	fa93 f3a3 	rbit	r3, r3
 800409c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800409e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80040a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80040a8:	2320      	movs	r3, #32
 80040aa:	e003      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80040ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ae:	fab3 f383 	clz	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d106      	bne.n	80040c6 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2200      	movs	r2, #0
 80040be:	2102      	movs	r1, #2
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fe fd81 	bl	8002bc8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2103      	movs	r1, #3
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fe fce5 	bl	8002a9c <LL_ADC_GetOffsetChannel>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <HAL_ADC_ConfigChannel+0x476>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2103      	movs	r1, #3
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe fcda 	bl	8002a9c <LL_ADC_GetOffsetChannel>
 80040e8:	4603      	mov	r3, r0
 80040ea:	0e9b      	lsrs	r3, r3, #26
 80040ec:	f003 021f 	and.w	r2, r3, #31
 80040f0:	e017      	b.n	8004122 <HAL_ADC_ConfigChannel+0x4a6>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2103      	movs	r1, #3
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe fccf 	bl	8002a9c <LL_ADC_GetOffsetChannel>
 80040fe:	4603      	mov	r3, r0
 8004100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	fa93 f3a3 	rbit	r3, r3
 8004108:	61fb      	str	r3, [r7, #28]
  return result;
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004114:	2320      	movs	r3, #32
 8004116:	e003      	b.n	8004120 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411a:	fab3 f383 	clz	r3, r3
 800411e:	b2db      	uxtb	r3, r3
 8004120:	461a      	mov	r2, r3
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800412a:	2b00      	cmp	r3, #0
 800412c:	d105      	bne.n	800413a <HAL_ADC_ConfigChannel+0x4be>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	0e9b      	lsrs	r3, r3, #26
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	e011      	b.n	800415e <HAL_ADC_ConfigChannel+0x4e2>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	fa93 f3a3 	rbit	r3, r3
 8004146:	613b      	str	r3, [r7, #16]
  return result;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8004152:	2320      	movs	r3, #32
 8004154:	e003      	b.n	800415e <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	fab3 f383 	clz	r3, r3
 800415c:	b2db      	uxtb	r3, r3
 800415e:	429a      	cmp	r2, r3
 8004160:	d14f      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2200      	movs	r2, #0
 8004168:	2103      	movs	r1, #3
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe fd2c 	bl	8002bc8 <LL_ADC_SetOffsetState>
 8004170:	e047      	b.n	8004202 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004178:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	069b      	lsls	r3, r3, #26
 8004182:	429a      	cmp	r2, r3
 8004184:	d107      	bne.n	8004196 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004194:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800419c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	069b      	lsls	r3, r3, #26
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d107      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80041b8:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	069b      	lsls	r3, r3, #26
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d107      	bne.n	80041de <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80041dc:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	069b      	lsls	r3, r3, #26
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d107      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004200:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe fe58 	bl	8002ebc <LL_ADC_IsEnabled>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 81ea 	bne.w	80045e8 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6818      	ldr	r0, [r3, #0]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	6819      	ldr	r1, [r3, #0]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	461a      	mov	r2, r3
 8004222:	f7fe fd79 	bl	8002d18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	4a7a      	ldr	r2, [pc, #488]	@ (8004414 <HAL_ADC_ConfigChannel+0x798>)
 800422c:	4293      	cmp	r3, r2
 800422e:	f040 80e0 	bne.w	80043f2 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4977      	ldr	r1, [pc, #476]	@ (8004418 <HAL_ADC_ConfigChannel+0x79c>)
 800423c:	428b      	cmp	r3, r1
 800423e:	d147      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x654>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4975      	ldr	r1, [pc, #468]	@ (800441c <HAL_ADC_ConfigChannel+0x7a0>)
 8004246:	428b      	cmp	r3, r1
 8004248:	d040      	beq.n	80042cc <HAL_ADC_ConfigChannel+0x650>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4974      	ldr	r1, [pc, #464]	@ (8004420 <HAL_ADC_ConfigChannel+0x7a4>)
 8004250:	428b      	cmp	r3, r1
 8004252:	d039      	beq.n	80042c8 <HAL_ADC_ConfigChannel+0x64c>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4972      	ldr	r1, [pc, #456]	@ (8004424 <HAL_ADC_ConfigChannel+0x7a8>)
 800425a:	428b      	cmp	r3, r1
 800425c:	d032      	beq.n	80042c4 <HAL_ADC_ConfigChannel+0x648>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4971      	ldr	r1, [pc, #452]	@ (8004428 <HAL_ADC_ConfigChannel+0x7ac>)
 8004264:	428b      	cmp	r3, r1
 8004266:	d02b      	beq.n	80042c0 <HAL_ADC_ConfigChannel+0x644>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	496f      	ldr	r1, [pc, #444]	@ (800442c <HAL_ADC_ConfigChannel+0x7b0>)
 800426e:	428b      	cmp	r3, r1
 8004270:	d024      	beq.n	80042bc <HAL_ADC_ConfigChannel+0x640>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	496e      	ldr	r1, [pc, #440]	@ (8004430 <HAL_ADC_ConfigChannel+0x7b4>)
 8004278:	428b      	cmp	r3, r1
 800427a:	d01d      	beq.n	80042b8 <HAL_ADC_ConfigChannel+0x63c>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	496c      	ldr	r1, [pc, #432]	@ (8004434 <HAL_ADC_ConfigChannel+0x7b8>)
 8004282:	428b      	cmp	r3, r1
 8004284:	d016      	beq.n	80042b4 <HAL_ADC_ConfigChannel+0x638>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	496b      	ldr	r1, [pc, #428]	@ (8004438 <HAL_ADC_ConfigChannel+0x7bc>)
 800428c:	428b      	cmp	r3, r1
 800428e:	d00f      	beq.n	80042b0 <HAL_ADC_ConfigChannel+0x634>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4969      	ldr	r1, [pc, #420]	@ (800443c <HAL_ADC_ConfigChannel+0x7c0>)
 8004296:	428b      	cmp	r3, r1
 8004298:	d008      	beq.n	80042ac <HAL_ADC_ConfigChannel+0x630>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4968      	ldr	r1, [pc, #416]	@ (8004440 <HAL_ADC_ConfigChannel+0x7c4>)
 80042a0:	428b      	cmp	r3, r1
 80042a2:	d101      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x62c>
 80042a4:	4b67      	ldr	r3, [pc, #412]	@ (8004444 <HAL_ADC_ConfigChannel+0x7c8>)
 80042a6:	e0a0      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80042a8:	2300      	movs	r3, #0
 80042aa:	e09e      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80042ac:	4b66      	ldr	r3, [pc, #408]	@ (8004448 <HAL_ADC_ConfigChannel+0x7cc>)
 80042ae:	e09c      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80042b0:	4b66      	ldr	r3, [pc, #408]	@ (800444c <HAL_ADC_ConfigChannel+0x7d0>)
 80042b2:	e09a      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80042b4:	4b60      	ldr	r3, [pc, #384]	@ (8004438 <HAL_ADC_ConfigChannel+0x7bc>)
 80042b6:	e098      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80042b8:	4b5e      	ldr	r3, [pc, #376]	@ (8004434 <HAL_ADC_ConfigChannel+0x7b8>)
 80042ba:	e096      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80042bc:	4b64      	ldr	r3, [pc, #400]	@ (8004450 <HAL_ADC_ConfigChannel+0x7d4>)
 80042be:	e094      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80042c0:	4b64      	ldr	r3, [pc, #400]	@ (8004454 <HAL_ADC_ConfigChannel+0x7d8>)
 80042c2:	e092      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80042c4:	4b64      	ldr	r3, [pc, #400]	@ (8004458 <HAL_ADC_ConfigChannel+0x7dc>)
 80042c6:	e090      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80042c8:	4b64      	ldr	r3, [pc, #400]	@ (800445c <HAL_ADC_ConfigChannel+0x7e0>)
 80042ca:	e08e      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80042cc:	2301      	movs	r3, #1
 80042ce:	e08c      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4962      	ldr	r1, [pc, #392]	@ (8004460 <HAL_ADC_ConfigChannel+0x7e4>)
 80042d6:	428b      	cmp	r3, r1
 80042d8:	d140      	bne.n	800435c <HAL_ADC_ConfigChannel+0x6e0>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	494f      	ldr	r1, [pc, #316]	@ (800441c <HAL_ADC_ConfigChannel+0x7a0>)
 80042e0:	428b      	cmp	r3, r1
 80042e2:	d039      	beq.n	8004358 <HAL_ADC_ConfigChannel+0x6dc>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	494d      	ldr	r1, [pc, #308]	@ (8004420 <HAL_ADC_ConfigChannel+0x7a4>)
 80042ea:	428b      	cmp	r3, r1
 80042ec:	d032      	beq.n	8004354 <HAL_ADC_ConfigChannel+0x6d8>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	494c      	ldr	r1, [pc, #304]	@ (8004424 <HAL_ADC_ConfigChannel+0x7a8>)
 80042f4:	428b      	cmp	r3, r1
 80042f6:	d02b      	beq.n	8004350 <HAL_ADC_ConfigChannel+0x6d4>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	494a      	ldr	r1, [pc, #296]	@ (8004428 <HAL_ADC_ConfigChannel+0x7ac>)
 80042fe:	428b      	cmp	r3, r1
 8004300:	d024      	beq.n	800434c <HAL_ADC_ConfigChannel+0x6d0>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4949      	ldr	r1, [pc, #292]	@ (800442c <HAL_ADC_ConfigChannel+0x7b0>)
 8004308:	428b      	cmp	r3, r1
 800430a:	d01d      	beq.n	8004348 <HAL_ADC_ConfigChannel+0x6cc>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4947      	ldr	r1, [pc, #284]	@ (8004430 <HAL_ADC_ConfigChannel+0x7b4>)
 8004312:	428b      	cmp	r3, r1
 8004314:	d016      	beq.n	8004344 <HAL_ADC_ConfigChannel+0x6c8>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4946      	ldr	r1, [pc, #280]	@ (8004434 <HAL_ADC_ConfigChannel+0x7b8>)
 800431c:	428b      	cmp	r3, r1
 800431e:	d00f      	beq.n	8004340 <HAL_ADC_ConfigChannel+0x6c4>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4944      	ldr	r1, [pc, #272]	@ (8004438 <HAL_ADC_ConfigChannel+0x7bc>)
 8004326:	428b      	cmp	r3, r1
 8004328:	d008      	beq.n	800433c <HAL_ADC_ConfigChannel+0x6c0>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4944      	ldr	r1, [pc, #272]	@ (8004440 <HAL_ADC_ConfigChannel+0x7c4>)
 8004330:	428b      	cmp	r3, r1
 8004332:	d101      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x6bc>
 8004334:	4b43      	ldr	r3, [pc, #268]	@ (8004444 <HAL_ADC_ConfigChannel+0x7c8>)
 8004336:	e058      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 8004338:	2300      	movs	r3, #0
 800433a:	e056      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 800433c:	4b43      	ldr	r3, [pc, #268]	@ (800444c <HAL_ADC_ConfigChannel+0x7d0>)
 800433e:	e054      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 8004340:	4b3d      	ldr	r3, [pc, #244]	@ (8004438 <HAL_ADC_ConfigChannel+0x7bc>)
 8004342:	e052      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 8004344:	4b3b      	ldr	r3, [pc, #236]	@ (8004434 <HAL_ADC_ConfigChannel+0x7b8>)
 8004346:	e050      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 8004348:	4b41      	ldr	r3, [pc, #260]	@ (8004450 <HAL_ADC_ConfigChannel+0x7d4>)
 800434a:	e04e      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 800434c:	4b41      	ldr	r3, [pc, #260]	@ (8004454 <HAL_ADC_ConfigChannel+0x7d8>)
 800434e:	e04c      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 8004350:	4b41      	ldr	r3, [pc, #260]	@ (8004458 <HAL_ADC_ConfigChannel+0x7dc>)
 8004352:	e04a      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 8004354:	4b41      	ldr	r3, [pc, #260]	@ (800445c <HAL_ADC_ConfigChannel+0x7e0>)
 8004356:	e048      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 8004358:	2301      	movs	r3, #1
 800435a:	e046      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4940      	ldr	r1, [pc, #256]	@ (8004464 <HAL_ADC_ConfigChannel+0x7e8>)
 8004362:	428b      	cmp	r3, r1
 8004364:	d140      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x76c>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	492c      	ldr	r1, [pc, #176]	@ (800441c <HAL_ADC_ConfigChannel+0x7a0>)
 800436c:	428b      	cmp	r3, r1
 800436e:	d039      	beq.n	80043e4 <HAL_ADC_ConfigChannel+0x768>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	492a      	ldr	r1, [pc, #168]	@ (8004420 <HAL_ADC_ConfigChannel+0x7a4>)
 8004376:	428b      	cmp	r3, r1
 8004378:	d032      	beq.n	80043e0 <HAL_ADC_ConfigChannel+0x764>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4929      	ldr	r1, [pc, #164]	@ (8004424 <HAL_ADC_ConfigChannel+0x7a8>)
 8004380:	428b      	cmp	r3, r1
 8004382:	d02b      	beq.n	80043dc <HAL_ADC_ConfigChannel+0x760>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4927      	ldr	r1, [pc, #156]	@ (8004428 <HAL_ADC_ConfigChannel+0x7ac>)
 800438a:	428b      	cmp	r3, r1
 800438c:	d024      	beq.n	80043d8 <HAL_ADC_ConfigChannel+0x75c>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4926      	ldr	r1, [pc, #152]	@ (800442c <HAL_ADC_ConfigChannel+0x7b0>)
 8004394:	428b      	cmp	r3, r1
 8004396:	d01d      	beq.n	80043d4 <HAL_ADC_ConfigChannel+0x758>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4924      	ldr	r1, [pc, #144]	@ (8004430 <HAL_ADC_ConfigChannel+0x7b4>)
 800439e:	428b      	cmp	r3, r1
 80043a0:	d016      	beq.n	80043d0 <HAL_ADC_ConfigChannel+0x754>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4923      	ldr	r1, [pc, #140]	@ (8004434 <HAL_ADC_ConfigChannel+0x7b8>)
 80043a8:	428b      	cmp	r3, r1
 80043aa:	d00f      	beq.n	80043cc <HAL_ADC_ConfigChannel+0x750>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4926      	ldr	r1, [pc, #152]	@ (800444c <HAL_ADC_ConfigChannel+0x7d0>)
 80043b2:	428b      	cmp	r3, r1
 80043b4:	d008      	beq.n	80043c8 <HAL_ADC_ConfigChannel+0x74c>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	492b      	ldr	r1, [pc, #172]	@ (8004468 <HAL_ADC_ConfigChannel+0x7ec>)
 80043bc:	428b      	cmp	r3, r1
 80043be:	d101      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x748>
 80043c0:	4b2a      	ldr	r3, [pc, #168]	@ (800446c <HAL_ADC_ConfigChannel+0x7f0>)
 80043c2:	e012      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80043c4:	2300      	movs	r3, #0
 80043c6:	e010      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80043c8:	4b27      	ldr	r3, [pc, #156]	@ (8004468 <HAL_ADC_ConfigChannel+0x7ec>)
 80043ca:	e00e      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80043cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004438 <HAL_ADC_ConfigChannel+0x7bc>)
 80043ce:	e00c      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80043d0:	4b18      	ldr	r3, [pc, #96]	@ (8004434 <HAL_ADC_ConfigChannel+0x7b8>)
 80043d2:	e00a      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80043d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004450 <HAL_ADC_ConfigChannel+0x7d4>)
 80043d6:	e008      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80043d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004454 <HAL_ADC_ConfigChannel+0x7d8>)
 80043da:	e006      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80043dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004458 <HAL_ADC_ConfigChannel+0x7dc>)
 80043de:	e004      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80043e0:	4b1e      	ldr	r3, [pc, #120]	@ (800445c <HAL_ADC_ConfigChannel+0x7e0>)
 80043e2:	e002      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <HAL_ADC_ConfigChannel+0x76e>
 80043e8:	2300      	movs	r3, #0
 80043ea:	4619      	mov	r1, r3
 80043ec:	4610      	mov	r0, r2
 80043ee:	f7fe fae9 	bl	80029c4 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f280 80f6 	bge.w	80045e8 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a05      	ldr	r2, [pc, #20]	@ (8004418 <HAL_ADC_ConfigChannel+0x79c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d004      	beq.n	8004410 <HAL_ADC_ConfigChannel+0x794>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a15      	ldr	r2, [pc, #84]	@ (8004460 <HAL_ADC_ConfigChannel+0x7e4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d131      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x7f8>
 8004410:	4b17      	ldr	r3, [pc, #92]	@ (8004470 <HAL_ADC_ConfigChannel+0x7f4>)
 8004412:	e030      	b.n	8004476 <HAL_ADC_ConfigChannel+0x7fa>
 8004414:	47ff0000 	.word	0x47ff0000
 8004418:	40022000 	.word	0x40022000
 800441c:	04300002 	.word	0x04300002
 8004420:	08600004 	.word	0x08600004
 8004424:	0c900008 	.word	0x0c900008
 8004428:	10c00010 	.word	0x10c00010
 800442c:	14f00020 	.word	0x14f00020
 8004430:	2a000400 	.word	0x2a000400
 8004434:	2e300800 	.word	0x2e300800
 8004438:	32601000 	.word	0x32601000
 800443c:	43210000 	.word	0x43210000
 8004440:	4b840000 	.word	0x4b840000
 8004444:	4fb80000 	.word	0x4fb80000
 8004448:	47520000 	.word	0x47520000
 800444c:	36902000 	.word	0x36902000
 8004450:	25b00200 	.word	0x25b00200
 8004454:	21800100 	.word	0x21800100
 8004458:	1d500080 	.word	0x1d500080
 800445c:	19200040 	.word	0x19200040
 8004460:	40022100 	.word	0x40022100
 8004464:	58026000 	.word	0x58026000
 8004468:	3ac04000 	.word	0x3ac04000
 800446c:	3ef08000 	.word	0x3ef08000
 8004470:	40022300 	.word	0x40022300
 8004474:	4b61      	ldr	r3, [pc, #388]	@ (80045fc <HAL_ADC_ConfigChannel+0x980>)
 8004476:	4618      	mov	r0, r3
 8004478:	f7fe fa96 	bl	80029a8 <LL_ADC_GetCommonPathInternalCh>
 800447c:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a5f      	ldr	r2, [pc, #380]	@ (8004600 <HAL_ADC_ConfigChannel+0x984>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d004      	beq.n	8004492 <HAL_ADC_ConfigChannel+0x816>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a5d      	ldr	r2, [pc, #372]	@ (8004604 <HAL_ADC_ConfigChannel+0x988>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d10e      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x834>
 8004492:	485b      	ldr	r0, [pc, #364]	@ (8004600 <HAL_ADC_ConfigChannel+0x984>)
 8004494:	f7fe fd12 	bl	8002ebc <LL_ADC_IsEnabled>
 8004498:	4604      	mov	r4, r0
 800449a:	485a      	ldr	r0, [pc, #360]	@ (8004604 <HAL_ADC_ConfigChannel+0x988>)
 800449c:	f7fe fd0e 	bl	8002ebc <LL_ADC_IsEnabled>
 80044a0:	4603      	mov	r3, r0
 80044a2:	4323      	orrs	r3, r4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	e008      	b.n	80044c2 <HAL_ADC_ConfigChannel+0x846>
 80044b0:	4855      	ldr	r0, [pc, #340]	@ (8004608 <HAL_ADC_ConfigChannel+0x98c>)
 80044b2:	f7fe fd03 	bl	8002ebc <LL_ADC_IsEnabled>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bf0c      	ite	eq
 80044bc:	2301      	moveq	r3, #1
 80044be:	2300      	movne	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d07d      	beq.n	80045c2 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a50      	ldr	r2, [pc, #320]	@ (800460c <HAL_ADC_ConfigChannel+0x990>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d130      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x8b6>
 80044d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d12b      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a4a      	ldr	r2, [pc, #296]	@ (8004608 <HAL_ADC_ConfigChannel+0x98c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	f040 8081 	bne.w	80045e8 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a45      	ldr	r2, [pc, #276]	@ (8004600 <HAL_ADC_ConfigChannel+0x984>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d004      	beq.n	80044fa <HAL_ADC_ConfigChannel+0x87e>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a43      	ldr	r2, [pc, #268]	@ (8004604 <HAL_ADC_ConfigChannel+0x988>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d101      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x882>
 80044fa:	4a45      	ldr	r2, [pc, #276]	@ (8004610 <HAL_ADC_ConfigChannel+0x994>)
 80044fc:	e000      	b.n	8004500 <HAL_ADC_ConfigChannel+0x884>
 80044fe:	4a3f      	ldr	r2, [pc, #252]	@ (80045fc <HAL_ADC_ConfigChannel+0x980>)
 8004500:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004502:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004506:	4619      	mov	r1, r3
 8004508:	4610      	mov	r0, r2
 800450a:	f7fe fa3a 	bl	8002982 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800450e:	4b41      	ldr	r3, [pc, #260]	@ (8004614 <HAL_ADC_ConfigChannel+0x998>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	099b      	lsrs	r3, r3, #6
 8004514:	4a40      	ldr	r2, [pc, #256]	@ (8004618 <HAL_ADC_ConfigChannel+0x99c>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	099b      	lsrs	r3, r3, #6
 800451c:	3301      	adds	r3, #1
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004522:	e002      	b.n	800452a <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	3b01      	subs	r3, #1
 8004528:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1f9      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004530:	e05a      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a39      	ldr	r2, [pc, #228]	@ (800461c <HAL_ADC_ConfigChannel+0x9a0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d11e      	bne.n	800457a <HAL_ADC_ConfigChannel+0x8fe>
 800453c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800453e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d119      	bne.n	800457a <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a2f      	ldr	r2, [pc, #188]	@ (8004608 <HAL_ADC_ConfigChannel+0x98c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d14b      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a2a      	ldr	r2, [pc, #168]	@ (8004600 <HAL_ADC_ConfigChannel+0x984>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d004      	beq.n	8004564 <HAL_ADC_ConfigChannel+0x8e8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a29      	ldr	r2, [pc, #164]	@ (8004604 <HAL_ADC_ConfigChannel+0x988>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d101      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x8ec>
 8004564:	4a2a      	ldr	r2, [pc, #168]	@ (8004610 <HAL_ADC_ConfigChannel+0x994>)
 8004566:	e000      	b.n	800456a <HAL_ADC_ConfigChannel+0x8ee>
 8004568:	4a24      	ldr	r2, [pc, #144]	@ (80045fc <HAL_ADC_ConfigChannel+0x980>)
 800456a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800456c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f7fe fa05 	bl	8002982 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004578:	e036      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a28      	ldr	r2, [pc, #160]	@ (8004620 <HAL_ADC_ConfigChannel+0x9a4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d131      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x96c>
 8004584:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d12c      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1d      	ldr	r2, [pc, #116]	@ (8004608 <HAL_ADC_ConfigChannel+0x98c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d127      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a18      	ldr	r2, [pc, #96]	@ (8004600 <HAL_ADC_ConfigChannel+0x984>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d004      	beq.n	80045ac <HAL_ADC_ConfigChannel+0x930>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a17      	ldr	r2, [pc, #92]	@ (8004604 <HAL_ADC_ConfigChannel+0x988>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d101      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x934>
 80045ac:	4a18      	ldr	r2, [pc, #96]	@ (8004610 <HAL_ADC_ConfigChannel+0x994>)
 80045ae:	e000      	b.n	80045b2 <HAL_ADC_ConfigChannel+0x936>
 80045b0:	4a12      	ldr	r2, [pc, #72]	@ (80045fc <HAL_ADC_ConfigChannel+0x980>)
 80045b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045b8:	4619      	mov	r1, r3
 80045ba:	4610      	mov	r0, r2
 80045bc:	f7fe f9e1 	bl	8002982 <LL_ADC_SetCommonPathInternalCh>
 80045c0:	e012      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c6:	f043 0220 	orr.w	r2, r3, #32
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80045d4:	e008      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045da:	f043 0220 	orr.w	r2, r3, #32
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80045f0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3794      	adds	r7, #148	@ 0x94
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd90      	pop	{r4, r7, pc}
 80045fc:	58026300 	.word	0x58026300
 8004600:	40022000 	.word	0x40022000
 8004604:	40022100 	.word	0x40022100
 8004608:	58026000 	.word	0x58026000
 800460c:	c7520000 	.word	0xc7520000
 8004610:	40022300 	.word	0x40022300
 8004614:	240001b4 	.word	0x240001b4
 8004618:	053e2d63 	.word	0x053e2d63
 800461c:	c3210000 	.word	0xc3210000
 8004620:	cb840000 	.word	0xcb840000

08004624 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800462e:	2300      	movs	r3, #0
 8004630:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe fc8c 	bl	8002f58 <LL_ADC_REG_IsConversionOngoing>
 8004640:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe fcae 	bl	8002fa8 <LL_ADC_INJ_IsConversionOngoing>
 800464c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d103      	bne.n	800465c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 8098 	beq.w	800478c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d02a      	beq.n	80046c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	7e5b      	ldrb	r3, [r3, #25]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d126      	bne.n	80046c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	7e1b      	ldrb	r3, [r3, #24]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d122      	bne.n	80046c0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800467a:	2301      	movs	r3, #1
 800467c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800467e:	e014      	b.n	80046aa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	4a45      	ldr	r2, [pc, #276]	@ (8004798 <ADC_ConversionStop+0x174>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d90d      	bls.n	80046a4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800468c:	f043 0210 	orr.w	r2, r3, #16
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004698:	f043 0201 	orr.w	r2, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e074      	b.n	800478e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	3301      	adds	r3, #1
 80046a8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b4:	2b40      	cmp	r3, #64	@ 0x40
 80046b6:	d1e3      	bne.n	8004680 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2240      	movs	r2, #64	@ 0x40
 80046be:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d014      	beq.n	80046f0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe fc44 	bl	8002f58 <LL_ADC_REG_IsConversionOngoing>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00c      	beq.n	80046f0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fe fc01 	bl	8002ee2 <LL_ADC_IsDisableOngoing>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d104      	bne.n	80046f0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fe fc20 	bl	8002f30 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d014      	beq.n	8004720 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fe fc54 	bl	8002fa8 <LL_ADC_INJ_IsConversionOngoing>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00c      	beq.n	8004720 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe fbe9 	bl	8002ee2 <LL_ADC_IsDisableOngoing>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d104      	bne.n	8004720 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7fe fc30 	bl	8002f80 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d005      	beq.n	8004732 <ADC_ConversionStop+0x10e>
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d105      	bne.n	8004738 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800472c:	230c      	movs	r3, #12
 800472e:	617b      	str	r3, [r7, #20]
        break;
 8004730:	e005      	b.n	800473e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004732:	2308      	movs	r3, #8
 8004734:	617b      	str	r3, [r7, #20]
        break;
 8004736:	e002      	b.n	800473e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004738:	2304      	movs	r3, #4
 800473a:	617b      	str	r3, [r7, #20]
        break;
 800473c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800473e:	f7fe f8c7 	bl	80028d0 <HAL_GetTick>
 8004742:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004744:	e01b      	b.n	800477e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004746:	f7fe f8c3 	bl	80028d0 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b05      	cmp	r3, #5
 8004752:	d914      	bls.n	800477e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	4013      	ands	r3, r2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00d      	beq.n	800477e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004766:	f043 0210 	orr.w	r2, r3, #16
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004772:	f043 0201 	orr.w	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e007      	b.n	800478e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	4013      	ands	r3, r2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1dc      	bne.n	8004746 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3720      	adds	r7, #32
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	000cdbff 	.word	0x000cdbff

0800479c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fe fb87 	bl	8002ebc <LL_ADC_IsEnabled>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d16e      	bne.n	8004892 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	4b38      	ldr	r3, [pc, #224]	@ (800489c <ADC_Enable+0x100>)
 80047bc:	4013      	ands	r3, r2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00d      	beq.n	80047de <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047c6:	f043 0210 	orr.w	r2, r3, #16
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047d2:	f043 0201 	orr.w	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e05a      	b.n	8004894 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fe fb42 	bl	8002e6c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80047e8:	f7fe f872 	bl	80028d0 <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2b      	ldr	r2, [pc, #172]	@ (80048a0 <ADC_Enable+0x104>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d004      	beq.n	8004802 <ADC_Enable+0x66>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a29      	ldr	r2, [pc, #164]	@ (80048a4 <ADC_Enable+0x108>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d101      	bne.n	8004806 <ADC_Enable+0x6a>
 8004802:	4b29      	ldr	r3, [pc, #164]	@ (80048a8 <ADC_Enable+0x10c>)
 8004804:	e000      	b.n	8004808 <ADC_Enable+0x6c>
 8004806:	4b29      	ldr	r3, [pc, #164]	@ (80048ac <ADC_Enable+0x110>)
 8004808:	4618      	mov	r0, r3
 800480a:	f7fe fac5 	bl	8002d98 <LL_ADC_GetMultimode>
 800480e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a23      	ldr	r2, [pc, #140]	@ (80048a4 <ADC_Enable+0x108>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d002      	beq.n	8004820 <ADC_Enable+0x84>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	e000      	b.n	8004822 <ADC_Enable+0x86>
 8004820:	4b1f      	ldr	r3, [pc, #124]	@ (80048a0 <ADC_Enable+0x104>)
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6812      	ldr	r2, [r2, #0]
 8004826:	4293      	cmp	r3, r2
 8004828:	d02c      	beq.n	8004884 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d130      	bne.n	8004892 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004830:	e028      	b.n	8004884 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe fb40 	bl	8002ebc <LL_ADC_IsEnabled>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d104      	bne.n	800484c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f7fe fb10 	bl	8002e6c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800484c:	f7fe f840 	bl	80028d0 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d914      	bls.n	8004884 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d00d      	beq.n	8004884 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800486c:	f043 0210 	orr.w	r2, r3, #16
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004878:	f043 0201 	orr.w	r2, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e007      	b.n	8004894 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b01      	cmp	r3, #1
 8004890:	d1cf      	bne.n	8004832 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	8000003f 	.word	0x8000003f
 80048a0:	40022000 	.word	0x40022000
 80048a4:	40022100 	.word	0x40022100
 80048a8:	40022300 	.word	0x40022300
 80048ac:	58026300 	.word	0x58026300

080048b0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fe fb10 	bl	8002ee2 <LL_ADC_IsDisableOngoing>
 80048c2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fe faf7 	bl	8002ebc <LL_ADC_IsEnabled>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d047      	beq.n	8004964 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d144      	bne.n	8004964 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 030d 	and.w	r3, r3, #13
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d10c      	bne.n	8004902 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fe fad1 	bl	8002e94 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2203      	movs	r2, #3
 80048f8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80048fa:	f7fd ffe9 	bl	80028d0 <HAL_GetTick>
 80048fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004900:	e029      	b.n	8004956 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004906:	f043 0210 	orr.w	r2, r3, #16
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004912:	f043 0201 	orr.w	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e023      	b.n	8004966 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800491e:	f7fd ffd7 	bl	80028d0 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d914      	bls.n	8004956 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00d      	beq.n	8004956 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800493e:	f043 0210 	orr.w	r2, r3, #16
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800494a:	f043 0201 	orr.w	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e007      	b.n	8004966 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1dc      	bne.n	800491e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a6c      	ldr	r2, [pc, #432]	@ (8004b30 <ADC_ConfigureBoostMode+0x1c0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d004      	beq.n	800498c <ADC_ConfigureBoostMode+0x1c>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a6b      	ldr	r2, [pc, #428]	@ (8004b34 <ADC_ConfigureBoostMode+0x1c4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d109      	bne.n	80049a0 <ADC_ConfigureBoostMode+0x30>
 800498c:	4b6a      	ldr	r3, [pc, #424]	@ (8004b38 <ADC_ConfigureBoostMode+0x1c8>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004994:	2b00      	cmp	r3, #0
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	e008      	b.n	80049b2 <ADC_ConfigureBoostMode+0x42>
 80049a0:	4b66      	ldr	r3, [pc, #408]	@ (8004b3c <ADC_ConfigureBoostMode+0x1cc>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	bf14      	ite	ne
 80049ac:	2301      	movne	r3, #1
 80049ae:	2300      	moveq	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01c      	beq.n	80049f0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80049b6:	f004 fc51 	bl	800925c <HAL_RCC_GetHCLKFreq>
 80049ba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049c4:	d010      	beq.n	80049e8 <ADC_ConfigureBoostMode+0x78>
 80049c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049ca:	d873      	bhi.n	8004ab4 <ADC_ConfigureBoostMode+0x144>
 80049cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d0:	d002      	beq.n	80049d8 <ADC_ConfigureBoostMode+0x68>
 80049d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049d6:	d16d      	bne.n	8004ab4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	60fb      	str	r3, [r7, #12]
        break;
 80049e6:	e068      	b.n	8004aba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	089b      	lsrs	r3, r3, #2
 80049ec:	60fb      	str	r3, [r7, #12]
        break;
 80049ee:	e064      	b.n	8004aba <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80049f0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80049f4:	f04f 0100 	mov.w	r1, #0
 80049f8:	f005 fe16 	bl	800a628 <HAL_RCCEx_GetPeriphCLKFreq>
 80049fc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004a06:	d051      	beq.n	8004aac <ADC_ConfigureBoostMode+0x13c>
 8004a08:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004a0c:	d854      	bhi.n	8004ab8 <ADC_ConfigureBoostMode+0x148>
 8004a0e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004a12:	d047      	beq.n	8004aa4 <ADC_ConfigureBoostMode+0x134>
 8004a14:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004a18:	d84e      	bhi.n	8004ab8 <ADC_ConfigureBoostMode+0x148>
 8004a1a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004a1e:	d03d      	beq.n	8004a9c <ADC_ConfigureBoostMode+0x12c>
 8004a20:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004a24:	d848      	bhi.n	8004ab8 <ADC_ConfigureBoostMode+0x148>
 8004a26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a2a:	d033      	beq.n	8004a94 <ADC_ConfigureBoostMode+0x124>
 8004a2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a30:	d842      	bhi.n	8004ab8 <ADC_ConfigureBoostMode+0x148>
 8004a32:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004a36:	d029      	beq.n	8004a8c <ADC_ConfigureBoostMode+0x11c>
 8004a38:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004a3c:	d83c      	bhi.n	8004ab8 <ADC_ConfigureBoostMode+0x148>
 8004a3e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004a42:	d01a      	beq.n	8004a7a <ADC_ConfigureBoostMode+0x10a>
 8004a44:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004a48:	d836      	bhi.n	8004ab8 <ADC_ConfigureBoostMode+0x148>
 8004a4a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004a4e:	d014      	beq.n	8004a7a <ADC_ConfigureBoostMode+0x10a>
 8004a50:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004a54:	d830      	bhi.n	8004ab8 <ADC_ConfigureBoostMode+0x148>
 8004a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a5a:	d00e      	beq.n	8004a7a <ADC_ConfigureBoostMode+0x10a>
 8004a5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a60:	d82a      	bhi.n	8004ab8 <ADC_ConfigureBoostMode+0x148>
 8004a62:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a66:	d008      	beq.n	8004a7a <ADC_ConfigureBoostMode+0x10a>
 8004a68:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a6c:	d824      	bhi.n	8004ab8 <ADC_ConfigureBoostMode+0x148>
 8004a6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a72:	d002      	beq.n	8004a7a <ADC_ConfigureBoostMode+0x10a>
 8004a74:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a78:	d11e      	bne.n	8004ab8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	0c9b      	lsrs	r3, r3, #18
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a88:	60fb      	str	r3, [r7, #12]
        break;
 8004a8a:	e016      	b.n	8004aba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	091b      	lsrs	r3, r3, #4
 8004a90:	60fb      	str	r3, [r7, #12]
        break;
 8004a92:	e012      	b.n	8004aba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	60fb      	str	r3, [r7, #12]
        break;
 8004a9a:	e00e      	b.n	8004aba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	099b      	lsrs	r3, r3, #6
 8004aa0:	60fb      	str	r3, [r7, #12]
        break;
 8004aa2:	e00a      	b.n	8004aba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	09db      	lsrs	r3, r3, #7
 8004aa8:	60fb      	str	r3, [r7, #12]
        break;
 8004aaa:	e006      	b.n	8004aba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	0a1b      	lsrs	r3, r3, #8
 8004ab0:	60fb      	str	r3, [r7, #12]
        break;
 8004ab2:	e002      	b.n	8004aba <ADC_ConfigureBoostMode+0x14a>
        break;
 8004ab4:	bf00      	nop
 8004ab6:	e000      	b.n	8004aba <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004ab8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	085b      	lsrs	r3, r3, #1
 8004abe:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8004b40 <ADC_ConfigureBoostMode+0x1d0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d808      	bhi.n	8004ada <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004ad6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004ad8:	e025      	b.n	8004b26 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4a19      	ldr	r2, [pc, #100]	@ (8004b44 <ADC_ConfigureBoostMode+0x1d4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d80a      	bhi.n	8004af8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004af4:	609a      	str	r2, [r3, #8]
}
 8004af6:	e016      	b.n	8004b26 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4a13      	ldr	r2, [pc, #76]	@ (8004b48 <ADC_ConfigureBoostMode+0x1d8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d80a      	bhi.n	8004b16 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b12:	609a      	str	r2, [r3, #8]
}
 8004b14:	e007      	b.n	8004b26 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004b24:	609a      	str	r2, [r3, #8]
}
 8004b26:	bf00      	nop
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40022000 	.word	0x40022000
 8004b34:	40022100 	.word	0x40022100
 8004b38:	40022300 	.word	0x40022300
 8004b3c:	58026300 	.word	0x58026300
 8004b40:	005f5e10 	.word	0x005f5e10
 8004b44:	00bebc20 	.word	0x00bebc20
 8004b48:	017d7840 	.word	0x017d7840

08004b4c <LL_ADC_IsEnabled>:
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <LL_ADC_IsEnabled+0x18>
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <LL_ADC_IsEnabled+0x1a>
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
	...

08004b74 <LL_ADC_StartCalibration>:
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	4b09      	ldr	r3, [pc, #36]	@ (8004bac <LL_ADC_StartCalibration+0x38>)
 8004b86:	4013      	ands	r3, r2
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004b94:	430a      	orrs	r2, r1
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	609a      	str	r2, [r3, #8]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	3ffeffc0 	.word	0x3ffeffc0

08004bb0 <LL_ADC_IsCalibrationOnGoing>:
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bc4:	d101      	bne.n	8004bca <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <LL_ADC_REG_IsConversionOngoing>:
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d101      	bne.n	8004bf0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
	...

08004c00 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_ADCEx_Calibration_Start+0x1e>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e04c      	b.n	8004cb8 <HAL_ADCEx_Calibration_Start+0xb8>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f7ff fe42 	bl	80048b0 <ADC_Disable>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004c30:	7dfb      	ldrb	r3, [r7, #23]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d135      	bne.n	8004ca2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004c3a:	4b21      	ldr	r3, [pc, #132]	@ (8004cc0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	f043 0202 	orr.w	r2, r3, #2
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	68b9      	ldr	r1, [r7, #8]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff ff90 	bl	8004b74 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c54:	e014      	b.n	8004c80 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	4a19      	ldr	r2, [pc, #100]	@ (8004cc4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d30d      	bcc.n	8004c80 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c68:	f023 0312 	bic.w	r3, r3, #18
 8004c6c:	f043 0210 	orr.w	r2, r3, #16
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e01b      	b.n	8004cb8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff ff93 	bl	8004bb0 <LL_ADC_IsCalibrationOnGoing>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e2      	bne.n	8004c56 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c94:	f023 0303 	bic.w	r3, r3, #3
 8004c98:	f043 0201 	orr.w	r2, r3, #1
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	661a      	str	r2, [r3, #96]	@ 0x60
 8004ca0:	e005      	b.n	8004cae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca6:	f043 0210 	orr.w	r2, r3, #16
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	ffffeefd 	.word	0xffffeefd
 8004cc4:	25c3f800 	.word	0x25c3f800

08004cc8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004d2c:	b590      	push	{r4, r7, lr}
 8004d2e:	b0a3      	sub	sp, #140	@ 0x8c
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e0c1      	b.n	8004ece <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004d52:	2300      	movs	r3, #0
 8004d54:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d102      	bne.n	8004d6a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004d64:	4b5d      	ldr	r3, [pc, #372]	@ (8004edc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	e001      	b.n	8004d6e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10b      	bne.n	8004d8c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d78:	f043 0220 	orr.w	r2, r3, #32
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0a0      	b.n	8004ece <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff ff22 	bl	8004bd8 <LL_ADC_REG_IsConversionOngoing>
 8004d94:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff ff1b 	bl	8004bd8 <LL_ADC_REG_IsConversionOngoing>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f040 8081 	bne.w	8004eac <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004daa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d17c      	bne.n	8004eac <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a48      	ldr	r2, [pc, #288]	@ (8004ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d004      	beq.n	8004dc6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a46      	ldr	r2, [pc, #280]	@ (8004edc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d101      	bne.n	8004dca <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004dc6:	4b46      	ldr	r3, [pc, #280]	@ (8004ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004dc8:	e000      	b.n	8004dcc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004dca:	4b46      	ldr	r3, [pc, #280]	@ (8004ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004dcc:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d039      	beq.n	8004e4a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004dd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004de6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a3a      	ldr	r2, [pc, #232]	@ (8004ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d004      	beq.n	8004dfc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a39      	ldr	r2, [pc, #228]	@ (8004edc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d10e      	bne.n	8004e1a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004dfc:	4836      	ldr	r0, [pc, #216]	@ (8004ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004dfe:	f7ff fea5 	bl	8004b4c <LL_ADC_IsEnabled>
 8004e02:	4604      	mov	r4, r0
 8004e04:	4835      	ldr	r0, [pc, #212]	@ (8004edc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e06:	f7ff fea1 	bl	8004b4c <LL_ADC_IsEnabled>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	4323      	orrs	r3, r4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	bf0c      	ite	eq
 8004e12:	2301      	moveq	r3, #1
 8004e14:	2300      	movne	r3, #0
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	e008      	b.n	8004e2c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004e1a:	4833      	ldr	r0, [pc, #204]	@ (8004ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004e1c:	f7ff fe96 	bl	8004b4c <LL_ADC_IsEnabled>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	bf0c      	ite	eq
 8004e26:	2301      	moveq	r3, #1
 8004e28:	2300      	movne	r3, #0
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d047      	beq.n	8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004e30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	4b2d      	ldr	r3, [pc, #180]	@ (8004eec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	6811      	ldr	r1, [r2, #0]
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	6892      	ldr	r2, [r2, #8]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	431a      	orrs	r2, r3
 8004e44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e46:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e48:	e03a      	b.n	8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004e4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e54:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1d      	ldr	r2, [pc, #116]	@ (8004edc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d10e      	bne.n	8004e88 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004e6a:	481b      	ldr	r0, [pc, #108]	@ (8004ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e6c:	f7ff fe6e 	bl	8004b4c <LL_ADC_IsEnabled>
 8004e70:	4604      	mov	r4, r0
 8004e72:	481a      	ldr	r0, [pc, #104]	@ (8004edc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e74:	f7ff fe6a 	bl	8004b4c <LL_ADC_IsEnabled>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	4323      	orrs	r3, r4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bf0c      	ite	eq
 8004e80:	2301      	moveq	r3, #1
 8004e82:	2300      	movne	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	e008      	b.n	8004e9a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004e88:	4817      	ldr	r0, [pc, #92]	@ (8004ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004e8a:	f7ff fe5f 	bl	8004b4c <LL_ADC_IsEnabled>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bf0c      	ite	eq
 8004e94:	2301      	moveq	r3, #1
 8004e96:	2300      	movne	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d010      	beq.n	8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	4b12      	ldr	r3, [pc, #72]	@ (8004eec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004ea8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004eaa:	e009      	b.n	8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eb0:	f043 0220 	orr.w	r2, r3, #32
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004ebe:	e000      	b.n	8004ec2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ec0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004eca:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	378c      	adds	r7, #140	@ 0x8c
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd90      	pop	{r4, r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40022000 	.word	0x40022000
 8004edc:	40022100 	.word	0x40022100
 8004ee0:	40022300 	.word	0x40022300
 8004ee4:	58026300 	.word	0x58026300
 8004ee8:	58026000 	.word	0x58026000
 8004eec:	fffff0e0 	.word	0xfffff0e0

08004ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f00:	4b0b      	ldr	r3, [pc, #44]	@ (8004f30 <__NVIC_SetPriorityGrouping+0x40>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f18:	4b06      	ldr	r3, [pc, #24]	@ (8004f34 <__NVIC_SetPriorityGrouping+0x44>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f1e:	4a04      	ldr	r2, [pc, #16]	@ (8004f30 <__NVIC_SetPriorityGrouping+0x40>)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	60d3      	str	r3, [r2, #12]
}
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	e000ed00 	.word	0xe000ed00
 8004f34:	05fa0000 	.word	0x05fa0000

08004f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f3c:	4b04      	ldr	r3, [pc, #16]	@ (8004f50 <__NVIC_GetPriorityGrouping+0x18>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	0a1b      	lsrs	r3, r3, #8
 8004f42:	f003 0307 	and.w	r3, r3, #7
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	e000ed00 	.word	0xe000ed00

08004f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	db0b      	blt.n	8004f7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	f003 021f 	and.w	r2, r3, #31
 8004f6c:	4907      	ldr	r1, [pc, #28]	@ (8004f8c <__NVIC_EnableIRQ+0x38>)
 8004f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	2001      	movs	r0, #1
 8004f76:	fa00 f202 	lsl.w	r2, r0, r2
 8004f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	e000e100 	.word	0xe000e100

08004f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	6039      	str	r1, [r7, #0]
 8004f9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	db0a      	blt.n	8004fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	490c      	ldr	r1, [pc, #48]	@ (8004fdc <__NVIC_SetPriority+0x4c>)
 8004faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fae:	0112      	lsls	r2, r2, #4
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fb8:	e00a      	b.n	8004fd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	4908      	ldr	r1, [pc, #32]	@ (8004fe0 <__NVIC_SetPriority+0x50>)
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	3b04      	subs	r3, #4
 8004fc8:	0112      	lsls	r2, r2, #4
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	440b      	add	r3, r1
 8004fce:	761a      	strb	r2, [r3, #24]
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	e000e100 	.word	0xe000e100
 8004fe0:	e000ed00 	.word	0xe000ed00

08004fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b089      	sub	sp, #36	@ 0x24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f1c3 0307 	rsb	r3, r3, #7
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	bf28      	it	cs
 8005002:	2304      	movcs	r3, #4
 8005004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	3304      	adds	r3, #4
 800500a:	2b06      	cmp	r3, #6
 800500c:	d902      	bls.n	8005014 <NVIC_EncodePriority+0x30>
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	3b03      	subs	r3, #3
 8005012:	e000      	b.n	8005016 <NVIC_EncodePriority+0x32>
 8005014:	2300      	movs	r3, #0
 8005016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005018:	f04f 32ff 	mov.w	r2, #4294967295
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	43da      	mvns	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	401a      	ands	r2, r3
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800502c:	f04f 31ff 	mov.w	r1, #4294967295
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	fa01 f303 	lsl.w	r3, r1, r3
 8005036:	43d9      	mvns	r1, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800503c:	4313      	orrs	r3, r2
         );
}
 800503e:	4618      	mov	r0, r3
 8005040:	3724      	adds	r7, #36	@ 0x24
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
	...

0800504c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3b01      	subs	r3, #1
 8005058:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800505c:	d301      	bcc.n	8005062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800505e:	2301      	movs	r3, #1
 8005060:	e00f      	b.n	8005082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005062:	4a0a      	ldr	r2, [pc, #40]	@ (800508c <SysTick_Config+0x40>)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3b01      	subs	r3, #1
 8005068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800506a:	210f      	movs	r1, #15
 800506c:	f04f 30ff 	mov.w	r0, #4294967295
 8005070:	f7ff ff8e 	bl	8004f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005074:	4b05      	ldr	r3, [pc, #20]	@ (800508c <SysTick_Config+0x40>)
 8005076:	2200      	movs	r2, #0
 8005078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800507a:	4b04      	ldr	r3, [pc, #16]	@ (800508c <SysTick_Config+0x40>)
 800507c:	2207      	movs	r2, #7
 800507e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	e000e010 	.word	0xe000e010

08005090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff ff29 	bl	8004ef0 <__NVIC_SetPriorityGrouping>
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b086      	sub	sp, #24
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	4603      	mov	r3, r0
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	607a      	str	r2, [r7, #4]
 80050b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050b4:	f7ff ff40 	bl	8004f38 <__NVIC_GetPriorityGrouping>
 80050b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	68b9      	ldr	r1, [r7, #8]
 80050be:	6978      	ldr	r0, [r7, #20]
 80050c0:	f7ff ff90 	bl	8004fe4 <NVIC_EncodePriority>
 80050c4:	4602      	mov	r2, r0
 80050c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050ca:	4611      	mov	r1, r2
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff ff5f 	bl	8004f90 <__NVIC_SetPriority>
}
 80050d2:	bf00      	nop
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b082      	sub	sp, #8
 80050de:	af00      	add	r7, sp, #0
 80050e0:	4603      	mov	r3, r0
 80050e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7ff ff33 	bl	8004f54 <__NVIC_EnableIRQ>
}
 80050ee:	bf00      	nop
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff ffa4 	bl	800504c <SysTick_Config>
 8005104:	4603      	mov	r3, r0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005114:	f3bf 8f5f 	dmb	sy
}
 8005118:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800511a:	4b07      	ldr	r3, [pc, #28]	@ (8005138 <HAL_MPU_Disable+0x28>)
 800511c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511e:	4a06      	ldr	r2, [pc, #24]	@ (8005138 <HAL_MPU_Disable+0x28>)
 8005120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005124:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005126:	4b05      	ldr	r3, [pc, #20]	@ (800513c <HAL_MPU_Disable+0x2c>)
 8005128:	2200      	movs	r2, #0
 800512a:	605a      	str	r2, [r3, #4]
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	e000ed00 	.word	0xe000ed00
 800513c:	e000ed90 	.word	0xe000ed90

08005140 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005148:	4a0b      	ldr	r2, [pc, #44]	@ (8005178 <HAL_MPU_Enable+0x38>)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005152:	4b0a      	ldr	r3, [pc, #40]	@ (800517c <HAL_MPU_Enable+0x3c>)
 8005154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005156:	4a09      	ldr	r2, [pc, #36]	@ (800517c <HAL_MPU_Enable+0x3c>)
 8005158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800515c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800515e:	f3bf 8f4f 	dsb	sy
}
 8005162:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005164:	f3bf 8f6f 	isb	sy
}
 8005168:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	e000ed90 	.word	0xe000ed90
 800517c:	e000ed00 	.word	0xe000ed00

08005180 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	785a      	ldrb	r2, [r3, #1]
 800518c:	4b1b      	ldr	r3, [pc, #108]	@ (80051fc <HAL_MPU_ConfigRegion+0x7c>)
 800518e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005190:	4b1a      	ldr	r3, [pc, #104]	@ (80051fc <HAL_MPU_ConfigRegion+0x7c>)
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	4a19      	ldr	r2, [pc, #100]	@ (80051fc <HAL_MPU_ConfigRegion+0x7c>)
 8005196:	f023 0301 	bic.w	r3, r3, #1
 800519a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800519c:	4a17      	ldr	r2, [pc, #92]	@ (80051fc <HAL_MPU_ConfigRegion+0x7c>)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	7b1b      	ldrb	r3, [r3, #12]
 80051a8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	7adb      	ldrb	r3, [r3, #11]
 80051ae:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80051b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	7a9b      	ldrb	r3, [r3, #10]
 80051b6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80051b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	7b5b      	ldrb	r3, [r3, #13]
 80051be:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80051c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	7b9b      	ldrb	r3, [r3, #14]
 80051c6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80051c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	7bdb      	ldrb	r3, [r3, #15]
 80051ce:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80051d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	7a5b      	ldrb	r3, [r3, #9]
 80051d6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80051d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	7a1b      	ldrb	r3, [r3, #8]
 80051de:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80051e0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	7812      	ldrb	r2, [r2, #0]
 80051e6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80051e8:	4a04      	ldr	r2, [pc, #16]	@ (80051fc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80051ea:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80051ec:	6113      	str	r3, [r2, #16]
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	e000ed90 	.word	0xe000ed90

08005200 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e054      	b.n	80052bc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	7f5b      	ldrb	r3, [r3, #29]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d105      	bne.n	8005228 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fc ff08 	bl	8002038 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	791b      	ldrb	r3, [r3, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10c      	bne.n	8005250 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a22      	ldr	r2, [pc, #136]	@ (80052c4 <HAL_CRC_Init+0xc4>)
 800523c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0218 	bic.w	r2, r2, #24
 800524c:	609a      	str	r2, [r3, #8]
 800524e:	e00c      	b.n	800526a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6899      	ldr	r1, [r3, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	461a      	mov	r2, r3
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f834 	bl	80052c8 <HAL_CRCEx_Polynomial_Set>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e028      	b.n	80052bc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	795b      	ldrb	r3, [r3, #5]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d105      	bne.n	800527e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f04f 32ff 	mov.w	r2, #4294967295
 800527a:	611a      	str	r2, [r3, #16]
 800527c:	e004      	b.n	8005288 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6912      	ldr	r2, [r2, #16]
 8005286:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699a      	ldr	r2, [r3, #24]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	04c11db7 	.word	0x04c11db7

080052c8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80052d8:	231f      	movs	r3, #31
 80052da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d102      	bne.n	80052ec <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	75fb      	strb	r3, [r7, #23]
 80052ea:	e063      	b.n	80053b4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80052ec:	bf00      	nop
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1e5a      	subs	r2, r3, #1
 80052f2:	613a      	str	r2, [r7, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d009      	beq.n	800530c <HAL_CRCEx_Polynomial_Set+0x44>
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	fa22 f303 	lsr.w	r3, r2, r3
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0f0      	beq.n	80052ee <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b18      	cmp	r3, #24
 8005310:	d846      	bhi.n	80053a0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005312:	a201      	add	r2, pc, #4	@ (adr r2, 8005318 <HAL_CRCEx_Polynomial_Set+0x50>)
 8005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005318:	080053a7 	.word	0x080053a7
 800531c:	080053a1 	.word	0x080053a1
 8005320:	080053a1 	.word	0x080053a1
 8005324:	080053a1 	.word	0x080053a1
 8005328:	080053a1 	.word	0x080053a1
 800532c:	080053a1 	.word	0x080053a1
 8005330:	080053a1 	.word	0x080053a1
 8005334:	080053a1 	.word	0x080053a1
 8005338:	08005395 	.word	0x08005395
 800533c:	080053a1 	.word	0x080053a1
 8005340:	080053a1 	.word	0x080053a1
 8005344:	080053a1 	.word	0x080053a1
 8005348:	080053a1 	.word	0x080053a1
 800534c:	080053a1 	.word	0x080053a1
 8005350:	080053a1 	.word	0x080053a1
 8005354:	080053a1 	.word	0x080053a1
 8005358:	08005389 	.word	0x08005389
 800535c:	080053a1 	.word	0x080053a1
 8005360:	080053a1 	.word	0x080053a1
 8005364:	080053a1 	.word	0x080053a1
 8005368:	080053a1 	.word	0x080053a1
 800536c:	080053a1 	.word	0x080053a1
 8005370:	080053a1 	.word	0x080053a1
 8005374:	080053a1 	.word	0x080053a1
 8005378:	0800537d 	.word	0x0800537d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	2b06      	cmp	r3, #6
 8005380:	d913      	bls.n	80053aa <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005386:	e010      	b.n	80053aa <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	2b07      	cmp	r3, #7
 800538c:	d90f      	bls.n	80053ae <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005392:	e00c      	b.n	80053ae <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b0f      	cmp	r3, #15
 8005398:	d90b      	bls.n	80053b2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800539e:	e008      	b.n	80053b2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	75fb      	strb	r3, [r7, #23]
        break;
 80053a4:	e006      	b.n	80053b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80053a6:	bf00      	nop
 80053a8:	e004      	b.n	80053b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80053aa:	bf00      	nop
 80053ac:	e002      	b.n	80053b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80053ae:	bf00      	nop
 80053b0:	e000      	b.n	80053b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80053b2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10d      	bne.n	80053d6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f023 0118 	bic.w	r1, r3, #24
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80053d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e237      	b.n	8005866 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d004      	beq.n	800540c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2280      	movs	r2, #128	@ 0x80
 8005406:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e22c      	b.n	8005866 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a5c      	ldr	r2, [pc, #368]	@ (8005584 <HAL_DMA_Abort_IT+0x1a0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d04a      	beq.n	80054ac <HAL_DMA_Abort_IT+0xc8>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a5b      	ldr	r2, [pc, #364]	@ (8005588 <HAL_DMA_Abort_IT+0x1a4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d045      	beq.n	80054ac <HAL_DMA_Abort_IT+0xc8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a59      	ldr	r2, [pc, #356]	@ (800558c <HAL_DMA_Abort_IT+0x1a8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d040      	beq.n	80054ac <HAL_DMA_Abort_IT+0xc8>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a58      	ldr	r2, [pc, #352]	@ (8005590 <HAL_DMA_Abort_IT+0x1ac>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d03b      	beq.n	80054ac <HAL_DMA_Abort_IT+0xc8>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a56      	ldr	r2, [pc, #344]	@ (8005594 <HAL_DMA_Abort_IT+0x1b0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d036      	beq.n	80054ac <HAL_DMA_Abort_IT+0xc8>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a55      	ldr	r2, [pc, #340]	@ (8005598 <HAL_DMA_Abort_IT+0x1b4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d031      	beq.n	80054ac <HAL_DMA_Abort_IT+0xc8>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a53      	ldr	r2, [pc, #332]	@ (800559c <HAL_DMA_Abort_IT+0x1b8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d02c      	beq.n	80054ac <HAL_DMA_Abort_IT+0xc8>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a52      	ldr	r2, [pc, #328]	@ (80055a0 <HAL_DMA_Abort_IT+0x1bc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d027      	beq.n	80054ac <HAL_DMA_Abort_IT+0xc8>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a50      	ldr	r2, [pc, #320]	@ (80055a4 <HAL_DMA_Abort_IT+0x1c0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d022      	beq.n	80054ac <HAL_DMA_Abort_IT+0xc8>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a4f      	ldr	r2, [pc, #316]	@ (80055a8 <HAL_DMA_Abort_IT+0x1c4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d01d      	beq.n	80054ac <HAL_DMA_Abort_IT+0xc8>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a4d      	ldr	r2, [pc, #308]	@ (80055ac <HAL_DMA_Abort_IT+0x1c8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d018      	beq.n	80054ac <HAL_DMA_Abort_IT+0xc8>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a4c      	ldr	r2, [pc, #304]	@ (80055b0 <HAL_DMA_Abort_IT+0x1cc>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d013      	beq.n	80054ac <HAL_DMA_Abort_IT+0xc8>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a4a      	ldr	r2, [pc, #296]	@ (80055b4 <HAL_DMA_Abort_IT+0x1d0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00e      	beq.n	80054ac <HAL_DMA_Abort_IT+0xc8>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a49      	ldr	r2, [pc, #292]	@ (80055b8 <HAL_DMA_Abort_IT+0x1d4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d009      	beq.n	80054ac <HAL_DMA_Abort_IT+0xc8>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a47      	ldr	r2, [pc, #284]	@ (80055bc <HAL_DMA_Abort_IT+0x1d8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <HAL_DMA_Abort_IT+0xc8>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a46      	ldr	r2, [pc, #280]	@ (80055c0 <HAL_DMA_Abort_IT+0x1dc>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d101      	bne.n	80054b0 <HAL_DMA_Abort_IT+0xcc>
 80054ac:	2301      	movs	r3, #1
 80054ae:	e000      	b.n	80054b2 <HAL_DMA_Abort_IT+0xce>
 80054b0:	2300      	movs	r3, #0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 8086 	beq.w	80055c4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2204      	movs	r2, #4
 80054bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a2f      	ldr	r2, [pc, #188]	@ (8005584 <HAL_DMA_Abort_IT+0x1a0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d04a      	beq.n	8005560 <HAL_DMA_Abort_IT+0x17c>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a2e      	ldr	r2, [pc, #184]	@ (8005588 <HAL_DMA_Abort_IT+0x1a4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d045      	beq.n	8005560 <HAL_DMA_Abort_IT+0x17c>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a2c      	ldr	r2, [pc, #176]	@ (800558c <HAL_DMA_Abort_IT+0x1a8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d040      	beq.n	8005560 <HAL_DMA_Abort_IT+0x17c>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a2b      	ldr	r2, [pc, #172]	@ (8005590 <HAL_DMA_Abort_IT+0x1ac>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d03b      	beq.n	8005560 <HAL_DMA_Abort_IT+0x17c>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a29      	ldr	r2, [pc, #164]	@ (8005594 <HAL_DMA_Abort_IT+0x1b0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d036      	beq.n	8005560 <HAL_DMA_Abort_IT+0x17c>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a28      	ldr	r2, [pc, #160]	@ (8005598 <HAL_DMA_Abort_IT+0x1b4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d031      	beq.n	8005560 <HAL_DMA_Abort_IT+0x17c>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a26      	ldr	r2, [pc, #152]	@ (800559c <HAL_DMA_Abort_IT+0x1b8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d02c      	beq.n	8005560 <HAL_DMA_Abort_IT+0x17c>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a25      	ldr	r2, [pc, #148]	@ (80055a0 <HAL_DMA_Abort_IT+0x1bc>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d027      	beq.n	8005560 <HAL_DMA_Abort_IT+0x17c>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a23      	ldr	r2, [pc, #140]	@ (80055a4 <HAL_DMA_Abort_IT+0x1c0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d022      	beq.n	8005560 <HAL_DMA_Abort_IT+0x17c>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a22      	ldr	r2, [pc, #136]	@ (80055a8 <HAL_DMA_Abort_IT+0x1c4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d01d      	beq.n	8005560 <HAL_DMA_Abort_IT+0x17c>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a20      	ldr	r2, [pc, #128]	@ (80055ac <HAL_DMA_Abort_IT+0x1c8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d018      	beq.n	8005560 <HAL_DMA_Abort_IT+0x17c>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1f      	ldr	r2, [pc, #124]	@ (80055b0 <HAL_DMA_Abort_IT+0x1cc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <HAL_DMA_Abort_IT+0x17c>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1d      	ldr	r2, [pc, #116]	@ (80055b4 <HAL_DMA_Abort_IT+0x1d0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00e      	beq.n	8005560 <HAL_DMA_Abort_IT+0x17c>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1c      	ldr	r2, [pc, #112]	@ (80055b8 <HAL_DMA_Abort_IT+0x1d4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d009      	beq.n	8005560 <HAL_DMA_Abort_IT+0x17c>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a1a      	ldr	r2, [pc, #104]	@ (80055bc <HAL_DMA_Abort_IT+0x1d8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <HAL_DMA_Abort_IT+0x17c>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a19      	ldr	r2, [pc, #100]	@ (80055c0 <HAL_DMA_Abort_IT+0x1dc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d108      	bne.n	8005572 <HAL_DMA_Abort_IT+0x18e>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0201 	bic.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	e178      	b.n	8005864 <HAL_DMA_Abort_IT+0x480>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0201 	bic.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	e16f      	b.n	8005864 <HAL_DMA_Abort_IT+0x480>
 8005584:	40020010 	.word	0x40020010
 8005588:	40020028 	.word	0x40020028
 800558c:	40020040 	.word	0x40020040
 8005590:	40020058 	.word	0x40020058
 8005594:	40020070 	.word	0x40020070
 8005598:	40020088 	.word	0x40020088
 800559c:	400200a0 	.word	0x400200a0
 80055a0:	400200b8 	.word	0x400200b8
 80055a4:	40020410 	.word	0x40020410
 80055a8:	40020428 	.word	0x40020428
 80055ac:	40020440 	.word	0x40020440
 80055b0:	40020458 	.word	0x40020458
 80055b4:	40020470 	.word	0x40020470
 80055b8:	40020488 	.word	0x40020488
 80055bc:	400204a0 	.word	0x400204a0
 80055c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 020e 	bic.w	r2, r2, #14
 80055d2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a6c      	ldr	r2, [pc, #432]	@ (800578c <HAL_DMA_Abort_IT+0x3a8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d04a      	beq.n	8005674 <HAL_DMA_Abort_IT+0x290>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a6b      	ldr	r2, [pc, #428]	@ (8005790 <HAL_DMA_Abort_IT+0x3ac>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d045      	beq.n	8005674 <HAL_DMA_Abort_IT+0x290>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a69      	ldr	r2, [pc, #420]	@ (8005794 <HAL_DMA_Abort_IT+0x3b0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d040      	beq.n	8005674 <HAL_DMA_Abort_IT+0x290>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a68      	ldr	r2, [pc, #416]	@ (8005798 <HAL_DMA_Abort_IT+0x3b4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d03b      	beq.n	8005674 <HAL_DMA_Abort_IT+0x290>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a66      	ldr	r2, [pc, #408]	@ (800579c <HAL_DMA_Abort_IT+0x3b8>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d036      	beq.n	8005674 <HAL_DMA_Abort_IT+0x290>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a65      	ldr	r2, [pc, #404]	@ (80057a0 <HAL_DMA_Abort_IT+0x3bc>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d031      	beq.n	8005674 <HAL_DMA_Abort_IT+0x290>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a63      	ldr	r2, [pc, #396]	@ (80057a4 <HAL_DMA_Abort_IT+0x3c0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d02c      	beq.n	8005674 <HAL_DMA_Abort_IT+0x290>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a62      	ldr	r2, [pc, #392]	@ (80057a8 <HAL_DMA_Abort_IT+0x3c4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d027      	beq.n	8005674 <HAL_DMA_Abort_IT+0x290>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a60      	ldr	r2, [pc, #384]	@ (80057ac <HAL_DMA_Abort_IT+0x3c8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d022      	beq.n	8005674 <HAL_DMA_Abort_IT+0x290>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a5f      	ldr	r2, [pc, #380]	@ (80057b0 <HAL_DMA_Abort_IT+0x3cc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d01d      	beq.n	8005674 <HAL_DMA_Abort_IT+0x290>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a5d      	ldr	r2, [pc, #372]	@ (80057b4 <HAL_DMA_Abort_IT+0x3d0>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d018      	beq.n	8005674 <HAL_DMA_Abort_IT+0x290>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a5c      	ldr	r2, [pc, #368]	@ (80057b8 <HAL_DMA_Abort_IT+0x3d4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d013      	beq.n	8005674 <HAL_DMA_Abort_IT+0x290>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a5a      	ldr	r2, [pc, #360]	@ (80057bc <HAL_DMA_Abort_IT+0x3d8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00e      	beq.n	8005674 <HAL_DMA_Abort_IT+0x290>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a59      	ldr	r2, [pc, #356]	@ (80057c0 <HAL_DMA_Abort_IT+0x3dc>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d009      	beq.n	8005674 <HAL_DMA_Abort_IT+0x290>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a57      	ldr	r2, [pc, #348]	@ (80057c4 <HAL_DMA_Abort_IT+0x3e0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d004      	beq.n	8005674 <HAL_DMA_Abort_IT+0x290>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a56      	ldr	r2, [pc, #344]	@ (80057c8 <HAL_DMA_Abort_IT+0x3e4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d108      	bne.n	8005686 <HAL_DMA_Abort_IT+0x2a2>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0201 	bic.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	e007      	b.n	8005696 <HAL_DMA_Abort_IT+0x2b2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0201 	bic.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a3c      	ldr	r2, [pc, #240]	@ (800578c <HAL_DMA_Abort_IT+0x3a8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d072      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a3a      	ldr	r2, [pc, #232]	@ (8005790 <HAL_DMA_Abort_IT+0x3ac>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d06d      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a39      	ldr	r2, [pc, #228]	@ (8005794 <HAL_DMA_Abort_IT+0x3b0>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d068      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a37      	ldr	r2, [pc, #220]	@ (8005798 <HAL_DMA_Abort_IT+0x3b4>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d063      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a36      	ldr	r2, [pc, #216]	@ (800579c <HAL_DMA_Abort_IT+0x3b8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d05e      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a34      	ldr	r2, [pc, #208]	@ (80057a0 <HAL_DMA_Abort_IT+0x3bc>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d059      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a33      	ldr	r2, [pc, #204]	@ (80057a4 <HAL_DMA_Abort_IT+0x3c0>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d054      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a31      	ldr	r2, [pc, #196]	@ (80057a8 <HAL_DMA_Abort_IT+0x3c4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d04f      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a30      	ldr	r2, [pc, #192]	@ (80057ac <HAL_DMA_Abort_IT+0x3c8>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d04a      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a2e      	ldr	r2, [pc, #184]	@ (80057b0 <HAL_DMA_Abort_IT+0x3cc>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d045      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a2d      	ldr	r2, [pc, #180]	@ (80057b4 <HAL_DMA_Abort_IT+0x3d0>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d040      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a2b      	ldr	r2, [pc, #172]	@ (80057b8 <HAL_DMA_Abort_IT+0x3d4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d03b      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a2a      	ldr	r2, [pc, #168]	@ (80057bc <HAL_DMA_Abort_IT+0x3d8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d036      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a28      	ldr	r2, [pc, #160]	@ (80057c0 <HAL_DMA_Abort_IT+0x3dc>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d031      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a27      	ldr	r2, [pc, #156]	@ (80057c4 <HAL_DMA_Abort_IT+0x3e0>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d02c      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a25      	ldr	r2, [pc, #148]	@ (80057c8 <HAL_DMA_Abort_IT+0x3e4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d027      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a24      	ldr	r2, [pc, #144]	@ (80057cc <HAL_DMA_Abort_IT+0x3e8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d022      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a22      	ldr	r2, [pc, #136]	@ (80057d0 <HAL_DMA_Abort_IT+0x3ec>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d01d      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a21      	ldr	r2, [pc, #132]	@ (80057d4 <HAL_DMA_Abort_IT+0x3f0>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d018      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1f      	ldr	r2, [pc, #124]	@ (80057d8 <HAL_DMA_Abort_IT+0x3f4>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d013      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a1e      	ldr	r2, [pc, #120]	@ (80057dc <HAL_DMA_Abort_IT+0x3f8>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00e      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1c      	ldr	r2, [pc, #112]	@ (80057e0 <HAL_DMA_Abort_IT+0x3fc>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d009      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a1b      	ldr	r2, [pc, #108]	@ (80057e4 <HAL_DMA_Abort_IT+0x400>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d004      	beq.n	8005786 <HAL_DMA_Abort_IT+0x3a2>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a19      	ldr	r2, [pc, #100]	@ (80057e8 <HAL_DMA_Abort_IT+0x404>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d132      	bne.n	80057ec <HAL_DMA_Abort_IT+0x408>
 8005786:	2301      	movs	r3, #1
 8005788:	e031      	b.n	80057ee <HAL_DMA_Abort_IT+0x40a>
 800578a:	bf00      	nop
 800578c:	40020010 	.word	0x40020010
 8005790:	40020028 	.word	0x40020028
 8005794:	40020040 	.word	0x40020040
 8005798:	40020058 	.word	0x40020058
 800579c:	40020070 	.word	0x40020070
 80057a0:	40020088 	.word	0x40020088
 80057a4:	400200a0 	.word	0x400200a0
 80057a8:	400200b8 	.word	0x400200b8
 80057ac:	40020410 	.word	0x40020410
 80057b0:	40020428 	.word	0x40020428
 80057b4:	40020440 	.word	0x40020440
 80057b8:	40020458 	.word	0x40020458
 80057bc:	40020470 	.word	0x40020470
 80057c0:	40020488 	.word	0x40020488
 80057c4:	400204a0 	.word	0x400204a0
 80057c8:	400204b8 	.word	0x400204b8
 80057cc:	58025408 	.word	0x58025408
 80057d0:	5802541c 	.word	0x5802541c
 80057d4:	58025430 	.word	0x58025430
 80057d8:	58025444 	.word	0x58025444
 80057dc:	58025458 	.word	0x58025458
 80057e0:	5802546c 	.word	0x5802546c
 80057e4:	58025480 	.word	0x58025480
 80057e8:	58025494 	.word	0x58025494
 80057ec:	2300      	movs	r3, #0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d028      	beq.n	8005844 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005800:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005806:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800580c:	f003 031f 	and.w	r3, r3, #31
 8005810:	2201      	movs	r2, #1
 8005812:	409a      	lsls	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005820:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00c      	beq.n	8005844 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005834:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005838:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005842:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop

08005870 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800587e:	b2db      	uxtb	r3, r3
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e04f      	b.n	800593e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d106      	bne.n	80058b8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7fc fbe2 	bl	800207c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	4b20      	ldr	r3, [pc, #128]	@ (8005948 <HAL_DMA2D_Init+0xbc>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6851      	ldr	r1, [r2, #4]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	69d2      	ldr	r2, [r2, #28]
 80058d2:	4311      	orrs	r1, r2
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6812      	ldr	r2, [r2, #0]
 80058d8:	430b      	orrs	r3, r1
 80058da:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058e2:	4b1a      	ldr	r3, [pc, #104]	@ (800594c <HAL_DMA2D_Init+0xc0>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6891      	ldr	r1, [r2, #8]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6992      	ldr	r2, [r2, #24]
 80058ee:	4311      	orrs	r1, r2
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6812      	ldr	r2, [r2, #0]
 80058f4:	430b      	orrs	r3, r1
 80058f6:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058fe:	4b14      	ldr	r3, [pc, #80]	@ (8005950 <HAL_DMA2D_Init+0xc4>)
 8005900:	4013      	ands	r3, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	68d1      	ldr	r1, [r2, #12]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6812      	ldr	r2, [r2, #0]
 800590a:	430b      	orrs	r3, r1
 800590c:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005914:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	051a      	lsls	r2, r3, #20
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	055b      	lsls	r3, r3, #21
 8005924:	431a      	orrs	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	fff8ffbf 	.word	0xfff8ffbf
 800594c:	fffffef8 	.word	0xfffffef8
 8005950:	ffff0000 	.word	0xffff0000

08005954 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_DMA2D_ConfigLayer+0x24>
 8005974:	2302      	movs	r3, #2
 8005976:	e092      	b.n	8005a9e <HAL_DMA2D_ConfigLayer+0x14a>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	4613      	mov	r3, r2
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	1a9b      	subs	r3, r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	3328      	adds	r3, #40	@ 0x28
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	4413      	add	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	041b      	lsls	r3, r3, #16
 80059a4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80059ac:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80059b4:	4313      	orrs	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80059b8:	4b3c      	ldr	r3, [pc, #240]	@ (8005aac <HAL_DMA2D_ConfigLayer+0x158>)
 80059ba:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2b0a      	cmp	r3, #10
 80059c2:	d003      	beq.n	80059cc <HAL_DMA2D_ConfigLayer+0x78>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2b09      	cmp	r3, #9
 80059ca:	d107      	bne.n	80059dc <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	e005      	b.n	80059e8 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	061b      	lsls	r3, r3, #24
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d120      	bne.n	8005a30 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	43db      	mvns	r3, r3
 80059f8:	ea02 0103 	and.w	r1, r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	6812      	ldr	r2, [r2, #0]
 8005a0e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b0a      	cmp	r3, #10
 8005a16:	d003      	beq.n	8005a20 <HAL_DMA2D_ConfigLayer+0xcc>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b09      	cmp	r3, #9
 8005a1e:	d135      	bne.n	8005a8c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	68da      	ldr	r2, [r3, #12]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005a2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a2e:	e02d      	b.n	8005a8c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2b0b      	cmp	r3, #11
 8005a36:	d109      	bne.n	8005a4c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	049b      	lsls	r3, r3, #18
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8005a4a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69da      	ldr	r2, [r3, #28]
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	43db      	mvns	r3, r3
 8005a56:	ea02 0103 	and.w	r1, r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	6812      	ldr	r2, [r2, #0]
 8005a6c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b0a      	cmp	r3, #10
 8005a74:	d003      	beq.n	8005a7e <HAL_DMA2D_ConfigLayer+0x12a>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b09      	cmp	r3, #9
 8005a7c:	d106      	bne.n	8005a8c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005a8a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	371c      	adds	r7, #28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	ff33000f 	.word	0xff33000f

08005ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b089      	sub	sp, #36	@ 0x24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005abe:	4b86      	ldr	r3, [pc, #536]	@ (8005cd8 <HAL_GPIO_Init+0x228>)
 8005ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ac2:	e18c      	b.n	8005dde <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	2101      	movs	r1, #1
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 817e 	beq.w	8005dd8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f003 0303 	and.w	r3, r3, #3
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d005      	beq.n	8005af4 <HAL_GPIO_Init+0x44>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f003 0303 	and.w	r3, r3, #3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d130      	bne.n	8005b56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	2203      	movs	r2, #3
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	43db      	mvns	r3, r3
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b32:	43db      	mvns	r3, r3
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	4013      	ands	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	091b      	lsrs	r3, r3, #4
 8005b40:	f003 0201 	and.w	r2, r3, #1
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f003 0303 	and.w	r3, r3, #3
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d017      	beq.n	8005b92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	2203      	movs	r2, #3
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	43db      	mvns	r3, r3
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	4013      	ands	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	fa02 f303 	lsl.w	r3, r2, r3
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d123      	bne.n	8005be6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	08da      	lsrs	r2, r3, #3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3208      	adds	r2, #8
 8005ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	220f      	movs	r2, #15
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	43db      	mvns	r3, r3
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	691a      	ldr	r2, [r3, #16]
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	08da      	lsrs	r2, r3, #3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3208      	adds	r2, #8
 8005be0:	69b9      	ldr	r1, [r7, #24]
 8005be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f003 0203 	and.w	r2, r3, #3
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 80d8 	beq.w	8005dd8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c28:	4b2c      	ldr	r3, [pc, #176]	@ (8005cdc <HAL_GPIO_Init+0x22c>)
 8005c2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c2e:	4a2b      	ldr	r2, [pc, #172]	@ (8005cdc <HAL_GPIO_Init+0x22c>)
 8005c30:	f043 0302 	orr.w	r3, r3, #2
 8005c34:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005c38:	4b28      	ldr	r3, [pc, #160]	@ (8005cdc <HAL_GPIO_Init+0x22c>)
 8005c3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c46:	4a26      	ldr	r2, [pc, #152]	@ (8005ce0 <HAL_GPIO_Init+0x230>)
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	089b      	lsrs	r3, r3, #2
 8005c4c:	3302      	adds	r3, #2
 8005c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	220f      	movs	r2, #15
 8005c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c62:	43db      	mvns	r3, r3
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	4013      	ands	r3, r2
 8005c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ce4 <HAL_GPIO_Init+0x234>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d04a      	beq.n	8005d08 <HAL_GPIO_Init+0x258>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a1c      	ldr	r2, [pc, #112]	@ (8005ce8 <HAL_GPIO_Init+0x238>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d02b      	beq.n	8005cd2 <HAL_GPIO_Init+0x222>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8005cec <HAL_GPIO_Init+0x23c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d025      	beq.n	8005cce <HAL_GPIO_Init+0x21e>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a1a      	ldr	r2, [pc, #104]	@ (8005cf0 <HAL_GPIO_Init+0x240>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d01f      	beq.n	8005cca <HAL_GPIO_Init+0x21a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a19      	ldr	r2, [pc, #100]	@ (8005cf4 <HAL_GPIO_Init+0x244>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d019      	beq.n	8005cc6 <HAL_GPIO_Init+0x216>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a18      	ldr	r2, [pc, #96]	@ (8005cf8 <HAL_GPIO_Init+0x248>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d013      	beq.n	8005cc2 <HAL_GPIO_Init+0x212>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a17      	ldr	r2, [pc, #92]	@ (8005cfc <HAL_GPIO_Init+0x24c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d00d      	beq.n	8005cbe <HAL_GPIO_Init+0x20e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a16      	ldr	r2, [pc, #88]	@ (8005d00 <HAL_GPIO_Init+0x250>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d007      	beq.n	8005cba <HAL_GPIO_Init+0x20a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a15      	ldr	r2, [pc, #84]	@ (8005d04 <HAL_GPIO_Init+0x254>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d101      	bne.n	8005cb6 <HAL_GPIO_Init+0x206>
 8005cb2:	2309      	movs	r3, #9
 8005cb4:	e029      	b.n	8005d0a <HAL_GPIO_Init+0x25a>
 8005cb6:	230a      	movs	r3, #10
 8005cb8:	e027      	b.n	8005d0a <HAL_GPIO_Init+0x25a>
 8005cba:	2307      	movs	r3, #7
 8005cbc:	e025      	b.n	8005d0a <HAL_GPIO_Init+0x25a>
 8005cbe:	2306      	movs	r3, #6
 8005cc0:	e023      	b.n	8005d0a <HAL_GPIO_Init+0x25a>
 8005cc2:	2305      	movs	r3, #5
 8005cc4:	e021      	b.n	8005d0a <HAL_GPIO_Init+0x25a>
 8005cc6:	2304      	movs	r3, #4
 8005cc8:	e01f      	b.n	8005d0a <HAL_GPIO_Init+0x25a>
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e01d      	b.n	8005d0a <HAL_GPIO_Init+0x25a>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e01b      	b.n	8005d0a <HAL_GPIO_Init+0x25a>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e019      	b.n	8005d0a <HAL_GPIO_Init+0x25a>
 8005cd6:	bf00      	nop
 8005cd8:	58000080 	.word	0x58000080
 8005cdc:	58024400 	.word	0x58024400
 8005ce0:	58000400 	.word	0x58000400
 8005ce4:	58020000 	.word	0x58020000
 8005ce8:	58020400 	.word	0x58020400
 8005cec:	58020800 	.word	0x58020800
 8005cf0:	58020c00 	.word	0x58020c00
 8005cf4:	58021000 	.word	0x58021000
 8005cf8:	58021400 	.word	0x58021400
 8005cfc:	58021800 	.word	0x58021800
 8005d00:	58021c00 	.word	0x58021c00
 8005d04:	58022400 	.word	0x58022400
 8005d08:	2300      	movs	r3, #0
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	f002 0203 	and.w	r2, r2, #3
 8005d10:	0092      	lsls	r2, r2, #2
 8005d12:	4093      	lsls	r3, r2
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d1a:	4938      	ldr	r1, [pc, #224]	@ (8005dfc <HAL_GPIO_Init+0x34c>)
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	089b      	lsrs	r3, r3, #2
 8005d20:	3302      	adds	r3, #2
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	43db      	mvns	r3, r3
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	4013      	ands	r3, r2
 8005d38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	43db      	mvns	r3, r3
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	4013      	ands	r3, r2
 8005d66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	4013      	ands	r3, r2
 8005d92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	43db      	mvns	r3, r3
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	fa22 f303 	lsr.w	r3, r2, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f47f ae6b 	bne.w	8005ac4 <HAL_GPIO_Init+0x14>
  }
}
 8005dee:	bf00      	nop
 8005df0:	bf00      	nop
 8005df2:	3724      	adds	r7, #36	@ 0x24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	58000400 	.word	0x58000400

08005e00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691a      	ldr	r2, [r3, #16]
 8005e10:	887b      	ldrh	r3, [r7, #2]
 8005e12:	4013      	ands	r3, r2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	73fb      	strb	r3, [r7, #15]
 8005e1c:	e001      	b.n	8005e22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	807b      	strh	r3, [r7, #2]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e40:	787b      	ldrb	r3, [r7, #1]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e46:	887a      	ldrh	r2, [r7, #2]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005e4c:	e003      	b.n	8005e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e4e:	887b      	ldrh	r3, [r7, #2]
 8005e50:	041a      	lsls	r2, r3, #16
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	619a      	str	r2, [r3, #24]
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b082      	sub	sp, #8
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	4603      	mov	r3, r0
 8005e6a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e70:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005e74:	88fb      	ldrh	r3, [r7, #6]
 8005e76:	4013      	ands	r3, r2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d008      	beq.n	8005e8e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e80:	88fb      	ldrh	r3, [r7, #6]
 8005e82:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e86:	88fb      	ldrh	r3, [r7, #6]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fb feb7 	bl	8001bfc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005e8e:	bf00      	nop
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e08b      	b.n	8005fc2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fc f8fe 	bl	80020c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2224      	movs	r2, #36	@ 0x24
 8005ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0201 	bic.w	r2, r2, #1
 8005eda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ee8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ef8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d107      	bne.n	8005f12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f0e:	609a      	str	r2, [r3, #8]
 8005f10:	e006      	b.n	8005f20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005f1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d108      	bne.n	8005f3a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f36:	605a      	str	r2, [r3, #4]
 8005f38:	e007      	b.n	8005f4a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6859      	ldr	r1, [r3, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	4b1d      	ldr	r3, [pc, #116]	@ (8005fcc <HAL_I2C_Init+0x134>)
 8005f56:	430b      	orrs	r3, r1
 8005f58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691a      	ldr	r2, [r3, #16]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	69d9      	ldr	r1, [r3, #28]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a1a      	ldr	r2, [r3, #32]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0201 	orr.w	r2, r2, #1
 8005fa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	02008000 	.word	0x02008000

08005fd0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af02      	add	r7, sp, #8
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	607a      	str	r2, [r7, #4]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	460b      	mov	r3, r1
 8005fde:	817b      	strh	r3, [r7, #10]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b20      	cmp	r3, #32
 8005fee:	f040 80fd 	bne.w	80061ec <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d101      	bne.n	8006000 <HAL_I2C_Master_Transmit+0x30>
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	e0f6      	b.n	80061ee <HAL_I2C_Master_Transmit+0x21e>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006008:	f7fc fc62 	bl	80028d0 <HAL_GetTick>
 800600c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	2319      	movs	r3, #25
 8006014:	2201      	movs	r2, #1
 8006016:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f001 fe6b 	bl	8007cf6 <I2C_WaitOnFlagUntilTimeout>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e0e1      	b.n	80061ee <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2221      	movs	r2, #33	@ 0x21
 800602e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2210      	movs	r2, #16
 8006036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	893a      	ldrh	r2, [r7, #8]
 800604a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006056:	b29b      	uxth	r3, r3
 8006058:	2bff      	cmp	r3, #255	@ 0xff
 800605a:	d906      	bls.n	800606a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	22ff      	movs	r2, #255	@ 0xff
 8006060:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006062:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	e007      	b.n	800607a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006074:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006078:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800607e:	2b00      	cmp	r3, #0
 8006080:	d024      	beq.n	80060cc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006086:	781a      	ldrb	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	3301      	adds	r3, #1
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	8979      	ldrh	r1, [r7, #10]
 80060be:	4b4e      	ldr	r3, [pc, #312]	@ (80061f8 <HAL_I2C_Master_Transmit+0x228>)
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f001 ffd9 	bl	800807c <I2C_TransferConfig>
 80060ca:	e066      	b.n	800619a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	8979      	ldrh	r1, [r7, #10]
 80060d4:	4b48      	ldr	r3, [pc, #288]	@ (80061f8 <HAL_I2C_Master_Transmit+0x228>)
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f001 ffce 	bl	800807c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80060e0:	e05b      	b.n	800619a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	6a39      	ldr	r1, [r7, #32]
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f001 fe5e 	bl	8007da8 <I2C_WaitOnTXISFlagUntilTimeout>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e07b      	b.n	80061ee <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fa:	781a      	ldrb	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006110:	b29b      	uxth	r3, r3
 8006112:	3b01      	subs	r3, #1
 8006114:	b29a      	uxth	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800612a:	b29b      	uxth	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d034      	beq.n	800619a <HAL_I2C_Master_Transmit+0x1ca>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006134:	2b00      	cmp	r3, #0
 8006136:	d130      	bne.n	800619a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	2200      	movs	r2, #0
 8006140:	2180      	movs	r1, #128	@ 0x80
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f001 fdd7 	bl	8007cf6 <I2C_WaitOnFlagUntilTimeout>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e04d      	b.n	80061ee <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006156:	b29b      	uxth	r3, r3
 8006158:	2bff      	cmp	r3, #255	@ 0xff
 800615a:	d90e      	bls.n	800617a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	22ff      	movs	r2, #255	@ 0xff
 8006160:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006166:	b2da      	uxtb	r2, r3
 8006168:	8979      	ldrh	r1, [r7, #10]
 800616a:	2300      	movs	r3, #0
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f001 ff82 	bl	800807c <I2C_TransferConfig>
 8006178:	e00f      	b.n	800619a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800617e:	b29a      	uxth	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006188:	b2da      	uxtb	r2, r3
 800618a:	8979      	ldrh	r1, [r7, #10]
 800618c:	2300      	movs	r3, #0
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f001 ff71 	bl	800807c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800619e:	b29b      	uxth	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d19e      	bne.n	80060e2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	6a39      	ldr	r1, [r7, #32]
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f001 fe44 	bl	8007e36 <I2C_WaitOnSTOPFlagUntilTimeout>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e01a      	b.n	80061ee <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2220      	movs	r2, #32
 80061be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6859      	ldr	r1, [r3, #4]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	4b0c      	ldr	r3, [pc, #48]	@ (80061fc <HAL_I2C_Master_Transmit+0x22c>)
 80061cc:	400b      	ands	r3, r1
 80061ce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	e000      	b.n	80061ee <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80061ec:	2302      	movs	r3, #2
  }
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	80002000 	.word	0x80002000
 80061fc:	fe00e800 	.word	0xfe00e800

08006200 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b088      	sub	sp, #32
 8006204:	af02      	add	r7, sp, #8
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	607a      	str	r2, [r7, #4]
 800620a:	461a      	mov	r2, r3
 800620c:	460b      	mov	r3, r1
 800620e:	817b      	strh	r3, [r7, #10]
 8006210:	4613      	mov	r3, r2
 8006212:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b20      	cmp	r3, #32
 800621e:	d153      	bne.n	80062c8 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800622a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800622e:	d101      	bne.n	8006234 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8006230:	2302      	movs	r3, #2
 8006232:	e04a      	b.n	80062ca <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800623a:	2b01      	cmp	r3, #1
 800623c:	d101      	bne.n	8006242 <HAL_I2C_Master_Receive_IT+0x42>
 800623e:	2302      	movs	r3, #2
 8006240:	e043      	b.n	80062ca <HAL_I2C_Master_Receive_IT+0xca>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2222      	movs	r2, #34	@ 0x22
 800624e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2210      	movs	r2, #16
 8006256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	893a      	ldrh	r2, [r7, #8]
 800626a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4a19      	ldr	r2, [pc, #100]	@ (80062d4 <HAL_I2C_Master_Receive_IT+0xd4>)
 8006270:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4a18      	ldr	r2, [pc, #96]	@ (80062d8 <HAL_I2C_Master_Receive_IT+0xd8>)
 8006276:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800627c:	b29b      	uxth	r3, r3
 800627e:	2bff      	cmp	r3, #255	@ 0xff
 8006280:	d906      	bls.n	8006290 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	22ff      	movs	r2, #255	@ 0xff
 8006286:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006288:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	e007      	b.n	80062a0 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006294:	b29a      	uxth	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800629a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800629e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	8979      	ldrh	r1, [r7, #10]
 80062a8:	4b0c      	ldr	r3, [pc, #48]	@ (80062dc <HAL_I2C_Master_Receive_IT+0xdc>)
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f001 fee4 	bl	800807c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80062bc:	2102      	movs	r1, #2
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f001 ff0e 	bl	80080e0 <I2C_Enable_IRQ>

    return HAL_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	e000      	b.n	80062ca <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80062c8:	2302      	movs	r3, #2
  }
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	ffff0000 	.word	0xffff0000
 80062d8:	08006493 	.word	0x08006493
 80062dc:	80002400 	.word	0x80002400

080062e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d005      	beq.n	800630c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	68f9      	ldr	r1, [r7, #12]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	4798      	blx	r3
  }
}
 800630c:	bf00      	nop
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	0a1b      	lsrs	r3, r3, #8
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b00      	cmp	r3, #0
 8006336:	d010      	beq.n	800635a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	09db      	lsrs	r3, r3, #7
 800633c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006348:	f043 0201 	orr.w	r2, r3, #1
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006358:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	0a9b      	lsrs	r3, r3, #10
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d010      	beq.n	8006388 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	09db      	lsrs	r3, r3, #7
 800636a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006376:	f043 0208 	orr.w	r2, r3, #8
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006386:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	0a5b      	lsrs	r3, r3, #9
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	d010      	beq.n	80063b6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	09db      	lsrs	r3, r3, #7
 8006398:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00a      	beq.n	80063b6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063a4:	f043 0202 	orr.w	r2, r3, #2
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063b4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f003 030b 	and.w	r3, r3, #11
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80063c6:	68f9      	ldr	r1, [r7, #12]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f001 fb3b 	bl	8007a44 <I2C_ITError>
  }
}
 80063ce:	bf00      	nop
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	70fb      	strb	r3, [r7, #3]
 800641e:	4613      	mov	r3, r2
 8006420:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006422:	bf00      	nop
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800642e:	b480      	push	{r7}
 8006430:	b083      	sub	sp, #12
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800646a:	b480      	push	{r7}
 800646c:	b083      	sub	sp, #12
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b088      	sub	sp, #32
 8006496:	af02      	add	r7, sp, #8
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <I2C_Master_ISR_IT+0x1e>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e120      	b.n	80066f2 <I2C_Master_ISR_IT+0x260>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	091b      	lsrs	r3, r3, #4
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d013      	beq.n	80064ec <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	091b      	lsrs	r3, r3, #4
 80064c8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00d      	beq.n	80064ec <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2210      	movs	r2, #16
 80064d6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064dc:	f043 0204 	orr.w	r2, r3, #4
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f001 fbc4 	bl	8007c72 <I2C_Flush_TXDR>
 80064ea:	e0ed      	b.n	80066c8 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	089b      	lsrs	r3, r3, #2
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d023      	beq.n	8006540 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	089b      	lsrs	r3, r3, #2
 80064fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01d      	beq.n	8006540 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f023 0304 	bic.w	r3, r3, #4
 800650a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006516:	b2d2      	uxtb	r2, r2
 8006518:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006528:	3b01      	subs	r3, #1
 800652a:	b29a      	uxth	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006534:	b29b      	uxth	r3, r3
 8006536:	3b01      	subs	r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800653e:	e0c3      	b.n	80066c8 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	099b      	lsrs	r3, r3, #6
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	d12a      	bne.n	80065a2 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	085b      	lsrs	r3, r3, #1
 8006550:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006554:	2b00      	cmp	r3, #0
 8006556:	d024      	beq.n	80065a2 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	085b      	lsrs	r3, r3, #1
 800655c:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006560:	2b00      	cmp	r3, #0
 8006562:	d01e      	beq.n	80065a2 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 80ac 	beq.w	80066c8 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006574:	781a      	ldrb	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800658a:	3b01      	subs	r3, #1
 800658c:	b29a      	uxth	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80065a0:	e092      	b.n	80066c8 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	09db      	lsrs	r3, r3, #7
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d05d      	beq.n	800666a <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	099b      	lsrs	r3, r3, #6
 80065b2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d057      	beq.n	800666a <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065be:	b29b      	uxth	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d040      	beq.n	8006646 <I2C_Master_ISR_IT+0x1b4>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d13c      	bne.n	8006646 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065d8:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2bff      	cmp	r3, #255	@ 0xff
 80065e2:	d90e      	bls.n	8006602 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	22ff      	movs	r2, #255	@ 0xff
 80065e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	8a79      	ldrh	r1, [r7, #18]
 80065f2:	2300      	movs	r3, #0
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f001 fd3e 	bl	800807c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006600:	e032      	b.n	8006668 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006610:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006614:	d00b      	beq.n	800662e <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800661a:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006620:	8a79      	ldrh	r1, [r7, #18]
 8006622:	2000      	movs	r0, #0
 8006624:	9000      	str	r0, [sp, #0]
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f001 fd28 	bl	800807c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800662c:	e01c      	b.n	8006668 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006632:	b2da      	uxtb	r2, r3
 8006634:	8a79      	ldrh	r1, [r7, #18]
 8006636:	2300      	movs	r3, #0
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f001 fd1c 	bl	800807c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006644:	e010      	b.n	8006668 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006650:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006654:	d003      	beq.n	800665e <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 fdde 	bl	8007218 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800665c:	e034      	b.n	80066c8 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800665e:	2140      	movs	r1, #64	@ 0x40
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f001 f9ef 	bl	8007a44 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006666:	e02f      	b.n	80066c8 <I2C_Master_ISR_IT+0x236>
 8006668:	e02e      	b.n	80066c8 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	099b      	lsrs	r3, r3, #6
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d028      	beq.n	80066c8 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	099b      	lsrs	r3, r3, #6
 800667a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800667e:	2b00      	cmp	r3, #0
 8006680:	d022      	beq.n	80066c8 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006686:	b29b      	uxth	r3, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	d119      	bne.n	80066c0 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006696:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800669a:	d015      	beq.n	80066c8 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066a4:	d108      	bne.n	80066b8 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066b4:	605a      	str	r2, [r3, #4]
 80066b6:	e007      	b.n	80066c8 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 fdad 	bl	8007218 <I2C_ITMasterSeqCplt>
 80066be:	e003      	b.n	80066c8 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80066c0:	2140      	movs	r1, #64	@ 0x40
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f001 f9be 	bl	8007a44 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	095b      	lsrs	r3, r3, #5
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d009      	beq.n	80066e8 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80066e0:	6979      	ldr	r1, [r7, #20]
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 fe34 	bl	8007350 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006716:	2b01      	cmp	r3, #1
 8006718:	d101      	bne.n	800671e <I2C_Slave_ISR_IT+0x24>
 800671a:	2302      	movs	r3, #2
 800671c:	e0ed      	b.n	80068fa <I2C_Slave_ISR_IT+0x200>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	095b      	lsrs	r3, r3, #5
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00a      	beq.n	8006748 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	095b      	lsrs	r3, r3, #5
 8006736:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800673e:	6939      	ldr	r1, [r7, #16]
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 fecf 	bl	80074e4 <I2C_ITSlaveCplt>
 8006746:	e0d3      	b.n	80068f0 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	091b      	lsrs	r3, r3, #4
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d04d      	beq.n	80067f0 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	091b      	lsrs	r3, r3, #4
 8006758:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800675c:	2b00      	cmp	r3, #0
 800675e:	d047      	beq.n	80067f0 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006764:	b29b      	uxth	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d128      	bne.n	80067bc <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b28      	cmp	r3, #40	@ 0x28
 8006774:	d108      	bne.n	8006788 <I2C_Slave_ISR_IT+0x8e>
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800677c:	d104      	bne.n	8006788 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800677e:	6939      	ldr	r1, [r7, #16]
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f001 f909 	bl	8007998 <I2C_ITListenCplt>
 8006786:	e032      	b.n	80067ee <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b29      	cmp	r3, #41	@ 0x29
 8006792:	d10e      	bne.n	80067b2 <I2C_Slave_ISR_IT+0xb8>
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800679a:	d00a      	beq.n	80067b2 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2210      	movs	r2, #16
 80067a2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f001 fa64 	bl	8007c72 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 fd71 	bl	8007292 <I2C_ITSlaveSeqCplt>
 80067b0:	e01d      	b.n	80067ee <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2210      	movs	r2, #16
 80067b8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80067ba:	e096      	b.n	80068ea <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2210      	movs	r2, #16
 80067c2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c8:	f043 0204 	orr.w	r2, r3, #4
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d004      	beq.n	80067e0 <I2C_Slave_ISR_IT+0xe6>
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067dc:	f040 8085 	bne.w	80068ea <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e4:	4619      	mov	r1, r3
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f001 f92c 	bl	8007a44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80067ec:	e07d      	b.n	80068ea <I2C_Slave_ISR_IT+0x1f0>
 80067ee:	e07c      	b.n	80068ea <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	089b      	lsrs	r3, r3, #2
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d030      	beq.n	800685e <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	089b      	lsrs	r3, r3, #2
 8006800:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006804:	2b00      	cmp	r3, #0
 8006806:	d02a      	beq.n	800685e <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800680c:	b29b      	uxth	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d018      	beq.n	8006844 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800682e:	3b01      	subs	r3, #1
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800683a:	b29b      	uxth	r3, r3
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006848:	b29b      	uxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d14f      	bne.n	80068ee <I2C_Slave_ISR_IT+0x1f4>
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006854:	d04b      	beq.n	80068ee <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 fd1b 	bl	8007292 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800685c:	e047      	b.n	80068ee <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	08db      	lsrs	r3, r3, #3
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00a      	beq.n	8006880 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	08db      	lsrs	r3, r3, #3
 800686e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006872:	2b00      	cmp	r3, #0
 8006874:	d004      	beq.n	8006880 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006876:	6939      	ldr	r1, [r7, #16]
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 fc49 	bl	8007110 <I2C_ITAddrCplt>
 800687e:	e037      	b.n	80068f0 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	085b      	lsrs	r3, r3, #1
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d031      	beq.n	80068f0 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	085b      	lsrs	r3, r3, #1
 8006890:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006894:	2b00      	cmp	r3, #0
 8006896:	d02b      	beq.n	80068f0 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800689c:	b29b      	uxth	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d018      	beq.n	80068d4 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a6:	781a      	ldrb	r2, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b2:	1c5a      	adds	r2, r3, #1
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068bc:	b29b      	uxth	r3, r3
 80068be:	3b01      	subs	r3, #1
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068ca:	3b01      	subs	r3, #1
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80068d2:	e00d      	b.n	80068f0 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068da:	d002      	beq.n	80068e2 <I2C_Slave_ISR_IT+0x1e8>
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 fcd5 	bl	8007292 <I2C_ITSlaveSeqCplt>
 80068e8:	e002      	b.n	80068f0 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80068ea:	bf00      	nop
 80068ec:	e000      	b.n	80068f0 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80068ee:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b088      	sub	sp, #32
 8006906:	af02      	add	r7, sp, #8
 8006908:	60f8      	str	r0, [r7, #12]
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006914:	2b01      	cmp	r3, #1
 8006916:	d101      	bne.n	800691c <I2C_Master_ISR_DMA+0x1a>
 8006918:	2302      	movs	r3, #2
 800691a:	e0e1      	b.n	8006ae0 <I2C_Master_ISR_DMA+0x1de>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	091b      	lsrs	r3, r3, #4
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	d017      	beq.n	8006960 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	091b      	lsrs	r3, r3, #4
 8006934:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006938:	2b00      	cmp	r3, #0
 800693a:	d011      	beq.n	8006960 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2210      	movs	r2, #16
 8006942:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006948:	f043 0204 	orr.w	r2, r3, #4
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006950:	2120      	movs	r1, #32
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f001 fbc4 	bl	80080e0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f001 f98a 	bl	8007c72 <I2C_Flush_TXDR>
 800695e:	e0ba      	b.n	8006ad6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	09db      	lsrs	r3, r3, #7
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	d072      	beq.n	8006a52 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	099b      	lsrs	r3, r3, #6
 8006970:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006974:	2b00      	cmp	r3, #0
 8006976:	d06c      	beq.n	8006a52 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006986:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d04e      	beq.n	8006a30 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	b29b      	uxth	r3, r3
 800699a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800699e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2bff      	cmp	r3, #255	@ 0xff
 80069a8:	d906      	bls.n	80069b8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	22ff      	movs	r2, #255	@ 0xff
 80069ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80069b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069b4:	617b      	str	r3, [r7, #20]
 80069b6:	e010      	b.n	80069da <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80069ca:	d003      	beq.n	80069d4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d0:	617b      	str	r3, [r7, #20]
 80069d2:	e002      	b.n	80069da <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80069d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069d8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	8a79      	ldrh	r1, [r7, #18]
 80069e2:	2300      	movs	r3, #0
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f001 fb47 	bl	800807c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b22      	cmp	r3, #34	@ 0x22
 8006a0a:	d108      	bne.n	8006a1e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a1a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006a1c:	e05b      	b.n	8006ad6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a2c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006a2e:	e052      	b.n	8006ad6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a3e:	d003      	beq.n	8006a48 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 fbe9 	bl	8007218 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006a46:	e046      	b.n	8006ad6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a48:	2140      	movs	r1, #64	@ 0x40
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f000 fffa 	bl	8007a44 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006a50:	e041      	b.n	8006ad6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	099b      	lsrs	r3, r3, #6
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d029      	beq.n	8006ab2 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	099b      	lsrs	r3, r3, #6
 8006a62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d023      	beq.n	8006ab2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d119      	bne.n	8006aa8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a82:	d027      	beq.n	8006ad4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a8c:	d108      	bne.n	8006aa0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a9c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006a9e:	e019      	b.n	8006ad4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 fbb9 	bl	8007218 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006aa6:	e015      	b.n	8006ad4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006aa8:	2140      	movs	r1, #64	@ 0x40
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 ffca 	bl	8007a44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006ab0:	e010      	b.n	8006ad4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	095b      	lsrs	r3, r3, #5
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00b      	beq.n	8006ad6 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	095b      	lsrs	r3, r3, #5
 8006ac2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d005      	beq.n	8006ad6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 fc3f 	bl	8007350 <I2C_ITMasterCplt>
 8006ad2:	e000      	b.n	8006ad6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8006ad4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af02      	add	r7, sp, #8
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006af4:	4b92      	ldr	r3, [pc, #584]	@ (8006d40 <I2C_Mem_ISR_DMA+0x258>)
 8006af6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d101      	bne.n	8006b06 <I2C_Mem_ISR_DMA+0x1e>
 8006b02:	2302      	movs	r3, #2
 8006b04:	e118      	b.n	8006d38 <I2C_Mem_ISR_DMA+0x250>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	091b      	lsrs	r3, r3, #4
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d017      	beq.n	8006b4a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	091b      	lsrs	r3, r3, #4
 8006b1e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d011      	beq.n	8006b4a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2210      	movs	r2, #16
 8006b2c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b32:	f043 0204 	orr.w	r2, r3, #4
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006b3a:	2120      	movs	r1, #32
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f001 facf 	bl	80080e0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f001 f895 	bl	8007c72 <I2C_Flush_TXDR>
 8006b48:	e0f1      	b.n	8006d2e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	085b      	lsrs	r3, r3, #1
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00f      	beq.n	8006b76 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	085b      	lsrs	r3, r3, #1
 8006b5a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d009      	beq.n	8006b76 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b6a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b72:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b74:	e0db      	b.n	8006d2e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	09db      	lsrs	r3, r3, #7
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d060      	beq.n	8006c44 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	099b      	lsrs	r3, r3, #6
 8006b86:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d05a      	beq.n	8006c44 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b8e:	2101      	movs	r1, #1
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f001 fb29 	bl	80081e8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006b96:	2110      	movs	r1, #16
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f001 faa1 	bl	80080e0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d048      	beq.n	8006c3a <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	2bff      	cmp	r3, #255	@ 0xff
 8006bb0:	d910      	bls.n	8006bd4 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	22ff      	movs	r2, #255	@ 0xff
 8006bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bbc:	b299      	uxth	r1, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f001 fa55 	bl	800807c <I2C_TransferConfig>
 8006bd2:	e011      	b.n	8006bf8 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be2:	b299      	uxth	r1, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	2300      	movs	r3, #0
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f001 fa42 	bl	800807c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b22      	cmp	r3, #34	@ 0x22
 8006c14:	d108      	bne.n	8006c28 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c24:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006c26:	e082      	b.n	8006d2e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c36:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006c38:	e079      	b.n	8006d2e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006c3a:	2140      	movs	r1, #64	@ 0x40
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 ff01 	bl	8007a44 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006c42:	e074      	b.n	8006d2e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	099b      	lsrs	r3, r3, #6
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d05e      	beq.n	8006d0e <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	099b      	lsrs	r3, r3, #6
 8006c54:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d058      	beq.n	8006d0e <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f001 fac2 	bl	80081e8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006c64:	2110      	movs	r1, #16
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f001 fa3a 	bl	80080e0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b22      	cmp	r3, #34	@ 0x22
 8006c76:	d101      	bne.n	8006c7c <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8006c78:	4b32      	ldr	r3, [pc, #200]	@ (8006d44 <I2C_Mem_ISR_DMA+0x25c>)
 8006c7a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2bff      	cmp	r3, #255	@ 0xff
 8006c84:	d910      	bls.n	8006ca8 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	22ff      	movs	r2, #255	@ 0xff
 8006c8a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c90:	b299      	uxth	r1, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f001 f9eb 	bl	800807c <I2C_TransferConfig>
 8006ca6:	e011      	b.n	8006ccc <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cb6:	b299      	uxth	r1, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f001 f9d8 	bl	800807c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b22      	cmp	r3, #34	@ 0x22
 8006ce8:	d108      	bne.n	8006cfc <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cf8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cfa:	e018      	b.n	8006d2e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d0a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d0c:	e00f      	b.n	8006d2e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	095b      	lsrs	r3, r3, #5
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d009      	beq.n	8006d2e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	095b      	lsrs	r3, r3, #5
 8006d1e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006d26:	68b9      	ldr	r1, [r7, #8]
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 fb11 	bl	8007350 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	80002000 	.word	0x80002000
 8006d44:	80002400 	.word	0x80002400

08006d48 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b088      	sub	sp, #32
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d58:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <I2C_Slave_ISR_DMA+0x24>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e1cc      	b.n	8007106 <I2C_Slave_ISR_DMA+0x3be>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	095b      	lsrs	r3, r3, #5
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00a      	beq.n	8006d96 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d004      	beq.n	8006d96 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 fba8 	bl	80074e4 <I2C_ITSlaveCplt>
 8006d94:	e1b2      	b.n	80070fc <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	091b      	lsrs	r3, r3, #4
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 819c 	beq.w	80070dc <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	091b      	lsrs	r3, r3, #4
 8006da8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 8195 	beq.w	80070dc <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	0b9b      	lsrs	r3, r3, #14
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d106      	bne.n	8006dcc <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	0bdb      	lsrs	r3, r3, #15
 8006dc2:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 8181 	beq.w	80070ce <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d07c      	beq.n	8006ece <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	0bdb      	lsrs	r3, r3, #15
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d076      	beq.n	8006ece <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a75      	ldr	r2, [pc, #468]	@ (8006fbc <I2C_Slave_ISR_DMA+0x274>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d059      	beq.n	8006ea0 <I2C_Slave_ISR_DMA+0x158>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a73      	ldr	r2, [pc, #460]	@ (8006fc0 <I2C_Slave_ISR_DMA+0x278>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d053      	beq.n	8006ea0 <I2C_Slave_ISR_DMA+0x158>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a71      	ldr	r2, [pc, #452]	@ (8006fc4 <I2C_Slave_ISR_DMA+0x27c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d04d      	beq.n	8006ea0 <I2C_Slave_ISR_DMA+0x158>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a6f      	ldr	r2, [pc, #444]	@ (8006fc8 <I2C_Slave_ISR_DMA+0x280>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d047      	beq.n	8006ea0 <I2C_Slave_ISR_DMA+0x158>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a6d      	ldr	r2, [pc, #436]	@ (8006fcc <I2C_Slave_ISR_DMA+0x284>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d041      	beq.n	8006ea0 <I2C_Slave_ISR_DMA+0x158>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a6b      	ldr	r2, [pc, #428]	@ (8006fd0 <I2C_Slave_ISR_DMA+0x288>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d03b      	beq.n	8006ea0 <I2C_Slave_ISR_DMA+0x158>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a69      	ldr	r2, [pc, #420]	@ (8006fd4 <I2C_Slave_ISR_DMA+0x28c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d035      	beq.n	8006ea0 <I2C_Slave_ISR_DMA+0x158>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a67      	ldr	r2, [pc, #412]	@ (8006fd8 <I2C_Slave_ISR_DMA+0x290>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d02f      	beq.n	8006ea0 <I2C_Slave_ISR_DMA+0x158>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a65      	ldr	r2, [pc, #404]	@ (8006fdc <I2C_Slave_ISR_DMA+0x294>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d029      	beq.n	8006ea0 <I2C_Slave_ISR_DMA+0x158>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a63      	ldr	r2, [pc, #396]	@ (8006fe0 <I2C_Slave_ISR_DMA+0x298>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d023      	beq.n	8006ea0 <I2C_Slave_ISR_DMA+0x158>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a61      	ldr	r2, [pc, #388]	@ (8006fe4 <I2C_Slave_ISR_DMA+0x29c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d01d      	beq.n	8006ea0 <I2C_Slave_ISR_DMA+0x158>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a5f      	ldr	r2, [pc, #380]	@ (8006fe8 <I2C_Slave_ISR_DMA+0x2a0>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d017      	beq.n	8006ea0 <I2C_Slave_ISR_DMA+0x158>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a5d      	ldr	r2, [pc, #372]	@ (8006fec <I2C_Slave_ISR_DMA+0x2a4>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d011      	beq.n	8006ea0 <I2C_Slave_ISR_DMA+0x158>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a5b      	ldr	r2, [pc, #364]	@ (8006ff0 <I2C_Slave_ISR_DMA+0x2a8>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d00b      	beq.n	8006ea0 <I2C_Slave_ISR_DMA+0x158>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a59      	ldr	r2, [pc, #356]	@ (8006ff4 <I2C_Slave_ISR_DMA+0x2ac>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d005      	beq.n	8006ea0 <I2C_Slave_ISR_DMA+0x158>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a57      	ldr	r2, [pc, #348]	@ (8006ff8 <I2C_Slave_ISR_DMA+0x2b0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d109      	bne.n	8006eb4 <I2C_Slave_ISR_DMA+0x16c>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	bf0c      	ite	eq
 8006eac:	2301      	moveq	r3, #1
 8006eae:	2300      	movne	r3, #0
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	e008      	b.n	8006ec6 <I2C_Slave_ISR_DMA+0x17e>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	bf0c      	ite	eq
 8006ec0:	2301      	moveq	r3, #1
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 809f 	beq.w	8007016 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	0b9b      	lsrs	r3, r3, #14
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 8098 	beq.w	8007016 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a33      	ldr	r2, [pc, #204]	@ (8006fbc <I2C_Slave_ISR_DMA+0x274>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d059      	beq.n	8006fa6 <I2C_Slave_ISR_DMA+0x25e>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a31      	ldr	r2, [pc, #196]	@ (8006fc0 <I2C_Slave_ISR_DMA+0x278>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d053      	beq.n	8006fa6 <I2C_Slave_ISR_DMA+0x25e>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a2f      	ldr	r2, [pc, #188]	@ (8006fc4 <I2C_Slave_ISR_DMA+0x27c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d04d      	beq.n	8006fa6 <I2C_Slave_ISR_DMA+0x25e>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a2d      	ldr	r2, [pc, #180]	@ (8006fc8 <I2C_Slave_ISR_DMA+0x280>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d047      	beq.n	8006fa6 <I2C_Slave_ISR_DMA+0x25e>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8006fcc <I2C_Slave_ISR_DMA+0x284>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d041      	beq.n	8006fa6 <I2C_Slave_ISR_DMA+0x25e>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a29      	ldr	r2, [pc, #164]	@ (8006fd0 <I2C_Slave_ISR_DMA+0x288>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d03b      	beq.n	8006fa6 <I2C_Slave_ISR_DMA+0x25e>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a27      	ldr	r2, [pc, #156]	@ (8006fd4 <I2C_Slave_ISR_DMA+0x28c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d035      	beq.n	8006fa6 <I2C_Slave_ISR_DMA+0x25e>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a25      	ldr	r2, [pc, #148]	@ (8006fd8 <I2C_Slave_ISR_DMA+0x290>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d02f      	beq.n	8006fa6 <I2C_Slave_ISR_DMA+0x25e>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a23      	ldr	r2, [pc, #140]	@ (8006fdc <I2C_Slave_ISR_DMA+0x294>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d029      	beq.n	8006fa6 <I2C_Slave_ISR_DMA+0x25e>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a21      	ldr	r2, [pc, #132]	@ (8006fe0 <I2C_Slave_ISR_DMA+0x298>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d023      	beq.n	8006fa6 <I2C_Slave_ISR_DMA+0x25e>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1f      	ldr	r2, [pc, #124]	@ (8006fe4 <I2C_Slave_ISR_DMA+0x29c>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d01d      	beq.n	8006fa6 <I2C_Slave_ISR_DMA+0x25e>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a1d      	ldr	r2, [pc, #116]	@ (8006fe8 <I2C_Slave_ISR_DMA+0x2a0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d017      	beq.n	8006fa6 <I2C_Slave_ISR_DMA+0x25e>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8006fec <I2C_Slave_ISR_DMA+0x2a4>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d011      	beq.n	8006fa6 <I2C_Slave_ISR_DMA+0x25e>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a19      	ldr	r2, [pc, #100]	@ (8006ff0 <I2C_Slave_ISR_DMA+0x2a8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00b      	beq.n	8006fa6 <I2C_Slave_ISR_DMA+0x25e>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a17      	ldr	r2, [pc, #92]	@ (8006ff4 <I2C_Slave_ISR_DMA+0x2ac>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d005      	beq.n	8006fa6 <I2C_Slave_ISR_DMA+0x25e>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a15      	ldr	r2, [pc, #84]	@ (8006ff8 <I2C_Slave_ISR_DMA+0x2b0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d12a      	bne.n	8006ffc <I2C_Slave_ISR_DMA+0x2b4>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	bf0c      	ite	eq
 8006fb2:	2301      	moveq	r3, #1
 8006fb4:	2300      	movne	r3, #0
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	e029      	b.n	800700e <I2C_Slave_ISR_DMA+0x2c6>
 8006fba:	bf00      	nop
 8006fbc:	40020010 	.word	0x40020010
 8006fc0:	40020028 	.word	0x40020028
 8006fc4:	40020040 	.word	0x40020040
 8006fc8:	40020058 	.word	0x40020058
 8006fcc:	40020070 	.word	0x40020070
 8006fd0:	40020088 	.word	0x40020088
 8006fd4:	400200a0 	.word	0x400200a0
 8006fd8:	400200b8 	.word	0x400200b8
 8006fdc:	40020410 	.word	0x40020410
 8006fe0:	40020428 	.word	0x40020428
 8006fe4:	40020440 	.word	0x40020440
 8006fe8:	40020458 	.word	0x40020458
 8006fec:	40020470 	.word	0x40020470
 8006ff0:	40020488 	.word	0x40020488
 8006ff4:	400204a0 	.word	0x400204a0
 8006ff8:	400204b8 	.word	0x400204b8
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	bf0c      	ite	eq
 8007008:	2301      	moveq	r3, #1
 800700a:	2300      	movne	r3, #0
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 8007012:	2301      	movs	r3, #1
 8007014:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d128      	bne.n	800706e <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b28      	cmp	r3, #40	@ 0x28
 8007026:	d108      	bne.n	800703a <I2C_Slave_ISR_DMA+0x2f2>
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800702e:	d104      	bne.n	800703a <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007030:	68b9      	ldr	r1, [r7, #8]
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 fcb0 	bl	8007998 <I2C_ITListenCplt>
 8007038:	e048      	b.n	80070cc <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b29      	cmp	r3, #41	@ 0x29
 8007044:	d10e      	bne.n	8007064 <I2C_Slave_ISR_DMA+0x31c>
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800704c:	d00a      	beq.n	8007064 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2210      	movs	r2, #16
 8007054:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 fe0b 	bl	8007c72 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 f918 	bl	8007292 <I2C_ITSlaveSeqCplt>
 8007062:	e033      	b.n	80070cc <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2210      	movs	r2, #16
 800706a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800706c:	e034      	b.n	80070d8 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2210      	movs	r2, #16
 8007074:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800707a:	f043 0204 	orr.w	r2, r3, #4
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007088:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <I2C_Slave_ISR_DMA+0x350>
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007096:	d11f      	bne.n	80070d8 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007098:	7dfb      	ldrb	r3, [r7, #23]
 800709a:	2b21      	cmp	r3, #33	@ 0x21
 800709c:	d002      	beq.n	80070a4 <I2C_Slave_ISR_DMA+0x35c>
 800709e:	7dfb      	ldrb	r3, [r7, #23]
 80070a0:	2b29      	cmp	r3, #41	@ 0x29
 80070a2:	d103      	bne.n	80070ac <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2221      	movs	r2, #33	@ 0x21
 80070a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80070aa:	e008      	b.n	80070be <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
 80070ae:	2b22      	cmp	r3, #34	@ 0x22
 80070b0:	d002      	beq.n	80070b8 <I2C_Slave_ISR_DMA+0x370>
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
 80070b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80070b6:	d102      	bne.n	80070be <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2222      	movs	r2, #34	@ 0x22
 80070bc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c2:	4619      	mov	r1, r3
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 fcbd 	bl	8007a44 <I2C_ITError>
      if (treatdmanack == 1U)
 80070ca:	e005      	b.n	80070d8 <I2C_Slave_ISR_DMA+0x390>
 80070cc:	e004      	b.n	80070d8 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2210      	movs	r2, #16
 80070d4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80070d6:	e011      	b.n	80070fc <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 80070d8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80070da:	e00f      	b.n	80070fc <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	08db      	lsrs	r3, r3, #3
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d009      	beq.n	80070fc <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	08db      	lsrs	r3, r3, #3
 80070ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80070f4:	68b9      	ldr	r1, [r7, #8]
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 f80a 	bl	8007110 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop

08007110 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007120:	b2db      	uxtb	r3, r3
 8007122:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007126:	2b28      	cmp	r3, #40	@ 0x28
 8007128:	d16a      	bne.n	8007200 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	0c1b      	lsrs	r3, r3, #16
 8007132:	b2db      	uxtb	r3, r3
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	0c1b      	lsrs	r3, r3, #16
 8007142:	b29b      	uxth	r3, r3
 8007144:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007148:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	b29b      	uxth	r3, r3
 8007152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007156:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	b29b      	uxth	r3, r3
 8007160:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007164:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	2b02      	cmp	r3, #2
 800716c:	d138      	bne.n	80071e0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800716e:	897b      	ldrh	r3, [r7, #10]
 8007170:	09db      	lsrs	r3, r3, #7
 8007172:	b29a      	uxth	r2, r3
 8007174:	89bb      	ldrh	r3, [r7, #12]
 8007176:	4053      	eors	r3, r2
 8007178:	b29b      	uxth	r3, r3
 800717a:	f003 0306 	and.w	r3, r3, #6
 800717e:	2b00      	cmp	r3, #0
 8007180:	d11c      	bne.n	80071bc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007182:	897b      	ldrh	r3, [r7, #10]
 8007184:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800718a:	1c5a      	adds	r2, r3, #1
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007194:	2b02      	cmp	r3, #2
 8007196:	d13b      	bne.n	8007210 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2208      	movs	r2, #8
 80071a4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80071ae:	89ba      	ldrh	r2, [r7, #12]
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff f92c 	bl	8006412 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80071ba:	e029      	b.n	8007210 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80071bc:	893b      	ldrh	r3, [r7, #8]
 80071be:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80071c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f001 f80f 	bl	80081e8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80071d2:	89ba      	ldrh	r2, [r7, #12]
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff f91a 	bl	8006412 <HAL_I2C_AddrCallback>
}
 80071de:	e017      	b.n	8007210 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80071e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 ffff 	bl	80081e8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80071f2:	89ba      	ldrh	r2, [r7, #12]
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f7ff f90a 	bl	8006412 <HAL_I2C_AddrCallback>
}
 80071fe:	e007      	b.n	8007210 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2208      	movs	r2, #8
 8007206:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007210:	bf00      	nop
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b21      	cmp	r3, #33	@ 0x21
 8007232:	d115      	bne.n	8007260 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2220      	movs	r2, #32
 8007238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2211      	movs	r2, #17
 8007240:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007248:	2101      	movs	r1, #1
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 ffcc 	bl	80081e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff f8bc 	bl	80063d6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800725e:	e014      	b.n	800728a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2220      	movs	r2, #32
 8007264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2212      	movs	r2, #18
 800726c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007274:	2102      	movs	r1, #2
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 ffb6 	bl	80081e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7fa fcf3 	bl	8001c70 <HAL_I2C_MasterRxCpltCallback>
}
 800728a:	bf00      	nop
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	0b9b      	lsrs	r3, r3, #14
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d008      	beq.n	80072c8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	e00d      	b.n	80072e4 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	0bdb      	lsrs	r3, r3, #15
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d007      	beq.n	80072e4 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80072e2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b29      	cmp	r3, #41	@ 0x29
 80072ee:	d112      	bne.n	8007316 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2228      	movs	r2, #40	@ 0x28
 80072f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2221      	movs	r2, #33	@ 0x21
 80072fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80072fe:	2101      	movs	r1, #1
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 ff71 	bl	80081e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff f86b 	bl	80063ea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007314:	e017      	b.n	8007346 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007320:	d111      	bne.n	8007346 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2228      	movs	r2, #40	@ 0x28
 8007326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2222      	movs	r2, #34	@ 0x22
 800732e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007330:	2102      	movs	r1, #2
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 ff58 	bl	80081e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7ff f85c 	bl	80063fe <HAL_I2C_SlaveRxCpltCallback>
}
 8007346:	bf00      	nop
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
	...

08007350 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2220      	movs	r2, #32
 8007364:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b21      	cmp	r3, #33	@ 0x21
 8007370:	d107      	bne.n	8007382 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007372:	2101      	movs	r1, #1
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 ff37 	bl	80081e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2211      	movs	r2, #17
 800737e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007380:	e00c      	b.n	800739c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b22      	cmp	r3, #34	@ 0x22
 800738c:	d106      	bne.n	800739c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800738e:	2102      	movs	r1, #2
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 ff29 	bl	80081e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2212      	movs	r2, #18
 800739a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6859      	ldr	r1, [r3, #4]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	4b4d      	ldr	r3, [pc, #308]	@ (80074dc <I2C_ITMasterCplt+0x18c>)
 80073a8:	400b      	ands	r3, r1
 80073aa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a4a      	ldr	r2, [pc, #296]	@ (80074e0 <I2C_ITMasterCplt+0x190>)
 80073b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	091b      	lsrs	r3, r3, #4
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d009      	beq.n	80073d8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2210      	movs	r2, #16
 80073ca:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073d0:	f043 0204 	orr.w	r2, r3, #4
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b60      	cmp	r3, #96	@ 0x60
 80073e2:	d10b      	bne.n	80073fc <I2C_ITMasterCplt+0xac>
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	089b      	lsrs	r3, r3, #2
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d005      	beq.n	80073fc <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80073fa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fc38 	bl	8007c72 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007406:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b60      	cmp	r3, #96	@ 0x60
 8007412:	d002      	beq.n	800741a <I2C_ITMasterCplt+0xca>
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d006      	beq.n	8007428 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fb0f 	bl	8007a44 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007426:	e054      	b.n	80074d2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b21      	cmp	r3, #33	@ 0x21
 8007432:	d124      	bne.n	800747e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2220      	movs	r2, #32
 8007438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b40      	cmp	r3, #64	@ 0x40
 800744c:	d10b      	bne.n	8007466 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7fe ffef 	bl	8006442 <HAL_I2C_MemTxCpltCallback>
}
 8007464:	e035      	b.n	80074d2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7fe ffad 	bl	80063d6 <HAL_I2C_MasterTxCpltCallback>
}
 800747c:	e029      	b.n	80074d2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b22      	cmp	r3, #34	@ 0x22
 8007488:	d123      	bne.n	80074d2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b40      	cmp	r3, #64	@ 0x40
 80074a2:	d10b      	bne.n	80074bc <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7fe ffce 	bl	8006456 <HAL_I2C_MemRxCpltCallback>
}
 80074ba:	e00a      	b.n	80074d2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7fa fbcf 	bl	8001c70 <HAL_I2C_MasterRxCpltCallback>
}
 80074d2:	bf00      	nop
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	fe00e800 	.word	0xfe00e800
 80074e0:	ffff0000 	.word	0xffff0000

080074e4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fe:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007506:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2220      	movs	r2, #32
 800750e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007510:	7afb      	ldrb	r3, [r7, #11]
 8007512:	2b21      	cmp	r3, #33	@ 0x21
 8007514:	d002      	beq.n	800751c <I2C_ITSlaveCplt+0x38>
 8007516:	7afb      	ldrb	r3, [r7, #11]
 8007518:	2b29      	cmp	r3, #41	@ 0x29
 800751a:	d108      	bne.n	800752e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800751c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fe61 	bl	80081e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2221      	movs	r2, #33	@ 0x21
 800752a:	631a      	str	r2, [r3, #48]	@ 0x30
 800752c:	e019      	b.n	8007562 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800752e:	7afb      	ldrb	r3, [r7, #11]
 8007530:	2b22      	cmp	r3, #34	@ 0x22
 8007532:	d002      	beq.n	800753a <I2C_ITSlaveCplt+0x56>
 8007534:	7afb      	ldrb	r3, [r7, #11]
 8007536:	2b2a      	cmp	r3, #42	@ 0x2a
 8007538:	d108      	bne.n	800754c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800753a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fe52 	bl	80081e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2222      	movs	r2, #34	@ 0x22
 8007548:	631a      	str	r2, [r3, #48]	@ 0x30
 800754a:	e00a      	b.n	8007562 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800754c:	7afb      	ldrb	r3, [r7, #11]
 800754e:	2b28      	cmp	r3, #40	@ 0x28
 8007550:	d107      	bne.n	8007562 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007552:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fe46 	bl	80081e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007570:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6859      	ldr	r1, [r3, #4]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	4b80      	ldr	r3, [pc, #512]	@ (8007780 <I2C_ITSlaveCplt+0x29c>)
 800757e:	400b      	ands	r3, r1
 8007580:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fb75 	bl	8007c72 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	0b9b      	lsrs	r3, r3, #14
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	2b00      	cmp	r3, #0
 8007592:	d07a      	beq.n	800768a <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80075a2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 8112 	beq.w	80077d2 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a73      	ldr	r2, [pc, #460]	@ (8007784 <I2C_ITSlaveCplt+0x2a0>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d059      	beq.n	800766e <I2C_ITSlaveCplt+0x18a>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a71      	ldr	r2, [pc, #452]	@ (8007788 <I2C_ITSlaveCplt+0x2a4>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d053      	beq.n	800766e <I2C_ITSlaveCplt+0x18a>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a6f      	ldr	r2, [pc, #444]	@ (800778c <I2C_ITSlaveCplt+0x2a8>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d04d      	beq.n	800766e <I2C_ITSlaveCplt+0x18a>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a6d      	ldr	r2, [pc, #436]	@ (8007790 <I2C_ITSlaveCplt+0x2ac>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d047      	beq.n	800766e <I2C_ITSlaveCplt+0x18a>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a6b      	ldr	r2, [pc, #428]	@ (8007794 <I2C_ITSlaveCplt+0x2b0>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d041      	beq.n	800766e <I2C_ITSlaveCplt+0x18a>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a69      	ldr	r2, [pc, #420]	@ (8007798 <I2C_ITSlaveCplt+0x2b4>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d03b      	beq.n	800766e <I2C_ITSlaveCplt+0x18a>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a67      	ldr	r2, [pc, #412]	@ (800779c <I2C_ITSlaveCplt+0x2b8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d035      	beq.n	800766e <I2C_ITSlaveCplt+0x18a>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a65      	ldr	r2, [pc, #404]	@ (80077a0 <I2C_ITSlaveCplt+0x2bc>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d02f      	beq.n	800766e <I2C_ITSlaveCplt+0x18a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a63      	ldr	r2, [pc, #396]	@ (80077a4 <I2C_ITSlaveCplt+0x2c0>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d029      	beq.n	800766e <I2C_ITSlaveCplt+0x18a>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a61      	ldr	r2, [pc, #388]	@ (80077a8 <I2C_ITSlaveCplt+0x2c4>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d023      	beq.n	800766e <I2C_ITSlaveCplt+0x18a>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a5f      	ldr	r2, [pc, #380]	@ (80077ac <I2C_ITSlaveCplt+0x2c8>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d01d      	beq.n	800766e <I2C_ITSlaveCplt+0x18a>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a5d      	ldr	r2, [pc, #372]	@ (80077b0 <I2C_ITSlaveCplt+0x2cc>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d017      	beq.n	800766e <I2C_ITSlaveCplt+0x18a>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a5b      	ldr	r2, [pc, #364]	@ (80077b4 <I2C_ITSlaveCplt+0x2d0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d011      	beq.n	800766e <I2C_ITSlaveCplt+0x18a>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a59      	ldr	r2, [pc, #356]	@ (80077b8 <I2C_ITSlaveCplt+0x2d4>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d00b      	beq.n	800766e <I2C_ITSlaveCplt+0x18a>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a57      	ldr	r2, [pc, #348]	@ (80077bc <I2C_ITSlaveCplt+0x2d8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d005      	beq.n	800766e <I2C_ITSlaveCplt+0x18a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a55      	ldr	r2, [pc, #340]	@ (80077c0 <I2C_ITSlaveCplt+0x2dc>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d105      	bne.n	800767a <I2C_ITSlaveCplt+0x196>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	b29b      	uxth	r3, r3
 8007678:	e004      	b.n	8007684 <I2C_ITSlaveCplt+0x1a0>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	b29b      	uxth	r3, r3
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8007688:	e0a3      	b.n	80077d2 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	0bdb      	lsrs	r3, r3, #15
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 809d 	beq.w	80077d2 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80076a6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 8090 	beq.w	80077d2 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a32      	ldr	r2, [pc, #200]	@ (8007784 <I2C_ITSlaveCplt+0x2a0>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d059      	beq.n	8007772 <I2C_ITSlaveCplt+0x28e>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a30      	ldr	r2, [pc, #192]	@ (8007788 <I2C_ITSlaveCplt+0x2a4>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d053      	beq.n	8007772 <I2C_ITSlaveCplt+0x28e>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a2e      	ldr	r2, [pc, #184]	@ (800778c <I2C_ITSlaveCplt+0x2a8>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d04d      	beq.n	8007772 <I2C_ITSlaveCplt+0x28e>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a2c      	ldr	r2, [pc, #176]	@ (8007790 <I2C_ITSlaveCplt+0x2ac>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d047      	beq.n	8007772 <I2C_ITSlaveCplt+0x28e>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a2a      	ldr	r2, [pc, #168]	@ (8007794 <I2C_ITSlaveCplt+0x2b0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d041      	beq.n	8007772 <I2C_ITSlaveCplt+0x28e>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a28      	ldr	r2, [pc, #160]	@ (8007798 <I2C_ITSlaveCplt+0x2b4>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d03b      	beq.n	8007772 <I2C_ITSlaveCplt+0x28e>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a26      	ldr	r2, [pc, #152]	@ (800779c <I2C_ITSlaveCplt+0x2b8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d035      	beq.n	8007772 <I2C_ITSlaveCplt+0x28e>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a24      	ldr	r2, [pc, #144]	@ (80077a0 <I2C_ITSlaveCplt+0x2bc>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d02f      	beq.n	8007772 <I2C_ITSlaveCplt+0x28e>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a22      	ldr	r2, [pc, #136]	@ (80077a4 <I2C_ITSlaveCplt+0x2c0>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d029      	beq.n	8007772 <I2C_ITSlaveCplt+0x28e>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a20      	ldr	r2, [pc, #128]	@ (80077a8 <I2C_ITSlaveCplt+0x2c4>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d023      	beq.n	8007772 <I2C_ITSlaveCplt+0x28e>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a1e      	ldr	r2, [pc, #120]	@ (80077ac <I2C_ITSlaveCplt+0x2c8>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d01d      	beq.n	8007772 <I2C_ITSlaveCplt+0x28e>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a1c      	ldr	r2, [pc, #112]	@ (80077b0 <I2C_ITSlaveCplt+0x2cc>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d017      	beq.n	8007772 <I2C_ITSlaveCplt+0x28e>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a1a      	ldr	r2, [pc, #104]	@ (80077b4 <I2C_ITSlaveCplt+0x2d0>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d011      	beq.n	8007772 <I2C_ITSlaveCplt+0x28e>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a18      	ldr	r2, [pc, #96]	@ (80077b8 <I2C_ITSlaveCplt+0x2d4>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d00b      	beq.n	8007772 <I2C_ITSlaveCplt+0x28e>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a16      	ldr	r2, [pc, #88]	@ (80077bc <I2C_ITSlaveCplt+0x2d8>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d005      	beq.n	8007772 <I2C_ITSlaveCplt+0x28e>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a14      	ldr	r2, [pc, #80]	@ (80077c0 <I2C_ITSlaveCplt+0x2dc>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d128      	bne.n	80077c4 <I2C_ITSlaveCplt+0x2e0>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	b29b      	uxth	r3, r3
 800777c:	e027      	b.n	80077ce <I2C_ITSlaveCplt+0x2ea>
 800777e:	bf00      	nop
 8007780:	fe00e800 	.word	0xfe00e800
 8007784:	40020010 	.word	0x40020010
 8007788:	40020028 	.word	0x40020028
 800778c:	40020040 	.word	0x40020040
 8007790:	40020058 	.word	0x40020058
 8007794:	40020070 	.word	0x40020070
 8007798:	40020088 	.word	0x40020088
 800779c:	400200a0 	.word	0x400200a0
 80077a0:	400200b8 	.word	0x400200b8
 80077a4:	40020410 	.word	0x40020410
 80077a8:	40020428 	.word	0x40020428
 80077ac:	40020440 	.word	0x40020440
 80077b0:	40020458 	.word	0x40020458
 80077b4:	40020470 	.word	0x40020470
 80077b8:	40020488 	.word	0x40020488
 80077bc:	400204a0 	.word	0x400204a0
 80077c0:	400204b8 	.word	0x400204b8
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	089b      	lsrs	r3, r3, #2
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d020      	beq.n	8007820 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f023 0304 	bic.w	r3, r3, #4
 80077e4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f0:	b2d2      	uxtb	r2, r2
 80077f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00c      	beq.n	8007820 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800780a:	3b01      	subs	r3, #1
 800780c:	b29a      	uxth	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007816:	b29b      	uxth	r3, r3
 8007818:	3b01      	subs	r3, #1
 800781a:	b29a      	uxth	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d005      	beq.n	8007836 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800782e:	f043 0204 	orr.w	r2, r3, #4
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	091b      	lsrs	r3, r3, #4
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d04a      	beq.n	80078d8 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	091b      	lsrs	r3, r3, #4
 8007846:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800784a:	2b00      	cmp	r3, #0
 800784c:	d044      	beq.n	80078d8 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007852:	b29b      	uxth	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d128      	bne.n	80078aa <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b28      	cmp	r3, #40	@ 0x28
 8007862:	d108      	bne.n	8007876 <I2C_ITSlaveCplt+0x392>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800786a:	d104      	bne.n	8007876 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800786c:	6979      	ldr	r1, [r7, #20]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f892 	bl	8007998 <I2C_ITListenCplt>
 8007874:	e030      	b.n	80078d8 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b29      	cmp	r3, #41	@ 0x29
 8007880:	d10e      	bne.n	80078a0 <I2C_ITSlaveCplt+0x3bc>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007888:	d00a      	beq.n	80078a0 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2210      	movs	r2, #16
 8007890:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f9ed 	bl	8007c72 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7ff fcfa 	bl	8007292 <I2C_ITSlaveSeqCplt>
 800789e:	e01b      	b.n	80078d8 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2210      	movs	r2, #16
 80078a6:	61da      	str	r2, [r3, #28]
 80078a8:	e016      	b.n	80078d8 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2210      	movs	r2, #16
 80078b0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078b6:	f043 0204 	orr.w	r2, r3, #4
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <I2C_ITSlaveCplt+0x3e8>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078ca:	d105      	bne.n	80078d8 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f8b6 	bl	8007a44 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d010      	beq.n	8007910 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f8a5 	bl	8007a44 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b28      	cmp	r3, #40	@ 0x28
 8007904:	d141      	bne.n	800798a <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007906:	6979      	ldr	r1, [r7, #20]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f845 	bl	8007998 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800790e:	e03c      	b.n	800798a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007914:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007918:	d014      	beq.n	8007944 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7ff fcb9 	bl	8007292 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a1c      	ldr	r2, [pc, #112]	@ (8007994 <I2C_ITSlaveCplt+0x4b0>)
 8007924:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2220      	movs	r2, #32
 800792a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7fe fd76 	bl	800642e <HAL_I2C_ListenCpltCallback>
}
 8007942:	e022      	b.n	800798a <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b22      	cmp	r3, #34	@ 0x22
 800794e:	d10e      	bne.n	800796e <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2220      	movs	r2, #32
 8007954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7fe fd49 	bl	80063fe <HAL_I2C_SlaveRxCpltCallback>
}
 800796c:	e00d      	b.n	800798a <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2220      	movs	r2, #32
 8007972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7fe fd30 	bl	80063ea <HAL_I2C_SlaveTxCpltCallback>
}
 800798a:	bf00      	nop
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	ffff0000 	.word	0xffff0000

08007998 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a26      	ldr	r2, [pc, #152]	@ (8007a40 <I2C_ITListenCplt+0xa8>)
 80079a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2220      	movs	r2, #32
 80079b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	089b      	lsrs	r3, r3, #2
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d022      	beq.n	8007a16 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079da:	b2d2      	uxtb	r2, r2
 80079dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e2:	1c5a      	adds	r2, r3, #1
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d012      	beq.n	8007a16 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079f4:	3b01      	subs	r3, #1
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a0e:	f043 0204 	orr.w	r2, r3, #4
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007a16:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fbe4 	bl	80081e8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2210      	movs	r2, #16
 8007a26:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7fe fcfc 	bl	800642e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007a36:	bf00      	nop
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	ffff0000 	.word	0xffff0000

08007a44 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a54:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a6d      	ldr	r2, [pc, #436]	@ (8007c18 <I2C_ITError+0x1d4>)
 8007a62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	431a      	orrs	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	2b28      	cmp	r3, #40	@ 0x28
 8007a7a:	d005      	beq.n	8007a88 <I2C_ITError+0x44>
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
 8007a7e:	2b29      	cmp	r3, #41	@ 0x29
 8007a80:	d002      	beq.n	8007a88 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
 8007a84:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a86:	d10b      	bne.n	8007aa0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007a88:	2103      	movs	r1, #3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fbac 	bl	80081e8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2228      	movs	r2, #40	@ 0x28
 8007a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a60      	ldr	r2, [pc, #384]	@ (8007c1c <I2C_ITError+0x1d8>)
 8007a9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a9e:	e030      	b.n	8007b02 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007aa0:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fb9f 	bl	80081e8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f8e1 	bl	8007c72 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b60      	cmp	r3, #96	@ 0x60
 8007aba:	d01f      	beq.n	8007afc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	f003 0320 	and.w	r3, r3, #32
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	d114      	bne.n	8007afc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	f003 0310 	and.w	r3, r3, #16
 8007adc:	2b10      	cmp	r3, #16
 8007ade:	d109      	bne.n	8007af4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2210      	movs	r2, #16
 8007ae6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aec:	f043 0204 	orr.w	r2, r3, #4
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2220      	movs	r2, #32
 8007afa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b06:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d039      	beq.n	8007b84 <I2C_ITError+0x140>
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2b11      	cmp	r3, #17
 8007b14:	d002      	beq.n	8007b1c <I2C_ITError+0xd8>
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2b21      	cmp	r3, #33	@ 0x21
 8007b1a:	d133      	bne.n	8007b84 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b2a:	d107      	bne.n	8007b3c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007b3a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fd fe95 	bl	8005870 <HAL_DMA_GetState>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d017      	beq.n	8007b7c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b50:	4a33      	ldr	r2, [pc, #204]	@ (8007c20 <I2C_ITError+0x1dc>)
 8007b52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fd fc3f 	bl	80053e4 <HAL_DMA_Abort_IT>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d04d      	beq.n	8007c08 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007b76:	4610      	mov	r0, r2
 8007b78:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b7a:	e045      	b.n	8007c08 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f851 	bl	8007c24 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b82:	e041      	b.n	8007c08 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d039      	beq.n	8007c00 <I2C_ITError+0x1bc>
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b12      	cmp	r3, #18
 8007b90:	d002      	beq.n	8007b98 <I2C_ITError+0x154>
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2b22      	cmp	r3, #34	@ 0x22
 8007b96:	d133      	bne.n	8007c00 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ba6:	d107      	bne.n	8007bb8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007bb6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fd fe57 	bl	8005870 <HAL_DMA_GetState>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d017      	beq.n	8007bf8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bcc:	4a14      	ldr	r2, [pc, #80]	@ (8007c20 <I2C_ITError+0x1dc>)
 8007bce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fd fc01 	bl	80053e4 <HAL_DMA_Abort_IT>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d011      	beq.n	8007c0c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007bf2:	4610      	mov	r0, r2
 8007bf4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bf6:	e009      	b.n	8007c0c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f813 	bl	8007c24 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bfe:	e005      	b.n	8007c0c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f80f 	bl	8007c24 <I2C_TreatErrorCallback>
  }
}
 8007c06:	e002      	b.n	8007c0e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007c08:	bf00      	nop
 8007c0a:	e000      	b.n	8007c0e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c0c:	bf00      	nop
}
 8007c0e:	bf00      	nop
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	ffff0000 	.word	0xffff0000
 8007c1c:	080066fb 	.word	0x080066fb
 8007c20:	08007cbb 	.word	0x08007cbb

08007c24 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b60      	cmp	r3, #96	@ 0x60
 8007c36:	d10e      	bne.n	8007c56 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7fe fc15 	bl	800647e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007c54:	e009      	b.n	8007c6a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7fe fc00 	bl	800646a <HAL_I2C_ErrorCallback>
}
 8007c6a:	bf00      	nop
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b083      	sub	sp, #12
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d103      	bne.n	8007c90 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d007      	beq.n	8007cae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	699a      	ldr	r2, [r3, #24]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f042 0201 	orr.w	r2, r2, #1
 8007cac:	619a      	str	r2, [r3, #24]
  }
}
 8007cae:	bf00      	nop
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b084      	sub	sp, #16
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f7ff ff9b 	bl	8007c24 <I2C_TreatErrorCallback>
}
 8007cee:	bf00      	nop
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	603b      	str	r3, [r7, #0]
 8007d02:	4613      	mov	r3, r2
 8007d04:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d06:	e03b      	b.n	8007d80 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d08:	69ba      	ldr	r2, [r7, #24]
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 f8d5 	bl	8007ebc <I2C_IsErrorOccurred>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e041      	b.n	8007da0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d22:	d02d      	beq.n	8007d80 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d24:	f7fa fdd4 	bl	80028d0 <HAL_GetTick>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d302      	bcc.n	8007d3a <I2C_WaitOnFlagUntilTimeout+0x44>
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d122      	bne.n	8007d80 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	699a      	ldr	r2, [r3, #24]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	4013      	ands	r3, r2
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	bf0c      	ite	eq
 8007d4a:	2301      	moveq	r3, #1
 8007d4c:	2300      	movne	r3, #0
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	461a      	mov	r2, r3
 8007d52:	79fb      	ldrb	r3, [r7, #7]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d113      	bne.n	8007d80 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d5c:	f043 0220 	orr.w	r2, r3, #32
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2220      	movs	r2, #32
 8007d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e00f      	b.n	8007da0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699a      	ldr	r2, [r3, #24]
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	4013      	ands	r3, r2
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	bf0c      	ite	eq
 8007d90:	2301      	moveq	r3, #1
 8007d92:	2300      	movne	r3, #0
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	461a      	mov	r2, r3
 8007d98:	79fb      	ldrb	r3, [r7, #7]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d0b4      	beq.n	8007d08 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007db4:	e033      	b.n	8007e1e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	68b9      	ldr	r1, [r7, #8]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 f87e 	bl	8007ebc <I2C_IsErrorOccurred>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e031      	b.n	8007e2e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd0:	d025      	beq.n	8007e1e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dd2:	f7fa fd7d 	bl	80028d0 <HAL_GetTick>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d302      	bcc.n	8007de8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d11a      	bne.n	8007e1e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d013      	beq.n	8007e1e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dfa:	f043 0220 	orr.w	r2, r3, #32
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e007      	b.n	8007e2e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d1c4      	bne.n	8007db6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e42:	e02f      	b.n	8007ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	68b9      	ldr	r1, [r7, #8]
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 f837 	bl	8007ebc <I2C_IsErrorOccurred>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e02d      	b.n	8007eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e58:	f7fa fd3a 	bl	80028d0 <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d302      	bcc.n	8007e6e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d11a      	bne.n	8007ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	f003 0320 	and.w	r3, r3, #32
 8007e78:	2b20      	cmp	r3, #32
 8007e7a:	d013      	beq.n	8007ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e80:	f043 0220 	orr.w	r2, r3, #32
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e007      	b.n	8007eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	f003 0320 	and.w	r3, r3, #32
 8007eae:	2b20      	cmp	r3, #32
 8007eb0:	d1c8      	bne.n	8007e44 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b08a      	sub	sp, #40	@ 0x28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	f003 0310 	and.w	r3, r3, #16
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d068      	beq.n	8007fba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2210      	movs	r2, #16
 8007eee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ef0:	e049      	b.n	8007f86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef8:	d045      	beq.n	8007f86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007efa:	f7fa fce9 	bl	80028d0 <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d302      	bcc.n	8007f10 <I2C_IsErrorOccurred+0x54>
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d13a      	bne.n	8007f86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f32:	d121      	bne.n	8007f78 <I2C_IsErrorOccurred+0xbc>
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f3a:	d01d      	beq.n	8007f78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007f3c:	7cfb      	ldrb	r3, [r7, #19]
 8007f3e:	2b20      	cmp	r3, #32
 8007f40:	d01a      	beq.n	8007f78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007f52:	f7fa fcbd 	bl	80028d0 <HAL_GetTick>
 8007f56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f58:	e00e      	b.n	8007f78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007f5a:	f7fa fcb9 	bl	80028d0 <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	2b19      	cmp	r3, #25
 8007f66:	d907      	bls.n	8007f78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	f043 0320 	orr.w	r3, r3, #32
 8007f6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007f76:	e006      	b.n	8007f86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b20      	cmp	r3, #32
 8007f84:	d1e9      	bne.n	8007f5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	f003 0320 	and.w	r3, r3, #32
 8007f90:	2b20      	cmp	r3, #32
 8007f92:	d003      	beq.n	8007f9c <I2C_IsErrorOccurred+0xe0>
 8007f94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d0aa      	beq.n	8007ef2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d103      	bne.n	8007fac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2220      	movs	r2, #32
 8007faa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007fac:	6a3b      	ldr	r3, [r7, #32]
 8007fae:	f043 0304 	orr.w	r3, r3, #4
 8007fb2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00b      	beq.n	8007fe4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	f043 0301 	orr.w	r3, r3, #1
 8007fd2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007fdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00b      	beq.n	8008006 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007fee:	6a3b      	ldr	r3, [r7, #32]
 8007ff0:	f043 0308 	orr.w	r3, r3, #8
 8007ff4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007ffe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00b      	beq.n	8008028 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	f043 0302 	orr.w	r3, r3, #2
 8008016:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008020:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01c      	beq.n	800806a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f7ff fe1e 	bl	8007c72 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6859      	ldr	r1, [r3, #4]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	4b0d      	ldr	r3, [pc, #52]	@ (8008078 <I2C_IsErrorOccurred+0x1bc>)
 8008042:	400b      	ands	r3, r1
 8008044:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	431a      	orrs	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2220      	movs	r2, #32
 8008056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800806a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800806e:	4618      	mov	r0, r3
 8008070:	3728      	adds	r7, #40	@ 0x28
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	fe00e800 	.word	0xfe00e800

0800807c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800807c:	b480      	push	{r7}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	607b      	str	r3, [r7, #4]
 8008086:	460b      	mov	r3, r1
 8008088:	817b      	strh	r3, [r7, #10]
 800808a:	4613      	mov	r3, r2
 800808c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800808e:	897b      	ldrh	r3, [r7, #10]
 8008090:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008094:	7a7b      	ldrb	r3, [r7, #9]
 8008096:	041b      	lsls	r3, r3, #16
 8008098:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800809c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080a2:	6a3b      	ldr	r3, [r7, #32]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080aa:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	0d5b      	lsrs	r3, r3, #21
 80080b6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80080ba:	4b08      	ldr	r3, [pc, #32]	@ (80080dc <I2C_TransferConfig+0x60>)
 80080bc:	430b      	orrs	r3, r1
 80080be:	43db      	mvns	r3, r3
 80080c0:	ea02 0103 	and.w	r1, r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80080ce:	bf00      	nop
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	03ff63ff 	.word	0x03ff63ff

080080e0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	460b      	mov	r3, r1
 80080ea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f4:	4a39      	ldr	r2, [pc, #228]	@ (80081dc <I2C_Enable_IRQ+0xfc>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d032      	beq.n	8008160 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80080fe:	4a38      	ldr	r2, [pc, #224]	@ (80081e0 <I2C_Enable_IRQ+0x100>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d02d      	beq.n	8008160 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008108:	4a36      	ldr	r2, [pc, #216]	@ (80081e4 <I2C_Enable_IRQ+0x104>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d028      	beq.n	8008160 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800810e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008112:	2b00      	cmp	r3, #0
 8008114:	da03      	bge.n	800811e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800811c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800811e:	887b      	ldrh	r3, [r7, #2]
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	2b00      	cmp	r3, #0
 8008126:	d003      	beq.n	8008130 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800812e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008130:	887b      	ldrh	r3, [r7, #2]
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8008140:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008142:	887b      	ldrh	r3, [r7, #2]
 8008144:	2b10      	cmp	r3, #16
 8008146:	d103      	bne.n	8008150 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800814e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008150:	887b      	ldrh	r3, [r7, #2]
 8008152:	2b20      	cmp	r3, #32
 8008154:	d133      	bne.n	80081be <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f043 0320 	orr.w	r3, r3, #32
 800815c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800815e:	e02e      	b.n	80081be <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008160:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008164:	2b00      	cmp	r3, #0
 8008166:	da03      	bge.n	8008170 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800816e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008170:	887b      	ldrh	r3, [r7, #2]
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8008180:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008182:	887b      	ldrh	r3, [r7, #2]
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d003      	beq.n	8008194 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8008192:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008194:	887b      	ldrh	r3, [r7, #2]
 8008196:	2b10      	cmp	r3, #16
 8008198:	d103      	bne.n	80081a2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80081a0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80081a2:	887b      	ldrh	r3, [r7, #2]
 80081a4:	2b20      	cmp	r3, #32
 80081a6:	d103      	bne.n	80081b0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80081ae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80081b0:	887b      	ldrh	r3, [r7, #2]
 80081b2:	2b40      	cmp	r3, #64	@ 0x40
 80081b4:	d103      	bne.n	80081be <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081bc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	6819      	ldr	r1, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	601a      	str	r2, [r3, #0]
}
 80081ce:	bf00      	nop
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	08006903 	.word	0x08006903
 80081e0:	08006d49 	.word	0x08006d49
 80081e4:	08006ae9 	.word	0x08006ae9

080081e8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80081f8:	887b      	ldrh	r3, [r7, #2]
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00f      	beq.n	8008222 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008208:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008210:	b2db      	uxtb	r3, r3
 8008212:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008216:	2b28      	cmp	r3, #40	@ 0x28
 8008218:	d003      	beq.n	8008222 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008220:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008222:	887b      	ldrh	r3, [r7, #2]
 8008224:	f003 0302 	and.w	r3, r3, #2
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00f      	beq.n	800824c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008232:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800823a:	b2db      	uxtb	r3, r3
 800823c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008240:	2b28      	cmp	r3, #40	@ 0x28
 8008242:	d003      	beq.n	800824c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800824a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800824c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008250:	2b00      	cmp	r3, #0
 8008252:	da03      	bge.n	800825c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800825a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800825c:	887b      	ldrh	r3, [r7, #2]
 800825e:	2b10      	cmp	r3, #16
 8008260:	d103      	bne.n	800826a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008268:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800826a:	887b      	ldrh	r3, [r7, #2]
 800826c:	2b20      	cmp	r3, #32
 800826e:	d103      	bne.n	8008278 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f043 0320 	orr.w	r3, r3, #32
 8008276:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008278:	887b      	ldrh	r3, [r7, #2]
 800827a:	2b40      	cmp	r3, #64	@ 0x40
 800827c:	d103      	bne.n	8008286 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008284:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6819      	ldr	r1, [r3, #0]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	43da      	mvns	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	400a      	ands	r2, r1
 8008296:	601a      	str	r2, [r3, #0]
}
 8008298:	bf00      	nop
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b20      	cmp	r3, #32
 80082b8:	d138      	bne.n	800832c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d101      	bne.n	80082c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80082c4:	2302      	movs	r3, #2
 80082c6:	e032      	b.n	800832e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2224      	movs	r2, #36	@ 0x24
 80082d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0201 	bic.w	r2, r2, #1
 80082e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80082f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6819      	ldr	r1, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f042 0201 	orr.w	r2, r2, #1
 8008316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2220      	movs	r2, #32
 800831c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008328:	2300      	movs	r3, #0
 800832a:	e000      	b.n	800832e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800832c:	2302      	movs	r3, #2
  }
}
 800832e:	4618      	mov	r0, r3
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800833a:	b480      	push	{r7}
 800833c:	b085      	sub	sp, #20
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b20      	cmp	r3, #32
 800834e:	d139      	bne.n	80083c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008356:	2b01      	cmp	r3, #1
 8008358:	d101      	bne.n	800835e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800835a:	2302      	movs	r3, #2
 800835c:	e033      	b.n	80083c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2224      	movs	r2, #36	@ 0x24
 800836a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f022 0201 	bic.w	r2, r2, #1
 800837c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800838c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	021b      	lsls	r3, r3, #8
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	4313      	orrs	r3, r2
 8008396:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0201 	orr.w	r2, r2, #1
 80083ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2220      	movs	r2, #32
 80083b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	e000      	b.n	80083c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80083c4:	2302      	movs	r3, #2
  }
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
	...

080083d4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80083dc:	4b19      	ldr	r3, [pc, #100]	@ (8008444 <HAL_PWREx_ConfigSupply+0x70>)
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	f003 0304 	and.w	r3, r3, #4
 80083e4:	2b04      	cmp	r3, #4
 80083e6:	d00a      	beq.n	80083fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80083e8:	4b16      	ldr	r3, [pc, #88]	@ (8008444 <HAL_PWREx_ConfigSupply+0x70>)
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	f003 0307 	and.w	r3, r3, #7
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d001      	beq.n	80083fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e01f      	b.n	800843a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	e01d      	b.n	800843a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80083fe:	4b11      	ldr	r3, [pc, #68]	@ (8008444 <HAL_PWREx_ConfigSupply+0x70>)
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	f023 0207 	bic.w	r2, r3, #7
 8008406:	490f      	ldr	r1, [pc, #60]	@ (8008444 <HAL_PWREx_ConfigSupply+0x70>)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4313      	orrs	r3, r2
 800840c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800840e:	f7fa fa5f 	bl	80028d0 <HAL_GetTick>
 8008412:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008414:	e009      	b.n	800842a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008416:	f7fa fa5b 	bl	80028d0 <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008424:	d901      	bls.n	800842a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e007      	b.n	800843a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800842a:	4b06      	ldr	r3, [pc, #24]	@ (8008444 <HAL_PWREx_ConfigSupply+0x70>)
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008436:	d1ee      	bne.n	8008416 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	58024800 	.word	0x58024800

08008448 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08c      	sub	sp, #48	@ 0x30
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d101      	bne.n	800845a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e3c8      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 8087 	beq.w	8008576 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008468:	4b88      	ldr	r3, [pc, #544]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008470:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008472:	4b86      	ldr	r3, [pc, #536]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 8008474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008476:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800847a:	2b10      	cmp	r3, #16
 800847c:	d007      	beq.n	800848e <HAL_RCC_OscConfig+0x46>
 800847e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008480:	2b18      	cmp	r3, #24
 8008482:	d110      	bne.n	80084a6 <HAL_RCC_OscConfig+0x5e>
 8008484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008486:	f003 0303 	and.w	r3, r3, #3
 800848a:	2b02      	cmp	r3, #2
 800848c:	d10b      	bne.n	80084a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800848e:	4b7f      	ldr	r3, [pc, #508]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d06c      	beq.n	8008574 <HAL_RCC_OscConfig+0x12c>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d168      	bne.n	8008574 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e3a2      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084ae:	d106      	bne.n	80084be <HAL_RCC_OscConfig+0x76>
 80084b0:	4b76      	ldr	r3, [pc, #472]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a75      	ldr	r2, [pc, #468]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 80084b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084ba:	6013      	str	r3, [r2, #0]
 80084bc:	e02e      	b.n	800851c <HAL_RCC_OscConfig+0xd4>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10c      	bne.n	80084e0 <HAL_RCC_OscConfig+0x98>
 80084c6:	4b71      	ldr	r3, [pc, #452]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a70      	ldr	r2, [pc, #448]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 80084cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084d0:	6013      	str	r3, [r2, #0]
 80084d2:	4b6e      	ldr	r3, [pc, #440]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a6d      	ldr	r2, [pc, #436]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 80084d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084dc:	6013      	str	r3, [r2, #0]
 80084de:	e01d      	b.n	800851c <HAL_RCC_OscConfig+0xd4>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80084e8:	d10c      	bne.n	8008504 <HAL_RCC_OscConfig+0xbc>
 80084ea:	4b68      	ldr	r3, [pc, #416]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a67      	ldr	r2, [pc, #412]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 80084f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80084f4:	6013      	str	r3, [r2, #0]
 80084f6:	4b65      	ldr	r3, [pc, #404]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a64      	ldr	r2, [pc, #400]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 80084fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008500:	6013      	str	r3, [r2, #0]
 8008502:	e00b      	b.n	800851c <HAL_RCC_OscConfig+0xd4>
 8008504:	4b61      	ldr	r3, [pc, #388]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a60      	ldr	r2, [pc, #384]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 800850a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800850e:	6013      	str	r3, [r2, #0]
 8008510:	4b5e      	ldr	r3, [pc, #376]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a5d      	ldr	r2, [pc, #372]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 8008516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800851a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d013      	beq.n	800854c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008524:	f7fa f9d4 	bl	80028d0 <HAL_GetTick>
 8008528:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800852a:	e008      	b.n	800853e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800852c:	f7fa f9d0 	bl	80028d0 <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	2b64      	cmp	r3, #100	@ 0x64
 8008538:	d901      	bls.n	800853e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e356      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800853e:	4b53      	ldr	r3, [pc, #332]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0f0      	beq.n	800852c <HAL_RCC_OscConfig+0xe4>
 800854a:	e014      	b.n	8008576 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800854c:	f7fa f9c0 	bl	80028d0 <HAL_GetTick>
 8008550:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008552:	e008      	b.n	8008566 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008554:	f7fa f9bc 	bl	80028d0 <HAL_GetTick>
 8008558:	4602      	mov	r2, r0
 800855a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	2b64      	cmp	r3, #100	@ 0x64
 8008560:	d901      	bls.n	8008566 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e342      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008566:	4b49      	ldr	r3, [pc, #292]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1f0      	bne.n	8008554 <HAL_RCC_OscConfig+0x10c>
 8008572:	e000      	b.n	8008576 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0302 	and.w	r3, r3, #2
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 808c 	beq.w	800869c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008584:	4b41      	ldr	r3, [pc, #260]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800858c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800858e:	4b3f      	ldr	r3, [pc, #252]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 8008590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008592:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d007      	beq.n	80085aa <HAL_RCC_OscConfig+0x162>
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	2b18      	cmp	r3, #24
 800859e:	d137      	bne.n	8008610 <HAL_RCC_OscConfig+0x1c8>
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	f003 0303 	and.w	r3, r3, #3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d132      	bne.n	8008610 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085aa:	4b38      	ldr	r3, [pc, #224]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0304 	and.w	r3, r3, #4
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d005      	beq.n	80085c2 <HAL_RCC_OscConfig+0x17a>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e314      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80085c2:	4b32      	ldr	r3, [pc, #200]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f023 0219 	bic.w	r2, r3, #25
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	492f      	ldr	r1, [pc, #188]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 80085d0:	4313      	orrs	r3, r2
 80085d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085d4:	f7fa f97c 	bl	80028d0 <HAL_GetTick>
 80085d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085da:	e008      	b.n	80085ee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085dc:	f7fa f978 	bl	80028d0 <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d901      	bls.n	80085ee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e2fe      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085ee:	4b27      	ldr	r3, [pc, #156]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0304 	and.w	r3, r3, #4
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d0f0      	beq.n	80085dc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085fa:	4b24      	ldr	r3, [pc, #144]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	061b      	lsls	r3, r3, #24
 8008608:	4920      	ldr	r1, [pc, #128]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 800860a:	4313      	orrs	r3, r2
 800860c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800860e:	e045      	b.n	800869c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d026      	beq.n	8008666 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008618:	4b1c      	ldr	r3, [pc, #112]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f023 0219 	bic.w	r2, r3, #25
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	4919      	ldr	r1, [pc, #100]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 8008626:	4313      	orrs	r3, r2
 8008628:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800862a:	f7fa f951 	bl	80028d0 <HAL_GetTick>
 800862e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008630:	e008      	b.n	8008644 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008632:	f7fa f94d 	bl	80028d0 <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	2b02      	cmp	r3, #2
 800863e:	d901      	bls.n	8008644 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008640:	2303      	movs	r3, #3
 8008642:	e2d3      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008644:	4b11      	ldr	r3, [pc, #68]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0304 	and.w	r3, r3, #4
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0f0      	beq.n	8008632 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008650:	4b0e      	ldr	r3, [pc, #56]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	061b      	lsls	r3, r3, #24
 800865e:	490b      	ldr	r1, [pc, #44]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 8008660:	4313      	orrs	r3, r2
 8008662:	604b      	str	r3, [r1, #4]
 8008664:	e01a      	b.n	800869c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008666:	4b09      	ldr	r3, [pc, #36]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a08      	ldr	r2, [pc, #32]	@ (800868c <HAL_RCC_OscConfig+0x244>)
 800866c:	f023 0301 	bic.w	r3, r3, #1
 8008670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008672:	f7fa f92d 	bl	80028d0 <HAL_GetTick>
 8008676:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008678:	e00a      	b.n	8008690 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800867a:	f7fa f929 	bl	80028d0 <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	2b02      	cmp	r3, #2
 8008686:	d903      	bls.n	8008690 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e2af      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
 800868c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008690:	4b96      	ldr	r3, [pc, #600]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0304 	and.w	r3, r3, #4
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1ee      	bne.n	800867a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 0310 	and.w	r3, r3, #16
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d06a      	beq.n	800877e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086a8:	4b90      	ldr	r3, [pc, #576]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086b0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086b2:	4b8e      	ldr	r3, [pc, #568]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 80086b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	2b08      	cmp	r3, #8
 80086bc:	d007      	beq.n	80086ce <HAL_RCC_OscConfig+0x286>
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	2b18      	cmp	r3, #24
 80086c2:	d11b      	bne.n	80086fc <HAL_RCC_OscConfig+0x2b4>
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	f003 0303 	and.w	r3, r3, #3
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d116      	bne.n	80086fc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086ce:	4b87      	ldr	r3, [pc, #540]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d005      	beq.n	80086e6 <HAL_RCC_OscConfig+0x29e>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	69db      	ldr	r3, [r3, #28]
 80086de:	2b80      	cmp	r3, #128	@ 0x80
 80086e0:	d001      	beq.n	80086e6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e282      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086e6:	4b81      	ldr	r3, [pc, #516]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	061b      	lsls	r3, r3, #24
 80086f4:	497d      	ldr	r1, [pc, #500]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086fa:	e040      	b.n	800877e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	69db      	ldr	r3, [r3, #28]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d023      	beq.n	800874c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008704:	4b79      	ldr	r3, [pc, #484]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a78      	ldr	r2, [pc, #480]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 800870a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800870e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008710:	f7fa f8de 	bl	80028d0 <HAL_GetTick>
 8008714:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008716:	e008      	b.n	800872a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008718:	f7fa f8da 	bl	80028d0 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b02      	cmp	r3, #2
 8008724:	d901      	bls.n	800872a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e260      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800872a:	4b70      	ldr	r3, [pc, #448]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0f0      	beq.n	8008718 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008736:	4b6d      	ldr	r3, [pc, #436]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	061b      	lsls	r3, r3, #24
 8008744:	4969      	ldr	r1, [pc, #420]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 8008746:	4313      	orrs	r3, r2
 8008748:	60cb      	str	r3, [r1, #12]
 800874a:	e018      	b.n	800877e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800874c:	4b67      	ldr	r3, [pc, #412]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a66      	ldr	r2, [pc, #408]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 8008752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008758:	f7fa f8ba 	bl	80028d0 <HAL_GetTick>
 800875c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800875e:	e008      	b.n	8008772 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008760:	f7fa f8b6 	bl	80028d0 <HAL_GetTick>
 8008764:	4602      	mov	r2, r0
 8008766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	2b02      	cmp	r3, #2
 800876c:	d901      	bls.n	8008772 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	e23c      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008772:	4b5e      	ldr	r3, [pc, #376]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1f0      	bne.n	8008760 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0308 	and.w	r3, r3, #8
 8008786:	2b00      	cmp	r3, #0
 8008788:	d036      	beq.n	80087f8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d019      	beq.n	80087c6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008792:	4b56      	ldr	r3, [pc, #344]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 8008794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008796:	4a55      	ldr	r2, [pc, #340]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 8008798:	f043 0301 	orr.w	r3, r3, #1
 800879c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800879e:	f7fa f897 	bl	80028d0 <HAL_GetTick>
 80087a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087a4:	e008      	b.n	80087b8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087a6:	f7fa f893 	bl	80028d0 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d901      	bls.n	80087b8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e219      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087b8:	4b4c      	ldr	r3, [pc, #304]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 80087ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087bc:	f003 0302 	and.w	r3, r3, #2
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0f0      	beq.n	80087a6 <HAL_RCC_OscConfig+0x35e>
 80087c4:	e018      	b.n	80087f8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087c6:	4b49      	ldr	r3, [pc, #292]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 80087c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ca:	4a48      	ldr	r2, [pc, #288]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 80087cc:	f023 0301 	bic.w	r3, r3, #1
 80087d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087d2:	f7fa f87d 	bl	80028d0 <HAL_GetTick>
 80087d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087d8:	e008      	b.n	80087ec <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087da:	f7fa f879 	bl	80028d0 <HAL_GetTick>
 80087de:	4602      	mov	r2, r0
 80087e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d901      	bls.n	80087ec <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e1ff      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087ec:	4b3f      	ldr	r3, [pc, #252]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 80087ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1f0      	bne.n	80087da <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0320 	and.w	r3, r3, #32
 8008800:	2b00      	cmp	r3, #0
 8008802:	d036      	beq.n	8008872 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d019      	beq.n	8008840 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800880c:	4b37      	ldr	r3, [pc, #220]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a36      	ldr	r2, [pc, #216]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 8008812:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008816:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008818:	f7fa f85a 	bl	80028d0 <HAL_GetTick>
 800881c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800881e:	e008      	b.n	8008832 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008820:	f7fa f856 	bl	80028d0 <HAL_GetTick>
 8008824:	4602      	mov	r2, r0
 8008826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	2b02      	cmp	r3, #2
 800882c:	d901      	bls.n	8008832 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e1dc      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008832:	4b2e      	ldr	r3, [pc, #184]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0f0      	beq.n	8008820 <HAL_RCC_OscConfig+0x3d8>
 800883e:	e018      	b.n	8008872 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008840:	4b2a      	ldr	r3, [pc, #168]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a29      	ldr	r2, [pc, #164]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 8008846:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800884a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800884c:	f7fa f840 	bl	80028d0 <HAL_GetTick>
 8008850:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008852:	e008      	b.n	8008866 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008854:	f7fa f83c 	bl	80028d0 <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	2b02      	cmp	r3, #2
 8008860:	d901      	bls.n	8008866 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e1c2      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008866:	4b21      	ldr	r3, [pc, #132]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1f0      	bne.n	8008854 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0304 	and.w	r3, r3, #4
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 8086 	beq.w	800898c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008880:	4b1b      	ldr	r3, [pc, #108]	@ (80088f0 <HAL_RCC_OscConfig+0x4a8>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a1a      	ldr	r2, [pc, #104]	@ (80088f0 <HAL_RCC_OscConfig+0x4a8>)
 8008886:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800888a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800888c:	f7fa f820 	bl	80028d0 <HAL_GetTick>
 8008890:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008892:	e008      	b.n	80088a6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008894:	f7fa f81c 	bl	80028d0 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b64      	cmp	r3, #100	@ 0x64
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e1a2      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088a6:	4b12      	ldr	r3, [pc, #72]	@ (80088f0 <HAL_RCC_OscConfig+0x4a8>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0f0      	beq.n	8008894 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d106      	bne.n	80088c8 <HAL_RCC_OscConfig+0x480>
 80088ba:	4b0c      	ldr	r3, [pc, #48]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 80088bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088be:	4a0b      	ldr	r2, [pc, #44]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 80088c0:	f043 0301 	orr.w	r3, r3, #1
 80088c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80088c6:	e032      	b.n	800892e <HAL_RCC_OscConfig+0x4e6>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d111      	bne.n	80088f4 <HAL_RCC_OscConfig+0x4ac>
 80088d0:	4b06      	ldr	r3, [pc, #24]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 80088d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088d4:	4a05      	ldr	r2, [pc, #20]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 80088d6:	f023 0301 	bic.w	r3, r3, #1
 80088da:	6713      	str	r3, [r2, #112]	@ 0x70
 80088dc:	4b03      	ldr	r3, [pc, #12]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 80088de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088e0:	4a02      	ldr	r2, [pc, #8]	@ (80088ec <HAL_RCC_OscConfig+0x4a4>)
 80088e2:	f023 0304 	bic.w	r3, r3, #4
 80088e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80088e8:	e021      	b.n	800892e <HAL_RCC_OscConfig+0x4e6>
 80088ea:	bf00      	nop
 80088ec:	58024400 	.word	0x58024400
 80088f0:	58024800 	.word	0x58024800
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	2b05      	cmp	r3, #5
 80088fa:	d10c      	bne.n	8008916 <HAL_RCC_OscConfig+0x4ce>
 80088fc:	4b83      	ldr	r3, [pc, #524]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 80088fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008900:	4a82      	ldr	r2, [pc, #520]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008902:	f043 0304 	orr.w	r3, r3, #4
 8008906:	6713      	str	r3, [r2, #112]	@ 0x70
 8008908:	4b80      	ldr	r3, [pc, #512]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 800890a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800890c:	4a7f      	ldr	r2, [pc, #508]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 800890e:	f043 0301 	orr.w	r3, r3, #1
 8008912:	6713      	str	r3, [r2, #112]	@ 0x70
 8008914:	e00b      	b.n	800892e <HAL_RCC_OscConfig+0x4e6>
 8008916:	4b7d      	ldr	r3, [pc, #500]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800891a:	4a7c      	ldr	r2, [pc, #496]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 800891c:	f023 0301 	bic.w	r3, r3, #1
 8008920:	6713      	str	r3, [r2, #112]	@ 0x70
 8008922:	4b7a      	ldr	r3, [pc, #488]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008926:	4a79      	ldr	r2, [pc, #484]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008928:	f023 0304 	bic.w	r3, r3, #4
 800892c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d015      	beq.n	8008962 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008936:	f7f9 ffcb 	bl	80028d0 <HAL_GetTick>
 800893a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800893c:	e00a      	b.n	8008954 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800893e:	f7f9 ffc7 	bl	80028d0 <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800894c:	4293      	cmp	r3, r2
 800894e:	d901      	bls.n	8008954 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e14b      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008954:	4b6d      	ldr	r3, [pc, #436]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d0ee      	beq.n	800893e <HAL_RCC_OscConfig+0x4f6>
 8008960:	e014      	b.n	800898c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008962:	f7f9 ffb5 	bl	80028d0 <HAL_GetTick>
 8008966:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008968:	e00a      	b.n	8008980 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800896a:	f7f9 ffb1 	bl	80028d0 <HAL_GetTick>
 800896e:	4602      	mov	r2, r0
 8008970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008978:	4293      	cmp	r3, r2
 800897a:	d901      	bls.n	8008980 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800897c:	2303      	movs	r3, #3
 800897e:	e135      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008980:	4b62      	ldr	r3, [pc, #392]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008984:	f003 0302 	and.w	r3, r3, #2
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1ee      	bne.n	800896a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 812a 	beq.w	8008bea <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008996:	4b5d      	ldr	r3, [pc, #372]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800899e:	2b18      	cmp	r3, #24
 80089a0:	f000 80ba 	beq.w	8008b18 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	f040 8095 	bne.w	8008ad8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089ae:	4b57      	ldr	r3, [pc, #348]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a56      	ldr	r2, [pc, #344]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 80089b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ba:	f7f9 ff89 	bl	80028d0 <HAL_GetTick>
 80089be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089c0:	e008      	b.n	80089d4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089c2:	f7f9 ff85 	bl	80028d0 <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d901      	bls.n	80089d4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e10b      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089d4:	4b4d      	ldr	r3, [pc, #308]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1f0      	bne.n	80089c2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089e0:	4b4a      	ldr	r3, [pc, #296]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 80089e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089e4:	4b4a      	ldr	r3, [pc, #296]	@ (8008b10 <HAL_RCC_OscConfig+0x6c8>)
 80089e6:	4013      	ands	r3, r2
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80089f0:	0112      	lsls	r2, r2, #4
 80089f2:	430a      	orrs	r2, r1
 80089f4:	4945      	ldr	r1, [pc, #276]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 80089f6:	4313      	orrs	r3, r2
 80089f8:	628b      	str	r3, [r1, #40]	@ 0x28
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089fe:	3b01      	subs	r3, #1
 8008a00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	025b      	lsls	r3, r3, #9
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a14:	3b01      	subs	r3, #1
 8008a16:	041b      	lsls	r3, r3, #16
 8008a18:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a1c:	431a      	orrs	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a22:	3b01      	subs	r3, #1
 8008a24:	061b      	lsls	r3, r3, #24
 8008a26:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a2a:	4938      	ldr	r1, [pc, #224]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008a30:	4b36      	ldr	r3, [pc, #216]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a34:	4a35      	ldr	r2, [pc, #212]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008a36:	f023 0301 	bic.w	r3, r3, #1
 8008a3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a3c:	4b33      	ldr	r3, [pc, #204]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008a3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a40:	4b34      	ldr	r3, [pc, #208]	@ (8008b14 <HAL_RCC_OscConfig+0x6cc>)
 8008a42:	4013      	ands	r3, r2
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008a48:	00d2      	lsls	r2, r2, #3
 8008a4a:	4930      	ldr	r1, [pc, #192]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008a50:	4b2e      	ldr	r3, [pc, #184]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a54:	f023 020c 	bic.w	r2, r3, #12
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a5c:	492b      	ldr	r1, [pc, #172]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008a62:	4b2a      	ldr	r3, [pc, #168]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a66:	f023 0202 	bic.w	r2, r3, #2
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a6e:	4927      	ldr	r1, [pc, #156]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008a70:	4313      	orrs	r3, r2
 8008a72:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a74:	4b25      	ldr	r3, [pc, #148]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a78:	4a24      	ldr	r2, [pc, #144]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008a7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a80:	4b22      	ldr	r3, [pc, #136]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a84:	4a21      	ldr	r2, [pc, #132]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a90:	4a1e      	ldr	r2, [pc, #120]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008a92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008a98:	4b1c      	ldr	r3, [pc, #112]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008a9e:	f043 0301 	orr.w	r3, r3, #1
 8008aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008aa4:	4b19      	ldr	r3, [pc, #100]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a18      	ldr	r2, [pc, #96]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008aaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ab0:	f7f9 ff0e 	bl	80028d0 <HAL_GetTick>
 8008ab4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ab6:	e008      	b.n	8008aca <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ab8:	f7f9 ff0a 	bl	80028d0 <HAL_GetTick>
 8008abc:	4602      	mov	r2, r0
 8008abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d901      	bls.n	8008aca <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e090      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008aca:	4b10      	ldr	r3, [pc, #64]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d0f0      	beq.n	8008ab8 <HAL_RCC_OscConfig+0x670>
 8008ad6:	e088      	b.n	8008bea <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a0b      	ldr	r2, [pc, #44]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008ade:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae4:	f7f9 fef4 	bl	80028d0 <HAL_GetTick>
 8008ae8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008aea:	e008      	b.n	8008afe <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aec:	f7f9 fef0 	bl	80028d0 <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d901      	bls.n	8008afe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e076      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008afe:	4b03      	ldr	r3, [pc, #12]	@ (8008b0c <HAL_RCC_OscConfig+0x6c4>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1f0      	bne.n	8008aec <HAL_RCC_OscConfig+0x6a4>
 8008b0a:	e06e      	b.n	8008bea <HAL_RCC_OscConfig+0x7a2>
 8008b0c:	58024400 	.word	0x58024400
 8008b10:	fffffc0c 	.word	0xfffffc0c
 8008b14:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008b18:	4b36      	ldr	r3, [pc, #216]	@ (8008bf4 <HAL_RCC_OscConfig+0x7ac>)
 8008b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b1e:	4b35      	ldr	r3, [pc, #212]	@ (8008bf4 <HAL_RCC_OscConfig+0x7ac>)
 8008b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b22:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d031      	beq.n	8008b90 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f003 0203 	and.w	r2, r3, #3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d12a      	bne.n	8008b90 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	091b      	lsrs	r3, r3, #4
 8008b3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d122      	bne.n	8008b90 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b54:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d11a      	bne.n	8008b90 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	0a5b      	lsrs	r3, r3, #9
 8008b5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d111      	bne.n	8008b90 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	0c1b      	lsrs	r3, r3, #16
 8008b70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d108      	bne.n	8008b90 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	0e1b      	lsrs	r3, r3, #24
 8008b82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d001      	beq.n	8008b94 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e02b      	b.n	8008bec <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008b94:	4b17      	ldr	r3, [pc, #92]	@ (8008bf4 <HAL_RCC_OscConfig+0x7ac>)
 8008b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b98:	08db      	lsrs	r3, r3, #3
 8008b9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b9e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d01f      	beq.n	8008bea <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008baa:	4b12      	ldr	r3, [pc, #72]	@ (8008bf4 <HAL_RCC_OscConfig+0x7ac>)
 8008bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bae:	4a11      	ldr	r2, [pc, #68]	@ (8008bf4 <HAL_RCC_OscConfig+0x7ac>)
 8008bb0:	f023 0301 	bic.w	r3, r3, #1
 8008bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008bb6:	f7f9 fe8b 	bl	80028d0 <HAL_GetTick>
 8008bba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008bbc:	bf00      	nop
 8008bbe:	f7f9 fe87 	bl	80028d0 <HAL_GetTick>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d0f9      	beq.n	8008bbe <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008bca:	4b0a      	ldr	r3, [pc, #40]	@ (8008bf4 <HAL_RCC_OscConfig+0x7ac>)
 8008bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bce:	4b0a      	ldr	r3, [pc, #40]	@ (8008bf8 <HAL_RCC_OscConfig+0x7b0>)
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008bd6:	00d2      	lsls	r2, r2, #3
 8008bd8:	4906      	ldr	r1, [pc, #24]	@ (8008bf4 <HAL_RCC_OscConfig+0x7ac>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008bde:	4b05      	ldr	r3, [pc, #20]	@ (8008bf4 <HAL_RCC_OscConfig+0x7ac>)
 8008be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be2:	4a04      	ldr	r2, [pc, #16]	@ (8008bf4 <HAL_RCC_OscConfig+0x7ac>)
 8008be4:	f043 0301 	orr.w	r3, r3, #1
 8008be8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3730      	adds	r7, #48	@ 0x30
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	58024400 	.word	0x58024400
 8008bf8:	ffff0007 	.word	0xffff0007

08008bfc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d101      	bne.n	8008c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e19c      	b.n	8008f4a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c10:	4b8a      	ldr	r3, [pc, #552]	@ (8008e3c <HAL_RCC_ClockConfig+0x240>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 030f 	and.w	r3, r3, #15
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d910      	bls.n	8008c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c1e:	4b87      	ldr	r3, [pc, #540]	@ (8008e3c <HAL_RCC_ClockConfig+0x240>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f023 020f 	bic.w	r2, r3, #15
 8008c26:	4985      	ldr	r1, [pc, #532]	@ (8008e3c <HAL_RCC_ClockConfig+0x240>)
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c2e:	4b83      	ldr	r3, [pc, #524]	@ (8008e3c <HAL_RCC_ClockConfig+0x240>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 030f 	and.w	r3, r3, #15
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d001      	beq.n	8008c40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e184      	b.n	8008f4a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0304 	and.w	r3, r3, #4
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d010      	beq.n	8008c6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	691a      	ldr	r2, [r3, #16]
 8008c50:	4b7b      	ldr	r3, [pc, #492]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d908      	bls.n	8008c6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c5c:	4b78      	ldr	r3, [pc, #480]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	4975      	ldr	r1, [pc, #468]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0308 	and.w	r3, r3, #8
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d010      	beq.n	8008c9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	695a      	ldr	r2, [r3, #20]
 8008c7e:	4b70      	ldr	r3, [pc, #448]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008c80:	69db      	ldr	r3, [r3, #28]
 8008c82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d908      	bls.n	8008c9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c8a:	4b6d      	ldr	r3, [pc, #436]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	496a      	ldr	r1, [pc, #424]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0310 	and.w	r3, r3, #16
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d010      	beq.n	8008cca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	699a      	ldr	r2, [r3, #24]
 8008cac:	4b64      	ldr	r3, [pc, #400]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d908      	bls.n	8008cca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008cb8:	4b61      	ldr	r3, [pc, #388]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008cba:	69db      	ldr	r3, [r3, #28]
 8008cbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	495e      	ldr	r1, [pc, #376]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0320 	and.w	r3, r3, #32
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d010      	beq.n	8008cf8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	69da      	ldr	r2, [r3, #28]
 8008cda:	4b59      	ldr	r3, [pc, #356]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d908      	bls.n	8008cf8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008ce6:	4b56      	ldr	r3, [pc, #344]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	4953      	ldr	r1, [pc, #332]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0302 	and.w	r3, r3, #2
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d010      	beq.n	8008d26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	68da      	ldr	r2, [r3, #12]
 8008d08:	4b4d      	ldr	r3, [pc, #308]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	f003 030f 	and.w	r3, r3, #15
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d908      	bls.n	8008d26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d14:	4b4a      	ldr	r3, [pc, #296]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	f023 020f 	bic.w	r2, r3, #15
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	4947      	ldr	r1, [pc, #284]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d055      	beq.n	8008dde <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d32:	4b43      	ldr	r3, [pc, #268]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	4940      	ldr	r1, [pc, #256]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d40:	4313      	orrs	r3, r2
 8008d42:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d107      	bne.n	8008d5c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d4c:	4b3c      	ldr	r3, [pc, #240]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d121      	bne.n	8008d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e0f6      	b.n	8008f4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d107      	bne.n	8008d74 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d64:	4b36      	ldr	r3, [pc, #216]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d115      	bne.n	8008d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e0ea      	b.n	8008f4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d107      	bne.n	8008d8c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d7c:	4b30      	ldr	r3, [pc, #192]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d109      	bne.n	8008d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e0de      	b.n	8008f4a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d8c:	4b2c      	ldr	r3, [pc, #176]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0304 	and.w	r3, r3, #4
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e0d6      	b.n	8008f4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d9c:	4b28      	ldr	r3, [pc, #160]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	f023 0207 	bic.w	r2, r3, #7
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	4925      	ldr	r1, [pc, #148]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dae:	f7f9 fd8f 	bl	80028d0 <HAL_GetTick>
 8008db2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008db4:	e00a      	b.n	8008dcc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008db6:	f7f9 fd8b 	bl	80028d0 <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d901      	bls.n	8008dcc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e0be      	b.n	8008f4a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	00db      	lsls	r3, r3, #3
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d1eb      	bne.n	8008db6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0302 	and.w	r3, r3, #2
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d010      	beq.n	8008e0c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68da      	ldr	r2, [r3, #12]
 8008dee:	4b14      	ldr	r3, [pc, #80]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	f003 030f 	and.w	r3, r3, #15
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d208      	bcs.n	8008e0c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dfa:	4b11      	ldr	r3, [pc, #68]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	f023 020f 	bic.w	r2, r3, #15
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	490e      	ldr	r1, [pc, #56]	@ (8008e40 <HAL_RCC_ClockConfig+0x244>)
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e3c <HAL_RCC_ClockConfig+0x240>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 030f 	and.w	r3, r3, #15
 8008e14:	683a      	ldr	r2, [r7, #0]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d214      	bcs.n	8008e44 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e1a:	4b08      	ldr	r3, [pc, #32]	@ (8008e3c <HAL_RCC_ClockConfig+0x240>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f023 020f 	bic.w	r2, r3, #15
 8008e22:	4906      	ldr	r1, [pc, #24]	@ (8008e3c <HAL_RCC_ClockConfig+0x240>)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e2a:	4b04      	ldr	r3, [pc, #16]	@ (8008e3c <HAL_RCC_ClockConfig+0x240>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 030f 	and.w	r3, r3, #15
 8008e32:	683a      	ldr	r2, [r7, #0]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d005      	beq.n	8008e44 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e086      	b.n	8008f4a <HAL_RCC_ClockConfig+0x34e>
 8008e3c:	52002000 	.word	0x52002000
 8008e40:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 0304 	and.w	r3, r3, #4
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d010      	beq.n	8008e72 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	691a      	ldr	r2, [r3, #16]
 8008e54:	4b3f      	ldr	r3, [pc, #252]	@ (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d208      	bcs.n	8008e72 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e60:	4b3c      	ldr	r3, [pc, #240]	@ (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	4939      	ldr	r1, [pc, #228]	@ (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 0308 	and.w	r3, r3, #8
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d010      	beq.n	8008ea0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	695a      	ldr	r2, [r3, #20]
 8008e82:	4b34      	ldr	r3, [pc, #208]	@ (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008e84:	69db      	ldr	r3, [r3, #28]
 8008e86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d208      	bcs.n	8008ea0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e8e:	4b31      	ldr	r3, [pc, #196]	@ (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008e90:	69db      	ldr	r3, [r3, #28]
 8008e92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	492e      	ldr	r1, [pc, #184]	@ (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0310 	and.w	r3, r3, #16
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d010      	beq.n	8008ece <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	699a      	ldr	r2, [r3, #24]
 8008eb0:	4b28      	ldr	r3, [pc, #160]	@ (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d208      	bcs.n	8008ece <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ebc:	4b25      	ldr	r3, [pc, #148]	@ (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008ebe:	69db      	ldr	r3, [r3, #28]
 8008ec0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	4922      	ldr	r1, [pc, #136]	@ (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 0320 	and.w	r3, r3, #32
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d010      	beq.n	8008efc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	69da      	ldr	r2, [r3, #28]
 8008ede:	4b1d      	ldr	r3, [pc, #116]	@ (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d208      	bcs.n	8008efc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008eea:	4b1a      	ldr	r3, [pc, #104]	@ (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	69db      	ldr	r3, [r3, #28]
 8008ef6:	4917      	ldr	r1, [pc, #92]	@ (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008efc:	f000 f834 	bl	8008f68 <HAL_RCC_GetSysClockFreq>
 8008f00:	4602      	mov	r2, r0
 8008f02:	4b14      	ldr	r3, [pc, #80]	@ (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	0a1b      	lsrs	r3, r3, #8
 8008f08:	f003 030f 	and.w	r3, r3, #15
 8008f0c:	4912      	ldr	r1, [pc, #72]	@ (8008f58 <HAL_RCC_ClockConfig+0x35c>)
 8008f0e:	5ccb      	ldrb	r3, [r1, r3]
 8008f10:	f003 031f 	and.w	r3, r3, #31
 8008f14:	fa22 f303 	lsr.w	r3, r2, r3
 8008f18:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8008f54 <HAL_RCC_ClockConfig+0x358>)
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	f003 030f 	and.w	r3, r3, #15
 8008f22:	4a0d      	ldr	r2, [pc, #52]	@ (8008f58 <HAL_RCC_ClockConfig+0x35c>)
 8008f24:	5cd3      	ldrb	r3, [r2, r3]
 8008f26:	f003 031f 	and.w	r3, r3, #31
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f30:	4a0a      	ldr	r2, [pc, #40]	@ (8008f5c <HAL_RCC_ClockConfig+0x360>)
 8008f32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f34:	4a0a      	ldr	r2, [pc, #40]	@ (8008f60 <HAL_RCC_ClockConfig+0x364>)
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008f64 <HAL_RCC_ClockConfig+0x368>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7f9 fc7c 	bl	800283c <HAL_InitTick>
 8008f44:	4603      	mov	r3, r0
 8008f46:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	58024400 	.word	0x58024400
 8008f58:	080103b8 	.word	0x080103b8
 8008f5c:	240001b8 	.word	0x240001b8
 8008f60:	240001b4 	.word	0x240001b4
 8008f64:	240001bc 	.word	0x240001bc

08008f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b089      	sub	sp, #36	@ 0x24
 8008f6c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f6e:	4bb3      	ldr	r3, [pc, #716]	@ (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f76:	2b18      	cmp	r3, #24
 8008f78:	f200 8155 	bhi.w	8009226 <HAL_RCC_GetSysClockFreq+0x2be>
 8008f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f84 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f82:	bf00      	nop
 8008f84:	08008fe9 	.word	0x08008fe9
 8008f88:	08009227 	.word	0x08009227
 8008f8c:	08009227 	.word	0x08009227
 8008f90:	08009227 	.word	0x08009227
 8008f94:	08009227 	.word	0x08009227
 8008f98:	08009227 	.word	0x08009227
 8008f9c:	08009227 	.word	0x08009227
 8008fa0:	08009227 	.word	0x08009227
 8008fa4:	0800900f 	.word	0x0800900f
 8008fa8:	08009227 	.word	0x08009227
 8008fac:	08009227 	.word	0x08009227
 8008fb0:	08009227 	.word	0x08009227
 8008fb4:	08009227 	.word	0x08009227
 8008fb8:	08009227 	.word	0x08009227
 8008fbc:	08009227 	.word	0x08009227
 8008fc0:	08009227 	.word	0x08009227
 8008fc4:	08009015 	.word	0x08009015
 8008fc8:	08009227 	.word	0x08009227
 8008fcc:	08009227 	.word	0x08009227
 8008fd0:	08009227 	.word	0x08009227
 8008fd4:	08009227 	.word	0x08009227
 8008fd8:	08009227 	.word	0x08009227
 8008fdc:	08009227 	.word	0x08009227
 8008fe0:	08009227 	.word	0x08009227
 8008fe4:	0800901b 	.word	0x0800901b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fe8:	4b94      	ldr	r3, [pc, #592]	@ (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0320 	and.w	r3, r3, #32
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d009      	beq.n	8009008 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ff4:	4b91      	ldr	r3, [pc, #580]	@ (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	08db      	lsrs	r3, r3, #3
 8008ffa:	f003 0303 	and.w	r3, r3, #3
 8008ffe:	4a90      	ldr	r2, [pc, #576]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009000:	fa22 f303 	lsr.w	r3, r2, r3
 8009004:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009006:	e111      	b.n	800922c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009008:	4b8d      	ldr	r3, [pc, #564]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800900a:	61bb      	str	r3, [r7, #24]
      break;
 800900c:	e10e      	b.n	800922c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800900e:	4b8d      	ldr	r3, [pc, #564]	@ (8009244 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009010:	61bb      	str	r3, [r7, #24]
      break;
 8009012:	e10b      	b.n	800922c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009014:	4b8c      	ldr	r3, [pc, #560]	@ (8009248 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009016:	61bb      	str	r3, [r7, #24]
      break;
 8009018:	e108      	b.n	800922c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800901a:	4b88      	ldr	r3, [pc, #544]	@ (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800901c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901e:	f003 0303 	and.w	r3, r3, #3
 8009022:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009024:	4b85      	ldr	r3, [pc, #532]	@ (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009028:	091b      	lsrs	r3, r3, #4
 800902a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800902e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009030:	4b82      	ldr	r3, [pc, #520]	@ (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800903a:	4b80      	ldr	r3, [pc, #512]	@ (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800903c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800903e:	08db      	lsrs	r3, r3, #3
 8009040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	fb02 f303 	mul.w	r3, r2, r3
 800904a:	ee07 3a90 	vmov	s15, r3
 800904e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009052:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 80e1 	beq.w	8009220 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	2b02      	cmp	r3, #2
 8009062:	f000 8083 	beq.w	800916c <HAL_RCC_GetSysClockFreq+0x204>
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	2b02      	cmp	r3, #2
 800906a:	f200 80a1 	bhi.w	80091b0 <HAL_RCC_GetSysClockFreq+0x248>
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d003      	beq.n	800907c <HAL_RCC_GetSysClockFreq+0x114>
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d056      	beq.n	8009128 <HAL_RCC_GetSysClockFreq+0x1c0>
 800907a:	e099      	b.n	80091b0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800907c:	4b6f      	ldr	r3, [pc, #444]	@ (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0320 	and.w	r3, r3, #32
 8009084:	2b00      	cmp	r3, #0
 8009086:	d02d      	beq.n	80090e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009088:	4b6c      	ldr	r3, [pc, #432]	@ (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	08db      	lsrs	r3, r3, #3
 800908e:	f003 0303 	and.w	r3, r3, #3
 8009092:	4a6b      	ldr	r2, [pc, #428]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009094:	fa22 f303 	lsr.w	r3, r2, r3
 8009098:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	ee07 3a90 	vmov	s15, r3
 80090a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	ee07 3a90 	vmov	s15, r3
 80090aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090b2:	4b62      	ldr	r3, [pc, #392]	@ (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ba:	ee07 3a90 	vmov	s15, r3
 80090be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80090c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800924c <HAL_RCC_GetSysClockFreq+0x2e4>
 80090ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80090e2:	e087      	b.n	80091f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	ee07 3a90 	vmov	s15, r3
 80090ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009250 <HAL_RCC_GetSysClockFreq+0x2e8>
 80090f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090f6:	4b51      	ldr	r3, [pc, #324]	@ (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090fe:	ee07 3a90 	vmov	s15, r3
 8009102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009106:	ed97 6a02 	vldr	s12, [r7, #8]
 800910a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800924c <HAL_RCC_GetSysClockFreq+0x2e4>
 800910e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800911a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800911e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009122:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009126:	e065      	b.n	80091f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	ee07 3a90 	vmov	s15, r3
 800912e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009132:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009254 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800913a:	4b40      	ldr	r3, [pc, #256]	@ (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800913c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800913e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009142:	ee07 3a90 	vmov	s15, r3
 8009146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800914a:	ed97 6a02 	vldr	s12, [r7, #8]
 800914e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800924c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800915a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800915e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009166:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800916a:	e043      	b.n	80091f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	ee07 3a90 	vmov	s15, r3
 8009172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009176:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009258 <HAL_RCC_GetSysClockFreq+0x2f0>
 800917a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800917e:	4b2f      	ldr	r3, [pc, #188]	@ (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009186:	ee07 3a90 	vmov	s15, r3
 800918a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800918e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009192:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800924c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800919a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800919e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091ae:	e021      	b.n	80091f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	ee07 3a90 	vmov	s15, r3
 80091b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009254 <HAL_RCC_GetSysClockFreq+0x2ec>
 80091be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091c2:	4b1e      	ldr	r3, [pc, #120]	@ (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80091d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800924c <HAL_RCC_GetSysClockFreq+0x2e4>
 80091da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80091f4:	4b11      	ldr	r3, [pc, #68]	@ (800923c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091f8:	0a5b      	lsrs	r3, r3, #9
 80091fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091fe:	3301      	adds	r3, #1
 8009200:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	ee07 3a90 	vmov	s15, r3
 8009208:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800920c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009218:	ee17 3a90 	vmov	r3, s15
 800921c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800921e:	e005      	b.n	800922c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009220:	2300      	movs	r3, #0
 8009222:	61bb      	str	r3, [r7, #24]
      break;
 8009224:	e002      	b.n	800922c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009226:	4b07      	ldr	r3, [pc, #28]	@ (8009244 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009228:	61bb      	str	r3, [r7, #24]
      break;
 800922a:	bf00      	nop
  }

  return sysclockfreq;
 800922c:	69bb      	ldr	r3, [r7, #24]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3724      	adds	r7, #36	@ 0x24
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	58024400 	.word	0x58024400
 8009240:	03d09000 	.word	0x03d09000
 8009244:	003d0900 	.word	0x003d0900
 8009248:	007a1200 	.word	0x007a1200
 800924c:	46000000 	.word	0x46000000
 8009250:	4c742400 	.word	0x4c742400
 8009254:	4a742400 	.word	0x4a742400
 8009258:	4af42400 	.word	0x4af42400

0800925c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009262:	f7ff fe81 	bl	8008f68 <HAL_RCC_GetSysClockFreq>
 8009266:	4602      	mov	r2, r0
 8009268:	4b10      	ldr	r3, [pc, #64]	@ (80092ac <HAL_RCC_GetHCLKFreq+0x50>)
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	0a1b      	lsrs	r3, r3, #8
 800926e:	f003 030f 	and.w	r3, r3, #15
 8009272:	490f      	ldr	r1, [pc, #60]	@ (80092b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009274:	5ccb      	ldrb	r3, [r1, r3]
 8009276:	f003 031f 	and.w	r3, r3, #31
 800927a:	fa22 f303 	lsr.w	r3, r2, r3
 800927e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009280:	4b0a      	ldr	r3, [pc, #40]	@ (80092ac <HAL_RCC_GetHCLKFreq+0x50>)
 8009282:	699b      	ldr	r3, [r3, #24]
 8009284:	f003 030f 	and.w	r3, r3, #15
 8009288:	4a09      	ldr	r2, [pc, #36]	@ (80092b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800928a:	5cd3      	ldrb	r3, [r2, r3]
 800928c:	f003 031f 	and.w	r3, r3, #31
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	fa22 f303 	lsr.w	r3, r2, r3
 8009296:	4a07      	ldr	r2, [pc, #28]	@ (80092b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009298:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800929a:	4a07      	ldr	r2, [pc, #28]	@ (80092b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80092a0:	4b04      	ldr	r3, [pc, #16]	@ (80092b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80092a2:	681b      	ldr	r3, [r3, #0]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	58024400 	.word	0x58024400
 80092b0:	080103b8 	.word	0x080103b8
 80092b4:	240001b8 	.word	0x240001b8
 80092b8:	240001b4 	.word	0x240001b4

080092bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80092c0:	f7ff ffcc 	bl	800925c <HAL_RCC_GetHCLKFreq>
 80092c4:	4602      	mov	r2, r0
 80092c6:	4b06      	ldr	r3, [pc, #24]	@ (80092e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	091b      	lsrs	r3, r3, #4
 80092cc:	f003 0307 	and.w	r3, r3, #7
 80092d0:	4904      	ldr	r1, [pc, #16]	@ (80092e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80092d2:	5ccb      	ldrb	r3, [r1, r3]
 80092d4:	f003 031f 	and.w	r3, r3, #31
 80092d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80092dc:	4618      	mov	r0, r3
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	58024400 	.word	0x58024400
 80092e4:	080103b8 	.word	0x080103b8

080092e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092ec:	b0c6      	sub	sp, #280	@ 0x118
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092f4:	2300      	movs	r3, #0
 80092f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092fa:	2300      	movs	r3, #0
 80092fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009308:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800930c:	2500      	movs	r5, #0
 800930e:	ea54 0305 	orrs.w	r3, r4, r5
 8009312:	d049      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009318:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800931a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800931e:	d02f      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009320:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009324:	d828      	bhi.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009326:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800932a:	d01a      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800932c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009330:	d822      	bhi.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009332:	2b00      	cmp	r3, #0
 8009334:	d003      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800933a:	d007      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800933c:	e01c      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800933e:	4bab      	ldr	r3, [pc, #684]	@ (80095ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009342:	4aaa      	ldr	r2, [pc, #680]	@ (80095ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009348:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800934a:	e01a      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800934c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009350:	3308      	adds	r3, #8
 8009352:	2102      	movs	r1, #2
 8009354:	4618      	mov	r0, r3
 8009356:	f002 fa49 	bl	800b7ec <RCCEx_PLL2_Config>
 800935a:	4603      	mov	r3, r0
 800935c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009360:	e00f      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009366:	3328      	adds	r3, #40	@ 0x28
 8009368:	2102      	movs	r1, #2
 800936a:	4618      	mov	r0, r3
 800936c:	f002 faf0 	bl	800b950 <RCCEx_PLL3_Config>
 8009370:	4603      	mov	r3, r0
 8009372:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009376:	e004      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800937e:	e000      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009382:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009386:	2b00      	cmp	r3, #0
 8009388:	d10a      	bne.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800938a:	4b98      	ldr	r3, [pc, #608]	@ (80095ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800938c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800938e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009398:	4a94      	ldr	r2, [pc, #592]	@ (80095ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800939a:	430b      	orrs	r3, r1
 800939c:	6513      	str	r3, [r2, #80]	@ 0x50
 800939e:	e003      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80093a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80093b4:	f04f 0900 	mov.w	r9, #0
 80093b8:	ea58 0309 	orrs.w	r3, r8, r9
 80093bc:	d047      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80093be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093c4:	2b04      	cmp	r3, #4
 80093c6:	d82a      	bhi.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80093c8:	a201      	add	r2, pc, #4	@ (adr r2, 80093d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80093ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ce:	bf00      	nop
 80093d0:	080093e5 	.word	0x080093e5
 80093d4:	080093f3 	.word	0x080093f3
 80093d8:	08009409 	.word	0x08009409
 80093dc:	08009427 	.word	0x08009427
 80093e0:	08009427 	.word	0x08009427
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093e4:	4b81      	ldr	r3, [pc, #516]	@ (80095ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80093e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e8:	4a80      	ldr	r2, [pc, #512]	@ (80095ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80093ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093f0:	e01a      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093f6:	3308      	adds	r3, #8
 80093f8:	2100      	movs	r1, #0
 80093fa:	4618      	mov	r0, r3
 80093fc:	f002 f9f6 	bl	800b7ec <RCCEx_PLL2_Config>
 8009400:	4603      	mov	r3, r0
 8009402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009406:	e00f      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800940c:	3328      	adds	r3, #40	@ 0x28
 800940e:	2100      	movs	r1, #0
 8009410:	4618      	mov	r0, r3
 8009412:	f002 fa9d 	bl	800b950 <RCCEx_PLL3_Config>
 8009416:	4603      	mov	r3, r0
 8009418:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800941c:	e004      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009424:	e000      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009428:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10a      	bne.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009430:	4b6e      	ldr	r3, [pc, #440]	@ (80095ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009434:	f023 0107 	bic.w	r1, r3, #7
 8009438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800943c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800943e:	4a6b      	ldr	r2, [pc, #428]	@ (80095ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009440:	430b      	orrs	r3, r1
 8009442:	6513      	str	r3, [r2, #80]	@ 0x50
 8009444:	e003      	b.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009446:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800944a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800944e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009456:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800945a:	f04f 0b00 	mov.w	fp, #0
 800945e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009462:	d05b      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009468:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800946c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009470:	d03b      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009472:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009476:	d834      	bhi.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009478:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800947c:	d037      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 800947e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009482:	d82e      	bhi.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009484:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009488:	d033      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800948a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800948e:	d828      	bhi.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009490:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009494:	d01a      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009496:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800949a:	d822      	bhi.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800949c:	2b00      	cmp	r3, #0
 800949e:	d003      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80094a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094a4:	d007      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80094a6:	e01c      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094a8:	4b50      	ldr	r3, [pc, #320]	@ (80095ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80094aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ac:	4a4f      	ldr	r2, [pc, #316]	@ (80095ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80094ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094b4:	e01e      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ba:	3308      	adds	r3, #8
 80094bc:	2100      	movs	r1, #0
 80094be:	4618      	mov	r0, r3
 80094c0:	f002 f994 	bl	800b7ec <RCCEx_PLL2_Config>
 80094c4:	4603      	mov	r3, r0
 80094c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80094ca:	e013      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094d0:	3328      	adds	r3, #40	@ 0x28
 80094d2:	2100      	movs	r1, #0
 80094d4:	4618      	mov	r0, r3
 80094d6:	f002 fa3b 	bl	800b950 <RCCEx_PLL3_Config>
 80094da:	4603      	mov	r3, r0
 80094dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094e0:	e008      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80094e8:	e004      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80094ea:	bf00      	nop
 80094ec:	e002      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80094ee:	bf00      	nop
 80094f0:	e000      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80094f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10b      	bne.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80094fc:	4b3b      	ldr	r3, [pc, #236]	@ (80095ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80094fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009500:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009508:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800950c:	4a37      	ldr	r2, [pc, #220]	@ (80095ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800950e:	430b      	orrs	r3, r1
 8009510:	6593      	str	r3, [r2, #88]	@ 0x58
 8009512:	e003      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009514:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009518:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800951c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009524:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009528:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800952c:	2300      	movs	r3, #0
 800952e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009532:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009536:	460b      	mov	r3, r1
 8009538:	4313      	orrs	r3, r2
 800953a:	d05d      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800953c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009540:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009544:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009548:	d03b      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800954a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800954e:	d834      	bhi.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009550:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009554:	d037      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009556:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800955a:	d82e      	bhi.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800955c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009560:	d033      	beq.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009562:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009566:	d828      	bhi.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009568:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800956c:	d01a      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800956e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009572:	d822      	bhi.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009574:	2b00      	cmp	r3, #0
 8009576:	d003      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009578:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800957c:	d007      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800957e:	e01c      	b.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009580:	4b1a      	ldr	r3, [pc, #104]	@ (80095ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009584:	4a19      	ldr	r2, [pc, #100]	@ (80095ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800958a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800958c:	e01e      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800958e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009592:	3308      	adds	r3, #8
 8009594:	2100      	movs	r1, #0
 8009596:	4618      	mov	r0, r3
 8009598:	f002 f928 	bl	800b7ec <RCCEx_PLL2_Config>
 800959c:	4603      	mov	r3, r0
 800959e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80095a2:	e013      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095a8:	3328      	adds	r3, #40	@ 0x28
 80095aa:	2100      	movs	r1, #0
 80095ac:	4618      	mov	r0, r3
 80095ae:	f002 f9cf 	bl	800b950 <RCCEx_PLL3_Config>
 80095b2:	4603      	mov	r3, r0
 80095b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095b8:	e008      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80095c0:	e004      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80095c2:	bf00      	nop
 80095c4:	e002      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80095c6:	bf00      	nop
 80095c8:	e000      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80095ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10d      	bne.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80095d4:	4b05      	ldr	r3, [pc, #20]	@ (80095ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80095d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80095dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80095e4:	4a01      	ldr	r2, [pc, #4]	@ (80095ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80095e6:	430b      	orrs	r3, r1
 80095e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80095ea:	e005      	b.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80095ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80095f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009600:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009604:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009608:	2300      	movs	r3, #0
 800960a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800960e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009612:	460b      	mov	r3, r1
 8009614:	4313      	orrs	r3, r2
 8009616:	d03a      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800961c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800961e:	2b30      	cmp	r3, #48	@ 0x30
 8009620:	d01f      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009622:	2b30      	cmp	r3, #48	@ 0x30
 8009624:	d819      	bhi.n	800965a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009626:	2b20      	cmp	r3, #32
 8009628:	d00c      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800962a:	2b20      	cmp	r3, #32
 800962c:	d815      	bhi.n	800965a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800962e:	2b00      	cmp	r3, #0
 8009630:	d019      	beq.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009632:	2b10      	cmp	r3, #16
 8009634:	d111      	bne.n	800965a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009636:	4baa      	ldr	r3, [pc, #680]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800963a:	4aa9      	ldr	r2, [pc, #676]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800963c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009640:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009642:	e011      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009648:	3308      	adds	r3, #8
 800964a:	2102      	movs	r1, #2
 800964c:	4618      	mov	r0, r3
 800964e:	f002 f8cd 	bl	800b7ec <RCCEx_PLL2_Config>
 8009652:	4603      	mov	r3, r0
 8009654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009658:	e006      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009660:	e002      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009662:	bf00      	nop
 8009664:	e000      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009668:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10a      	bne.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009670:	4b9b      	ldr	r3, [pc, #620]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009674:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800967c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800967e:	4a98      	ldr	r2, [pc, #608]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009680:	430b      	orrs	r3, r1
 8009682:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009684:	e003      	b.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009686:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800968a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800968e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009696:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800969a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800969e:	2300      	movs	r3, #0
 80096a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80096a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80096a8:	460b      	mov	r3, r1
 80096aa:	4313      	orrs	r3, r2
 80096ac:	d051      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80096ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096b8:	d035      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80096ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096be:	d82e      	bhi.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80096c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80096c4:	d031      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80096c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80096ca:	d828      	bhi.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80096cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096d0:	d01a      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80096d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096d6:	d822      	bhi.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d003      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80096dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096e0:	d007      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80096e2:	e01c      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096e4:	4b7e      	ldr	r3, [pc, #504]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80096e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e8:	4a7d      	ldr	r2, [pc, #500]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80096ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80096f0:	e01c      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f6:	3308      	adds	r3, #8
 80096f8:	2100      	movs	r1, #0
 80096fa:	4618      	mov	r0, r3
 80096fc:	f002 f876 	bl	800b7ec <RCCEx_PLL2_Config>
 8009700:	4603      	mov	r3, r0
 8009702:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009706:	e011      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800970c:	3328      	adds	r3, #40	@ 0x28
 800970e:	2100      	movs	r1, #0
 8009710:	4618      	mov	r0, r3
 8009712:	f002 f91d 	bl	800b950 <RCCEx_PLL3_Config>
 8009716:	4603      	mov	r3, r0
 8009718:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800971c:	e006      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009724:	e002      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009726:	bf00      	nop
 8009728:	e000      	b.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800972a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800972c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10a      	bne.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009734:	4b6a      	ldr	r3, [pc, #424]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009738:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800973c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009742:	4a67      	ldr	r2, [pc, #412]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009744:	430b      	orrs	r3, r1
 8009746:	6513      	str	r3, [r2, #80]	@ 0x50
 8009748:	e003      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800974a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800974e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800975e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009762:	2300      	movs	r3, #0
 8009764:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009768:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800976c:	460b      	mov	r3, r1
 800976e:	4313      	orrs	r3, r2
 8009770:	d053      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800977c:	d033      	beq.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800977e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009782:	d82c      	bhi.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009784:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009788:	d02f      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x502>
 800978a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800978e:	d826      	bhi.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009790:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009794:	d02b      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009796:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800979a:	d820      	bhi.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800979c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097a0:	d012      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80097a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097a6:	d81a      	bhi.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d022      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80097ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097b0:	d115      	bne.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097b6:	3308      	adds	r3, #8
 80097b8:	2101      	movs	r1, #1
 80097ba:	4618      	mov	r0, r3
 80097bc:	f002 f816 	bl	800b7ec <RCCEx_PLL2_Config>
 80097c0:	4603      	mov	r3, r0
 80097c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80097c6:	e015      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097cc:	3328      	adds	r3, #40	@ 0x28
 80097ce:	2101      	movs	r1, #1
 80097d0:	4618      	mov	r0, r3
 80097d2:	f002 f8bd 	bl	800b950 <RCCEx_PLL3_Config>
 80097d6:	4603      	mov	r3, r0
 80097d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80097dc:	e00a      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80097e4:	e006      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80097e6:	bf00      	nop
 80097e8:	e004      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80097ea:	bf00      	nop
 80097ec:	e002      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80097ee:	bf00      	nop
 80097f0:	e000      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80097f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10a      	bne.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80097fc:	4b38      	ldr	r3, [pc, #224]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009800:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800980a:	4a35      	ldr	r2, [pc, #212]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800980c:	430b      	orrs	r3, r1
 800980e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009810:	e003      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009812:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009816:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800981a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800981e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009822:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009826:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800982a:	2300      	movs	r3, #0
 800982c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009830:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009834:	460b      	mov	r3, r1
 8009836:	4313      	orrs	r3, r2
 8009838:	d058      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800983a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800983e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009842:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009846:	d033      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800984c:	d82c      	bhi.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800984e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009852:	d02f      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009858:	d826      	bhi.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800985a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800985e:	d02b      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009860:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009864:	d820      	bhi.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800986a:	d012      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800986c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009870:	d81a      	bhi.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009872:	2b00      	cmp	r3, #0
 8009874:	d022      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009876:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800987a:	d115      	bne.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800987c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009880:	3308      	adds	r3, #8
 8009882:	2101      	movs	r1, #1
 8009884:	4618      	mov	r0, r3
 8009886:	f001 ffb1 	bl	800b7ec <RCCEx_PLL2_Config>
 800988a:	4603      	mov	r3, r0
 800988c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009890:	e015      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009896:	3328      	adds	r3, #40	@ 0x28
 8009898:	2101      	movs	r1, #1
 800989a:	4618      	mov	r0, r3
 800989c:	f002 f858 	bl	800b950 <RCCEx_PLL3_Config>
 80098a0:	4603      	mov	r3, r0
 80098a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80098a6:	e00a      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098ae:	e006      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80098b0:	bf00      	nop
 80098b2:	e004      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80098b4:	bf00      	nop
 80098b6:	e002      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80098b8:	bf00      	nop
 80098ba:	e000      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80098bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10e      	bne.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80098c6:	4b06      	ldr	r3, [pc, #24]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80098ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80098d6:	4a02      	ldr	r2, [pc, #8]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098d8:	430b      	orrs	r3, r1
 80098da:	6593      	str	r3, [r2, #88]	@ 0x58
 80098dc:	e006      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x604>
 80098de:	bf00      	nop
 80098e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80098ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80098f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098fc:	2300      	movs	r3, #0
 80098fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009902:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009906:	460b      	mov	r3, r1
 8009908:	4313      	orrs	r3, r2
 800990a:	d037      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800990c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009916:	d00e      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800991c:	d816      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800991e:	2b00      	cmp	r3, #0
 8009920:	d018      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009922:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009926:	d111      	bne.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009928:	4bc4      	ldr	r3, [pc, #784]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800992a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800992c:	4ac3      	ldr	r2, [pc, #780]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800992e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009934:	e00f      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800993a:	3308      	adds	r3, #8
 800993c:	2101      	movs	r1, #1
 800993e:	4618      	mov	r0, r3
 8009940:	f001 ff54 	bl	800b7ec <RCCEx_PLL2_Config>
 8009944:	4603      	mov	r3, r0
 8009946:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800994a:	e004      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009952:	e000      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009956:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10a      	bne.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800995e:	4bb7      	ldr	r3, [pc, #732]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009962:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800996a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800996c:	4ab3      	ldr	r2, [pc, #716]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800996e:	430b      	orrs	r3, r1
 8009970:	6513      	str	r3, [r2, #80]	@ 0x50
 8009972:	e003      	b.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009974:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009978:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800997c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009984:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009988:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800998c:	2300      	movs	r3, #0
 800998e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009992:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009996:	460b      	mov	r3, r1
 8009998:	4313      	orrs	r3, r2
 800999a:	d039      	beq.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800999c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099a2:	2b03      	cmp	r3, #3
 80099a4:	d81c      	bhi.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80099a6:	a201      	add	r2, pc, #4	@ (adr r2, 80099ac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80099a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ac:	080099e9 	.word	0x080099e9
 80099b0:	080099bd 	.word	0x080099bd
 80099b4:	080099cb 	.word	0x080099cb
 80099b8:	080099e9 	.word	0x080099e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099bc:	4b9f      	ldr	r3, [pc, #636]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c0:	4a9e      	ldr	r2, [pc, #632]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80099c8:	e00f      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ce:	3308      	adds	r3, #8
 80099d0:	2102      	movs	r1, #2
 80099d2:	4618      	mov	r0, r3
 80099d4:	f001 ff0a 	bl	800b7ec <RCCEx_PLL2_Config>
 80099d8:	4603      	mov	r3, r0
 80099da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80099de:	e004      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80099e6:	e000      	b.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80099e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10a      	bne.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80099f2:	4b92      	ldr	r3, [pc, #584]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099f6:	f023 0103 	bic.w	r1, r3, #3
 80099fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a00:	4a8e      	ldr	r2, [pc, #568]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a02:	430b      	orrs	r3, r1
 8009a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009a06:	e003      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a18:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009a1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a20:	2300      	movs	r3, #0
 8009a22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	f000 8099 	beq.w	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a32:	4b83      	ldr	r3, [pc, #524]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a82      	ldr	r2, [pc, #520]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a3e:	f7f8 ff47 	bl	80028d0 <HAL_GetTick>
 8009a42:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a46:	e00b      	b.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a48:	f7f8 ff42 	bl	80028d0 <HAL_GetTick>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009a52:	1ad3      	subs	r3, r2, r3
 8009a54:	2b64      	cmp	r3, #100	@ 0x64
 8009a56:	d903      	bls.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a5e:	e005      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a60:	4b77      	ldr	r3, [pc, #476]	@ (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d0ed      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009a6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d173      	bne.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009a74:	4b71      	ldr	r3, [pc, #452]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009a80:	4053      	eors	r3, r2
 8009a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d015      	beq.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a92:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a96:	4b69      	ldr	r3, [pc, #420]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a9a:	4a68      	ldr	r2, [pc, #416]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009aa0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009aa2:	4b66      	ldr	r3, [pc, #408]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aa6:	4a65      	ldr	r2, [pc, #404]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009aa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009aac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009aae:	4a63      	ldr	r2, [pc, #396]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ab4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ac2:	d118      	bne.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac4:	f7f8 ff04 	bl	80028d0 <HAL_GetTick>
 8009ac8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009acc:	e00d      	b.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ace:	f7f8 feff 	bl	80028d0 <HAL_GetTick>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009ad8:	1ad2      	subs	r2, r2, r3
 8009ada:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d903      	bls.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009ae8:	e005      	b.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009aea:	4b54      	ldr	r3, [pc, #336]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aee:	f003 0302 	and.w	r3, r3, #2
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d0eb      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009af6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d129      	bne.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b0e:	d10e      	bne.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009b10:	4b4a      	ldr	r3, [pc, #296]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009b20:	091a      	lsrs	r2, r3, #4
 8009b22:	4b48      	ldr	r3, [pc, #288]	@ (8009c44 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009b24:	4013      	ands	r3, r2
 8009b26:	4a45      	ldr	r2, [pc, #276]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b28:	430b      	orrs	r3, r1
 8009b2a:	6113      	str	r3, [r2, #16]
 8009b2c:	e005      	b.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009b2e:	4b43      	ldr	r3, [pc, #268]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	4a42      	ldr	r2, [pc, #264]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009b38:	6113      	str	r3, [r2, #16]
 8009b3a:	4b40      	ldr	r3, [pc, #256]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b3c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b4a:	4a3c      	ldr	r2, [pc, #240]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b4c:	430b      	orrs	r3, r1
 8009b4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b50:	e008      	b.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b56:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8009b5a:	e003      	b.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6c:	f002 0301 	and.w	r3, r2, #1
 8009b70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b74:	2300      	movs	r3, #0
 8009b76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009b7a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4313      	orrs	r3, r2
 8009b82:	f000 808f 	beq.w	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b8c:	2b28      	cmp	r3, #40	@ 0x28
 8009b8e:	d871      	bhi.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009b90:	a201      	add	r2, pc, #4	@ (adr r2, 8009b98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b96:	bf00      	nop
 8009b98:	08009c7d 	.word	0x08009c7d
 8009b9c:	08009c75 	.word	0x08009c75
 8009ba0:	08009c75 	.word	0x08009c75
 8009ba4:	08009c75 	.word	0x08009c75
 8009ba8:	08009c75 	.word	0x08009c75
 8009bac:	08009c75 	.word	0x08009c75
 8009bb0:	08009c75 	.word	0x08009c75
 8009bb4:	08009c75 	.word	0x08009c75
 8009bb8:	08009c49 	.word	0x08009c49
 8009bbc:	08009c75 	.word	0x08009c75
 8009bc0:	08009c75 	.word	0x08009c75
 8009bc4:	08009c75 	.word	0x08009c75
 8009bc8:	08009c75 	.word	0x08009c75
 8009bcc:	08009c75 	.word	0x08009c75
 8009bd0:	08009c75 	.word	0x08009c75
 8009bd4:	08009c75 	.word	0x08009c75
 8009bd8:	08009c5f 	.word	0x08009c5f
 8009bdc:	08009c75 	.word	0x08009c75
 8009be0:	08009c75 	.word	0x08009c75
 8009be4:	08009c75 	.word	0x08009c75
 8009be8:	08009c75 	.word	0x08009c75
 8009bec:	08009c75 	.word	0x08009c75
 8009bf0:	08009c75 	.word	0x08009c75
 8009bf4:	08009c75 	.word	0x08009c75
 8009bf8:	08009c7d 	.word	0x08009c7d
 8009bfc:	08009c75 	.word	0x08009c75
 8009c00:	08009c75 	.word	0x08009c75
 8009c04:	08009c75 	.word	0x08009c75
 8009c08:	08009c75 	.word	0x08009c75
 8009c0c:	08009c75 	.word	0x08009c75
 8009c10:	08009c75 	.word	0x08009c75
 8009c14:	08009c75 	.word	0x08009c75
 8009c18:	08009c7d 	.word	0x08009c7d
 8009c1c:	08009c75 	.word	0x08009c75
 8009c20:	08009c75 	.word	0x08009c75
 8009c24:	08009c75 	.word	0x08009c75
 8009c28:	08009c75 	.word	0x08009c75
 8009c2c:	08009c75 	.word	0x08009c75
 8009c30:	08009c75 	.word	0x08009c75
 8009c34:	08009c75 	.word	0x08009c75
 8009c38:	08009c7d 	.word	0x08009c7d
 8009c3c:	58024400 	.word	0x58024400
 8009c40:	58024800 	.word	0x58024800
 8009c44:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	2101      	movs	r1, #1
 8009c50:	4618      	mov	r0, r3
 8009c52:	f001 fdcb 	bl	800b7ec <RCCEx_PLL2_Config>
 8009c56:	4603      	mov	r3, r0
 8009c58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009c5c:	e00f      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c62:	3328      	adds	r3, #40	@ 0x28
 8009c64:	2101      	movs	r1, #1
 8009c66:	4618      	mov	r0, r3
 8009c68:	f001 fe72 	bl	800b950 <RCCEx_PLL3_Config>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009c72:	e004      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c7a:	e000      	b.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10a      	bne.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009c86:	4bbf      	ldr	r3, [pc, #764]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c8a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c94:	4abb      	ldr	r2, [pc, #748]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009c96:	430b      	orrs	r3, r1
 8009c98:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c9a:	e003      	b.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ca0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	f002 0302 	and.w	r3, r2, #2
 8009cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009cba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	d041      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cca:	2b05      	cmp	r3, #5
 8009ccc:	d824      	bhi.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009cce:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd4:	08009d21 	.word	0x08009d21
 8009cd8:	08009ced 	.word	0x08009ced
 8009cdc:	08009d03 	.word	0x08009d03
 8009ce0:	08009d21 	.word	0x08009d21
 8009ce4:	08009d21 	.word	0x08009d21
 8009ce8:	08009d21 	.word	0x08009d21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cf0:	3308      	adds	r3, #8
 8009cf2:	2101      	movs	r1, #1
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f001 fd79 	bl	800b7ec <RCCEx_PLL2_Config>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009d00:	e00f      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d06:	3328      	adds	r3, #40	@ 0x28
 8009d08:	2101      	movs	r1, #1
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f001 fe20 	bl	800b950 <RCCEx_PLL3_Config>
 8009d10:	4603      	mov	r3, r0
 8009d12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009d16:	e004      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d1e:	e000      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10a      	bne.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009d2a:	4b96      	ldr	r3, [pc, #600]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d2e:	f023 0107 	bic.w	r1, r3, #7
 8009d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d38:	4a92      	ldr	r2, [pc, #584]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009d3a:	430b      	orrs	r3, r1
 8009d3c:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d3e:	e003      	b.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d50:	f002 0304 	and.w	r3, r2, #4
 8009d54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009d5e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009d62:	460b      	mov	r3, r1
 8009d64:	4313      	orrs	r3, r2
 8009d66:	d044      	beq.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d70:	2b05      	cmp	r3, #5
 8009d72:	d825      	bhi.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009d74:	a201      	add	r2, pc, #4	@ (adr r2, 8009d7c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7a:	bf00      	nop
 8009d7c:	08009dc9 	.word	0x08009dc9
 8009d80:	08009d95 	.word	0x08009d95
 8009d84:	08009dab 	.word	0x08009dab
 8009d88:	08009dc9 	.word	0x08009dc9
 8009d8c:	08009dc9 	.word	0x08009dc9
 8009d90:	08009dc9 	.word	0x08009dc9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d98:	3308      	adds	r3, #8
 8009d9a:	2101      	movs	r1, #1
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f001 fd25 	bl	800b7ec <RCCEx_PLL2_Config>
 8009da2:	4603      	mov	r3, r0
 8009da4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009da8:	e00f      	b.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dae:	3328      	adds	r3, #40	@ 0x28
 8009db0:	2101      	movs	r1, #1
 8009db2:	4618      	mov	r0, r3
 8009db4:	f001 fdcc 	bl	800b950 <RCCEx_PLL3_Config>
 8009db8:	4603      	mov	r3, r0
 8009dba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009dbe:	e004      	b.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009dc6:	e000      	b.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d10b      	bne.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dd6:	f023 0107 	bic.w	r1, r3, #7
 8009dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009de2:	4a68      	ldr	r2, [pc, #416]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009de4:	430b      	orrs	r3, r1
 8009de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009de8:	e003      	b.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfa:	f002 0320 	and.w	r3, r2, #32
 8009dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e02:	2300      	movs	r3, #0
 8009e04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009e08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	d055      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e1e:	d033      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e24:	d82c      	bhi.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e2a:	d02f      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e30:	d826      	bhi.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009e32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009e36:	d02b      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009e38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009e3c:	d820      	bhi.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e42:	d012      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e48:	d81a      	bhi.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d022      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009e4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e52:	d115      	bne.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e58:	3308      	adds	r3, #8
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f001 fcc5 	bl	800b7ec <RCCEx_PLL2_Config>
 8009e62:	4603      	mov	r3, r0
 8009e64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009e68:	e015      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e6e:	3328      	adds	r3, #40	@ 0x28
 8009e70:	2102      	movs	r1, #2
 8009e72:	4618      	mov	r0, r3
 8009e74:	f001 fd6c 	bl	800b950 <RCCEx_PLL3_Config>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009e7e:	e00a      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e86:	e006      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009e88:	bf00      	nop
 8009e8a:	e004      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009e8c:	bf00      	nop
 8009e8e:	e002      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009e90:	bf00      	nop
 8009e92:	e000      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10b      	bne.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009e9e:	4b39      	ldr	r3, [pc, #228]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ea2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009eae:	4a35      	ldr	r2, [pc, #212]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009eb0:	430b      	orrs	r3, r1
 8009eb2:	6553      	str	r3, [r2, #84]	@ 0x54
 8009eb4:	e003      	b.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009eca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ed4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009ed8:	460b      	mov	r3, r1
 8009eda:	4313      	orrs	r3, r2
 8009edc:	d058      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009ee6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009eea:	d033      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009eec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009ef0:	d82c      	bhi.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ef6:	d02f      	beq.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009efc:	d826      	bhi.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009efe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f02:	d02b      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009f04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f08:	d820      	bhi.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009f0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f0e:	d012      	beq.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f14:	d81a      	bhi.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d022      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f1e:	d115      	bne.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f24:	3308      	adds	r3, #8
 8009f26:	2100      	movs	r1, #0
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f001 fc5f 	bl	800b7ec <RCCEx_PLL2_Config>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009f34:	e015      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f3a:	3328      	adds	r3, #40	@ 0x28
 8009f3c:	2102      	movs	r1, #2
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f001 fd06 	bl	800b950 <RCCEx_PLL3_Config>
 8009f44:	4603      	mov	r3, r0
 8009f46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009f4a:	e00a      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f52:	e006      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009f54:	bf00      	nop
 8009f56:	e004      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009f58:	bf00      	nop
 8009f5a:	e002      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009f5c:	bf00      	nop
 8009f5e:	e000      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10e      	bne.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009f6a:	4b06      	ldr	r3, [pc, #24]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f6e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f7a:	4a02      	ldr	r2, [pc, #8]	@ (8009f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f7c:	430b      	orrs	r3, r1
 8009f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f80:	e006      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009f82:	bf00      	nop
 8009f84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f98:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009f9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009fa6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009faa:	460b      	mov	r3, r1
 8009fac:	4313      	orrs	r3, r2
 8009fae:	d055      	beq.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009fb8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009fbc:	d033      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009fbe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009fc2:	d82c      	bhi.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fc8:	d02f      	beq.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fce:	d826      	bhi.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009fd0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009fd4:	d02b      	beq.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009fd6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009fda:	d820      	bhi.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009fdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009fe0:	d012      	beq.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009fe2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009fe6:	d81a      	bhi.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d022      	beq.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ff0:	d115      	bne.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff6:	3308      	adds	r3, #8
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f001 fbf6 	bl	800b7ec <RCCEx_PLL2_Config>
 800a000:	4603      	mov	r3, r0
 800a002:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a006:	e015      	b.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a00c:	3328      	adds	r3, #40	@ 0x28
 800a00e:	2102      	movs	r1, #2
 800a010:	4618      	mov	r0, r3
 800a012:	f001 fc9d 	bl	800b950 <RCCEx_PLL3_Config>
 800a016:	4603      	mov	r3, r0
 800a018:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a01c:	e00a      	b.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a024:	e006      	b.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a026:	bf00      	nop
 800a028:	e004      	b.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a02a:	bf00      	nop
 800a02c:	e002      	b.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a02e:	bf00      	nop
 800a030:	e000      	b.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a032:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d10b      	bne.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a03c:	4ba0      	ldr	r3, [pc, #640]	@ (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a03e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a040:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a048:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a04c:	4a9c      	ldr	r2, [pc, #624]	@ (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a04e:	430b      	orrs	r3, r1
 800a050:	6593      	str	r3, [r2, #88]	@ 0x58
 800a052:	e003      	b.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a054:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a058:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a064:	f002 0308 	and.w	r3, r2, #8
 800a068:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a06c:	2300      	movs	r3, #0
 800a06e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a072:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a076:	460b      	mov	r3, r1
 800a078:	4313      	orrs	r3, r2
 800a07a:	d01e      	beq.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a080:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a088:	d10c      	bne.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a08a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a08e:	3328      	adds	r3, #40	@ 0x28
 800a090:	2102      	movs	r1, #2
 800a092:	4618      	mov	r0, r3
 800a094:	f001 fc5c 	bl	800b950 <RCCEx_PLL3_Config>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d002      	beq.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a0a4:	4b86      	ldr	r3, [pc, #536]	@ (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a0a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a0ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0b4:	4a82      	ldr	r2, [pc, #520]	@ (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a0b6:	430b      	orrs	r3, r1
 800a0b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a0ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c2:	f002 0310 	and.w	r3, r2, #16
 800a0c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a0d0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	d01e      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a0da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a0e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0e6:	d10c      	bne.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0ec:	3328      	adds	r3, #40	@ 0x28
 800a0ee:	2102      	movs	r1, #2
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f001 fc2d 	bl	800b950 <RCCEx_PLL3_Config>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d002      	beq.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a102:	4b6f      	ldr	r3, [pc, #444]	@ (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a106:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a10e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a112:	4a6b      	ldr	r2, [pc, #428]	@ (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a114:	430b      	orrs	r3, r1
 800a116:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a124:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a126:	2300      	movs	r3, #0
 800a128:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a12a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a12e:	460b      	mov	r3, r1
 800a130:	4313      	orrs	r3, r2
 800a132:	d03e      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a138:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a13c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a140:	d022      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a142:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a146:	d81b      	bhi.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d003      	beq.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a14c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a150:	d00b      	beq.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a152:	e015      	b.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a158:	3308      	adds	r3, #8
 800a15a:	2100      	movs	r1, #0
 800a15c:	4618      	mov	r0, r3
 800a15e:	f001 fb45 	bl	800b7ec <RCCEx_PLL2_Config>
 800a162:	4603      	mov	r3, r0
 800a164:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a168:	e00f      	b.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a16e:	3328      	adds	r3, #40	@ 0x28
 800a170:	2102      	movs	r1, #2
 800a172:	4618      	mov	r0, r3
 800a174:	f001 fbec 	bl	800b950 <RCCEx_PLL3_Config>
 800a178:	4603      	mov	r3, r0
 800a17a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a17e:	e004      	b.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a186:	e000      	b.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a18a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10b      	bne.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a192:	4b4b      	ldr	r3, [pc, #300]	@ (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a196:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a19e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a1a2:	4a47      	ldr	r2, [pc, #284]	@ (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a1a4:	430b      	orrs	r3, r1
 800a1a6:	6593      	str	r3, [r2, #88]	@ 0x58
 800a1a8:	e003      	b.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a1be:	673b      	str	r3, [r7, #112]	@ 0x70
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	677b      	str	r3, [r7, #116]	@ 0x74
 800a1c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	d03b      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a1da:	d01f      	beq.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a1dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a1e0:	d818      	bhi.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a1e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1e6:	d003      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a1e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1ec:	d007      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a1ee:	e011      	b.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1f0:	4b33      	ldr	r3, [pc, #204]	@ (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a1f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1f4:	4a32      	ldr	r2, [pc, #200]	@ (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a1f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a1fc:	e00f      	b.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a202:	3328      	adds	r3, #40	@ 0x28
 800a204:	2101      	movs	r1, #1
 800a206:	4618      	mov	r0, r3
 800a208:	f001 fba2 	bl	800b950 <RCCEx_PLL3_Config>
 800a20c:	4603      	mov	r3, r0
 800a20e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a212:	e004      	b.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a21a:	e000      	b.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a21c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a21e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10b      	bne.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a226:	4b26      	ldr	r3, [pc, #152]	@ (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a22a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a236:	4a22      	ldr	r2, [pc, #136]	@ (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a238:	430b      	orrs	r3, r1
 800a23a:	6553      	str	r3, [r2, #84]	@ 0x54
 800a23c:	e003      	b.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a23e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a242:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a252:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a254:	2300      	movs	r3, #0
 800a256:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a258:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a25c:	460b      	mov	r3, r1
 800a25e:	4313      	orrs	r3, r2
 800a260:	d034      	beq.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d003      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a26c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a270:	d007      	beq.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a272:	e011      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a274:	4b12      	ldr	r3, [pc, #72]	@ (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a278:	4a11      	ldr	r2, [pc, #68]	@ (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a27a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a27e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a280:	e00e      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a286:	3308      	adds	r3, #8
 800a288:	2102      	movs	r1, #2
 800a28a:	4618      	mov	r0, r3
 800a28c:	f001 faae 	bl	800b7ec <RCCEx_PLL2_Config>
 800a290:	4603      	mov	r3, r0
 800a292:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a296:	e003      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a29e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10d      	bne.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a2a8:	4b05      	ldr	r3, [pc, #20]	@ (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a2aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a2b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2b6:	4a02      	ldr	r2, [pc, #8]	@ (800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a2b8:	430b      	orrs	r3, r1
 800a2ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a2bc:	e006      	b.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a2be:	bf00      	nop
 800a2c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a2d8:	663b      	str	r3, [r7, #96]	@ 0x60
 800a2da:	2300      	movs	r3, #0
 800a2dc:	667b      	str	r3, [r7, #100]	@ 0x64
 800a2de:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	d00c      	beq.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ec:	3328      	adds	r3, #40	@ 0x28
 800a2ee:	2102      	movs	r1, #2
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f001 fb2d 	bl	800b950 <RCCEx_PLL3_Config>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a30e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a310:	2300      	movs	r3, #0
 800a312:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a314:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a318:	460b      	mov	r3, r1
 800a31a:	4313      	orrs	r3, r2
 800a31c:	d036      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a322:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a324:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a328:	d018      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a32a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a32e:	d811      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a334:	d014      	beq.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a33a:	d80b      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d011      	beq.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a344:	d106      	bne.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a346:	4bb7      	ldr	r3, [pc, #732]	@ (800a624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a34a:	4ab6      	ldr	r2, [pc, #728]	@ (800a624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a34c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a350:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a352:	e008      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a35a:	e004      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a35c:	bf00      	nop
 800a35e:	e002      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a360:	bf00      	nop
 800a362:	e000      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a364:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a366:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10a      	bne.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a36e:	4bad      	ldr	r3, [pc, #692]	@ (800a624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a372:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a37a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a37c:	4aa9      	ldr	r2, [pc, #676]	@ (800a624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a37e:	430b      	orrs	r3, r1
 800a380:	6553      	str	r3, [r2, #84]	@ 0x54
 800a382:	e003      	b.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a394:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a398:	653b      	str	r3, [r7, #80]	@ 0x50
 800a39a:	2300      	movs	r3, #0
 800a39c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a39e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	d009      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a3a8:	4b9e      	ldr	r3, [pc, #632]	@ (800a624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a3aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3b6:	4a9b      	ldr	r2, [pc, #620]	@ (800a624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a3b8:	430b      	orrs	r3, r1
 800a3ba:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a3bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a3c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3ce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	d009      	beq.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a3d8:	4b92      	ldr	r3, [pc, #584]	@ (800a624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a3da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3dc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3e6:	4a8f      	ldr	r2, [pc, #572]	@ (800a624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a3e8:	430b      	orrs	r3, r1
 800a3ea:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a3f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3fe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a402:	460b      	mov	r3, r1
 800a404:	4313      	orrs	r3, r2
 800a406:	d00e      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a408:	4b86      	ldr	r3, [pc, #536]	@ (800a624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	4a85      	ldr	r2, [pc, #532]	@ (800a624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a40e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a412:	6113      	str	r3, [r2, #16]
 800a414:	4b83      	ldr	r3, [pc, #524]	@ (800a624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a416:	6919      	ldr	r1, [r3, #16]
 800a418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a41c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a420:	4a80      	ldr	r2, [pc, #512]	@ (800a624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a422:	430b      	orrs	r3, r1
 800a424:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a432:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a434:	2300      	movs	r3, #0
 800a436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a438:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a43c:	460b      	mov	r3, r1
 800a43e:	4313      	orrs	r3, r2
 800a440:	d009      	beq.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a442:	4b78      	ldr	r3, [pc, #480]	@ (800a624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a446:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a44a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a44e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a450:	4a74      	ldr	r2, [pc, #464]	@ (800a624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a452:	430b      	orrs	r3, r1
 800a454:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a462:	633b      	str	r3, [r7, #48]	@ 0x30
 800a464:	2300      	movs	r3, #0
 800a466:	637b      	str	r3, [r7, #52]	@ 0x34
 800a468:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a46c:	460b      	mov	r3, r1
 800a46e:	4313      	orrs	r3, r2
 800a470:	d00a      	beq.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a472:	4b6c      	ldr	r3, [pc, #432]	@ (800a624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a476:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a47e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a482:	4a68      	ldr	r2, [pc, #416]	@ (800a624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a484:	430b      	orrs	r3, r1
 800a486:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a490:	2100      	movs	r1, #0
 800a492:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a494:	f003 0301 	and.w	r3, r3, #1
 800a498:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a49a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a49e:	460b      	mov	r3, r1
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	d011      	beq.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4a8:	3308      	adds	r3, #8
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f001 f99d 	bl	800b7ec <RCCEx_PLL2_Config>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a4b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d003      	beq.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	6239      	str	r1, [r7, #32]
 800a4d4:	f003 0302 	and.w	r3, r3, #2
 800a4d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a4de:	460b      	mov	r3, r1
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	d011      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a4e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4e8:	3308      	adds	r3, #8
 800a4ea:	2101      	movs	r1, #1
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f001 f97d 	bl	800b7ec <RCCEx_PLL2_Config>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a4f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d003      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a504:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a510:	2100      	movs	r1, #0
 800a512:	61b9      	str	r1, [r7, #24]
 800a514:	f003 0304 	and.w	r3, r3, #4
 800a518:	61fb      	str	r3, [r7, #28]
 800a51a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a51e:	460b      	mov	r3, r1
 800a520:	4313      	orrs	r3, r2
 800a522:	d011      	beq.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a528:	3308      	adds	r3, #8
 800a52a:	2102      	movs	r1, #2
 800a52c:	4618      	mov	r0, r3
 800a52e:	f001 f95d 	bl	800b7ec <RCCEx_PLL2_Config>
 800a532:	4603      	mov	r3, r0
 800a534:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d003      	beq.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a544:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a550:	2100      	movs	r1, #0
 800a552:	6139      	str	r1, [r7, #16]
 800a554:	f003 0308 	and.w	r3, r3, #8
 800a558:	617b      	str	r3, [r7, #20]
 800a55a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a55e:	460b      	mov	r3, r1
 800a560:	4313      	orrs	r3, r2
 800a562:	d011      	beq.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a568:	3328      	adds	r3, #40	@ 0x28
 800a56a:	2100      	movs	r1, #0
 800a56c:	4618      	mov	r0, r3
 800a56e:	f001 f9ef 	bl	800b950 <RCCEx_PLL3_Config>
 800a572:	4603      	mov	r3, r0
 800a574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800a578:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d003      	beq.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a584:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a590:	2100      	movs	r1, #0
 800a592:	60b9      	str	r1, [r7, #8]
 800a594:	f003 0310 	and.w	r3, r3, #16
 800a598:	60fb      	str	r3, [r7, #12]
 800a59a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	d011      	beq.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5a8:	3328      	adds	r3, #40	@ 0x28
 800a5aa:	2101      	movs	r1, #1
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f001 f9cf 	bl	800b950 <RCCEx_PLL3_Config>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a5b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d003      	beq.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	6039      	str	r1, [r7, #0]
 800a5d4:	f003 0320 	and.w	r3, r3, #32
 800a5d8:	607b      	str	r3, [r7, #4]
 800a5da:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	d011      	beq.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5e8:	3328      	adds	r3, #40	@ 0x28
 800a5ea:	2102      	movs	r1, #2
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f001 f9af 	bl	800b950 <RCCEx_PLL3_Config>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a5f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d003      	beq.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a600:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a604:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a608:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d101      	bne.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a610:	2300      	movs	r3, #0
 800a612:	e000      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a614:	2301      	movs	r3, #1
}
 800a616:	4618      	mov	r0, r3
 800a618:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a61c:	46bd      	mov	sp, r7
 800a61e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a622:	bf00      	nop
 800a624:	58024400 	.word	0x58024400

0800a628 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b090      	sub	sp, #64	@ 0x40
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a632:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a636:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a63a:	430b      	orrs	r3, r1
 800a63c:	f040 8094 	bne.w	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a640:	4b9b      	ldr	r3, [pc, #620]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a644:	f003 0307 	and.w	r3, r3, #7
 800a648:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64c:	2b04      	cmp	r3, #4
 800a64e:	f200 8087 	bhi.w	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a652:	a201      	add	r2, pc, #4	@ (adr r2, 800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a658:	0800a66d 	.word	0x0800a66d
 800a65c:	0800a695 	.word	0x0800a695
 800a660:	0800a6bd 	.word	0x0800a6bd
 800a664:	0800a759 	.word	0x0800a759
 800a668:	0800a6e5 	.word	0x0800a6e5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a66c:	4b90      	ldr	r3, [pc, #576]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a674:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a678:	d108      	bne.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a67a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a67e:	4618      	mov	r0, r3
 800a680:	f000 ff62 	bl	800b548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a688:	f000 bc93 	b.w	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a68c:	2300      	movs	r3, #0
 800a68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a690:	f000 bc8f 	b.w	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a694:	4b86      	ldr	r3, [pc, #536]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a69c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6a0:	d108      	bne.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6a2:	f107 0318 	add.w	r3, r7, #24
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f000 fca6 	bl	800aff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6b0:	f000 bc7f 	b.w	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6b8:	f000 bc7b 	b.w	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6bc:	4b7c      	ldr	r3, [pc, #496]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6c8:	d108      	bne.n	800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ca:	f107 030c 	add.w	r3, r7, #12
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 fde6 	bl	800b2a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6d8:	f000 bc6b 	b.w	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6e0:	f000 bc67 	b.w	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6e4:	4b72      	ldr	r3, [pc, #456]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a6e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a6ec:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6ee:	4b70      	ldr	r3, [pc, #448]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f003 0304 	and.w	r3, r3, #4
 800a6f6:	2b04      	cmp	r3, #4
 800a6f8:	d10c      	bne.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a6fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d109      	bne.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a700:	4b6b      	ldr	r3, [pc, #428]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	08db      	lsrs	r3, r3, #3
 800a706:	f003 0303 	and.w	r3, r3, #3
 800a70a:	4a6a      	ldr	r2, [pc, #424]	@ (800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a70c:	fa22 f303 	lsr.w	r3, r2, r3
 800a710:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a712:	e01f      	b.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a714:	4b66      	ldr	r3, [pc, #408]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a71c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a720:	d106      	bne.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a724:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a728:	d102      	bne.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a72a:	4b63      	ldr	r3, [pc, #396]	@ (800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a72e:	e011      	b.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a730:	4b5f      	ldr	r3, [pc, #380]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a738:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a73c:	d106      	bne.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a73e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a740:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a744:	d102      	bne.n	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a746:	4b5d      	ldr	r3, [pc, #372]	@ (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a748:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a74a:	e003      	b.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a74c:	2300      	movs	r3, #0
 800a74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a750:	f000 bc2f 	b.w	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a754:	f000 bc2d 	b.w	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a758:	4b59      	ldr	r3, [pc, #356]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a75c:	f000 bc29 	b.w	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a764:	f000 bc25 	b.w	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a76c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a770:	430b      	orrs	r3, r1
 800a772:	f040 80a7 	bne.w	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a776:	4b4e      	ldr	r3, [pc, #312]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a77a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a77e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a782:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a786:	d054      	beq.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a78e:	f200 808b 	bhi.w	800a8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a794:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a798:	f000 8083 	beq.w	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a7a2:	f200 8081 	bhi.w	800a8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a7ac:	d02f      	beq.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a7b4:	d878      	bhi.n	800a8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d004      	beq.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a7c2:	d012      	beq.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a7c4:	e070      	b.n	800a8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7c6:	4b3a      	ldr	r3, [pc, #232]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7d2:	d107      	bne.n	800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f000 feb5 	bl	800b548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7e2:	e3e6      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e8:	e3e3      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7ea:	4b31      	ldr	r3, [pc, #196]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7f6:	d107      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7f8:	f107 0318 	add.w	r3, r7, #24
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f000 fbfb 	bl	800aff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a806:	e3d4      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a808:	2300      	movs	r3, #0
 800a80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a80c:	e3d1      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a80e:	4b28      	ldr	r3, [pc, #160]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a816:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a81a:	d107      	bne.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a81c:	f107 030c 	add.w	r3, r7, #12
 800a820:	4618      	mov	r0, r3
 800a822:	f000 fd3d 	bl	800b2a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a82a:	e3c2      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a82c:	2300      	movs	r3, #0
 800a82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a830:	e3bf      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a832:	4b1f      	ldr	r3, [pc, #124]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a836:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a83a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a83c:	4b1c      	ldr	r3, [pc, #112]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 0304 	and.w	r3, r3, #4
 800a844:	2b04      	cmp	r3, #4
 800a846:	d10c      	bne.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d109      	bne.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a84e:	4b18      	ldr	r3, [pc, #96]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	08db      	lsrs	r3, r3, #3
 800a854:	f003 0303 	and.w	r3, r3, #3
 800a858:	4a16      	ldr	r2, [pc, #88]	@ (800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a85a:	fa22 f303 	lsr.w	r3, r2, r3
 800a85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a860:	e01e      	b.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a862:	4b13      	ldr	r3, [pc, #76]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a86a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a86e:	d106      	bne.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a872:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a876:	d102      	bne.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a878:	4b0f      	ldr	r3, [pc, #60]	@ (800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a87c:	e010      	b.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a87e:	4b0c      	ldr	r3, [pc, #48]	@ (800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a886:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a88a:	d106      	bne.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a88c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a88e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a892:	d102      	bne.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a894:	4b09      	ldr	r3, [pc, #36]	@ (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a896:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a898:	e002      	b.n	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a89e:	e388      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a8a0:	e387      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a8a2:	4b07      	ldr	r3, [pc, #28]	@ (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a8a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8a6:	e384      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ac:	e381      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a8ae:	bf00      	nop
 800a8b0:	58024400 	.word	0x58024400
 800a8b4:	03d09000 	.word	0x03d09000
 800a8b8:	003d0900 	.word	0x003d0900
 800a8bc:	007a1200 	.word	0x007a1200
 800a8c0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a8c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8c8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a8cc:	430b      	orrs	r3, r1
 800a8ce:	f040 809c 	bne.w	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a8d2:	4b9e      	ldr	r3, [pc, #632]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a8d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8d6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a8da:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a8dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a8e2:	d054      	beq.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a8ea:	f200 808b 	bhi.w	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a8f4:	f000 8083 	beq.w	800a9fe <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a8fe:	f200 8081 	bhi.w	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a904:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a908:	d02f      	beq.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a90c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a910:	d878      	bhi.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a914:	2b00      	cmp	r3, #0
 800a916:	d004      	beq.n	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a91a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a91e:	d012      	beq.n	800a946 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a920:	e070      	b.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a922:	4b8a      	ldr	r3, [pc, #552]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a92a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a92e:	d107      	bne.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a934:	4618      	mov	r0, r3
 800a936:	f000 fe07 	bl	800b548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a93e:	e338      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a940:	2300      	movs	r3, #0
 800a942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a944:	e335      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a946:	4b81      	ldr	r3, [pc, #516]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a94e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a952:	d107      	bne.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a954:	f107 0318 	add.w	r3, r7, #24
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 fb4d 	bl	800aff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a962:	e326      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a964:	2300      	movs	r3, #0
 800a966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a968:	e323      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a96a:	4b78      	ldr	r3, [pc, #480]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a972:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a976:	d107      	bne.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a978:	f107 030c 	add.w	r3, r7, #12
 800a97c:	4618      	mov	r0, r3
 800a97e:	f000 fc8f 	bl	800b2a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a986:	e314      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a988:	2300      	movs	r3, #0
 800a98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a98c:	e311      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a98e:	4b6f      	ldr	r3, [pc, #444]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a992:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a996:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a998:	4b6c      	ldr	r3, [pc, #432]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 0304 	and.w	r3, r3, #4
 800a9a0:	2b04      	cmp	r3, #4
 800a9a2:	d10c      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a9a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d109      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9aa:	4b68      	ldr	r3, [pc, #416]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	08db      	lsrs	r3, r3, #3
 800a9b0:	f003 0303 	and.w	r3, r3, #3
 800a9b4:	4a66      	ldr	r2, [pc, #408]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a9b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9bc:	e01e      	b.n	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9be:	4b63      	ldr	r3, [pc, #396]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9ca:	d106      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a9cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9d2:	d102      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a9d4:	4b5f      	ldr	r3, [pc, #380]	@ (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9d8:	e010      	b.n	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9da:	4b5c      	ldr	r3, [pc, #368]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9e6:	d106      	bne.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a9e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9ee:	d102      	bne.n	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a9f0:	4b59      	ldr	r3, [pc, #356]	@ (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9f4:	e002      	b.n	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a9fa:	e2da      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a9fc:	e2d9      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a9fe:	4b57      	ldr	r3, [pc, #348]	@ (800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aa00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa02:	e2d6      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa08:	e2d3      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aa0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa0e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800aa12:	430b      	orrs	r3, r1
 800aa14:	f040 80a7 	bne.w	800ab66 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800aa18:	4b4c      	ldr	r3, [pc, #304]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa1c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800aa20:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aa22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa28:	d055      	beq.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800aa2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa30:	f200 8096 	bhi.w	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800aa34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa3a:	f000 8084 	beq.w	800ab46 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800aa3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa44:	f200 808c 	bhi.w	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800aa48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa4e:	d030      	beq.n	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800aa50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa56:	f200 8083 	bhi.w	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d004      	beq.n	800aa6a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800aa60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa66:	d012      	beq.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800aa68:	e07a      	b.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa6a:	4b38      	ldr	r3, [pc, #224]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa76:	d107      	bne.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f000 fd63 	bl	800b548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa86:	e294      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa8c:	e291      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa8e:	4b2f      	ldr	r3, [pc, #188]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa9a:	d107      	bne.n	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa9c:	f107 0318 	add.w	r3, r7, #24
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 faa9 	bl	800aff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaaa:	e282      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aaac:	2300      	movs	r3, #0
 800aaae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aab0:	e27f      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aab2:	4b26      	ldr	r3, [pc, #152]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aaba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aabe:	d107      	bne.n	800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aac0:	f107 030c 	add.w	r3, r7, #12
 800aac4:	4618      	mov	r0, r3
 800aac6:	f000 fbeb 	bl	800b2a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aace:	e270      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aad0:	2300      	movs	r3, #0
 800aad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aad4:	e26d      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aad6:	4b1d      	ldr	r3, [pc, #116]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aada:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aade:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aae0:	4b1a      	ldr	r3, [pc, #104]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 0304 	and.w	r3, r3, #4
 800aae8:	2b04      	cmp	r3, #4
 800aaea:	d10c      	bne.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800aaec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d109      	bne.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaf2:	4b16      	ldr	r3, [pc, #88]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	08db      	lsrs	r3, r3, #3
 800aaf8:	f003 0303 	and.w	r3, r3, #3
 800aafc:	4a14      	ldr	r2, [pc, #80]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800aafe:	fa22 f303 	lsr.w	r3, r2, r3
 800ab02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab04:	e01e      	b.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab06:	4b11      	ldr	r3, [pc, #68]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab12:	d106      	bne.n	800ab22 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ab14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab1a:	d102      	bne.n	800ab22 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab1c:	4b0d      	ldr	r3, [pc, #52]	@ (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ab1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab20:	e010      	b.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab22:	4b0a      	ldr	r3, [pc, #40]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab2e:	d106      	bne.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ab30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab36:	d102      	bne.n	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab38:	4b07      	ldr	r3, [pc, #28]	@ (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab3c:	e002      	b.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ab42:	e236      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ab44:	e235      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab46:	4b05      	ldr	r3, [pc, #20]	@ (800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ab48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab4a:	e232      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ab4c:	58024400 	.word	0x58024400
 800ab50:	03d09000 	.word	0x03d09000
 800ab54:	003d0900 	.word	0x003d0900
 800ab58:	007a1200 	.word	0x007a1200
 800ab5c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ab60:	2300      	movs	r3, #0
 800ab62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab64:	e225      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ab66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab6a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ab6e:	430b      	orrs	r3, r1
 800ab70:	f040 8085 	bne.w	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ab74:	4b9c      	ldr	r3, [pc, #624]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ab76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab78:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ab7c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ab7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab84:	d06b      	beq.n	800ac5e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800ab86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab8c:	d874      	bhi.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ab8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab94:	d056      	beq.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800ab96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab9c:	d86c      	bhi.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ab9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aba4:	d03b      	beq.n	800ac1e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800aba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800abac:	d864      	bhi.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800abae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abb4:	d021      	beq.n	800abfa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800abb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abbc:	d85c      	bhi.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800abbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d004      	beq.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800abc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abca:	d004      	beq.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800abcc:	e054      	b.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800abce:	f7fe fb75 	bl	80092bc <HAL_RCC_GetPCLK1Freq>
 800abd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abd4:	e1ed      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abd6:	4b84      	ldr	r3, [pc, #528]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abe2:	d107      	bne.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abe4:	f107 0318 	add.w	r3, r7, #24
 800abe8:	4618      	mov	r0, r3
 800abea:	f000 fa05 	bl	800aff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abf2:	e1de      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abf8:	e1db      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abfa:	4b7b      	ldr	r3, [pc, #492]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac06:	d107      	bne.n	800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac08:	f107 030c 	add.w	r3, r7, #12
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f000 fb47 	bl	800b2a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac16:	e1cc      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac1c:	e1c9      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac1e:	4b72      	ldr	r3, [pc, #456]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f003 0304 	and.w	r3, r3, #4
 800ac26:	2b04      	cmp	r3, #4
 800ac28:	d109      	bne.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac2a:	4b6f      	ldr	r3, [pc, #444]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	08db      	lsrs	r3, r3, #3
 800ac30:	f003 0303 	and.w	r3, r3, #3
 800ac34:	4a6d      	ldr	r2, [pc, #436]	@ (800adec <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ac36:	fa22 f303 	lsr.w	r3, r2, r3
 800ac3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac3c:	e1b9      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac42:	e1b6      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ac44:	4b68      	ldr	r3, [pc, #416]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac50:	d102      	bne.n	800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800ac52:	4b67      	ldr	r3, [pc, #412]	@ (800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ac54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac56:	e1ac      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac5c:	e1a9      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac5e:	4b62      	ldr	r3, [pc, #392]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac6a:	d102      	bne.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800ac6c:	4b61      	ldr	r3, [pc, #388]	@ (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ac6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac70:	e19f      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac72:	2300      	movs	r3, #0
 800ac74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac76:	e19c      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac7c:	e199      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ac7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac82:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ac86:	430b      	orrs	r3, r1
 800ac88:	d173      	bne.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ac8a:	4b57      	ldr	r3, [pc, #348]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ac8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ac92:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac9a:	d02f      	beq.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800ac9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aca2:	d863      	bhi.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800aca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d004      	beq.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800acaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acb0:	d012      	beq.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800acb2:	e05b      	b.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acb4:	4b4c      	ldr	r3, [pc, #304]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800acc0:	d107      	bne.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acc2:	f107 0318 	add.w	r3, r7, #24
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 f996 	bl	800aff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acd0:	e16f      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acd2:	2300      	movs	r3, #0
 800acd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acd6:	e16c      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acd8:	4b43      	ldr	r3, [pc, #268]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ace0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ace4:	d107      	bne.n	800acf6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ace6:	f107 030c 	add.w	r3, r7, #12
 800acea:	4618      	mov	r0, r3
 800acec:	f000 fad8 	bl	800b2a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acf4:	e15d      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acfa:	e15a      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acfc:	4b3a      	ldr	r3, [pc, #232]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800acfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ad04:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad06:	4b38      	ldr	r3, [pc, #224]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f003 0304 	and.w	r3, r3, #4
 800ad0e:	2b04      	cmp	r3, #4
 800ad10:	d10c      	bne.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800ad12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d109      	bne.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad18:	4b33      	ldr	r3, [pc, #204]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	08db      	lsrs	r3, r3, #3
 800ad1e:	f003 0303 	and.w	r3, r3, #3
 800ad22:	4a32      	ldr	r2, [pc, #200]	@ (800adec <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ad24:	fa22 f303 	lsr.w	r3, r2, r3
 800ad28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad2a:	e01e      	b.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad2c:	4b2e      	ldr	r3, [pc, #184]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad38:	d106      	bne.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800ad3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad40:	d102      	bne.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad42:	4b2b      	ldr	r3, [pc, #172]	@ (800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ad44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad46:	e010      	b.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad48:	4b27      	ldr	r3, [pc, #156]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad54:	d106      	bne.n	800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800ad56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad5c:	d102      	bne.n	800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad5e:	4b25      	ldr	r3, [pc, #148]	@ (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ad60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad62:	e002      	b.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad64:	2300      	movs	r3, #0
 800ad66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ad68:	e123      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad6a:	e122      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad70:	e11f      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ad72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad76:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ad7a:	430b      	orrs	r3, r1
 800ad7c:	d13c      	bne.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ad7e:	4b1a      	ldr	r3, [pc, #104]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad86:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d004      	beq.n	800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800ad8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad94:	d012      	beq.n	800adbc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800ad96:	e023      	b.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad98:	4b13      	ldr	r3, [pc, #76]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ada0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ada4:	d107      	bne.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ada6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800adaa:	4618      	mov	r0, r3
 800adac:	f000 fbcc 	bl	800b548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adb4:	e0fd      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adb6:	2300      	movs	r3, #0
 800adb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adba:	e0fa      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adbc:	4b0a      	ldr	r3, [pc, #40]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800adc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800adc8:	d107      	bne.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adca:	f107 0318 	add.w	r3, r7, #24
 800adce:	4618      	mov	r0, r3
 800add0:	f000 f912 	bl	800aff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800add4:	6a3b      	ldr	r3, [r7, #32]
 800add6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800add8:	e0eb      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adda:	2300      	movs	r3, #0
 800addc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adde:	e0e8      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ade0:	2300      	movs	r3, #0
 800ade2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ade4:	e0e5      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ade6:	bf00      	nop
 800ade8:	58024400 	.word	0x58024400
 800adec:	03d09000 	.word	0x03d09000
 800adf0:	003d0900 	.word	0x003d0900
 800adf4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800adf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adfc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ae00:	430b      	orrs	r3, r1
 800ae02:	f040 8085 	bne.w	800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ae06:	4b6d      	ldr	r3, [pc, #436]	@ (800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae0a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ae0e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ae10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ae16:	d06b      	beq.n	800aef0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800ae18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ae1e:	d874      	bhi.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ae20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae26:	d056      	beq.n	800aed6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800ae28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae2e:	d86c      	bhi.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ae30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae36:	d03b      	beq.n	800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800ae38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae3e:	d864      	bhi.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ae40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae46:	d021      	beq.n	800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800ae48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae4e:	d85c      	bhi.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ae50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d004      	beq.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800ae56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae5c:	d004      	beq.n	800ae68 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800ae5e:	e054      	b.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ae60:	f000 f8b4 	bl	800afcc <HAL_RCCEx_GetD3PCLK1Freq>
 800ae64:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae66:	e0a4      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae68:	4b54      	ldr	r3, [pc, #336]	@ (800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae74:	d107      	bne.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae76:	f107 0318 	add.w	r3, r7, #24
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f000 f8bc 	bl	800aff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae84:	e095      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae86:	2300      	movs	r3, #0
 800ae88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae8a:	e092      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae8c:	4b4b      	ldr	r3, [pc, #300]	@ (800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae98:	d107      	bne.n	800aeaa <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae9a:	f107 030c 	add.w	r3, r7, #12
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f000 f9fe 	bl	800b2a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aea8:	e083      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeae:	e080      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aeb0:	4b42      	ldr	r3, [pc, #264]	@ (800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f003 0304 	and.w	r3, r3, #4
 800aeb8:	2b04      	cmp	r3, #4
 800aeba:	d109      	bne.n	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aebc:	4b3f      	ldr	r3, [pc, #252]	@ (800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	08db      	lsrs	r3, r3, #3
 800aec2:	f003 0303 	and.w	r3, r3, #3
 800aec6:	4a3e      	ldr	r2, [pc, #248]	@ (800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800aec8:	fa22 f303 	lsr.w	r3, r2, r3
 800aecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aece:	e070      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aed4:	e06d      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aed6:	4b39      	ldr	r3, [pc, #228]	@ (800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aee2:	d102      	bne.n	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800aee4:	4b37      	ldr	r3, [pc, #220]	@ (800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aee8:	e063      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeee:	e060      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aef0:	4b32      	ldr	r3, [pc, #200]	@ (800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aef8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aefc:	d102      	bne.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800aefe:	4b32      	ldr	r3, [pc, #200]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800af00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af02:	e056      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af04:	2300      	movs	r3, #0
 800af06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af08:	e053      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af0e:	e050      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800af10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af14:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800af18:	430b      	orrs	r3, r1
 800af1a:	d148      	bne.n	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800af1c:	4b27      	ldr	r3, [pc, #156]	@ (800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800af24:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800af26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af2c:	d02a      	beq.n	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800af2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af34:	d838      	bhi.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800af36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d004      	beq.n	800af46 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800af3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af42:	d00d      	beq.n	800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800af44:	e030      	b.n	800afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800af46:	4b1d      	ldr	r3, [pc, #116]	@ (800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af52:	d102      	bne.n	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800af54:	4b1c      	ldr	r3, [pc, #112]	@ (800afc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800af56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af58:	e02b      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af5a:	2300      	movs	r3, #0
 800af5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af5e:	e028      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af60:	4b16      	ldr	r3, [pc, #88]	@ (800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af6c:	d107      	bne.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af72:	4618      	mov	r0, r3
 800af74:	f000 fae8 	bl	800b548 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af7c:	e019      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af7e:	2300      	movs	r3, #0
 800af80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af82:	e016      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af84:	4b0d      	ldr	r3, [pc, #52]	@ (800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af90:	d107      	bne.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af92:	f107 0318 	add.w	r3, r7, #24
 800af96:	4618      	mov	r0, r3
 800af98:	f000 f82e 	bl	800aff8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afa0:	e007      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afa2:	2300      	movs	r3, #0
 800afa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afa6:	e004      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800afa8:	2300      	movs	r3, #0
 800afaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afac:	e001      	b.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800afae:	2300      	movs	r3, #0
 800afb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800afb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3740      	adds	r7, #64	@ 0x40
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	58024400 	.word	0x58024400
 800afc0:	03d09000 	.word	0x03d09000
 800afc4:	003d0900 	.word	0x003d0900
 800afc8:	007a1200 	.word	0x007a1200

0800afcc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800afd0:	f7fe f944 	bl	800925c <HAL_RCC_GetHCLKFreq>
 800afd4:	4602      	mov	r2, r0
 800afd6:	4b06      	ldr	r3, [pc, #24]	@ (800aff0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800afd8:	6a1b      	ldr	r3, [r3, #32]
 800afda:	091b      	lsrs	r3, r3, #4
 800afdc:	f003 0307 	and.w	r3, r3, #7
 800afe0:	4904      	ldr	r1, [pc, #16]	@ (800aff4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800afe2:	5ccb      	ldrb	r3, [r1, r3]
 800afe4:	f003 031f 	and.w	r3, r3, #31
 800afe8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800afec:	4618      	mov	r0, r3
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	58024400 	.word	0x58024400
 800aff4:	080103b8 	.word	0x080103b8

0800aff8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aff8:	b480      	push	{r7}
 800affa:	b089      	sub	sp, #36	@ 0x24
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b000:	4ba1      	ldr	r3, [pc, #644]	@ (800b288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b004:	f003 0303 	and.w	r3, r3, #3
 800b008:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b00a:	4b9f      	ldr	r3, [pc, #636]	@ (800b288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b00c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b00e:	0b1b      	lsrs	r3, r3, #12
 800b010:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b014:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b016:	4b9c      	ldr	r3, [pc, #624]	@ (800b288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b01a:	091b      	lsrs	r3, r3, #4
 800b01c:	f003 0301 	and.w	r3, r3, #1
 800b020:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b022:	4b99      	ldr	r3, [pc, #612]	@ (800b288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b026:	08db      	lsrs	r3, r3, #3
 800b028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	fb02 f303 	mul.w	r3, r2, r3
 800b032:	ee07 3a90 	vmov	s15, r3
 800b036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b03a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	2b00      	cmp	r3, #0
 800b042:	f000 8111 	beq.w	800b268 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	2b02      	cmp	r3, #2
 800b04a:	f000 8083 	beq.w	800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	2b02      	cmp	r3, #2
 800b052:	f200 80a1 	bhi.w	800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d003      	beq.n	800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d056      	beq.n	800b110 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b062:	e099      	b.n	800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b064:	4b88      	ldr	r3, [pc, #544]	@ (800b288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 0320 	and.w	r3, r3, #32
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d02d      	beq.n	800b0cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b070:	4b85      	ldr	r3, [pc, #532]	@ (800b288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	08db      	lsrs	r3, r3, #3
 800b076:	f003 0303 	and.w	r3, r3, #3
 800b07a:	4a84      	ldr	r2, [pc, #528]	@ (800b28c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b07c:	fa22 f303 	lsr.w	r3, r2, r3
 800b080:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	ee07 3a90 	vmov	s15, r3
 800b088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	ee07 3a90 	vmov	s15, r3
 800b092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b09a:	4b7b      	ldr	r3, [pc, #492]	@ (800b288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b09c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0a2:	ee07 3a90 	vmov	s15, r3
 800b0a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b0ca:	e087      	b.n	800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	ee07 3a90 	vmov	s15, r3
 800b0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b294 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b0da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0de:	4b6a      	ldr	r3, [pc, #424]	@ (800b288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0e6:	ee07 3a90 	vmov	s15, r3
 800b0ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b10a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b10e:	e065      	b.n	800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	ee07 3a90 	vmov	s15, r3
 800b116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b11a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b11e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b122:	4b59      	ldr	r3, [pc, #356]	@ (800b288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b12a:	ee07 3a90 	vmov	s15, r3
 800b12e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b132:	ed97 6a03 	vldr	s12, [r7, #12]
 800b136:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b13a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b13e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b14a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b14e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b152:	e043      	b.n	800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	ee07 3a90 	vmov	s15, r3
 800b15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b15e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b29c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b166:	4b48      	ldr	r3, [pc, #288]	@ (800b288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b16a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b16e:	ee07 3a90 	vmov	s15, r3
 800b172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b176:	ed97 6a03 	vldr	s12, [r7, #12]
 800b17a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b17e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b18a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b18e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b196:	e021      	b.n	800b1dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	ee07 3a90 	vmov	s15, r3
 800b19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b1a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1aa:	4b37      	ldr	r3, [pc, #220]	@ (800b288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1b2:	ee07 3a90 	vmov	s15, r3
 800b1b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b290 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b1dc:	4b2a      	ldr	r3, [pc, #168]	@ (800b288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1e0:	0a5b      	lsrs	r3, r3, #9
 800b1e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1e6:	ee07 3a90 	vmov	s15, r3
 800b1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b202:	ee17 2a90 	vmov	r2, s15
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b20a:	4b1f      	ldr	r3, [pc, #124]	@ (800b288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b20c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b20e:	0c1b      	lsrs	r3, r3, #16
 800b210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b214:	ee07 3a90 	vmov	s15, r3
 800b218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b21c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b220:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b224:	edd7 6a07 	vldr	s13, [r7, #28]
 800b228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b22c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b230:	ee17 2a90 	vmov	r2, s15
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b238:	4b13      	ldr	r3, [pc, #76]	@ (800b288 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b23a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b23c:	0e1b      	lsrs	r3, r3, #24
 800b23e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b242:	ee07 3a90 	vmov	s15, r3
 800b246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b24a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b24e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b252:	edd7 6a07 	vldr	s13, [r7, #28]
 800b256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b25a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b25e:	ee17 2a90 	vmov	r2, s15
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b266:	e008      	b.n	800b27a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	609a      	str	r2, [r3, #8]
}
 800b27a:	bf00      	nop
 800b27c:	3724      	adds	r7, #36	@ 0x24
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop
 800b288:	58024400 	.word	0x58024400
 800b28c:	03d09000 	.word	0x03d09000
 800b290:	46000000 	.word	0x46000000
 800b294:	4c742400 	.word	0x4c742400
 800b298:	4a742400 	.word	0x4a742400
 800b29c:	4af42400 	.word	0x4af42400

0800b2a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b089      	sub	sp, #36	@ 0x24
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2a8:	4ba1      	ldr	r3, [pc, #644]	@ (800b530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2ac:	f003 0303 	and.w	r3, r3, #3
 800b2b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b2b2:	4b9f      	ldr	r3, [pc, #636]	@ (800b530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2b6:	0d1b      	lsrs	r3, r3, #20
 800b2b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b2bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b2be:	4b9c      	ldr	r3, [pc, #624]	@ (800b530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c2:	0a1b      	lsrs	r3, r3, #8
 800b2c4:	f003 0301 	and.w	r3, r3, #1
 800b2c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b2ca:	4b99      	ldr	r3, [pc, #612]	@ (800b530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2ce:	08db      	lsrs	r3, r3, #3
 800b2d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2d4:	693a      	ldr	r2, [r7, #16]
 800b2d6:	fb02 f303 	mul.w	r3, r2, r3
 800b2da:	ee07 3a90 	vmov	s15, r3
 800b2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f000 8111 	beq.w	800b510 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	f000 8083 	beq.w	800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	2b02      	cmp	r3, #2
 800b2fa:	f200 80a1 	bhi.w	800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d003      	beq.n	800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	2b01      	cmp	r3, #1
 800b308:	d056      	beq.n	800b3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b30a:	e099      	b.n	800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b30c:	4b88      	ldr	r3, [pc, #544]	@ (800b530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 0320 	and.w	r3, r3, #32
 800b314:	2b00      	cmp	r3, #0
 800b316:	d02d      	beq.n	800b374 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b318:	4b85      	ldr	r3, [pc, #532]	@ (800b530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	08db      	lsrs	r3, r3, #3
 800b31e:	f003 0303 	and.w	r3, r3, #3
 800b322:	4a84      	ldr	r2, [pc, #528]	@ (800b534 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b324:	fa22 f303 	lsr.w	r3, r2, r3
 800b328:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	ee07 3a90 	vmov	s15, r3
 800b330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	ee07 3a90 	vmov	s15, r3
 800b33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b342:	4b7b      	ldr	r3, [pc, #492]	@ (800b530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b34a:	ee07 3a90 	vmov	s15, r3
 800b34e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b352:	ed97 6a03 	vldr	s12, [r7, #12]
 800b356:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b35a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b35e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b36e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b372:	e087      	b.n	800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	ee07 3a90 	vmov	s15, r3
 800b37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b37e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b53c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b386:	4b6a      	ldr	r3, [pc, #424]	@ (800b530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b38a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b38e:	ee07 3a90 	vmov	s15, r3
 800b392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b396:	ed97 6a03 	vldr	s12, [r7, #12]
 800b39a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b39e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3b6:	e065      	b.n	800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	ee07 3a90 	vmov	s15, r3
 800b3be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b3c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ca:	4b59      	ldr	r3, [pc, #356]	@ (800b530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3d2:	ee07 3a90 	vmov	s15, r3
 800b3d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3fa:	e043      	b.n	800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	ee07 3a90 	vmov	s15, r3
 800b402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b406:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b544 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b40a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b40e:	4b48      	ldr	r3, [pc, #288]	@ (800b530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b416:	ee07 3a90 	vmov	s15, r3
 800b41a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b41e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b422:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b42a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b42e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b43a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b43e:	e021      	b.n	800b484 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	ee07 3a90 	vmov	s15, r3
 800b446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b44a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b44e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b452:	4b37      	ldr	r3, [pc, #220]	@ (800b530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b45a:	ee07 3a90 	vmov	s15, r3
 800b45e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b462:	ed97 6a03 	vldr	s12, [r7, #12]
 800b466:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b538 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b46a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b46e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b47a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b47e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b482:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b484:	4b2a      	ldr	r3, [pc, #168]	@ (800b530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b488:	0a5b      	lsrs	r3, r3, #9
 800b48a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b48e:	ee07 3a90 	vmov	s15, r3
 800b492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b496:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b49a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b49e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4aa:	ee17 2a90 	vmov	r2, s15
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b4b2:	4b1f      	ldr	r3, [pc, #124]	@ (800b530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4b6:	0c1b      	lsrs	r3, r3, #16
 800b4b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4bc:	ee07 3a90 	vmov	s15, r3
 800b4c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4d8:	ee17 2a90 	vmov	r2, s15
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b4e0:	4b13      	ldr	r3, [pc, #76]	@ (800b530 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4e4:	0e1b      	lsrs	r3, r3, #24
 800b4e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4ea:	ee07 3a90 	vmov	s15, r3
 800b4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b502:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b506:	ee17 2a90 	vmov	r2, s15
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b50e:	e008      	b.n	800b522 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	609a      	str	r2, [r3, #8]
}
 800b522:	bf00      	nop
 800b524:	3724      	adds	r7, #36	@ 0x24
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	58024400 	.word	0x58024400
 800b534:	03d09000 	.word	0x03d09000
 800b538:	46000000 	.word	0x46000000
 800b53c:	4c742400 	.word	0x4c742400
 800b540:	4a742400 	.word	0x4a742400
 800b544:	4af42400 	.word	0x4af42400

0800b548 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b548:	b480      	push	{r7}
 800b54a:	b089      	sub	sp, #36	@ 0x24
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b550:	4ba0      	ldr	r3, [pc, #640]	@ (800b7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b554:	f003 0303 	and.w	r3, r3, #3
 800b558:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b55a:	4b9e      	ldr	r3, [pc, #632]	@ (800b7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b55c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b55e:	091b      	lsrs	r3, r3, #4
 800b560:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b564:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b566:	4b9b      	ldr	r3, [pc, #620]	@ (800b7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b56a:	f003 0301 	and.w	r3, r3, #1
 800b56e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b570:	4b98      	ldr	r3, [pc, #608]	@ (800b7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b574:	08db      	lsrs	r3, r3, #3
 800b576:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b57a:	693a      	ldr	r2, [r7, #16]
 800b57c:	fb02 f303 	mul.w	r3, r2, r3
 800b580:	ee07 3a90 	vmov	s15, r3
 800b584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b588:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	f000 8111 	beq.w	800b7b6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	2b02      	cmp	r3, #2
 800b598:	f000 8083 	beq.w	800b6a2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	2b02      	cmp	r3, #2
 800b5a0:	f200 80a1 	bhi.w	800b6e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d003      	beq.n	800b5b2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d056      	beq.n	800b65e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b5b0:	e099      	b.n	800b6e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5b2:	4b88      	ldr	r3, [pc, #544]	@ (800b7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f003 0320 	and.w	r3, r3, #32
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d02d      	beq.n	800b61a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5be:	4b85      	ldr	r3, [pc, #532]	@ (800b7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	08db      	lsrs	r3, r3, #3
 800b5c4:	f003 0303 	and.w	r3, r3, #3
 800b5c8:	4a83      	ldr	r2, [pc, #524]	@ (800b7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b5ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b5ce:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	ee07 3a90 	vmov	s15, r3
 800b5d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	ee07 3a90 	vmov	s15, r3
 800b5e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5e8:	4b7a      	ldr	r3, [pc, #488]	@ (800b7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f0:	ee07 3a90 	vmov	s15, r3
 800b5f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5fc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b7dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b608:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b60c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b610:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b614:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b618:	e087      	b.n	800b72a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	ee07 3a90 	vmov	s15, r3
 800b620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b624:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b7e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b62c:	4b69      	ldr	r3, [pc, #420]	@ (800b7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b62e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b634:	ee07 3a90 	vmov	s15, r3
 800b638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b63c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b640:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b7dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b64c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b654:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b658:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b65c:	e065      	b.n	800b72a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	ee07 3a90 	vmov	s15, r3
 800b664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b668:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b7e4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b66c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b670:	4b58      	ldr	r3, [pc, #352]	@ (800b7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b678:	ee07 3a90 	vmov	s15, r3
 800b67c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b680:	ed97 6a03 	vldr	s12, [r7, #12]
 800b684:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b7dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b68c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b690:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b69c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6a0:	e043      	b.n	800b72a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	ee07 3a90 	vmov	s15, r3
 800b6a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ac:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b7e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b6b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6b4:	4b47      	ldr	r3, [pc, #284]	@ (800b7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6bc:	ee07 3a90 	vmov	s15, r3
 800b6c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6c8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b7dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b6cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6e4:	e021      	b.n	800b72a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	ee07 3a90 	vmov	s15, r3
 800b6ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6f0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b7e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b6f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6f8:	4b36      	ldr	r3, [pc, #216]	@ (800b7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b700:	ee07 3a90 	vmov	s15, r3
 800b704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b708:	ed97 6a03 	vldr	s12, [r7, #12]
 800b70c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b7dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b718:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b71c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b720:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b724:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b728:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b72a:	4b2a      	ldr	r3, [pc, #168]	@ (800b7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b72c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b72e:	0a5b      	lsrs	r3, r3, #9
 800b730:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b734:	ee07 3a90 	vmov	s15, r3
 800b738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b73c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b740:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b744:	edd7 6a07 	vldr	s13, [r7, #28]
 800b748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b74c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b750:	ee17 2a90 	vmov	r2, s15
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b758:	4b1e      	ldr	r3, [pc, #120]	@ (800b7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b75a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b75c:	0c1b      	lsrs	r3, r3, #16
 800b75e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b762:	ee07 3a90 	vmov	s15, r3
 800b766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b76a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b76e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b772:	edd7 6a07 	vldr	s13, [r7, #28]
 800b776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b77a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b77e:	ee17 2a90 	vmov	r2, s15
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b786:	4b13      	ldr	r3, [pc, #76]	@ (800b7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b78a:	0e1b      	lsrs	r3, r3, #24
 800b78c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b790:	ee07 3a90 	vmov	s15, r3
 800b794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b798:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b79c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7ac:	ee17 2a90 	vmov	r2, s15
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b7b4:	e008      	b.n	800b7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	609a      	str	r2, [r3, #8]
}
 800b7c8:	bf00      	nop
 800b7ca:	3724      	adds	r7, #36	@ 0x24
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr
 800b7d4:	58024400 	.word	0x58024400
 800b7d8:	03d09000 	.word	0x03d09000
 800b7dc:	46000000 	.word	0x46000000
 800b7e0:	4c742400 	.word	0x4c742400
 800b7e4:	4a742400 	.word	0x4a742400
 800b7e8:	4af42400 	.word	0x4af42400

0800b7ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b7fa:	4b53      	ldr	r3, [pc, #332]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b7fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7fe:	f003 0303 	and.w	r3, r3, #3
 800b802:	2b03      	cmp	r3, #3
 800b804:	d101      	bne.n	800b80a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	e099      	b.n	800b93e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b80a:	4b4f      	ldr	r3, [pc, #316]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4a4e      	ldr	r2, [pc, #312]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b810:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b816:	f7f7 f85b 	bl	80028d0 <HAL_GetTick>
 800b81a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b81c:	e008      	b.n	800b830 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b81e:	f7f7 f857 	bl	80028d0 <HAL_GetTick>
 800b822:	4602      	mov	r2, r0
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	1ad3      	subs	r3, r2, r3
 800b828:	2b02      	cmp	r3, #2
 800b82a:	d901      	bls.n	800b830 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b82c:	2303      	movs	r3, #3
 800b82e:	e086      	b.n	800b93e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b830:	4b45      	ldr	r3, [pc, #276]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d1f0      	bne.n	800b81e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b83c:	4b42      	ldr	r3, [pc, #264]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b83e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b840:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	031b      	lsls	r3, r3, #12
 800b84a:	493f      	ldr	r1, [pc, #252]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b84c:	4313      	orrs	r3, r2
 800b84e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	3b01      	subs	r3, #1
 800b856:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	3b01      	subs	r3, #1
 800b860:	025b      	lsls	r3, r3, #9
 800b862:	b29b      	uxth	r3, r3
 800b864:	431a      	orrs	r2, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	68db      	ldr	r3, [r3, #12]
 800b86a:	3b01      	subs	r3, #1
 800b86c:	041b      	lsls	r3, r3, #16
 800b86e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b872:	431a      	orrs	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	3b01      	subs	r3, #1
 800b87a:	061b      	lsls	r3, r3, #24
 800b87c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b880:	4931      	ldr	r1, [pc, #196]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b882:	4313      	orrs	r3, r2
 800b884:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b886:	4b30      	ldr	r3, [pc, #192]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b88a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	695b      	ldr	r3, [r3, #20]
 800b892:	492d      	ldr	r1, [pc, #180]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b894:	4313      	orrs	r3, r2
 800b896:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b898:	4b2b      	ldr	r3, [pc, #172]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b89a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b89c:	f023 0220 	bic.w	r2, r3, #32
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	699b      	ldr	r3, [r3, #24]
 800b8a4:	4928      	ldr	r1, [pc, #160]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b8aa:	4b27      	ldr	r3, [pc, #156]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b8ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ae:	4a26      	ldr	r2, [pc, #152]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b8b0:	f023 0310 	bic.w	r3, r3, #16
 800b8b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b8b6:	4b24      	ldr	r3, [pc, #144]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b8b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b8ba:	4b24      	ldr	r3, [pc, #144]	@ (800b94c <RCCEx_PLL2_Config+0x160>)
 800b8bc:	4013      	ands	r3, r2
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	69d2      	ldr	r2, [r2, #28]
 800b8c2:	00d2      	lsls	r2, r2, #3
 800b8c4:	4920      	ldr	r1, [pc, #128]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b8ca:	4b1f      	ldr	r3, [pc, #124]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ce:	4a1e      	ldr	r2, [pc, #120]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b8d0:	f043 0310 	orr.w	r3, r3, #16
 800b8d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d106      	bne.n	800b8ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b8dc:	4b1a      	ldr	r3, [pc, #104]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8e0:	4a19      	ldr	r2, [pc, #100]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b8e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b8e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b8e8:	e00f      	b.n	800b90a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d106      	bne.n	800b8fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b8f0:	4b15      	ldr	r3, [pc, #84]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b8f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8f4:	4a14      	ldr	r2, [pc, #80]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b8f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b8fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b8fc:	e005      	b.n	800b90a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b8fe:	4b12      	ldr	r3, [pc, #72]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b902:	4a11      	ldr	r2, [pc, #68]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b904:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b908:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b90a:	4b0f      	ldr	r3, [pc, #60]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a0e      	ldr	r2, [pc, #56]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b910:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b916:	f7f6 ffdb 	bl	80028d0 <HAL_GetTick>
 800b91a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b91c:	e008      	b.n	800b930 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b91e:	f7f6 ffd7 	bl	80028d0 <HAL_GetTick>
 800b922:	4602      	mov	r2, r0
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	2b02      	cmp	r3, #2
 800b92a:	d901      	bls.n	800b930 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b92c:	2303      	movs	r3, #3
 800b92e:	e006      	b.n	800b93e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b930:	4b05      	ldr	r3, [pc, #20]	@ (800b948 <RCCEx_PLL2_Config+0x15c>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d0f0      	beq.n	800b91e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	58024400 	.word	0x58024400
 800b94c:	ffff0007 	.word	0xffff0007

0800b950 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b95a:	2300      	movs	r3, #0
 800b95c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b95e:	4b53      	ldr	r3, [pc, #332]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800b960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b962:	f003 0303 	and.w	r3, r3, #3
 800b966:	2b03      	cmp	r3, #3
 800b968:	d101      	bne.n	800b96e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e099      	b.n	800baa2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b96e:	4b4f      	ldr	r3, [pc, #316]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a4e      	ldr	r2, [pc, #312]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800b974:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b97a:	f7f6 ffa9 	bl	80028d0 <HAL_GetTick>
 800b97e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b980:	e008      	b.n	800b994 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b982:	f7f6 ffa5 	bl	80028d0 <HAL_GetTick>
 800b986:	4602      	mov	r2, r0
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	1ad3      	subs	r3, r2, r3
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d901      	bls.n	800b994 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b990:	2303      	movs	r3, #3
 800b992:	e086      	b.n	800baa2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b994:	4b45      	ldr	r3, [pc, #276]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1f0      	bne.n	800b982 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b9a0:	4b42      	ldr	r3, [pc, #264]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800b9a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	051b      	lsls	r3, r3, #20
 800b9ae:	493f      	ldr	r1, [pc, #252]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	628b      	str	r3, [r1, #40]	@ 0x28
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	3b01      	subs	r3, #1
 800b9ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	025b      	lsls	r3, r3, #9
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	431a      	orrs	r2, r3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	041b      	lsls	r3, r3, #16
 800b9d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b9d6:	431a      	orrs	r2, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	691b      	ldr	r3, [r3, #16]
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	061b      	lsls	r3, r3, #24
 800b9e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b9e4:	4931      	ldr	r1, [pc, #196]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b9ea:	4b30      	ldr	r3, [pc, #192]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800b9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	695b      	ldr	r3, [r3, #20]
 800b9f6:	492d      	ldr	r1, [pc, #180]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b9fc:	4b2b      	ldr	r3, [pc, #172]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800b9fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba00:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	699b      	ldr	r3, [r3, #24]
 800ba08:	4928      	ldr	r1, [pc, #160]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ba0e:	4b27      	ldr	r3, [pc, #156]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800ba10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba12:	4a26      	ldr	r2, [pc, #152]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800ba14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ba1a:	4b24      	ldr	r3, [pc, #144]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800ba1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba1e:	4b24      	ldr	r3, [pc, #144]	@ (800bab0 <RCCEx_PLL3_Config+0x160>)
 800ba20:	4013      	ands	r3, r2
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	69d2      	ldr	r2, [r2, #28]
 800ba26:	00d2      	lsls	r2, r2, #3
 800ba28:	4920      	ldr	r1, [pc, #128]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ba2e:	4b1f      	ldr	r3, [pc, #124]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800ba30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba32:	4a1e      	ldr	r2, [pc, #120]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800ba34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d106      	bne.n	800ba4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ba40:	4b1a      	ldr	r3, [pc, #104]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800ba42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba44:	4a19      	ldr	r2, [pc, #100]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800ba46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ba4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ba4c:	e00f      	b.n	800ba6e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d106      	bne.n	800ba62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ba54:	4b15      	ldr	r3, [pc, #84]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800ba56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba58:	4a14      	ldr	r2, [pc, #80]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800ba5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ba5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ba60:	e005      	b.n	800ba6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ba62:	4b12      	ldr	r3, [pc, #72]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800ba64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba66:	4a11      	ldr	r2, [pc, #68]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800ba68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ba6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ba6e:	4b0f      	ldr	r3, [pc, #60]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a0e      	ldr	r2, [pc, #56]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800ba74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba7a:	f7f6 ff29 	bl	80028d0 <HAL_GetTick>
 800ba7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba80:	e008      	b.n	800ba94 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba82:	f7f6 ff25 	bl	80028d0 <HAL_GetTick>
 800ba86:	4602      	mov	r2, r0
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	1ad3      	subs	r3, r2, r3
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	d901      	bls.n	800ba94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba90:	2303      	movs	r3, #3
 800ba92:	e006      	b.n	800baa2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba94:	4b05      	ldr	r3, [pc, #20]	@ (800baac <RCCEx_PLL3_Config+0x15c>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d0f0      	beq.n	800ba82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800baa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	58024400 	.word	0x58024400
 800bab0:	ffff0007 	.word	0xffff0007

0800bab4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b084      	sub	sp, #16
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d101      	bne.n	800bac6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bac2:	2301      	movs	r3, #1
 800bac4:	e10f      	b.n	800bce6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a87      	ldr	r2, [pc, #540]	@ (800bcf0 <HAL_SPI_Init+0x23c>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d00f      	beq.n	800baf6 <HAL_SPI_Init+0x42>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a86      	ldr	r2, [pc, #536]	@ (800bcf4 <HAL_SPI_Init+0x240>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d00a      	beq.n	800baf6 <HAL_SPI_Init+0x42>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a84      	ldr	r2, [pc, #528]	@ (800bcf8 <HAL_SPI_Init+0x244>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d005      	beq.n	800baf6 <HAL_SPI_Init+0x42>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	2b0f      	cmp	r3, #15
 800baf0:	d901      	bls.n	800baf6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e0f7      	b.n	800bce6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 fbbc 	bl	800c274 <SPI_GetPacketSize>
 800bafc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a7b      	ldr	r2, [pc, #492]	@ (800bcf0 <HAL_SPI_Init+0x23c>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d00c      	beq.n	800bb22 <HAL_SPI_Init+0x6e>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a79      	ldr	r2, [pc, #484]	@ (800bcf4 <HAL_SPI_Init+0x240>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d007      	beq.n	800bb22 <HAL_SPI_Init+0x6e>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a78      	ldr	r2, [pc, #480]	@ (800bcf8 <HAL_SPI_Init+0x244>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d002      	beq.n	800bb22 <HAL_SPI_Init+0x6e>
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2b08      	cmp	r3, #8
 800bb20:	d811      	bhi.n	800bb46 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bb26:	4a72      	ldr	r2, [pc, #456]	@ (800bcf0 <HAL_SPI_Init+0x23c>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d009      	beq.n	800bb40 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a70      	ldr	r2, [pc, #448]	@ (800bcf4 <HAL_SPI_Init+0x240>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d004      	beq.n	800bb40 <HAL_SPI_Init+0x8c>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4a6f      	ldr	r2, [pc, #444]	@ (800bcf8 <HAL_SPI_Init+0x244>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d104      	bne.n	800bb4a <HAL_SPI_Init+0x96>
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2b10      	cmp	r3, #16
 800bb44:	d901      	bls.n	800bb4a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	e0cd      	b.n	800bce6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d106      	bne.n	800bb64 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f7f6 fb26 	bl	80021b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2202      	movs	r2, #2
 800bb68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f022 0201 	bic.w	r2, r2, #1
 800bb7a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bb86:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	699b      	ldr	r3, [r3, #24]
 800bb8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bb90:	d119      	bne.n	800bbc6 <HAL_SPI_Init+0x112>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bb9a:	d103      	bne.n	800bba4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d008      	beq.n	800bbb6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d10c      	bne.n	800bbc6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bbb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bbb4:	d107      	bne.n	800bbc6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bbc4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00f      	beq.n	800bbf2 <HAL_SPI_Init+0x13e>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	2b06      	cmp	r3, #6
 800bbd8:	d90b      	bls.n	800bbf2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	430a      	orrs	r2, r1
 800bbee:	601a      	str	r2, [r3, #0]
 800bbf0:	e007      	b.n	800bc02 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bc00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	69da      	ldr	r2, [r3, #28]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc0a:	431a      	orrs	r2, r3
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc14:	ea42 0103 	orr.w	r1, r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	68da      	ldr	r2, [r3, #12]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	430a      	orrs	r2, r1
 800bc22:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc2c:	431a      	orrs	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc32:	431a      	orrs	r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	699b      	ldr	r3, [r3, #24]
 800bc38:	431a      	orrs	r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	691b      	ldr	r3, [r3, #16]
 800bc3e:	431a      	orrs	r2, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	695b      	ldr	r3, [r3, #20]
 800bc44:	431a      	orrs	r2, r3
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6a1b      	ldr	r3, [r3, #32]
 800bc4a:	431a      	orrs	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	431a      	orrs	r2, r3
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc56:	431a      	orrs	r2, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	431a      	orrs	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc62:	ea42 0103 	orr.w	r1, r2, r3
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	430a      	orrs	r2, r1
 800bc70:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d113      	bne.n	800bca2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc8c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bca0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f022 0201 	bic.w	r2, r2, #1
 800bcb0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00a      	beq.n	800bcd4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	430a      	orrs	r2, r1
 800bcd2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3710      	adds	r7, #16
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	40013000 	.word	0x40013000
 800bcf4:	40003800 	.word	0x40003800
 800bcf8:	40003c00 	.word	0x40003c00

0800bcfc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b088      	sub	sp, #32
 800bd00:	af02      	add	r7, sp, #8
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	603b      	str	r3, [r7, #0]
 800bd08:	4613      	mov	r3, r2
 800bd0a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	3320      	adds	r3, #32
 800bd12:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd14:	f7f6 fddc 	bl	80028d0 <HAL_GetTick>
 800bd18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d001      	beq.n	800bd2a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800bd26:	2302      	movs	r3, #2
 800bd28:	e1d1      	b.n	800c0ce <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d002      	beq.n	800bd36 <HAL_SPI_Transmit+0x3a>
 800bd30:	88fb      	ldrh	r3, [r7, #6]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d101      	bne.n	800bd3a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	e1c9      	b.n	800c0ce <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d101      	bne.n	800bd48 <HAL_SPI_Transmit+0x4c>
 800bd44:	2302      	movs	r3, #2
 800bd46:	e1c2      	b.n	800c0ce <HAL_SPI_Transmit+0x3d2>
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2203      	movs	r2, #3
 800bd54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	68ba      	ldr	r2, [r7, #8]
 800bd64:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	88fa      	ldrh	r2, [r7, #6]
 800bd6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	88fa      	ldrh	r2, [r7, #6]
 800bd72:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2200      	movs	r2, #0
 800bd88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2200      	movs	r2, #0
 800bd96:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bda0:	d108      	bne.n	800bdb4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	681a      	ldr	r2, [r3, #0]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bdb0:	601a      	str	r2, [r3, #0]
 800bdb2:	e009      	b.n	800bdc8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800bdc6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	685a      	ldr	r2, [r3, #4]
 800bdce:	4b96      	ldr	r3, [pc, #600]	@ (800c028 <HAL_SPI_Transmit+0x32c>)
 800bdd0:	4013      	ands	r3, r2
 800bdd2:	88f9      	ldrh	r1, [r7, #6]
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	6812      	ldr	r2, [r2, #0]
 800bdd8:	430b      	orrs	r3, r1
 800bdda:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f042 0201 	orr.w	r2, r2, #1
 800bdea:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bdf4:	d107      	bne.n	800be06 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800be04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	2b0f      	cmp	r3, #15
 800be0c:	d947      	bls.n	800be9e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800be0e:	e03f      	b.n	800be90 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	695b      	ldr	r3, [r3, #20]
 800be16:	f003 0302 	and.w	r3, r3, #2
 800be1a:	2b02      	cmp	r3, #2
 800be1c:	d114      	bne.n	800be48 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	6812      	ldr	r2, [r2, #0]
 800be28:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be2e:	1d1a      	adds	r2, r3, #4
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	3b01      	subs	r3, #1
 800be3e:	b29a      	uxth	r2, r3
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800be46:	e023      	b.n	800be90 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be48:	f7f6 fd42 	bl	80028d0 <HAL_GetTick>
 800be4c:	4602      	mov	r2, r0
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	683a      	ldr	r2, [r7, #0]
 800be54:	429a      	cmp	r2, r3
 800be56:	d803      	bhi.n	800be60 <HAL_SPI_Transmit+0x164>
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be5e:	d102      	bne.n	800be66 <HAL_SPI_Transmit+0x16a>
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d114      	bne.n	800be90 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	f000 f936 	bl	800c0d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2201      	movs	r2, #1
 800be80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2200      	movs	r2, #0
 800be88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800be8c:	2303      	movs	r3, #3
 800be8e:	e11e      	b.n	800c0ce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be96:	b29b      	uxth	r3, r3
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1b9      	bne.n	800be10 <HAL_SPI_Transmit+0x114>
 800be9c:	e0f1      	b.n	800c082 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	2b07      	cmp	r3, #7
 800bea4:	f240 80e6 	bls.w	800c074 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bea8:	e05d      	b.n	800bf66 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	695b      	ldr	r3, [r3, #20]
 800beb0:	f003 0302 	and.w	r3, r3, #2
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	d132      	bne.n	800bf1e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d918      	bls.n	800bef6 <HAL_SPI_Transmit+0x1fa>
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d014      	beq.n	800bef6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	6812      	ldr	r2, [r2, #0]
 800bed6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bedc:	1d1a      	adds	r2, r3, #4
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bee8:	b29b      	uxth	r3, r3
 800beea:	3b02      	subs	r3, #2
 800beec:	b29a      	uxth	r2, r3
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bef4:	e037      	b.n	800bf66 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800befa:	881a      	ldrh	r2, [r3, #0]
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf04:	1c9a      	adds	r2, r3, #2
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	3b01      	subs	r3, #1
 800bf14:	b29a      	uxth	r2, r3
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bf1c:	e023      	b.n	800bf66 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf1e:	f7f6 fcd7 	bl	80028d0 <HAL_GetTick>
 800bf22:	4602      	mov	r2, r0
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	1ad3      	subs	r3, r2, r3
 800bf28:	683a      	ldr	r2, [r7, #0]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d803      	bhi.n	800bf36 <HAL_SPI_Transmit+0x23a>
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf34:	d102      	bne.n	800bf3c <HAL_SPI_Transmit+0x240>
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d114      	bne.n	800bf66 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bf3c:	68f8      	ldr	r0, [r7, #12]
 800bf3e:	f000 f8cb 	bl	800c0d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2201      	movs	r2, #1
 800bf56:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bf62:	2303      	movs	r3, #3
 800bf64:	e0b3      	b.n	800c0ce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d19b      	bne.n	800beaa <HAL_SPI_Transmit+0x1ae>
 800bf72:	e086      	b.n	800c082 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	695b      	ldr	r3, [r3, #20]
 800bf7a:	f003 0302 	and.w	r3, r3, #2
 800bf7e:	2b02      	cmp	r3, #2
 800bf80:	d154      	bne.n	800c02c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	2b03      	cmp	r3, #3
 800bf8c:	d918      	bls.n	800bfc0 <HAL_SPI_Transmit+0x2c4>
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf92:	2b40      	cmp	r3, #64	@ 0x40
 800bf94:	d914      	bls.n	800bfc0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	6812      	ldr	r2, [r2, #0]
 800bfa0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfa6:	1d1a      	adds	r2, r3, #4
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	3b04      	subs	r3, #4
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bfbe:	e059      	b.n	800c074 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d917      	bls.n	800bffc <HAL_SPI_Transmit+0x300>
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d013      	beq.n	800bffc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfd8:	881a      	ldrh	r2, [r3, #0]
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfe2:	1c9a      	adds	r2, r3, #2
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	3b02      	subs	r3, #2
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bffa:	e03b      	b.n	800c074 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	3320      	adds	r3, #32
 800c006:	7812      	ldrb	r2, [r2, #0]
 800c008:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c00e:	1c5a      	adds	r2, r3, #1
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	3b01      	subs	r3, #1
 800c01e:	b29a      	uxth	r2, r3
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c026:	e025      	b.n	800c074 <HAL_SPI_Transmit+0x378>
 800c028:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c02c:	f7f6 fc50 	bl	80028d0 <HAL_GetTick>
 800c030:	4602      	mov	r2, r0
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	1ad3      	subs	r3, r2, r3
 800c036:	683a      	ldr	r2, [r7, #0]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d803      	bhi.n	800c044 <HAL_SPI_Transmit+0x348>
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c042:	d102      	bne.n	800c04a <HAL_SPI_Transmit+0x34e>
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d114      	bne.n	800c074 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f000 f844 	bl	800c0d8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c056:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2201      	movs	r2, #1
 800c064:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2200      	movs	r2, #0
 800c06c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c070:	2303      	movs	r3, #3
 800c072:	e02c      	b.n	800c0ce <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f47f af79 	bne.w	800bf74 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	9300      	str	r3, [sp, #0]
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	2200      	movs	r2, #0
 800c08a:	2108      	movs	r1, #8
 800c08c:	68f8      	ldr	r0, [r7, #12]
 800c08e:	f000 f8c3 	bl	800c218 <SPI_WaitOnFlagUntilTimeout>
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d007      	beq.n	800c0a8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c09e:	f043 0220 	orr.w	r2, r3, #32
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c0a8:	68f8      	ldr	r0, [r7, #12]
 800c0aa:	f000 f815 	bl	800c0d8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d001      	beq.n	800c0cc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e000      	b.n	800c0ce <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800c0cc:	2300      	movs	r3, #0
  }
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3718      	adds	r7, #24
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop

0800c0d8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b085      	sub	sp, #20
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	695b      	ldr	r3, [r3, #20]
 800c0e6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	699a      	ldr	r2, [r3, #24]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f042 0208 	orr.w	r2, r2, #8
 800c0f6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	699a      	ldr	r2, [r3, #24]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f042 0210 	orr.w	r2, r2, #16
 800c106:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f022 0201 	bic.w	r2, r2, #1
 800c116:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	6919      	ldr	r1, [r3, #16]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	4b3c      	ldr	r3, [pc, #240]	@ (800c214 <SPI_CloseTransfer+0x13c>)
 800c124:	400b      	ands	r3, r1
 800c126:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	689a      	ldr	r2, [r3, #8]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c136:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	2b04      	cmp	r3, #4
 800c142:	d014      	beq.n	800c16e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f003 0320 	and.w	r3, r3, #32
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00f      	beq.n	800c16e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c154:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	699a      	ldr	r2, [r3, #24]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f042 0220 	orr.w	r2, r2, #32
 800c16c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c174:	b2db      	uxtb	r3, r3
 800c176:	2b03      	cmp	r3, #3
 800c178:	d014      	beq.n	800c1a4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00f      	beq.n	800c1a4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c18a:	f043 0204 	orr.w	r2, r3, #4
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	699a      	ldr	r2, [r3, #24]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c1a2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00f      	beq.n	800c1ce <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1b4:	f043 0201 	orr.w	r2, r3, #1
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	699a      	ldr	r2, [r3, #24]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c1cc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d00f      	beq.n	800c1f8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1de:	f043 0208 	orr.w	r2, r3, #8
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	699a      	ldr	r2, [r3, #24]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c1f6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c208:	bf00      	nop
 800c20a:	3714      	adds	r7, #20
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr
 800c214:	fffffc90 	.word	0xfffffc90

0800c218 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	60b9      	str	r1, [r7, #8]
 800c222:	603b      	str	r3, [r7, #0]
 800c224:	4613      	mov	r3, r2
 800c226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c228:	e010      	b.n	800c24c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c22a:	f7f6 fb51 	bl	80028d0 <HAL_GetTick>
 800c22e:	4602      	mov	r2, r0
 800c230:	69bb      	ldr	r3, [r7, #24]
 800c232:	1ad3      	subs	r3, r2, r3
 800c234:	683a      	ldr	r2, [r7, #0]
 800c236:	429a      	cmp	r2, r3
 800c238:	d803      	bhi.n	800c242 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c240:	d102      	bne.n	800c248 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d101      	bne.n	800c24c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c248:	2303      	movs	r3, #3
 800c24a:	e00f      	b.n	800c26c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	695a      	ldr	r2, [r3, #20]
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	4013      	ands	r3, r2
 800c256:	68ba      	ldr	r2, [r7, #8]
 800c258:	429a      	cmp	r2, r3
 800c25a:	bf0c      	ite	eq
 800c25c:	2301      	moveq	r3, #1
 800c25e:	2300      	movne	r3, #0
 800c260:	b2db      	uxtb	r3, r3
 800c262:	461a      	mov	r2, r3
 800c264:	79fb      	ldrb	r3, [r7, #7]
 800c266:	429a      	cmp	r2, r3
 800c268:	d0df      	beq.n	800c22a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c26a:	2300      	movs	r3, #0
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3710      	adds	r7, #16
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c274:	b480      	push	{r7}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c280:	095b      	lsrs	r3, r3, #5
 800c282:	3301      	adds	r3, #1
 800c284:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	68db      	ldr	r3, [r3, #12]
 800c28a:	3301      	adds	r3, #1
 800c28c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	3307      	adds	r3, #7
 800c292:	08db      	lsrs	r3, r3, #3
 800c294:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	68fa      	ldr	r2, [r7, #12]
 800c29a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3714      	adds	r7, #20
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr

0800c2aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b082      	sub	sp, #8
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d101      	bne.n	800c2bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e049      	b.n	800c350 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d106      	bne.n	800c2d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f7f5 fffb 	bl	80022cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2202      	movs	r2, #2
 800c2da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	f000 fe4f 	bl	800cf8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2201      	movs	r2, #1
 800c302:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2201      	movs	r2, #1
 800c30a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2201      	movs	r2, #1
 800c312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2201      	movs	r2, #1
 800c31a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2201      	movs	r2, #1
 800c322:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2201      	movs	r2, #1
 800c32a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2201      	movs	r2, #1
 800c332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2201      	movs	r2, #1
 800c33a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2201      	movs	r2, #1
 800c342:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2201      	movs	r2, #1
 800c34a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c358:	b480      	push	{r7}
 800c35a:	b085      	sub	sp, #20
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c366:	b2db      	uxtb	r3, r3
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d001      	beq.n	800c370 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c36c:	2301      	movs	r3, #1
 800c36e:	e05e      	b.n	800c42e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2202      	movs	r2, #2
 800c374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	68da      	ldr	r2, [r3, #12]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f042 0201 	orr.w	r2, r2, #1
 800c386:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a2b      	ldr	r2, [pc, #172]	@ (800c43c <HAL_TIM_Base_Start_IT+0xe4>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d02c      	beq.n	800c3ec <HAL_TIM_Base_Start_IT+0x94>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c39a:	d027      	beq.n	800c3ec <HAL_TIM_Base_Start_IT+0x94>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a27      	ldr	r2, [pc, #156]	@ (800c440 <HAL_TIM_Base_Start_IT+0xe8>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d022      	beq.n	800c3ec <HAL_TIM_Base_Start_IT+0x94>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a26      	ldr	r2, [pc, #152]	@ (800c444 <HAL_TIM_Base_Start_IT+0xec>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d01d      	beq.n	800c3ec <HAL_TIM_Base_Start_IT+0x94>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a24      	ldr	r2, [pc, #144]	@ (800c448 <HAL_TIM_Base_Start_IT+0xf0>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d018      	beq.n	800c3ec <HAL_TIM_Base_Start_IT+0x94>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a23      	ldr	r2, [pc, #140]	@ (800c44c <HAL_TIM_Base_Start_IT+0xf4>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d013      	beq.n	800c3ec <HAL_TIM_Base_Start_IT+0x94>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a21      	ldr	r2, [pc, #132]	@ (800c450 <HAL_TIM_Base_Start_IT+0xf8>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d00e      	beq.n	800c3ec <HAL_TIM_Base_Start_IT+0x94>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a20      	ldr	r2, [pc, #128]	@ (800c454 <HAL_TIM_Base_Start_IT+0xfc>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d009      	beq.n	800c3ec <HAL_TIM_Base_Start_IT+0x94>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a1e      	ldr	r2, [pc, #120]	@ (800c458 <HAL_TIM_Base_Start_IT+0x100>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d004      	beq.n	800c3ec <HAL_TIM_Base_Start_IT+0x94>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a1d      	ldr	r2, [pc, #116]	@ (800c45c <HAL_TIM_Base_Start_IT+0x104>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d115      	bne.n	800c418 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	689a      	ldr	r2, [r3, #8]
 800c3f2:	4b1b      	ldr	r3, [pc, #108]	@ (800c460 <HAL_TIM_Base_Start_IT+0x108>)
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2b06      	cmp	r3, #6
 800c3fc:	d015      	beq.n	800c42a <HAL_TIM_Base_Start_IT+0xd2>
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c404:	d011      	beq.n	800c42a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f042 0201 	orr.w	r2, r2, #1
 800c414:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c416:	e008      	b.n	800c42a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f042 0201 	orr.w	r2, r2, #1
 800c426:	601a      	str	r2, [r3, #0]
 800c428:	e000      	b.n	800c42c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c42a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3714      	adds	r7, #20
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	40010000 	.word	0x40010000
 800c440:	40000400 	.word	0x40000400
 800c444:	40000800 	.word	0x40000800
 800c448:	40000c00 	.word	0x40000c00
 800c44c:	40010400 	.word	0x40010400
 800c450:	40001800 	.word	0x40001800
 800c454:	40014000 	.word	0x40014000
 800c458:	4000e000 	.word	0x4000e000
 800c45c:	4000e400 	.word	0x4000e400
 800c460:	00010007 	.word	0x00010007

0800c464 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d101      	bne.n	800c476 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800c472:	2301      	movs	r3, #1
 800c474:	e049      	b.n	800c50a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d106      	bne.n	800c490 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2200      	movs	r2, #0
 800c486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 f841 	bl	800c512 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2202      	movs	r2, #2
 800c494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	3304      	adds	r3, #4
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	4610      	mov	r0, r2
 800c4a4:	f000 fd72 	bl	800cf8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2201      	movs	r2, #1
 800c504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c508:	2300      	movs	r3, #0
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3708      	adds	r7, #8
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}

0800c512 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800c512:	b480      	push	{r7}
 800c514:	b083      	sub	sp, #12
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800c51a:	bf00      	nop
 800c51c:	370c      	adds	r7, #12
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr

0800c526 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b082      	sub	sp, #8
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d101      	bne.n	800c538 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c534:	2301      	movs	r3, #1
 800c536:	e049      	b.n	800c5cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	2b00      	cmp	r3, #0
 800c542:	d106      	bne.n	800c552 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2200      	movs	r2, #0
 800c548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 f841 	bl	800c5d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2202      	movs	r2, #2
 800c556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	3304      	adds	r3, #4
 800c562:	4619      	mov	r1, r3
 800c564:	4610      	mov	r0, r2
 800c566:	f000 fd11 	bl	800cf8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2201      	movs	r2, #1
 800c56e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2201      	movs	r2, #1
 800c576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2201      	movs	r2, #1
 800c57e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2201      	movs	r2, #1
 800c586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2201      	movs	r2, #1
 800c58e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2201      	movs	r2, #1
 800c596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2201      	movs	r2, #1
 800c59e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2201      	movs	r2, #1
 800c5be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c5ca:	2300      	movs	r3, #0
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b083      	sub	sp, #12
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c5dc:	bf00      	nop
 800c5de:	370c      	adds	r7, #12
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d109      	bne.n	800c60c <HAL_TIM_PWM_Start+0x24>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	2b01      	cmp	r3, #1
 800c602:	bf14      	ite	ne
 800c604:	2301      	movne	r3, #1
 800c606:	2300      	moveq	r3, #0
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	e03c      	b.n	800c686 <HAL_TIM_PWM_Start+0x9e>
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	2b04      	cmp	r3, #4
 800c610:	d109      	bne.n	800c626 <HAL_TIM_PWM_Start+0x3e>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	bf14      	ite	ne
 800c61e:	2301      	movne	r3, #1
 800c620:	2300      	moveq	r3, #0
 800c622:	b2db      	uxtb	r3, r3
 800c624:	e02f      	b.n	800c686 <HAL_TIM_PWM_Start+0x9e>
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	2b08      	cmp	r3, #8
 800c62a:	d109      	bne.n	800c640 <HAL_TIM_PWM_Start+0x58>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c632:	b2db      	uxtb	r3, r3
 800c634:	2b01      	cmp	r3, #1
 800c636:	bf14      	ite	ne
 800c638:	2301      	movne	r3, #1
 800c63a:	2300      	moveq	r3, #0
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	e022      	b.n	800c686 <HAL_TIM_PWM_Start+0x9e>
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	2b0c      	cmp	r3, #12
 800c644:	d109      	bne.n	800c65a <HAL_TIM_PWM_Start+0x72>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	2b01      	cmp	r3, #1
 800c650:	bf14      	ite	ne
 800c652:	2301      	movne	r3, #1
 800c654:	2300      	moveq	r3, #0
 800c656:	b2db      	uxtb	r3, r3
 800c658:	e015      	b.n	800c686 <HAL_TIM_PWM_Start+0x9e>
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	2b10      	cmp	r3, #16
 800c65e:	d109      	bne.n	800c674 <HAL_TIM_PWM_Start+0x8c>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c666:	b2db      	uxtb	r3, r3
 800c668:	2b01      	cmp	r3, #1
 800c66a:	bf14      	ite	ne
 800c66c:	2301      	movne	r3, #1
 800c66e:	2300      	moveq	r3, #0
 800c670:	b2db      	uxtb	r3, r3
 800c672:	e008      	b.n	800c686 <HAL_TIM_PWM_Start+0x9e>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	bf14      	ite	ne
 800c680:	2301      	movne	r3, #1
 800c682:	2300      	moveq	r3, #0
 800c684:	b2db      	uxtb	r3, r3
 800c686:	2b00      	cmp	r3, #0
 800c688:	d001      	beq.n	800c68e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c68a:	2301      	movs	r3, #1
 800c68c:	e0ab      	b.n	800c7e6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d104      	bne.n	800c69e <HAL_TIM_PWM_Start+0xb6>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2202      	movs	r2, #2
 800c698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c69c:	e023      	b.n	800c6e6 <HAL_TIM_PWM_Start+0xfe>
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	2b04      	cmp	r3, #4
 800c6a2:	d104      	bne.n	800c6ae <HAL_TIM_PWM_Start+0xc6>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2202      	movs	r2, #2
 800c6a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c6ac:	e01b      	b.n	800c6e6 <HAL_TIM_PWM_Start+0xfe>
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	2b08      	cmp	r3, #8
 800c6b2:	d104      	bne.n	800c6be <HAL_TIM_PWM_Start+0xd6>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2202      	movs	r2, #2
 800c6b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c6bc:	e013      	b.n	800c6e6 <HAL_TIM_PWM_Start+0xfe>
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	2b0c      	cmp	r3, #12
 800c6c2:	d104      	bne.n	800c6ce <HAL_TIM_PWM_Start+0xe6>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2202      	movs	r2, #2
 800c6c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c6cc:	e00b      	b.n	800c6e6 <HAL_TIM_PWM_Start+0xfe>
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	2b10      	cmp	r3, #16
 800c6d2:	d104      	bne.n	800c6de <HAL_TIM_PWM_Start+0xf6>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2202      	movs	r2, #2
 800c6d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c6dc:	e003      	b.n	800c6e6 <HAL_TIM_PWM_Start+0xfe>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2202      	movs	r2, #2
 800c6e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	6839      	ldr	r1, [r7, #0]
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f001 f86c 	bl	800d7cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a3d      	ldr	r2, [pc, #244]	@ (800c7f0 <HAL_TIM_PWM_Start+0x208>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d013      	beq.n	800c726 <HAL_TIM_PWM_Start+0x13e>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a3c      	ldr	r2, [pc, #240]	@ (800c7f4 <HAL_TIM_PWM_Start+0x20c>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d00e      	beq.n	800c726 <HAL_TIM_PWM_Start+0x13e>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a3a      	ldr	r2, [pc, #232]	@ (800c7f8 <HAL_TIM_PWM_Start+0x210>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d009      	beq.n	800c726 <HAL_TIM_PWM_Start+0x13e>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a39      	ldr	r2, [pc, #228]	@ (800c7fc <HAL_TIM_PWM_Start+0x214>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d004      	beq.n	800c726 <HAL_TIM_PWM_Start+0x13e>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a37      	ldr	r2, [pc, #220]	@ (800c800 <HAL_TIM_PWM_Start+0x218>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d101      	bne.n	800c72a <HAL_TIM_PWM_Start+0x142>
 800c726:	2301      	movs	r3, #1
 800c728:	e000      	b.n	800c72c <HAL_TIM_PWM_Start+0x144>
 800c72a:	2300      	movs	r3, #0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d007      	beq.n	800c740 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c73e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a2a      	ldr	r2, [pc, #168]	@ (800c7f0 <HAL_TIM_PWM_Start+0x208>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d02c      	beq.n	800c7a4 <HAL_TIM_PWM_Start+0x1bc>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c752:	d027      	beq.n	800c7a4 <HAL_TIM_PWM_Start+0x1bc>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a2a      	ldr	r2, [pc, #168]	@ (800c804 <HAL_TIM_PWM_Start+0x21c>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d022      	beq.n	800c7a4 <HAL_TIM_PWM_Start+0x1bc>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a29      	ldr	r2, [pc, #164]	@ (800c808 <HAL_TIM_PWM_Start+0x220>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d01d      	beq.n	800c7a4 <HAL_TIM_PWM_Start+0x1bc>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a27      	ldr	r2, [pc, #156]	@ (800c80c <HAL_TIM_PWM_Start+0x224>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d018      	beq.n	800c7a4 <HAL_TIM_PWM_Start+0x1bc>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a1f      	ldr	r2, [pc, #124]	@ (800c7f4 <HAL_TIM_PWM_Start+0x20c>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d013      	beq.n	800c7a4 <HAL_TIM_PWM_Start+0x1bc>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a23      	ldr	r2, [pc, #140]	@ (800c810 <HAL_TIM_PWM_Start+0x228>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d00e      	beq.n	800c7a4 <HAL_TIM_PWM_Start+0x1bc>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4a1b      	ldr	r2, [pc, #108]	@ (800c7f8 <HAL_TIM_PWM_Start+0x210>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d009      	beq.n	800c7a4 <HAL_TIM_PWM_Start+0x1bc>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a1f      	ldr	r2, [pc, #124]	@ (800c814 <HAL_TIM_PWM_Start+0x22c>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d004      	beq.n	800c7a4 <HAL_TIM_PWM_Start+0x1bc>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a1e      	ldr	r2, [pc, #120]	@ (800c818 <HAL_TIM_PWM_Start+0x230>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d115      	bne.n	800c7d0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	689a      	ldr	r2, [r3, #8]
 800c7aa:	4b1c      	ldr	r3, [pc, #112]	@ (800c81c <HAL_TIM_PWM_Start+0x234>)
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2b06      	cmp	r3, #6
 800c7b4:	d015      	beq.n	800c7e2 <HAL_TIM_PWM_Start+0x1fa>
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7bc:	d011      	beq.n	800c7e2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f042 0201 	orr.w	r2, r2, #1
 800c7cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7ce:	e008      	b.n	800c7e2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f042 0201 	orr.w	r2, r2, #1
 800c7de:	601a      	str	r2, [r3, #0]
 800c7e0:	e000      	b.n	800c7e4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop
 800c7f0:	40010000 	.word	0x40010000
 800c7f4:	40010400 	.word	0x40010400
 800c7f8:	40014000 	.word	0x40014000
 800c7fc:	40014400 	.word	0x40014400
 800c800:	40014800 	.word	0x40014800
 800c804:	40000400 	.word	0x40000400
 800c808:	40000800 	.word	0x40000800
 800c80c:	40000c00 	.word	0x40000c00
 800c810:	40001800 	.word	0x40001800
 800c814:	4000e000 	.word	0x4000e000
 800c818:	4000e400 	.word	0x4000e400
 800c81c:	00010007 	.word	0x00010007

0800c820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	691b      	ldr	r3, [r3, #16]
 800c836:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	f003 0302 	and.w	r3, r3, #2
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d020      	beq.n	800c884 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	f003 0302 	and.w	r3, r3, #2
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d01b      	beq.n	800c884 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f06f 0202 	mvn.w	r2, #2
 800c854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2201      	movs	r2, #1
 800c85a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	699b      	ldr	r3, [r3, #24]
 800c862:	f003 0303 	and.w	r3, r3, #3
 800c866:	2b00      	cmp	r3, #0
 800c868:	d003      	beq.n	800c872 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 fb70 	bl	800cf50 <HAL_TIM_IC_CaptureCallback>
 800c870:	e005      	b.n	800c87e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 fb62 	bl	800cf3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 fb73 	bl	800cf64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	f003 0304 	and.w	r3, r3, #4
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d020      	beq.n	800c8d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f003 0304 	and.w	r3, r3, #4
 800c894:	2b00      	cmp	r3, #0
 800c896:	d01b      	beq.n	800c8d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f06f 0204 	mvn.w	r2, #4
 800c8a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2202      	movs	r2, #2
 800c8a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	699b      	ldr	r3, [r3, #24]
 800c8ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d003      	beq.n	800c8be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 fb4a 	bl	800cf50 <HAL_TIM_IC_CaptureCallback>
 800c8bc:	e005      	b.n	800c8ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 fb3c 	bl	800cf3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 fb4d 	bl	800cf64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	f003 0308 	and.w	r3, r3, #8
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d020      	beq.n	800c91c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f003 0308 	and.w	r3, r3, #8
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d01b      	beq.n	800c91c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f06f 0208 	mvn.w	r2, #8
 800c8ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2204      	movs	r2, #4
 800c8f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	69db      	ldr	r3, [r3, #28]
 800c8fa:	f003 0303 	and.w	r3, r3, #3
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d003      	beq.n	800c90a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 fb24 	bl	800cf50 <HAL_TIM_IC_CaptureCallback>
 800c908:	e005      	b.n	800c916 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 fb16 	bl	800cf3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f000 fb27 	bl	800cf64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2200      	movs	r2, #0
 800c91a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	f003 0310 	and.w	r3, r3, #16
 800c922:	2b00      	cmp	r3, #0
 800c924:	d020      	beq.n	800c968 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	f003 0310 	and.w	r3, r3, #16
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d01b      	beq.n	800c968 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f06f 0210 	mvn.w	r2, #16
 800c938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2208      	movs	r2, #8
 800c93e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	69db      	ldr	r3, [r3, #28]
 800c946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d003      	beq.n	800c956 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 fafe 	bl	800cf50 <HAL_TIM_IC_CaptureCallback>
 800c954:	e005      	b.n	800c962 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 faf0 	bl	800cf3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 fb01 	bl	800cf64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	f003 0301 	and.w	r3, r3, #1
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00c      	beq.n	800c98c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	f003 0301 	and.w	r3, r3, #1
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d007      	beq.n	800c98c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f06f 0201 	mvn.w	r2, #1
 800c984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f7f4 ffae 	bl	80018e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c992:	2b00      	cmp	r3, #0
 800c994:	d104      	bne.n	800c9a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00c      	beq.n	800c9ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d007      	beq.n	800c9ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c9b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f000 ffd5 	bl	800d964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00c      	beq.n	800c9de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d007      	beq.n	800c9de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c9d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 ffcd 	bl	800d978 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d00c      	beq.n	800ca02 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d007      	beq.n	800ca02 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c9fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 fabb 	bl	800cf78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	f003 0320 	and.w	r3, r3, #32
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d00c      	beq.n	800ca26 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f003 0320 	and.w	r3, r3, #32
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d007      	beq.n	800ca26 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f06f 0220 	mvn.w	r2, #32
 800ca1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f000 ff95 	bl	800d950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ca26:	bf00      	nop
 800ca28:	3710      	adds	r7, #16
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
	...

0800ca30 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	d101      	bne.n	800ca4e <HAL_TIM_OC_ConfigChannel+0x1e>
 800ca4a:	2302      	movs	r3, #2
 800ca4c:	e066      	b.n	800cb1c <HAL_TIM_OC_ConfigChannel+0xec>
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2201      	movs	r2, #1
 800ca52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2b14      	cmp	r3, #20
 800ca5a:	d857      	bhi.n	800cb0c <HAL_TIM_OC_ConfigChannel+0xdc>
 800ca5c:	a201      	add	r2, pc, #4	@ (adr r2, 800ca64 <HAL_TIM_OC_ConfigChannel+0x34>)
 800ca5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca62:	bf00      	nop
 800ca64:	0800cab9 	.word	0x0800cab9
 800ca68:	0800cb0d 	.word	0x0800cb0d
 800ca6c:	0800cb0d 	.word	0x0800cb0d
 800ca70:	0800cb0d 	.word	0x0800cb0d
 800ca74:	0800cac7 	.word	0x0800cac7
 800ca78:	0800cb0d 	.word	0x0800cb0d
 800ca7c:	0800cb0d 	.word	0x0800cb0d
 800ca80:	0800cb0d 	.word	0x0800cb0d
 800ca84:	0800cad5 	.word	0x0800cad5
 800ca88:	0800cb0d 	.word	0x0800cb0d
 800ca8c:	0800cb0d 	.word	0x0800cb0d
 800ca90:	0800cb0d 	.word	0x0800cb0d
 800ca94:	0800cae3 	.word	0x0800cae3
 800ca98:	0800cb0d 	.word	0x0800cb0d
 800ca9c:	0800cb0d 	.word	0x0800cb0d
 800caa0:	0800cb0d 	.word	0x0800cb0d
 800caa4:	0800caf1 	.word	0x0800caf1
 800caa8:	0800cb0d 	.word	0x0800cb0d
 800caac:	0800cb0d 	.word	0x0800cb0d
 800cab0:	0800cb0d 	.word	0x0800cb0d
 800cab4:	0800caff 	.word	0x0800caff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	68b9      	ldr	r1, [r7, #8]
 800cabe:	4618      	mov	r0, r3
 800cac0:	f000 fb10 	bl	800d0e4 <TIM_OC1_SetConfig>
      break;
 800cac4:	e025      	b.n	800cb12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	68b9      	ldr	r1, [r7, #8]
 800cacc:	4618      	mov	r0, r3
 800cace:	f000 fb99 	bl	800d204 <TIM_OC2_SetConfig>
      break;
 800cad2:	e01e      	b.n	800cb12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	68b9      	ldr	r1, [r7, #8]
 800cada:	4618      	mov	r0, r3
 800cadc:	f000 fc1c 	bl	800d318 <TIM_OC3_SetConfig>
      break;
 800cae0:	e017      	b.n	800cb12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	68b9      	ldr	r1, [r7, #8]
 800cae8:	4618      	mov	r0, r3
 800caea:	f000 fc9d 	bl	800d428 <TIM_OC4_SetConfig>
      break;
 800caee:	e010      	b.n	800cb12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	68b9      	ldr	r1, [r7, #8]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f000 fd00 	bl	800d4fc <TIM_OC5_SetConfig>
      break;
 800cafc:	e009      	b.n	800cb12 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	68b9      	ldr	r1, [r7, #8]
 800cb04:	4618      	mov	r0, r3
 800cb06:	f000 fd5d 	bl	800d5c4 <TIM_OC6_SetConfig>
      break;
 800cb0a:	e002      	b.n	800cb12 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	75fb      	strb	r3, [r7, #23]
      break;
 800cb10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2200      	movs	r2, #0
 800cb16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cb1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3718      	adds	r7, #24
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b086      	sub	sp, #24
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cb30:	2300      	movs	r3, #0
 800cb32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d101      	bne.n	800cb42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cb3e:	2302      	movs	r3, #2
 800cb40:	e0ff      	b.n	800cd42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2201      	movs	r2, #1
 800cb46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2b14      	cmp	r3, #20
 800cb4e:	f200 80f0 	bhi.w	800cd32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cb52:	a201      	add	r2, pc, #4	@ (adr r2, 800cb58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb58:	0800cbad 	.word	0x0800cbad
 800cb5c:	0800cd33 	.word	0x0800cd33
 800cb60:	0800cd33 	.word	0x0800cd33
 800cb64:	0800cd33 	.word	0x0800cd33
 800cb68:	0800cbed 	.word	0x0800cbed
 800cb6c:	0800cd33 	.word	0x0800cd33
 800cb70:	0800cd33 	.word	0x0800cd33
 800cb74:	0800cd33 	.word	0x0800cd33
 800cb78:	0800cc2f 	.word	0x0800cc2f
 800cb7c:	0800cd33 	.word	0x0800cd33
 800cb80:	0800cd33 	.word	0x0800cd33
 800cb84:	0800cd33 	.word	0x0800cd33
 800cb88:	0800cc6f 	.word	0x0800cc6f
 800cb8c:	0800cd33 	.word	0x0800cd33
 800cb90:	0800cd33 	.word	0x0800cd33
 800cb94:	0800cd33 	.word	0x0800cd33
 800cb98:	0800ccb1 	.word	0x0800ccb1
 800cb9c:	0800cd33 	.word	0x0800cd33
 800cba0:	0800cd33 	.word	0x0800cd33
 800cba4:	0800cd33 	.word	0x0800cd33
 800cba8:	0800ccf1 	.word	0x0800ccf1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	68b9      	ldr	r1, [r7, #8]
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f000 fa96 	bl	800d0e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	699a      	ldr	r2, [r3, #24]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f042 0208 	orr.w	r2, r2, #8
 800cbc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	699a      	ldr	r2, [r3, #24]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f022 0204 	bic.w	r2, r2, #4
 800cbd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	6999      	ldr	r1, [r3, #24]
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	691a      	ldr	r2, [r3, #16]
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	430a      	orrs	r2, r1
 800cbe8:	619a      	str	r2, [r3, #24]
      break;
 800cbea:	e0a5      	b.n	800cd38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	68b9      	ldr	r1, [r7, #8]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f000 fb06 	bl	800d204 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	699a      	ldr	r2, [r3, #24]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cc06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	699a      	ldr	r2, [r3, #24]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cc16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	6999      	ldr	r1, [r3, #24]
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	691b      	ldr	r3, [r3, #16]
 800cc22:	021a      	lsls	r2, r3, #8
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	430a      	orrs	r2, r1
 800cc2a:	619a      	str	r2, [r3, #24]
      break;
 800cc2c:	e084      	b.n	800cd38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	68b9      	ldr	r1, [r7, #8]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f000 fb6f 	bl	800d318 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	69da      	ldr	r2, [r3, #28]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f042 0208 	orr.w	r2, r2, #8
 800cc48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	69da      	ldr	r2, [r3, #28]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f022 0204 	bic.w	r2, r2, #4
 800cc58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	69d9      	ldr	r1, [r3, #28]
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	691a      	ldr	r2, [r3, #16]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	430a      	orrs	r2, r1
 800cc6a:	61da      	str	r2, [r3, #28]
      break;
 800cc6c:	e064      	b.n	800cd38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	68b9      	ldr	r1, [r7, #8]
 800cc74:	4618      	mov	r0, r3
 800cc76:	f000 fbd7 	bl	800d428 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	69da      	ldr	r2, [r3, #28]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cc88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	69da      	ldr	r2, [r3, #28]
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cc98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	69d9      	ldr	r1, [r3, #28]
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	021a      	lsls	r2, r3, #8
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	430a      	orrs	r2, r1
 800ccac:	61da      	str	r2, [r3, #28]
      break;
 800ccae:	e043      	b.n	800cd38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	68b9      	ldr	r1, [r7, #8]
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f000 fc20 	bl	800d4fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f042 0208 	orr.w	r2, r2, #8
 800ccca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f022 0204 	bic.w	r2, r2, #4
 800ccda:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	691a      	ldr	r2, [r3, #16]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	430a      	orrs	r2, r1
 800ccec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ccee:	e023      	b.n	800cd38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	68b9      	ldr	r1, [r7, #8]
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f000 fc64 	bl	800d5c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cd0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cd1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	691b      	ldr	r3, [r3, #16]
 800cd26:	021a      	lsls	r2, r3, #8
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	430a      	orrs	r2, r1
 800cd2e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cd30:	e002      	b.n	800cd38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cd32:	2301      	movs	r3, #1
 800cd34:	75fb      	strb	r3, [r7, #23]
      break;
 800cd36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cd40:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3718      	adds	r7, #24
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop

0800cd4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cd56:	2300      	movs	r3, #0
 800cd58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d101      	bne.n	800cd68 <HAL_TIM_ConfigClockSource+0x1c>
 800cd64:	2302      	movs	r3, #2
 800cd66:	e0dc      	b.n	800cf22 <HAL_TIM_ConfigClockSource+0x1d6>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2202      	movs	r2, #2
 800cd74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	689b      	ldr	r3, [r3, #8]
 800cd7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cd80:	68ba      	ldr	r2, [r7, #8]
 800cd82:	4b6a      	ldr	r3, [pc, #424]	@ (800cf2c <HAL_TIM_ConfigClockSource+0x1e0>)
 800cd84:	4013      	ands	r3, r2
 800cd86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cd8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	68ba      	ldr	r2, [r7, #8]
 800cd96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a64      	ldr	r2, [pc, #400]	@ (800cf30 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	f000 80a9 	beq.w	800cef6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cda4:	4a62      	ldr	r2, [pc, #392]	@ (800cf30 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	f200 80ae 	bhi.w	800cf08 <HAL_TIM_ConfigClockSource+0x1bc>
 800cdac:	4a61      	ldr	r2, [pc, #388]	@ (800cf34 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	f000 80a1 	beq.w	800cef6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cdb4:	4a5f      	ldr	r2, [pc, #380]	@ (800cf34 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	f200 80a6 	bhi.w	800cf08 <HAL_TIM_ConfigClockSource+0x1bc>
 800cdbc:	4a5e      	ldr	r2, [pc, #376]	@ (800cf38 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	f000 8099 	beq.w	800cef6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cdc4:	4a5c      	ldr	r2, [pc, #368]	@ (800cf38 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	f200 809e 	bhi.w	800cf08 <HAL_TIM_ConfigClockSource+0x1bc>
 800cdcc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cdd0:	f000 8091 	beq.w	800cef6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cdd4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cdd8:	f200 8096 	bhi.w	800cf08 <HAL_TIM_ConfigClockSource+0x1bc>
 800cddc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cde0:	f000 8089 	beq.w	800cef6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cde4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cde8:	f200 808e 	bhi.w	800cf08 <HAL_TIM_ConfigClockSource+0x1bc>
 800cdec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cdf0:	d03e      	beq.n	800ce70 <HAL_TIM_ConfigClockSource+0x124>
 800cdf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cdf6:	f200 8087 	bhi.w	800cf08 <HAL_TIM_ConfigClockSource+0x1bc>
 800cdfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cdfe:	f000 8086 	beq.w	800cf0e <HAL_TIM_ConfigClockSource+0x1c2>
 800ce02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce06:	d87f      	bhi.n	800cf08 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce08:	2b70      	cmp	r3, #112	@ 0x70
 800ce0a:	d01a      	beq.n	800ce42 <HAL_TIM_ConfigClockSource+0xf6>
 800ce0c:	2b70      	cmp	r3, #112	@ 0x70
 800ce0e:	d87b      	bhi.n	800cf08 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce10:	2b60      	cmp	r3, #96	@ 0x60
 800ce12:	d050      	beq.n	800ceb6 <HAL_TIM_ConfigClockSource+0x16a>
 800ce14:	2b60      	cmp	r3, #96	@ 0x60
 800ce16:	d877      	bhi.n	800cf08 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce18:	2b50      	cmp	r3, #80	@ 0x50
 800ce1a:	d03c      	beq.n	800ce96 <HAL_TIM_ConfigClockSource+0x14a>
 800ce1c:	2b50      	cmp	r3, #80	@ 0x50
 800ce1e:	d873      	bhi.n	800cf08 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce20:	2b40      	cmp	r3, #64	@ 0x40
 800ce22:	d058      	beq.n	800ced6 <HAL_TIM_ConfigClockSource+0x18a>
 800ce24:	2b40      	cmp	r3, #64	@ 0x40
 800ce26:	d86f      	bhi.n	800cf08 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce28:	2b30      	cmp	r3, #48	@ 0x30
 800ce2a:	d064      	beq.n	800cef6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ce2c:	2b30      	cmp	r3, #48	@ 0x30
 800ce2e:	d86b      	bhi.n	800cf08 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce30:	2b20      	cmp	r3, #32
 800ce32:	d060      	beq.n	800cef6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ce34:	2b20      	cmp	r3, #32
 800ce36:	d867      	bhi.n	800cf08 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d05c      	beq.n	800cef6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ce3c:	2b10      	cmp	r3, #16
 800ce3e:	d05a      	beq.n	800cef6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ce40:	e062      	b.n	800cf08 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ce52:	f000 fc9b 	bl	800d78c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	689b      	ldr	r3, [r3, #8]
 800ce5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ce64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	68ba      	ldr	r2, [r7, #8]
 800ce6c:	609a      	str	r2, [r3, #8]
      break;
 800ce6e:	e04f      	b.n	800cf10 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ce80:	f000 fc84 	bl	800d78c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	689a      	ldr	r2, [r3, #8]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ce92:	609a      	str	r2, [r3, #8]
      break;
 800ce94:	e03c      	b.n	800cf10 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cea2:	461a      	mov	r2, r3
 800cea4:	f000 fbf4 	bl	800d690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	2150      	movs	r1, #80	@ 0x50
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f000 fc4e 	bl	800d750 <TIM_ITRx_SetConfig>
      break;
 800ceb4:	e02c      	b.n	800cf10 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cec2:	461a      	mov	r2, r3
 800cec4:	f000 fc13 	bl	800d6ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2160      	movs	r1, #96	@ 0x60
 800cece:	4618      	mov	r0, r3
 800ced0:	f000 fc3e 	bl	800d750 <TIM_ITRx_SetConfig>
      break;
 800ced4:	e01c      	b.n	800cf10 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cee2:	461a      	mov	r2, r3
 800cee4:	f000 fbd4 	bl	800d690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2140      	movs	r1, #64	@ 0x40
 800ceee:	4618      	mov	r0, r3
 800cef0:	f000 fc2e 	bl	800d750 <TIM_ITRx_SetConfig>
      break;
 800cef4:	e00c      	b.n	800cf10 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4619      	mov	r1, r3
 800cf00:	4610      	mov	r0, r2
 800cf02:	f000 fc25 	bl	800d750 <TIM_ITRx_SetConfig>
      break;
 800cf06:	e003      	b.n	800cf10 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	73fb      	strb	r3, [r7, #15]
      break;
 800cf0c:	e000      	b.n	800cf10 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cf0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cf20:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3710      	adds	r7, #16
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	ffceff88 	.word	0xffceff88
 800cf30:	00100040 	.word	0x00100040
 800cf34:	00100030 	.word	0x00100030
 800cf38:	00100020 	.word	0x00100020

0800cf3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b083      	sub	sp, #12
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cf44:	bf00      	nop
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b083      	sub	sp, #12
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cf58:	bf00      	nop
 800cf5a:	370c      	adds	r7, #12
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b083      	sub	sp, #12
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cf6c:	bf00      	nop
 800cf6e:	370c      	adds	r7, #12
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cf80:	bf00      	nop
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	4a47      	ldr	r2, [pc, #284]	@ (800d0bc <TIM_Base_SetConfig+0x130>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d013      	beq.n	800cfcc <TIM_Base_SetConfig+0x40>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cfaa:	d00f      	beq.n	800cfcc <TIM_Base_SetConfig+0x40>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	4a44      	ldr	r2, [pc, #272]	@ (800d0c0 <TIM_Base_SetConfig+0x134>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d00b      	beq.n	800cfcc <TIM_Base_SetConfig+0x40>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	4a43      	ldr	r2, [pc, #268]	@ (800d0c4 <TIM_Base_SetConfig+0x138>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d007      	beq.n	800cfcc <TIM_Base_SetConfig+0x40>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	4a42      	ldr	r2, [pc, #264]	@ (800d0c8 <TIM_Base_SetConfig+0x13c>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d003      	beq.n	800cfcc <TIM_Base_SetConfig+0x40>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	4a41      	ldr	r2, [pc, #260]	@ (800d0cc <TIM_Base_SetConfig+0x140>)
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d108      	bne.n	800cfde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	68fa      	ldr	r2, [r7, #12]
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	4a36      	ldr	r2, [pc, #216]	@ (800d0bc <TIM_Base_SetConfig+0x130>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d027      	beq.n	800d036 <TIM_Base_SetConfig+0xaa>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cfec:	d023      	beq.n	800d036 <TIM_Base_SetConfig+0xaa>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	4a33      	ldr	r2, [pc, #204]	@ (800d0c0 <TIM_Base_SetConfig+0x134>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d01f      	beq.n	800d036 <TIM_Base_SetConfig+0xaa>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	4a32      	ldr	r2, [pc, #200]	@ (800d0c4 <TIM_Base_SetConfig+0x138>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d01b      	beq.n	800d036 <TIM_Base_SetConfig+0xaa>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	4a31      	ldr	r2, [pc, #196]	@ (800d0c8 <TIM_Base_SetConfig+0x13c>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d017      	beq.n	800d036 <TIM_Base_SetConfig+0xaa>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	4a30      	ldr	r2, [pc, #192]	@ (800d0cc <TIM_Base_SetConfig+0x140>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d013      	beq.n	800d036 <TIM_Base_SetConfig+0xaa>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	4a2f      	ldr	r2, [pc, #188]	@ (800d0d0 <TIM_Base_SetConfig+0x144>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d00f      	beq.n	800d036 <TIM_Base_SetConfig+0xaa>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	4a2e      	ldr	r2, [pc, #184]	@ (800d0d4 <TIM_Base_SetConfig+0x148>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d00b      	beq.n	800d036 <TIM_Base_SetConfig+0xaa>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	4a2d      	ldr	r2, [pc, #180]	@ (800d0d8 <TIM_Base_SetConfig+0x14c>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d007      	beq.n	800d036 <TIM_Base_SetConfig+0xaa>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	4a2c      	ldr	r2, [pc, #176]	@ (800d0dc <TIM_Base_SetConfig+0x150>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d003      	beq.n	800d036 <TIM_Base_SetConfig+0xaa>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	4a2b      	ldr	r2, [pc, #172]	@ (800d0e0 <TIM_Base_SetConfig+0x154>)
 800d032:	4293      	cmp	r3, r2
 800d034:	d108      	bne.n	800d048 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d03c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	68db      	ldr	r3, [r3, #12]
 800d042:	68fa      	ldr	r2, [r7, #12]
 800d044:	4313      	orrs	r3, r2
 800d046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	695b      	ldr	r3, [r3, #20]
 800d052:	4313      	orrs	r3, r2
 800d054:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	689a      	ldr	r2, [r3, #8]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	681a      	ldr	r2, [r3, #0]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	4a14      	ldr	r2, [pc, #80]	@ (800d0bc <TIM_Base_SetConfig+0x130>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d00f      	beq.n	800d08e <TIM_Base_SetConfig+0x102>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	4a16      	ldr	r2, [pc, #88]	@ (800d0cc <TIM_Base_SetConfig+0x140>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d00b      	beq.n	800d08e <TIM_Base_SetConfig+0x102>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	4a15      	ldr	r2, [pc, #84]	@ (800d0d0 <TIM_Base_SetConfig+0x144>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d007      	beq.n	800d08e <TIM_Base_SetConfig+0x102>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4a14      	ldr	r2, [pc, #80]	@ (800d0d4 <TIM_Base_SetConfig+0x148>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d003      	beq.n	800d08e <TIM_Base_SetConfig+0x102>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	4a13      	ldr	r2, [pc, #76]	@ (800d0d8 <TIM_Base_SetConfig+0x14c>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d103      	bne.n	800d096 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	691a      	ldr	r2, [r3, #16]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f043 0204 	orr.w	r2, r3, #4
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	68fa      	ldr	r2, [r7, #12]
 800d0ac:	601a      	str	r2, [r3, #0]
}
 800d0ae:	bf00      	nop
 800d0b0:	3714      	adds	r7, #20
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop
 800d0bc:	40010000 	.word	0x40010000
 800d0c0:	40000400 	.word	0x40000400
 800d0c4:	40000800 	.word	0x40000800
 800d0c8:	40000c00 	.word	0x40000c00
 800d0cc:	40010400 	.word	0x40010400
 800d0d0:	40014000 	.word	0x40014000
 800d0d4:	40014400 	.word	0x40014400
 800d0d8:	40014800 	.word	0x40014800
 800d0dc:	4000e000 	.word	0x4000e000
 800d0e0:	4000e400 	.word	0x4000e400

0800d0e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b087      	sub	sp, #28
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6a1b      	ldr	r3, [r3, #32]
 800d0f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6a1b      	ldr	r3, [r3, #32]
 800d0f8:	f023 0201 	bic.w	r2, r3, #1
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	699b      	ldr	r3, [r3, #24]
 800d10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d10c:	68fa      	ldr	r2, [r7, #12]
 800d10e:	4b37      	ldr	r3, [pc, #220]	@ (800d1ec <TIM_OC1_SetConfig+0x108>)
 800d110:	4013      	ands	r3, r2
 800d112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f023 0303 	bic.w	r3, r3, #3
 800d11a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	68fa      	ldr	r2, [r7, #12]
 800d122:	4313      	orrs	r3, r2
 800d124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	f023 0302 	bic.w	r3, r3, #2
 800d12c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	697a      	ldr	r2, [r7, #20]
 800d134:	4313      	orrs	r3, r2
 800d136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	4a2d      	ldr	r2, [pc, #180]	@ (800d1f0 <TIM_OC1_SetConfig+0x10c>)
 800d13c:	4293      	cmp	r3, r2
 800d13e:	d00f      	beq.n	800d160 <TIM_OC1_SetConfig+0x7c>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	4a2c      	ldr	r2, [pc, #176]	@ (800d1f4 <TIM_OC1_SetConfig+0x110>)
 800d144:	4293      	cmp	r3, r2
 800d146:	d00b      	beq.n	800d160 <TIM_OC1_SetConfig+0x7c>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	4a2b      	ldr	r2, [pc, #172]	@ (800d1f8 <TIM_OC1_SetConfig+0x114>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d007      	beq.n	800d160 <TIM_OC1_SetConfig+0x7c>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	4a2a      	ldr	r2, [pc, #168]	@ (800d1fc <TIM_OC1_SetConfig+0x118>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d003      	beq.n	800d160 <TIM_OC1_SetConfig+0x7c>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	4a29      	ldr	r2, [pc, #164]	@ (800d200 <TIM_OC1_SetConfig+0x11c>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d10c      	bne.n	800d17a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	f023 0308 	bic.w	r3, r3, #8
 800d166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	68db      	ldr	r3, [r3, #12]
 800d16c:	697a      	ldr	r2, [r7, #20]
 800d16e:	4313      	orrs	r3, r2
 800d170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	f023 0304 	bic.w	r3, r3, #4
 800d178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	4a1c      	ldr	r2, [pc, #112]	@ (800d1f0 <TIM_OC1_SetConfig+0x10c>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d00f      	beq.n	800d1a2 <TIM_OC1_SetConfig+0xbe>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	4a1b      	ldr	r2, [pc, #108]	@ (800d1f4 <TIM_OC1_SetConfig+0x110>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d00b      	beq.n	800d1a2 <TIM_OC1_SetConfig+0xbe>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	4a1a      	ldr	r2, [pc, #104]	@ (800d1f8 <TIM_OC1_SetConfig+0x114>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d007      	beq.n	800d1a2 <TIM_OC1_SetConfig+0xbe>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	4a19      	ldr	r2, [pc, #100]	@ (800d1fc <TIM_OC1_SetConfig+0x118>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d003      	beq.n	800d1a2 <TIM_OC1_SetConfig+0xbe>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	4a18      	ldr	r2, [pc, #96]	@ (800d200 <TIM_OC1_SetConfig+0x11c>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d111      	bne.n	800d1c6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d1a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d1b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	695b      	ldr	r3, [r3, #20]
 800d1b6:	693a      	ldr	r2, [r7, #16]
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	699b      	ldr	r3, [r3, #24]
 800d1c0:	693a      	ldr	r2, [r7, #16]
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	693a      	ldr	r2, [r7, #16]
 800d1ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	68fa      	ldr	r2, [r7, #12]
 800d1d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	685a      	ldr	r2, [r3, #4]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	697a      	ldr	r2, [r7, #20]
 800d1de:	621a      	str	r2, [r3, #32]
}
 800d1e0:	bf00      	nop
 800d1e2:	371c      	adds	r7, #28
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr
 800d1ec:	fffeff8f 	.word	0xfffeff8f
 800d1f0:	40010000 	.word	0x40010000
 800d1f4:	40010400 	.word	0x40010400
 800d1f8:	40014000 	.word	0x40014000
 800d1fc:	40014400 	.word	0x40014400
 800d200:	40014800 	.word	0x40014800

0800d204 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d204:	b480      	push	{r7}
 800d206:	b087      	sub	sp, #28
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6a1b      	ldr	r3, [r3, #32]
 800d212:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6a1b      	ldr	r3, [r3, #32]
 800d218:	f023 0210 	bic.w	r2, r3, #16
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	699b      	ldr	r3, [r3, #24]
 800d22a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	4b34      	ldr	r3, [pc, #208]	@ (800d300 <TIM_OC2_SetConfig+0xfc>)
 800d230:	4013      	ands	r3, r2
 800d232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d23a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	021b      	lsls	r3, r3, #8
 800d242:	68fa      	ldr	r2, [r7, #12]
 800d244:	4313      	orrs	r3, r2
 800d246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	f023 0320 	bic.w	r3, r3, #32
 800d24e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	011b      	lsls	r3, r3, #4
 800d256:	697a      	ldr	r2, [r7, #20]
 800d258:	4313      	orrs	r3, r2
 800d25a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	4a29      	ldr	r2, [pc, #164]	@ (800d304 <TIM_OC2_SetConfig+0x100>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d003      	beq.n	800d26c <TIM_OC2_SetConfig+0x68>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	4a28      	ldr	r2, [pc, #160]	@ (800d308 <TIM_OC2_SetConfig+0x104>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d10d      	bne.n	800d288 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	011b      	lsls	r3, r3, #4
 800d27a:	697a      	ldr	r2, [r7, #20]
 800d27c:	4313      	orrs	r3, r2
 800d27e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d286:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	4a1e      	ldr	r2, [pc, #120]	@ (800d304 <TIM_OC2_SetConfig+0x100>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d00f      	beq.n	800d2b0 <TIM_OC2_SetConfig+0xac>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	4a1d      	ldr	r2, [pc, #116]	@ (800d308 <TIM_OC2_SetConfig+0x104>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d00b      	beq.n	800d2b0 <TIM_OC2_SetConfig+0xac>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	4a1c      	ldr	r2, [pc, #112]	@ (800d30c <TIM_OC2_SetConfig+0x108>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d007      	beq.n	800d2b0 <TIM_OC2_SetConfig+0xac>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	4a1b      	ldr	r2, [pc, #108]	@ (800d310 <TIM_OC2_SetConfig+0x10c>)
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d003      	beq.n	800d2b0 <TIM_OC2_SetConfig+0xac>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	4a1a      	ldr	r2, [pc, #104]	@ (800d314 <TIM_OC2_SetConfig+0x110>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d113      	bne.n	800d2d8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d2b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d2be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	695b      	ldr	r3, [r3, #20]
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	693a      	ldr	r2, [r7, #16]
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	699b      	ldr	r3, [r3, #24]
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	693a      	ldr	r2, [r7, #16]
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	693a      	ldr	r2, [r7, #16]
 800d2dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	68fa      	ldr	r2, [r7, #12]
 800d2e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	685a      	ldr	r2, [r3, #4]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	697a      	ldr	r2, [r7, #20]
 800d2f0:	621a      	str	r2, [r3, #32]
}
 800d2f2:	bf00      	nop
 800d2f4:	371c      	adds	r7, #28
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fc:	4770      	bx	lr
 800d2fe:	bf00      	nop
 800d300:	feff8fff 	.word	0xfeff8fff
 800d304:	40010000 	.word	0x40010000
 800d308:	40010400 	.word	0x40010400
 800d30c:	40014000 	.word	0x40014000
 800d310:	40014400 	.word	0x40014400
 800d314:	40014800 	.word	0x40014800

0800d318 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d318:	b480      	push	{r7}
 800d31a:	b087      	sub	sp, #28
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6a1b      	ldr	r3, [r3, #32]
 800d326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6a1b      	ldr	r3, [r3, #32]
 800d32c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	69db      	ldr	r3, [r3, #28]
 800d33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d340:	68fa      	ldr	r2, [r7, #12]
 800d342:	4b33      	ldr	r3, [pc, #204]	@ (800d410 <TIM_OC3_SetConfig+0xf8>)
 800d344:	4013      	ands	r3, r2
 800d346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f023 0303 	bic.w	r3, r3, #3
 800d34e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	68fa      	ldr	r2, [r7, #12]
 800d356:	4313      	orrs	r3, r2
 800d358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	689b      	ldr	r3, [r3, #8]
 800d366:	021b      	lsls	r3, r3, #8
 800d368:	697a      	ldr	r2, [r7, #20]
 800d36a:	4313      	orrs	r3, r2
 800d36c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	4a28      	ldr	r2, [pc, #160]	@ (800d414 <TIM_OC3_SetConfig+0xfc>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d003      	beq.n	800d37e <TIM_OC3_SetConfig+0x66>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	4a27      	ldr	r2, [pc, #156]	@ (800d418 <TIM_OC3_SetConfig+0x100>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d10d      	bne.n	800d39a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d384:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	021b      	lsls	r3, r3, #8
 800d38c:	697a      	ldr	r2, [r7, #20]
 800d38e:	4313      	orrs	r3, r2
 800d390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	4a1d      	ldr	r2, [pc, #116]	@ (800d414 <TIM_OC3_SetConfig+0xfc>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d00f      	beq.n	800d3c2 <TIM_OC3_SetConfig+0xaa>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	4a1c      	ldr	r2, [pc, #112]	@ (800d418 <TIM_OC3_SetConfig+0x100>)
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d00b      	beq.n	800d3c2 <TIM_OC3_SetConfig+0xaa>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	4a1b      	ldr	r2, [pc, #108]	@ (800d41c <TIM_OC3_SetConfig+0x104>)
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	d007      	beq.n	800d3c2 <TIM_OC3_SetConfig+0xaa>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	4a1a      	ldr	r2, [pc, #104]	@ (800d420 <TIM_OC3_SetConfig+0x108>)
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	d003      	beq.n	800d3c2 <TIM_OC3_SetConfig+0xaa>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	4a19      	ldr	r2, [pc, #100]	@ (800d424 <TIM_OC3_SetConfig+0x10c>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d113      	bne.n	800d3ea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d3c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d3d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	695b      	ldr	r3, [r3, #20]
 800d3d6:	011b      	lsls	r3, r3, #4
 800d3d8:	693a      	ldr	r2, [r7, #16]
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	699b      	ldr	r3, [r3, #24]
 800d3e2:	011b      	lsls	r3, r3, #4
 800d3e4:	693a      	ldr	r2, [r7, #16]
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	693a      	ldr	r2, [r7, #16]
 800d3ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	68fa      	ldr	r2, [r7, #12]
 800d3f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	685a      	ldr	r2, [r3, #4]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	697a      	ldr	r2, [r7, #20]
 800d402:	621a      	str	r2, [r3, #32]
}
 800d404:	bf00      	nop
 800d406:	371c      	adds	r7, #28
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr
 800d410:	fffeff8f 	.word	0xfffeff8f
 800d414:	40010000 	.word	0x40010000
 800d418:	40010400 	.word	0x40010400
 800d41c:	40014000 	.word	0x40014000
 800d420:	40014400 	.word	0x40014400
 800d424:	40014800 	.word	0x40014800

0800d428 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d428:	b480      	push	{r7}
 800d42a:	b087      	sub	sp, #28
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6a1b      	ldr	r3, [r3, #32]
 800d436:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6a1b      	ldr	r3, [r3, #32]
 800d43c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	69db      	ldr	r3, [r3, #28]
 800d44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	4b24      	ldr	r3, [pc, #144]	@ (800d4e4 <TIM_OC4_SetConfig+0xbc>)
 800d454:	4013      	ands	r3, r2
 800d456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d45e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	021b      	lsls	r3, r3, #8
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	4313      	orrs	r3, r2
 800d46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	689b      	ldr	r3, [r3, #8]
 800d478:	031b      	lsls	r3, r3, #12
 800d47a:	693a      	ldr	r2, [r7, #16]
 800d47c:	4313      	orrs	r3, r2
 800d47e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a19      	ldr	r2, [pc, #100]	@ (800d4e8 <TIM_OC4_SetConfig+0xc0>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d00f      	beq.n	800d4a8 <TIM_OC4_SetConfig+0x80>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	4a18      	ldr	r2, [pc, #96]	@ (800d4ec <TIM_OC4_SetConfig+0xc4>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d00b      	beq.n	800d4a8 <TIM_OC4_SetConfig+0x80>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	4a17      	ldr	r2, [pc, #92]	@ (800d4f0 <TIM_OC4_SetConfig+0xc8>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d007      	beq.n	800d4a8 <TIM_OC4_SetConfig+0x80>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	4a16      	ldr	r2, [pc, #88]	@ (800d4f4 <TIM_OC4_SetConfig+0xcc>)
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d003      	beq.n	800d4a8 <TIM_OC4_SetConfig+0x80>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	4a15      	ldr	r2, [pc, #84]	@ (800d4f8 <TIM_OC4_SetConfig+0xd0>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d109      	bne.n	800d4bc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d4ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	695b      	ldr	r3, [r3, #20]
 800d4b4:	019b      	lsls	r3, r3, #6
 800d4b6:	697a      	ldr	r2, [r7, #20]
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	697a      	ldr	r2, [r7, #20]
 800d4c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	68fa      	ldr	r2, [r7, #12]
 800d4c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	685a      	ldr	r2, [r3, #4]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	693a      	ldr	r2, [r7, #16]
 800d4d4:	621a      	str	r2, [r3, #32]
}
 800d4d6:	bf00      	nop
 800d4d8:	371c      	adds	r7, #28
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr
 800d4e2:	bf00      	nop
 800d4e4:	feff8fff 	.word	0xfeff8fff
 800d4e8:	40010000 	.word	0x40010000
 800d4ec:	40010400 	.word	0x40010400
 800d4f0:	40014000 	.word	0x40014000
 800d4f4:	40014400 	.word	0x40014400
 800d4f8:	40014800 	.word	0x40014800

0800d4fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b087      	sub	sp, #28
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6a1b      	ldr	r3, [r3, #32]
 800d50a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6a1b      	ldr	r3, [r3, #32]
 800d510:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	4b21      	ldr	r3, [pc, #132]	@ (800d5ac <TIM_OC5_SetConfig+0xb0>)
 800d528:	4013      	ands	r3, r2
 800d52a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	68fa      	ldr	r2, [r7, #12]
 800d532:	4313      	orrs	r3, r2
 800d534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d53c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	041b      	lsls	r3, r3, #16
 800d544:	693a      	ldr	r2, [r7, #16]
 800d546:	4313      	orrs	r3, r2
 800d548:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	4a18      	ldr	r2, [pc, #96]	@ (800d5b0 <TIM_OC5_SetConfig+0xb4>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d00f      	beq.n	800d572 <TIM_OC5_SetConfig+0x76>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	4a17      	ldr	r2, [pc, #92]	@ (800d5b4 <TIM_OC5_SetConfig+0xb8>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d00b      	beq.n	800d572 <TIM_OC5_SetConfig+0x76>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4a16      	ldr	r2, [pc, #88]	@ (800d5b8 <TIM_OC5_SetConfig+0xbc>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d007      	beq.n	800d572 <TIM_OC5_SetConfig+0x76>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	4a15      	ldr	r2, [pc, #84]	@ (800d5bc <TIM_OC5_SetConfig+0xc0>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d003      	beq.n	800d572 <TIM_OC5_SetConfig+0x76>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	4a14      	ldr	r2, [pc, #80]	@ (800d5c0 <TIM_OC5_SetConfig+0xc4>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d109      	bne.n	800d586 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d578:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	695b      	ldr	r3, [r3, #20]
 800d57e:	021b      	lsls	r3, r3, #8
 800d580:	697a      	ldr	r2, [r7, #20]
 800d582:	4313      	orrs	r3, r2
 800d584:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	697a      	ldr	r2, [r7, #20]
 800d58a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	68fa      	ldr	r2, [r7, #12]
 800d590:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	685a      	ldr	r2, [r3, #4]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	693a      	ldr	r2, [r7, #16]
 800d59e:	621a      	str	r2, [r3, #32]
}
 800d5a0:	bf00      	nop
 800d5a2:	371c      	adds	r7, #28
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr
 800d5ac:	fffeff8f 	.word	0xfffeff8f
 800d5b0:	40010000 	.word	0x40010000
 800d5b4:	40010400 	.word	0x40010400
 800d5b8:	40014000 	.word	0x40014000
 800d5bc:	40014400 	.word	0x40014400
 800d5c0:	40014800 	.word	0x40014800

0800d5c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b087      	sub	sp, #28
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6a1b      	ldr	r3, [r3, #32]
 800d5d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6a1b      	ldr	r3, [r3, #32]
 800d5d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d5ec:	68fa      	ldr	r2, [r7, #12]
 800d5ee:	4b22      	ldr	r3, [pc, #136]	@ (800d678 <TIM_OC6_SetConfig+0xb4>)
 800d5f0:	4013      	ands	r3, r2
 800d5f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	021b      	lsls	r3, r3, #8
 800d5fa:	68fa      	ldr	r2, [r7, #12]
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	689b      	ldr	r3, [r3, #8]
 800d60c:	051b      	lsls	r3, r3, #20
 800d60e:	693a      	ldr	r2, [r7, #16]
 800d610:	4313      	orrs	r3, r2
 800d612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	4a19      	ldr	r2, [pc, #100]	@ (800d67c <TIM_OC6_SetConfig+0xb8>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d00f      	beq.n	800d63c <TIM_OC6_SetConfig+0x78>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4a18      	ldr	r2, [pc, #96]	@ (800d680 <TIM_OC6_SetConfig+0xbc>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d00b      	beq.n	800d63c <TIM_OC6_SetConfig+0x78>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	4a17      	ldr	r2, [pc, #92]	@ (800d684 <TIM_OC6_SetConfig+0xc0>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d007      	beq.n	800d63c <TIM_OC6_SetConfig+0x78>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	4a16      	ldr	r2, [pc, #88]	@ (800d688 <TIM_OC6_SetConfig+0xc4>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d003      	beq.n	800d63c <TIM_OC6_SetConfig+0x78>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	4a15      	ldr	r2, [pc, #84]	@ (800d68c <TIM_OC6_SetConfig+0xc8>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d109      	bne.n	800d650 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d642:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	695b      	ldr	r3, [r3, #20]
 800d648:	029b      	lsls	r3, r3, #10
 800d64a:	697a      	ldr	r2, [r7, #20]
 800d64c:	4313      	orrs	r3, r2
 800d64e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	697a      	ldr	r2, [r7, #20]
 800d654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	68fa      	ldr	r2, [r7, #12]
 800d65a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	685a      	ldr	r2, [r3, #4]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	693a      	ldr	r2, [r7, #16]
 800d668:	621a      	str	r2, [r3, #32]
}
 800d66a:	bf00      	nop
 800d66c:	371c      	adds	r7, #28
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop
 800d678:	feff8fff 	.word	0xfeff8fff
 800d67c:	40010000 	.word	0x40010000
 800d680:	40010400 	.word	0x40010400
 800d684:	40014000 	.word	0x40014000
 800d688:	40014400 	.word	0x40014400
 800d68c:	40014800 	.word	0x40014800

0800d690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d690:	b480      	push	{r7}
 800d692:	b087      	sub	sp, #28
 800d694:	af00      	add	r7, sp, #0
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	60b9      	str	r1, [r7, #8]
 800d69a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6a1b      	ldr	r3, [r3, #32]
 800d6a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	6a1b      	ldr	r3, [r3, #32]
 800d6a6:	f023 0201 	bic.w	r2, r3, #1
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	699b      	ldr	r3, [r3, #24]
 800d6b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d6ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	011b      	lsls	r3, r3, #4
 800d6c0:	693a      	ldr	r2, [r7, #16]
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	f023 030a 	bic.w	r3, r3, #10
 800d6cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d6ce:	697a      	ldr	r2, [r7, #20]
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	4313      	orrs	r3, r2
 800d6d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	693a      	ldr	r2, [r7, #16]
 800d6da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	697a      	ldr	r2, [r7, #20]
 800d6e0:	621a      	str	r2, [r3, #32]
}
 800d6e2:	bf00      	nop
 800d6e4:	371c      	adds	r7, #28
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr

0800d6ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d6ee:	b480      	push	{r7}
 800d6f0:	b087      	sub	sp, #28
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	60f8      	str	r0, [r7, #12]
 800d6f6:	60b9      	str	r1, [r7, #8]
 800d6f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	6a1b      	ldr	r3, [r3, #32]
 800d6fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	6a1b      	ldr	r3, [r3, #32]
 800d704:	f023 0210 	bic.w	r2, r3, #16
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	699b      	ldr	r3, [r3, #24]
 800d710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d718:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	031b      	lsls	r3, r3, #12
 800d71e:	693a      	ldr	r2, [r7, #16]
 800d720:	4313      	orrs	r3, r2
 800d722:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d72a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	011b      	lsls	r3, r3, #4
 800d730:	697a      	ldr	r2, [r7, #20]
 800d732:	4313      	orrs	r3, r2
 800d734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	693a      	ldr	r2, [r7, #16]
 800d73a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	697a      	ldr	r2, [r7, #20]
 800d740:	621a      	str	r2, [r3, #32]
}
 800d742:	bf00      	nop
 800d744:	371c      	adds	r7, #28
 800d746:	46bd      	mov	sp, r7
 800d748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74c:	4770      	bx	lr
	...

0800d750 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d750:	b480      	push	{r7}
 800d752:	b085      	sub	sp, #20
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	689b      	ldr	r3, [r3, #8]
 800d75e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d760:	68fa      	ldr	r2, [r7, #12]
 800d762:	4b09      	ldr	r3, [pc, #36]	@ (800d788 <TIM_ITRx_SetConfig+0x38>)
 800d764:	4013      	ands	r3, r2
 800d766:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d768:	683a      	ldr	r2, [r7, #0]
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	4313      	orrs	r3, r2
 800d76e:	f043 0307 	orr.w	r3, r3, #7
 800d772:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	68fa      	ldr	r2, [r7, #12]
 800d778:	609a      	str	r2, [r3, #8]
}
 800d77a:	bf00      	nop
 800d77c:	3714      	adds	r7, #20
 800d77e:	46bd      	mov	sp, r7
 800d780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d784:	4770      	bx	lr
 800d786:	bf00      	nop
 800d788:	ffcfff8f 	.word	0xffcfff8f

0800d78c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b087      	sub	sp, #28
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	607a      	str	r2, [r7, #4]
 800d798:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	689b      	ldr	r3, [r3, #8]
 800d79e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d7a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	021a      	lsls	r2, r3, #8
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	431a      	orrs	r2, r3
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	697a      	ldr	r2, [r7, #20]
 800d7b6:	4313      	orrs	r3, r2
 800d7b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	697a      	ldr	r2, [r7, #20]
 800d7be:	609a      	str	r2, [r3, #8]
}
 800d7c0:	bf00      	nop
 800d7c2:	371c      	adds	r7, #28
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b087      	sub	sp, #28
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	60b9      	str	r1, [r7, #8]
 800d7d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	f003 031f 	and.w	r3, r3, #31
 800d7de:	2201      	movs	r2, #1
 800d7e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d7e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	6a1a      	ldr	r2, [r3, #32]
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	43db      	mvns	r3, r3
 800d7ee:	401a      	ands	r2, r3
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	6a1a      	ldr	r2, [r3, #32]
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	f003 031f 	and.w	r3, r3, #31
 800d7fe:	6879      	ldr	r1, [r7, #4]
 800d800:	fa01 f303 	lsl.w	r3, r1, r3
 800d804:	431a      	orrs	r2, r3
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	621a      	str	r2, [r3, #32]
}
 800d80a:	bf00      	nop
 800d80c:	371c      	adds	r7, #28
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr
	...

0800d818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d818:	b480      	push	{r7}
 800d81a:	b085      	sub	sp, #20
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d828:	2b01      	cmp	r3, #1
 800d82a:	d101      	bne.n	800d830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d82c:	2302      	movs	r3, #2
 800d82e:	e077      	b.n	800d920 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2201      	movs	r2, #1
 800d834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2202      	movs	r2, #2
 800d83c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	689b      	ldr	r3, [r3, #8]
 800d84e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4a35      	ldr	r2, [pc, #212]	@ (800d92c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d004      	beq.n	800d864 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	4a34      	ldr	r2, [pc, #208]	@ (800d930 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d108      	bne.n	800d876 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d86a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	4313      	orrs	r3, r2
 800d874:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d87c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	68fa      	ldr	r2, [r7, #12]
 800d884:	4313      	orrs	r3, r2
 800d886:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	68fa      	ldr	r2, [r7, #12]
 800d88e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a25      	ldr	r2, [pc, #148]	@ (800d92c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d02c      	beq.n	800d8f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8a2:	d027      	beq.n	800d8f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4a22      	ldr	r2, [pc, #136]	@ (800d934 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d022      	beq.n	800d8f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4a21      	ldr	r2, [pc, #132]	@ (800d938 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d01d      	beq.n	800d8f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4a1f      	ldr	r2, [pc, #124]	@ (800d93c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d018      	beq.n	800d8f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	4a1a      	ldr	r2, [pc, #104]	@ (800d930 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d013      	beq.n	800d8f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4a1b      	ldr	r2, [pc, #108]	@ (800d940 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d00e      	beq.n	800d8f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	4a1a      	ldr	r2, [pc, #104]	@ (800d944 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d009      	beq.n	800d8f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4a18      	ldr	r2, [pc, #96]	@ (800d948 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d004      	beq.n	800d8f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	4a17      	ldr	r2, [pc, #92]	@ (800d94c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d10c      	bne.n	800d90e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d8fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	68ba      	ldr	r2, [r7, #8]
 800d902:	4313      	orrs	r3, r2
 800d904:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	68ba      	ldr	r2, [r7, #8]
 800d90c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2201      	movs	r2, #1
 800d912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d91e:	2300      	movs	r3, #0
}
 800d920:	4618      	mov	r0, r3
 800d922:	3714      	adds	r7, #20
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr
 800d92c:	40010000 	.word	0x40010000
 800d930:	40010400 	.word	0x40010400
 800d934:	40000400 	.word	0x40000400
 800d938:	40000800 	.word	0x40000800
 800d93c:	40000c00 	.word	0x40000c00
 800d940:	40001800 	.word	0x40001800
 800d944:	40014000 	.word	0x40014000
 800d948:	4000e000 	.word	0x4000e000
 800d94c:	4000e400 	.word	0x4000e400

0800d950 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d958:	bf00      	nop
 800d95a:	370c      	adds	r7, #12
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr

0800d964 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d964:	b480      	push	{r7}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d96c:	bf00      	nop
 800d96e:	370c      	adds	r7, #12
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr

0800d978 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d978:	b480      	push	{r7}
 800d97a:	b083      	sub	sp, #12
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d980:	bf00      	nop
 800d982:	370c      	adds	r7, #12
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr

0800d98c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
    {
 800d994:	4a04      	ldr	r2, [pc, #16]	@ (800d9a8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	601a      	str	r2, [r3, #0]
    }
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	4618      	mov	r0, r3
 800d99e:	370c      	adds	r7, #12
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr
 800d9a8:	08010438 	.word	0x08010438

0800d9ac <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b082      	sub	sp, #8
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
    }
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f7ff ffe9 	bl	800d98c <_ZN8touchgfx4FontD1Ev>
 800d9ba:	2114      	movs	r1, #20
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f001 fb6c 	bl	800f09a <_ZdlPvj>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3708      	adds	r7, #8
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}

0800d9cc <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800d9cc:	b590      	push	{r4, r7, lr}
 800d9ce:	b087      	sub	sp, #28
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800d9d8:	887b      	ldrh	r3, [r7, #2]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d101      	bne.n	800d9e2 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	e010      	b.n	800da04 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	3308      	adds	r3, #8
 800d9f0:	681c      	ldr	r4, [r3, #0]
 800d9f2:	f107 030f 	add.w	r3, r7, #15
 800d9f6:	f107 0210 	add.w	r2, r7, #16
 800d9fa:	8879      	ldrh	r1, [r7, #2]
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	47a0      	blx	r4
 800da00:	6178      	str	r0, [r7, #20]
        return glyph;
 800da02:	697b      	ldr	r3, [r7, #20]
    }
 800da04:	4618      	mov	r0, r3
 800da06:	371c      	adds	r7, #28
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd90      	pop	{r4, r7, pc}

0800da0c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800da0c:	b480      	push	{r7}
 800da0e:	b083      	sub	sp, #12
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	89db      	ldrh	r3, [r3, #14]
    }
 800da18:	4618      	mov	r0, r3
 800da1a:	370c      	adds	r7, #12
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr

0800da24 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	8a1b      	ldrh	r3, [r3, #16]
    }
 800da30:	4618      	mov	r0, r3
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr

0800da3c <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	88db      	ldrh	r3, [r3, #6]
    }
 800da48:	4618      	mov	r0, r3
 800da4a:	370c      	adds	r7, #12
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	889b      	ldrh	r3, [r3, #4]
    }
 800da60:	4618      	mov	r0, r3
 800da62:	370c      	adds	r7, #12
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr

0800da6c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800da6c:	b480      	push	{r7}
 800da6e:	b083      	sub	sp, #12
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	7a9b      	ldrb	r3, [r3, #10]
 800da78:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800da7c:	b2db      	uxtb	r3, r3
    }
 800da7e:	4618      	mov	r0, r3
 800da80:	370c      	adds	r7, #12
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr

0800da8a <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800da8a:	b480      	push	{r7}
 800da8c:	b083      	sub	sp, #12
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	7a9b      	ldrb	r3, [r3, #10]
 800da96:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800da9a:	b2db      	uxtb	r3, r3
    }
 800da9c:	4618      	mov	r0, r3
 800da9e:	370c      	adds	r7, #12
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
    {
        return false;
 800dab0:	2300      	movs	r3, #0
    }
 800dab2:	4618      	mov	r0, r3
 800dab4:	370c      	adds	r7, #12
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr

0800dabe <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800dabe:	b480      	push	{r7}
 800dac0:	b083      	sub	sp, #12
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800dac6:	f04f 0300 	mov.w	r3, #0
 800daca:	ee07 3a90 	vmov	s15, r3
    }
 800dace:	eeb0 0a67 	vmov.f32	s0, s15
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	4a05      	ldr	r2, [pc, #20]	@ (800dafc <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	601a      	str	r2, [r3, #0]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	4618      	mov	r0, r3
 800daee:	f7ff ff4d 	bl	800d98c <_ZN8touchgfx4FontD1Ev>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	4618      	mov	r0, r3
 800daf6:	3708      	adds	r7, #8
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}
 800dafc:	0801049c 	.word	0x0801049c

0800db00 <_ZN8touchgfx9ConstFontD0Ev>:
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f7ff ffe7 	bl	800dadc <_ZN8touchgfx9ConstFontD1Ev>
 800db0e:	211c      	movs	r1, #28
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f001 fac2 	bl	800f09a <_ZdlPvj>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	4618      	mov	r0, r3
 800db1a:	3708      	adds	r7, #8
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	4a05      	ldr	r2, [pc, #20]	@ (800db40 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	601a      	str	r2, [r3, #0]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	4618      	mov	r0, r3
 800db32:	f7ff ffd3 	bl	800dadc <_ZN8touchgfx9ConstFontD1Ev>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	4618      	mov	r0, r3
 800db3a:	3708      	adds	r7, #8
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}
 800db40:	080103d0 	.word	0x080103d0

0800db44 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f7ff ffe7 	bl	800db20 <_ZN8touchgfx13GeneratedFontD1Ev>
 800db52:	212c      	movs	r1, #44	@ 0x2c
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f001 faa0 	bl	800f09a <_ZdlPvj>
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	4618      	mov	r0, r3
 800db5e:	3708      	adds	r7, #8
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800db64:	b480      	push	{r7}
 800db66:	b083      	sub	sp, #12
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800db70:	4618      	mov	r0, r3
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr

0800db7c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800db7c:	b480      	push	{r7}
 800db7e:	b083      	sub	sp, #12
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800db88:	4618      	mov	r0, r3
 800db8a:	370c      	adds	r7, #12
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <math.h>
#include <stddef.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800db94:	b580      	push	{r7, lr}
 800db96:	b08e      	sub	sp, #56	@ 0x38
 800db98:	af0a      	add	r7, sp, #40	@ 0x28
 800db9a:	60f8      	str	r0, [r7, #12]
 800db9c:	60b9      	str	r1, [r7, #8]
 800db9e:	4611      	mov	r1, r2
 800dba0:	461a      	mov	r2, r3
 800dba2:	460b      	mov	r3, r1
 800dba4:	80fb      	strh	r3, [r7, #6]
 800dba6:	4613      	mov	r3, r2
 800dba8:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800dbaa:	68f8      	ldr	r0, [r7, #12]
 800dbac:	88b9      	ldrh	r1, [r7, #4]
 800dbae:	88fa      	ldrh	r2, [r7, #6]
 800dbb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dbb4:	9308      	str	r3, [sp, #32]
 800dbb6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800dbb8:	9307      	str	r3, [sp, #28]
 800dbba:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800dbbe:	9306      	str	r3, [sp, #24]
 800dbc0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dbc4:	9305      	str	r3, [sp, #20]
 800dbc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dbca:	9304      	str	r3, [sp, #16]
 800dbcc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dbd0:	9303      	str	r3, [sp, #12]
 800dbd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dbd6:	9302      	str	r3, [sp, #8]
 800dbd8:	7f3b      	ldrb	r3, [r7, #28]
 800dbda:	9301      	str	r3, [sp, #4]
 800dbdc:	8b3b      	ldrh	r3, [r7, #24]
 800dbde:	9300      	str	r3, [sp, #0]
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	68b9      	ldr	r1, [r7, #8]
 800dbe4:	f000 fcb4 	bl	800e550 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800dbe8:	4a09      	ldr	r2, [pc, #36]	@ (800dc10 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbf2:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbf8:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dbfe:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc04:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3710      	adds	r7, #16
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	080103d0 	.word	0x080103d0

0800dc14 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800dc14:	b480      	push	{r7}
 800dc16:	b087      	sub	sp, #28
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	617b      	str	r3, [r7, #20]
    uint32_t offset = dataOffset[0];
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	881b      	ldrh	r3, [r3, #0]
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	613b      	str	r3, [r7, #16]
    offset |= dataOffset[1] << 16;
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	3302      	adds	r3, #2
 800dc2e:	881b      	ldrh	r3, [r3, #0]
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	041b      	lsls	r3, r3, #16
 800dc34:	461a      	mov	r2, r3
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	613b      	str	r3, [r7, #16]

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	69db      	ldr	r3, [r3, #28]
 800dc40:	60fb      	str	r3, [r7, #12]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	889b      	ldrh	r3, [r3, #4]
 800dc46:	0adb      	lsrs	r3, r3, #11
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	68fa      	ldr	r2, [r7, #12]
 800dc4e:	4413      	add	r3, r2
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	60bb      	str	r3, [r7, #8]
    return pixels + offset;
 800dc54:	68ba      	ldr	r2, [r7, #8]
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	4413      	add	r3, r2
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	371c      	adds	r7, #28
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc64:	4770      	bx	lr

0800dc66 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800dc66:	b480      	push	{r7}
 800dc68:	b089      	sub	sp, #36	@ 0x24
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	60f8      	str	r0, [r7, #12]
 800dc6e:	460b      	mov	r3, r1
 800dc70:	607a      	str	r2, [r7, #4]
 800dc72:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d003      	beq.n	800dc82 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	7b1b      	ldrb	r3, [r3, #12]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d101      	bne.n	800dc86 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800dc82:	2300      	movs	r3, #0
 800dc84:	e032      	b.n	800dcec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	6a1a      	ldr	r2, [r3, #32]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	7b5b      	ldrb	r3, [r3, #13]
 800dc92:	b21b      	sxth	r3, r3
 800dc94:	021b      	lsls	r3, r3, #8
 800dc96:	b21b      	sxth	r3, r3
 800dc98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dc9c:	b219      	sxth	r1, r3
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	7adb      	ldrb	r3, [r3, #11]
 800dca2:	b21b      	sxth	r3, r3
 800dca4:	430b      	orrs	r3, r1
 800dca6:	b21b      	sxth	r3, r3
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	4413      	add	r3, r2
 800dcae:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	7b1b      	ldrb	r3, [r3, #12]
 800dcb4:	837b      	strh	r3, [r7, #26]
 800dcb6:	e013      	b.n	800dce0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7a>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800dcb8:	69fb      	ldr	r3, [r7, #28]
 800dcba:	881b      	ldrh	r3, [r3, #0]
 800dcbc:	897a      	ldrh	r2, [r7, #10]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d103      	bne.n	800dcca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x64>
        {
            return kerndata->distance;
 800dcc2:	69fb      	ldr	r3, [r7, #28]
 800dcc4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800dcc8:	e010      	b.n	800dcec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800dcca:	69fb      	ldr	r3, [r7, #28]
 800dccc:	881b      	ldrh	r3, [r3, #0]
 800dcce:	897a      	ldrh	r2, [r7, #10]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d309      	bcc.n	800dce8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800dcd4:	8b7b      	ldrh	r3, [r7, #26]
 800dcd6:	3b01      	subs	r3, #1
 800dcd8:	837b      	strh	r3, [r7, #26]
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	3304      	adds	r3, #4
 800dcde:	61fb      	str	r3, [r7, #28]
 800dce0:	8b7b      	ldrh	r3, [r7, #26]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d1e8      	bne.n	800dcb8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
 800dce6:	e000      	b.n	800dcea <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        {
            break;
 800dce8:	bf00      	nop
        }
    }
    return 0;
 800dcea:	2300      	movs	r3, #0
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3724      	adds	r7, #36	@ 0x24
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_consola_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_consola_20_4bpp();

touchgfx::GeneratedFont& getFont_consola_20_4bpp()
{
    static touchgfx::GeneratedFont consola_20_4bpp(glyphs_consola_20_4bpp, 12, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_consola_20_4bpp, kerning_consola_20_4bpp, 63, 0, 0, 0);
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	4801      	ldr	r0, [pc, #4]	@ (800dd04 <__tcf_0+0xc>)
 800dcfe:	f7ff ff0f 	bl	800db20 <_ZN8touchgfx13GeneratedFontD1Ev>
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	24000698 	.word	0x24000698

0800dd08 <_Z23getFont_consola_20_4bppv>:
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b08e      	sub	sp, #56	@ 0x38
 800dd0c:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont consola_20_4bpp(glyphs_consola_20_4bpp, 12, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_consola_20_4bpp, kerning_consola_20_4bpp, 63, 0, 0, 0);
 800dd0e:	4b21      	ldr	r3, [pc, #132]	@ (800dd94 <_Z23getFont_consola_20_4bppv+0x8c>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f3bf 8f5b 	dmb	ish
 800dd16:	f003 0301 	and.w	r3, r3, #1
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	bf0c      	ite	eq
 800dd1e:	2301      	moveq	r3, #1
 800dd20:	2300      	movne	r3, #0
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d030      	beq.n	800dd8a <_Z23getFont_consola_20_4bppv+0x82>
 800dd28:	481a      	ldr	r0, [pc, #104]	@ (800dd94 <_Z23getFont_consola_20_4bppv+0x8c>)
 800dd2a:	f001 f9b8 	bl	800f09e <__cxa_guard_acquire>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	bf14      	ite	ne
 800dd34:	2301      	movne	r3, #1
 800dd36:	2300      	moveq	r3, #0
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d025      	beq.n	800dd8a <_Z23getFont_consola_20_4bppv+0x82>
 800dd3e:	2300      	movs	r3, #0
 800dd40:	930c      	str	r3, [sp, #48]	@ 0x30
 800dd42:	2300      	movs	r3, #0
 800dd44:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd46:	2300      	movs	r3, #0
 800dd48:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd4a:	233f      	movs	r3, #63	@ 0x3f
 800dd4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd4e:	4b12      	ldr	r3, [pc, #72]	@ (800dd98 <_Z23getFont_consola_20_4bppv+0x90>)
 800dd50:	9308      	str	r3, [sp, #32]
 800dd52:	4b12      	ldr	r3, [pc, #72]	@ (800dd9c <_Z23getFont_consola_20_4bppv+0x94>)
 800dd54:	9307      	str	r3, [sp, #28]
 800dd56:	2300      	movs	r3, #0
 800dd58:	9306      	str	r3, [sp, #24]
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	9305      	str	r3, [sp, #20]
 800dd5e:	2301      	movs	r3, #1
 800dd60:	9304      	str	r3, [sp, #16]
 800dd62:	2304      	movs	r3, #4
 800dd64:	9303      	str	r3, [sp, #12]
 800dd66:	2300      	movs	r3, #0
 800dd68:	9302      	str	r3, [sp, #8]
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	9301      	str	r3, [sp, #4]
 800dd6e:	2314      	movs	r3, #20
 800dd70:	9300      	str	r3, [sp, #0]
 800dd72:	2314      	movs	r3, #20
 800dd74:	220c      	movs	r2, #12
 800dd76:	490a      	ldr	r1, [pc, #40]	@ (800dda0 <_Z23getFont_consola_20_4bppv+0x98>)
 800dd78:	480a      	ldr	r0, [pc, #40]	@ (800dda4 <_Z23getFont_consola_20_4bppv+0x9c>)
 800dd7a:	f7ff ff0b 	bl	800db94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800dd7e:	480a      	ldr	r0, [pc, #40]	@ (800dda8 <_Z23getFont_consola_20_4bppv+0xa0>)
 800dd80:	f001 f9d8 	bl	800f134 <atexit>
 800dd84:	4803      	ldr	r0, [pc, #12]	@ (800dd94 <_Z23getFont_consola_20_4bppv+0x8c>)
 800dd86:	f001 f996 	bl	800f0b6 <__cxa_guard_release>
    return consola_20_4bpp;
 800dd8a:	4b06      	ldr	r3, [pc, #24]	@ (800dda4 <_Z23getFont_consola_20_4bppv+0x9c>)
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	240006c4 	.word	0x240006c4
 800dd98:	08011834 	.word	0x08011834
 800dd9c:	08011848 	.word	0x08011848
 800dda0:	08011570 	.word	0x08011570
 800dda4:	24000698 	.word	0x24000698
 800dda8:	0800dcf9 	.word	0x0800dcf9

0800ddac <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_consolab_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_consolab_20_4bpp();

touchgfx::GeneratedFont& getFont_consolab_20_4bpp()
{
    static touchgfx::GeneratedFont consolab_20_4bpp(glyphs_consolab_20_4bpp, 25, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_consolab_20_4bpp, kerning_consolab_20_4bpp, 63, 0, 0, 0);
 800ddac:	b580      	push	{r7, lr}
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	4801      	ldr	r0, [pc, #4]	@ (800ddb8 <__tcf_0+0xc>)
 800ddb2:	f7ff feb5 	bl	800db20 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	240006c8 	.word	0x240006c8

0800ddbc <_Z24getFont_consolab_20_4bppv>:
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b08e      	sub	sp, #56	@ 0x38
 800ddc0:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont consolab_20_4bpp(glyphs_consolab_20_4bpp, 25, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_consolab_20_4bpp, kerning_consolab_20_4bpp, 63, 0, 0, 0);
 800ddc2:	4b21      	ldr	r3, [pc, #132]	@ (800de48 <_Z24getFont_consolab_20_4bppv+0x8c>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f3bf 8f5b 	dmb	ish
 800ddca:	f003 0301 	and.w	r3, r3, #1
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	bf0c      	ite	eq
 800ddd2:	2301      	moveq	r3, #1
 800ddd4:	2300      	movne	r3, #0
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d030      	beq.n	800de3e <_Z24getFont_consolab_20_4bppv+0x82>
 800dddc:	481a      	ldr	r0, [pc, #104]	@ (800de48 <_Z24getFont_consolab_20_4bppv+0x8c>)
 800ddde:	f001 f95e 	bl	800f09e <__cxa_guard_acquire>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	bf14      	ite	ne
 800dde8:	2301      	movne	r3, #1
 800ddea:	2300      	moveq	r3, #0
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d025      	beq.n	800de3e <_Z24getFont_consolab_20_4bppv+0x82>
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	930c      	str	r3, [sp, #48]	@ 0x30
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddfe:	233f      	movs	r3, #63	@ 0x3f
 800de00:	9309      	str	r3, [sp, #36]	@ 0x24
 800de02:	4b12      	ldr	r3, [pc, #72]	@ (800de4c <_Z24getFont_consolab_20_4bppv+0x90>)
 800de04:	9308      	str	r3, [sp, #32]
 800de06:	4b12      	ldr	r3, [pc, #72]	@ (800de50 <_Z24getFont_consolab_20_4bppv+0x94>)
 800de08:	9307      	str	r3, [sp, #28]
 800de0a:	2300      	movs	r3, #0
 800de0c:	9306      	str	r3, [sp, #24]
 800de0e:	2300      	movs	r3, #0
 800de10:	9305      	str	r3, [sp, #20]
 800de12:	2301      	movs	r3, #1
 800de14:	9304      	str	r3, [sp, #16]
 800de16:	2304      	movs	r3, #4
 800de18:	9303      	str	r3, [sp, #12]
 800de1a:	2300      	movs	r3, #0
 800de1c:	9302      	str	r3, [sp, #8]
 800de1e:	2300      	movs	r3, #0
 800de20:	9301      	str	r3, [sp, #4]
 800de22:	2314      	movs	r3, #20
 800de24:	9300      	str	r3, [sp, #0]
 800de26:	2314      	movs	r3, #20
 800de28:	2219      	movs	r2, #25
 800de2a:	490a      	ldr	r1, [pc, #40]	@ (800de54 <_Z24getFont_consolab_20_4bppv+0x98>)
 800de2c:	480a      	ldr	r0, [pc, #40]	@ (800de58 <_Z24getFont_consolab_20_4bppv+0x9c>)
 800de2e:	f7ff feb1 	bl	800db94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800de32:	480a      	ldr	r0, [pc, #40]	@ (800de5c <_Z24getFont_consolab_20_4bppv+0xa0>)
 800de34:	f001 f97e 	bl	800f134 <atexit>
 800de38:	4803      	ldr	r0, [pc, #12]	@ (800de48 <_Z24getFont_consolab_20_4bppv+0x8c>)
 800de3a:	f001 f93c 	bl	800f0b6 <__cxa_guard_release>
    return consolab_20_4bpp;
 800de3e:	4b06      	ldr	r3, [pc, #24]	@ (800de58 <_Z24getFont_consolab_20_4bppv+0x9c>)
}
 800de40:	4618      	mov	r0, r3
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	240006f4 	.word	0x240006f4
 800de4c:	08011838 	.word	0x08011838
 800de50:	0801184c 	.word	0x0801184c
 800de54:	08011618 	.word	0x08011618
 800de58:	240006c8 	.word	0x240006c8
 800de5c:	0800ddad 	.word	0x0800ddad

0800de60 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_consolab_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_consolab_30_4bpp();

touchgfx::GeneratedFont& getFont_consolab_30_4bpp()
{
    static touchgfx::GeneratedFont consolab_30_4bpp(glyphs_consolab_30_4bpp, 11, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_consolab_30_4bpp, kerning_consolab_30_4bpp, 63, 0, 0, 0);
 800de60:	b580      	push	{r7, lr}
 800de62:	af00      	add	r7, sp, #0
 800de64:	4801      	ldr	r0, [pc, #4]	@ (800de6c <__tcf_0+0xc>)
 800de66:	f7ff fe5b 	bl	800db20 <_ZN8touchgfx13GeneratedFontD1Ev>
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	240006f8 	.word	0x240006f8

0800de70 <_Z24getFont_consolab_30_4bppv>:
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b08e      	sub	sp, #56	@ 0x38
 800de74:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont consolab_30_4bpp(glyphs_consolab_30_4bpp, 11, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_consolab_30_4bpp, kerning_consolab_30_4bpp, 63, 0, 0, 0);
 800de76:	4b21      	ldr	r3, [pc, #132]	@ (800defc <_Z24getFont_consolab_30_4bppv+0x8c>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f3bf 8f5b 	dmb	ish
 800de7e:	f003 0301 	and.w	r3, r3, #1
 800de82:	2b00      	cmp	r3, #0
 800de84:	bf0c      	ite	eq
 800de86:	2301      	moveq	r3, #1
 800de88:	2300      	movne	r3, #0
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d030      	beq.n	800def2 <_Z24getFont_consolab_30_4bppv+0x82>
 800de90:	481a      	ldr	r0, [pc, #104]	@ (800defc <_Z24getFont_consolab_30_4bppv+0x8c>)
 800de92:	f001 f904 	bl	800f09e <__cxa_guard_acquire>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	bf14      	ite	ne
 800de9c:	2301      	movne	r3, #1
 800de9e:	2300      	moveq	r3, #0
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d025      	beq.n	800def2 <_Z24getFont_consolab_30_4bppv+0x82>
 800dea6:	2300      	movs	r3, #0
 800dea8:	930c      	str	r3, [sp, #48]	@ 0x30
 800deaa:	2300      	movs	r3, #0
 800deac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800deae:	2300      	movs	r3, #0
 800deb0:	930a      	str	r3, [sp, #40]	@ 0x28
 800deb2:	233f      	movs	r3, #63	@ 0x3f
 800deb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800deb6:	4b12      	ldr	r3, [pc, #72]	@ (800df00 <_Z24getFont_consolab_30_4bppv+0x90>)
 800deb8:	9308      	str	r3, [sp, #32]
 800deba:	4b12      	ldr	r3, [pc, #72]	@ (800df04 <_Z24getFont_consolab_30_4bppv+0x94>)
 800debc:	9307      	str	r3, [sp, #28]
 800debe:	2300      	movs	r3, #0
 800dec0:	9306      	str	r3, [sp, #24]
 800dec2:	2300      	movs	r3, #0
 800dec4:	9305      	str	r3, [sp, #20]
 800dec6:	2301      	movs	r3, #1
 800dec8:	9304      	str	r3, [sp, #16]
 800deca:	2304      	movs	r3, #4
 800decc:	9303      	str	r3, [sp, #12]
 800dece:	2300      	movs	r3, #0
 800ded0:	9302      	str	r3, [sp, #8]
 800ded2:	2300      	movs	r3, #0
 800ded4:	9301      	str	r3, [sp, #4]
 800ded6:	231e      	movs	r3, #30
 800ded8:	9300      	str	r3, [sp, #0]
 800deda:	231e      	movs	r3, #30
 800dedc:	220b      	movs	r2, #11
 800dede:	490a      	ldr	r1, [pc, #40]	@ (800df08 <_Z24getFont_consolab_30_4bppv+0x98>)
 800dee0:	480a      	ldr	r0, [pc, #40]	@ (800df0c <_Z24getFont_consolab_30_4bppv+0x9c>)
 800dee2:	f7ff fe57 	bl	800db94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800dee6:	480a      	ldr	r0, [pc, #40]	@ (800df10 <_Z24getFont_consolab_30_4bppv+0xa0>)
 800dee8:	f001 f924 	bl	800f134 <atexit>
 800deec:	4803      	ldr	r0, [pc, #12]	@ (800defc <_Z24getFont_consolab_30_4bppv+0x8c>)
 800deee:	f001 f8e2 	bl	800f0b6 <__cxa_guard_release>
    return consolab_30_4bpp;
 800def2:	4b06      	ldr	r3, [pc, #24]	@ (800df0c <_Z24getFont_consolab_30_4bppv+0x9c>)
}
 800def4:	4618      	mov	r0, r3
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	24000724 	.word	0x24000724
 800df00:	0801183c 	.word	0x0801183c
 800df04:	08011850 	.word	0x08011850
 800df08:	08011778 	.word	0x08011778
 800df0c:	240006f8 	.word	0x240006f8
 800df10:	0800de61 	.word	0x0800de61

0800df14 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800df14:	b580      	push	{r7, lr}
 800df16:	af00      	add	r7, sp, #0
 800df18:	4801      	ldr	r0, [pc, #4]	@ (800df20 <__tcf_0+0xc>)
 800df1a:	f7ff fe01 	bl	800db20 <_ZN8touchgfx13GeneratedFontD1Ev>
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	24000728 	.word	0x24000728

0800df24 <_Z23getFont_verdana_10_4bppv>:
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b08e      	sub	sp, #56	@ 0x38
 800df28:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800df2a:	4b21      	ldr	r3, [pc, #132]	@ (800dfb0 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f3bf 8f5b 	dmb	ish
 800df32:	f003 0301 	and.w	r3, r3, #1
 800df36:	2b00      	cmp	r3, #0
 800df38:	bf0c      	ite	eq
 800df3a:	2301      	moveq	r3, #1
 800df3c:	2300      	movne	r3, #0
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	2b00      	cmp	r3, #0
 800df42:	d030      	beq.n	800dfa6 <_Z23getFont_verdana_10_4bppv+0x82>
 800df44:	481a      	ldr	r0, [pc, #104]	@ (800dfb0 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800df46:	f001 f8aa 	bl	800f09e <__cxa_guard_acquire>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	bf14      	ite	ne
 800df50:	2301      	movne	r3, #1
 800df52:	2300      	moveq	r3, #0
 800df54:	b2db      	uxtb	r3, r3
 800df56:	2b00      	cmp	r3, #0
 800df58:	d025      	beq.n	800dfa6 <_Z23getFont_verdana_10_4bppv+0x82>
 800df5a:	2300      	movs	r3, #0
 800df5c:	930c      	str	r3, [sp, #48]	@ 0x30
 800df5e:	2300      	movs	r3, #0
 800df60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df62:	2300      	movs	r3, #0
 800df64:	930a      	str	r3, [sp, #40]	@ 0x28
 800df66:	233f      	movs	r3, #63	@ 0x3f
 800df68:	9309      	str	r3, [sp, #36]	@ 0x24
 800df6a:	4b12      	ldr	r3, [pc, #72]	@ (800dfb4 <_Z23getFont_verdana_10_4bppv+0x90>)
 800df6c:	9308      	str	r3, [sp, #32]
 800df6e:	4b12      	ldr	r3, [pc, #72]	@ (800dfb8 <_Z23getFont_verdana_10_4bppv+0x94>)
 800df70:	9307      	str	r3, [sp, #28]
 800df72:	2300      	movs	r3, #0
 800df74:	9306      	str	r3, [sp, #24]
 800df76:	2300      	movs	r3, #0
 800df78:	9305      	str	r3, [sp, #20]
 800df7a:	2301      	movs	r3, #1
 800df7c:	9304      	str	r3, [sp, #16]
 800df7e:	2304      	movs	r3, #4
 800df80:	9303      	str	r3, [sp, #12]
 800df82:	2300      	movs	r3, #0
 800df84:	9302      	str	r3, [sp, #8]
 800df86:	2300      	movs	r3, #0
 800df88:	9301      	str	r3, [sp, #4]
 800df8a:	230a      	movs	r3, #10
 800df8c:	9300      	str	r3, [sp, #0]
 800df8e:	230a      	movs	r3, #10
 800df90:	2201      	movs	r2, #1
 800df92:	490a      	ldr	r1, [pc, #40]	@ (800dfbc <_Z23getFont_verdana_10_4bppv+0x98>)
 800df94:	480a      	ldr	r0, [pc, #40]	@ (800dfc0 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800df96:	f7ff fdfd 	bl	800db94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800df9a:	480a      	ldr	r0, [pc, #40]	@ (800dfc4 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800df9c:	f001 f8ca 	bl	800f134 <atexit>
 800dfa0:	4803      	ldr	r0, [pc, #12]	@ (800dfb0 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800dfa2:	f001 f888 	bl	800f0b6 <__cxa_guard_release>
    return verdana_10_4bpp;
 800dfa6:	4b06      	ldr	r3, [pc, #24]	@ (800dfc0 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	24000754 	.word	0x24000754
 800dfb4:	08011840 	.word	0x08011840
 800dfb8:	08011854 	.word	0x08011854
 800dfbc:	08011814 	.word	0x08011814
 800dfc0:	24000728 	.word	0x24000728
 800dfc4:	0800df15 	.word	0x0800df15

0800dfc8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	af00      	add	r7, sp, #0
 800dfcc:	4801      	ldr	r0, [pc, #4]	@ (800dfd4 <__tcf_0+0xc>)
 800dfce:	f7ff fda7 	bl	800db20 <_ZN8touchgfx13GeneratedFontD1Ev>
 800dfd2:	bd80      	pop	{r7, pc}
 800dfd4:	24000758 	.word	0x24000758

0800dfd8 <_Z23getFont_verdana_40_4bppv>:
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b08e      	sub	sp, #56	@ 0x38
 800dfdc:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800dfde:	4b21      	ldr	r3, [pc, #132]	@ (800e064 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f3bf 8f5b 	dmb	ish
 800dfe6:	f003 0301 	and.w	r3, r3, #1
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	bf0c      	ite	eq
 800dfee:	2301      	moveq	r3, #1
 800dff0:	2300      	movne	r3, #0
 800dff2:	b2db      	uxtb	r3, r3
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d030      	beq.n	800e05a <_Z23getFont_verdana_40_4bppv+0x82>
 800dff8:	481a      	ldr	r0, [pc, #104]	@ (800e064 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800dffa:	f001 f850 	bl	800f09e <__cxa_guard_acquire>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	bf14      	ite	ne
 800e004:	2301      	movne	r3, #1
 800e006:	2300      	moveq	r3, #0
 800e008:	b2db      	uxtb	r3, r3
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d025      	beq.n	800e05a <_Z23getFont_verdana_40_4bppv+0x82>
 800e00e:	2300      	movs	r3, #0
 800e010:	930c      	str	r3, [sp, #48]	@ 0x30
 800e012:	2300      	movs	r3, #0
 800e014:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e016:	2300      	movs	r3, #0
 800e018:	930a      	str	r3, [sp, #40]	@ 0x28
 800e01a:	233f      	movs	r3, #63	@ 0x3f
 800e01c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e01e:	4b12      	ldr	r3, [pc, #72]	@ (800e068 <_Z23getFont_verdana_40_4bppv+0x90>)
 800e020:	9308      	str	r3, [sp, #32]
 800e022:	4b12      	ldr	r3, [pc, #72]	@ (800e06c <_Z23getFont_verdana_40_4bppv+0x94>)
 800e024:	9307      	str	r3, [sp, #28]
 800e026:	2300      	movs	r3, #0
 800e028:	9306      	str	r3, [sp, #24]
 800e02a:	2300      	movs	r3, #0
 800e02c:	9305      	str	r3, [sp, #20]
 800e02e:	2301      	movs	r3, #1
 800e030:	9304      	str	r3, [sp, #16]
 800e032:	2304      	movs	r3, #4
 800e034:	9303      	str	r3, [sp, #12]
 800e036:	2300      	movs	r3, #0
 800e038:	9302      	str	r3, [sp, #8]
 800e03a:	2300      	movs	r3, #0
 800e03c:	9301      	str	r3, [sp, #4]
 800e03e:	2328      	movs	r3, #40	@ 0x28
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	2328      	movs	r3, #40	@ 0x28
 800e044:	2201      	movs	r2, #1
 800e046:	490a      	ldr	r1, [pc, #40]	@ (800e070 <_Z23getFont_verdana_40_4bppv+0x98>)
 800e048:	480a      	ldr	r0, [pc, #40]	@ (800e074 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800e04a:	f7ff fda3 	bl	800db94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e04e:	480a      	ldr	r0, [pc, #40]	@ (800e078 <_Z23getFont_verdana_40_4bppv+0xa0>)
 800e050:	f001 f870 	bl	800f134 <atexit>
 800e054:	4803      	ldr	r0, [pc, #12]	@ (800e064 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800e056:	f001 f82e 	bl	800f0b6 <__cxa_guard_release>
    return verdana_40_4bpp;
 800e05a:	4b06      	ldr	r3, [pc, #24]	@ (800e074 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	24000784 	.word	0x24000784
 800e068:	08011844 	.word	0x08011844
 800e06c:	08011858 	.word	0x08011858
 800e070:	08011824 	.word	0x08011824
 800e074:	24000758 	.word	0x24000758
 800e078:	0800dfc9 	.word	0x0800dfc9

0800e07c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800e07c:	b480      	push	{r7}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
 800e082:	60f8      	str	r0, [r7, #12]
 800e084:	460b      	mov	r3, r1
 800e086:	607a      	str	r2, [r7, #4]
 800e088:	817b      	strh	r3, [r7, #10]
        return 0;
 800e08a:	2300      	movs	r3, #0
    }
 800e08c:	4618      	mov	r0, r3
 800e08e:	3714      	adds	r7, #20
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr

0800e098 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 800e098:	b480      	push	{r7}
 800e09a:	b083      	sub	sp, #12
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
        return 0;
 800e0a0:	2300      	movs	r3, #0
    }
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	370c      	adds	r7, #12
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ac:	4770      	bx	lr

0800e0ae <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800e0ae:	b480      	push	{r7}
 800e0b0:	b083      	sub	sp, #12
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
        return 0;
 800e0b6:	2300      	movs	r3, #0
    }
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	370c      	adds	r7, #12
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr

0800e0c4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e0c4:	b40e      	push	{r1, r2, r3}
 800e0c6:	b580      	push	{r7, lr}
 800e0c8:	b085      	sub	sp, #20
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800e0ce:	f107 0320 	add.w	r3, r7, #32
 800e0d2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	69fa      	ldr	r2, [r7, #28]
 800e0d8:	2100      	movs	r1, #0
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f000 f90c 	bl	800e2f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e0e4:	89fb      	ldrh	r3, [r7, #14]
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3714      	adds	r7, #20
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e0f0:	b003      	add	sp, #12
 800e0f2:	4770      	bx	lr

0800e0f4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e0f4:	b40c      	push	{r2, r3}
 800e0f6:	b580      	push	{r7, lr}
 800e0f8:	b084      	sub	sp, #16
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
 800e0fe:	460b      	mov	r3, r1
 800e100:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800e102:	f107 031c 	add.w	r3, r7, #28
 800e106:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800e108:	78f9      	ldrb	r1, [r7, #3]
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	69ba      	ldr	r2, [r7, #24]
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f000 f8f2 	bl	800e2f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e114:	4603      	mov	r3, r0
 800e116:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e118:	89fb      	ldrh	r3, [r7, #14]
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3710      	adds	r7, #16
 800e11e:	46bd      	mov	sp, r7
 800e120:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e124:	b002      	add	sp, #8
 800e126:	4770      	bx	lr

0800e128 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b08a      	sub	sp, #40	@ 0x28
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	460b      	mov	r3, r1
 800e132:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d016      	beq.n	800e16a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	3322      	adds	r3, #34	@ 0x22
 800e140:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800e142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e144:	8adb      	ldrh	r3, [r3, #22]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d105      	bne.n	800e156 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800e14a:	4b43      	ldr	r3, [pc, #268]	@ (800e258 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e14c:	4a43      	ldr	r2, [pc, #268]	@ (800e25c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e14e:	21c5      	movs	r1, #197	@ 0xc5
 800e150:	4843      	ldr	r0, [pc, #268]	@ (800e260 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e152:	f000 ffd1 	bl	800f0f8 <__assert_func>
            return buffer[pos];
 800e156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e158:	8a9b      	ldrh	r3, [r3, #20]
 800e15a:	461a      	mov	r2, r3
 800e15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e15e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d001      	beq.n	800e16a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e166:	2301      	movs	r3, #1
 800e168:	e000      	b.n	800e16c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800e16a:	2300      	movs	r3, #0
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d06a      	beq.n	800e246 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f000 ff73 	bl	800f05c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	3322      	adds	r3, #34	@ 0x22
 800e17a:	623b      	str	r3, [r7, #32]
 800e17c:	2301      	movs	r3, #1
 800e17e:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800e180:	6a3b      	ldr	r3, [r7, #32]
 800e182:	8adb      	ldrh	r3, [r3, #22]
 800e184:	8bfa      	ldrh	r2, [r7, #30]
 800e186:	429a      	cmp	r2, r3
 800e188:	d305      	bcc.n	800e196 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800e18a:	4b36      	ldr	r3, [pc, #216]	@ (800e264 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800e18c:	4a36      	ldr	r2, [pc, #216]	@ (800e268 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800e18e:	21cb      	movs	r1, #203	@ 0xcb
 800e190:	4833      	ldr	r0, [pc, #204]	@ (800e260 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e192:	f000 ffb1 	bl	800f0f8 <__assert_func>
            const uint16_t index = pos + offset;
 800e196:	6a3b      	ldr	r3, [r7, #32]
 800e198:	8a9a      	ldrh	r2, [r3, #20]
 800e19a:	8bfb      	ldrh	r3, [r7, #30]
 800e19c:	4413      	add	r3, r2
 800e19e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800e1a0:	8bbb      	ldrh	r3, [r7, #28]
 800e1a2:	2b09      	cmp	r3, #9
 800e1a4:	d801      	bhi.n	800e1aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800e1a6:	8bbb      	ldrh	r3, [r7, #28]
 800e1a8:	e001      	b.n	800e1ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800e1aa:	8bbb      	ldrh	r3, [r7, #28]
 800e1ac:	3b0a      	subs	r3, #10
 800e1ae:	6a3a      	ldr	r2, [r7, #32]
 800e1b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1b4:	f640 123f 	movw	r2, #2367	@ 0x93f
 800e1b8:	4293      	cmp	r3, r2
 800e1ba:	bf0c      	ite	eq
 800e1bc:	2301      	moveq	r3, #1
 800e1be:	2300      	movne	r3, #0
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d03f      	beq.n	800e246 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	3322      	adds	r3, #34	@ 0x22
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	3222      	adds	r2, #34	@ 0x22
 800e1ce:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800e1d0:	68ba      	ldr	r2, [r7, #8]
 800e1d2:	8ad2      	ldrh	r2, [r2, #22]
 800e1d4:	2a00      	cmp	r2, #0
 800e1d6:	d105      	bne.n	800e1e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800e1d8:	4b1f      	ldr	r3, [pc, #124]	@ (800e258 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e1da:	4a20      	ldr	r2, [pc, #128]	@ (800e25c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e1dc:	21c5      	movs	r1, #197	@ 0xc5
 800e1de:	4820      	ldr	r0, [pc, #128]	@ (800e260 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e1e0:	f000 ff8a 	bl	800f0f8 <__assert_func>
            return buffer[pos];
 800e1e4:	68ba      	ldr	r2, [r7, #8]
 800e1e6:	8a92      	ldrh	r2, [r2, #20]
 800e1e8:	4611      	mov	r1, r2
 800e1ea:	68ba      	ldr	r2, [r7, #8]
 800e1ec:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800e1f0:	613b      	str	r3, [r7, #16]
 800e1f2:	4613      	mov	r3, r2
 800e1f4:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	8adb      	ldrh	r3, [r3, #22]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d806      	bhi.n	800e20c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800e1fe:	4b1b      	ldr	r3, [pc, #108]	@ (800e26c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800e200:	4a1b      	ldr	r2, [pc, #108]	@ (800e270 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800e202:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800e206:	4816      	ldr	r0, [pc, #88]	@ (800e260 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e208:	f000 ff76 	bl	800f0f8 <__assert_func>
            const uint16_t index = pos + 1;
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	8a9b      	ldrh	r3, [r3, #20]
 800e210:	3301      	adds	r3, #1
 800e212:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800e214:	89bb      	ldrh	r3, [r7, #12]
 800e216:	2b09      	cmp	r3, #9
 800e218:	d801      	bhi.n	800e21e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800e21a:	89bb      	ldrh	r3, [r7, #12]
 800e21c:	e000      	b.n	800e220 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800e21e:	2300      	movs	r3, #0
 800e220:	693a      	ldr	r2, [r7, #16]
 800e222:	89f9      	ldrh	r1, [r7, #14]
 800e224:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800e228:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	3322      	adds	r3, #34	@ 0x22
 800e22e:	61bb      	str	r3, [r7, #24]
 800e230:	f640 133f 	movw	r3, #2367	@ 0x93f
 800e234:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800e236:	69bb      	ldr	r3, [r7, #24]
 800e238:	8a9b      	ldrh	r3, [r3, #20]
 800e23a:	4619      	mov	r1, r3
 800e23c:	69bb      	ldr	r3, [r7, #24]
 800e23e:	8afa      	ldrh	r2, [r7, #22]
 800e240:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800e244:	bf00      	nop
        }
    }
    return getNextChar();
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 fe0a 	bl	800ee60 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e24c:	4603      	mov	r3, r0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3728      	adds	r7, #40	@ 0x28
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	08010114 	.word	0x08010114
 800e25c:	08010120 	.word	0x08010120
 800e260:	080101cc 	.word	0x080101cc
 800e264:	08010214 	.word	0x08010214
 800e268:	08010224 	.word	0x08010224
 800e26c:	080102f8 	.word	0x080102f8
 800e270:	08010304 	.word	0x08010304

0800e274 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b082      	sub	sp, #8
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f000 fdb8 	bl	800edf2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800e282:	bf00      	nop
 800e284:	3708      	adds	r7, #8
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
	...

0800e28c <_Z41__static_initialization_and_destruction_0v>:
    case 4:
        touchgfx_fonts[4] = &(getFont_consolab_30_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800e28c:	b580      	push	{r7, lr}
 800e28e:	af00      	add	r7, sp, #0
    &(getFont_consolab_20_4bpp()),
 800e290:	f7ff fd94 	bl	800ddbc <_Z24getFont_consolab_20_4bppv>
 800e294:	4603      	mov	r3, r0
};
 800e296:	4a0c      	ldr	r2, [pc, #48]	@ (800e2c8 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800e298:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800e29a:	f7ff fe9d 	bl	800dfd8 <_Z23getFont_verdana_40_4bppv>
 800e29e:	4603      	mov	r3, r0
};
 800e2a0:	4a09      	ldr	r2, [pc, #36]	@ (800e2c8 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800e2a2:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 800e2a4:	f7ff fe3e 	bl	800df24 <_Z23getFont_verdana_10_4bppv>
 800e2a8:	4603      	mov	r3, r0
};
 800e2aa:	4a07      	ldr	r2, [pc, #28]	@ (800e2c8 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800e2ac:	6093      	str	r3, [r2, #8]
    &(getFont_consola_20_4bpp()),
 800e2ae:	f7ff fd2b 	bl	800dd08 <_Z23getFont_consola_20_4bppv>
 800e2b2:	4603      	mov	r3, r0
};
 800e2b4:	4a04      	ldr	r2, [pc, #16]	@ (800e2c8 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800e2b6:	60d3      	str	r3, [r2, #12]
    &(getFont_consolab_30_4bpp())
 800e2b8:	f7ff fdda 	bl	800de70 <_Z24getFont_consolab_30_4bppv>
 800e2bc:	4603      	mov	r3, r0
};
 800e2be:	4a02      	ldr	r2, [pc, #8]	@ (800e2c8 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800e2c0:	6113      	str	r3, [r2, #16]
} // namespace TypedTextDatabase
 800e2c2:	bf00      	nop
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	24000788 	.word	0x24000788

0800e2cc <_GLOBAL__sub_I_touchgfx_fonts>:
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	f7ff ffdc 	bl	800e28c <_Z41__static_initialization_and_destruction_0v>
 800e2d4:	bd80      	pop	{r7, pc}
	...

0800e2d8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800e2d8:	4b01      	ldr	r3, [pc, #4]	@ (800e2e0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800e2da:	2200      	movs	r2, #0
 800e2dc:	601a      	str	r2, [r3, #0]
 800e2de:	4770      	bx	lr
 800e2e0:	2400079c 	.word	0x2400079c

0800e2e4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800e2e4:	4b03      	ldr	r3, [pc, #12]	@ (800e2f4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	801a      	strh	r2, [r3, #0]
 800e2ea:	805a      	strh	r2, [r3, #2]
 800e2ec:	809a      	strh	r2, [r3, #4]
 800e2ee:	80da      	strh	r2, [r3, #6]
 800e2f0:	4770      	bx	lr
 800e2f2:	bf00      	nop
 800e2f4:	240007a0 	.word	0x240007a0

0800e2f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800e2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2fc:	b09d      	sub	sp, #116	@ 0x74
 800e2fe:	4606      	mov	r6, r0
 800e300:	4614      	mov	r4, r2
 800e302:	468a      	mov	sl, r1
 800e304:	a803      	add	r0, sp, #12
 800e306:	461d      	mov	r5, r3
 800e308:	f000 f9b4 	bl	800e674 <_ZN8touchgfx12TextProviderC1Ev>
 800e30c:	6833      	ldr	r3, [r6, #0]
 800e30e:	4630      	mov	r0, r6
 800e310:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 800e314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e316:	4798      	blx	r3
 800e318:	6833      	ldr	r3, [r6, #0]
 800e31a:	4607      	mov	r7, r0
 800e31c:	4630      	mov	r0, r6
 800e31e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e320:	4798      	blx	r3
 800e322:	462a      	mov	r2, r5
 800e324:	2500      	movs	r5, #0
 800e326:	4621      	mov	r1, r4
 800e328:	9000      	str	r0, [sp, #0]
 800e32a:	463b      	mov	r3, r7
 800e32c:	462c      	mov	r4, r5
 800e32e:	46a9      	mov	r9, r5
 800e330:	46a8      	mov	r8, r5
 800e332:	a803      	add	r0, sp, #12
 800e334:	f000 f9f1 	bl	800e71a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e338:	2300      	movs	r3, #0
 800e33a:	9302      	str	r3, [sp, #8]
 800e33c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800e340:	429c      	cmp	r4, r3
 800e342:	d002      	beq.n	800e34a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800e344:	455c      	cmp	r4, fp
 800e346:	bf18      	it	ne
 800e348:	4625      	movne	r5, r4
 800e34a:	ab02      	add	r3, sp, #8
 800e34c:	4632      	mov	r2, r6
 800e34e:	4651      	mov	r1, sl
 800e350:	a803      	add	r0, sp, #12
 800e352:	f000 fd05 	bl	800ed60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e356:	4604      	mov	r4, r0
 800e358:	b108      	cbz	r0, 800e35e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800e35a:	280a      	cmp	r0, #10
 800e35c:	d10a      	bne.n	800e374 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800e35e:	45c1      	cmp	r9, r8
 800e360:	bf38      	it	cc
 800e362:	46c1      	movcc	r9, r8
 800e364:	f04f 0800 	mov.w	r8, #0
 800e368:	2c00      	cmp	r4, #0
 800e36a:	d1e5      	bne.n	800e338 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800e36c:	4648      	mov	r0, r9
 800e36e:	b01d      	add	sp, #116	@ 0x74
 800e370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e374:	9a02      	ldr	r2, [sp, #8]
 800e376:	2a00      	cmp	r2, #0
 800e378:	d0de      	beq.n	800e338 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800e37a:	7b57      	ldrb	r7, [r2, #13]
 800e37c:	4629      	mov	r1, r5
 800e37e:	6833      	ldr	r3, [r6, #0]
 800e380:	007f      	lsls	r7, r7, #1
 800e382:	8894      	ldrh	r4, [r2, #4]
 800e384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e386:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 800e38a:	7a97      	ldrb	r7, [r2, #10]
 800e38c:	4307      	orrs	r7, r0
 800e38e:	4630      	mov	r0, r6
 800e390:	4798      	blx	r3
 800e392:	4438      	add	r0, r7
 800e394:	4480      	add	r8, r0
 800e396:	fa1f f888 	uxth.w	r8, r8
 800e39a:	e7e5      	b.n	800e368 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800e39c <_ZNK8touchgfx4Font12getCharWidthEt>:
 800e39c:	b508      	push	{r3, lr}
 800e39e:	6803      	ldr	r3, [r0, #0]
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	4798      	blx	r3
 800e3a4:	b128      	cbz	r0, 800e3b2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800e3a6:	7b43      	ldrb	r3, [r0, #13]
 800e3a8:	7a80      	ldrb	r0, [r0, #10]
 800e3aa:	005b      	lsls	r3, r3, #1
 800e3ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e3b0:	4318      	orrs	r0, r3
 800e3b2:	bd08      	pop	{r3, pc}

0800e3b4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800e3b4:	b40e      	push	{r1, r2, r3}
 800e3b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3b8:	b09e      	sub	sp, #120	@ 0x78
 800e3ba:	4605      	mov	r5, r0
 800e3bc:	ab23      	add	r3, sp, #140	@ 0x8c
 800e3be:	a805      	add	r0, sp, #20
 800e3c0:	f853 4b04 	ldr.w	r4, [r3], #4
 800e3c4:	9303      	str	r3, [sp, #12]
 800e3c6:	f000 f955 	bl	800e674 <_ZN8touchgfx12TextProviderC1Ev>
 800e3ca:	682b      	ldr	r3, [r5, #0]
 800e3cc:	4628      	mov	r0, r5
 800e3ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3d0:	4798      	blx	r3
 800e3d2:	682b      	ldr	r3, [r5, #0]
 800e3d4:	4606      	mov	r6, r0
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3da:	4798      	blx	r3
 800e3dc:	4633      	mov	r3, r6
 800e3de:	4621      	mov	r1, r4
 800e3e0:	ae1e      	add	r6, sp, #120	@ 0x78
 800e3e2:	2400      	movs	r4, #0
 800e3e4:	9000      	str	r0, [sp, #0]
 800e3e6:	9a03      	ldr	r2, [sp, #12]
 800e3e8:	a805      	add	r0, sp, #20
 800e3ea:	f000 f996 	bl	800e71a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e3ee:	f846 4d68 	str.w	r4, [r6, #-104]!
 800e3f2:	462a      	mov	r2, r5
 800e3f4:	4633      	mov	r3, r6
 800e3f6:	4621      	mov	r1, r4
 800e3f8:	a805      	add	r0, sp, #20
 800e3fa:	f000 fcb1 	bl	800ed60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e3fe:	b300      	cbz	r0, 800e442 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 800e400:	280a      	cmp	r0, #10
 800e402:	d01a      	beq.n	800e43a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800e404:	9f04      	ldr	r7, [sp, #16]
 800e406:	b1c7      	cbz	r7, 800e43a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800e408:	7b78      	ldrb	r0, [r7, #13]
 800e40a:	7a3b      	ldrb	r3, [r7, #8]
 800e40c:	00c1      	lsls	r1, r0, #3
 800e40e:	88ea      	ldrh	r2, [r5, #6]
 800e410:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800e414:	4319      	orrs	r1, r3
 800e416:	0643      	lsls	r3, r0, #25
 800e418:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800e41c:	bf48      	it	mi
 800e41e:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 800e422:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800e426:	bf48      	it	mi
 800e428:	b219      	sxthmi	r1, r3
 800e42a:	79fb      	ldrb	r3, [r7, #7]
 800e42c:	4303      	orrs	r3, r0
 800e42e:	4413      	add	r3, r2
 800e430:	1a5b      	subs	r3, r3, r1
 800e432:	b21b      	sxth	r3, r3
 800e434:	429c      	cmp	r4, r3
 800e436:	bfb8      	it	lt
 800e438:	461c      	movlt	r4, r3
 800e43a:	4633      	mov	r3, r6
 800e43c:	462a      	mov	r2, r5
 800e43e:	2100      	movs	r1, #0
 800e440:	e7da      	b.n	800e3f8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800e442:	b2a0      	uxth	r0, r4
 800e444:	b01e      	add	sp, #120	@ 0x78
 800e446:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e44a:	b003      	add	sp, #12
 800e44c:	4770      	bx	lr

0800e44e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800e44e:	7a43      	ldrb	r3, [r0, #9]
 800e450:	8880      	ldrh	r0, [r0, #4]
 800e452:	4418      	add	r0, r3
 800e454:	b280      	uxth	r0, r0
 800e456:	4770      	bx	lr

0800e458 <_ZNK8touchgfx4Font13getFontHeightEv>:
 800e458:	6803      	ldr	r3, [r0, #0]
 800e45a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e45c:	4718      	bx	r3

0800e45e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800e45e:	b40e      	push	{r1, r2, r3}
 800e460:	b570      	push	{r4, r5, r6, lr}
 800e462:	b09d      	sub	sp, #116	@ 0x74
 800e464:	4604      	mov	r4, r0
 800e466:	ab21      	add	r3, sp, #132	@ 0x84
 800e468:	a803      	add	r0, sp, #12
 800e46a:	f853 5b04 	ldr.w	r5, [r3], #4
 800e46e:	9302      	str	r3, [sp, #8]
 800e470:	f000 f900 	bl	800e674 <_ZN8touchgfx12TextProviderC1Ev>
 800e474:	6823      	ldr	r3, [r4, #0]
 800e476:	4620      	mov	r0, r4
 800e478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e47a:	4798      	blx	r3
 800e47c:	6823      	ldr	r3, [r4, #0]
 800e47e:	4606      	mov	r6, r0
 800e480:	4620      	mov	r0, r4
 800e482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e484:	2401      	movs	r4, #1
 800e486:	4798      	blx	r3
 800e488:	4633      	mov	r3, r6
 800e48a:	9000      	str	r0, [sp, #0]
 800e48c:	4629      	mov	r1, r5
 800e48e:	9a02      	ldr	r2, [sp, #8]
 800e490:	a803      	add	r0, sp, #12
 800e492:	f000 f942 	bl	800e71a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e496:	a803      	add	r0, sp, #12
 800e498:	f000 fce2 	bl	800ee60 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e49c:	b2a3      	uxth	r3, r4
 800e49e:	b138      	cbz	r0, 800e4b0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 800e4a0:	280a      	cmp	r0, #10
 800e4a2:	a803      	add	r0, sp, #12
 800e4a4:	bf04      	itt	eq
 800e4a6:	3301      	addeq	r3, #1
 800e4a8:	b21c      	sxtheq	r4, r3
 800e4aa:	f000 fcd9 	bl	800ee60 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e4ae:	e7f5      	b.n	800e49c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	b01d      	add	sp, #116	@ 0x74
 800e4b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4b8:	b003      	add	sp, #12
 800e4ba:	4770      	bx	lr

0800e4bc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800e4bc:	b40e      	push	{r1, r2, r3}
 800e4be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4c0:	b09e      	sub	sp, #120	@ 0x78
 800e4c2:	4604      	mov	r4, r0
 800e4c4:	ab23      	add	r3, sp, #140	@ 0x8c
 800e4c6:	a805      	add	r0, sp, #20
 800e4c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800e4cc:	9303      	str	r3, [sp, #12]
 800e4ce:	f000 f8d1 	bl	800e674 <_ZN8touchgfx12TextProviderC1Ev>
 800e4d2:	6823      	ldr	r3, [r4, #0]
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4d8:	4798      	blx	r3
 800e4da:	6823      	ldr	r3, [r4, #0]
 800e4dc:	4606      	mov	r6, r0
 800e4de:	4620      	mov	r0, r4
 800e4e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4e2:	4798      	blx	r3
 800e4e4:	4633      	mov	r3, r6
 800e4e6:	4629      	mov	r1, r5
 800e4e8:	9000      	str	r0, [sp, #0]
 800e4ea:	9a03      	ldr	r2, [sp, #12]
 800e4ec:	a805      	add	r0, sp, #20
 800e4ee:	f000 f914 	bl	800e71a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e4f2:	ad1e      	add	r5, sp, #120	@ 0x78
 800e4f4:	2100      	movs	r1, #0
 800e4f6:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 800e4fa:	4622      	mov	r2, r4
 800e4fc:	a805      	add	r0, sp, #20
 800e4fe:	f845 1d68 	str.w	r1, [r5, #-104]!
 800e502:	462b      	mov	r3, r5
 800e504:	f000 fc2c 	bl	800ed60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e508:	b1d8      	cbz	r0, 800e542 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800e50a:	280a      	cmp	r0, #10
 800e50c:	d012      	beq.n	800e534 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800e50e:	9804      	ldr	r0, [sp, #16]
 800e510:	b180      	cbz	r0, 800e534 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800e512:	7b47      	ldrb	r7, [r0, #13]
 800e514:	88e2      	ldrh	r2, [r4, #6]
 800e516:	00fb      	lsls	r3, r7, #3
 800e518:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800e51c:	7a03      	ldrb	r3, [r0, #8]
 800e51e:	430b      	orrs	r3, r1
 800e520:	0679      	lsls	r1, r7, #25
 800e522:	bf44      	itt	mi
 800e524:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e528:	b21b      	sxthmi	r3, r3
 800e52a:	1ad3      	subs	r3, r2, r3
 800e52c:	b21b      	sxth	r3, r3
 800e52e:	429e      	cmp	r6, r3
 800e530:	bfa8      	it	ge
 800e532:	461e      	movge	r6, r3
 800e534:	462b      	mov	r3, r5
 800e536:	4622      	mov	r2, r4
 800e538:	2100      	movs	r1, #0
 800e53a:	a805      	add	r0, sp, #20
 800e53c:	f000 fc10 	bl	800ed60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e540:	e7e2      	b.n	800e508 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800e542:	4630      	mov	r0, r6
 800e544:	b01e      	add	sp, #120	@ 0x78
 800e546:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e54a:	b003      	add	sp, #12
 800e54c:	4770      	bx	lr
	...

0800e550 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800e550:	b530      	push	{r4, r5, lr}
 800e552:	8083      	strh	r3, [r0, #4]
 800e554:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e558:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800e55c:	80c3      	strh	r3, [r0, #6]
 800e55e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e562:	6141      	str	r1, [r0, #20]
 800e564:	7203      	strb	r3, [r0, #8]
 800e566:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e56a:	8302      	strh	r2, [r0, #24]
 800e56c:	7243      	strb	r3, [r0, #9]
 800e56e:	7a83      	ldrb	r3, [r0, #10]
 800e570:	f365 0306 	bfi	r3, r5, #0, #7
 800e574:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800e578:	f365 13c7 	bfi	r3, r5, #7, #1
 800e57c:	7283      	strb	r3, [r0, #10]
 800e57e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800e582:	72c3      	strb	r3, [r0, #11]
 800e584:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e588:	7303      	strb	r3, [r0, #12]
 800e58a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800e58e:	81c3      	strh	r3, [r0, #14]
 800e590:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800e594:	8203      	strh	r3, [r0, #16]
 800e596:	4b01      	ldr	r3, [pc, #4]	@ (800e59c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800e598:	6003      	str	r3, [r0, #0]
 800e59a:	bd30      	pop	{r4, r5, pc}
 800e59c:	0801049c 	.word	0x0801049c

0800e5a0 <_ZNK8touchgfx9ConstFont4findEt>:
 800e5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5a2:	6944      	ldr	r4, [r0, #20]
 800e5a4:	b3bc      	cbz	r4, 800e616 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e5a6:	88a3      	ldrh	r3, [r4, #4]
 800e5a8:	8b02      	ldrh	r2, [r0, #24]
 800e5aa:	1acb      	subs	r3, r1, r3
 800e5ac:	f102 32ff 	add.w	r2, r2, #4294967295
 800e5b0:	d431      	bmi.n	800e616 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	dd0c      	ble.n	800e5d0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800e5b6:	230e      	movs	r3, #14
 800e5b8:	fb03 4302 	mla	r3, r3, r2, r4
 800e5bc:	889b      	ldrh	r3, [r3, #4]
 800e5be:	1a5b      	subs	r3, r3, r1
 800e5c0:	1ad3      	subs	r3, r2, r3
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	db27      	blt.n	800e616 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	bfbc      	itt	lt
 800e5ca:	2302      	movlt	r3, #2
 800e5cc:	fb92 f3f3 	sdivlt	r3, r2, r3
 800e5d0:	2500      	movs	r5, #0
 800e5d2:	260e      	movs	r6, #14
 800e5d4:	4295      	cmp	r5, r2
 800e5d6:	dc1e      	bgt.n	800e616 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e5d8:	fb06 4003 	mla	r0, r6, r3, r4
 800e5dc:	8887      	ldrh	r7, [r0, #4]
 800e5de:	42b9      	cmp	r1, r7
 800e5e0:	d01a      	beq.n	800e618 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800e5e2:	d20d      	bcs.n	800e600 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800e5e4:	1e5a      	subs	r2, r3, #1
 800e5e6:	4295      	cmp	r5, r2
 800e5e8:	dc15      	bgt.n	800e616 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e5ea:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800e5ee:	1a5b      	subs	r3, r3, r1
 800e5f0:	1ad3      	subs	r3, r2, r3
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	db0f      	blt.n	800e616 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e5f6:	429d      	cmp	r5, r3
 800e5f8:	ddec      	ble.n	800e5d4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e5fa:	1953      	adds	r3, r2, r5
 800e5fc:	105b      	asrs	r3, r3, #1
 800e5fe:	e7e9      	b.n	800e5d4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e600:	1c5d      	adds	r5, r3, #1
 800e602:	42aa      	cmp	r2, r5
 800e604:	db07      	blt.n	800e616 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e606:	8a43      	ldrh	r3, [r0, #18]
 800e608:	1acb      	subs	r3, r1, r3
 800e60a:	442b      	add	r3, r5
 800e60c:	429d      	cmp	r5, r3
 800e60e:	dc02      	bgt.n	800e616 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e610:	429a      	cmp	r2, r3
 800e612:	dadf      	bge.n	800e5d4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e614:	e7f1      	b.n	800e5fa <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800e616:	2000      	movs	r0, #0
 800e618:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e61a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800e61a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e61c:	4604      	mov	r4, r0
 800e61e:	4617      	mov	r7, r2
 800e620:	461e      	mov	r6, r3
 800e622:	b911      	cbnz	r1, 800e62a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800e624:	2500      	movs	r5, #0
 800e626:	4628      	mov	r0, r5
 800e628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e62a:	290a      	cmp	r1, #10
 800e62c:	d0fa      	beq.n	800e624 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e62e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800e632:	4291      	cmp	r1, r2
 800e634:	d0f6      	beq.n	800e624 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e636:	f242 020b 	movw	r2, #8203	@ 0x200b
 800e63a:	4291      	cmp	r1, r2
 800e63c:	d0f2      	beq.n	800e624 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e63e:	f7ff ffaf 	bl	800e5a0 <_ZNK8touchgfx9ConstFont4findEt>
 800e642:	4605      	mov	r5, r0
 800e644:	b950      	cbnz	r0, 800e65c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800e646:	6823      	ldr	r3, [r4, #0]
 800e648:	4620      	mov	r0, r4
 800e64a:	691b      	ldr	r3, [r3, #16]
 800e64c:	4798      	blx	r3
 800e64e:	4601      	mov	r1, r0
 800e650:	4620      	mov	r0, r4
 800e652:	f7ff ffa5 	bl	800e5a0 <_ZNK8touchgfx9ConstFont4findEt>
 800e656:	4605      	mov	r5, r0
 800e658:	2800      	cmp	r0, #0
 800e65a:	d0e3      	beq.n	800e624 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e65c:	6823      	ldr	r3, [r4, #0]
 800e65e:	4629      	mov	r1, r5
 800e660:	4620      	mov	r0, r4
 800e662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e664:	4798      	blx	r3
 800e666:	6038      	str	r0, [r7, #0]
 800e668:	6823      	ldr	r3, [r4, #0]
 800e66a:	4620      	mov	r0, r4
 800e66c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e66e:	4798      	blx	r3
 800e670:	7030      	strb	r0, [r6, #0]
 800e672:	e7d8      	b.n	800e626 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800e674 <_ZN8touchgfx12TextProviderC1Ev>:
 800e674:	b538      	push	{r3, r4, r5, lr}
 800e676:	2500      	movs	r5, #0
 800e678:	2302      	movs	r3, #2
 800e67a:	4604      	mov	r4, r0
 800e67c:	220e      	movs	r2, #14
 800e67e:	7403      	strb	r3, [r0, #16]
 800e680:	4629      	mov	r1, r5
 800e682:	6145      	str	r5, [r0, #20]
 800e684:	7605      	strb	r5, [r0, #24]
 800e686:	83c5      	strh	r5, [r0, #30]
 800e688:	8405      	strh	r5, [r0, #32]
 800e68a:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800e68c:	8705      	strh	r5, [r0, #56]	@ 0x38
 800e68e:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 800e690:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 800e694:	e9c0 5500 	strd	r5, r5, [r0]
 800e698:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 800e69c:	304c      	adds	r0, #76	@ 0x4c
 800e69e:	f000 ff24 	bl	800f4ea <memset>
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800e6aa:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e6ae:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 800e6b2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 800e6b6:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800e6ba:	f7ff fddb 	bl	800e274 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800e6be:	4620      	mov	r0, r4
 800e6c0:	bd38      	pop	{r3, r4, r5, pc}

0800e6c2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800e6c2:	b530      	push	{r4, r5, lr}
 800e6c4:	2500      	movs	r5, #0
 800e6c6:	2401      	movs	r4, #1
 800e6c8:	6843      	ldr	r3, [r0, #4]
 800e6ca:	b913      	cbnz	r3, 800e6d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800e6cc:	6803      	ldr	r3, [r0, #0]
 800e6ce:	b313      	cbz	r3, 800e716 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e6d0:	6043      	str	r3, [r0, #4]
 800e6d2:	7e03      	ldrb	r3, [r0, #24]
 800e6d4:	b143      	cbz	r3, 800e6e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800e6d6:	6943      	ldr	r3, [r0, #20]
 800e6d8:	b12b      	cbz	r3, 800e6e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e6da:	881a      	ldrh	r2, [r3, #0]
 800e6dc:	b11a      	cbz	r2, 800e6e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e6de:	1c9a      	adds	r2, r3, #2
 800e6e0:	6142      	str	r2, [r0, #20]
 800e6e2:	8818      	ldrh	r0, [r3, #0]
 800e6e4:	bd30      	pop	{r4, r5, pc}
 800e6e6:	7605      	strb	r5, [r0, #24]
 800e6e8:	6843      	ldr	r3, [r0, #4]
 800e6ea:	8819      	ldrh	r1, [r3, #0]
 800e6ec:	b199      	cbz	r1, 800e716 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e6ee:	1c9a      	adds	r2, r3, #2
 800e6f0:	2902      	cmp	r1, #2
 800e6f2:	6042      	str	r2, [r0, #4]
 800e6f4:	d1f5      	bne.n	800e6e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800e6f6:	7c03      	ldrb	r3, [r0, #16]
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d8e5      	bhi.n	800e6c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e6fc:	1c5a      	adds	r2, r3, #1
 800e6fe:	3302      	adds	r3, #2
 800e700:	7402      	strb	r2, [r0, #16]
 800e702:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e706:	6143      	str	r3, [r0, #20]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d0dd      	beq.n	800e6c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e70c:	881b      	ldrh	r3, [r3, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d0da      	beq.n	800e6c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e712:	7604      	strb	r4, [r0, #24]
 800e714:	e7d8      	b.n	800e6c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e716:	2000      	movs	r0, #0
 800e718:	e7e4      	b.n	800e6e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800e71a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800e71a:	6001      	str	r1, [r0, #0]
 800e71c:	2100      	movs	r1, #0
 800e71e:	b430      	push	{r4, r5}
 800e720:	6041      	str	r1, [r0, #4]
 800e722:	6815      	ldr	r5, [r2, #0]
 800e724:	6085      	str	r5, [r0, #8]
 800e726:	6852      	ldr	r2, [r2, #4]
 800e728:	6443      	str	r3, [r0, #68]	@ 0x44
 800e72a:	9b02      	ldr	r3, [sp, #8]
 800e72c:	60c2      	str	r2, [r0, #12]
 800e72e:	7401      	strb	r1, [r0, #16]
 800e730:	6141      	str	r1, [r0, #20]
 800e732:	7601      	strb	r1, [r0, #24]
 800e734:	8701      	strh	r1, [r0, #56]	@ 0x38
 800e736:	8401      	strh	r1, [r0, #32]
 800e738:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 800e73c:	6483      	str	r3, [r0, #72]	@ 0x48
 800e73e:	bc30      	pop	{r4, r5}
 800e740:	f7ff bd98 	b.w	800e274 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800e744 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800e744:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e746:	4605      	mov	r5, r0
 800e748:	4608      	mov	r0, r1
 800e74a:	b1f1      	cbz	r1, 800e78a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 800e74c:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 800e750:	460b      	mov	r3, r1
 800e752:	f101 0708 	add.w	r7, r1, #8
 800e756:	4622      	mov	r2, r4
 800e758:	6818      	ldr	r0, [r3, #0]
 800e75a:	3308      	adds	r3, #8
 800e75c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e760:	4626      	mov	r6, r4
 800e762:	42bb      	cmp	r3, r7
 800e764:	c603      	stmia	r6!, {r0, r1}
 800e766:	4634      	mov	r4, r6
 800e768:	d1f6      	bne.n	800e758 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800e76a:	6818      	ldr	r0, [r3, #0]
 800e76c:	6030      	str	r0, [r6, #0]
 800e76e:	4610      	mov	r0, r2
 800e770:	889b      	ldrh	r3, [r3, #4]
 800e772:	80b3      	strh	r3, [r6, #4]
 800e774:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800e778:	015b      	lsls	r3, r3, #5
 800e77a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800e77e:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 800e782:	430b      	orrs	r3, r1
 800e784:	425b      	negs	r3, r3
 800e786:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800e78a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e78c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800e78c:	b538      	push	{r3, r4, r5, lr}
 800e78e:	460c      	mov	r4, r1
 800e790:	6811      	ldr	r1, [r2, #0]
 800e792:	4610      	mov	r0, r2
 800e794:	68cd      	ldr	r5, [r1, #12]
 800e796:	4619      	mov	r1, r3
 800e798:	47a8      	blx	r5
 800e79a:	2800      	cmp	r0, #0
 800e79c:	bf08      	it	eq
 800e79e:	4620      	moveq	r0, r4
 800e7a0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e7a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800e7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7a8:	468c      	mov	ip, r1
 800e7aa:	4605      	mov	r5, r0
 800e7ac:	4614      	mov	r4, r2
 800e7ae:	b942      	cbnz	r2, 800e7c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 800e7b0:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800e7b4:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 800e7b8:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 800e7bc:	4620      	mov	r0, r4
 800e7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7c2:	7b50      	ldrb	r0, [r2, #13]
 800e7c4:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 800e7c8:	8893      	ldrh	r3, [r2, #4]
 800e7ca:	0106      	lsls	r6, r0, #4
 800e7cc:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800e7d0:	79e6      	ldrb	r6, [r4, #7]
 800e7d2:	4316      	orrs	r6, r2
 800e7d4:	185a      	adds	r2, r3, r1
 800e7d6:	b291      	uxth	r1, r2
 800e7d8:	b2b7      	uxth	r7, r6
 800e7da:	291d      	cmp	r1, #29
 800e7dc:	d87f      	bhi.n	800e8de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 800e7de:	2201      	movs	r2, #1
 800e7e0:	10f6      	asrs	r6, r6, #3
 800e7e2:	408a      	lsls	r2, r1
 800e7e4:	498b      	ldr	r1, [pc, #556]	@ (800ea14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 800e7e6:	420a      	tst	r2, r1
 800e7e8:	d12e      	bne.n	800e848 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800e7ea:	f412 7f60 	tst.w	r2, #896	@ 0x380
 800e7ee:	d076      	beq.n	800e8de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 800e7f0:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e7f4:	4623      	mov	r3, r4
 800e7f6:	f104 0e08 	add.w	lr, r4, #8
 800e7fa:	4614      	mov	r4, r2
 800e7fc:	6818      	ldr	r0, [r3, #0]
 800e7fe:	3308      	adds	r3, #8
 800e800:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e804:	4694      	mov	ip, r2
 800e806:	4573      	cmp	r3, lr
 800e808:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800e80c:	4662      	mov	r2, ip
 800e80e:	d1f5      	bne.n	800e7fc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 800e810:	6818      	ldr	r0, [r3, #0]
 800e812:	f8cc 0000 	str.w	r0, [ip]
 800e816:	889b      	ldrh	r3, [r3, #4]
 800e818:	f8ac 3004 	strh.w	r3, [ip, #4]
 800e81c:	b2b3      	uxth	r3, r6
 800e81e:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 800e822:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 800e826:	1aca      	subs	r2, r1, r3
 800e828:	1bcf      	subs	r7, r1, r7
 800e82a:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 800e82e:	b292      	uxth	r2, r2
 800e830:	1afb      	subs	r3, r7, r3
 800e832:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 800e836:	10d2      	asrs	r2, r2, #3
 800e838:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 800e83c:	4302      	orrs	r2, r0
 800e83e:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 800e842:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 800e846:	e7b9      	b.n	800e7bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800e848:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e84c:	4623      	mov	r3, r4
 800e84e:	f104 0808 	add.w	r8, r4, #8
 800e852:	4614      	mov	r4, r2
 800e854:	6818      	ldr	r0, [r3, #0]
 800e856:	3308      	adds	r3, #8
 800e858:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e85c:	4696      	mov	lr, r2
 800e85e:	4543      	cmp	r3, r8
 800e860:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e864:	4672      	mov	r2, lr
 800e866:	d1f5      	bne.n	800e854 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 800e868:	6818      	ldr	r0, [r3, #0]
 800e86a:	f8ce 0000 	str.w	r0, [lr]
 800e86e:	889b      	ldrh	r3, [r3, #4]
 800e870:	f8ae 3004 	strh.w	r3, [lr, #4]
 800e874:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 800e876:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800e87a:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800e87c:	f640 6333 	movw	r3, #3635	@ 0xe33
 800e880:	4299      	cmp	r1, r3
 800e882:	d111      	bne.n	800e8a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 800e884:	f8dc 3000 	ldr.w	r3, [ip]
 800e888:	4660      	mov	r0, ip
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	4798      	blx	r3
 800e88e:	7b41      	ldrb	r1, [r0, #13]
 800e890:	00cb      	lsls	r3, r1, #3
 800e892:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e896:	7a03      	ldrb	r3, [r0, #8]
 800e898:	4313      	orrs	r3, r2
 800e89a:	064a      	lsls	r2, r1, #25
 800e89c:	bf44      	itt	mi
 800e89e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e8a2:	b21b      	sxthmi	r3, r3
 800e8a4:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e8a8:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 800e8ac:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 800e8b0:	443b      	add	r3, r7
 800e8b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800e8b6:	4433      	add	r3, r6
 800e8b8:	b29b      	uxth	r3, r3
 800e8ba:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e8be:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 800e8c2:	10db      	asrs	r3, r3, #3
 800e8c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e8c8:	4313      	orrs	r3, r2
 800e8ca:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 800e8ce:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 800e8d2:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 800e8d6:	1a9b      	subs	r3, r3, r2
 800e8d8:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800e8dc:	e76e      	b.n	800e7bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800e8de:	f023 0204 	bic.w	r2, r3, #4
 800e8e2:	f640 611b 	movw	r1, #3611	@ 0xe1b
 800e8e6:	428a      	cmp	r2, r1
 800e8e8:	d003      	beq.n	800e8f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 800e8ea:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d138      	bne.n	800e964 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 800e8f2:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 800e8f6:	4622      	mov	r2, r4
 800e8f8:	f104 0808 	add.w	r8, r4, #8
 800e8fc:	4634      	mov	r4, r6
 800e8fe:	6810      	ldr	r0, [r2, #0]
 800e900:	3208      	adds	r2, #8
 800e902:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800e906:	46b6      	mov	lr, r6
 800e908:	4542      	cmp	r2, r8
 800e90a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e90e:	4676      	mov	r6, lr
 800e910:	d1f5      	bne.n	800e8fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 800e912:	6810      	ldr	r0, [r2, #0]
 800e914:	3b01      	subs	r3, #1
 800e916:	4621      	mov	r1, r4
 800e918:	f8ce 0000 	str.w	r0, [lr]
 800e91c:	b29b      	uxth	r3, r3
 800e91e:	8892      	ldrh	r2, [r2, #4]
 800e920:	4628      	mov	r0, r5
 800e922:	f8ae 2004 	strh.w	r2, [lr, #4]
 800e926:	4662      	mov	r2, ip
 800e928:	f7ff ff30 	bl	800e78c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800e92c:	7b41      	ldrb	r1, [r0, #13]
 800e92e:	00cb      	lsls	r3, r1, #3
 800e930:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e934:	7a03      	ldrb	r3, [r0, #8]
 800e936:	0648      	lsls	r0, r1, #25
 800e938:	ea43 0302 	orr.w	r3, r3, r2
 800e93c:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 800e940:	bf44      	itt	mi
 800e942:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e946:	b21b      	sxthmi	r3, r3
 800e948:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e94c:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800e950:	005b      	lsls	r3, r3, #1
 800e952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e956:	4313      	orrs	r3, r2
 800e958:	115a      	asrs	r2, r3, #5
 800e95a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800e95e:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 800e962:	e047      	b.n	800e9f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 800e964:	00c2      	lsls	r2, r0, #3
 800e966:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 800e96a:	7a22      	ldrb	r2, [r4, #8]
 800e96c:	430a      	orrs	r2, r1
 800e96e:	0641      	lsls	r1, r0, #25
 800e970:	f640 6109 	movw	r1, #3593	@ 0xe09
 800e974:	bf44      	itt	mi
 800e976:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 800e97a:	b212      	sxthmi	r2, r2
 800e97c:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800e980:	f023 0210 	bic.w	r2, r3, #16
 800e984:	428a      	cmp	r2, r1
 800e986:	d003      	beq.n	800e990 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 800e988:	f640 6213 	movw	r2, #3603	@ 0xe13
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d13e      	bne.n	800ea0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 800e990:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e994:	f104 0808 	add.w	r8, r4, #8
 800e998:	4696      	mov	lr, r2
 800e99a:	6820      	ldr	r0, [r4, #0]
 800e99c:	3408      	adds	r4, #8
 800e99e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800e9a2:	4616      	mov	r6, r2
 800e9a4:	4544      	cmp	r4, r8
 800e9a6:	c603      	stmia	r6!, {r0, r1}
 800e9a8:	4632      	mov	r2, r6
 800e9aa:	d1f6      	bne.n	800e99a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 800e9ac:	6820      	ldr	r0, [r4, #0]
 800e9ae:	6030      	str	r0, [r6, #0]
 800e9b0:	4628      	mov	r0, r5
 800e9b2:	88a1      	ldrh	r1, [r4, #4]
 800e9b4:	4674      	mov	r4, lr
 800e9b6:	80b1      	strh	r1, [r6, #4]
 800e9b8:	4671      	mov	r1, lr
 800e9ba:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 800e9be:	0076      	lsls	r6, r6, #1
 800e9c0:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800e9c4:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800e9c8:	4316      	orrs	r6, r2
 800e9ca:	f640 6213 	movw	r2, #3603	@ 0xe13
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	4662      	mov	r2, ip
 800e9d2:	bf16      	itet	ne
 800e9d4:	f103 33ff 	addne.w	r3, r3, #4294967295
 800e9d8:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 800e9dc:	b29b      	uxthne	r3, r3
 800e9de:	f7ff fed5 	bl	800e78c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800e9e2:	7b43      	ldrb	r3, [r0, #13]
 800e9e4:	7a82      	ldrb	r2, [r0, #10]
 800e9e6:	005b      	lsls	r3, r3, #1
 800e9e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9ec:	4313      	orrs	r3, r2
 800e9ee:	1af6      	subs	r6, r6, r3
 800e9f0:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 800e9f4:	7b61      	ldrb	r1, [r4, #13]
 800e9f6:	00cb      	lsls	r3, r1, #3
 800e9f8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e9fc:	7a23      	ldrb	r3, [r4, #8]
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	064a      	lsls	r2, r1, #25
 800ea02:	bf44      	itt	mi
 800ea04:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ea08:	b21b      	sxthmi	r3, r3
 800ea0a:	1bdb      	subs	r3, r3, r7
 800ea0c:	e719      	b.n	800e842 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800ea0e:	2300      	movs	r3, #0
 800ea10:	e7a5      	b.n	800e95e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 800ea12:	bf00      	nop
 800ea14:	3fc00079 	.word	0x3fc00079

0800ea18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800ea18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea1c:	4604      	mov	r4, r0
 800ea1e:	b942      	cbnz	r2, 800ea32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800ea20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ea24:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 800ea28:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800ea2c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800ea30:	e047      	b.n	800eac2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800ea32:	7b51      	ldrb	r1, [r2, #13]
 800ea34:	8893      	ldrh	r3, [r2, #4]
 800ea36:	010d      	lsls	r5, r1, #4
 800ea38:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 800ea3c:	79d5      	ldrb	r5, [r2, #7]
 800ea3e:	4305      	orrs	r5, r0
 800ea40:	2d04      	cmp	r5, #4
 800ea42:	bfcc      	ite	gt
 800ea44:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800ea48:	f04f 0e01 	movle.w	lr, #1
 800ea4c:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 800ea50:	f200 80ab 	bhi.w	800ebaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800ea54:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 800ea58:	4283      	cmp	r3, r0
 800ea5a:	d216      	bcs.n	800ea8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ea5c:	f240 605b 	movw	r0, #1627	@ 0x65b
 800ea60:	4283      	cmp	r3, r0
 800ea62:	d859      	bhi.n	800eb18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800ea64:	f240 6057 	movw	r0, #1623	@ 0x657
 800ea68:	4283      	cmp	r3, r0
 800ea6a:	d20e      	bcs.n	800ea8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ea6c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800ea70:	d24a      	bcs.n	800eb08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800ea72:	f240 604e 	movw	r0, #1614	@ 0x64e
 800ea76:	4283      	cmp	r3, r0
 800ea78:	d207      	bcs.n	800ea8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ea7a:	f240 601a 	movw	r0, #1562	@ 0x61a
 800ea7e:	4283      	cmp	r3, r0
 800ea80:	d02a      	beq.n	800ead8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ea82:	d821      	bhi.n	800eac8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800ea84:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 800ea88:	d35b      	bcc.n	800eb42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ea8a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 800ea8e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ea92:	f040 80d0 	bne.w	800ec36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800ea96:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 800ea9a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ea9e:	f040 80ca 	bne.w	800ec36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800eaa2:	00cb      	lsls	r3, r1, #3
 800eaa4:	0649      	lsls	r1, r1, #25
 800eaa6:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800eaaa:	7a13      	ldrb	r3, [r2, #8]
 800eaac:	ea43 0300 	orr.w	r3, r3, r0
 800eab0:	bf44      	itt	mi
 800eab2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800eab6:	b21b      	sxthmi	r3, r3
 800eab8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800eabc:	1b5d      	subs	r5, r3, r5
 800eabe:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800eac2:	4610      	mov	r0, r2
 800eac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eac8:	f240 604b 	movw	r0, #1611	@ 0x64b
 800eacc:	4283      	cmp	r3, r0
 800eace:	d338      	bcc.n	800eb42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ead0:	f240 604c 	movw	r0, #1612	@ 0x64c
 800ead4:	4283      	cmp	r3, r0
 800ead6:	d9d8      	bls.n	800ea8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ead8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 800eadc:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 800eae0:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800eae4:	f040 80f3 	bne.w	800ecce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800eae8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800eaec:	f040 80ef 	bne.w	800ecce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800eaf0:	00cb      	lsls	r3, r1, #3
 800eaf2:	064e      	lsls	r6, r1, #25
 800eaf4:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800eaf8:	7a13      	ldrb	r3, [r2, #8]
 800eafa:	ea43 0300 	orr.w	r3, r3, r0
 800eafe:	bf44      	itt	mi
 800eb00:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800eb04:	b21b      	sxthmi	r3, r3
 800eb06:	e7d9      	b.n	800eabc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800eb08:	f240 6054 	movw	r0, #1620	@ 0x654
 800eb0c:	4283      	cmp	r3, r0
 800eb0e:	d8e3      	bhi.n	800ead8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eb10:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800eb14:	d9e0      	bls.n	800ead8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eb16:	e7b8      	b.n	800ea8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eb18:	f240 6074 	movw	r0, #1652	@ 0x674
 800eb1c:	4283      	cmp	r3, r0
 800eb1e:	d0b4      	beq.n	800ea8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eb20:	d82d      	bhi.n	800eb7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800eb22:	f240 605e 	movw	r0, #1630	@ 0x65e
 800eb26:	4283      	cmp	r3, r0
 800eb28:	d804      	bhi.n	800eb34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800eb2a:	f240 605d 	movw	r0, #1629	@ 0x65d
 800eb2e:	4283      	cmp	r3, r0
 800eb30:	d3d2      	bcc.n	800ead8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eb32:	e7aa      	b.n	800ea8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eb34:	f240 605f 	movw	r0, #1631	@ 0x65f
 800eb38:	4283      	cmp	r3, r0
 800eb3a:	d0cd      	beq.n	800ead8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eb3c:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 800eb40:	d0a3      	beq.n	800ea8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eb42:	00cb      	lsls	r3, r1, #3
 800eb44:	0649      	lsls	r1, r1, #25
 800eb46:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800eb4a:	7a13      	ldrb	r3, [r2, #8]
 800eb4c:	ea43 0300 	orr.w	r3, r3, r0
 800eb50:	bf44      	itt	mi
 800eb52:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800eb56:	b21b      	sxthmi	r3, r3
 800eb58:	1b5d      	subs	r5, r3, r5
 800eb5a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800eb5e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800eb62:	7b53      	ldrb	r3, [r2, #13]
 800eb64:	015b      	lsls	r3, r3, #5
 800eb66:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800eb6a:	7993      	ldrb	r3, [r2, #6]
 800eb6c:	430b      	orrs	r3, r1
 800eb6e:	2105      	movs	r1, #5
 800eb70:	005b      	lsls	r3, r3, #1
 800eb72:	fb93 f3f1 	sdiv	r3, r3, r1
 800eb76:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800eb7a:	440b      	add	r3, r1
 800eb7c:	e756      	b.n	800ea2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800eb7e:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 800eb82:	4283      	cmp	r3, r0
 800eb84:	d809      	bhi.n	800eb9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800eb86:	f240 60df 	movw	r0, #1759	@ 0x6df
 800eb8a:	4283      	cmp	r3, r0
 800eb8c:	f4bf af7d 	bcs.w	800ea8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eb90:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 800eb94:	2b05      	cmp	r3, #5
 800eb96:	d8d4      	bhi.n	800eb42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800eb98:	e777      	b.n	800ea8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eb9a:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 800eb9e:	4283      	cmp	r3, r0
 800eba0:	d09a      	beq.n	800ead8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eba2:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800eba6:	4283      	cmp	r3, r0
 800eba8:	e7ca      	b.n	800eb40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800ebaa:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 800ebae:	d22b      	bcs.n	800ec08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800ebb0:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 800ebb4:	4283      	cmp	r3, r0
 800ebb6:	d28f      	bcs.n	800ead8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ebb8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800ebbc:	4283      	cmp	r3, r0
 800ebbe:	d816      	bhi.n	800ebee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800ebc0:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 800ebc4:	4283      	cmp	r3, r0
 800ebc6:	f4bf af60 	bcs.w	800ea8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ebca:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 800ebce:	4283      	cmp	r3, r0
 800ebd0:	d80a      	bhi.n	800ebe8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800ebd2:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800ebd6:	4283      	cmp	r3, r0
 800ebd8:	f4bf af57 	bcs.w	800ea8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ebdc:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 800ebe0:	4283      	cmp	r3, r0
 800ebe2:	f43f af79 	beq.w	800ead8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ebe6:	e7ac      	b.n	800eb42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ebe8:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 800ebec:	e7f8      	b.n	800ebe0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800ebee:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800ebf2:	4283      	cmp	r3, r0
 800ebf4:	d802      	bhi.n	800ebfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800ebf6:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800ebfa:	e798      	b.n	800eb2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800ebfc:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 800ec00:	4283      	cmp	r3, r0
 800ec02:	f47f af42 	bne.w	800ea8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ec06:	e767      	b.n	800ead8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ec08:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 800ec0c:	4283      	cmp	r3, r0
 800ec0e:	f43f af63 	beq.w	800ead8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ec12:	d802      	bhi.n	800ec1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800ec14:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 800ec18:	e7f2      	b.n	800ec00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800ec1a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 800ec1e:	4283      	cmp	r3, r0
 800ec20:	d805      	bhi.n	800ec2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800ec22:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 800ec26:	4283      	cmp	r3, r0
 800ec28:	f4ff af2f 	bcc.w	800ea8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ec2c:	e754      	b.n	800ead8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ec2e:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 800ec32:	4283      	cmp	r3, r0
 800ec34:	e7af      	b.n	800eb96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800ec36:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800ec3a:	4617      	mov	r7, r2
 800ec3c:	f102 0808 	add.w	r8, r2, #8
 800ec40:	4666      	mov	r6, ip
 800ec42:	6838      	ldr	r0, [r7, #0]
 800ec44:	3708      	adds	r7, #8
 800ec46:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800ec4a:	46e6      	mov	lr, ip
 800ec4c:	4547      	cmp	r7, r8
 800ec4e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800ec52:	46f4      	mov	ip, lr
 800ec54:	d1f5      	bne.n	800ec42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800ec56:	6838      	ldr	r0, [r7, #0]
 800ec58:	f8ce 0000 	str.w	r0, [lr]
 800ec5c:	88b9      	ldrh	r1, [r7, #4]
 800ec5e:	f8ae 1004 	strh.w	r1, [lr, #4]
 800ec62:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800ec66:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ec6a:	d009      	beq.n	800ec80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 800ec6c:	7b51      	ldrb	r1, [r2, #13]
 800ec6e:	7992      	ldrb	r2, [r2, #6]
 800ec70:	0149      	lsls	r1, r1, #5
 800ec72:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800ec76:	4311      	orrs	r1, r2
 800ec78:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800ec7c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800ec80:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ec84:	b2ad      	uxth	r5, r5
 800ec86:	d00d      	beq.n	800eca4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 800ec88:	442b      	add	r3, r5
 800ec8a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800ec94:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800ec98:	10db      	asrs	r3, r3, #3
 800ec9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800eca4:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800eca8:	00cb      	lsls	r3, r1, #3
 800ecaa:	064f      	lsls	r7, r1, #25
 800ecac:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800ecb0:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800ecb4:	ea43 0302 	orr.w	r3, r3, r2
 800ecb8:	bf44      	itt	mi
 800ecba:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ecbe:	b21b      	sxthmi	r3, r3
 800ecc0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800ecc4:	1b5b      	subs	r3, r3, r5
 800ecc6:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800ecca:	4632      	mov	r2, r6
 800eccc:	e6f9      	b.n	800eac2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800ecce:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800ecd2:	4617      	mov	r7, r2
 800ecd4:	f102 0908 	add.w	r9, r2, #8
 800ecd8:	4666      	mov	r6, ip
 800ecda:	6838      	ldr	r0, [r7, #0]
 800ecdc:	3708      	adds	r7, #8
 800ecde:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800ece2:	46e0      	mov	r8, ip
 800ece4:	454f      	cmp	r7, r9
 800ece6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800ecea:	46c4      	mov	ip, r8
 800ecec:	d1f5      	bne.n	800ecda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 800ecee:	6838      	ldr	r0, [r7, #0]
 800ecf0:	f8c8 0000 	str.w	r0, [r8]
 800ecf4:	88b9      	ldrh	r1, [r7, #4]
 800ecf6:	f8a8 1004 	strh.w	r1, [r8, #4]
 800ecfa:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800ecfe:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ed02:	d009      	beq.n	800ed18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 800ed04:	7b51      	ldrb	r1, [r2, #13]
 800ed06:	7992      	ldrb	r2, [r2, #6]
 800ed08:	0149      	lsls	r1, r1, #5
 800ed0a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800ed0e:	4311      	orrs	r1, r2
 800ed10:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800ed14:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800ed18:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ed1c:	d00e      	beq.n	800ed3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 800ed1e:	eba3 030e 	sub.w	r3, r3, lr
 800ed22:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800ed2c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800ed30:	10db      	asrs	r3, r3, #3
 800ed32:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ed36:	4313      	orrs	r3, r2
 800ed38:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800ed3c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800ed40:	00cb      	lsls	r3, r1, #3
 800ed42:	0648      	lsls	r0, r1, #25
 800ed44:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800ed48:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800ed4c:	ea43 0302 	orr.w	r3, r3, r2
 800ed50:	bf44      	itt	mi
 800ed52:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ed56:	b21b      	sxthmi	r3, r3
 800ed58:	1b5d      	subs	r5, r3, r5
 800ed5a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800ed5e:	e7b4      	b.n	800ecca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0800ed60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800ed60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed64:	461e      	mov	r6, r3
 800ed66:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800ed68:	4604      	mov	r4, r0
 800ed6a:	4617      	mov	r7, r2
 800ed6c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ed70:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800ed74:	f7ff f9d8 	bl	800e128 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800ed78:	4605      	mov	r5, r0
 800ed7a:	b918      	cbnz	r0, 800ed84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800ed7c:	6030      	str	r0, [r6, #0]
 800ed7e:	4628      	mov	r0, r5
 800ed80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	4601      	mov	r1, r0
 800ed88:	4638      	mov	r0, r7
 800ed8a:	68db      	ldr	r3, [r3, #12]
 800ed8c:	4798      	blx	r3
 800ed8e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800ed92:	4602      	mov	r2, r0
 800ed94:	6030      	str	r0, [r6, #0]
 800ed96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ed9a:	d213      	bcs.n	800edc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800ed9c:	4643      	mov	r3, r8
 800ed9e:	4639      	mov	r1, r7
 800eda0:	4620      	mov	r0, r4
 800eda2:	f7ff fe39 	bl	800ea18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800eda6:	6030      	str	r0, [r6, #0]
 800eda8:	6833      	ldr	r3, [r6, #0]
 800edaa:	b143      	cbz	r3, 800edbe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800edac:	7b5a      	ldrb	r2, [r3, #13]
 800edae:	7a9b      	ldrb	r3, [r3, #10]
 800edb0:	0052      	lsls	r2, r2, #1
 800edb2:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800edb6:	4313      	orrs	r3, r2
 800edb8:	bf0c      	ite	eq
 800edba:	2301      	moveq	r3, #1
 800edbc:	2300      	movne	r3, #0
 800edbe:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800edc2:	e7dc      	b.n	800ed7e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800edc4:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800edc8:	b29b      	uxth	r3, r3
 800edca:	2b7f      	cmp	r3, #127	@ 0x7f
 800edcc:	d804      	bhi.n	800edd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800edce:	4639      	mov	r1, r7
 800edd0:	4620      	mov	r0, r4
 800edd2:	f7ff fce7 	bl	800e7a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800edd6:	e7e6      	b.n	800eda6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800edd8:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d0e3      	beq.n	800eda8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800ede0:	f640 1302 	movw	r3, #2306	@ 0x902
 800ede4:	429d      	cmp	r5, r3
 800ede6:	d1df      	bne.n	800eda8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800ede8:	4601      	mov	r1, r0
 800edea:	4620      	mov	r0, r4
 800edec:	f7ff fcaa 	bl	800e744 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800edf0:	e7d9      	b.n	800eda6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800edf2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800edf2:	b510      	push	{r4, lr}
 800edf4:	4604      	mov	r4, r0
 800edf6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800edfa:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800edfc:	b1e1      	cbz	r1, 800ee38 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800edfe:	2b0a      	cmp	r3, #10
 800ee00:	d02d      	beq.n	800ee5e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800ee02:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800ee04:	3901      	subs	r1, #1
 800ee06:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800ee0a:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800ee0c:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 800ee10:	1c51      	adds	r1, r2, #1
 800ee12:	b289      	uxth	r1, r1
 800ee14:	2901      	cmp	r1, #1
 800ee16:	bf8a      	itet	hi
 800ee18:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ee1c:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 800ee1e:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 800ee20:	1c5a      	adds	r2, r3, #1
 800ee22:	8722      	strh	r2, [r4, #56]	@ 0x38
 800ee24:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800ee26:	4413      	add	r3, r2
 800ee28:	b29b      	uxth	r3, r3
 800ee2a:	2b09      	cmp	r3, #9
 800ee2c:	bf88      	it	hi
 800ee2e:	3b0a      	subhi	r3, #10
 800ee30:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ee34:	8458      	strh	r0, [r3, #34]	@ 0x22
 800ee36:	e7de      	b.n	800edf6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800ee38:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800ee3a:	2b0a      	cmp	r3, #10
 800ee3c:	d00f      	beq.n	800ee5e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800ee3e:	4620      	mov	r0, r4
 800ee40:	f7ff fc3f 	bl	800e6c2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800ee44:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800ee46:	1c5a      	adds	r2, r3, #1
 800ee48:	8722      	strh	r2, [r4, #56]	@ 0x38
 800ee4a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800ee4c:	4413      	add	r3, r2
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	2b09      	cmp	r3, #9
 800ee52:	bf88      	it	hi
 800ee54:	3b0a      	subhi	r3, #10
 800ee56:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ee5a:	8458      	strh	r0, [r3, #34]	@ 0x22
 800ee5c:	e7ec      	b.n	800ee38 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800ee5e:	bd10      	pop	{r4, pc}

0800ee60 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800ee60:	b538      	push	{r3, r4, r5, lr}
 800ee62:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800ee64:	4604      	mov	r4, r0
 800ee66:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800ee6a:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 800ee6c:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 800ee6e:	3a01      	subs	r2, #1
 800ee70:	8702      	strh	r2, [r0, #56]	@ 0x38
 800ee72:	1c5a      	adds	r2, r3, #1
 800ee74:	b292      	uxth	r2, r2
 800ee76:	2a09      	cmp	r2, #9
 800ee78:	bf8a      	itet	hi
 800ee7a:	3b09      	subhi	r3, #9
 800ee7c:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 800ee7e:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 800ee80:	f7ff ffb7 	bl	800edf2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800ee84:	8c23      	ldrh	r3, [r4, #32]
 800ee86:	2b01      	cmp	r3, #1
 800ee88:	bf9c      	itt	ls
 800ee8a:	3301      	addls	r3, #1
 800ee8c:	8423      	strhls	r3, [r4, #32]
 800ee8e:	8be3      	ldrh	r3, [r4, #30]
 800ee90:	b90b      	cbnz	r3, 800ee96 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800ee92:	2302      	movs	r3, #2
 800ee94:	83e3      	strh	r3, [r4, #30]
 800ee96:	8be3      	ldrh	r3, [r4, #30]
 800ee98:	4628      	mov	r0, r5
 800ee9a:	3b01      	subs	r3, #1
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	83e3      	strh	r3, [r4, #30]
 800eea0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800eea4:	8365      	strh	r5, [r4, #26]
 800eea6:	bd38      	pop	{r3, r4, r5, pc}

0800eea8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800eea8:	428a      	cmp	r2, r1
 800eeaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeae:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 800eeb0:	d932      	bls.n	800ef18 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 800eeb2:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 800eeb4:	1a54      	subs	r4, r2, r1
 800eeb6:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 800eeba:	19ee      	adds	r6, r5, r7
 800eebc:	fa1f fe84 	uxth.w	lr, r4
 800eec0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 800eec4:	3e01      	subs	r6, #1
 800eec6:	b2b4      	uxth	r4, r6
 800eec8:	eba4 090e 	sub.w	r9, r4, lr
 800eecc:	fa1f f989 	uxth.w	r9, r9
 800eed0:	2c09      	cmp	r4, #9
 800eed2:	4626      	mov	r6, r4
 800eed4:	bf88      	it	hi
 800eed6:	f1a4 060a 	subhi.w	r6, r4, #10
 800eeda:	f1bc 0f00 	cmp.w	ip, #0
 800eede:	f104 34ff 	add.w	r4, r4, #4294967295
 800eee2:	bf08      	it	eq
 800eee4:	f04f 0c02 	moveq.w	ip, #2
 800eee8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800eeec:	b2a4      	uxth	r4, r4
 800eeee:	f10c 3cff 	add.w	ip, ip, #4294967295
 800eef2:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800eef6:	454c      	cmp	r4, r9
 800eef8:	fa1f fc8c 	uxth.w	ip, ip
 800eefc:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800ef00:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 800ef04:	d1e4      	bne.n	800eed0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800ef06:	eba5 050e 	sub.w	r5, r5, lr
 800ef0a:	eb0e 0408 	add.w	r4, lr, r8
 800ef0e:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 800ef12:	8705      	strh	r5, [r0, #56]	@ 0x38
 800ef14:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 800ef18:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800ef1a:	250a      	movs	r5, #10
 800ef1c:	1a64      	subs	r4, r4, r1
 800ef1e:	4439      	add	r1, r7
 800ef20:	b289      	uxth	r1, r1
 800ef22:	8704      	strh	r4, [r0, #56]	@ 0x38
 800ef24:	2909      	cmp	r1, #9
 800ef26:	bf88      	it	hi
 800ef28:	390a      	subhi	r1, #10
 800ef2a:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800ef2c:	b18a      	cbz	r2, 800ef52 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 800ef2e:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 800ef30:	3a01      	subs	r2, #1
 800ef32:	3101      	adds	r1, #1
 800ef34:	b292      	uxth	r2, r2
 800ef36:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800ef3a:	8701      	strh	r1, [r0, #56]	@ 0x38
 800ef3c:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800ef3e:	b901      	cbnz	r1, 800ef42 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 800ef40:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800ef42:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800ef44:	3901      	subs	r1, #1
 800ef46:	b289      	uxth	r1, r1
 800ef48:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800ef4a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800ef4e:	844c      	strh	r4, [r1, #34]	@ 0x22
 800ef50:	e7ec      	b.n	800ef2c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 800ef52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef56:	f7ff bf4c 	b.w	800edf2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800ef5a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800ef5a:	b570      	push	{r4, r5, r6, lr}
 800ef5c:	2500      	movs	r5, #0
 800ef5e:	4295      	cmp	r5, r2
 800ef60:	d011      	beq.n	800ef86 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800ef62:	8bc4      	ldrh	r4, [r0, #30]
 800ef64:	f831 6b02 	ldrh.w	r6, [r1], #2
 800ef68:	4414      	add	r4, r2
 800ef6a:	3c01      	subs	r4, #1
 800ef6c:	1b64      	subs	r4, r4, r5
 800ef6e:	b2a4      	uxth	r4, r4
 800ef70:	2c01      	cmp	r4, #1
 800ef72:	bf88      	it	hi
 800ef74:	3c02      	subhi	r4, #2
 800ef76:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800ef7a:	8b64      	ldrh	r4, [r4, #26]
 800ef7c:	42b4      	cmp	r4, r6
 800ef7e:	d117      	bne.n	800efb0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800ef80:	3501      	adds	r5, #1
 800ef82:	b2ad      	uxth	r5, r5
 800ef84:	e7eb      	b.n	800ef5e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800ef86:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800ef8a:	2400      	movs	r4, #0
 800ef8c:	4413      	add	r3, r2
 800ef8e:	b2a2      	uxth	r2, r4
 800ef90:	429a      	cmp	r2, r3
 800ef92:	da0f      	bge.n	800efb4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800ef94:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 800ef96:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800ef9a:	3401      	adds	r4, #1
 800ef9c:	4432      	add	r2, r6
 800ef9e:	b292      	uxth	r2, r2
 800efa0:	2a09      	cmp	r2, #9
 800efa2:	bf88      	it	hi
 800efa4:	3a0a      	subhi	r2, #10
 800efa6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800efaa:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800efac:	42aa      	cmp	r2, r5
 800efae:	d0ee      	beq.n	800ef8e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800efb0:	2000      	movs	r0, #0
 800efb2:	bd70      	pop	{r4, r5, r6, pc}
 800efb4:	2001      	movs	r0, #1
 800efb6:	e7fc      	b.n	800efb2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800efb8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800efb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efbc:	4605      	mov	r5, r0
 800efbe:	4616      	mov	r6, r2
 800efc0:	1c8c      	adds	r4, r1, #2
 800efc2:	8809      	ldrh	r1, [r1, #0]
 800efc4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800efc8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800efcc:	42b3      	cmp	r3, r6
 800efce:	d124      	bne.n	800f01a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800efd0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800efd4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800efd8:	f001 070f 	and.w	r7, r1, #15
 800efdc:	4652      	mov	r2, sl
 800efde:	f8cd 8000 	str.w	r8, [sp]
 800efe2:	464b      	mov	r3, r9
 800efe4:	4621      	mov	r1, r4
 800efe6:	4628      	mov	r0, r5
 800efe8:	f7ff ffb7 	bl	800ef5a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800efec:	4683      	mov	fp, r0
 800efee:	b168      	cbz	r0, 800f00c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800eff0:	eb0a 0109 	add.w	r1, sl, r9
 800eff4:	463a      	mov	r2, r7
 800eff6:	4628      	mov	r0, r5
 800eff8:	4441      	add	r1, r8
 800effa:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800effe:	4649      	mov	r1, r9
 800f000:	f7ff ff52 	bl	800eea8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800f004:	4658      	mov	r0, fp
 800f006:	b003      	add	sp, #12
 800f008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f00c:	eb07 010a 	add.w	r1, r7, sl
 800f010:	4449      	add	r1, r9
 800f012:	4441      	add	r1, r8
 800f014:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800f018:	e7d2      	b.n	800efc0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800f01a:	f04f 0b00 	mov.w	fp, #0
 800f01e:	e7f1      	b.n	800f004 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800f020 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800f020:	b570      	push	{r4, r5, r6, lr}
 800f022:	8810      	ldrh	r0, [r2, #0]
 800f024:	4298      	cmp	r0, r3
 800f026:	d817      	bhi.n	800f058 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f028:	1e48      	subs	r0, r1, #1
 800f02a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800f02e:	4298      	cmp	r0, r3
 800f030:	d312      	bcc.n	800f058 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f032:	2400      	movs	r4, #0
 800f034:	428c      	cmp	r4, r1
 800f036:	d20f      	bcs.n	800f058 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f038:	1860      	adds	r0, r4, r1
 800f03a:	1040      	asrs	r0, r0, #1
 800f03c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800f040:	0085      	lsls	r5, r0, #2
 800f042:	42b3      	cmp	r3, r6
 800f044:	d902      	bls.n	800f04c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800f046:	3001      	adds	r0, #1
 800f048:	b284      	uxth	r4, r0
 800f04a:	e7f3      	b.n	800f034 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f04c:	d201      	bcs.n	800f052 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800f04e:	b281      	uxth	r1, r0
 800f050:	e7f0      	b.n	800f034 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f052:	442a      	add	r2, r5
 800f054:	8850      	ldrh	r0, [r2, #2]
 800f056:	bd70      	pop	{r4, r5, r6, pc}
 800f058:	2000      	movs	r0, #0
 800f05a:	e7fc      	b.n	800f056 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800f05c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800f05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f060:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800f062:	4604      	mov	r4, r0
 800f064:	260b      	movs	r6, #11
 800f066:	886f      	ldrh	r7, [r5, #2]
 800f068:	087f      	lsrs	r7, r7, #1
 800f06a:	3e01      	subs	r6, #1
 800f06c:	d013      	beq.n	800f096 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f06e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800f070:	462a      	mov	r2, r5
 800f072:	4639      	mov	r1, r7
 800f074:	4620      	mov	r0, r4
 800f076:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f07a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800f07e:	4643      	mov	r3, r8
 800f080:	f7ff ffce 	bl	800f020 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800f084:	b138      	cbz	r0, 800f096 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f086:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800f08a:	4642      	mov	r2, r8
 800f08c:	4620      	mov	r0, r4
 800f08e:	f7ff ff93 	bl	800efb8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800f092:	2800      	cmp	r0, #0
 800f094:	d1e9      	bne.n	800f06a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800f096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f09a <_ZdlPvj>:
 800f09a:	f000 b812 	b.w	800f0c2 <_ZdlPv>

0800f09e <__cxa_guard_acquire>:
 800f09e:	6802      	ldr	r2, [r0, #0]
 800f0a0:	07d2      	lsls	r2, r2, #31
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	d405      	bmi.n	800f0b2 <__cxa_guard_acquire+0x14>
 800f0a6:	7842      	ldrb	r2, [r0, #1]
 800f0a8:	b102      	cbz	r2, 800f0ac <__cxa_guard_acquire+0xe>
 800f0aa:	deff      	udf	#255	@ 0xff
 800f0ac:	2001      	movs	r0, #1
 800f0ae:	7058      	strb	r0, [r3, #1]
 800f0b0:	4770      	bx	lr
 800f0b2:	2000      	movs	r0, #0
 800f0b4:	4770      	bx	lr

0800f0b6 <__cxa_guard_release>:
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	6003      	str	r3, [r0, #0]
 800f0ba:	4770      	bx	lr

0800f0bc <__cxa_pure_virtual>:
 800f0bc:	b508      	push	{r3, lr}
 800f0be:	f000 f80f 	bl	800f0e0 <_ZSt9terminatev>

0800f0c2 <_ZdlPv>:
 800f0c2:	f000 b845 	b.w	800f150 <free>

0800f0c6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f0c6:	b508      	push	{r3, lr}
 800f0c8:	4780      	blx	r0
 800f0ca:	f000 f80e 	bl	800f0ea <abort>
	...

0800f0d0 <_ZSt13get_terminatev>:
 800f0d0:	4b02      	ldr	r3, [pc, #8]	@ (800f0dc <_ZSt13get_terminatev+0xc>)
 800f0d2:	6818      	ldr	r0, [r3, #0]
 800f0d4:	f3bf 8f5b 	dmb	ish
 800f0d8:	4770      	bx	lr
 800f0da:	bf00      	nop
 800f0dc:	240001c4 	.word	0x240001c4

0800f0e0 <_ZSt9terminatev>:
 800f0e0:	b508      	push	{r3, lr}
 800f0e2:	f7ff fff5 	bl	800f0d0 <_ZSt13get_terminatev>
 800f0e6:	f7ff ffee 	bl	800f0c6 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f0ea <abort>:
 800f0ea:	b508      	push	{r3, lr}
 800f0ec:	2006      	movs	r0, #6
 800f0ee:	f000 fa2d 	bl	800f54c <raise>
 800f0f2:	2001      	movs	r0, #1
 800f0f4:	f7f3 f9e4 	bl	80024c0 <_exit>

0800f0f8 <__assert_func>:
 800f0f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0fa:	4614      	mov	r4, r2
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	4b09      	ldr	r3, [pc, #36]	@ (800f124 <__assert_func+0x2c>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	4605      	mov	r5, r0
 800f104:	68d8      	ldr	r0, [r3, #12]
 800f106:	b14c      	cbz	r4, 800f11c <__assert_func+0x24>
 800f108:	4b07      	ldr	r3, [pc, #28]	@ (800f128 <__assert_func+0x30>)
 800f10a:	9100      	str	r1, [sp, #0]
 800f10c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f110:	4906      	ldr	r1, [pc, #24]	@ (800f12c <__assert_func+0x34>)
 800f112:	462b      	mov	r3, r5
 800f114:	f000 f976 	bl	800f404 <fiprintf>
 800f118:	f7ff ffe7 	bl	800f0ea <abort>
 800f11c:	4b04      	ldr	r3, [pc, #16]	@ (800f130 <__assert_func+0x38>)
 800f11e:	461c      	mov	r4, r3
 800f120:	e7f3      	b.n	800f10a <__assert_func+0x12>
 800f122:	bf00      	nop
 800f124:	240001d4 	.word	0x240001d4
 800f128:	080104fc 	.word	0x080104fc
 800f12c:	08010509 	.word	0x08010509
 800f130:	08010537 	.word	0x08010537

0800f134 <atexit>:
 800f134:	2300      	movs	r3, #0
 800f136:	4601      	mov	r1, r0
 800f138:	461a      	mov	r2, r3
 800f13a:	4618      	mov	r0, r3
 800f13c:	f000 baa6 	b.w	800f68c <__register_exitproc>

0800f140 <malloc>:
 800f140:	4b02      	ldr	r3, [pc, #8]	@ (800f14c <malloc+0xc>)
 800f142:	4601      	mov	r1, r0
 800f144:	6818      	ldr	r0, [r3, #0]
 800f146:	f000 b82d 	b.w	800f1a4 <_malloc_r>
 800f14a:	bf00      	nop
 800f14c:	240001d4 	.word	0x240001d4

0800f150 <free>:
 800f150:	4b02      	ldr	r3, [pc, #8]	@ (800f15c <free+0xc>)
 800f152:	4601      	mov	r1, r0
 800f154:	6818      	ldr	r0, [r3, #0]
 800f156:	f000 baf5 	b.w	800f744 <_free_r>
 800f15a:	bf00      	nop
 800f15c:	240001d4 	.word	0x240001d4

0800f160 <sbrk_aligned>:
 800f160:	b570      	push	{r4, r5, r6, lr}
 800f162:	4e0f      	ldr	r6, [pc, #60]	@ (800f1a0 <sbrk_aligned+0x40>)
 800f164:	460c      	mov	r4, r1
 800f166:	6831      	ldr	r1, [r6, #0]
 800f168:	4605      	mov	r5, r0
 800f16a:	b911      	cbnz	r1, 800f172 <sbrk_aligned+0x12>
 800f16c:	f000 fa3e 	bl	800f5ec <_sbrk_r>
 800f170:	6030      	str	r0, [r6, #0]
 800f172:	4621      	mov	r1, r4
 800f174:	4628      	mov	r0, r5
 800f176:	f000 fa39 	bl	800f5ec <_sbrk_r>
 800f17a:	1c43      	adds	r3, r0, #1
 800f17c:	d103      	bne.n	800f186 <sbrk_aligned+0x26>
 800f17e:	f04f 34ff 	mov.w	r4, #4294967295
 800f182:	4620      	mov	r0, r4
 800f184:	bd70      	pop	{r4, r5, r6, pc}
 800f186:	1cc4      	adds	r4, r0, #3
 800f188:	f024 0403 	bic.w	r4, r4, #3
 800f18c:	42a0      	cmp	r0, r4
 800f18e:	d0f8      	beq.n	800f182 <sbrk_aligned+0x22>
 800f190:	1a21      	subs	r1, r4, r0
 800f192:	4628      	mov	r0, r5
 800f194:	f000 fa2a 	bl	800f5ec <_sbrk_r>
 800f198:	3001      	adds	r0, #1
 800f19a:	d1f2      	bne.n	800f182 <sbrk_aligned+0x22>
 800f19c:	e7ef      	b.n	800f17e <sbrk_aligned+0x1e>
 800f19e:	bf00      	nop
 800f1a0:	240007a8 	.word	0x240007a8

0800f1a4 <_malloc_r>:
 800f1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1a8:	1ccd      	adds	r5, r1, #3
 800f1aa:	f025 0503 	bic.w	r5, r5, #3
 800f1ae:	3508      	adds	r5, #8
 800f1b0:	2d0c      	cmp	r5, #12
 800f1b2:	bf38      	it	cc
 800f1b4:	250c      	movcc	r5, #12
 800f1b6:	2d00      	cmp	r5, #0
 800f1b8:	4606      	mov	r6, r0
 800f1ba:	db01      	blt.n	800f1c0 <_malloc_r+0x1c>
 800f1bc:	42a9      	cmp	r1, r5
 800f1be:	d904      	bls.n	800f1ca <_malloc_r+0x26>
 800f1c0:	230c      	movs	r3, #12
 800f1c2:	6033      	str	r3, [r6, #0]
 800f1c4:	2000      	movs	r0, #0
 800f1c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f2a0 <_malloc_r+0xfc>
 800f1ce:	f000 f869 	bl	800f2a4 <__malloc_lock>
 800f1d2:	f8d8 3000 	ldr.w	r3, [r8]
 800f1d6:	461c      	mov	r4, r3
 800f1d8:	bb44      	cbnz	r4, 800f22c <_malloc_r+0x88>
 800f1da:	4629      	mov	r1, r5
 800f1dc:	4630      	mov	r0, r6
 800f1de:	f7ff ffbf 	bl	800f160 <sbrk_aligned>
 800f1e2:	1c43      	adds	r3, r0, #1
 800f1e4:	4604      	mov	r4, r0
 800f1e6:	d158      	bne.n	800f29a <_malloc_r+0xf6>
 800f1e8:	f8d8 4000 	ldr.w	r4, [r8]
 800f1ec:	4627      	mov	r7, r4
 800f1ee:	2f00      	cmp	r7, #0
 800f1f0:	d143      	bne.n	800f27a <_malloc_r+0xd6>
 800f1f2:	2c00      	cmp	r4, #0
 800f1f4:	d04b      	beq.n	800f28e <_malloc_r+0xea>
 800f1f6:	6823      	ldr	r3, [r4, #0]
 800f1f8:	4639      	mov	r1, r7
 800f1fa:	4630      	mov	r0, r6
 800f1fc:	eb04 0903 	add.w	r9, r4, r3
 800f200:	f000 f9f4 	bl	800f5ec <_sbrk_r>
 800f204:	4581      	cmp	r9, r0
 800f206:	d142      	bne.n	800f28e <_malloc_r+0xea>
 800f208:	6821      	ldr	r1, [r4, #0]
 800f20a:	1a6d      	subs	r5, r5, r1
 800f20c:	4629      	mov	r1, r5
 800f20e:	4630      	mov	r0, r6
 800f210:	f7ff ffa6 	bl	800f160 <sbrk_aligned>
 800f214:	3001      	adds	r0, #1
 800f216:	d03a      	beq.n	800f28e <_malloc_r+0xea>
 800f218:	6823      	ldr	r3, [r4, #0]
 800f21a:	442b      	add	r3, r5
 800f21c:	6023      	str	r3, [r4, #0]
 800f21e:	f8d8 3000 	ldr.w	r3, [r8]
 800f222:	685a      	ldr	r2, [r3, #4]
 800f224:	bb62      	cbnz	r2, 800f280 <_malloc_r+0xdc>
 800f226:	f8c8 7000 	str.w	r7, [r8]
 800f22a:	e00f      	b.n	800f24c <_malloc_r+0xa8>
 800f22c:	6822      	ldr	r2, [r4, #0]
 800f22e:	1b52      	subs	r2, r2, r5
 800f230:	d420      	bmi.n	800f274 <_malloc_r+0xd0>
 800f232:	2a0b      	cmp	r2, #11
 800f234:	d917      	bls.n	800f266 <_malloc_r+0xc2>
 800f236:	1961      	adds	r1, r4, r5
 800f238:	42a3      	cmp	r3, r4
 800f23a:	6025      	str	r5, [r4, #0]
 800f23c:	bf18      	it	ne
 800f23e:	6059      	strne	r1, [r3, #4]
 800f240:	6863      	ldr	r3, [r4, #4]
 800f242:	bf08      	it	eq
 800f244:	f8c8 1000 	streq.w	r1, [r8]
 800f248:	5162      	str	r2, [r4, r5]
 800f24a:	604b      	str	r3, [r1, #4]
 800f24c:	4630      	mov	r0, r6
 800f24e:	f000 f82f 	bl	800f2b0 <__malloc_unlock>
 800f252:	f104 000b 	add.w	r0, r4, #11
 800f256:	1d23      	adds	r3, r4, #4
 800f258:	f020 0007 	bic.w	r0, r0, #7
 800f25c:	1ac2      	subs	r2, r0, r3
 800f25e:	bf1c      	itt	ne
 800f260:	1a1b      	subne	r3, r3, r0
 800f262:	50a3      	strne	r3, [r4, r2]
 800f264:	e7af      	b.n	800f1c6 <_malloc_r+0x22>
 800f266:	6862      	ldr	r2, [r4, #4]
 800f268:	42a3      	cmp	r3, r4
 800f26a:	bf0c      	ite	eq
 800f26c:	f8c8 2000 	streq.w	r2, [r8]
 800f270:	605a      	strne	r2, [r3, #4]
 800f272:	e7eb      	b.n	800f24c <_malloc_r+0xa8>
 800f274:	4623      	mov	r3, r4
 800f276:	6864      	ldr	r4, [r4, #4]
 800f278:	e7ae      	b.n	800f1d8 <_malloc_r+0x34>
 800f27a:	463c      	mov	r4, r7
 800f27c:	687f      	ldr	r7, [r7, #4]
 800f27e:	e7b6      	b.n	800f1ee <_malloc_r+0x4a>
 800f280:	461a      	mov	r2, r3
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	42a3      	cmp	r3, r4
 800f286:	d1fb      	bne.n	800f280 <_malloc_r+0xdc>
 800f288:	2300      	movs	r3, #0
 800f28a:	6053      	str	r3, [r2, #4]
 800f28c:	e7de      	b.n	800f24c <_malloc_r+0xa8>
 800f28e:	230c      	movs	r3, #12
 800f290:	6033      	str	r3, [r6, #0]
 800f292:	4630      	mov	r0, r6
 800f294:	f000 f80c 	bl	800f2b0 <__malloc_unlock>
 800f298:	e794      	b.n	800f1c4 <_malloc_r+0x20>
 800f29a:	6005      	str	r5, [r0, #0]
 800f29c:	e7d6      	b.n	800f24c <_malloc_r+0xa8>
 800f29e:	bf00      	nop
 800f2a0:	240007ac 	.word	0x240007ac

0800f2a4 <__malloc_lock>:
 800f2a4:	4801      	ldr	r0, [pc, #4]	@ (800f2ac <__malloc_lock+0x8>)
 800f2a6:	f000 b9ee 	b.w	800f686 <__retarget_lock_acquire_recursive>
 800f2aa:	bf00      	nop
 800f2ac:	240008f0 	.word	0x240008f0

0800f2b0 <__malloc_unlock>:
 800f2b0:	4801      	ldr	r0, [pc, #4]	@ (800f2b8 <__malloc_unlock+0x8>)
 800f2b2:	f000 b9e9 	b.w	800f688 <__retarget_lock_release_recursive>
 800f2b6:	bf00      	nop
 800f2b8:	240008f0 	.word	0x240008f0

0800f2bc <std>:
 800f2bc:	2300      	movs	r3, #0
 800f2be:	b510      	push	{r4, lr}
 800f2c0:	4604      	mov	r4, r0
 800f2c2:	e9c0 3300 	strd	r3, r3, [r0]
 800f2c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f2ca:	6083      	str	r3, [r0, #8]
 800f2cc:	8181      	strh	r1, [r0, #12]
 800f2ce:	6643      	str	r3, [r0, #100]	@ 0x64
 800f2d0:	81c2      	strh	r2, [r0, #14]
 800f2d2:	6183      	str	r3, [r0, #24]
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	2208      	movs	r2, #8
 800f2d8:	305c      	adds	r0, #92	@ 0x5c
 800f2da:	f000 f906 	bl	800f4ea <memset>
 800f2de:	4b0d      	ldr	r3, [pc, #52]	@ (800f314 <std+0x58>)
 800f2e0:	6263      	str	r3, [r4, #36]	@ 0x24
 800f2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800f318 <std+0x5c>)
 800f2e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f2e6:	4b0d      	ldr	r3, [pc, #52]	@ (800f31c <std+0x60>)
 800f2e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f2ea:	4b0d      	ldr	r3, [pc, #52]	@ (800f320 <std+0x64>)
 800f2ec:	6323      	str	r3, [r4, #48]	@ 0x30
 800f2ee:	4b0d      	ldr	r3, [pc, #52]	@ (800f324 <std+0x68>)
 800f2f0:	6224      	str	r4, [r4, #32]
 800f2f2:	429c      	cmp	r4, r3
 800f2f4:	d006      	beq.n	800f304 <std+0x48>
 800f2f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f2fa:	4294      	cmp	r4, r2
 800f2fc:	d002      	beq.n	800f304 <std+0x48>
 800f2fe:	33d0      	adds	r3, #208	@ 0xd0
 800f300:	429c      	cmp	r4, r3
 800f302:	d105      	bne.n	800f310 <std+0x54>
 800f304:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f30c:	f000 b9ba 	b.w	800f684 <__retarget_lock_init_recursive>
 800f310:	bd10      	pop	{r4, pc}
 800f312:	bf00      	nop
 800f314:	0800f465 	.word	0x0800f465
 800f318:	0800f487 	.word	0x0800f487
 800f31c:	0800f4bf 	.word	0x0800f4bf
 800f320:	0800f4e3 	.word	0x0800f4e3
 800f324:	240007b0 	.word	0x240007b0

0800f328 <stdio_exit_handler>:
 800f328:	4a02      	ldr	r2, [pc, #8]	@ (800f334 <stdio_exit_handler+0xc>)
 800f32a:	4903      	ldr	r1, [pc, #12]	@ (800f338 <stdio_exit_handler+0x10>)
 800f32c:	4803      	ldr	r0, [pc, #12]	@ (800f33c <stdio_exit_handler+0x14>)
 800f32e:	f000 b87b 	b.w	800f428 <_fwalk_sglue>
 800f332:	bf00      	nop
 800f334:	240001c8 	.word	0x240001c8
 800f338:	0800fe7d 	.word	0x0800fe7d
 800f33c:	240001d8 	.word	0x240001d8

0800f340 <cleanup_stdio>:
 800f340:	6841      	ldr	r1, [r0, #4]
 800f342:	4b0c      	ldr	r3, [pc, #48]	@ (800f374 <cleanup_stdio+0x34>)
 800f344:	4299      	cmp	r1, r3
 800f346:	b510      	push	{r4, lr}
 800f348:	4604      	mov	r4, r0
 800f34a:	d001      	beq.n	800f350 <cleanup_stdio+0x10>
 800f34c:	f000 fd96 	bl	800fe7c <_fflush_r>
 800f350:	68a1      	ldr	r1, [r4, #8]
 800f352:	4b09      	ldr	r3, [pc, #36]	@ (800f378 <cleanup_stdio+0x38>)
 800f354:	4299      	cmp	r1, r3
 800f356:	d002      	beq.n	800f35e <cleanup_stdio+0x1e>
 800f358:	4620      	mov	r0, r4
 800f35a:	f000 fd8f 	bl	800fe7c <_fflush_r>
 800f35e:	68e1      	ldr	r1, [r4, #12]
 800f360:	4b06      	ldr	r3, [pc, #24]	@ (800f37c <cleanup_stdio+0x3c>)
 800f362:	4299      	cmp	r1, r3
 800f364:	d004      	beq.n	800f370 <cleanup_stdio+0x30>
 800f366:	4620      	mov	r0, r4
 800f368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f36c:	f000 bd86 	b.w	800fe7c <_fflush_r>
 800f370:	bd10      	pop	{r4, pc}
 800f372:	bf00      	nop
 800f374:	240007b0 	.word	0x240007b0
 800f378:	24000818 	.word	0x24000818
 800f37c:	24000880 	.word	0x24000880

0800f380 <global_stdio_init.part.0>:
 800f380:	b510      	push	{r4, lr}
 800f382:	4b0b      	ldr	r3, [pc, #44]	@ (800f3b0 <global_stdio_init.part.0+0x30>)
 800f384:	4c0b      	ldr	r4, [pc, #44]	@ (800f3b4 <global_stdio_init.part.0+0x34>)
 800f386:	4a0c      	ldr	r2, [pc, #48]	@ (800f3b8 <global_stdio_init.part.0+0x38>)
 800f388:	601a      	str	r2, [r3, #0]
 800f38a:	4620      	mov	r0, r4
 800f38c:	2200      	movs	r2, #0
 800f38e:	2104      	movs	r1, #4
 800f390:	f7ff ff94 	bl	800f2bc <std>
 800f394:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f398:	2201      	movs	r2, #1
 800f39a:	2109      	movs	r1, #9
 800f39c:	f7ff ff8e 	bl	800f2bc <std>
 800f3a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f3a4:	2202      	movs	r2, #2
 800f3a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3aa:	2112      	movs	r1, #18
 800f3ac:	f7ff bf86 	b.w	800f2bc <std>
 800f3b0:	240008e8 	.word	0x240008e8
 800f3b4:	240007b0 	.word	0x240007b0
 800f3b8:	0800f329 	.word	0x0800f329

0800f3bc <__sfp_lock_acquire>:
 800f3bc:	4801      	ldr	r0, [pc, #4]	@ (800f3c4 <__sfp_lock_acquire+0x8>)
 800f3be:	f000 b962 	b.w	800f686 <__retarget_lock_acquire_recursive>
 800f3c2:	bf00      	nop
 800f3c4:	240008f2 	.word	0x240008f2

0800f3c8 <__sfp_lock_release>:
 800f3c8:	4801      	ldr	r0, [pc, #4]	@ (800f3d0 <__sfp_lock_release+0x8>)
 800f3ca:	f000 b95d 	b.w	800f688 <__retarget_lock_release_recursive>
 800f3ce:	bf00      	nop
 800f3d0:	240008f2 	.word	0x240008f2

0800f3d4 <__sinit>:
 800f3d4:	b510      	push	{r4, lr}
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	f7ff fff0 	bl	800f3bc <__sfp_lock_acquire>
 800f3dc:	6a23      	ldr	r3, [r4, #32]
 800f3de:	b11b      	cbz	r3, 800f3e8 <__sinit+0x14>
 800f3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3e4:	f7ff bff0 	b.w	800f3c8 <__sfp_lock_release>
 800f3e8:	4b04      	ldr	r3, [pc, #16]	@ (800f3fc <__sinit+0x28>)
 800f3ea:	6223      	str	r3, [r4, #32]
 800f3ec:	4b04      	ldr	r3, [pc, #16]	@ (800f400 <__sinit+0x2c>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d1f5      	bne.n	800f3e0 <__sinit+0xc>
 800f3f4:	f7ff ffc4 	bl	800f380 <global_stdio_init.part.0>
 800f3f8:	e7f2      	b.n	800f3e0 <__sinit+0xc>
 800f3fa:	bf00      	nop
 800f3fc:	0800f341 	.word	0x0800f341
 800f400:	240008e8 	.word	0x240008e8

0800f404 <fiprintf>:
 800f404:	b40e      	push	{r1, r2, r3}
 800f406:	b503      	push	{r0, r1, lr}
 800f408:	4601      	mov	r1, r0
 800f40a:	ab03      	add	r3, sp, #12
 800f40c:	4805      	ldr	r0, [pc, #20]	@ (800f424 <fiprintf+0x20>)
 800f40e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f412:	6800      	ldr	r0, [r0, #0]
 800f414:	9301      	str	r3, [sp, #4]
 800f416:	f000 fa09 	bl	800f82c <_vfiprintf_r>
 800f41a:	b002      	add	sp, #8
 800f41c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f420:	b003      	add	sp, #12
 800f422:	4770      	bx	lr
 800f424:	240001d4 	.word	0x240001d4

0800f428 <_fwalk_sglue>:
 800f428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f42c:	4607      	mov	r7, r0
 800f42e:	4688      	mov	r8, r1
 800f430:	4614      	mov	r4, r2
 800f432:	2600      	movs	r6, #0
 800f434:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f438:	f1b9 0901 	subs.w	r9, r9, #1
 800f43c:	d505      	bpl.n	800f44a <_fwalk_sglue+0x22>
 800f43e:	6824      	ldr	r4, [r4, #0]
 800f440:	2c00      	cmp	r4, #0
 800f442:	d1f7      	bne.n	800f434 <_fwalk_sglue+0xc>
 800f444:	4630      	mov	r0, r6
 800f446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f44a:	89ab      	ldrh	r3, [r5, #12]
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	d907      	bls.n	800f460 <_fwalk_sglue+0x38>
 800f450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f454:	3301      	adds	r3, #1
 800f456:	d003      	beq.n	800f460 <_fwalk_sglue+0x38>
 800f458:	4629      	mov	r1, r5
 800f45a:	4638      	mov	r0, r7
 800f45c:	47c0      	blx	r8
 800f45e:	4306      	orrs	r6, r0
 800f460:	3568      	adds	r5, #104	@ 0x68
 800f462:	e7e9      	b.n	800f438 <_fwalk_sglue+0x10>

0800f464 <__sread>:
 800f464:	b510      	push	{r4, lr}
 800f466:	460c      	mov	r4, r1
 800f468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f46c:	f000 f898 	bl	800f5a0 <_read_r>
 800f470:	2800      	cmp	r0, #0
 800f472:	bfab      	itete	ge
 800f474:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f476:	89a3      	ldrhlt	r3, [r4, #12]
 800f478:	181b      	addge	r3, r3, r0
 800f47a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f47e:	bfac      	ite	ge
 800f480:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f482:	81a3      	strhlt	r3, [r4, #12]
 800f484:	bd10      	pop	{r4, pc}

0800f486 <__swrite>:
 800f486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f48a:	461f      	mov	r7, r3
 800f48c:	898b      	ldrh	r3, [r1, #12]
 800f48e:	05db      	lsls	r3, r3, #23
 800f490:	4605      	mov	r5, r0
 800f492:	460c      	mov	r4, r1
 800f494:	4616      	mov	r6, r2
 800f496:	d505      	bpl.n	800f4a4 <__swrite+0x1e>
 800f498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f49c:	2302      	movs	r3, #2
 800f49e:	2200      	movs	r2, #0
 800f4a0:	f000 f86c 	bl	800f57c <_lseek_r>
 800f4a4:	89a3      	ldrh	r3, [r4, #12]
 800f4a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f4ae:	81a3      	strh	r3, [r4, #12]
 800f4b0:	4632      	mov	r2, r6
 800f4b2:	463b      	mov	r3, r7
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ba:	f000 b8a7 	b.w	800f60c <_write_r>

0800f4be <__sseek>:
 800f4be:	b510      	push	{r4, lr}
 800f4c0:	460c      	mov	r4, r1
 800f4c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4c6:	f000 f859 	bl	800f57c <_lseek_r>
 800f4ca:	1c43      	adds	r3, r0, #1
 800f4cc:	89a3      	ldrh	r3, [r4, #12]
 800f4ce:	bf15      	itete	ne
 800f4d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f4d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f4d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f4da:	81a3      	strheq	r3, [r4, #12]
 800f4dc:	bf18      	it	ne
 800f4de:	81a3      	strhne	r3, [r4, #12]
 800f4e0:	bd10      	pop	{r4, pc}

0800f4e2 <__sclose>:
 800f4e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4e6:	f000 b839 	b.w	800f55c <_close_r>

0800f4ea <memset>:
 800f4ea:	4402      	add	r2, r0
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d100      	bne.n	800f4f4 <memset+0xa>
 800f4f2:	4770      	bx	lr
 800f4f4:	f803 1b01 	strb.w	r1, [r3], #1
 800f4f8:	e7f9      	b.n	800f4ee <memset+0x4>

0800f4fa <_raise_r>:
 800f4fa:	291f      	cmp	r1, #31
 800f4fc:	b538      	push	{r3, r4, r5, lr}
 800f4fe:	4605      	mov	r5, r0
 800f500:	460c      	mov	r4, r1
 800f502:	d904      	bls.n	800f50e <_raise_r+0x14>
 800f504:	2316      	movs	r3, #22
 800f506:	6003      	str	r3, [r0, #0]
 800f508:	f04f 30ff 	mov.w	r0, #4294967295
 800f50c:	bd38      	pop	{r3, r4, r5, pc}
 800f50e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f510:	b112      	cbz	r2, 800f518 <_raise_r+0x1e>
 800f512:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f516:	b94b      	cbnz	r3, 800f52c <_raise_r+0x32>
 800f518:	4628      	mov	r0, r5
 800f51a:	f000 f865 	bl	800f5e8 <_getpid_r>
 800f51e:	4622      	mov	r2, r4
 800f520:	4601      	mov	r1, r0
 800f522:	4628      	mov	r0, r5
 800f524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f528:	f000 b84c 	b.w	800f5c4 <_kill_r>
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d00a      	beq.n	800f546 <_raise_r+0x4c>
 800f530:	1c59      	adds	r1, r3, #1
 800f532:	d103      	bne.n	800f53c <_raise_r+0x42>
 800f534:	2316      	movs	r3, #22
 800f536:	6003      	str	r3, [r0, #0]
 800f538:	2001      	movs	r0, #1
 800f53a:	e7e7      	b.n	800f50c <_raise_r+0x12>
 800f53c:	2100      	movs	r1, #0
 800f53e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f542:	4620      	mov	r0, r4
 800f544:	4798      	blx	r3
 800f546:	2000      	movs	r0, #0
 800f548:	e7e0      	b.n	800f50c <_raise_r+0x12>
	...

0800f54c <raise>:
 800f54c:	4b02      	ldr	r3, [pc, #8]	@ (800f558 <raise+0xc>)
 800f54e:	4601      	mov	r1, r0
 800f550:	6818      	ldr	r0, [r3, #0]
 800f552:	f7ff bfd2 	b.w	800f4fa <_raise_r>
 800f556:	bf00      	nop
 800f558:	240001d4 	.word	0x240001d4

0800f55c <_close_r>:
 800f55c:	b538      	push	{r3, r4, r5, lr}
 800f55e:	4d06      	ldr	r5, [pc, #24]	@ (800f578 <_close_r+0x1c>)
 800f560:	2300      	movs	r3, #0
 800f562:	4604      	mov	r4, r0
 800f564:	4608      	mov	r0, r1
 800f566:	602b      	str	r3, [r5, #0]
 800f568:	f7f2 ffee 	bl	8002548 <_close>
 800f56c:	1c43      	adds	r3, r0, #1
 800f56e:	d102      	bne.n	800f576 <_close_r+0x1a>
 800f570:	682b      	ldr	r3, [r5, #0]
 800f572:	b103      	cbz	r3, 800f576 <_close_r+0x1a>
 800f574:	6023      	str	r3, [r4, #0]
 800f576:	bd38      	pop	{r3, r4, r5, pc}
 800f578:	240008ec 	.word	0x240008ec

0800f57c <_lseek_r>:
 800f57c:	b538      	push	{r3, r4, r5, lr}
 800f57e:	4d07      	ldr	r5, [pc, #28]	@ (800f59c <_lseek_r+0x20>)
 800f580:	4604      	mov	r4, r0
 800f582:	4608      	mov	r0, r1
 800f584:	4611      	mov	r1, r2
 800f586:	2200      	movs	r2, #0
 800f588:	602a      	str	r2, [r5, #0]
 800f58a:	461a      	mov	r2, r3
 800f58c:	f7f3 f803 	bl	8002596 <_lseek>
 800f590:	1c43      	adds	r3, r0, #1
 800f592:	d102      	bne.n	800f59a <_lseek_r+0x1e>
 800f594:	682b      	ldr	r3, [r5, #0]
 800f596:	b103      	cbz	r3, 800f59a <_lseek_r+0x1e>
 800f598:	6023      	str	r3, [r4, #0]
 800f59a:	bd38      	pop	{r3, r4, r5, pc}
 800f59c:	240008ec 	.word	0x240008ec

0800f5a0 <_read_r>:
 800f5a0:	b538      	push	{r3, r4, r5, lr}
 800f5a2:	4d07      	ldr	r5, [pc, #28]	@ (800f5c0 <_read_r+0x20>)
 800f5a4:	4604      	mov	r4, r0
 800f5a6:	4608      	mov	r0, r1
 800f5a8:	4611      	mov	r1, r2
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	602a      	str	r2, [r5, #0]
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	f7f2 ff91 	bl	80024d6 <_read>
 800f5b4:	1c43      	adds	r3, r0, #1
 800f5b6:	d102      	bne.n	800f5be <_read_r+0x1e>
 800f5b8:	682b      	ldr	r3, [r5, #0]
 800f5ba:	b103      	cbz	r3, 800f5be <_read_r+0x1e>
 800f5bc:	6023      	str	r3, [r4, #0]
 800f5be:	bd38      	pop	{r3, r4, r5, pc}
 800f5c0:	240008ec 	.word	0x240008ec

0800f5c4 <_kill_r>:
 800f5c4:	b538      	push	{r3, r4, r5, lr}
 800f5c6:	4d07      	ldr	r5, [pc, #28]	@ (800f5e4 <_kill_r+0x20>)
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	4604      	mov	r4, r0
 800f5cc:	4608      	mov	r0, r1
 800f5ce:	4611      	mov	r1, r2
 800f5d0:	602b      	str	r3, [r5, #0]
 800f5d2:	f7f2 ff65 	bl	80024a0 <_kill>
 800f5d6:	1c43      	adds	r3, r0, #1
 800f5d8:	d102      	bne.n	800f5e0 <_kill_r+0x1c>
 800f5da:	682b      	ldr	r3, [r5, #0]
 800f5dc:	b103      	cbz	r3, 800f5e0 <_kill_r+0x1c>
 800f5de:	6023      	str	r3, [r4, #0]
 800f5e0:	bd38      	pop	{r3, r4, r5, pc}
 800f5e2:	bf00      	nop
 800f5e4:	240008ec 	.word	0x240008ec

0800f5e8 <_getpid_r>:
 800f5e8:	f7f2 bf52 	b.w	8002490 <_getpid>

0800f5ec <_sbrk_r>:
 800f5ec:	b538      	push	{r3, r4, r5, lr}
 800f5ee:	4d06      	ldr	r5, [pc, #24]	@ (800f608 <_sbrk_r+0x1c>)
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	4608      	mov	r0, r1
 800f5f6:	602b      	str	r3, [r5, #0]
 800f5f8:	f7f2 ffda 	bl	80025b0 <_sbrk>
 800f5fc:	1c43      	adds	r3, r0, #1
 800f5fe:	d102      	bne.n	800f606 <_sbrk_r+0x1a>
 800f600:	682b      	ldr	r3, [r5, #0]
 800f602:	b103      	cbz	r3, 800f606 <_sbrk_r+0x1a>
 800f604:	6023      	str	r3, [r4, #0]
 800f606:	bd38      	pop	{r3, r4, r5, pc}
 800f608:	240008ec 	.word	0x240008ec

0800f60c <_write_r>:
 800f60c:	b538      	push	{r3, r4, r5, lr}
 800f60e:	4d07      	ldr	r5, [pc, #28]	@ (800f62c <_write_r+0x20>)
 800f610:	4604      	mov	r4, r0
 800f612:	4608      	mov	r0, r1
 800f614:	4611      	mov	r1, r2
 800f616:	2200      	movs	r2, #0
 800f618:	602a      	str	r2, [r5, #0]
 800f61a:	461a      	mov	r2, r3
 800f61c:	f7f2 ff78 	bl	8002510 <_write>
 800f620:	1c43      	adds	r3, r0, #1
 800f622:	d102      	bne.n	800f62a <_write_r+0x1e>
 800f624:	682b      	ldr	r3, [r5, #0]
 800f626:	b103      	cbz	r3, 800f62a <_write_r+0x1e>
 800f628:	6023      	str	r3, [r4, #0]
 800f62a:	bd38      	pop	{r3, r4, r5, pc}
 800f62c:	240008ec 	.word	0x240008ec

0800f630 <__errno>:
 800f630:	4b01      	ldr	r3, [pc, #4]	@ (800f638 <__errno+0x8>)
 800f632:	6818      	ldr	r0, [r3, #0]
 800f634:	4770      	bx	lr
 800f636:	bf00      	nop
 800f638:	240001d4 	.word	0x240001d4

0800f63c <__libc_init_array>:
 800f63c:	b570      	push	{r4, r5, r6, lr}
 800f63e:	4d0d      	ldr	r5, [pc, #52]	@ (800f674 <__libc_init_array+0x38>)
 800f640:	4c0d      	ldr	r4, [pc, #52]	@ (800f678 <__libc_init_array+0x3c>)
 800f642:	1b64      	subs	r4, r4, r5
 800f644:	10a4      	asrs	r4, r4, #2
 800f646:	2600      	movs	r6, #0
 800f648:	42a6      	cmp	r6, r4
 800f64a:	d109      	bne.n	800f660 <__libc_init_array+0x24>
 800f64c:	4d0b      	ldr	r5, [pc, #44]	@ (800f67c <__libc_init_array+0x40>)
 800f64e:	4c0c      	ldr	r4, [pc, #48]	@ (800f680 <__libc_init_array+0x44>)
 800f650:	f000 fd54 	bl	80100fc <_init>
 800f654:	1b64      	subs	r4, r4, r5
 800f656:	10a4      	asrs	r4, r4, #2
 800f658:	2600      	movs	r6, #0
 800f65a:	42a6      	cmp	r6, r4
 800f65c:	d105      	bne.n	800f66a <__libc_init_array+0x2e>
 800f65e:	bd70      	pop	{r4, r5, r6, pc}
 800f660:	f855 3b04 	ldr.w	r3, [r5], #4
 800f664:	4798      	blx	r3
 800f666:	3601      	adds	r6, #1
 800f668:	e7ee      	b.n	800f648 <__libc_init_array+0xc>
 800f66a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f66e:	4798      	blx	r3
 800f670:	3601      	adds	r6, #1
 800f672:	e7f2      	b.n	800f65a <__libc_init_array+0x1e>
 800f674:	08011864 	.word	0x08011864
 800f678:	08011864 	.word	0x08011864
 800f67c:	08011864 	.word	0x08011864
 800f680:	08011874 	.word	0x08011874

0800f684 <__retarget_lock_init_recursive>:
 800f684:	4770      	bx	lr

0800f686 <__retarget_lock_acquire_recursive>:
 800f686:	4770      	bx	lr

0800f688 <__retarget_lock_release_recursive>:
 800f688:	4770      	bx	lr
	...

0800f68c <__register_exitproc>:
 800f68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f690:	4d27      	ldr	r5, [pc, #156]	@ (800f730 <__register_exitproc+0xa4>)
 800f692:	4607      	mov	r7, r0
 800f694:	6828      	ldr	r0, [r5, #0]
 800f696:	4691      	mov	r9, r2
 800f698:	460e      	mov	r6, r1
 800f69a:	4698      	mov	r8, r3
 800f69c:	f7ff fff3 	bl	800f686 <__retarget_lock_acquire_recursive>
 800f6a0:	4a24      	ldr	r2, [pc, #144]	@ (800f734 <__register_exitproc+0xa8>)
 800f6a2:	6814      	ldr	r4, [r2, #0]
 800f6a4:	b93c      	cbnz	r4, 800f6b6 <__register_exitproc+0x2a>
 800f6a6:	4b24      	ldr	r3, [pc, #144]	@ (800f738 <__register_exitproc+0xac>)
 800f6a8:	6013      	str	r3, [r2, #0]
 800f6aa:	4a24      	ldr	r2, [pc, #144]	@ (800f73c <__register_exitproc+0xb0>)
 800f6ac:	b112      	cbz	r2, 800f6b4 <__register_exitproc+0x28>
 800f6ae:	6812      	ldr	r2, [r2, #0]
 800f6b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800f6b4:	4c20      	ldr	r4, [pc, #128]	@ (800f738 <__register_exitproc+0xac>)
 800f6b6:	6863      	ldr	r3, [r4, #4]
 800f6b8:	2b1f      	cmp	r3, #31
 800f6ba:	dd06      	ble.n	800f6ca <__register_exitproc+0x3e>
 800f6bc:	6828      	ldr	r0, [r5, #0]
 800f6be:	f7ff ffe3 	bl	800f688 <__retarget_lock_release_recursive>
 800f6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f6c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6ca:	b32f      	cbz	r7, 800f718 <__register_exitproc+0x8c>
 800f6cc:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800f6d0:	b968      	cbnz	r0, 800f6ee <__register_exitproc+0x62>
 800f6d2:	4b1b      	ldr	r3, [pc, #108]	@ (800f740 <__register_exitproc+0xb4>)
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d0f1      	beq.n	800f6bc <__register_exitproc+0x30>
 800f6d8:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800f6dc:	f7ff fd30 	bl	800f140 <malloc>
 800f6e0:	2800      	cmp	r0, #0
 800f6e2:	d0eb      	beq.n	800f6bc <__register_exitproc+0x30>
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 800f6ea:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 800f6ee:	6863      	ldr	r3, [r4, #4]
 800f6f0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	409a      	lsls	r2, r3
 800f6f8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800f6fc:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 800f700:	4313      	orrs	r3, r2
 800f702:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 800f706:	2f02      	cmp	r7, #2
 800f708:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 800f70c:	bf02      	ittt	eq
 800f70e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 800f712:	4313      	orreq	r3, r2
 800f714:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 800f718:	6863      	ldr	r3, [r4, #4]
 800f71a:	6828      	ldr	r0, [r5, #0]
 800f71c:	1c5a      	adds	r2, r3, #1
 800f71e:	3302      	adds	r3, #2
 800f720:	6062      	str	r2, [r4, #4]
 800f722:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800f726:	f7ff ffaf 	bl	800f688 <__retarget_lock_release_recursive>
 800f72a:	2000      	movs	r0, #0
 800f72c:	e7cb      	b.n	800f6c6 <__register_exitproc+0x3a>
 800f72e:	bf00      	nop
 800f730:	24000224 	.word	0x24000224
 800f734:	24000980 	.word	0x24000980
 800f738:	240008f4 	.word	0x240008f4
 800f73c:	0801056c 	.word	0x0801056c
 800f740:	0800f141 	.word	0x0800f141

0800f744 <_free_r>:
 800f744:	b538      	push	{r3, r4, r5, lr}
 800f746:	4605      	mov	r5, r0
 800f748:	2900      	cmp	r1, #0
 800f74a:	d041      	beq.n	800f7d0 <_free_r+0x8c>
 800f74c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f750:	1f0c      	subs	r4, r1, #4
 800f752:	2b00      	cmp	r3, #0
 800f754:	bfb8      	it	lt
 800f756:	18e4      	addlt	r4, r4, r3
 800f758:	f7ff fda4 	bl	800f2a4 <__malloc_lock>
 800f75c:	4a1d      	ldr	r2, [pc, #116]	@ (800f7d4 <_free_r+0x90>)
 800f75e:	6813      	ldr	r3, [r2, #0]
 800f760:	b933      	cbnz	r3, 800f770 <_free_r+0x2c>
 800f762:	6063      	str	r3, [r4, #4]
 800f764:	6014      	str	r4, [r2, #0]
 800f766:	4628      	mov	r0, r5
 800f768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f76c:	f7ff bda0 	b.w	800f2b0 <__malloc_unlock>
 800f770:	42a3      	cmp	r3, r4
 800f772:	d908      	bls.n	800f786 <_free_r+0x42>
 800f774:	6820      	ldr	r0, [r4, #0]
 800f776:	1821      	adds	r1, r4, r0
 800f778:	428b      	cmp	r3, r1
 800f77a:	bf01      	itttt	eq
 800f77c:	6819      	ldreq	r1, [r3, #0]
 800f77e:	685b      	ldreq	r3, [r3, #4]
 800f780:	1809      	addeq	r1, r1, r0
 800f782:	6021      	streq	r1, [r4, #0]
 800f784:	e7ed      	b.n	800f762 <_free_r+0x1e>
 800f786:	461a      	mov	r2, r3
 800f788:	685b      	ldr	r3, [r3, #4]
 800f78a:	b10b      	cbz	r3, 800f790 <_free_r+0x4c>
 800f78c:	42a3      	cmp	r3, r4
 800f78e:	d9fa      	bls.n	800f786 <_free_r+0x42>
 800f790:	6811      	ldr	r1, [r2, #0]
 800f792:	1850      	adds	r0, r2, r1
 800f794:	42a0      	cmp	r0, r4
 800f796:	d10b      	bne.n	800f7b0 <_free_r+0x6c>
 800f798:	6820      	ldr	r0, [r4, #0]
 800f79a:	4401      	add	r1, r0
 800f79c:	1850      	adds	r0, r2, r1
 800f79e:	4283      	cmp	r3, r0
 800f7a0:	6011      	str	r1, [r2, #0]
 800f7a2:	d1e0      	bne.n	800f766 <_free_r+0x22>
 800f7a4:	6818      	ldr	r0, [r3, #0]
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	6053      	str	r3, [r2, #4]
 800f7aa:	4408      	add	r0, r1
 800f7ac:	6010      	str	r0, [r2, #0]
 800f7ae:	e7da      	b.n	800f766 <_free_r+0x22>
 800f7b0:	d902      	bls.n	800f7b8 <_free_r+0x74>
 800f7b2:	230c      	movs	r3, #12
 800f7b4:	602b      	str	r3, [r5, #0]
 800f7b6:	e7d6      	b.n	800f766 <_free_r+0x22>
 800f7b8:	6820      	ldr	r0, [r4, #0]
 800f7ba:	1821      	adds	r1, r4, r0
 800f7bc:	428b      	cmp	r3, r1
 800f7be:	bf04      	itt	eq
 800f7c0:	6819      	ldreq	r1, [r3, #0]
 800f7c2:	685b      	ldreq	r3, [r3, #4]
 800f7c4:	6063      	str	r3, [r4, #4]
 800f7c6:	bf04      	itt	eq
 800f7c8:	1809      	addeq	r1, r1, r0
 800f7ca:	6021      	streq	r1, [r4, #0]
 800f7cc:	6054      	str	r4, [r2, #4]
 800f7ce:	e7ca      	b.n	800f766 <_free_r+0x22>
 800f7d0:	bd38      	pop	{r3, r4, r5, pc}
 800f7d2:	bf00      	nop
 800f7d4:	240007ac 	.word	0x240007ac

0800f7d8 <__sfputc_r>:
 800f7d8:	6893      	ldr	r3, [r2, #8]
 800f7da:	3b01      	subs	r3, #1
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	b410      	push	{r4}
 800f7e0:	6093      	str	r3, [r2, #8]
 800f7e2:	da08      	bge.n	800f7f6 <__sfputc_r+0x1e>
 800f7e4:	6994      	ldr	r4, [r2, #24]
 800f7e6:	42a3      	cmp	r3, r4
 800f7e8:	db01      	blt.n	800f7ee <__sfputc_r+0x16>
 800f7ea:	290a      	cmp	r1, #10
 800f7ec:	d103      	bne.n	800f7f6 <__sfputc_r+0x1e>
 800f7ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7f2:	f000 bb6b 	b.w	800fecc <__swbuf_r>
 800f7f6:	6813      	ldr	r3, [r2, #0]
 800f7f8:	1c58      	adds	r0, r3, #1
 800f7fa:	6010      	str	r0, [r2, #0]
 800f7fc:	7019      	strb	r1, [r3, #0]
 800f7fe:	4608      	mov	r0, r1
 800f800:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f804:	4770      	bx	lr

0800f806 <__sfputs_r>:
 800f806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f808:	4606      	mov	r6, r0
 800f80a:	460f      	mov	r7, r1
 800f80c:	4614      	mov	r4, r2
 800f80e:	18d5      	adds	r5, r2, r3
 800f810:	42ac      	cmp	r4, r5
 800f812:	d101      	bne.n	800f818 <__sfputs_r+0x12>
 800f814:	2000      	movs	r0, #0
 800f816:	e007      	b.n	800f828 <__sfputs_r+0x22>
 800f818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f81c:	463a      	mov	r2, r7
 800f81e:	4630      	mov	r0, r6
 800f820:	f7ff ffda 	bl	800f7d8 <__sfputc_r>
 800f824:	1c43      	adds	r3, r0, #1
 800f826:	d1f3      	bne.n	800f810 <__sfputs_r+0xa>
 800f828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f82c <_vfiprintf_r>:
 800f82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f830:	460d      	mov	r5, r1
 800f832:	b09d      	sub	sp, #116	@ 0x74
 800f834:	4614      	mov	r4, r2
 800f836:	4698      	mov	r8, r3
 800f838:	4606      	mov	r6, r0
 800f83a:	b118      	cbz	r0, 800f844 <_vfiprintf_r+0x18>
 800f83c:	6a03      	ldr	r3, [r0, #32]
 800f83e:	b90b      	cbnz	r3, 800f844 <_vfiprintf_r+0x18>
 800f840:	f7ff fdc8 	bl	800f3d4 <__sinit>
 800f844:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f846:	07d9      	lsls	r1, r3, #31
 800f848:	d405      	bmi.n	800f856 <_vfiprintf_r+0x2a>
 800f84a:	89ab      	ldrh	r3, [r5, #12]
 800f84c:	059a      	lsls	r2, r3, #22
 800f84e:	d402      	bmi.n	800f856 <_vfiprintf_r+0x2a>
 800f850:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f852:	f7ff ff18 	bl	800f686 <__retarget_lock_acquire_recursive>
 800f856:	89ab      	ldrh	r3, [r5, #12]
 800f858:	071b      	lsls	r3, r3, #28
 800f85a:	d501      	bpl.n	800f860 <_vfiprintf_r+0x34>
 800f85c:	692b      	ldr	r3, [r5, #16]
 800f85e:	b99b      	cbnz	r3, 800f888 <_vfiprintf_r+0x5c>
 800f860:	4629      	mov	r1, r5
 800f862:	4630      	mov	r0, r6
 800f864:	f000 fb70 	bl	800ff48 <__swsetup_r>
 800f868:	b170      	cbz	r0, 800f888 <_vfiprintf_r+0x5c>
 800f86a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f86c:	07dc      	lsls	r4, r3, #31
 800f86e:	d504      	bpl.n	800f87a <_vfiprintf_r+0x4e>
 800f870:	f04f 30ff 	mov.w	r0, #4294967295
 800f874:	b01d      	add	sp, #116	@ 0x74
 800f876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f87a:	89ab      	ldrh	r3, [r5, #12]
 800f87c:	0598      	lsls	r0, r3, #22
 800f87e:	d4f7      	bmi.n	800f870 <_vfiprintf_r+0x44>
 800f880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f882:	f7ff ff01 	bl	800f688 <__retarget_lock_release_recursive>
 800f886:	e7f3      	b.n	800f870 <_vfiprintf_r+0x44>
 800f888:	2300      	movs	r3, #0
 800f88a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f88c:	2320      	movs	r3, #32
 800f88e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f892:	f8cd 800c 	str.w	r8, [sp, #12]
 800f896:	2330      	movs	r3, #48	@ 0x30
 800f898:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fa48 <_vfiprintf_r+0x21c>
 800f89c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f8a0:	f04f 0901 	mov.w	r9, #1
 800f8a4:	4623      	mov	r3, r4
 800f8a6:	469a      	mov	sl, r3
 800f8a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8ac:	b10a      	cbz	r2, 800f8b2 <_vfiprintf_r+0x86>
 800f8ae:	2a25      	cmp	r2, #37	@ 0x25
 800f8b0:	d1f9      	bne.n	800f8a6 <_vfiprintf_r+0x7a>
 800f8b2:	ebba 0b04 	subs.w	fp, sl, r4
 800f8b6:	d00b      	beq.n	800f8d0 <_vfiprintf_r+0xa4>
 800f8b8:	465b      	mov	r3, fp
 800f8ba:	4622      	mov	r2, r4
 800f8bc:	4629      	mov	r1, r5
 800f8be:	4630      	mov	r0, r6
 800f8c0:	f7ff ffa1 	bl	800f806 <__sfputs_r>
 800f8c4:	3001      	adds	r0, #1
 800f8c6:	f000 80a7 	beq.w	800fa18 <_vfiprintf_r+0x1ec>
 800f8ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8cc:	445a      	add	r2, fp
 800f8ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800f8d0:	f89a 3000 	ldrb.w	r3, [sl]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	f000 809f 	beq.w	800fa18 <_vfiprintf_r+0x1ec>
 800f8da:	2300      	movs	r3, #0
 800f8dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f8e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8e4:	f10a 0a01 	add.w	sl, sl, #1
 800f8e8:	9304      	str	r3, [sp, #16]
 800f8ea:	9307      	str	r3, [sp, #28]
 800f8ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f8f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800f8f2:	4654      	mov	r4, sl
 800f8f4:	2205      	movs	r2, #5
 800f8f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8fa:	4853      	ldr	r0, [pc, #332]	@ (800fa48 <_vfiprintf_r+0x21c>)
 800f8fc:	f7f0 fd08 	bl	8000310 <memchr>
 800f900:	9a04      	ldr	r2, [sp, #16]
 800f902:	b9d8      	cbnz	r0, 800f93c <_vfiprintf_r+0x110>
 800f904:	06d1      	lsls	r1, r2, #27
 800f906:	bf44      	itt	mi
 800f908:	2320      	movmi	r3, #32
 800f90a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f90e:	0713      	lsls	r3, r2, #28
 800f910:	bf44      	itt	mi
 800f912:	232b      	movmi	r3, #43	@ 0x2b
 800f914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f918:	f89a 3000 	ldrb.w	r3, [sl]
 800f91c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f91e:	d015      	beq.n	800f94c <_vfiprintf_r+0x120>
 800f920:	9a07      	ldr	r2, [sp, #28]
 800f922:	4654      	mov	r4, sl
 800f924:	2000      	movs	r0, #0
 800f926:	f04f 0c0a 	mov.w	ip, #10
 800f92a:	4621      	mov	r1, r4
 800f92c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f930:	3b30      	subs	r3, #48	@ 0x30
 800f932:	2b09      	cmp	r3, #9
 800f934:	d94b      	bls.n	800f9ce <_vfiprintf_r+0x1a2>
 800f936:	b1b0      	cbz	r0, 800f966 <_vfiprintf_r+0x13a>
 800f938:	9207      	str	r2, [sp, #28]
 800f93a:	e014      	b.n	800f966 <_vfiprintf_r+0x13a>
 800f93c:	eba0 0308 	sub.w	r3, r0, r8
 800f940:	fa09 f303 	lsl.w	r3, r9, r3
 800f944:	4313      	orrs	r3, r2
 800f946:	9304      	str	r3, [sp, #16]
 800f948:	46a2      	mov	sl, r4
 800f94a:	e7d2      	b.n	800f8f2 <_vfiprintf_r+0xc6>
 800f94c:	9b03      	ldr	r3, [sp, #12]
 800f94e:	1d19      	adds	r1, r3, #4
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	9103      	str	r1, [sp, #12]
 800f954:	2b00      	cmp	r3, #0
 800f956:	bfbb      	ittet	lt
 800f958:	425b      	neglt	r3, r3
 800f95a:	f042 0202 	orrlt.w	r2, r2, #2
 800f95e:	9307      	strge	r3, [sp, #28]
 800f960:	9307      	strlt	r3, [sp, #28]
 800f962:	bfb8      	it	lt
 800f964:	9204      	strlt	r2, [sp, #16]
 800f966:	7823      	ldrb	r3, [r4, #0]
 800f968:	2b2e      	cmp	r3, #46	@ 0x2e
 800f96a:	d10a      	bne.n	800f982 <_vfiprintf_r+0x156>
 800f96c:	7863      	ldrb	r3, [r4, #1]
 800f96e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f970:	d132      	bne.n	800f9d8 <_vfiprintf_r+0x1ac>
 800f972:	9b03      	ldr	r3, [sp, #12]
 800f974:	1d1a      	adds	r2, r3, #4
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	9203      	str	r2, [sp, #12]
 800f97a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f97e:	3402      	adds	r4, #2
 800f980:	9305      	str	r3, [sp, #20]
 800f982:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fa58 <_vfiprintf_r+0x22c>
 800f986:	7821      	ldrb	r1, [r4, #0]
 800f988:	2203      	movs	r2, #3
 800f98a:	4650      	mov	r0, sl
 800f98c:	f7f0 fcc0 	bl	8000310 <memchr>
 800f990:	b138      	cbz	r0, 800f9a2 <_vfiprintf_r+0x176>
 800f992:	9b04      	ldr	r3, [sp, #16]
 800f994:	eba0 000a 	sub.w	r0, r0, sl
 800f998:	2240      	movs	r2, #64	@ 0x40
 800f99a:	4082      	lsls	r2, r0
 800f99c:	4313      	orrs	r3, r2
 800f99e:	3401      	adds	r4, #1
 800f9a0:	9304      	str	r3, [sp, #16]
 800f9a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9a6:	4829      	ldr	r0, [pc, #164]	@ (800fa4c <_vfiprintf_r+0x220>)
 800f9a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f9ac:	2206      	movs	r2, #6
 800f9ae:	f7f0 fcaf 	bl	8000310 <memchr>
 800f9b2:	2800      	cmp	r0, #0
 800f9b4:	d03f      	beq.n	800fa36 <_vfiprintf_r+0x20a>
 800f9b6:	4b26      	ldr	r3, [pc, #152]	@ (800fa50 <_vfiprintf_r+0x224>)
 800f9b8:	bb1b      	cbnz	r3, 800fa02 <_vfiprintf_r+0x1d6>
 800f9ba:	9b03      	ldr	r3, [sp, #12]
 800f9bc:	3307      	adds	r3, #7
 800f9be:	f023 0307 	bic.w	r3, r3, #7
 800f9c2:	3308      	adds	r3, #8
 800f9c4:	9303      	str	r3, [sp, #12]
 800f9c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9c8:	443b      	add	r3, r7
 800f9ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9cc:	e76a      	b.n	800f8a4 <_vfiprintf_r+0x78>
 800f9ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9d2:	460c      	mov	r4, r1
 800f9d4:	2001      	movs	r0, #1
 800f9d6:	e7a8      	b.n	800f92a <_vfiprintf_r+0xfe>
 800f9d8:	2300      	movs	r3, #0
 800f9da:	3401      	adds	r4, #1
 800f9dc:	9305      	str	r3, [sp, #20]
 800f9de:	4619      	mov	r1, r3
 800f9e0:	f04f 0c0a 	mov.w	ip, #10
 800f9e4:	4620      	mov	r0, r4
 800f9e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9ea:	3a30      	subs	r2, #48	@ 0x30
 800f9ec:	2a09      	cmp	r2, #9
 800f9ee:	d903      	bls.n	800f9f8 <_vfiprintf_r+0x1cc>
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d0c6      	beq.n	800f982 <_vfiprintf_r+0x156>
 800f9f4:	9105      	str	r1, [sp, #20]
 800f9f6:	e7c4      	b.n	800f982 <_vfiprintf_r+0x156>
 800f9f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9fc:	4604      	mov	r4, r0
 800f9fe:	2301      	movs	r3, #1
 800fa00:	e7f0      	b.n	800f9e4 <_vfiprintf_r+0x1b8>
 800fa02:	ab03      	add	r3, sp, #12
 800fa04:	9300      	str	r3, [sp, #0]
 800fa06:	462a      	mov	r2, r5
 800fa08:	4b12      	ldr	r3, [pc, #72]	@ (800fa54 <_vfiprintf_r+0x228>)
 800fa0a:	a904      	add	r1, sp, #16
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	f3af 8000 	nop.w
 800fa12:	4607      	mov	r7, r0
 800fa14:	1c78      	adds	r0, r7, #1
 800fa16:	d1d6      	bne.n	800f9c6 <_vfiprintf_r+0x19a>
 800fa18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa1a:	07d9      	lsls	r1, r3, #31
 800fa1c:	d405      	bmi.n	800fa2a <_vfiprintf_r+0x1fe>
 800fa1e:	89ab      	ldrh	r3, [r5, #12]
 800fa20:	059a      	lsls	r2, r3, #22
 800fa22:	d402      	bmi.n	800fa2a <_vfiprintf_r+0x1fe>
 800fa24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa26:	f7ff fe2f 	bl	800f688 <__retarget_lock_release_recursive>
 800fa2a:	89ab      	ldrh	r3, [r5, #12]
 800fa2c:	065b      	lsls	r3, r3, #25
 800fa2e:	f53f af1f 	bmi.w	800f870 <_vfiprintf_r+0x44>
 800fa32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa34:	e71e      	b.n	800f874 <_vfiprintf_r+0x48>
 800fa36:	ab03      	add	r3, sp, #12
 800fa38:	9300      	str	r3, [sp, #0]
 800fa3a:	462a      	mov	r2, r5
 800fa3c:	4b05      	ldr	r3, [pc, #20]	@ (800fa54 <_vfiprintf_r+0x228>)
 800fa3e:	a904      	add	r1, sp, #16
 800fa40:	4630      	mov	r0, r6
 800fa42:	f000 f879 	bl	800fb38 <_printf_i>
 800fa46:	e7e4      	b.n	800fa12 <_vfiprintf_r+0x1e6>
 800fa48:	08010538 	.word	0x08010538
 800fa4c:	08010542 	.word	0x08010542
 800fa50:	00000000 	.word	0x00000000
 800fa54:	0800f807 	.word	0x0800f807
 800fa58:	0801053e 	.word	0x0801053e

0800fa5c <_printf_common>:
 800fa5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa60:	4616      	mov	r6, r2
 800fa62:	4698      	mov	r8, r3
 800fa64:	688a      	ldr	r2, [r1, #8]
 800fa66:	690b      	ldr	r3, [r1, #16]
 800fa68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	bfb8      	it	lt
 800fa70:	4613      	movlt	r3, r2
 800fa72:	6033      	str	r3, [r6, #0]
 800fa74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fa78:	4607      	mov	r7, r0
 800fa7a:	460c      	mov	r4, r1
 800fa7c:	b10a      	cbz	r2, 800fa82 <_printf_common+0x26>
 800fa7e:	3301      	adds	r3, #1
 800fa80:	6033      	str	r3, [r6, #0]
 800fa82:	6823      	ldr	r3, [r4, #0]
 800fa84:	0699      	lsls	r1, r3, #26
 800fa86:	bf42      	ittt	mi
 800fa88:	6833      	ldrmi	r3, [r6, #0]
 800fa8a:	3302      	addmi	r3, #2
 800fa8c:	6033      	strmi	r3, [r6, #0]
 800fa8e:	6825      	ldr	r5, [r4, #0]
 800fa90:	f015 0506 	ands.w	r5, r5, #6
 800fa94:	d106      	bne.n	800faa4 <_printf_common+0x48>
 800fa96:	f104 0a19 	add.w	sl, r4, #25
 800fa9a:	68e3      	ldr	r3, [r4, #12]
 800fa9c:	6832      	ldr	r2, [r6, #0]
 800fa9e:	1a9b      	subs	r3, r3, r2
 800faa0:	42ab      	cmp	r3, r5
 800faa2:	dc26      	bgt.n	800faf2 <_printf_common+0x96>
 800faa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800faa8:	6822      	ldr	r2, [r4, #0]
 800faaa:	3b00      	subs	r3, #0
 800faac:	bf18      	it	ne
 800faae:	2301      	movne	r3, #1
 800fab0:	0692      	lsls	r2, r2, #26
 800fab2:	d42b      	bmi.n	800fb0c <_printf_common+0xb0>
 800fab4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fab8:	4641      	mov	r1, r8
 800faba:	4638      	mov	r0, r7
 800fabc:	47c8      	blx	r9
 800fabe:	3001      	adds	r0, #1
 800fac0:	d01e      	beq.n	800fb00 <_printf_common+0xa4>
 800fac2:	6823      	ldr	r3, [r4, #0]
 800fac4:	6922      	ldr	r2, [r4, #16]
 800fac6:	f003 0306 	and.w	r3, r3, #6
 800faca:	2b04      	cmp	r3, #4
 800facc:	bf02      	ittt	eq
 800face:	68e5      	ldreq	r5, [r4, #12]
 800fad0:	6833      	ldreq	r3, [r6, #0]
 800fad2:	1aed      	subeq	r5, r5, r3
 800fad4:	68a3      	ldr	r3, [r4, #8]
 800fad6:	bf0c      	ite	eq
 800fad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fadc:	2500      	movne	r5, #0
 800fade:	4293      	cmp	r3, r2
 800fae0:	bfc4      	itt	gt
 800fae2:	1a9b      	subgt	r3, r3, r2
 800fae4:	18ed      	addgt	r5, r5, r3
 800fae6:	2600      	movs	r6, #0
 800fae8:	341a      	adds	r4, #26
 800faea:	42b5      	cmp	r5, r6
 800faec:	d11a      	bne.n	800fb24 <_printf_common+0xc8>
 800faee:	2000      	movs	r0, #0
 800faf0:	e008      	b.n	800fb04 <_printf_common+0xa8>
 800faf2:	2301      	movs	r3, #1
 800faf4:	4652      	mov	r2, sl
 800faf6:	4641      	mov	r1, r8
 800faf8:	4638      	mov	r0, r7
 800fafa:	47c8      	blx	r9
 800fafc:	3001      	adds	r0, #1
 800fafe:	d103      	bne.n	800fb08 <_printf_common+0xac>
 800fb00:	f04f 30ff 	mov.w	r0, #4294967295
 800fb04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb08:	3501      	adds	r5, #1
 800fb0a:	e7c6      	b.n	800fa9a <_printf_common+0x3e>
 800fb0c:	18e1      	adds	r1, r4, r3
 800fb0e:	1c5a      	adds	r2, r3, #1
 800fb10:	2030      	movs	r0, #48	@ 0x30
 800fb12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fb16:	4422      	add	r2, r4
 800fb18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fb1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fb20:	3302      	adds	r3, #2
 800fb22:	e7c7      	b.n	800fab4 <_printf_common+0x58>
 800fb24:	2301      	movs	r3, #1
 800fb26:	4622      	mov	r2, r4
 800fb28:	4641      	mov	r1, r8
 800fb2a:	4638      	mov	r0, r7
 800fb2c:	47c8      	blx	r9
 800fb2e:	3001      	adds	r0, #1
 800fb30:	d0e6      	beq.n	800fb00 <_printf_common+0xa4>
 800fb32:	3601      	adds	r6, #1
 800fb34:	e7d9      	b.n	800faea <_printf_common+0x8e>
	...

0800fb38 <_printf_i>:
 800fb38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb3c:	7e0f      	ldrb	r7, [r1, #24]
 800fb3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fb40:	2f78      	cmp	r7, #120	@ 0x78
 800fb42:	4691      	mov	r9, r2
 800fb44:	4680      	mov	r8, r0
 800fb46:	460c      	mov	r4, r1
 800fb48:	469a      	mov	sl, r3
 800fb4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fb4e:	d807      	bhi.n	800fb60 <_printf_i+0x28>
 800fb50:	2f62      	cmp	r7, #98	@ 0x62
 800fb52:	d80a      	bhi.n	800fb6a <_printf_i+0x32>
 800fb54:	2f00      	cmp	r7, #0
 800fb56:	f000 80d1 	beq.w	800fcfc <_printf_i+0x1c4>
 800fb5a:	2f58      	cmp	r7, #88	@ 0x58
 800fb5c:	f000 80b8 	beq.w	800fcd0 <_printf_i+0x198>
 800fb60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fb68:	e03a      	b.n	800fbe0 <_printf_i+0xa8>
 800fb6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fb6e:	2b15      	cmp	r3, #21
 800fb70:	d8f6      	bhi.n	800fb60 <_printf_i+0x28>
 800fb72:	a101      	add	r1, pc, #4	@ (adr r1, 800fb78 <_printf_i+0x40>)
 800fb74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb78:	0800fbd1 	.word	0x0800fbd1
 800fb7c:	0800fbe5 	.word	0x0800fbe5
 800fb80:	0800fb61 	.word	0x0800fb61
 800fb84:	0800fb61 	.word	0x0800fb61
 800fb88:	0800fb61 	.word	0x0800fb61
 800fb8c:	0800fb61 	.word	0x0800fb61
 800fb90:	0800fbe5 	.word	0x0800fbe5
 800fb94:	0800fb61 	.word	0x0800fb61
 800fb98:	0800fb61 	.word	0x0800fb61
 800fb9c:	0800fb61 	.word	0x0800fb61
 800fba0:	0800fb61 	.word	0x0800fb61
 800fba4:	0800fce3 	.word	0x0800fce3
 800fba8:	0800fc0f 	.word	0x0800fc0f
 800fbac:	0800fc9d 	.word	0x0800fc9d
 800fbb0:	0800fb61 	.word	0x0800fb61
 800fbb4:	0800fb61 	.word	0x0800fb61
 800fbb8:	0800fd05 	.word	0x0800fd05
 800fbbc:	0800fb61 	.word	0x0800fb61
 800fbc0:	0800fc0f 	.word	0x0800fc0f
 800fbc4:	0800fb61 	.word	0x0800fb61
 800fbc8:	0800fb61 	.word	0x0800fb61
 800fbcc:	0800fca5 	.word	0x0800fca5
 800fbd0:	6833      	ldr	r3, [r6, #0]
 800fbd2:	1d1a      	adds	r2, r3, #4
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	6032      	str	r2, [r6, #0]
 800fbd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fbdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	e09c      	b.n	800fd1e <_printf_i+0x1e6>
 800fbe4:	6833      	ldr	r3, [r6, #0]
 800fbe6:	6820      	ldr	r0, [r4, #0]
 800fbe8:	1d19      	adds	r1, r3, #4
 800fbea:	6031      	str	r1, [r6, #0]
 800fbec:	0606      	lsls	r6, r0, #24
 800fbee:	d501      	bpl.n	800fbf4 <_printf_i+0xbc>
 800fbf0:	681d      	ldr	r5, [r3, #0]
 800fbf2:	e003      	b.n	800fbfc <_printf_i+0xc4>
 800fbf4:	0645      	lsls	r5, r0, #25
 800fbf6:	d5fb      	bpl.n	800fbf0 <_printf_i+0xb8>
 800fbf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fbfc:	2d00      	cmp	r5, #0
 800fbfe:	da03      	bge.n	800fc08 <_printf_i+0xd0>
 800fc00:	232d      	movs	r3, #45	@ 0x2d
 800fc02:	426d      	negs	r5, r5
 800fc04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc08:	4858      	ldr	r0, [pc, #352]	@ (800fd6c <_printf_i+0x234>)
 800fc0a:	230a      	movs	r3, #10
 800fc0c:	e011      	b.n	800fc32 <_printf_i+0xfa>
 800fc0e:	6821      	ldr	r1, [r4, #0]
 800fc10:	6833      	ldr	r3, [r6, #0]
 800fc12:	0608      	lsls	r0, r1, #24
 800fc14:	f853 5b04 	ldr.w	r5, [r3], #4
 800fc18:	d402      	bmi.n	800fc20 <_printf_i+0xe8>
 800fc1a:	0649      	lsls	r1, r1, #25
 800fc1c:	bf48      	it	mi
 800fc1e:	b2ad      	uxthmi	r5, r5
 800fc20:	2f6f      	cmp	r7, #111	@ 0x6f
 800fc22:	4852      	ldr	r0, [pc, #328]	@ (800fd6c <_printf_i+0x234>)
 800fc24:	6033      	str	r3, [r6, #0]
 800fc26:	bf14      	ite	ne
 800fc28:	230a      	movne	r3, #10
 800fc2a:	2308      	moveq	r3, #8
 800fc2c:	2100      	movs	r1, #0
 800fc2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fc32:	6866      	ldr	r6, [r4, #4]
 800fc34:	60a6      	str	r6, [r4, #8]
 800fc36:	2e00      	cmp	r6, #0
 800fc38:	db05      	blt.n	800fc46 <_printf_i+0x10e>
 800fc3a:	6821      	ldr	r1, [r4, #0]
 800fc3c:	432e      	orrs	r6, r5
 800fc3e:	f021 0104 	bic.w	r1, r1, #4
 800fc42:	6021      	str	r1, [r4, #0]
 800fc44:	d04b      	beq.n	800fcde <_printf_i+0x1a6>
 800fc46:	4616      	mov	r6, r2
 800fc48:	fbb5 f1f3 	udiv	r1, r5, r3
 800fc4c:	fb03 5711 	mls	r7, r3, r1, r5
 800fc50:	5dc7      	ldrb	r7, [r0, r7]
 800fc52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fc56:	462f      	mov	r7, r5
 800fc58:	42bb      	cmp	r3, r7
 800fc5a:	460d      	mov	r5, r1
 800fc5c:	d9f4      	bls.n	800fc48 <_printf_i+0x110>
 800fc5e:	2b08      	cmp	r3, #8
 800fc60:	d10b      	bne.n	800fc7a <_printf_i+0x142>
 800fc62:	6823      	ldr	r3, [r4, #0]
 800fc64:	07df      	lsls	r7, r3, #31
 800fc66:	d508      	bpl.n	800fc7a <_printf_i+0x142>
 800fc68:	6923      	ldr	r3, [r4, #16]
 800fc6a:	6861      	ldr	r1, [r4, #4]
 800fc6c:	4299      	cmp	r1, r3
 800fc6e:	bfde      	ittt	le
 800fc70:	2330      	movle	r3, #48	@ 0x30
 800fc72:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fc76:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fc7a:	1b92      	subs	r2, r2, r6
 800fc7c:	6122      	str	r2, [r4, #16]
 800fc7e:	f8cd a000 	str.w	sl, [sp]
 800fc82:	464b      	mov	r3, r9
 800fc84:	aa03      	add	r2, sp, #12
 800fc86:	4621      	mov	r1, r4
 800fc88:	4640      	mov	r0, r8
 800fc8a:	f7ff fee7 	bl	800fa5c <_printf_common>
 800fc8e:	3001      	adds	r0, #1
 800fc90:	d14a      	bne.n	800fd28 <_printf_i+0x1f0>
 800fc92:	f04f 30ff 	mov.w	r0, #4294967295
 800fc96:	b004      	add	sp, #16
 800fc98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc9c:	6823      	ldr	r3, [r4, #0]
 800fc9e:	f043 0320 	orr.w	r3, r3, #32
 800fca2:	6023      	str	r3, [r4, #0]
 800fca4:	4832      	ldr	r0, [pc, #200]	@ (800fd70 <_printf_i+0x238>)
 800fca6:	2778      	movs	r7, #120	@ 0x78
 800fca8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fcac:	6823      	ldr	r3, [r4, #0]
 800fcae:	6831      	ldr	r1, [r6, #0]
 800fcb0:	061f      	lsls	r7, r3, #24
 800fcb2:	f851 5b04 	ldr.w	r5, [r1], #4
 800fcb6:	d402      	bmi.n	800fcbe <_printf_i+0x186>
 800fcb8:	065f      	lsls	r7, r3, #25
 800fcba:	bf48      	it	mi
 800fcbc:	b2ad      	uxthmi	r5, r5
 800fcbe:	6031      	str	r1, [r6, #0]
 800fcc0:	07d9      	lsls	r1, r3, #31
 800fcc2:	bf44      	itt	mi
 800fcc4:	f043 0320 	orrmi.w	r3, r3, #32
 800fcc8:	6023      	strmi	r3, [r4, #0]
 800fcca:	b11d      	cbz	r5, 800fcd4 <_printf_i+0x19c>
 800fccc:	2310      	movs	r3, #16
 800fcce:	e7ad      	b.n	800fc2c <_printf_i+0xf4>
 800fcd0:	4826      	ldr	r0, [pc, #152]	@ (800fd6c <_printf_i+0x234>)
 800fcd2:	e7e9      	b.n	800fca8 <_printf_i+0x170>
 800fcd4:	6823      	ldr	r3, [r4, #0]
 800fcd6:	f023 0320 	bic.w	r3, r3, #32
 800fcda:	6023      	str	r3, [r4, #0]
 800fcdc:	e7f6      	b.n	800fccc <_printf_i+0x194>
 800fcde:	4616      	mov	r6, r2
 800fce0:	e7bd      	b.n	800fc5e <_printf_i+0x126>
 800fce2:	6833      	ldr	r3, [r6, #0]
 800fce4:	6825      	ldr	r5, [r4, #0]
 800fce6:	6961      	ldr	r1, [r4, #20]
 800fce8:	1d18      	adds	r0, r3, #4
 800fcea:	6030      	str	r0, [r6, #0]
 800fcec:	062e      	lsls	r6, r5, #24
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	d501      	bpl.n	800fcf6 <_printf_i+0x1be>
 800fcf2:	6019      	str	r1, [r3, #0]
 800fcf4:	e002      	b.n	800fcfc <_printf_i+0x1c4>
 800fcf6:	0668      	lsls	r0, r5, #25
 800fcf8:	d5fb      	bpl.n	800fcf2 <_printf_i+0x1ba>
 800fcfa:	8019      	strh	r1, [r3, #0]
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	6123      	str	r3, [r4, #16]
 800fd00:	4616      	mov	r6, r2
 800fd02:	e7bc      	b.n	800fc7e <_printf_i+0x146>
 800fd04:	6833      	ldr	r3, [r6, #0]
 800fd06:	1d1a      	adds	r2, r3, #4
 800fd08:	6032      	str	r2, [r6, #0]
 800fd0a:	681e      	ldr	r6, [r3, #0]
 800fd0c:	6862      	ldr	r2, [r4, #4]
 800fd0e:	2100      	movs	r1, #0
 800fd10:	4630      	mov	r0, r6
 800fd12:	f7f0 fafd 	bl	8000310 <memchr>
 800fd16:	b108      	cbz	r0, 800fd1c <_printf_i+0x1e4>
 800fd18:	1b80      	subs	r0, r0, r6
 800fd1a:	6060      	str	r0, [r4, #4]
 800fd1c:	6863      	ldr	r3, [r4, #4]
 800fd1e:	6123      	str	r3, [r4, #16]
 800fd20:	2300      	movs	r3, #0
 800fd22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd26:	e7aa      	b.n	800fc7e <_printf_i+0x146>
 800fd28:	6923      	ldr	r3, [r4, #16]
 800fd2a:	4632      	mov	r2, r6
 800fd2c:	4649      	mov	r1, r9
 800fd2e:	4640      	mov	r0, r8
 800fd30:	47d0      	blx	sl
 800fd32:	3001      	adds	r0, #1
 800fd34:	d0ad      	beq.n	800fc92 <_printf_i+0x15a>
 800fd36:	6823      	ldr	r3, [r4, #0]
 800fd38:	079b      	lsls	r3, r3, #30
 800fd3a:	d413      	bmi.n	800fd64 <_printf_i+0x22c>
 800fd3c:	68e0      	ldr	r0, [r4, #12]
 800fd3e:	9b03      	ldr	r3, [sp, #12]
 800fd40:	4298      	cmp	r0, r3
 800fd42:	bfb8      	it	lt
 800fd44:	4618      	movlt	r0, r3
 800fd46:	e7a6      	b.n	800fc96 <_printf_i+0x15e>
 800fd48:	2301      	movs	r3, #1
 800fd4a:	4632      	mov	r2, r6
 800fd4c:	4649      	mov	r1, r9
 800fd4e:	4640      	mov	r0, r8
 800fd50:	47d0      	blx	sl
 800fd52:	3001      	adds	r0, #1
 800fd54:	d09d      	beq.n	800fc92 <_printf_i+0x15a>
 800fd56:	3501      	adds	r5, #1
 800fd58:	68e3      	ldr	r3, [r4, #12]
 800fd5a:	9903      	ldr	r1, [sp, #12]
 800fd5c:	1a5b      	subs	r3, r3, r1
 800fd5e:	42ab      	cmp	r3, r5
 800fd60:	dcf2      	bgt.n	800fd48 <_printf_i+0x210>
 800fd62:	e7eb      	b.n	800fd3c <_printf_i+0x204>
 800fd64:	2500      	movs	r5, #0
 800fd66:	f104 0619 	add.w	r6, r4, #25
 800fd6a:	e7f5      	b.n	800fd58 <_printf_i+0x220>
 800fd6c:	08010549 	.word	0x08010549
 800fd70:	0801055a 	.word	0x0801055a

0800fd74 <__sflush_r>:
 800fd74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd7c:	0716      	lsls	r6, r2, #28
 800fd7e:	4605      	mov	r5, r0
 800fd80:	460c      	mov	r4, r1
 800fd82:	d454      	bmi.n	800fe2e <__sflush_r+0xba>
 800fd84:	684b      	ldr	r3, [r1, #4]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	dc02      	bgt.n	800fd90 <__sflush_r+0x1c>
 800fd8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	dd48      	ble.n	800fe22 <__sflush_r+0xae>
 800fd90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fd92:	2e00      	cmp	r6, #0
 800fd94:	d045      	beq.n	800fe22 <__sflush_r+0xae>
 800fd96:	2300      	movs	r3, #0
 800fd98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fd9c:	682f      	ldr	r7, [r5, #0]
 800fd9e:	6a21      	ldr	r1, [r4, #32]
 800fda0:	602b      	str	r3, [r5, #0]
 800fda2:	d030      	beq.n	800fe06 <__sflush_r+0x92>
 800fda4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fda6:	89a3      	ldrh	r3, [r4, #12]
 800fda8:	0759      	lsls	r1, r3, #29
 800fdaa:	d505      	bpl.n	800fdb8 <__sflush_r+0x44>
 800fdac:	6863      	ldr	r3, [r4, #4]
 800fdae:	1ad2      	subs	r2, r2, r3
 800fdb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fdb2:	b10b      	cbz	r3, 800fdb8 <__sflush_r+0x44>
 800fdb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fdb6:	1ad2      	subs	r2, r2, r3
 800fdb8:	2300      	movs	r3, #0
 800fdba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fdbc:	6a21      	ldr	r1, [r4, #32]
 800fdbe:	4628      	mov	r0, r5
 800fdc0:	47b0      	blx	r6
 800fdc2:	1c43      	adds	r3, r0, #1
 800fdc4:	89a3      	ldrh	r3, [r4, #12]
 800fdc6:	d106      	bne.n	800fdd6 <__sflush_r+0x62>
 800fdc8:	6829      	ldr	r1, [r5, #0]
 800fdca:	291d      	cmp	r1, #29
 800fdcc:	d82b      	bhi.n	800fe26 <__sflush_r+0xb2>
 800fdce:	4a2a      	ldr	r2, [pc, #168]	@ (800fe78 <__sflush_r+0x104>)
 800fdd0:	40ca      	lsrs	r2, r1
 800fdd2:	07d6      	lsls	r6, r2, #31
 800fdd4:	d527      	bpl.n	800fe26 <__sflush_r+0xb2>
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	6062      	str	r2, [r4, #4]
 800fdda:	04d9      	lsls	r1, r3, #19
 800fddc:	6922      	ldr	r2, [r4, #16]
 800fdde:	6022      	str	r2, [r4, #0]
 800fde0:	d504      	bpl.n	800fdec <__sflush_r+0x78>
 800fde2:	1c42      	adds	r2, r0, #1
 800fde4:	d101      	bne.n	800fdea <__sflush_r+0x76>
 800fde6:	682b      	ldr	r3, [r5, #0]
 800fde8:	b903      	cbnz	r3, 800fdec <__sflush_r+0x78>
 800fdea:	6560      	str	r0, [r4, #84]	@ 0x54
 800fdec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fdee:	602f      	str	r7, [r5, #0]
 800fdf0:	b1b9      	cbz	r1, 800fe22 <__sflush_r+0xae>
 800fdf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fdf6:	4299      	cmp	r1, r3
 800fdf8:	d002      	beq.n	800fe00 <__sflush_r+0x8c>
 800fdfa:	4628      	mov	r0, r5
 800fdfc:	f7ff fca2 	bl	800f744 <_free_r>
 800fe00:	2300      	movs	r3, #0
 800fe02:	6363      	str	r3, [r4, #52]	@ 0x34
 800fe04:	e00d      	b.n	800fe22 <__sflush_r+0xae>
 800fe06:	2301      	movs	r3, #1
 800fe08:	4628      	mov	r0, r5
 800fe0a:	47b0      	blx	r6
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	1c50      	adds	r0, r2, #1
 800fe10:	d1c9      	bne.n	800fda6 <__sflush_r+0x32>
 800fe12:	682b      	ldr	r3, [r5, #0]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d0c6      	beq.n	800fda6 <__sflush_r+0x32>
 800fe18:	2b1d      	cmp	r3, #29
 800fe1a:	d001      	beq.n	800fe20 <__sflush_r+0xac>
 800fe1c:	2b16      	cmp	r3, #22
 800fe1e:	d11e      	bne.n	800fe5e <__sflush_r+0xea>
 800fe20:	602f      	str	r7, [r5, #0]
 800fe22:	2000      	movs	r0, #0
 800fe24:	e022      	b.n	800fe6c <__sflush_r+0xf8>
 800fe26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe2a:	b21b      	sxth	r3, r3
 800fe2c:	e01b      	b.n	800fe66 <__sflush_r+0xf2>
 800fe2e:	690f      	ldr	r7, [r1, #16]
 800fe30:	2f00      	cmp	r7, #0
 800fe32:	d0f6      	beq.n	800fe22 <__sflush_r+0xae>
 800fe34:	0793      	lsls	r3, r2, #30
 800fe36:	680e      	ldr	r6, [r1, #0]
 800fe38:	bf08      	it	eq
 800fe3a:	694b      	ldreq	r3, [r1, #20]
 800fe3c:	600f      	str	r7, [r1, #0]
 800fe3e:	bf18      	it	ne
 800fe40:	2300      	movne	r3, #0
 800fe42:	eba6 0807 	sub.w	r8, r6, r7
 800fe46:	608b      	str	r3, [r1, #8]
 800fe48:	f1b8 0f00 	cmp.w	r8, #0
 800fe4c:	dde9      	ble.n	800fe22 <__sflush_r+0xae>
 800fe4e:	6a21      	ldr	r1, [r4, #32]
 800fe50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fe52:	4643      	mov	r3, r8
 800fe54:	463a      	mov	r2, r7
 800fe56:	4628      	mov	r0, r5
 800fe58:	47b0      	blx	r6
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	dc08      	bgt.n	800fe70 <__sflush_r+0xfc>
 800fe5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe66:	81a3      	strh	r3, [r4, #12]
 800fe68:	f04f 30ff 	mov.w	r0, #4294967295
 800fe6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe70:	4407      	add	r7, r0
 800fe72:	eba8 0800 	sub.w	r8, r8, r0
 800fe76:	e7e7      	b.n	800fe48 <__sflush_r+0xd4>
 800fe78:	20400001 	.word	0x20400001

0800fe7c <_fflush_r>:
 800fe7c:	b538      	push	{r3, r4, r5, lr}
 800fe7e:	690b      	ldr	r3, [r1, #16]
 800fe80:	4605      	mov	r5, r0
 800fe82:	460c      	mov	r4, r1
 800fe84:	b913      	cbnz	r3, 800fe8c <_fflush_r+0x10>
 800fe86:	2500      	movs	r5, #0
 800fe88:	4628      	mov	r0, r5
 800fe8a:	bd38      	pop	{r3, r4, r5, pc}
 800fe8c:	b118      	cbz	r0, 800fe96 <_fflush_r+0x1a>
 800fe8e:	6a03      	ldr	r3, [r0, #32]
 800fe90:	b90b      	cbnz	r3, 800fe96 <_fflush_r+0x1a>
 800fe92:	f7ff fa9f 	bl	800f3d4 <__sinit>
 800fe96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d0f3      	beq.n	800fe86 <_fflush_r+0xa>
 800fe9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fea0:	07d0      	lsls	r0, r2, #31
 800fea2:	d404      	bmi.n	800feae <_fflush_r+0x32>
 800fea4:	0599      	lsls	r1, r3, #22
 800fea6:	d402      	bmi.n	800feae <_fflush_r+0x32>
 800fea8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800feaa:	f7ff fbec 	bl	800f686 <__retarget_lock_acquire_recursive>
 800feae:	4628      	mov	r0, r5
 800feb0:	4621      	mov	r1, r4
 800feb2:	f7ff ff5f 	bl	800fd74 <__sflush_r>
 800feb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800feb8:	07da      	lsls	r2, r3, #31
 800feba:	4605      	mov	r5, r0
 800febc:	d4e4      	bmi.n	800fe88 <_fflush_r+0xc>
 800febe:	89a3      	ldrh	r3, [r4, #12]
 800fec0:	059b      	lsls	r3, r3, #22
 800fec2:	d4e1      	bmi.n	800fe88 <_fflush_r+0xc>
 800fec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fec6:	f7ff fbdf 	bl	800f688 <__retarget_lock_release_recursive>
 800feca:	e7dd      	b.n	800fe88 <_fflush_r+0xc>

0800fecc <__swbuf_r>:
 800fecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fece:	460e      	mov	r6, r1
 800fed0:	4614      	mov	r4, r2
 800fed2:	4605      	mov	r5, r0
 800fed4:	b118      	cbz	r0, 800fede <__swbuf_r+0x12>
 800fed6:	6a03      	ldr	r3, [r0, #32]
 800fed8:	b90b      	cbnz	r3, 800fede <__swbuf_r+0x12>
 800feda:	f7ff fa7b 	bl	800f3d4 <__sinit>
 800fede:	69a3      	ldr	r3, [r4, #24]
 800fee0:	60a3      	str	r3, [r4, #8]
 800fee2:	89a3      	ldrh	r3, [r4, #12]
 800fee4:	071a      	lsls	r2, r3, #28
 800fee6:	d501      	bpl.n	800feec <__swbuf_r+0x20>
 800fee8:	6923      	ldr	r3, [r4, #16]
 800feea:	b943      	cbnz	r3, 800fefe <__swbuf_r+0x32>
 800feec:	4621      	mov	r1, r4
 800feee:	4628      	mov	r0, r5
 800fef0:	f000 f82a 	bl	800ff48 <__swsetup_r>
 800fef4:	b118      	cbz	r0, 800fefe <__swbuf_r+0x32>
 800fef6:	f04f 37ff 	mov.w	r7, #4294967295
 800fefa:	4638      	mov	r0, r7
 800fefc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fefe:	6823      	ldr	r3, [r4, #0]
 800ff00:	6922      	ldr	r2, [r4, #16]
 800ff02:	1a98      	subs	r0, r3, r2
 800ff04:	6963      	ldr	r3, [r4, #20]
 800ff06:	b2f6      	uxtb	r6, r6
 800ff08:	4283      	cmp	r3, r0
 800ff0a:	4637      	mov	r7, r6
 800ff0c:	dc05      	bgt.n	800ff1a <__swbuf_r+0x4e>
 800ff0e:	4621      	mov	r1, r4
 800ff10:	4628      	mov	r0, r5
 800ff12:	f7ff ffb3 	bl	800fe7c <_fflush_r>
 800ff16:	2800      	cmp	r0, #0
 800ff18:	d1ed      	bne.n	800fef6 <__swbuf_r+0x2a>
 800ff1a:	68a3      	ldr	r3, [r4, #8]
 800ff1c:	3b01      	subs	r3, #1
 800ff1e:	60a3      	str	r3, [r4, #8]
 800ff20:	6823      	ldr	r3, [r4, #0]
 800ff22:	1c5a      	adds	r2, r3, #1
 800ff24:	6022      	str	r2, [r4, #0]
 800ff26:	701e      	strb	r6, [r3, #0]
 800ff28:	6962      	ldr	r2, [r4, #20]
 800ff2a:	1c43      	adds	r3, r0, #1
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d004      	beq.n	800ff3a <__swbuf_r+0x6e>
 800ff30:	89a3      	ldrh	r3, [r4, #12]
 800ff32:	07db      	lsls	r3, r3, #31
 800ff34:	d5e1      	bpl.n	800fefa <__swbuf_r+0x2e>
 800ff36:	2e0a      	cmp	r6, #10
 800ff38:	d1df      	bne.n	800fefa <__swbuf_r+0x2e>
 800ff3a:	4621      	mov	r1, r4
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	f7ff ff9d 	bl	800fe7c <_fflush_r>
 800ff42:	2800      	cmp	r0, #0
 800ff44:	d0d9      	beq.n	800fefa <__swbuf_r+0x2e>
 800ff46:	e7d6      	b.n	800fef6 <__swbuf_r+0x2a>

0800ff48 <__swsetup_r>:
 800ff48:	b538      	push	{r3, r4, r5, lr}
 800ff4a:	4b29      	ldr	r3, [pc, #164]	@ (800fff0 <__swsetup_r+0xa8>)
 800ff4c:	4605      	mov	r5, r0
 800ff4e:	6818      	ldr	r0, [r3, #0]
 800ff50:	460c      	mov	r4, r1
 800ff52:	b118      	cbz	r0, 800ff5c <__swsetup_r+0x14>
 800ff54:	6a03      	ldr	r3, [r0, #32]
 800ff56:	b90b      	cbnz	r3, 800ff5c <__swsetup_r+0x14>
 800ff58:	f7ff fa3c 	bl	800f3d4 <__sinit>
 800ff5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff60:	0719      	lsls	r1, r3, #28
 800ff62:	d422      	bmi.n	800ffaa <__swsetup_r+0x62>
 800ff64:	06da      	lsls	r2, r3, #27
 800ff66:	d407      	bmi.n	800ff78 <__swsetup_r+0x30>
 800ff68:	2209      	movs	r2, #9
 800ff6a:	602a      	str	r2, [r5, #0]
 800ff6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff70:	81a3      	strh	r3, [r4, #12]
 800ff72:	f04f 30ff 	mov.w	r0, #4294967295
 800ff76:	e033      	b.n	800ffe0 <__swsetup_r+0x98>
 800ff78:	0758      	lsls	r0, r3, #29
 800ff7a:	d512      	bpl.n	800ffa2 <__swsetup_r+0x5a>
 800ff7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ff7e:	b141      	cbz	r1, 800ff92 <__swsetup_r+0x4a>
 800ff80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff84:	4299      	cmp	r1, r3
 800ff86:	d002      	beq.n	800ff8e <__swsetup_r+0x46>
 800ff88:	4628      	mov	r0, r5
 800ff8a:	f7ff fbdb 	bl	800f744 <_free_r>
 800ff8e:	2300      	movs	r3, #0
 800ff90:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff92:	89a3      	ldrh	r3, [r4, #12]
 800ff94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ff98:	81a3      	strh	r3, [r4, #12]
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	6063      	str	r3, [r4, #4]
 800ff9e:	6923      	ldr	r3, [r4, #16]
 800ffa0:	6023      	str	r3, [r4, #0]
 800ffa2:	89a3      	ldrh	r3, [r4, #12]
 800ffa4:	f043 0308 	orr.w	r3, r3, #8
 800ffa8:	81a3      	strh	r3, [r4, #12]
 800ffaa:	6923      	ldr	r3, [r4, #16]
 800ffac:	b94b      	cbnz	r3, 800ffc2 <__swsetup_r+0x7a>
 800ffae:	89a3      	ldrh	r3, [r4, #12]
 800ffb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ffb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ffb8:	d003      	beq.n	800ffc2 <__swsetup_r+0x7a>
 800ffba:	4621      	mov	r1, r4
 800ffbc:	4628      	mov	r0, r5
 800ffbe:	f000 f83f 	bl	8010040 <__smakebuf_r>
 800ffc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffc6:	f013 0201 	ands.w	r2, r3, #1
 800ffca:	d00a      	beq.n	800ffe2 <__swsetup_r+0x9a>
 800ffcc:	2200      	movs	r2, #0
 800ffce:	60a2      	str	r2, [r4, #8]
 800ffd0:	6962      	ldr	r2, [r4, #20]
 800ffd2:	4252      	negs	r2, r2
 800ffd4:	61a2      	str	r2, [r4, #24]
 800ffd6:	6922      	ldr	r2, [r4, #16]
 800ffd8:	b942      	cbnz	r2, 800ffec <__swsetup_r+0xa4>
 800ffda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ffde:	d1c5      	bne.n	800ff6c <__swsetup_r+0x24>
 800ffe0:	bd38      	pop	{r3, r4, r5, pc}
 800ffe2:	0799      	lsls	r1, r3, #30
 800ffe4:	bf58      	it	pl
 800ffe6:	6962      	ldrpl	r2, [r4, #20]
 800ffe8:	60a2      	str	r2, [r4, #8]
 800ffea:	e7f4      	b.n	800ffd6 <__swsetup_r+0x8e>
 800ffec:	2000      	movs	r0, #0
 800ffee:	e7f7      	b.n	800ffe0 <__swsetup_r+0x98>
 800fff0:	240001d4 	.word	0x240001d4

0800fff4 <__swhatbuf_r>:
 800fff4:	b570      	push	{r4, r5, r6, lr}
 800fff6:	460c      	mov	r4, r1
 800fff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fffc:	2900      	cmp	r1, #0
 800fffe:	b096      	sub	sp, #88	@ 0x58
 8010000:	4615      	mov	r5, r2
 8010002:	461e      	mov	r6, r3
 8010004:	da0d      	bge.n	8010022 <__swhatbuf_r+0x2e>
 8010006:	89a3      	ldrh	r3, [r4, #12]
 8010008:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801000c:	f04f 0100 	mov.w	r1, #0
 8010010:	bf14      	ite	ne
 8010012:	2340      	movne	r3, #64	@ 0x40
 8010014:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010018:	2000      	movs	r0, #0
 801001a:	6031      	str	r1, [r6, #0]
 801001c:	602b      	str	r3, [r5, #0]
 801001e:	b016      	add	sp, #88	@ 0x58
 8010020:	bd70      	pop	{r4, r5, r6, pc}
 8010022:	466a      	mov	r2, sp
 8010024:	f000 f848 	bl	80100b8 <_fstat_r>
 8010028:	2800      	cmp	r0, #0
 801002a:	dbec      	blt.n	8010006 <__swhatbuf_r+0x12>
 801002c:	9901      	ldr	r1, [sp, #4]
 801002e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010032:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010036:	4259      	negs	r1, r3
 8010038:	4159      	adcs	r1, r3
 801003a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801003e:	e7eb      	b.n	8010018 <__swhatbuf_r+0x24>

08010040 <__smakebuf_r>:
 8010040:	898b      	ldrh	r3, [r1, #12]
 8010042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010044:	079d      	lsls	r5, r3, #30
 8010046:	4606      	mov	r6, r0
 8010048:	460c      	mov	r4, r1
 801004a:	d507      	bpl.n	801005c <__smakebuf_r+0x1c>
 801004c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010050:	6023      	str	r3, [r4, #0]
 8010052:	6123      	str	r3, [r4, #16]
 8010054:	2301      	movs	r3, #1
 8010056:	6163      	str	r3, [r4, #20]
 8010058:	b003      	add	sp, #12
 801005a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801005c:	ab01      	add	r3, sp, #4
 801005e:	466a      	mov	r2, sp
 8010060:	f7ff ffc8 	bl	800fff4 <__swhatbuf_r>
 8010064:	9f00      	ldr	r7, [sp, #0]
 8010066:	4605      	mov	r5, r0
 8010068:	4639      	mov	r1, r7
 801006a:	4630      	mov	r0, r6
 801006c:	f7ff f89a 	bl	800f1a4 <_malloc_r>
 8010070:	b948      	cbnz	r0, 8010086 <__smakebuf_r+0x46>
 8010072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010076:	059a      	lsls	r2, r3, #22
 8010078:	d4ee      	bmi.n	8010058 <__smakebuf_r+0x18>
 801007a:	f023 0303 	bic.w	r3, r3, #3
 801007e:	f043 0302 	orr.w	r3, r3, #2
 8010082:	81a3      	strh	r3, [r4, #12]
 8010084:	e7e2      	b.n	801004c <__smakebuf_r+0xc>
 8010086:	89a3      	ldrh	r3, [r4, #12]
 8010088:	6020      	str	r0, [r4, #0]
 801008a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801008e:	81a3      	strh	r3, [r4, #12]
 8010090:	9b01      	ldr	r3, [sp, #4]
 8010092:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010096:	b15b      	cbz	r3, 80100b0 <__smakebuf_r+0x70>
 8010098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801009c:	4630      	mov	r0, r6
 801009e:	f000 f81d 	bl	80100dc <_isatty_r>
 80100a2:	b128      	cbz	r0, 80100b0 <__smakebuf_r+0x70>
 80100a4:	89a3      	ldrh	r3, [r4, #12]
 80100a6:	f023 0303 	bic.w	r3, r3, #3
 80100aa:	f043 0301 	orr.w	r3, r3, #1
 80100ae:	81a3      	strh	r3, [r4, #12]
 80100b0:	89a3      	ldrh	r3, [r4, #12]
 80100b2:	431d      	orrs	r5, r3
 80100b4:	81a5      	strh	r5, [r4, #12]
 80100b6:	e7cf      	b.n	8010058 <__smakebuf_r+0x18>

080100b8 <_fstat_r>:
 80100b8:	b538      	push	{r3, r4, r5, lr}
 80100ba:	4d07      	ldr	r5, [pc, #28]	@ (80100d8 <_fstat_r+0x20>)
 80100bc:	2300      	movs	r3, #0
 80100be:	4604      	mov	r4, r0
 80100c0:	4608      	mov	r0, r1
 80100c2:	4611      	mov	r1, r2
 80100c4:	602b      	str	r3, [r5, #0]
 80100c6:	f7f2 fa4b 	bl	8002560 <_fstat>
 80100ca:	1c43      	adds	r3, r0, #1
 80100cc:	d102      	bne.n	80100d4 <_fstat_r+0x1c>
 80100ce:	682b      	ldr	r3, [r5, #0]
 80100d0:	b103      	cbz	r3, 80100d4 <_fstat_r+0x1c>
 80100d2:	6023      	str	r3, [r4, #0]
 80100d4:	bd38      	pop	{r3, r4, r5, pc}
 80100d6:	bf00      	nop
 80100d8:	240008ec 	.word	0x240008ec

080100dc <_isatty_r>:
 80100dc:	b538      	push	{r3, r4, r5, lr}
 80100de:	4d06      	ldr	r5, [pc, #24]	@ (80100f8 <_isatty_r+0x1c>)
 80100e0:	2300      	movs	r3, #0
 80100e2:	4604      	mov	r4, r0
 80100e4:	4608      	mov	r0, r1
 80100e6:	602b      	str	r3, [r5, #0]
 80100e8:	f7f2 fa4a 	bl	8002580 <_isatty>
 80100ec:	1c43      	adds	r3, r0, #1
 80100ee:	d102      	bne.n	80100f6 <_isatty_r+0x1a>
 80100f0:	682b      	ldr	r3, [r5, #0]
 80100f2:	b103      	cbz	r3, 80100f6 <_isatty_r+0x1a>
 80100f4:	6023      	str	r3, [r4, #0]
 80100f6:	bd38      	pop	{r3, r4, r5, pc}
 80100f8:	240008ec 	.word	0x240008ec

080100fc <_init>:
 80100fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100fe:	bf00      	nop
 8010100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010102:	bc08      	pop	{r3}
 8010104:	469e      	mov	lr, r3
 8010106:	4770      	bx	lr

08010108 <_fini>:
 8010108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801010a:	bf00      	nop
 801010c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801010e:	bc08      	pop	{r3}
 8010110:	469e      	mov	lr, r3
 8010112:	4770      	bx	lr
