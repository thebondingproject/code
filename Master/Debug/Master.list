
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f808  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800fad8  0800fad8  00010ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000012c2  0800ff34  0800ff34  00010f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000028  080111f8  080111f8  000121f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  08011220  08011220  00012220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000010  08011228  08011228  00012228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011238  08011238  00012238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  24000000  0801123c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  24000224  08011460  00013224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000a38  08011460  00013a38  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00013224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003204d  00000000  00000000  00013252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007611  00000000  00000000  0004529f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002050  00000000  00000000  0004c8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001826  00000000  00000000  0004e900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039046  00000000  00000000  00050126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b66c  00000000  00000000  0008916c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00172056  00000000  00000000  000b47d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c2  00000000  00000000  0022682e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009164  00000000  00000000  002268f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0022fa54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000224 	.word	0x24000224
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800fac0 	.word	0x0800fac0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000228 	.word	0x24000228
 800030c:	0800fac0 	.word	0x0800fac0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003b6:	f001 fc69 	bl	8001c8c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ba:	f002 f98f 	bl	80026dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003be:	f000 fa7d 	bl	80008bc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80003c2:	f000 fae9 	bl	8000998 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c6:	f000 fded 	bl	8000fa4 <MX_GPIO_Init>
  MX_CRC_Init();
 80003ca:	f000 fc09 	bl	8000be0 <MX_CRC_Init>
  MX_DMA2D_Init();
 80003ce:	f000 fc29 	bl	8000c24 <MX_DMA2D_Init>
  MX_ADC1_Init();
 80003d2:	f000 fb11 	bl	80009f8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80003d6:	f000 fc61 	bl	8000c9c <MX_I2C1_Init>
  MX_SPI1_Init();
 80003da:	f000 fc9f 	bl	8000d1c <MX_SPI1_Init>
  MX_TIM2_Init();
 80003de:	f000 fcf5 	bl	8000dcc <MX_TIM2_Init>
  MX_TIM3_Init();
 80003e2:	f000 fd67 	bl	8000eb4 <MX_TIM3_Init>
  MX_ADC2_Init();
 80003e6:	f000 fb93 	bl	8000b10 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	serial_communication_variable_init();
 80003ea:	f001 fc81 	bl	8001cf0 <serial_communication_variable_init>
	speed_joystickX = 0;
 80003ee:	4bbb      	ldr	r3, [pc, #748]	@ (80006dc <main+0x32c>)
 80003f0:	f04f 0200 	mov.w	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
	speed_joystickY = 0;
 80003f6:	4bba      	ldr	r3, [pc, #744]	@ (80006e0 <main+0x330>)
 80003f8:	f04f 0200 	mov.w	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
	speed_joystickZ = 0;
 80003fe:	4bb9      	ldr	r3, [pc, #740]	@ (80006e4 <main+0x334>)
 8000400:	f04f 0200 	mov.w	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
	speed_joystickT = 0;
 8000406:	4bb8      	ldr	r3, [pc, #736]	@ (80006e8 <main+0x338>)
 8000408:	f04f 0200 	mov.w	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
	solenoid_tear_1_status = 0;
 800040e:	4bb7      	ldr	r3, [pc, #732]	@ (80006ec <main+0x33c>)
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
	solenoid_tear_2_status = 0;
 8000414:	4bb6      	ldr	r3, [pc, #728]	@ (80006f0 <main+0x340>)
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
	solenoid_tear_clamp_status = 0;
 800041a:	4bb6      	ldr	r3, [pc, #728]	@ (80006f4 <main+0x344>)
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
	solenoid_tear_lock_status = 0;
 8000420:	4bb5      	ldr	r3, [pc, #724]	@ (80006f8 <main+0x348>)
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
	control_mode = 0;
 8000426:	4bb5      	ldr	r3, [pc, #724]	@ (80006fc <main+0x34c>)
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
	bond_power_now = 0;
 800042c:	4bb4      	ldr	r3, [pc, #720]	@ (8000700 <main+0x350>)
 800042e:	2200      	movs	r2, #0
 8000430:	701a      	strb	r2, [r3, #0]
	bond_power_before = 0;
 8000432:	4bb4      	ldr	r3, [pc, #720]	@ (8000704 <main+0x354>)
 8000434:	2200      	movs	r2, #0
 8000436:	701a      	strb	r2, [r3, #0]
	search_height_adj_1 = 0;
 8000438:	4bb3      	ldr	r3, [pc, #716]	@ (8000708 <main+0x358>)
 800043a:	f04f 0200 	mov.w	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
	search_height_adj_2 = 0;
 8000440:	4bb2      	ldr	r3, [pc, #712]	@ (800070c <main+0x35c>)
 8000442:	f04f 0200 	mov.w	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
	measured_temperature_gauge = 0;
 8000448:	4bb1      	ldr	r3, [pc, #708]	@ (8000710 <main+0x360>)
 800044a:	f04f 0200 	mov.w	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
	debug_head_touched = 0;
 8000450:	4bb0      	ldr	r3, [pc, #704]	@ (8000714 <main+0x364>)
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
	fine_adjustment = 0;
 8000456:	4bb0      	ldr	r3, [pc, #704]	@ (8000718 <main+0x368>)
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]

	if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 800045c:	48af      	ldr	r0, [pc, #700]	@ (800071c <main+0x36c>)
 800045e:	f00b fc5d 	bl	800bd1c <HAL_TIM_Base_Start_IT>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <main+0xbc>
	{
		/* Starting Error */
		Error_Handler();
 8000468:	f001 fc3c 	bl	8001ce4 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800046c:	2108      	movs	r1, #8
 800046e:	48ac      	ldr	r0, [pc, #688]	@ (8000720 <main+0x370>)
 8000470:	f00b fd9c 	bl	800bfac <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	position_joystick = 0;
 8000474:	4bab      	ldr	r3, [pc, #684]	@ (8000724 <main+0x374>)
 8000476:	f04f 0200 	mov.w	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
	ui32_to_f conv;
	//https://deepbluembedded.com/stm32-potentiometer-read-examples-single-multiple-potentiometers/
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 800047c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000480:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000484:	48a8      	ldr	r0, [pc, #672]	@ (8000728 <main+0x378>)
 8000486:	f004 f8cf 	bl	8004628 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 800048a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800048e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000492:	48a6      	ldr	r0, [pc, #664]	@ (800072c <main+0x37c>)
 8000494:	f004 f8c8 	bl	8004628 <HAL_ADCEx_Calibration_Start>

	//Disable the ultrasonic driver
	HAL_GPIO_WritePin(ULTRASONIC_ENABLE_GPIO_Port, ULTRASONIC_ENABLE_Pin, GPIO_PIN_SET);
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800049e:	48a4      	ldr	r0, [pc, #656]	@ (8000730 <main+0x380>)
 80004a0:	f005 f9a8 	bl	80057f4 <HAL_GPIO_WritePin>

	//Reset position at startup
	write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, 0);
 80004a4:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 8000734 <main+0x384>
 80004a8:	2100      	movs	r1, #0
 80004aa:	202c      	movs	r0, #44	@ 0x2c
 80004ac:	f001 fa6c 	bl	8001988 <write_float_to_slave>

	write_uint32_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_MODE, SPD_MODE);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2105      	movs	r1, #5
 80004b4:	2028      	movs	r0, #40	@ 0x28
 80004b6:	f001 fa8b 	bl	80019d0 <write_uint32_to_slave>
	write_uint32_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_MODE, SPD_MODE);
 80004ba:	2201      	movs	r2, #1
 80004bc:	2105      	movs	r1, #5
 80004be:	202a      	movs	r0, #42	@ 0x2a
 80004c0:	f001 fa86 	bl	80019d0 <write_uint32_to_slave>
	write_float_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_SPEED, 0);
 80004c4:	ed9f 0a9b 	vldr	s0, [pc, #620]	@ 8000734 <main+0x384>
 80004c8:	2101      	movs	r1, #1
 80004ca:	2028      	movs	r0, #40	@ 0x28
 80004cc:	f001 fa5c 	bl	8001988 <write_float_to_slave>
	write_float_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_SPEED, 0);
 80004d0:	ed9f 0a98 	vldr	s0, [pc, #608]	@ 8000734 <main+0x384>
 80004d4:	2101      	movs	r1, #1
 80004d6:	202a      	movs	r0, #42	@ 0x2a
 80004d8:	f001 fa56 	bl	8001988 <write_float_to_slave>
//		//Keep the head raised
//		debug_head_touched = HAL_GPIO_ReadPin(PLATFORM_TOUCH_GPIO_Port, PLATFORM_TOUCH_Pin);
//		HAL_Delay(100);
//
		//Enable XY jog mode
		measure_joystick_and_send_to_slave();
 80004dc:	f001 f830 	bl	8001540 <measure_joystick_and_send_to_slave>
		HAL_Delay(100);
 80004e0:	2064      	movs	r0, #100	@ 0x64
 80004e2:	f002 f98d 	bl	8002800 <HAL_Delay>
		}
		HAL_Delay(100);
#endif

#if 1
		if(HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_SET)
 80004e6:	2180      	movs	r1, #128	@ 0x80
 80004e8:	4891      	ldr	r0, [pc, #580]	@ (8000730 <main+0x380>)
 80004ea:	f005 f96b 	bl	80057c4 <HAL_GPIO_ReadPin>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	f040 8176 	bne.w	80007e2 <main+0x432>
		{
			fine_adjustment = 1;
 80004f6:	4b88      	ldr	r3, [pc, #544]	@ (8000718 <main+0x368>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	601a      	str	r2, [r3, #0]

			stage = 0; //For debug; TODO: remove in the future
 80004fc:	4b8e      	ldr	r3, [pc, #568]	@ (8000738 <main+0x388>)
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
			// Wait for the user to release the button
			wait_for_button_release();
 8000502:	f001 faaf 	bl	8001a64 <wait_for_button_release>

			ui32_to_f descent_position;

			stage++; //For debug; TODO: remove
 8000506:	4b8c      	ldr	r3, [pc, #560]	@ (8000738 <main+0x388>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	3301      	adds	r3, #1
 800050c:	4a8a      	ldr	r2, [pc, #552]	@ (8000738 <main+0x388>)
 800050e:	6013      	str	r3, [r2, #0]
			// First search descent
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, search_height_1);
 8000510:	4b8a      	ldr	r3, [pc, #552]	@ (800073c <main+0x38c>)
 8000512:	edd3 7a00 	vldr	s15, [r3]
 8000516:	eeb0 0a67 	vmov.f32	s0, s15
 800051a:	2100      	movs	r1, #0
 800051c:	202c      	movs	r0, #44	@ 0x2c
 800051e:	f001 fa33 	bl	8001988 <write_float_to_slave>

			// Wait for the button to be pressed and released
			//wait_for_button_press();

			stage++; //For debug; TODO: remove
 8000522:	4b85      	ldr	r3, [pc, #532]	@ (8000738 <main+0x388>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	3301      	adds	r3, #1
 8000528:	4a83      	ldr	r2, [pc, #524]	@ (8000738 <main+0x388>)
 800052a:	6013      	str	r3, [r2, #0]
			// Enter into jog mode (XY movement with joystick)
			enter_jog_mode();
 800052c:	f001 f8c6 	bl	80016bc <enter_jog_mode>
			// Wait for the user to release the button
			wait_for_button_release();
 8000530:	f001 fa98 	bl	8001a64 <wait_for_button_release>

			stage++; //For debug; TODO: remove
 8000534:	4b80      	ldr	r3, [pc, #512]	@ (8000738 <main+0x388>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	4a7f      	ldr	r2, [pc, #508]	@ (8000738 <main+0x388>)
 800053c:	6013      	str	r3, [r2, #0]
			//Start descending until touch with substrate
			head_touched = false;
 800053e:	4b80      	ldr	r3, [pc, #512]	@ (8000740 <main+0x390>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, -1);
 8000544:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8000548:	2100      	movs	r1, #0
 800054a:	202c      	movs	r0, #44	@ 0x2c
 800054c:	f001 fa1c 	bl	8001988 <write_float_to_slave>
			while(!head_touched){};
 8000550:	bf00      	nop
 8000552:	4b7b      	ldr	r3, [pc, #492]	@ (8000740 <main+0x390>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	f083 0301 	eor.w	r3, r3, #1
 800055a:	b2db      	uxtb	r3, r3
 800055c:	2b00      	cmp	r3, #0
 800055e:	d1f8      	bne.n	8000552 <main+0x1a2>

			stage++; //For debug; TODO: remove
 8000560:	4b75      	ldr	r3, [pc, #468]	@ (8000738 <main+0x388>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	4a74      	ldr	r2, [pc, #464]	@ (8000738 <main+0x388>)
 8000568:	6013      	str	r3, [r2, #0]
			//Lower the head a bit more
			data_ready = false;
 800056a:	4b76      	ldr	r3, [pc, #472]	@ (8000744 <main+0x394>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
			prepare_READ_packet(tx_buffer, VIRTUAL_MEM_POSITION_MEAS);
 8000570:	2103      	movs	r1, #3
 8000572:	4875      	ldr	r0, [pc, #468]	@ (8000748 <main+0x398>)
 8000574:	f001 fbfc 	bl	8001d70 <prepare_READ_packet>
			HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_MOTOR_Z, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 8000578:	2364      	movs	r3, #100	@ 0x64
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	2320      	movs	r3, #32
 800057e:	4a72      	ldr	r2, [pc, #456]	@ (8000748 <main+0x398>)
 8000580:	212c      	movs	r1, #44	@ 0x2c
 8000582:	4872      	ldr	r0, [pc, #456]	@ (800074c <main+0x39c>)
 8000584:	f005 fa06 	bl	8005994 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive_IT(&hi2c1, ADDRESS_MOTOR_Z, rx_buffer, MAX_COMM_BUFFER_SIZE);
 8000588:	2320      	movs	r3, #32
 800058a:	4a71      	ldr	r2, [pc, #452]	@ (8000750 <main+0x3a0>)
 800058c:	212c      	movs	r1, #44	@ 0x2c
 800058e:	486f      	ldr	r0, [pc, #444]	@ (800074c <main+0x39c>)
 8000590:	f005 fb18 	bl	8005bc4 <HAL_I2C_Master_Receive_IT>
			while(!data_ready){};
 8000594:	bf00      	nop
 8000596:	4b6b      	ldr	r3, [pc, #428]	@ (8000744 <main+0x394>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	f083 0301 	eor.w	r3, r3, #1
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d1f8      	bne.n	8000596 <main+0x1e6>
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, read_position - further_descent);
 80005a4:	4b6b      	ldr	r3, [pc, #428]	@ (8000754 <main+0x3a4>)
 80005a6:	ed93 7a00 	vldr	s14, [r3]
 80005aa:	4b6b      	ldr	r3, [pc, #428]	@ (8000758 <main+0x3a8>)
 80005ac:	edd3 7a00 	vldr	s15, [r3]
 80005b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005b4:	eeb0 0a67 	vmov.f32	s0, s15
 80005b8:	2100      	movs	r1, #0
 80005ba:	202c      	movs	r0, #44	@ 0x2c
 80005bc:	f001 f9e4 	bl	8001988 <write_float_to_slave>

			stage++; //For debug; TODO: remove
 80005c0:	4b5d      	ldr	r3, [pc, #372]	@ (8000738 <main+0x388>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	4a5c      	ldr	r2, [pc, #368]	@ (8000738 <main+0x388>)
 80005c8:	6013      	str	r3, [r2, #0]
			//Perform the bond
			perform_bond(bond_time_1);
 80005ca:	4b64      	ldr	r3, [pc, #400]	@ (800075c <main+0x3ac>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fa1e 	bl	8001a10 <perform_bond>

			// Open clamp solenoid
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2108      	movs	r1, #8
 80005d8:	4861      	ldr	r0, [pc, #388]	@ (8000760 <main+0x3b0>)
 80005da:	f005 f90b 	bl	80057f4 <HAL_GPIO_WritePin>

			//Go to loop height
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, (read_position - further_descent) + loop_height);
 80005de:	4b5d      	ldr	r3, [pc, #372]	@ (8000754 <main+0x3a4>)
 80005e0:	ed93 7a00 	vldr	s14, [r3]
 80005e4:	4b5c      	ldr	r3, [pc, #368]	@ (8000758 <main+0x3a8>)
 80005e6:	edd3 7a00 	vldr	s15, [r3]
 80005ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005ee:	4b5d      	ldr	r3, [pc, #372]	@ (8000764 <main+0x3b4>)
 80005f0:	edd3 7a00 	vldr	s15, [r3]
 80005f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005f8:	eeb0 0a67 	vmov.f32	s0, s15
 80005fc:	2100      	movs	r1, #0
 80005fe:	202c      	movs	r0, #44	@ 0x2c
 8000600:	f001 f9c2 	bl	8001988 <write_float_to_slave>

			stage++; //For debug; TODO: remove
 8000604:	4b4c      	ldr	r3, [pc, #304]	@ (8000738 <main+0x388>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	3301      	adds	r3, #1
 800060a:	4a4b      	ldr	r2, [pc, #300]	@ (8000738 <main+0x388>)
 800060c:	6013      	str	r3, [r2, #0]
			// Enter into jog mode (XY movement with joystick)
			enter_jog_mode();
 800060e:	f001 f855 	bl	80016bc <enter_jog_mode>
			// Wait for the user to release the button
			wait_for_button_release();
 8000612:	f001 fa27 	bl	8001a64 <wait_for_button_release>

			//Go to search height 2
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, search_height_2);
 8000616:	4b54      	ldr	r3, [pc, #336]	@ (8000768 <main+0x3b8>)
 8000618:	edd3 7a00 	vldr	s15, [r3]
 800061c:	eeb0 0a67 	vmov.f32	s0, s15
 8000620:	2100      	movs	r1, #0
 8000622:	202c      	movs	r0, #44	@ 0x2c
 8000624:	f001 f9b0 	bl	8001988 <write_float_to_slave>

			// Wait for the button to be pressed and released
			//wait_for_button_press();

			stage++; //For debug; TODO: remove
 8000628:	4b43      	ldr	r3, [pc, #268]	@ (8000738 <main+0x388>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	3301      	adds	r3, #1
 800062e:	4a42      	ldr	r2, [pc, #264]	@ (8000738 <main+0x388>)
 8000630:	6013      	str	r3, [r2, #0]
			// Enter into jog mode (XY movement with joystick)
			enter_jog_mode();
 8000632:	f001 f843 	bl	80016bc <enter_jog_mode>
			// Wait for the user to release the button
			wait_for_button_release();
 8000636:	f001 fa15 	bl	8001a64 <wait_for_button_release>

			//Start descending until touch with substrate
			head_touched = false;
 800063a:	4b41      	ldr	r3, [pc, #260]	@ (8000740 <main+0x390>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, -1);
 8000640:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8000644:	2100      	movs	r1, #0
 8000646:	202c      	movs	r0, #44	@ 0x2c
 8000648:	f001 f99e 	bl	8001988 <write_float_to_slave>
			while(!head_touched){};
 800064c:	bf00      	nop
 800064e:	4b3c      	ldr	r3, [pc, #240]	@ (8000740 <main+0x390>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	f083 0301 	eor.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1f8      	bne.n	800064e <main+0x29e>

			stage++; //For debug; TODO: remove
 800065c:	4b36      	ldr	r3, [pc, #216]	@ (8000738 <main+0x388>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	4a35      	ldr	r2, [pc, #212]	@ (8000738 <main+0x388>)
 8000664:	6013      	str	r3, [r2, #0]
			//Lower the head a bit more
			data_ready = false;
 8000666:	4b37      	ldr	r3, [pc, #220]	@ (8000744 <main+0x394>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
			prepare_READ_packet(tx_buffer, VIRTUAL_MEM_POSITION_MEAS);
 800066c:	2103      	movs	r1, #3
 800066e:	4836      	ldr	r0, [pc, #216]	@ (8000748 <main+0x398>)
 8000670:	f001 fb7e 	bl	8001d70 <prepare_READ_packet>
			HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_MOTOR_Z, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 8000674:	2364      	movs	r3, #100	@ 0x64
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2320      	movs	r3, #32
 800067a:	4a33      	ldr	r2, [pc, #204]	@ (8000748 <main+0x398>)
 800067c:	212c      	movs	r1, #44	@ 0x2c
 800067e:	4833      	ldr	r0, [pc, #204]	@ (800074c <main+0x39c>)
 8000680:	f005 f988 	bl	8005994 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive_IT(&hi2c1, ADDRESS_MOTOR_Z, rx_buffer, MAX_COMM_BUFFER_SIZE);
 8000684:	2320      	movs	r3, #32
 8000686:	4a32      	ldr	r2, [pc, #200]	@ (8000750 <main+0x3a0>)
 8000688:	212c      	movs	r1, #44	@ 0x2c
 800068a:	4830      	ldr	r0, [pc, #192]	@ (800074c <main+0x39c>)
 800068c:	f005 fa9a 	bl	8005bc4 <HAL_I2C_Master_Receive_IT>
			while(!data_ready){};
 8000690:	bf00      	nop
 8000692:	4b2c      	ldr	r3, [pc, #176]	@ (8000744 <main+0x394>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	f083 0301 	eor.w	r3, r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1f8      	bne.n	8000692 <main+0x2e2>
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, read_position - further_descent);
 80006a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <main+0x3a4>)
 80006a2:	ed93 7a00 	vldr	s14, [r3]
 80006a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000758 <main+0x3a8>)
 80006a8:	edd3 7a00 	vldr	s15, [r3]
 80006ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006b0:	eeb0 0a67 	vmov.f32	s0, s15
 80006b4:	2100      	movs	r1, #0
 80006b6:	202c      	movs	r0, #44	@ 0x2c
 80006b8:	f001 f966 	bl	8001988 <write_float_to_slave>

			stage++; //For debug; TODO: remove
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <main+0x388>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	3301      	adds	r3, #1
 80006c2:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <main+0x388>)
 80006c4:	6013      	str	r3, [r2, #0]
			//Perform the bond
			perform_bond(bond_time_2);
 80006c6:	4b29      	ldr	r3, [pc, #164]	@ (800076c <main+0x3bc>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 f9a0 	bl	8001a10 <perform_bond>
			HAL_GPIO_WritePin(SOLENOID_TEAR_2_GPIO_Port, SOLENOID_TEAR_2_Pin, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2110      	movs	r1, #16
 80006d4:	4822      	ldr	r0, [pc, #136]	@ (8000760 <main+0x3b0>)
 80006d6:	f005 f88d 	bl	80057f4 <HAL_GPIO_WritePin>
 80006da:	e049      	b.n	8000770 <main+0x3c0>
 80006dc:	24000554 	.word	0x24000554
 80006e0:	24000558 	.word	0x24000558
 80006e4:	2400055c 	.word	0x2400055c
 80006e8:	24000560 	.word	0x24000560
 80006ec:	24000564 	.word	0x24000564
 80006f0:	24000568 	.word	0x24000568
 80006f4:	2400056c 	.word	0x2400056c
 80006f8:	24000570 	.word	0x24000570
 80006fc:	2400057c 	.word	0x2400057c
 8000700:	24000578 	.word	0x24000578
 8000704:	24000579 	.word	0x24000579
 8000708:	24000520 	.word	0x24000520
 800070c:	24000524 	.word	0x24000524
 8000710:	24000528 	.word	0x24000528
 8000714:	2400052c 	.word	0x2400052c
 8000718:	24000574 	.word	0x24000574
 800071c:	24000488 	.word	0x24000488
 8000720:	240004d4 	.word	0x240004d4
 8000724:	24000550 	.word	0x24000550
 8000728:	24000240 	.word	0x24000240
 800072c:	240002b0 	.word	0x240002b0
 8000730:	58021400 	.word	0x58021400
 8000734:	00000000 	.word	0x00000000
 8000738:	24000530 	.word	0x24000530
 800073c:	24000000 	.word	0x24000000
 8000740:	24000540 	.word	0x24000540
 8000744:	24000541 	.word	0x24000541
 8000748:	240005f8 	.word	0x240005f8
 800074c:	240003ac 	.word	0x240003ac
 8000750:	24000618 	.word	0x24000618
 8000754:	2400053c 	.word	0x2400053c
 8000758:	24000008 	.word	0x24000008
 800075c:	24000014 	.word	0x24000014
 8000760:	58020400 	.word	0x58020400
 8000764:	2400000c 	.word	0x2400000c
 8000768:	24000004 	.word	0x24000004
 800076c:	24000018 	.word	0x24000018
			HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000776:	4846      	ldr	r0, [pc, #280]	@ (8000890 <main+0x4e0>)
 8000778:	f005 f83c 	bl	80057f4 <HAL_GPIO_WritePin>

			HAL_Delay(1000);
 800077c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000780:	f002 f83e 	bl	8002800 <HAL_Delay>

			stage++; //For debug; TODO: remove
 8000784:	4b43      	ldr	r3, [pc, #268]	@ (8000894 <main+0x4e4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	4a42      	ldr	r2, [pc, #264]	@ (8000894 <main+0x4e4>)
 800078c:	6013      	str	r3, [r2, #0]
			// Close clamp solenoid
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2108      	movs	r1, #8
 8000792:	4841      	ldr	r0, [pc, #260]	@ (8000898 <main+0x4e8>)
 8000794:	f005 f82e 	bl	80057f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SOLENOID_TEAR_2_GPIO_Port, SOLENOID_TEAR_2_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2110      	movs	r1, #16
 800079c:	483e      	ldr	r0, [pc, #248]	@ (8000898 <main+0x4e8>)
 800079e:	f005 f829 	bl	80057f4 <HAL_GPIO_WritePin>

			stage++; //For debug; TODO: remove
 80007a2:	4b3c      	ldr	r3, [pc, #240]	@ (8000894 <main+0x4e4>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	4a3a      	ldr	r2, [pc, #232]	@ (8000894 <main+0x4e4>)
 80007aa:	6013      	str	r3, [r2, #0]
			// Go back up
			head_touched = false;
 80007ac:	4b3b      	ldr	r3, [pc, #236]	@ (800089c <main+0x4ec>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, 0);
 80007b2:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 80008a0 <main+0x4f0>
 80007b6:	2100      	movs	r1, #0
 80007b8:	202c      	movs	r0, #44	@ 0x2c
 80007ba:	f001 f8e5 	bl	8001988 <write_float_to_slave>

			HAL_Delay(1000);
 80007be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007c2:	f002 f81d 	bl	8002800 <HAL_Delay>

			HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007cc:	4830      	ldr	r0, [pc, #192]	@ (8000890 <main+0x4e0>)
 80007ce:	f005 f811 	bl	80057f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2108      	movs	r1, #8
 80007d6:	4830      	ldr	r0, [pc, #192]	@ (8000898 <main+0x4e8>)
 80007d8:	f005 f80c 	bl	80057f4 <HAL_GPIO_WritePin>

			fine_adjustment = 0;
 80007dc:	4b31      	ldr	r3, [pc, #196]	@ (80008a4 <main+0x4f4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
		}
#endif

#if 1
		if(solenoid_tear_1_status)
 80007e2:	4b31      	ldr	r3, [pc, #196]	@ (80008a8 <main+0x4f8>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d006      	beq.n	80007f8 <main+0x448>
			HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f0:	4827      	ldr	r0, [pc, #156]	@ (8000890 <main+0x4e0>)
 80007f2:	f004 ffff 	bl	80057f4 <HAL_GPIO_WritePin>
 80007f6:	e005      	b.n	8000804 <main+0x454>
		else
			HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007fe:	4824      	ldr	r0, [pc, #144]	@ (8000890 <main+0x4e0>)
 8000800:	f004 fff8 	bl	80057f4 <HAL_GPIO_WritePin>

		if(solenoid_tear_2_status)
 8000804:	4b29      	ldr	r3, [pc, #164]	@ (80008ac <main+0x4fc>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d005      	beq.n	8000818 <main+0x468>
			HAL_GPIO_WritePin(SOLENOID_TEAR_2_GPIO_Port, SOLENOID_TEAR_2_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	2110      	movs	r1, #16
 8000810:	4821      	ldr	r0, [pc, #132]	@ (8000898 <main+0x4e8>)
 8000812:	f004 ffef 	bl	80057f4 <HAL_GPIO_WritePin>
 8000816:	e004      	b.n	8000822 <main+0x472>
		else
			HAL_GPIO_WritePin(SOLENOID_TEAR_2_GPIO_Port, SOLENOID_TEAR_2_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2110      	movs	r1, #16
 800081c:	481e      	ldr	r0, [pc, #120]	@ (8000898 <main+0x4e8>)
 800081e:	f004 ffe9 	bl	80057f4 <HAL_GPIO_WritePin>

		if(solenoid_tear_clamp_status)
 8000822:	4b23      	ldr	r3, [pc, #140]	@ (80008b0 <main+0x500>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d005      	beq.n	8000836 <main+0x486>
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	2108      	movs	r1, #8
 800082e:	481a      	ldr	r0, [pc, #104]	@ (8000898 <main+0x4e8>)
 8000830:	f004 ffe0 	bl	80057f4 <HAL_GPIO_WritePin>
 8000834:	e004      	b.n	8000840 <main+0x490>
		else
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2108      	movs	r1, #8
 800083a:	4817      	ldr	r0, [pc, #92]	@ (8000898 <main+0x4e8>)
 800083c:	f004 ffda 	bl	80057f4 <HAL_GPIO_WritePin>
		//		HAL_ADC_Start(&hadc1);
		//		HAL_ADC_PollForConversion(&hadc1, 10);
		//		ADC_valX = HAL_ADC_GetValue(&hadc1) - 127.5;


		ADC_valX = ADC_Convert_Rank1() - 127.5;
 8000840:	f001 f9a0 	bl	8001b84 <ADC_Convert_Rank1>
 8000844:	eef0 7a40 	vmov.f32	s15, s0
 8000848:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800084c:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8000888 <main+0x4d8>
 8000850:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000854:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000858:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <main+0x504>)
 800085a:	edc3 7a00 	vstr	s15, [r3]
		ADC_valY = ADC_Convert_Rank2() - 127.5;         // Read The ADC Conversion Result
 800085e:	f001 f9d3 	bl	8001c08 <ADC_Convert_Rank2>
 8000862:	eef0 7a40 	vmov.f32	s15, s0
 8000866:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800086a:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8000888 <main+0x4d8>
 800086e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000872:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <main+0x508>)
 8000878:	edc3 7a00 	vstr	s15, [r3]
//HAL_I2C_Master_Receive_IT(&hi2c1, ADDRESS_MOTOR_Z, rx_buffer, MAX_COMM_BUFFER_SIZE);
//Altre funzioni (che non servono)
//HAL_I2C_Master_Receive(&hi2c1, ADDRESS_MOTOR_X, rx_buffer, MAX_COMM_BUFFER_SIZE, 1000);
//HAL_I2C_Master_Seq_Receive_IT(&hi2c1, ADDRESS_MOTOR_X, rx_buffer, MAX_COMM_BUFFER_SIZE, I2C_FIRST_AND_LAST_FRAME);

HAL_Delay(100);
 800087c:	2064      	movs	r0, #100	@ 0x64
 800087e:	f001 ffbf 	bl	8002800 <HAL_Delay>
		measure_joystick_and_send_to_slave();
 8000882:	e62b      	b.n	80004dc <main+0x12c>
 8000884:	f3af 8000 	nop.w
 8000888:	00000000 	.word	0x00000000
 800088c:	405fe000 	.word	0x405fe000
 8000890:	58020800 	.word	0x58020800
 8000894:	24000530 	.word	0x24000530
 8000898:	58020400 	.word	0x58020400
 800089c:	24000540 	.word	0x24000540
 80008a0:	00000000 	.word	0x00000000
 80008a4:	24000574 	.word	0x24000574
 80008a8:	24000564 	.word	0x24000564
 80008ac:	24000568 	.word	0x24000568
 80008b0:	2400056c 	.word	0x2400056c
 80008b4:	24000548 	.word	0x24000548
 80008b8:	2400054c 	.word	0x2400054c

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b09c      	sub	sp, #112	@ 0x70
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c6:	224c      	movs	r2, #76	@ 0x4c
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f00e faef 	bl	800eeae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2220      	movs	r2, #32
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f00e fae9 	bl	800eeae <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008dc:	2002      	movs	r0, #2
 80008de:	f007 fa5b 	bl	8007d98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000994 <SystemClock_Config+0xd8>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	4a2a      	ldr	r2, [pc, #168]	@ (8000994 <SystemClock_Config+0xd8>)
 80008ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008f0:	6193      	str	r3, [r2, #24]
 80008f2:	4b28      	ldr	r3, [pc, #160]	@ (8000994 <SystemClock_Config+0xd8>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008fe:	bf00      	nop
 8000900:	4b24      	ldr	r3, [pc, #144]	@ (8000994 <SystemClock_Config+0xd8>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000908:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800090c:	d1f8      	bne.n	8000900 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090e:	2302      	movs	r3, #2
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000912:	2301      	movs	r3, #1
 8000914:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000916:	2340      	movs	r3, #64	@ 0x40
 8000918:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091a:	2302      	movs	r3, #2
 800091c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800091e:	2300      	movs	r3, #0
 8000920:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000922:	2304      	movs	r3, #4
 8000924:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000926:	230c      	movs	r3, #12
 8000928:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800092a:	2301      	movs	r3, #1
 800092c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800092e:	2304      	movs	r3, #4
 8000930:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000932:	2302      	movs	r3, #2
 8000934:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000936:	230c      	movs	r3, #12
 8000938:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800093a:	2300      	movs	r3, #0
 800093c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000946:	4618      	mov	r0, r3
 8000948:	f007 fa60 	bl	8007e0c <HAL_RCC_OscConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000952:	f001 f9c7 	bl	8001ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000956:	233f      	movs	r3, #63	@ 0x3f
 8000958:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095a:	2303      	movs	r3, #3
 800095c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000966:	2340      	movs	r3, #64	@ 0x40
 8000968:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800096a:	2340      	movs	r3, #64	@ 0x40
 800096c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800096e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000972:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000974:	2340      	movs	r3, #64	@ 0x40
 8000976:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2102      	movs	r1, #2
 800097c:	4618      	mov	r0, r3
 800097e:	f007 fe1f 	bl	80085c0 <HAL_RCC_ClockConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000988:	f001 f9ac 	bl	8001ce4 <Error_Handler>
  }
}
 800098c:	bf00      	nop
 800098e:	3770      	adds	r7, #112	@ 0x70
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	58024800 	.word	0x58024800

08000998 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b0ae      	sub	sp, #184	@ 0xb8
 800099c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800099e:	463b      	mov	r3, r7
 80009a0:	22b8      	movs	r2, #184	@ 0xb8
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f00e fa82 	bl	800eeae <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009aa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009ae:	f04f 0300 	mov.w	r3, #0
 80009b2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80009b6:	2304      	movs	r3, #4
 80009b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80009ba:	230c      	movs	r3, #12
 80009bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80009be:	2302      	movs	r3, #2
 80009c0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009ca:	23c0      	movs	r3, #192	@ 0xc0
 80009cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 80009d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009d8:	2300      	movs	r3, #0
 80009da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4618      	mov	r0, r3
 80009e2:	f008 f963 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80009ec:	f001 f97a 	bl	8001ce4 <Error_Handler>
  }
}
 80009f0:	bf00      	nop
 80009f2:	37b8      	adds	r7, #184	@ 0xb8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	@ 0x30
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2224      	movs	r2, #36	@ 0x24
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f00e fa4c 	bl	800eeae <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a16:	4b3a      	ldr	r3, [pc, #232]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a18:	4a3a      	ldr	r2, [pc, #232]	@ (8000b04 <MX_ADC1_Init+0x10c>)
 8000a1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a1c:	4b38      	ldr	r3, [pc, #224]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000a22:	4b37      	ldr	r3, [pc, #220]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a24:	221c      	movs	r2, #28
 8000a26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a28:	4b35      	ldr	r3, [pc, #212]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a2e:	4b34      	ldr	r3, [pc, #208]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a30:	2204      	movs	r2, #4
 8000a32:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a34:	4b32      	ldr	r3, [pc, #200]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a3a:	4b31      	ldr	r3, [pc, #196]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000a40:	4b2f      	ldr	r3, [pc, #188]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a42:	2202      	movs	r2, #2
 8000a44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a46:	4b2e      	ldr	r3, [pc, #184]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a54:	4b2a      	ldr	r3, [pc, #168]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a5a:	4b29      	ldr	r3, [pc, #164]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a60:	4b27      	ldr	r3, [pc, #156]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a66:	4b26      	ldr	r3, [pc, #152]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000a6c:	4b24      	ldr	r3, [pc, #144]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000a74:	4b22      	ldr	r3, [pc, #136]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a7a:	4821      	ldr	r0, [pc, #132]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a7c:	f002 fa0a 	bl	8002e94 <HAL_ADC_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a86:	f001 f92d 	bl	8001ce4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a92:	4619      	mov	r1, r3
 8000a94:	481a      	ldr	r0, [pc, #104]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a96:	f003 fe2b 	bl	80046f0 <HAL_ADCEx_MultiModeConfigChannel>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000aa0:	f001 f920 	bl	8001ce4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <MX_ADC1_Init+0x110>)
 8000aa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aa8:	2306      	movs	r3, #6
 8000aaa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000aac:	2307      	movs	r3, #7
 8000aae:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ab0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ab4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000aca:	f002 fdeb 	bl	80036a4 <HAL_ADC_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000ad4:	f001 f906 	bl	8001ce4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_ADC1_Init+0x114>)
 8000ada:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000adc:	230c      	movs	r3, #12
 8000ade:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000ae0:	2306      	movs	r3, #6
 8000ae2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000aea:	f002 fddb 	bl	80036a4 <HAL_ADC_ConfigChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000af4:	f001 f8f6 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	3730      	adds	r7, #48	@ 0x30
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	24000240 	.word	0x24000240
 8000b04:	40022000 	.word	0x40022000
 8000b08:	08600004 	.word	0x08600004
 8000b0c:	14f00020 	.word	0x14f00020

08000b10 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	@ 0x28
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2224      	movs	r2, #36	@ 0x24
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f00e f9c6 	bl	800eeae <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b22:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b24:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd8 <MX_ADC2_Init+0xc8>)
 8000b26:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b28:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b2e:	4b29      	ldr	r3, [pc, #164]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b30:	2208      	movs	r2, #8
 8000b32:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b34:	4b27      	ldr	r3, [pc, #156]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b3a:	4b26      	ldr	r3, [pc, #152]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b3c:	2204      	movs	r2, #4
 8000b3e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b40:	4b24      	ldr	r3, [pc, #144]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b46:	4b23      	ldr	r3, [pc, #140]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000b4c:	4b21      	ldr	r3, [pc, #132]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b52:	4b20      	ldr	r3, [pc, #128]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b60:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b66:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b6c:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b72:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000b78:	4b16      	ldr	r3, [pc, #88]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000b80:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b86:	4813      	ldr	r0, [pc, #76]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b88:	f002 f984 	bl	8002e94 <HAL_ADC_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000b92:	f001 f8a7 	bl	8001ce4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_ADC2_Init+0xcc>)
 8000b98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b9a:	2306      	movs	r3, #6
 8000b9c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ba2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ba6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4806      	ldr	r0, [pc, #24]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000bbc:	f002 fd72 	bl	80036a4 <HAL_ADC_ConfigChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000bc6:	f001 f88d 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	3728      	adds	r7, #40	@ 0x28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	240002b0 	.word	0x240002b0
 8000bd8:	40022100 	.word	0x40022100
 8000bdc:	14f00020 	.word	0x14f00020

08000be0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000be6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c20 <MX_CRC_Init+0x40>)
 8000be8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000c0a:	f003 ffdb 	bl	8004bc4 <HAL_CRC_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c14:	f001 f866 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	24000320 	.word	0x24000320
 8000c20:	58024c00 	.word	0x58024c00

08000c24 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000c28:	4b1a      	ldr	r3, [pc, #104]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8000c98 <MX_DMA2D_Init+0x74>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_PFC;
 8000c2e:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c30:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c34:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000c36:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c38:	2202      	movs	r2, #2
 8000c3a:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000c3c:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000c42:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000c48:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c6e:	f004 faef 	bl	8005250 <HAL_DMA2D_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_DMA2D_Init+0x58>
  {
    Error_Handler();
 8000c78:	f001 f834 	bl	8001ce4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c80:	f004 fb4a 	bl	8005318 <HAL_DMA2D_ConfigLayer>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_DMA2D_Init+0x6a>
  {
    Error_Handler();
 8000c8a:	f001 f82b 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	24000344 	.word	0x24000344
 8000c98:	52001000 	.word	0x52001000

08000c9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d14 <MX_I2C1_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d18 <MX_I2C1_Init+0x7c>)
 8000caa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cac:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd6:	480e      	ldr	r0, [pc, #56]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cd8:	f004 fdc0 	bl	800585c <HAL_I2C_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ce2:	f000 ffff 	bl	8001ce4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4809      	ldr	r0, [pc, #36]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cea:	f006 ffbd 	bl	8007c68 <HAL_I2CEx_ConfigAnalogFilter>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cf4:	f000 fff6 	bl	8001ce4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cfc:	f006 ffff 	bl	8007cfe <HAL_I2CEx_ConfigDigitalFilter>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d06:	f000 ffed 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	240003ac 	.word	0x240003ac
 8000d14:	40005400 	.word	0x40005400
 8000d18:	10b0dcfb 	.word	0x10b0dcfb

08000d1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d20:	4b28      	ldr	r3, [pc, #160]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d22:	4a29      	ldr	r2, [pc, #164]	@ (8000dc8 <MX_SPI1_Init+0xac>)
 8000d24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d26:	4b27      	ldr	r3, [pc, #156]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d28:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000d2e:	4b25      	ldr	r3, [pc, #148]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d30:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000d34:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d36:	4b23      	ldr	r3, [pc, #140]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d3c:	4b21      	ldr	r3, [pc, #132]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d42:	4b20      	ldr	r3, [pc, #128]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d48:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d4a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000d50:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d52:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000d56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d64:	4b17      	ldr	r3, [pc, #92]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d70:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d76:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d78:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000db0:	f00a fb62 	bl	800b478 <HAL_SPI_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000dba:	f000 ff93 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	24000400 	.word	0x24000400
 8000dc8:	40013000 	.word	0x40013000

08000dcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	@ 0x38
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]
 8000dfa:	615a      	str	r2, [r3, #20]
 8000dfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19200-1;
 8000e06:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e08:	f644 22ff 	movw	r2, #19199	@ 0x4aff
 8000e0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0e:	4b28      	ldr	r3, [pc, #160]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000e14:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e16:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1c:	4b24      	ldr	r3, [pc, #144]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e22:	4b23      	ldr	r3, [pc, #140]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e28:	4821      	ldr	r0, [pc, #132]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e2a:	f00a ff20 	bl	800bc6e <HAL_TIM_Base_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000e34:	f000 ff56 	bl	8001ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e42:	4619      	mov	r1, r3
 8000e44:	481a      	ldr	r0, [pc, #104]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e46:	f00b fc63 	bl	800c710 <HAL_TIM_ConfigClockSource>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000e50:	f000 ff48 	bl	8001ce4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000e54:	4816      	ldr	r0, [pc, #88]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e56:	f00a ffe7 	bl	800be28 <HAL_TIM_OC_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000e60:	f000 ff40 	bl	8001ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	480f      	ldr	r0, [pc, #60]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e74:	f00c f9b2 	bl	800d1dc <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000e7e:	f000 ff31 	bl	8001ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e92:	463b      	mov	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e9a:	f00b faab 	bl	800c3f4 <HAL_TIM_OC_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000ea4:	f000 ff1e 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3738      	adds	r7, #56	@ 0x38
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	24000488 	.word	0x24000488

08000eb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08e      	sub	sp, #56	@ 0x38
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]
 8000ee2:	615a      	str	r2, [r3, #20]
 8000ee4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ee6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8000fa0 <MX_TIM3_Init+0xec>)
 8000eea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 192-1;
 8000eec:	4b2b      	ldr	r3, [pc, #172]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000eee:	22bf      	movs	r2, #191	@ 0xbf
 8000ef0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000ef8:	4b28      	ldr	r3, [pc, #160]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000efa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000efe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f00:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f06:	4b25      	ldr	r3, [pc, #148]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000f08:	2280      	movs	r2, #128	@ 0x80
 8000f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f0c:	4823      	ldr	r0, [pc, #140]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000f0e:	f00a feae 	bl	800bc6e <HAL_TIM_Base_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f18:	f000 fee4 	bl	8001ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f26:	4619      	mov	r1, r3
 8000f28:	481c      	ldr	r0, [pc, #112]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000f2a:	f00b fbf1 	bl	800c710 <HAL_TIM_ConfigClockSource>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000f34:	f000 fed6 	bl	8001ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f38:	4818      	ldr	r0, [pc, #96]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000f3a:	f00a ffd6 	bl	800beea <HAL_TIM_PWM_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f44:	f000 fece 	bl	8001ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	4811      	ldr	r0, [pc, #68]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000f58:	f00c f940 	bl	800d1dc <HAL_TIMEx_MasterConfigSynchronization>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f62:	f000 febf 	bl	8001ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f66:	2360      	movs	r3, #96	@ 0x60
 8000f68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f76:	463b      	mov	r3, r7
 8000f78:	2208      	movs	r2, #8
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000f7e:	f00b fab3 	bl	800c4e8 <HAL_TIM_PWM_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f88:	f000 feac 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f8c:	4803      	ldr	r0, [pc, #12]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000f8e:	f001 f975 	bl	800227c <HAL_TIM_MspPostInit>

}
 8000f92:	bf00      	nop
 8000f94:	3738      	adds	r7, #56	@ 0x38
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	240004d4 	.word	0x240004d4
 8000fa0:	40000400 	.word	0x40000400

08000fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08c      	sub	sp, #48	@ 0x30
 8000fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fba:	4bbe      	ldr	r3, [pc, #760]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc0:	4abc      	ldr	r2, [pc, #752]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fca:	4bba      	ldr	r3, [pc, #744]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd0:	f003 0310 	and.w	r3, r3, #16
 8000fd4:	61bb      	str	r3, [r7, #24]
 8000fd6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd8:	4bb6      	ldr	r3, [pc, #728]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fde:	4ab5      	ldr	r2, [pc, #724]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8000fe0:	f043 0304 	orr.w	r3, r3, #4
 8000fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe8:	4bb2      	ldr	r3, [pc, #712]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff6:	4baf      	ldr	r3, [pc, #700]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffc:	4aad      	ldr	r2, [pc, #692]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8000ffe:	f043 0320 	orr.w	r3, r3, #32
 8001002:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001006:	4bab      	ldr	r3, [pc, #684]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100c:	f003 0320 	and.w	r3, r3, #32
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4ba7      	ldr	r3, [pc, #668]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101a:	4aa6      	ldr	r2, [pc, #664]	@ (80012b4 <MX_GPIO_Init+0x310>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001024:	4ba3      	ldr	r3, [pc, #652]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4ba0      	ldr	r3, [pc, #640]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001038:	4a9e      	ldr	r2, [pc, #632]	@ (80012b4 <MX_GPIO_Init+0x310>)
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001042:	4b9c      	ldr	r3, [pc, #624]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001050:	4b98      	ldr	r3, [pc, #608]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001056:	4a97      	ldr	r2, [pc, #604]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800105c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001060:	4b94      	ldr	r3, [pc, #592]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106e:	4b91      	ldr	r3, [pc, #580]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001074:	4a8f      	ldr	r2, [pc, #572]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001076:	f043 0308 	orr.w	r3, r3, #8
 800107a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800107e:	4b8d      	ldr	r3, [pc, #564]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001092:	4889      	ldr	r0, [pc, #548]	@ (80012b8 <MX_GPIO_Init+0x314>)
 8001094:	f004 fbae 	bl	80057f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SOLENOID_LOCK_Pin|LAMP_Pin|ULTRASONIC_ENABLE_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	f241 0103 	movw	r1, #4099	@ 0x1003
 800109e:	4887      	ldr	r0, [pc, #540]	@ (80012bc <MX_GPIO_Init+0x318>)
 80010a0:	f004 fba8 	bl	80057f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2108      	movs	r1, #8
 80010a8:	4885      	ldr	r0, [pc, #532]	@ (80012c0 <MX_GPIO_Init+0x31c>)
 80010aa:	f004 fba3 	bl	80057f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SOLENOID_CLAMP_Pin|SOLENOID_TEAR_2_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2118      	movs	r1, #24
 80010b2:	4884      	ldr	r0, [pc, #528]	@ (80012c4 <MX_GPIO_Init+0x320>)
 80010b4:	f004 fb9e 	bl	80057f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010b8:	2304      	movs	r3, #4
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80010c8:	2309      	movs	r3, #9
 80010ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	487d      	ldr	r0, [pc, #500]	@ (80012c8 <MX_GPIO_Init+0x324>)
 80010d4:	f004 f9ce 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : HEATER_TEMP_Pin TOUCHSCREEN_Y_Pin TOUCHSCREEN_X_Pin */
  GPIO_InitStruct.Pin = HEATER_TEMP_Pin|TOUCHSCREEN_Y_Pin|TOUCHSCREEN_X_Pin;
 80010d8:	230b      	movs	r3, #11
 80010da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010dc:	2303      	movs	r3, #3
 80010de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4619      	mov	r1, r3
 80010ea:	4877      	ldr	r0, [pc, #476]	@ (80012c8 <MX_GPIO_Init+0x324>)
 80010ec:	f004 f9c2 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80010f0:	2370      	movs	r3, #112	@ 0x70
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001100:	230d      	movs	r3, #13
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	486f      	ldr	r0, [pc, #444]	@ (80012c8 <MX_GPIO_Init+0x324>)
 800110c:	f004 f9b2 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : SOLENOID_TEAR_1_Pin */
  GPIO_InitStruct.Pin = SOLENOID_TEAR_1_Pin;
 8001110:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SOLENOID_TEAR_1_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	4863      	ldr	r0, [pc, #396]	@ (80012b8 <MX_GPIO_Init+0x314>)
 800112a:	f004 f9a3 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : SOLENOID_LOCK_Pin LAMP_Pin ULTRASONIC_ENABLE_Pin */
  GPIO_InitStruct.Pin = SOLENOID_LOCK_Pin|LAMP_Pin|ULTRASONIC_ENABLE_Pin;
 800112e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	485d      	ldr	r0, [pc, #372]	@ (80012bc <MX_GPIO_Init+0x318>)
 8001148:	f004 f994 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEATER_Pin */
  GPIO_InitStruct.Pin = HEATER_Pin;
 800114c:	2304      	movs	r3, #4
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001150:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	4856      	ldr	r0, [pc, #344]	@ (80012bc <MX_GPIO_Init+0x318>)
 8001162:	f004 f987 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PLATFORM_TOUCH_Pin */
  GPIO_InitStruct.Pin = PLATFORM_TOUCH_Pin;
 8001166:	2308      	movs	r3, #8
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800116a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800116e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001170:	2301      	movs	r3, #1
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PLATFORM_TOUCH_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	4850      	ldr	r0, [pc, #320]	@ (80012bc <MX_GPIO_Init+0x318>)
 800117c:	f004 f97a 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULTRASONIC_CURRENT_Pin ULTRASONIC_VOLTAGE_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_CURRENT_Pin|ULTRASONIC_VOLTAGE_Pin;
 8001180:	2330      	movs	r3, #48	@ 0x30
 8001182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001184:	2303      	movs	r3, #3
 8001186:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	484a      	ldr	r0, [pc, #296]	@ (80012bc <MX_GPIO_Init+0x318>)
 8001194:	f004 f96e 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001198:	f44f 7350 	mov.w	r3, #832	@ 0x340
 800119c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80011aa:	230a      	movs	r3, #10
 80011ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	4841      	ldr	r0, [pc, #260]	@ (80012bc <MX_GPIO_Init+0x318>)
 80011b6:	f004 f95d 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_START_BOND_Pin */
  GPIO_InitStruct.Pin = BUTTON_START_BOND_Pin;
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_START_BOND_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	483b      	ldr	r0, [pc, #236]	@ (80012bc <MX_GPIO_Init+0x318>)
 80011ce:	f004 f951 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80011e4:	2309      	movs	r3, #9
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	4833      	ldr	r0, [pc, #204]	@ (80012bc <MX_GPIO_Init+0x318>)
 80011f0:	f004 f940 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8001204:	230b      	movs	r3, #11
 8001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	482a      	ldr	r0, [pc, #168]	@ (80012b8 <MX_GPIO_Init+0x314>)
 8001210:	f004 f930 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001214:	2302      	movs	r3, #2
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001224:	230a      	movs	r3, #10
 8001226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4619      	mov	r1, r3
 800122e:	4822      	ldr	r0, [pc, #136]	@ (80012b8 <MX_GPIO_Init+0x314>)
 8001230:	f004 f920 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001234:	230c      	movs	r3, #12
 8001236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 8001244:	2304      	movs	r3, #4
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	481a      	ldr	r0, [pc, #104]	@ (80012b8 <MX_GPIO_Init+0x314>)
 8001250:	f004 f910 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001254:	2302      	movs	r3, #2
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_OCTOSPIM_P1;
 8001264:	230c      	movs	r3, #12
 8001266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	4814      	ldr	r0, [pc, #80]	@ (80012c0 <MX_GPIO_Init+0x31c>)
 8001270:	f004 f900 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001274:	2308      	movs	r3, #8
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	480d      	ldr	r0, [pc, #52]	@ (80012c0 <MX_GPIO_Init+0x31c>)
 800128c:	f004 f8f2 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10;
 8001290:	f44f 63ca 	mov.w	r3, #1616	@ 0x650
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012a2:	230d      	movs	r3, #13
 80012a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <MX_GPIO_Init+0x31c>)
 80012ae:	f004 f8e1 	bl	8005474 <HAL_GPIO_Init>
 80012b2:	e00b      	b.n	80012cc <MX_GPIO_Init+0x328>
 80012b4:	58024400 	.word	0x58024400
 80012b8:	58020800 	.word	0x58020800
 80012bc:	58021400 	.word	0x58021400
 80012c0:	58020000 	.word	0x58020000
 80012c4:	58020400 	.word	0x58020400
 80012c8:	58021000 	.word	0x58021000

  /*Configure GPIO pins : PA7 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12;
 80012cc:	f44f 53c4 	mov.w	r3, #6272	@ 0x1880
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012de:	230e      	movs	r3, #14
 80012e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	488f      	ldr	r0, [pc, #572]	@ (8001528 <MX_GPIO_Init+0x584>)
 80012ea:	f004 f8c3 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC7 PC10
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10
 80012ee:	f44f 53a7 	mov.w	r3, #5344	@ 0x14e0
 80012f2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001300:	230e      	movs	r3, #14
 8001302:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	4888      	ldr	r0, [pc, #544]	@ (800152c <MX_GPIO_Init+0x588>)
 800130c:	f004 f8b2 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001310:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001322:	230a      	movs	r3, #10
 8001324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	4880      	ldr	r0, [pc, #512]	@ (8001530 <MX_GPIO_Init+0x58c>)
 800132e:	f004 f8a1 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001332:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8001344:	230b      	movs	r3, #11
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	4878      	ldr	r0, [pc, #480]	@ (8001530 <MX_GPIO_Init+0x58c>)
 8001350:	f004 f890 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001354:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001366:	230e      	movs	r3, #14
 8001368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	486f      	ldr	r0, [pc, #444]	@ (8001530 <MX_GPIO_Init+0x58c>)
 8001372:	f004 f87f 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8;
 8001376:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001388:	230e      	movs	r3, #14
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4868      	ldr	r0, [pc, #416]	@ (8001534 <MX_GPIO_Init+0x590>)
 8001394:	f004 f86e 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001398:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013aa:	230e      	movs	r3, #14
 80013ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	4860      	ldr	r0, [pc, #384]	@ (8001538 <MX_GPIO_Init+0x594>)
 80013b6:	f004 f85d 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013cc:	230d      	movs	r3, #13
 80013ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	4855      	ldr	r0, [pc, #340]	@ (800152c <MX_GPIO_Init+0x588>)
 80013d8:	f004 f84c 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 80013ee:	230d      	movs	r3, #13
 80013f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	484b      	ldr	r0, [pc, #300]	@ (8001528 <MX_GPIO_Init+0x584>)
 80013fa:	f004 f83b 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001410:	2309      	movs	r3, #9
 8001412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	4843      	ldr	r0, [pc, #268]	@ (8001528 <MX_GPIO_Init+0x584>)
 800141c:	f004 f82a 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001420:	2304      	movs	r3, #4
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001430:	2309      	movs	r3, #9
 8001432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	4840      	ldr	r0, [pc, #256]	@ (800153c <MX_GPIO_Init+0x598>)
 800143c:	f004 f81a 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001440:	2308      	movs	r3, #8
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001450:	230d      	movs	r3, #13
 8001452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4838      	ldr	r0, [pc, #224]	@ (800153c <MX_GPIO_Init+0x598>)
 800145c:	f004 f80a 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001460:	2340      	movs	r3, #64	@ 0x40
 8001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001470:	230e      	movs	r3, #14
 8001472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	4830      	ldr	r0, [pc, #192]	@ (800153c <MX_GPIO_Init+0x598>)
 800147c:	f003 fffa 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001480:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001492:	230d      	movs	r3, #13
 8001494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	4619      	mov	r1, r3
 800149c:	4826      	ldr	r0, [pc, #152]	@ (8001538 <MX_GPIO_Init+0x594>)
 800149e:	f003 ffe9 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80014b4:	2309      	movs	r3, #9
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	4619      	mov	r1, r3
 80014be:	481e      	ldr	r0, [pc, #120]	@ (8001538 <MX_GPIO_Init+0x594>)
 80014c0:	f003 ffd8 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pins : SOLENOID_CLAMP_Pin SOLENOID_TEAR_2_Pin */
  GPIO_InitStruct.Pin = SOLENOID_CLAMP_Pin|SOLENOID_TEAR_2_Pin;
 80014c4:	2318      	movs	r3, #24
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4619      	mov	r1, r3
 80014da:	4816      	ldr	r0, [pc, #88]	@ (8001534 <MX_GPIO_Init+0x590>)
 80014dc:	f003 ffca 	bl	8005474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014e0:	2320      	movs	r3, #32
 80014e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_LTDC;
 80014f0:	2303      	movs	r3, #3
 80014f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	480e      	ldr	r0, [pc, #56]	@ (8001534 <MX_GPIO_Init+0x590>)
 80014fc:	f003 ffba 	bl	8005474 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(HEATER_EXTI_IRQn, 0, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	2008      	movs	r0, #8
 8001506:	f003 fab0 	bl	8004a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HEATER_EXTI_IRQn);
 800150a:	2008      	movs	r0, #8
 800150c:	f003 fac7 	bl	8004a9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(PLATFORM_TOUCH_EXTI_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2009      	movs	r0, #9
 8001516:	f003 faa8 	bl	8004a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PLATFORM_TOUCH_EXTI_IRQn);
 800151a:	2009      	movs	r0, #9
 800151c:	f003 fabf 	bl	8004a9e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001520:	bf00      	nop
 8001522:	3730      	adds	r7, #48	@ 0x30
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	58020000 	.word	0x58020000
 800152c:	58020800 	.word	0x58020800
 8001530:	58021000 	.word	0x58021000
 8001534:	58020400 	.word	0x58020400
 8001538:	58021800 	.word	0x58021800
 800153c:	58020c00 	.word	0x58020c00

08001540 <measure_joystick_and_send_to_slave>:

/* USER CODE BEGIN 4 */
void measure_joystick_and_send_to_slave(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	float divider;
	ADC_valX = ADC_Convert_Rank1() - 127.5 - 1.5;
 8001546:	f000 fb1d 	bl	8001b84 <ADC_Convert_Rank1>
 800154a:	eef0 7a40 	vmov.f32	s15, s0
 800154e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001552:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 8001688 <measure_joystick_and_send_to_slave+0x148>
 8001556:	ee37 7b46 	vsub.f64	d7, d7, d6
 800155a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800155e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001562:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001566:	4b4a      	ldr	r3, [pc, #296]	@ (8001690 <measure_joystick_and_send_to_slave+0x150>)
 8001568:	edc3 7a00 	vstr	s15, [r3]
	ADC_valY = ADC_Convert_Rank2() - 127.5 - 25.0;         // Read The ADC Conversion Result
 800156c:	f000 fb4c 	bl	8001c08 <ADC_Convert_Rank2>
 8001570:	eef0 7a40 	vmov.f32	s15, s0
 8001574:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001578:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 8001688 <measure_joystick_and_send_to_slave+0x148>
 800157c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001580:	eeb3 6b09 	vmov.f64	d6, #57	@ 0x41c80000  25.0
 8001584:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001588:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800158c:	4b41      	ldr	r3, [pc, #260]	@ (8001694 <measure_joystick_and_send_to_slave+0x154>)
 800158e:	edc3 7a00 	vstr	s15, [r3]
	/*
	 * Fine: /250.0
	 * Coarse: /50.0
	 */
	if (fine_adjustment)
 8001592:	4b41      	ldr	r3, [pc, #260]	@ (8001698 <measure_joystick_and_send_to_slave+0x158>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <measure_joystick_and_send_to_slave+0x60>
		divider = 150.0;
 800159a:	4b40      	ldr	r3, [pc, #256]	@ (800169c <measure_joystick_and_send_to_slave+0x15c>)
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	e001      	b.n	80015a4 <measure_joystick_and_send_to_slave+0x64>
	else
		divider = 25.0;
 80015a0:	4b3f      	ldr	r3, [pc, #252]	@ (80016a0 <measure_joystick_and_send_to_slave+0x160>)
 80015a2:	607b      	str	r3, [r7, #4]

	switch (control_mode)
 80015a4:	4b3f      	ldr	r3, [pc, #252]	@ (80016a4 <measure_joystick_and_send_to_slave+0x164>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d059      	beq.n	8001660 <measure_joystick_and_send_to_slave+0x120>
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d865      	bhi.n	800167c <measure_joystick_and_send_to_slave+0x13c>
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <measure_joystick_and_send_to_slave+0x7a>
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d045      	beq.n	8001644 <measure_joystick_and_send_to_slave+0x104>
		break;
	case 2:
		write_float_to_slave(ADDRESS_MOTOR_T, VIRTUAL_MEM_SPEED, speed_joystickT / divider);
		break;
	}
}
 80015b8:	e060      	b.n	800167c <measure_joystick_and_send_to_slave+0x13c>
		if (fabs(ADC_valX) > 40)
 80015ba:	4b35      	ldr	r3, [pc, #212]	@ (8001690 <measure_joystick_and_send_to_slave+0x150>)
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	eef0 7ae7 	vabs.f32	s15, s15
 80015c4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80016a8 <measure_joystick_and_send_to_slave+0x168>
 80015c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	dd04      	ble.n	80015dc <measure_joystick_and_send_to_slave+0x9c>
			speed_joystickX = ADC_valX;
 80015d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001690 <measure_joystick_and_send_to_slave+0x150>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a35      	ldr	r2, [pc, #212]	@ (80016ac <measure_joystick_and_send_to_slave+0x16c>)
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e003      	b.n	80015e4 <measure_joystick_and_send_to_slave+0xa4>
			speed_joystickX = 0;
 80015dc:	4b33      	ldr	r3, [pc, #204]	@ (80016ac <measure_joystick_and_send_to_slave+0x16c>)
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
		if (fabs(ADC_valY) > 40)
 80015e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001694 <measure_joystick_and_send_to_slave+0x154>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	eef0 7ae7 	vabs.f32	s15, s15
 80015ee:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80016a8 <measure_joystick_and_send_to_slave+0x168>
 80015f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fa:	dd04      	ble.n	8001606 <measure_joystick_and_send_to_slave+0xc6>
			speed_joystickY = ADC_valY;
 80015fc:	4b25      	ldr	r3, [pc, #148]	@ (8001694 <measure_joystick_and_send_to_slave+0x154>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a2b      	ldr	r2, [pc, #172]	@ (80016b0 <measure_joystick_and_send_to_slave+0x170>)
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	e003      	b.n	800160e <measure_joystick_and_send_to_slave+0xce>
			speed_joystickY = 0;
 8001606:	4b2a      	ldr	r3, [pc, #168]	@ (80016b0 <measure_joystick_and_send_to_slave+0x170>)
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
		write_float_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_SPEED, speed_joystickX / divider);
 800160e:	4b27      	ldr	r3, [pc, #156]	@ (80016ac <measure_joystick_and_send_to_slave+0x16c>)
 8001610:	ed93 7a00 	vldr	s14, [r3]
 8001614:	edd7 7a01 	vldr	s15, [r7, #4]
 8001618:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800161c:	eeb0 0a66 	vmov.f32	s0, s13
 8001620:	2101      	movs	r1, #1
 8001622:	2028      	movs	r0, #40	@ 0x28
 8001624:	f000 f9b0 	bl	8001988 <write_float_to_slave>
		write_float_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_SPEED, speed_joystickY / divider);
 8001628:	4b21      	ldr	r3, [pc, #132]	@ (80016b0 <measure_joystick_and_send_to_slave+0x170>)
 800162a:	ed93 7a00 	vldr	s14, [r3]
 800162e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001632:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001636:	eeb0 0a66 	vmov.f32	s0, s13
 800163a:	2101      	movs	r1, #1
 800163c:	202a      	movs	r0, #42	@ 0x2a
 800163e:	f000 f9a3 	bl	8001988 <write_float_to_slave>
		break;
 8001642:	e01b      	b.n	800167c <measure_joystick_and_send_to_slave+0x13c>
		write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_SPEED, speed_joystickZ / divider);
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <measure_joystick_and_send_to_slave+0x174>)
 8001646:	ed93 7a00 	vldr	s14, [r3]
 800164a:	edd7 7a01 	vldr	s15, [r7, #4]
 800164e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001652:	eeb0 0a66 	vmov.f32	s0, s13
 8001656:	2101      	movs	r1, #1
 8001658:	202c      	movs	r0, #44	@ 0x2c
 800165a:	f000 f995 	bl	8001988 <write_float_to_slave>
		break;
 800165e:	e00d      	b.n	800167c <measure_joystick_and_send_to_slave+0x13c>
		write_float_to_slave(ADDRESS_MOTOR_T, VIRTUAL_MEM_SPEED, speed_joystickT / divider);
 8001660:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <measure_joystick_and_send_to_slave+0x178>)
 8001662:	ed93 7a00 	vldr	s14, [r3]
 8001666:	edd7 7a01 	vldr	s15, [r7, #4]
 800166a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800166e:	eeb0 0a66 	vmov.f32	s0, s13
 8001672:	2101      	movs	r1, #1
 8001674:	202e      	movs	r0, #46	@ 0x2e
 8001676:	f000 f987 	bl	8001988 <write_float_to_slave>
		break;
 800167a:	bf00      	nop
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	f3af 8000 	nop.w
 8001688:	00000000 	.word	0x00000000
 800168c:	405fe000 	.word	0x405fe000
 8001690:	24000548 	.word	0x24000548
 8001694:	2400054c 	.word	0x2400054c
 8001698:	24000574 	.word	0x24000574
 800169c:	43160000 	.word	0x43160000
 80016a0:	41c80000 	.word	0x41c80000
 80016a4:	2400057c 	.word	0x2400057c
 80016a8:	42200000 	.word	0x42200000
 80016ac:	24000554 	.word	0x24000554
 80016b0:	24000558 	.word	0x24000558
 80016b4:	2400055c 	.word	0x2400055c
 80016b8:	24000560 	.word	0x24000560

080016bc <enter_jog_mode>:

// Enter into jog mode (XY movement with joystick)
void enter_jog_mode(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	write_uint32_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_MODE, SPD_MODE);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2105      	movs	r1, #5
 80016c4:	2028      	movs	r0, #40	@ 0x28
 80016c6:	f000 f983 	bl	80019d0 <write_uint32_to_slave>
	write_uint32_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_MODE, SPD_MODE);
 80016ca:	2201      	movs	r2, #1
 80016cc:	2105      	movs	r1, #5
 80016ce:	202a      	movs	r0, #42	@ 0x2a
 80016d0:	f000 f97e 	bl	80019d0 <write_uint32_to_slave>
	while (HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_RESET)
 80016d4:	e004      	b.n	80016e0 <enter_jog_mode+0x24>
	{
		measure_joystick_and_send_to_slave();
 80016d6:	f7ff ff33 	bl	8001540 <measure_joystick_and_send_to_slave>
		HAL_Delay(100);
 80016da:	2064      	movs	r0, #100	@ 0x64
 80016dc:	f001 f890 	bl	8002800 <HAL_Delay>
	while (HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_RESET)
 80016e0:	2180      	movs	r1, #128	@ 0x80
 80016e2:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <enter_jog_mode+0x38>)
 80016e4:	f004 f86e 	bl	80057c4 <HAL_GPIO_ReadPin>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f3      	beq.n	80016d6 <enter_jog_mode+0x1a>
	}
	//write_uint32_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_MODE, POS_MODE);
	//write_uint32_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_MODE, POS_MODE);
}
 80016ee:	bf00      	nop
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	58021400 	.word	0x58021400

080016f8 <read_temp_from_ADC>:
uint32_t index1=0, index2=1;
int32_t feedback_pred =0;


float read_temp_from_ADC(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
	uint32_t ADC_value;

	ADC_value = HAL_ADC_GetValue(&hadc2);
 80016fe:	4823      	ldr	r0, [pc, #140]	@ (800178c <read_temp_from_ADC+0x94>)
 8001700:	f001 ffc2 	bl	8003688 <HAL_ADC_GetValue>
 8001704:	60f8      	str	r0, [r7, #12]

	if (ADC_value < ADC_MIN)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 800170c:	d203      	bcs.n	8001716 <read_temp_from_ADC+0x1e>
	{
		ADC_value = ADC_MIN;
 800170e:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	e006      	b.n	8001724 <read_temp_from_ADC+0x2c>
	}
	else if (ADC_value > ADC_MAX)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f5b3 6f58 	cmp.w	r3, #3456	@ 0xd80
 800171c:	d902      	bls.n	8001724 <read_temp_from_ADC+0x2c>
	{
		ADC_value = ADC_MAX;
 800171e:	f44f 6358 	mov.w	r3, #3456	@ 0xd80
 8001722:	60fb      	str	r3, [r7, #12]

	//Read_temp = Tlook[ADC_value - 195];  //209

	// Interpolating...

	int16_t adc_index = (ADC_value >> DECIMATION) - (ADC_MIN >> DECIMATION);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	b29b      	uxth	r3, r3
 800172a:	3b09      	subs	r3, #9
 800172c:	b29b      	uxth	r3, r3
 800172e:	817b      	strh	r3, [r7, #10]

	int32_t delta_T = Tlook[adc_index + 1] - Tlook[adc_index];
 8001730:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001734:	3301      	adds	r3, #1
 8001736:	4a16      	ldr	r2, [pc, #88]	@ (8001790 <read_temp_from_ADC+0x98>)
 8001738:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800173c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001740:	4913      	ldr	r1, [pc, #76]	@ (8001790 <read_temp_from_ADC+0x98>)
 8001742:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	607b      	str	r3, [r7, #4]

	int16_t delta_ADC = ADC_value - ((adc_index + (ADC_MIN >> DECIMATION)) << DECIMATION);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	b29a      	uxth	r2, r3
 800174e:	897b      	ldrh	r3, [r7, #10]
 8001750:	3309      	adds	r3, #9
 8001752:	b29b      	uxth	r3, r3
 8001754:	015b      	lsls	r3, r3, #5
 8001756:	b29b      	uxth	r3, r3
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	b29b      	uxth	r3, r3
 800175c:	807b      	strh	r3, [r7, #2]

	return ((delta_T * delta_ADC) + (Tlook[adc_index] << DECIMATION)) >> DECIMATION;
 800175e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	fb03 f202 	mul.w	r2, r3, r2
 8001768:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800176c:	4908      	ldr	r1, [pc, #32]	@ (8001790 <read_temp_from_ADC+0x98>)
 800176e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001772:	015b      	lsls	r3, r3, #5
 8001774:	4413      	add	r3, r2
 8001776:	115b      	asrs	r3, r3, #5
 8001778:	ee07 3a90 	vmov	s15, r3
 800177c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001780:	eeb0 0a67 	vmov.f32	s0, s15
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	240002b0 	.word	0x240002b0
 8001790:	24000020 	.word	0x24000020

08001794 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	int32_t Read_temp, PI_error, PI_output, integral = 0, proportional, PI_prev_error = 0, limMaxInt = 0, limMinInt = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
 80017a0:	2300      	movs	r3, #0
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

	if(htim == &htim2) {
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a66      	ldr	r2, [pc, #408]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	f040 80c4 	bne.w	800193e <HAL_TIM_PeriodElapsedCallback+0x1aa>
		/* Read ADC */
		HAL_ADC_Start(&hadc2);
 80017b6:	4865      	ldr	r0, [pc, #404]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80017b8:	f001 fd74 	bl	80032a4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 1000);
 80017bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017c0:	4862      	ldr	r0, [pc, #392]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80017c2:	f001 fe6d 	bl	80034a0 <HAL_ADC_PollForConversion>
		Read_temp = read_temp_from_ADC();
 80017c6:	f7ff ff97 	bl	80016f8 <read_temp_from_ADC>
 80017ca:	eef0 7a40 	vmov.f32	s15, s0
 80017ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d2:	ee17 3a90 	vmov	r3, s15
 80017d6:	613b      	str	r3, [r7, #16]
		HAL_ADC_Stop(&hadc2);
 80017d8:	485c      	ldr	r0, [pc, #368]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80017da:	f001 fe2d 	bl	8003438 <HAL_ADC_Stop>

		measured_temperature_gauge = ((float)(Read_temp>>10)) - 273.5;
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	129b      	asrs	r3, r3, #10
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ea:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001950 <HAL_TIM_PeriodElapsedCallback+0x1bc>
 80017ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017f2:	4b58      	ldr	r3, [pc, #352]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80017f4:	edc3 7a00 	vstr	s15, [r3]
		temperature_testpoint = Read_temp;
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4a57      	ldr	r2, [pc, #348]	@ (8001958 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80017fc:	6013      	str	r3, [r2, #0]

		/* PI Controller */
		//error = setpoint - feedback_pred;
		PI_error = setpoint - Read_temp;
 80017fe:	4b57      	ldr	r3, [pc, #348]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	60fb      	str	r3, [r7, #12]

		proportional = Kp * PI_error;
 8001808:	225a      	movs	r2, #90	@ 0x5a
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	fb02 f303 	mul.w	r3, r2, r3
 8001810:	60bb      	str	r3, [r7, #8]

		// Dynamic Anti-wind-up limits calculation
		if (PLMAX > proportional && proportional >= 0) {
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001818:	da07      	bge.n	800182a <HAL_TIM_PeriodElapsedCallback+0x96>
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db04      	blt.n	800182a <HAL_TIM_PeriodElapsedCallback+0x96>
			limMaxInt = PLMAX - proportional;
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001826:	61fb      	str	r3, [r7, #28]
 8001828:	e001      	b.n	800182e <HAL_TIM_PeriodElapsedCallback+0x9a>
		}
		else {
			limMaxInt = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
		}

		integral = integral + Ki * Sample_time * (PI_prev_error + PI_error);
 800182e:	2300      	movs	r3, #0
 8001830:	2201      	movs	r2, #1
 8001832:	fb02 f303 	mul.w	r3, r2, r3
 8001836:	69b9      	ldr	r1, [r7, #24]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	440a      	add	r2, r1
 800183c:	fb02 f303 	mul.w	r3, r2, r3
 8001840:	6a3a      	ldr	r2, [r7, #32]
 8001842:	4413      	add	r3, r2
 8001844:	623b      	str	r3, [r7, #32]
		PI_prev_error = PI_error;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	61bb      	str	r3, [r7, #24]

		// Anti-wind-up integrator limits clamping
		if (integral > limMaxInt) {
 800184a:	6a3a      	ldr	r2, [r7, #32]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	429a      	cmp	r2, r3
 8001850:	dd02      	ble.n	8001858 <HAL_TIM_PeriodElapsedCallback+0xc4>
			integral = limMaxInt;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	623b      	str	r3, [r7, #32]
 8001856:	e005      	b.n	8001864 <HAL_TIM_PeriodElapsedCallback+0xd0>
		}
		else if (integral < limMinInt) {
 8001858:	6a3a      	ldr	r2, [r7, #32]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	429a      	cmp	r2, r3
 800185e:	da01      	bge.n	8001864 <HAL_TIM_PeriodElapsedCallback+0xd0>
			integral = limMinInt;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	623b      	str	r3, [r7, #32]
		}

		// output to PWM value conditioning
		PI_output = ((integral + proportional) >> 10) * 50;
 8001864:	6a3a      	ldr	r2, [r7, #32]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	4413      	add	r3, r2
 800186a:	129b      	asrs	r3, r3, #10
 800186c:	2232      	movs	r2, #50	@ 0x32
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24

		if (PI_output > OLMAX) {
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001876:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800187a:	dd03      	ble.n	8001884 <HAL_TIM_PeriodElapsedCallback+0xf0>
			PI_output = 1000;
 800187c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
 8001882:	e004      	b.n	800188e <HAL_TIM_PeriodElapsedCallback+0xfa>
		}
		else if (PI_output < 0) {
 8001884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001886:	2b00      	cmp	r3, #0
 8001888:	da01      	bge.n	800188e <HAL_TIM_PeriodElapsedCallback+0xfa>
			PI_output = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		/* End PI Controller */

		TIM3->CCR3 = PI_output;
 800188e:	4a34      	ldr	r2, [pc, #208]	@ (8001960 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001892:	63d3      	str	r3, [r2, #60]	@ 0x3c

		// Output diventa 2^10
		output2 = PI_output * 20;
 8001894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	461a      	mov	r2, r3
 80018a0:	4b30      	ldr	r3, [pc, #192]	@ (8001964 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80018a2:	601a      	str	r2, [r3, #0]

		// 2^20 -> 2^10
		in_model = (((output2 * output2) >> 10) * 82) >> 10;
 80018a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001964 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001964 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	129b      	asrs	r3, r3, #10
 80018b2:	2252      	movs	r2, #82	@ 0x52
 80018b4:	fb02 f303 	mul.w	r3, r2, r3
 80018b8:	129b      	asrs	r3, r3, #10
 80018ba:	4a2b      	ldr	r2, [pc, #172]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80018bc:	6013      	str	r3, [r2, #0]

		//L'uscita è 2^10
		out_model =  (out_model_prev * ad + bu * in_model + bd * in_model_prev) >> 16;
 80018be:	4b2b      	ldr	r3, [pc, #172]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f64f 72c5 	movw	r2, #65477	@ 0xffc5
 80018c6:	fb03 f202 	mul.w	r2, r3, r2
 80018ca:	21d1      	movs	r1, #209	@ 0xd1
 80018cc:	4b26      	ldr	r3, [pc, #152]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	441a      	add	r2, r3
 80018d6:	21d1      	movs	r1, #209	@ 0xd1
 80018d8:	4b25      	ldr	r3, [pc, #148]	@ (8001970 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	141b      	asrs	r3, r3, #16
 80018e4:	4a23      	ldr	r2, [pc, #140]	@ (8001974 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80018e6:	6013      	str	r3, [r2, #0]

		in_model_prev = in_model;
 80018e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a20      	ldr	r2, [pc, #128]	@ (8001970 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80018ee:	6013      	str	r3, [r2, #0]
		out_model_prev = out_model;
 80018f0:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a1d      	ldr	r2, [pc, #116]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80018f6:	6013      	str	r3, [r2, #0]

		// Prendo primo blocco
		out_delayed = delay_vect[index1];
 80018f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a1f      	ldr	r2, [pc, #124]	@ (800197c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80018fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001902:	4a1f      	ldr	r2, [pc, #124]	@ (8001980 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001904:	6013      	str	r3, [r2, #0]

		delay_vect[index1] = out_model;
 8001906:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a1a      	ldr	r2, [pc, #104]	@ (8001974 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	491b      	ldr	r1, [pc, #108]	@ (800197c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		index1++;
 8001914:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	3301      	adds	r3, #1
 800191a:	4a17      	ldr	r2, [pc, #92]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800191c:	6013      	str	r3, [r2, #0]

		if (index1 > 21)
 800191e:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b15      	cmp	r3, #21
 8001924:	d902      	bls.n	800192c <HAL_TIM_PeriodElapsedCallback+0x198>
			index1 = 0;
 8001926:	4b14      	ldr	r3, [pc, #80]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]


		 feedback_pred = Read_temp - out_delayed + out_model;
 800192c:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	1ad2      	subs	r2, r2, r3
 8001934:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4413      	add	r3, r2
 800193a:	4a12      	ldr	r2, [pc, #72]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800193c:	6013      	str	r3, [r2, #0]

	}
}
 800193e:	bf00      	nop
 8001940:	3728      	adds	r7, #40	@ 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	24000488 	.word	0x24000488
 800194c:	240002b0 	.word	0x240002b0
 8001950:	4388c000 	.word	0x4388c000
 8001954:	24000528 	.word	0x24000528
 8001958:	24000544 	.word	0x24000544
 800195c:	2400001c 	.word	0x2400001c
 8001960:	40000400 	.word	0x40000400
 8001964:	24000590 	.word	0x24000590
 8001968:	24000588 	.word	0x24000588
 800196c:	24000584 	.word	0x24000584
 8001970:	24000580 	.word	0x24000580
 8001974:	2400058c 	.word	0x2400058c
 8001978:	240005f0 	.word	0x240005f0
 800197c:	24000598 	.word	0x24000598
 8001980:	24000594 	.word	0x24000594
 8001984:	240005f4 	.word	0x240005f4

08001988 <write_float_to_slave>:


void write_float_to_slave(uint8_t slave_address, uint8_t virtual_memory_address, float value)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af02      	add	r7, sp, #8
 800198e:	4603      	mov	r3, r0
 8001990:	460a      	mov	r2, r1
 8001992:	ed87 0a00 	vstr	s0, [r7]
 8001996:	71fb      	strb	r3, [r7, #7]
 8001998:	4613      	mov	r3, r2
 800199a:	71bb      	strb	r3, [r7, #6]
	ui32_to_f conv;
	conv.f = value;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	60fb      	str	r3, [r7, #12]
	prepare_WRITE_packet(tx_buffer, virtual_memory_address, conv.ui32);
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	4619      	mov	r1, r3
 80019a6:	4808      	ldr	r0, [pc, #32]	@ (80019c8 <write_float_to_slave+0x40>)
 80019a8:	f000 f9b4 	bl	8001d14 <prepare_WRITE_packet>
	HAL_I2C_Master_Transmit(&hi2c1, slave_address, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	b299      	uxth	r1, r3
 80019b0:	2364      	movs	r3, #100	@ 0x64
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2320      	movs	r3, #32
 80019b6:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <write_float_to_slave+0x40>)
 80019b8:	4804      	ldr	r0, [pc, #16]	@ (80019cc <write_float_to_slave+0x44>)
 80019ba:	f003 ffeb 	bl	8005994 <HAL_I2C_Master_Transmit>
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	240005f8 	.word	0x240005f8
 80019cc:	240003ac 	.word	0x240003ac

080019d0 <write_uint32_to_slave>:

void write_uint32_to_slave(uint8_t slave_address, uint8_t virtual_memory_address, uint32_t value)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	4603      	mov	r3, r0
 80019d8:	603a      	str	r2, [r7, #0]
 80019da:	71fb      	strb	r3, [r7, #7]
 80019dc:	460b      	mov	r3, r1
 80019de:	71bb      	strb	r3, [r7, #6]
	prepare_WRITE_packet(tx_buffer, virtual_memory_address, value);
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	4808      	ldr	r0, [pc, #32]	@ (8001a08 <write_uint32_to_slave+0x38>)
 80019e8:	f000 f994 	bl	8001d14 <prepare_WRITE_packet>
	HAL_I2C_Master_Transmit(&hi2c1, slave_address, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	b299      	uxth	r1, r3
 80019f0:	2364      	movs	r3, #100	@ 0x64
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2320      	movs	r3, #32
 80019f6:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <write_uint32_to_slave+0x38>)
 80019f8:	4804      	ldr	r0, [pc, #16]	@ (8001a0c <write_uint32_to_slave+0x3c>)
 80019fa:	f003 ffcb 	bl	8005994 <HAL_I2C_Master_Transmit>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	240005f8 	.word	0x240005f8
 8001a0c:	240003ac 	.word	0x240003ac

08001a10 <perform_bond>:

void perform_bond(uint32_t bond_time)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	//Perform the bond

	//Enable the ultrasonic driver
	HAL_GPIO_WritePin(ULTRASONIC_ENABLE_GPIO_Port, ULTRASONIC_ENABLE_Pin, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a1e:	480f      	ldr	r0, [pc, #60]	@ (8001a5c <perform_bond+0x4c>)
 8001a20:	f003 fee8 	bl	80057f4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001a24:	2064      	movs	r0, #100	@ 0x64
 8001a26:	f000 feeb 	bl	8002800 <HAL_Delay>
	write_bond_power_to_trimmer(bond_power);
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <perform_bond+0x50>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f82a 	bl	8001a88 <write_bond_power_to_trimmer>
	HAL_Delay(bond_time);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 fee3 	bl	8002800 <HAL_Delay>
	write_bond_power_to_trimmer(0);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f000 f824 	bl	8001a88 <write_bond_power_to_trimmer>
	HAL_Delay(100);
 8001a40:	2064      	movs	r0, #100	@ 0x64
 8001a42:	f000 fedd 	bl	8002800 <HAL_Delay>
	//Disable the ultrasonic driver
	HAL_GPIO_WritePin(ULTRASONIC_ENABLE_GPIO_Port, ULTRASONIC_ENABLE_Pin, GPIO_PIN_SET);
 8001a46:	2201      	movs	r2, #1
 8001a48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a4c:	4803      	ldr	r0, [pc, #12]	@ (8001a5c <perform_bond+0x4c>)
 8001a4e:	f003 fed1 	bl	80057f4 <HAL_GPIO_WritePin>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	58021400 	.word	0x58021400
 8001a60:	24000010 	.word	0x24000010

08001a64 <wait_for_button_release>:

void wait_for_button_release(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_SET)
 8001a68:	e002      	b.n	8001a70 <wait_for_button_release+0xc>
		HAL_Delay(100);
 8001a6a:	2064      	movs	r0, #100	@ 0x64
 8001a6c:	f000 fec8 	bl	8002800 <HAL_Delay>
	while(HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_SET)
 8001a70:	2180      	movs	r1, #128	@ 0x80
 8001a72:	4804      	ldr	r0, [pc, #16]	@ (8001a84 <wait_for_button_release+0x20>)
 8001a74:	f003 fea6 	bl	80057c4 <HAL_GPIO_ReadPin>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d0f5      	beq.n	8001a6a <wait_for_button_release+0x6>
}
 8001a7e:	bf00      	nop
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	58021400 	.word	0x58021400

08001a88 <write_bond_power_to_trimmer>:
	// Wait for the user to release the button
	wait_for_button_release();
}

void write_bond_power_to_trimmer(uint8_t bond_power)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
	uint8_t payload[2] = {0x11, bond_power};
 8001a92:	2311      	movs	r3, #17
 8001a94:	733b      	strb	r3, [r7, #12]
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2108      	movs	r1, #8
 8001a9e:	4809      	ldr	r0, [pc, #36]	@ (8001ac4 <write_bond_power_to_trimmer+0x3c>)
 8001aa0:	f003 fea8 	bl	80057f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, payload, 2, 100);
 8001aa4:	f107 010c 	add.w	r1, r7, #12
 8001aa8:	2364      	movs	r3, #100	@ 0x64
 8001aaa:	2202      	movs	r2, #2
 8001aac:	4806      	ldr	r0, [pc, #24]	@ (8001ac8 <write_bond_power_to_trimmer+0x40>)
 8001aae:	f009 fe07 	bl	800b6c0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2108      	movs	r1, #8
 8001ab6:	4803      	ldr	r0, [pc, #12]	@ (8001ac4 <write_bond_power_to_trimmer+0x3c>)
 8001ab8:	f003 fe9c 	bl	80057f4 <HAL_GPIO_WritePin>

	return;
 8001abc:	bf00      	nop
}
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	58020000 	.word	0x58020000
 8001ac8:	24000400 	.word	0x24000400

08001acc <HAL_GPIO_EXTI_Callback>:
/**
 * @brief Handles the GPIO callback
 * @param GPIO_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PLATFORM_TOUCH_Pin)
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d102      	bne.n	8001ae2 <HAL_GPIO_EXTI_Callback+0x16>
	{
		head_touched = true;
 8001adc:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <HAL_GPIO_EXTI_Callback+0x24>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
	}
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	24000540 	.word	0x24000540

08001af4 <execute_write_command>:

int execute_write_command(uint8_t write_address, uint32_t data)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
	int ret_val = COMM_ERR;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	60fb      	str	r3, [r7, #12]
	ui32_to_f conv;
	conv.ui32 = data;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	60bb      	str	r3, [r7, #8]

	switch (write_address)
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d108      	bne.n	8001b22 <execute_write_command+0x2e>
	{
	case VIRTUAL_MEM_POSITION_MEAS:
		read_position = conv.f;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4a09      	ldr	r2, [pc, #36]	@ (8001b38 <execute_write_command+0x44>)
 8001b14:	6013      	str	r3, [r2, #0]
		data_ready = true;
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <execute_write_command+0x48>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	701a      	strb	r2, [r3, #0]
		ret_val = COMM_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
		break;
 8001b20:	e003      	b.n	8001b2a <execute_write_command+0x36>

	default:
		ret_val = COMM_ERR;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	60fb      	str	r3, [r7, #12]
		break;
 8001b28:	bf00      	nop
	}

	return ret_val;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	2400053c 	.word	0x2400053c
 8001b3c:	24000541 	.word	0x24000541

08001b40 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c1)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	//Perform different actions based on the received command
	switch (rx_buffer[0])
 8001b48:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <HAL_I2C_MasterRxCpltCallback+0x38>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d10e      	bne.n	8001b6e <HAL_I2C_MasterRxCpltCallback+0x2e>
	{
	case COMMAND_WRITE:
		read_data_from_WRITE_command(rx_buffer, &received_address, &received_data);
 8001b50:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <HAL_I2C_MasterRxCpltCallback+0x3c>)
 8001b52:	490b      	ldr	r1, [pc, #44]	@ (8001b80 <HAL_I2C_MasterRxCpltCallback+0x40>)
 8001b54:	4808      	ldr	r0, [pc, #32]	@ (8001b78 <HAL_I2C_MasterRxCpltCallback+0x38>)
 8001b56:	f000 f926 	bl	8001da6 <read_data_from_WRITE_command>
		execute_write_command(received_address, received_data);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_I2C_MasterRxCpltCallback+0x40>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	4a07      	ldr	r2, [pc, #28]	@ (8001b7c <HAL_I2C_MasterRxCpltCallback+0x3c>)
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ffc5 	bl	8001af4 <execute_write_command>
		break;
 8001b6a:	bf00      	nop
	}
	return;
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
}
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	24000618 	.word	0x24000618
 8001b7c:	24000534 	.word	0x24000534
 8001b80:	24000538 	.word	0x24000538

08001b84 <ADC_Convert_Rank1>:


float ADC_Convert_Rank1 (void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	@ 0x28
 8001b88:	af00      	add	r7, sp, #0
	/* Configure channel */
	ADC_ChannelConfTypeDef sConfig = {0};
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	2224      	movs	r2, #36	@ 0x24
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f00d f98c 	bl	800eeae <memset>
	sConfig.Channel = ADC_CHANNEL_2;
 8001b96:	4b1a      	ldr	r3, [pc, #104]	@ (8001c00 <ADC_Convert_Rank1+0x7c>)
 8001b98:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b9a:	2306      	movs	r3, #6
 8001b9c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ba2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001ba6:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ba8:	2304      	movs	r3, #4
 8001baa:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4812      	ldr	r0, [pc, #72]	@ (8001c04 <ADC_Convert_Rank1+0x80>)
 8001bbc:	f001 fd72 	bl	80036a4 <HAL_ADC_ConfigChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <ADC_Convert_Rank1+0x46>
	{
		Error_Handler();
 8001bc6:	f000 f88d 	bl	8001ce4 <Error_Handler>
	}
	/* Convert the Channel */
	HAL_ADC_Start(&hadc1);
 8001bca:	480e      	ldr	r0, [pc, #56]	@ (8001c04 <ADC_Convert_Rank1+0x80>)
 8001bcc:	f001 fb6a 	bl	80032a4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001bd0:	2164      	movs	r1, #100	@ 0x64
 8001bd2:	480c      	ldr	r0, [pc, #48]	@ (8001c04 <ADC_Convert_Rank1+0x80>)
 8001bd4:	f001 fc64 	bl	80034a0 <HAL_ADC_PollForConversion>
	float adcval = HAL_ADC_GetValue(&hadc1);
 8001bd8:	480a      	ldr	r0, [pc, #40]	@ (8001c04 <ADC_Convert_Rank1+0x80>)
 8001bda:	f001 fd55 	bl	8003688 <HAL_ADC_GetValue>
 8001bde:	ee07 0a90 	vmov	s15, r0
 8001be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	HAL_ADC_Stop(&hadc1);
 8001bea:	4806      	ldr	r0, [pc, #24]	@ (8001c04 <ADC_Convert_Rank1+0x80>)
 8001bec:	f001 fc24 	bl	8003438 <HAL_ADC_Stop>
	return adcval;
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	ee07 3a90 	vmov	s15, r3
}
 8001bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfa:	3728      	adds	r7, #40	@ 0x28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	08600004 	.word	0x08600004
 8001c04:	24000240 	.word	0x24000240

08001c08 <ADC_Convert_Rank2>:

float ADC_Convert_Rank2 (void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001c0e:	463b      	mov	r3, r7
 8001c10:	2224      	movs	r2, #36	@ 0x24
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f00d f94a 	bl	800eeae <memset>
	sConfig.Channel = ADC_CHANNEL_5;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <ADC_Convert_Rank2+0x7c>)
 8001c1c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c1e:	2306      	movs	r3, #6
 8001c20:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8001c22:	2306      	movs	r3, #6
 8001c24:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c26:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001c2a:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4812      	ldr	r0, [pc, #72]	@ (8001c88 <ADC_Convert_Rank2+0x80>)
 8001c40:	f001 fd30 	bl	80036a4 <HAL_ADC_ConfigChannel>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <ADC_Convert_Rank2+0x46>
	{
		Error_Handler();
 8001c4a:	f000 f84b 	bl	8001ce4 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 8001c4e:	480e      	ldr	r0, [pc, #56]	@ (8001c88 <ADC_Convert_Rank2+0x80>)
 8001c50:	f001 fb28 	bl	80032a4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001c54:	2164      	movs	r1, #100	@ 0x64
 8001c56:	480c      	ldr	r0, [pc, #48]	@ (8001c88 <ADC_Convert_Rank2+0x80>)
 8001c58:	f001 fc22 	bl	80034a0 <HAL_ADC_PollForConversion>
	float adcval = HAL_ADC_GetValue(&hadc1);
 8001c5c:	480a      	ldr	r0, [pc, #40]	@ (8001c88 <ADC_Convert_Rank2+0x80>)
 8001c5e:	f001 fd13 	bl	8003688 <HAL_ADC_GetValue>
 8001c62:	ee07 0a90 	vmov	s15, r0
 8001c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c6a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	HAL_ADC_Stop(&hadc1);
 8001c6e:	4806      	ldr	r0, [pc, #24]	@ (8001c88 <ADC_Convert_Rank2+0x80>)
 8001c70:	f001 fbe2 	bl	8003438 <HAL_ADC_Stop>
	return adcval;
 8001c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c76:	ee07 3a90 	vmov	s15, r3
}
 8001c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7e:	3728      	adds	r7, #40	@ 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	14f00020 	.word	0x14f00020
 8001c88:	24000240 	.word	0x24000240

08001c8c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001c92:	463b      	mov	r3, r7
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001c9e:	f002 ff19 	bl	8004ad4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001cae:	231f      	movs	r3, #31
 8001cb0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001cb2:	2387      	movs	r3, #135	@ 0x87
 8001cb4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001cce:	463b      	mov	r3, r7
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f002 ff37 	bl	8004b44 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001cd6:	2004      	movs	r0, #4
 8001cd8:	f002 ff14 	bl	8004b04 <HAL_MPU_Enable>

}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce8:	b672      	cpsid	i
}
 8001cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <Error_Handler+0x8>

08001cf0 <serial_communication_variable_init>:
 **********************************************************************************************/
/**
 * Zeroes the tx and rx buffers
 */
void serial_communication_variable_init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	memset(tx_buffer, 0x00, MAX_COMM_BUFFER_SIZE);
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4804      	ldr	r0, [pc, #16]	@ (8001d0c <serial_communication_variable_init+0x1c>)
 8001cfa:	f00d f8d8 	bl	800eeae <memset>
	memset(rx_buffer, 0x00, MAX_COMM_BUFFER_SIZE);
 8001cfe:	2220      	movs	r2, #32
 8001d00:	2100      	movs	r1, #0
 8001d02:	4803      	ldr	r0, [pc, #12]	@ (8001d10 <serial_communication_variable_init+0x20>)
 8001d04:	f00d f8d3 	bl	800eeae <memset>
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	240005f8 	.word	0x240005f8
 8001d10:	24000618 	.word	0x24000618

08001d14 <prepare_WRITE_packet>:
 *
 * @param buffer tx buffer pointer
 * @return total message length
 */
uint16_t prepare_WRITE_packet(uint8_t * buffer, uint8_t virtual_memory_address, uint32_t value)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	72fb      	strb	r3, [r7, #11]
	uint16_t packet_size = 7;
 8001d22:	2307      	movs	r3, #7
 8001d24:	82fb      	strh	r3, [r7, #22]
	ui32_to_ui8 conversion_union;

	conversion_union.ui32 = value;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	613b      	str	r3, [r7, #16]

	buffer[0] = COMMAND_WRITE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2205      	movs	r2, #5
 8001d2e:	701a      	strb	r2, [r3, #0]
	buffer[1] = packet_size;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3301      	adds	r3, #1
 8001d34:	8afa      	ldrh	r2, [r7, #22]
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	701a      	strb	r2, [r3, #0]
	buffer[2] = virtual_memory_address;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	7afa      	ldrb	r2, [r7, #11]
 8001d40:	701a      	strb	r2, [r3, #0]
	buffer[3] = conversion_union.ui8[0];
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3303      	adds	r3, #3
 8001d46:	7c3a      	ldrb	r2, [r7, #16]
 8001d48:	701a      	strb	r2, [r3, #0]
	buffer[4] = conversion_union.ui8[1];
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	7c7a      	ldrb	r2, [r7, #17]
 8001d50:	701a      	strb	r2, [r3, #0]
	buffer[5] = conversion_union.ui8[2];
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3305      	adds	r3, #5
 8001d56:	7cba      	ldrb	r2, [r7, #18]
 8001d58:	701a      	strb	r2, [r3, #0]
	buffer[6] = conversion_union.ui8[3];
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3306      	adds	r3, #6
 8001d5e:	7cfa      	ldrb	r2, [r7, #19]
 8001d60:	701a      	strb	r2, [r3, #0]
	return packet_size;
 8001d62:	8afb      	ldrh	r3, [r7, #22]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	371c      	adds	r7, #28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <prepare_READ_packet>:
 *
 * @param buffer tx buffer pointer
 * @return total message length
 */
uint16_t prepare_READ_packet(uint8_t * buffer, uint8_t read_address)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70fb      	strb	r3, [r7, #3]
	uint16_t packet_size = 3;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	81fb      	strh	r3, [r7, #14]
	buffer[0] = COMMAND_READ;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2206      	movs	r2, #6
 8001d84:	701a      	strb	r2, [r3, #0]
	buffer[1] = packet_size;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	89fa      	ldrh	r2, [r7, #14]
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	701a      	strb	r2, [r3, #0]
	buffer[2] = read_address;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3302      	adds	r3, #2
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	701a      	strb	r2, [r3, #0]
	return packet_size;
 8001d98:	89fb      	ldrh	r3, [r7, #14]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <read_data_from_WRITE_command>:
 * @param buffer pointer to the input buffer (it contains the received WRITE command)
 * @param read_address address at which the WRITE command is directed
 * @param data received uint32_t word
 */
void read_data_from_WRITE_command(uint8_t * buffer, uint8_t * read_address, uint32_t * data)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b087      	sub	sp, #28
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
	ui32_to_ui8 conversion_union;
	(*read_address) = buffer[2];
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	789a      	ldrb	r2, [r3, #2]
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	701a      	strb	r2, [r3, #0]
	conversion_union.ui8[0] = buffer[3];
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	78db      	ldrb	r3, [r3, #3]
 8001dbe:	753b      	strb	r3, [r7, #20]
	conversion_union.ui8[1] = buffer[4];
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	791b      	ldrb	r3, [r3, #4]
 8001dc4:	757b      	strb	r3, [r7, #21]
	conversion_union.ui8[2] = buffer[5];
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	795b      	ldrb	r3, [r3, #5]
 8001dca:	75bb      	strb	r3, [r7, #22]
	conversion_union.ui8[3] = buffer[6];
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	799b      	ldrb	r3, [r3, #6]
 8001dd0:	75fb      	strb	r3, [r7, #23]
	(*data) = conversion_union.ui32;
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	601a      	str	r2, [r3, #0]

	return;
 8001dd8:	bf00      	nop
}
 8001dda:	371c      	adds	r7, #28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <HAL_MspInit+0x30>)
 8001dec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001df0:	4a08      	ldr	r2, [pc, #32]	@ (8001e14 <HAL_MspInit+0x30>)
 8001df2:	f043 0302 	orr.w	r3, r3, #2
 8001df6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_MspInit+0x30>)
 8001dfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	58024400 	.word	0x58024400

08001e18 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08c      	sub	sp, #48	@ 0x30
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 031c 	add.w	r3, r7, #28
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a47      	ldr	r2, [pc, #284]	@ (8001f54 <HAL_ADC_MspInit+0x13c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d14f      	bne.n	8001eda <HAL_ADC_MspInit+0xc2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e3a:	4b47      	ldr	r3, [pc, #284]	@ (8001f58 <HAL_ADC_MspInit+0x140>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	4a45      	ldr	r2, [pc, #276]	@ (8001f58 <HAL_ADC_MspInit+0x140>)
 8001e42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e44:	4b44      	ldr	r3, [pc, #272]	@ (8001f58 <HAL_ADC_MspInit+0x140>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d10e      	bne.n	8001e6a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e4c:	4b43      	ldr	r3, [pc, #268]	@ (8001f5c <HAL_ADC_MspInit+0x144>)
 8001e4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e52:	4a42      	ldr	r2, [pc, #264]	@ (8001f5c <HAL_ADC_MspInit+0x144>)
 8001e54:	f043 0320 	orr.w	r3, r3, #32
 8001e58:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e5c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f5c <HAL_ADC_MspInit+0x144>)
 8001e5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f5c <HAL_ADC_MspInit+0x144>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e70:	4a3a      	ldr	r2, [pc, #232]	@ (8001f5c <HAL_ADC_MspInit+0x144>)
 8001e72:	f043 0302 	orr.w	r3, r3, #2
 8001e76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e7a:	4b38      	ldr	r3, [pc, #224]	@ (8001f5c <HAL_ADC_MspInit+0x144>)
 8001e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e88:	4b34      	ldr	r3, [pc, #208]	@ (8001f5c <HAL_ADC_MspInit+0x144>)
 8001e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8e:	4a33      	ldr	r2, [pc, #204]	@ (8001f5c <HAL_ADC_MspInit+0x144>)
 8001e90:	f043 0320 	orr.w	r3, r3, #32
 8001e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e98:	4b30      	ldr	r3, [pc, #192]	@ (8001f5c <HAL_ADC_MspInit+0x144>)
 8001e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4829      	ldr	r0, [pc, #164]	@ (8001f60 <HAL_ADC_MspInit+0x148>)
 8001eba:	f003 fadb 	bl	8005474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ebe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4824      	ldr	r0, [pc, #144]	@ (8001f64 <HAL_ADC_MspInit+0x14c>)
 8001ed4:	f003 face 	bl	8005474 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ed8:	e037      	b.n	8001f4a <HAL_ADC_MspInit+0x132>
  else if(hadc->Instance==ADC2)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a22      	ldr	r2, [pc, #136]	@ (8001f68 <HAL_ADC_MspInit+0x150>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d132      	bne.n	8001f4a <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <HAL_ADC_MspInit+0x140>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	4a1b      	ldr	r2, [pc, #108]	@ (8001f58 <HAL_ADC_MspInit+0x140>)
 8001eec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001eee:	4b1a      	ldr	r3, [pc, #104]	@ (8001f58 <HAL_ADC_MspInit+0x140>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d10e      	bne.n	8001f14 <HAL_ADC_MspInit+0xfc>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ef6:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <HAL_ADC_MspInit+0x144>)
 8001ef8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001efc:	4a17      	ldr	r2, [pc, #92]	@ (8001f5c <HAL_ADC_MspInit+0x144>)
 8001efe:	f043 0320 	orr.w	r3, r3, #32
 8001f02:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f06:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <HAL_ADC_MspInit+0x144>)
 8001f08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f14:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <HAL_ADC_MspInit+0x144>)
 8001f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f1a:	4a10      	ldr	r2, [pc, #64]	@ (8001f5c <HAL_ADC_MspInit+0x144>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f24:	4b0d      	ldr	r3, [pc, #52]	@ (8001f5c <HAL_ADC_MspInit+0x144>)
 8001f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f32:	2302      	movs	r3, #2
 8001f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f36:	2303      	movs	r3, #3
 8001f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	4619      	mov	r1, r3
 8001f44:	4806      	ldr	r0, [pc, #24]	@ (8001f60 <HAL_ADC_MspInit+0x148>)
 8001f46:	f003 fa95 	bl	8005474 <HAL_GPIO_Init>
}
 8001f4a:	bf00      	nop
 8001f4c:	3730      	adds	r7, #48	@ 0x30
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40022000 	.word	0x40022000
 8001f58:	24000638 	.word	0x24000638
 8001f5c:	58024400 	.word	0x58024400
 8001f60:	58020400 	.word	0x58020400
 8001f64:	58021400 	.word	0x58021400
 8001f68:	40022100 	.word	0x40022100

08001f6c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa8 <HAL_CRC_MspInit+0x3c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d10e      	bne.n	8001f9c <HAL_CRC_MspInit+0x30>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <HAL_CRC_MspInit+0x40>)
 8001f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f84:	4a09      	ldr	r2, [pc, #36]	@ (8001fac <HAL_CRC_MspInit+0x40>)
 8001f86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f8e:	4b07      	ldr	r3, [pc, #28]	@ (8001fac <HAL_CRC_MspInit+0x40>)
 8001f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	58024c00 	.word	0x58024c00
 8001fac:	58024400 	.word	0x58024400

08001fb0 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001fec <HAL_DMA2D_MspInit+0x3c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_DMA2D_MspInit+0x30>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <HAL_DMA2D_MspInit+0x40>)
 8001fc4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001fc8:	4a09      	ldr	r2, [pc, #36]	@ (8001ff0 <HAL_DMA2D_MspInit+0x40>)
 8001fca:	f043 0310 	orr.w	r3, r3, #16
 8001fce:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001fd2:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <HAL_DMA2D_MspInit+0x40>)
 8001fd4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	52001000 	.word	0x52001000
 8001ff0:	58024400 	.word	0x58024400

08001ff4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b0b8      	sub	sp, #224	@ 0xe0
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	22b8      	movs	r2, #184	@ 0xb8
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f00c ff4a 	bl	800eeae <memset>
  if(hi2c->Instance==I2C1)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a2e      	ldr	r2, [pc, #184]	@ (80020d8 <HAL_I2C_MspInit+0xe4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d155      	bne.n	80020d0 <HAL_I2C_MspInit+0xdc>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002024:	f04f 0208 	mov.w	r2, #8
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002036:	f107 0310 	add.w	r3, r7, #16
 800203a:	4618      	mov	r0, r3
 800203c:	f006 fe36 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002046:	f7ff fe4d 	bl	8001ce4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <HAL_I2C_MspInit+0xe8>)
 800204c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002050:	4a22      	ldr	r2, [pc, #136]	@ (80020dc <HAL_I2C_MspInit+0xe8>)
 8002052:	f043 0302 	orr.w	r3, r3, #2
 8002056:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800205a:	4b20      	ldr	r3, [pc, #128]	@ (80020dc <HAL_I2C_MspInit+0xe8>)
 800205c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002068:	23c0      	movs	r3, #192	@ 0xc0
 800206a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800206e:	2312      	movs	r3, #18
 8002070:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002080:	2304      	movs	r3, #4
 8002082:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002086:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800208a:	4619      	mov	r1, r3
 800208c:	4814      	ldr	r0, [pc, #80]	@ (80020e0 <HAL_I2C_MspInit+0xec>)
 800208e:	f003 f9f1 	bl	8005474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002092:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <HAL_I2C_MspInit+0xe8>)
 8002094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002098:	4a10      	ldr	r2, [pc, #64]	@ (80020dc <HAL_I2C_MspInit+0xe8>)
 800209a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800209e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <HAL_I2C_MspInit+0xe8>)
 80020a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2100      	movs	r1, #0
 80020b4:	201f      	movs	r0, #31
 80020b6:	f002 fcd8 	bl	8004a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80020ba:	201f      	movs	r0, #31
 80020bc:	f002 fcef 	bl	8004a9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2100      	movs	r1, #0
 80020c4:	2020      	movs	r0, #32
 80020c6:	f002 fcd0 	bl	8004a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80020ca:	2020      	movs	r0, #32
 80020cc:	f002 fce7 	bl	8004a9e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80020d0:	bf00      	nop
 80020d2:	37e0      	adds	r7, #224	@ 0xe0
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40005400 	.word	0x40005400
 80020dc:	58024400 	.word	0x58024400
 80020e0:	58020400 	.word	0x58020400

080020e4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b0ba      	sub	sp, #232	@ 0xe8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020fc:	f107 0318 	add.w	r3, r7, #24
 8002100:	22b8      	movs	r2, #184	@ 0xb8
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f00c fed2 	bl	800eeae <memset>
  if(hspi->Instance==SPI1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a38      	ldr	r2, [pc, #224]	@ (80021f0 <HAL_SPI_MspInit+0x10c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d168      	bne.n	80021e6 <HAL_SPI_MspInit+0x102>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002114:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002120:	2300      	movs	r3, #0
 8002122:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002124:	f107 0318 	add.w	r3, r7, #24
 8002128:	4618      	mov	r0, r3
 800212a:	f006 fdbf 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002134:	f7ff fdd6 	bl	8001ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002138:	4b2e      	ldr	r3, [pc, #184]	@ (80021f4 <HAL_SPI_MspInit+0x110>)
 800213a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800213e:	4a2d      	ldr	r2, [pc, #180]	@ (80021f4 <HAL_SPI_MspInit+0x110>)
 8002140:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002144:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002148:	4b2a      	ldr	r3, [pc, #168]	@ (80021f4 <HAL_SPI_MspInit+0x110>)
 800214a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800214e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002156:	4b27      	ldr	r3, [pc, #156]	@ (80021f4 <HAL_SPI_MspInit+0x110>)
 8002158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800215c:	4a25      	ldr	r2, [pc, #148]	@ (80021f4 <HAL_SPI_MspInit+0x110>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002166:	4b23      	ldr	r3, [pc, #140]	@ (80021f4 <HAL_SPI_MspInit+0x110>)
 8002168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002174:	4b1f      	ldr	r3, [pc, #124]	@ (80021f4 <HAL_SPI_MspInit+0x110>)
 8002176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800217a:	4a1e      	ldr	r2, [pc, #120]	@ (80021f4 <HAL_SPI_MspInit+0x110>)
 800217c:	f043 0308 	orr.w	r3, r3, #8
 8002180:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002184:	4b1b      	ldr	r3, [pc, #108]	@ (80021f4 <HAL_SPI_MspInit+0x110>)
 8002186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002192:	2320      	movs	r3, #32
 8002194:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021aa:	2305      	movs	r3, #5
 80021ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4810      	ldr	r0, [pc, #64]	@ (80021f8 <HAL_SPI_MspInit+0x114>)
 80021b8:	f003 f95c 	bl	8005474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021bc:	2380      	movs	r3, #128	@ 0x80
 80021be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021d4:	2305      	movs	r3, #5
 80021d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021da:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021de:	4619      	mov	r1, r3
 80021e0:	4806      	ldr	r0, [pc, #24]	@ (80021fc <HAL_SPI_MspInit+0x118>)
 80021e2:	f003 f947 	bl	8005474 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80021e6:	bf00      	nop
 80021e8:	37e8      	adds	r7, #232	@ 0xe8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40013000 	.word	0x40013000
 80021f4:	58024400 	.word	0x58024400
 80021f8:	58020000 	.word	0x58020000
 80021fc:	58020c00 	.word	0x58020c00

08002200 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002210:	d117      	bne.n	8002242 <HAL_TIM_Base_MspInit+0x42>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002212:	4b18      	ldr	r3, [pc, #96]	@ (8002274 <HAL_TIM_Base_MspInit+0x74>)
 8002214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002218:	4a16      	ldr	r2, [pc, #88]	@ (8002274 <HAL_TIM_Base_MspInit+0x74>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002222:	4b14      	ldr	r3, [pc, #80]	@ (8002274 <HAL_TIM_Base_MspInit+0x74>)
 8002224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002230:	2200      	movs	r2, #0
 8002232:	2100      	movs	r1, #0
 8002234:	201c      	movs	r0, #28
 8002236:	f002 fc18 	bl	8004a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800223a:	201c      	movs	r0, #28
 800223c:	f002 fc2f 	bl	8004a9e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002240:	e013      	b.n	800226a <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM3)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a0c      	ldr	r2, [pc, #48]	@ (8002278 <HAL_TIM_Base_MspInit+0x78>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d10e      	bne.n	800226a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800224c:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <HAL_TIM_Base_MspInit+0x74>)
 800224e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002252:	4a08      	ldr	r2, [pc, #32]	@ (8002274 <HAL_TIM_Base_MspInit+0x74>)
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800225c:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <HAL_TIM_Base_MspInit+0x74>)
 800225e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	58024400 	.word	0x58024400
 8002278:	40000400 	.word	0x40000400

0800227c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a12      	ldr	r2, [pc, #72]	@ (80022e4 <HAL_TIM_MspPostInit+0x68>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d11e      	bne.n	80022dc <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229e:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <HAL_TIM_MspPostInit+0x6c>)
 80022a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022a4:	4a10      	ldr	r2, [pc, #64]	@ (80022e8 <HAL_TIM_MspPostInit+0x6c>)
 80022a6:	f043 0302 	orr.w	r3, r3, #2
 80022aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022ae:	4b0e      	ldr	r3, [pc, #56]	@ (80022e8 <HAL_TIM_MspPostInit+0x6c>)
 80022b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022bc:	2301      	movs	r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022cc:	2302      	movs	r3, #2
 80022ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d0:	f107 030c 	add.w	r3, r7, #12
 80022d4:	4619      	mov	r1, r3
 80022d6:	4805      	ldr	r0, [pc, #20]	@ (80022ec <HAL_TIM_MspPostInit+0x70>)
 80022d8:	f003 f8cc 	bl	8005474 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022dc:	bf00      	nop
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40000400 	.word	0x40000400
 80022e8:	58024400 	.word	0x58024400
 80022ec:	58020400 	.word	0x58020400

080022f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <NMI_Handler+0x4>

080022f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <HardFault_Handler+0x4>

08002300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <MemManage_Handler+0x4>

08002308 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <BusFault_Handler+0x4>

08002310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <UsageFault_Handler+0x4>

08002318 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002346:	f000 fa3b 	bl	80027c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}

0800234e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HEATER_Pin);
 8002352:	2004      	movs	r0, #4
 8002354:	f003 fa67 	bl	8005826 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}

0800235c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PLATFORM_TOUCH_Pin);
 8002360:	2008      	movs	r0, #8
 8002362:	f003 fa60 	bl	8005826 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002370:	4802      	ldr	r0, [pc, #8]	@ (800237c <TIM2_IRQHandler+0x10>)
 8002372:	f009 ff37 	bl	800c1e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	24000488 	.word	0x24000488

08002380 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002384:	4802      	ldr	r0, [pc, #8]	@ (8002390 <I2C1_EV_IRQHandler+0x10>)
 8002386:	f003 fc8d 	bl	8005ca4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	240003ac 	.word	0x240003ac

08002394 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002398:	4802      	ldr	r0, [pc, #8]	@ (80023a4 <I2C1_ER_IRQHandler+0x10>)
 800239a:	f003 fc9d 	bl	8005cd8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	240003ac 	.word	0x240003ac

080023a8 <_getpid>:
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	2301      	movs	r3, #1
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <_kill>:
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	f00c fe17 	bl	800eff4 <__errno>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2216      	movs	r2, #22
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	f04f 33ff 	mov.w	r3, #4294967295
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <_exit>:
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	f04f 31ff 	mov.w	r1, #4294967295
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff ffe7 	bl	80023b8 <_kill>
 80023ea:	bf00      	nop
 80023ec:	e7fd      	b.n	80023ea <_exit+0x12>

080023ee <_read>:
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	e00a      	b.n	8002416 <_read+0x28>
 8002400:	f3af 8000 	nop.w
 8002404:	4601      	mov	r1, r0
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	60ba      	str	r2, [r7, #8]
 800240c:	b2ca      	uxtb	r2, r1
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3301      	adds	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	429a      	cmp	r2, r3
 800241c:	dbf0      	blt.n	8002400 <_read+0x12>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_write>:
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	e009      	b.n	800244e <_write+0x26>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	60ba      	str	r2, [r7, #8]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f3af 8000 	nop.w
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3301      	adds	r3, #1
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	429a      	cmp	r2, r3
 8002454:	dbf1      	blt.n	800243a <_write+0x12>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <_close>:
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	f04f 33ff 	mov.w	r3, #4294967295
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <_fstat>:
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	2300      	movs	r3, #0
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <_isatty>:
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	2301      	movs	r3, #1
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <_lseek>:
 80024ae:	b480      	push	{r7}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	2300      	movs	r3, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <_sbrk>:
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	4a14      	ldr	r2, [pc, #80]	@ (8002524 <_sbrk+0x5c>)
 80024d2:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <_sbrk+0x60>)
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	4b13      	ldr	r3, [pc, #76]	@ (800252c <_sbrk+0x64>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d102      	bne.n	80024ea <_sbrk+0x22>
 80024e4:	4b11      	ldr	r3, [pc, #68]	@ (800252c <_sbrk+0x64>)
 80024e6:	4a12      	ldr	r2, [pc, #72]	@ (8002530 <_sbrk+0x68>)
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	4b10      	ldr	r3, [pc, #64]	@ (800252c <_sbrk+0x64>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d207      	bcs.n	8002508 <_sbrk+0x40>
 80024f8:	f00c fd7c 	bl	800eff4 <__errno>
 80024fc:	4603      	mov	r3, r0
 80024fe:	220c      	movs	r2, #12
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
 8002506:	e009      	b.n	800251c <_sbrk+0x54>
 8002508:	4b08      	ldr	r3, [pc, #32]	@ (800252c <_sbrk+0x64>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	4b07      	ldr	r3, [pc, #28]	@ (800252c <_sbrk+0x64>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	4a05      	ldr	r2, [pc, #20]	@ (800252c <_sbrk+0x64>)
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	24050000 	.word	0x24050000
 8002528:	00000400 	.word	0x00000400
 800252c:	2400063c 	.word	0x2400063c
 8002530:	24000a38 	.word	0x24000a38

08002534 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002538:	4b3e      	ldr	r3, [pc, #248]	@ (8002634 <SystemInit+0x100>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253e:	4a3d      	ldr	r2, [pc, #244]	@ (8002634 <SystemInit+0x100>)
 8002540:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002544:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002548:	4b3b      	ldr	r3, [pc, #236]	@ (8002638 <SystemInit+0x104>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	2b06      	cmp	r3, #6
 8002552:	d807      	bhi.n	8002564 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002554:	4b38      	ldr	r3, [pc, #224]	@ (8002638 <SystemInit+0x104>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f023 030f 	bic.w	r3, r3, #15
 800255c:	4a36      	ldr	r2, [pc, #216]	@ (8002638 <SystemInit+0x104>)
 800255e:	f043 0307 	orr.w	r3, r3, #7
 8002562:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002564:	4b35      	ldr	r3, [pc, #212]	@ (800263c <SystemInit+0x108>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a34      	ldr	r2, [pc, #208]	@ (800263c <SystemInit+0x108>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002570:	4b32      	ldr	r3, [pc, #200]	@ (800263c <SystemInit+0x108>)
 8002572:	2200      	movs	r2, #0
 8002574:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002576:	4b31      	ldr	r3, [pc, #196]	@ (800263c <SystemInit+0x108>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4930      	ldr	r1, [pc, #192]	@ (800263c <SystemInit+0x108>)
 800257c:	4b30      	ldr	r3, [pc, #192]	@ (8002640 <SystemInit+0x10c>)
 800257e:	4013      	ands	r3, r2
 8002580:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002582:	4b2d      	ldr	r3, [pc, #180]	@ (8002638 <SystemInit+0x104>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d007      	beq.n	800259e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800258e:	4b2a      	ldr	r3, [pc, #168]	@ (8002638 <SystemInit+0x104>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 030f 	bic.w	r3, r3, #15
 8002596:	4a28      	ldr	r2, [pc, #160]	@ (8002638 <SystemInit+0x104>)
 8002598:	f043 0307 	orr.w	r3, r3, #7
 800259c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800259e:	4b27      	ldr	r3, [pc, #156]	@ (800263c <SystemInit+0x108>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025a4:	4b25      	ldr	r3, [pc, #148]	@ (800263c <SystemInit+0x108>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025aa:	4b24      	ldr	r3, [pc, #144]	@ (800263c <SystemInit+0x108>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025b0:	4b22      	ldr	r3, [pc, #136]	@ (800263c <SystemInit+0x108>)
 80025b2:	4a24      	ldr	r2, [pc, #144]	@ (8002644 <SystemInit+0x110>)
 80025b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025b6:	4b21      	ldr	r3, [pc, #132]	@ (800263c <SystemInit+0x108>)
 80025b8:	4a23      	ldr	r2, [pc, #140]	@ (8002648 <SystemInit+0x114>)
 80025ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025bc:	4b1f      	ldr	r3, [pc, #124]	@ (800263c <SystemInit+0x108>)
 80025be:	4a23      	ldr	r2, [pc, #140]	@ (800264c <SystemInit+0x118>)
 80025c0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80025c2:	4b1e      	ldr	r3, [pc, #120]	@ (800263c <SystemInit+0x108>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80025c8:	4b1c      	ldr	r3, [pc, #112]	@ (800263c <SystemInit+0x108>)
 80025ca:	4a20      	ldr	r2, [pc, #128]	@ (800264c <SystemInit+0x118>)
 80025cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80025ce:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <SystemInit+0x108>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80025d4:	4b19      	ldr	r3, [pc, #100]	@ (800263c <SystemInit+0x108>)
 80025d6:	4a1d      	ldr	r2, [pc, #116]	@ (800264c <SystemInit+0x118>)
 80025d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80025da:	4b18      	ldr	r3, [pc, #96]	@ (800263c <SystemInit+0x108>)
 80025dc:	2200      	movs	r2, #0
 80025de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025e0:	4b16      	ldr	r3, [pc, #88]	@ (800263c <SystemInit+0x108>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a15      	ldr	r2, [pc, #84]	@ (800263c <SystemInit+0x108>)
 80025e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80025ec:	4b13      	ldr	r3, [pc, #76]	@ (800263c <SystemInit+0x108>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80025f2:	4b12      	ldr	r3, [pc, #72]	@ (800263c <SystemInit+0x108>)
 80025f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d113      	bne.n	8002628 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002600:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <SystemInit+0x108>)
 8002602:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002606:	4a0d      	ldr	r2, [pc, #52]	@ (800263c <SystemInit+0x108>)
 8002608:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800260c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002610:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <SystemInit+0x11c>)
 8002612:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002616:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002618:	4b08      	ldr	r3, [pc, #32]	@ (800263c <SystemInit+0x108>)
 800261a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800261e:	4a07      	ldr	r2, [pc, #28]	@ (800263c <SystemInit+0x108>)
 8002620:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002624:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000ed00 	.word	0xe000ed00
 8002638:	52002000 	.word	0x52002000
 800263c:	58024400 	.word	0x58024400
 8002640:	eaf6ed7f 	.word	0xeaf6ed7f
 8002644:	02020200 	.word	0x02020200
 8002648:	01ff0000 	.word	0x01ff0000
 800264c:	01010280 	.word	0x01010280
 8002650:	52004000 	.word	0x52004000

08002654 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002658:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <ExitRun0Mode+0x2c>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4a08      	ldr	r2, [pc, #32]	@ (8002680 <ExitRun0Mode+0x2c>)
 800265e:	f043 0302 	orr.w	r3, r3, #2
 8002662:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002664:	bf00      	nop
 8002666:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <ExitRun0Mode+0x2c>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f9      	beq.n	8002666 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002672:	bf00      	nop
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	58024800 	.word	0x58024800

08002684 <Reset_Handler>:
 8002684:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80026c0 <LoopFillZerobss+0xe>
 8002688:	f7ff ffe4 	bl	8002654 <ExitRun0Mode>
 800268c:	f7ff ff52 	bl	8002534 <SystemInit>
 8002690:	480c      	ldr	r0, [pc, #48]	@ (80026c4 <LoopFillZerobss+0x12>)
 8002692:	490d      	ldr	r1, [pc, #52]	@ (80026c8 <LoopFillZerobss+0x16>)
 8002694:	4a0d      	ldr	r2, [pc, #52]	@ (80026cc <LoopFillZerobss+0x1a>)
 8002696:	2300      	movs	r3, #0
 8002698:	e002      	b.n	80026a0 <LoopCopyDataInit>

0800269a <CopyDataInit>:
 800269a:	58d4      	ldr	r4, [r2, r3]
 800269c:	50c4      	str	r4, [r0, r3]
 800269e:	3304      	adds	r3, #4

080026a0 <LoopCopyDataInit>:
 80026a0:	18c4      	adds	r4, r0, r3
 80026a2:	428c      	cmp	r4, r1
 80026a4:	d3f9      	bcc.n	800269a <CopyDataInit>
 80026a6:	4a0a      	ldr	r2, [pc, #40]	@ (80026d0 <LoopFillZerobss+0x1e>)
 80026a8:	4c0a      	ldr	r4, [pc, #40]	@ (80026d4 <LoopFillZerobss+0x22>)
 80026aa:	2300      	movs	r3, #0
 80026ac:	e001      	b.n	80026b2 <LoopFillZerobss>

080026ae <FillZerobss>:
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	3204      	adds	r2, #4

080026b2 <LoopFillZerobss>:
 80026b2:	42a2      	cmp	r2, r4
 80026b4:	d3fb      	bcc.n	80026ae <FillZerobss>
 80026b6:	f00c fca3 	bl	800f000 <__libc_init_array>
 80026ba:	f7fd fe79 	bl	80003b0 <main>
 80026be:	4770      	bx	lr
 80026c0:	24050000 	.word	0x24050000
 80026c4:	24000000 	.word	0x24000000
 80026c8:	24000224 	.word	0x24000224
 80026cc:	0801123c 	.word	0x0801123c
 80026d0:	24000224 	.word	0x24000224
 80026d4:	24000a38 	.word	0x24000a38

080026d8 <ADC3_IRQHandler>:
 80026d8:	e7fe      	b.n	80026d8 <ADC3_IRQHandler>
	...

080026dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e2:	2003      	movs	r0, #3
 80026e4:	f002 f9b6 	bl	8004a54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026e8:	f006 f920 	bl	800892c <HAL_RCC_GetSysClockFreq>
 80026ec:	4602      	mov	r2, r0
 80026ee:	4b15      	ldr	r3, [pc, #84]	@ (8002744 <HAL_Init+0x68>)
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	0a1b      	lsrs	r3, r3, #8
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	4913      	ldr	r1, [pc, #76]	@ (8002748 <HAL_Init+0x6c>)
 80026fa:	5ccb      	ldrb	r3, [r1, r3]
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
 8002704:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002706:	4b0f      	ldr	r3, [pc, #60]	@ (8002744 <HAL_Init+0x68>)
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	4a0e      	ldr	r2, [pc, #56]	@ (8002748 <HAL_Init+0x6c>)
 8002710:	5cd3      	ldrb	r3, [r2, r3]
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
 800271c:	4a0b      	ldr	r2, [pc, #44]	@ (800274c <HAL_Init+0x70>)
 800271e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002720:	4a0b      	ldr	r2, [pc, #44]	@ (8002750 <HAL_Init+0x74>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002726:	2000      	movs	r0, #0
 8002728:	f000 f814 	bl	8002754 <HAL_InitTick>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e002      	b.n	800273c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002736:	f7ff fb55 	bl	8001de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	58024400 	.word	0x58024400
 8002748:	0800fd7c 	.word	0x0800fd7c
 800274c:	240001b4 	.word	0x240001b4
 8002750:	240001b0 	.word	0x240001b0

08002754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800275c:	4b15      	ldr	r3, [pc, #84]	@ (80027b4 <HAL_InitTick+0x60>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e021      	b.n	80027ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002768:	4b13      	ldr	r3, [pc, #76]	@ (80027b8 <HAL_InitTick+0x64>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <HAL_InitTick+0x60>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	4619      	mov	r1, r3
 8002772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002776:	fbb3 f3f1 	udiv	r3, r3, r1
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	4618      	mov	r0, r3
 8002780:	f002 f99b 	bl	8004aba <HAL_SYSTICK_Config>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e00e      	b.n	80027ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b0f      	cmp	r3, #15
 8002792:	d80a      	bhi.n	80027aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002794:	2200      	movs	r2, #0
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	f04f 30ff 	mov.w	r0, #4294967295
 800279c:	f002 f965 	bl	8004a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a0:	4a06      	ldr	r2, [pc, #24]	@ (80027bc <HAL_InitTick+0x68>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	e000      	b.n	80027ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	240001bc 	.word	0x240001bc
 80027b8:	240001b0 	.word	0x240001b0
 80027bc:	240001b8 	.word	0x240001b8

080027c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027c4:	4b06      	ldr	r3, [pc, #24]	@ (80027e0 <HAL_IncTick+0x20>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <HAL_IncTick+0x24>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4413      	add	r3, r2
 80027d0:	4a04      	ldr	r2, [pc, #16]	@ (80027e4 <HAL_IncTick+0x24>)
 80027d2:	6013      	str	r3, [r2, #0]
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	240001bc 	.word	0x240001bc
 80027e4:	24000640 	.word	0x24000640

080027e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return uwTick;
 80027ec:	4b03      	ldr	r3, [pc, #12]	@ (80027fc <HAL_GetTick+0x14>)
 80027ee:	681b      	ldr	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	24000640 	.word	0x24000640

08002800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002808:	f7ff ffee 	bl	80027e8 <HAL_GetTick>
 800280c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002818:	d005      	beq.n	8002826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800281a:	4b0a      	ldr	r3, [pc, #40]	@ (8002844 <HAL_Delay+0x44>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4413      	add	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002826:	bf00      	nop
 8002828:	f7ff ffde 	bl	80027e8 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	429a      	cmp	r2, r3
 8002836:	d8f7      	bhi.n	8002828 <HAL_Delay+0x28>
  {
  }
}
 8002838:	bf00      	nop
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	240001bc 	.word	0x240001bc

08002848 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	609a      	str	r2, [r3, #8]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	609a      	str	r2, [r3, #8]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a18      	ldr	r2, [pc, #96]	@ (8002920 <LL_ADC_SetChannelPreselection+0x70>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d027      	beq.n	8002912 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d107      	bne.n	80028dc <LL_ADC_SetChannelPreselection+0x2c>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	0e9b      	lsrs	r3, r3, #26
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	2201      	movs	r2, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	e015      	b.n	8002908 <LL_ADC_SetChannelPreselection+0x58>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 80028f2:	2320      	movs	r3, #32
 80028f4:	e003      	b.n	80028fe <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	fab3 f383 	clz	r3, r3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	2201      	movs	r2, #1
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	69d2      	ldr	r2, [r2, #28]
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8002912:	bf00      	nop
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	58026000 	.word	0x58026000

08002924 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3360      	adds	r3, #96	@ 0x60
 8002936:	461a      	mov	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4a10      	ldr	r2, [pc, #64]	@ (8002984 <LL_ADC_SetOffset+0x60>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d10b      	bne.n	8002960 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	4313      	orrs	r3, r2
 8002956:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800295e:	e00b      	b.n	8002978 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	430b      	orrs	r3, r1
 8002972:	431a      	orrs	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	601a      	str	r2, [r3, #0]
}
 8002978:	bf00      	nop
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	58026000 	.word	0x58026000

08002988 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3360      	adds	r3, #96	@ 0x60
 8002996:	461a      	mov	r2, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	431a      	orrs	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	611a      	str	r2, [r3, #16]
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002a28 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00e      	beq.n	8002a1a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	3360      	adds	r3, #96	@ 0x60
 8002a00:	461a      	mov	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	431a      	orrs	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	601a      	str	r2, [r3, #0]
  }
}
 8002a1a:	bf00      	nop
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	58026000 	.word	0x58026000

08002a2c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a6c <LL_ADC_SetOffsetSaturation+0x40>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d10e      	bne.n	8002a5e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	3360      	adds	r3, #96	@ 0x60
 8002a44:	461a      	mov	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002a5e:	bf00      	nop
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	58026000 	.word	0x58026000

08002a70 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab0 <LL_ADC_SetOffsetSign+0x40>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d10e      	bne.n	8002aa2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	3360      	adds	r3, #96	@ 0x60
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	58026000 	.word	0x58026000

08002ab4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3360      	adds	r3, #96	@ 0x60
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4a0c      	ldr	r2, [pc, #48]	@ (8002b04 <LL_ADC_SetOffsetState+0x50>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d108      	bne.n	8002ae8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002ae6:	e007      	b.n	8002af8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	601a      	str	r2, [r3, #0]
}
 8002af8:	bf00      	nop
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	58026000 	.word	0x58026000

08002b08 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b087      	sub	sp, #28
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	3330      	adds	r3, #48	@ 0x30
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	4413      	add	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	211f      	movs	r1, #31
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	401a      	ands	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	0e9b      	lsrs	r3, r3, #26
 8002b66:	f003 011f 	and.w	r1, r3, #31
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	431a      	orrs	r2, r3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b087      	sub	sp, #28
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	3314      	adds	r3, #20
 8002b96:	461a      	mov	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	0e5b      	lsrs	r3, r3, #25
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	4413      	add	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	0d1b      	lsrs	r3, r3, #20
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	2107      	movs	r1, #7
 8002bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	401a      	ands	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	0d1b      	lsrs	r3, r3, #20
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bd0:	bf00      	nop
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4a1a      	ldr	r2, [pc, #104]	@ (8002c54 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d115      	bne.n	8002c1c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	401a      	ands	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f003 0318 	and.w	r3, r3, #24
 8002c06:	4914      	ldr	r1, [pc, #80]	@ (8002c58 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002c08:	40d9      	lsrs	r1, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	400b      	ands	r3, r1
 8002c0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c12:	431a      	orrs	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002c1a:	e014      	b.n	8002c46 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f003 0318 	and.w	r3, r3, #24
 8002c32:	4909      	ldr	r1, [pc, #36]	@ (8002c58 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002c34:	40d9      	lsrs	r1, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	400b      	ands	r3, r1
 8002c3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	58026000 	.word	0x58026000
 8002c58:	000fffff 	.word	0x000fffff

08002c5c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 031f 	and.w	r3, r3, #31
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	4b04      	ldr	r3, [pc, #16]	@ (8002cb4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6093      	str	r3, [r2, #8]
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	5fffffc0 	.word	0x5fffffc0

08002cb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ccc:	d101      	bne.n	8002cd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	4b05      	ldr	r3, [pc, #20]	@ (8002d04 <LL_ADC_EnableInternalRegulator+0x24>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	6fffffc0 	.word	0x6fffffc0

08002d08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d1c:	d101      	bne.n	8002d22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <LL_ADC_Enable+0x24>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	f043 0201 	orr.w	r2, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	7fffffc0 	.word	0x7fffffc0

08002d58 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	4b05      	ldr	r3, [pc, #20]	@ (8002d7c <LL_ADC_Disable+0x24>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	f043 0202 	orr.w	r2, r3, #2
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	7fffffc0 	.word	0x7fffffc0

08002d80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <LL_ADC_IsEnabled+0x18>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <LL_ADC_IsEnabled+0x1a>
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d101      	bne.n	8002dbe <LL_ADC_IsDisableOngoing+0x18>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <LL_ADC_IsDisableOngoing+0x1a>
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	4b05      	ldr	r3, [pc, #20]	@ (8002df0 <LL_ADC_REG_StartConversion+0x24>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	f043 0204 	orr.w	r2, r3, #4
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	7fffffc0 	.word	0x7fffffc0

08002df4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	4b05      	ldr	r3, [pc, #20]	@ (8002e18 <LL_ADC_REG_StopConversion+0x24>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	f043 0210 	orr.w	r2, r3, #16
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	7fffffc0 	.word	0x7fffffc0

08002e1c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d101      	bne.n	8002e34 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	4b05      	ldr	r3, [pc, #20]	@ (8002e68 <LL_ADC_INJ_StopConversion+0x24>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	7fffffc0 	.word	0x7fffffc0

08002e6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d101      	bne.n	8002e84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
	...

08002e94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b089      	sub	sp, #36	@ 0x24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e1ee      	b.n	800328c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d109      	bne.n	8002ed0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7fe ffab 	bl	8001e18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff feef 	bl	8002cb8 <LL_ADC_IsDeepPowerDownEnabled>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d004      	beq.n	8002eea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fed5 	bl	8002c94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff ff0a 	bl	8002d08 <LL_ADC_IsInternalRegulatorEnabled>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d114      	bne.n	8002f24 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff feee 	bl	8002ce0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f04:	4b8e      	ldr	r3, [pc, #568]	@ (8003140 <HAL_ADC_Init+0x2ac>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	4a8e      	ldr	r2, [pc, #568]	@ (8003144 <HAL_ADC_Init+0x2b0>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	099b      	lsrs	r3, r3, #6
 8002f12:	3301      	adds	r3, #1
 8002f14:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f16:	e002      	b.n	8002f1e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f9      	bne.n	8002f18 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff feed 	bl	8002d08 <LL_ADC_IsInternalRegulatorEnabled>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10d      	bne.n	8002f50 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f38:	f043 0210 	orr.w	r2, r3, #16
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f44:	f043 0201 	orr.w	r2, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff61 	bl	8002e1c <LL_ADC_REG_IsConversionOngoing>
 8002f5a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f040 8188 	bne.w	800327a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f040 8184 	bne.w	800327a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f76:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f7a:	f043 0202 	orr.w	r2, r3, #2
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fefa 	bl	8002d80 <LL_ADC_IsEnabled>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d136      	bne.n	8003000 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a6c      	ldr	r2, [pc, #432]	@ (8003148 <HAL_ADC_Init+0x2b4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d004      	beq.n	8002fa6 <HAL_ADC_Init+0x112>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a6a      	ldr	r2, [pc, #424]	@ (800314c <HAL_ADC_Init+0x2b8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10e      	bne.n	8002fc4 <HAL_ADC_Init+0x130>
 8002fa6:	4868      	ldr	r0, [pc, #416]	@ (8003148 <HAL_ADC_Init+0x2b4>)
 8002fa8:	f7ff feea 	bl	8002d80 <LL_ADC_IsEnabled>
 8002fac:	4604      	mov	r4, r0
 8002fae:	4867      	ldr	r0, [pc, #412]	@ (800314c <HAL_ADC_Init+0x2b8>)
 8002fb0:	f7ff fee6 	bl	8002d80 <LL_ADC_IsEnabled>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4323      	orrs	r3, r4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	e008      	b.n	8002fd6 <HAL_ADC_Init+0x142>
 8002fc4:	4862      	ldr	r0, [pc, #392]	@ (8003150 <HAL_ADC_Init+0x2bc>)
 8002fc6:	f7ff fedb 	bl	8002d80 <LL_ADC_IsEnabled>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d012      	beq.n	8003000 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a5a      	ldr	r2, [pc, #360]	@ (8003148 <HAL_ADC_Init+0x2b4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d004      	beq.n	8002fee <HAL_ADC_Init+0x15a>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a58      	ldr	r2, [pc, #352]	@ (800314c <HAL_ADC_Init+0x2b8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d101      	bne.n	8002ff2 <HAL_ADC_Init+0x15e>
 8002fee:	4a59      	ldr	r2, [pc, #356]	@ (8003154 <HAL_ADC_Init+0x2c0>)
 8002ff0:	e000      	b.n	8002ff4 <HAL_ADC_Init+0x160>
 8002ff2:	4a59      	ldr	r2, [pc, #356]	@ (8003158 <HAL_ADC_Init+0x2c4>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f7ff fc24 	bl	8002848 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a52      	ldr	r2, [pc, #328]	@ (8003150 <HAL_ADC_Init+0x2bc>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d129      	bne.n	800305e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7e5b      	ldrb	r3, [r3, #25]
 800300e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003014:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800301a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b08      	cmp	r3, #8
 8003022:	d013      	beq.n	800304c <HAL_ADC_Init+0x1b8>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b0c      	cmp	r3, #12
 800302a:	d00d      	beq.n	8003048 <HAL_ADC_Init+0x1b4>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b1c      	cmp	r3, #28
 8003032:	d007      	beq.n	8003044 <HAL_ADC_Init+0x1b0>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b18      	cmp	r3, #24
 800303a:	d101      	bne.n	8003040 <HAL_ADC_Init+0x1ac>
 800303c:	2318      	movs	r3, #24
 800303e:	e006      	b.n	800304e <HAL_ADC_Init+0x1ba>
 8003040:	2300      	movs	r3, #0
 8003042:	e004      	b.n	800304e <HAL_ADC_Init+0x1ba>
 8003044:	2310      	movs	r3, #16
 8003046:	e002      	b.n	800304e <HAL_ADC_Init+0x1ba>
 8003048:	2308      	movs	r3, #8
 800304a:	e000      	b.n	800304e <HAL_ADC_Init+0x1ba>
 800304c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800304e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003056:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	e00e      	b.n	800307c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7e5b      	ldrb	r3, [r3, #25]
 8003062:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003068:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800306e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003076:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d106      	bne.n	8003094 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	3b01      	subs	r3, #1
 800308c:	045b      	lsls	r3, r3, #17
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	2b00      	cmp	r3, #0
 800309a:	d009      	beq.n	80030b0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a26      	ldr	r2, [pc, #152]	@ (8003150 <HAL_ADC_Init+0x2bc>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d115      	bne.n	80030e6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	4b26      	ldr	r3, [pc, #152]	@ (800315c <HAL_ADC_Init+0x2c8>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	69b9      	ldr	r1, [r7, #24]
 80030ca:	430b      	orrs	r3, r1
 80030cc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	611a      	str	r2, [r3, #16]
 80030e4:	e009      	b.n	80030fa <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003160 <HAL_ADC_Init+0x2cc>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	69b9      	ldr	r1, [r7, #24]
 80030f6:	430b      	orrs	r3, r1
 80030f8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fe8c 	bl	8002e1c <LL_ADC_REG_IsConversionOngoing>
 8003104:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff feae 	bl	8002e6c <LL_ADC_INJ_IsConversionOngoing>
 8003110:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f040 808e 	bne.w	8003236 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	f040 808a 	bne.w	8003236 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a0a      	ldr	r2, [pc, #40]	@ (8003150 <HAL_ADC_Init+0x2bc>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d11b      	bne.n	8003164 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7e1b      	ldrb	r3, [r3, #24]
 8003130:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003138:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	e018      	b.n	8003172 <HAL_ADC_Init+0x2de>
 8003140:	240001b0 	.word	0x240001b0
 8003144:	053e2d63 	.word	0x053e2d63
 8003148:	40022000 	.word	0x40022000
 800314c:	40022100 	.word	0x40022100
 8003150:	58026000 	.word	0x58026000
 8003154:	40022300 	.word	0x40022300
 8003158:	58026300 	.word	0x58026300
 800315c:	fff04007 	.word	0xfff04007
 8003160:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	7e1b      	ldrb	r3, [r3, #24]
 8003168:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	4b46      	ldr	r3, [pc, #280]	@ (8003294 <HAL_ADC_Init+0x400>)
 800317a:	4013      	ands	r3, r2
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	69b9      	ldr	r1, [r7, #24]
 8003182:	430b      	orrs	r3, r1
 8003184:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800318c:	2b01      	cmp	r3, #1
 800318e:	d137      	bne.n	8003200 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003194:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a3f      	ldr	r2, [pc, #252]	@ (8003298 <HAL_ADC_Init+0x404>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d116      	bne.n	80031ce <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	4b3d      	ldr	r3, [pc, #244]	@ (800329c <HAL_ADC_Init+0x408>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80031b2:	4311      	orrs	r1, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031b8:	4311      	orrs	r1, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80031be:	430a      	orrs	r2, r1
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	611a      	str	r2, [r3, #16]
 80031cc:	e020      	b.n	8003210 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	4b32      	ldr	r3, [pc, #200]	@ (80032a0 <HAL_ADC_Init+0x40c>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031dc:	3a01      	subs	r2, #1
 80031de:	0411      	lsls	r1, r2, #16
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80031e4:	4311      	orrs	r1, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031ea:	4311      	orrs	r1, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80031f0:	430a      	orrs	r2, r1
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0201 	orr.w	r2, r2, #1
 80031fc:	611a      	str	r2, [r3, #16]
 80031fe:	e007      	b.n	8003210 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a1b      	ldr	r2, [pc, #108]	@ (8003298 <HAL_ADC_Init+0x404>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d002      	beq.n	8003236 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f001 f8b1 	bl	8004398 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d10c      	bne.n	8003258 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003244:	f023 010f 	bic.w	r1, r3, #15
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	1e5a      	subs	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	631a      	str	r2, [r3, #48]	@ 0x30
 8003256:	e007      	b.n	8003268 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 020f 	bic.w	r2, r2, #15
 8003266:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326c:	f023 0303 	bic.w	r3, r3, #3
 8003270:	f043 0201 	orr.w	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	661a      	str	r2, [r3, #96]	@ 0x60
 8003278:	e007      	b.n	800328a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327e:	f043 0210 	orr.w	r2, r3, #16
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800328a:	7ffb      	ldrb	r3, [r7, #31]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3724      	adds	r7, #36	@ 0x24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd90      	pop	{r4, r7, pc}
 8003294:	ffffbffc 	.word	0xffffbffc
 8003298:	58026000 	.word	0x58026000
 800329c:	fc00f81f 	.word	0xfc00f81f
 80032a0:	fc00f81e 	.word	0xfc00f81e

080032a4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a5c      	ldr	r2, [pc, #368]	@ (8003424 <HAL_ADC_Start+0x180>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <HAL_ADC_Start+0x1c>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003428 <HAL_ADC_Start+0x184>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d101      	bne.n	80032c4 <HAL_ADC_Start+0x20>
 80032c0:	4b5a      	ldr	r3, [pc, #360]	@ (800342c <HAL_ADC_Start+0x188>)
 80032c2:	e000      	b.n	80032c6 <HAL_ADC_Start+0x22>
 80032c4:	4b5a      	ldr	r3, [pc, #360]	@ (8003430 <HAL_ADC_Start+0x18c>)
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fcc8 	bl	8002c5c <LL_ADC_GetMultimode>
 80032cc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fda2 	bl	8002e1c <LL_ADC_REG_IsConversionOngoing>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 809a 	bne.w	8003414 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_Start+0x4a>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e095      	b.n	800341a <HAL_ADC_Start+0x176>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 ff64 	bl	80041c4 <ADC_Enable>
 80032fc:	4603      	mov	r3, r0
 80032fe:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003300:	7dfb      	ldrb	r3, [r7, #23]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f040 8081 	bne.w	800340a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800330c:	4b49      	ldr	r3, [pc, #292]	@ (8003434 <HAL_ADC_Start+0x190>)
 800330e:	4013      	ands	r3, r2
 8003310:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a42      	ldr	r2, [pc, #264]	@ (8003428 <HAL_ADC_Start+0x184>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d002      	beq.n	8003328 <HAL_ADC_Start+0x84>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	e000      	b.n	800332a <HAL_ADC_Start+0x86>
 8003328:	4b3e      	ldr	r3, [pc, #248]	@ (8003424 <HAL_ADC_Start+0x180>)
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	4293      	cmp	r3, r2
 8003330:	d002      	beq.n	8003338 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d105      	bne.n	8003344 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800333c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003348:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800334c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003350:	d106      	bne.n	8003360 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003356:	f023 0206 	bic.w	r2, r3, #6
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	665a      	str	r2, [r3, #100]	@ 0x64
 800335e:	e002      	b.n	8003366 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	221c      	movs	r2, #28
 800336c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a2b      	ldr	r2, [pc, #172]	@ (8003428 <HAL_ADC_Start+0x184>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d002      	beq.n	8003386 <HAL_ADC_Start+0xe2>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	e000      	b.n	8003388 <HAL_ADC_Start+0xe4>
 8003386:	4b27      	ldr	r3, [pc, #156]	@ (8003424 <HAL_ADC_Start+0x180>)
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	4293      	cmp	r3, r2
 800338e:	d008      	beq.n	80033a2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d005      	beq.n	80033a2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	2b05      	cmp	r3, #5
 800339a:	d002      	beq.n	80033a2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b09      	cmp	r3, #9
 80033a0:	d114      	bne.n	80033cc <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d007      	beq.n	80033c0 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fd01 	bl	8002dcc <LL_ADC_REG_StartConversion>
 80033ca:	e025      	b.n	8003418 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a12      	ldr	r2, [pc, #72]	@ (8003428 <HAL_ADC_Start+0x184>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d002      	beq.n	80033e8 <HAL_ADC_Start+0x144>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	e000      	b.n	80033ea <HAL_ADC_Start+0x146>
 80033e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003424 <HAL_ADC_Start+0x180>)
 80033ea:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00f      	beq.n	8003418 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003400:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	661a      	str	r2, [r3, #96]	@ 0x60
 8003408:	e006      	b.n	8003418 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003412:	e001      	b.n	8003418 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003414:	2302      	movs	r3, #2
 8003416:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003418:	7dfb      	ldrb	r3, [r7, #23]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40022000 	.word	0x40022000
 8003428:	40022100 	.word	0x40022100
 800342c:	40022300 	.word	0x40022300
 8003430:	58026300 	.word	0x58026300
 8003434:	fffff0fe 	.word	0xfffff0fe

08003438 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_ADC_Stop+0x16>
 800344a:	2302      	movs	r3, #2
 800344c:	e021      	b.n	8003492 <HAL_ADC_Stop+0x5a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003456:	2103      	movs	r1, #3
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fdf7 	bl	800404c <ADC_ConversionStop>
 800345e:	4603      	mov	r3, r0
 8003460:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10f      	bne.n	8003488 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 ff35 	bl	80042d8 <ADC_Disable>
 800346e:	4603      	mov	r3, r0
 8003470:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d107      	bne.n	8003488 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800347c:	4b07      	ldr	r3, [pc, #28]	@ (800349c <HAL_ADC_Stop+0x64>)
 800347e:	4013      	ands	r3, r2
 8003480:	f043 0201 	orr.w	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003490:	7bfb      	ldrb	r3, [r7, #15]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	ffffeefe 	.word	0xffffeefe

080034a0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a72      	ldr	r2, [pc, #456]	@ (8003678 <HAL_ADC_PollForConversion+0x1d8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d004      	beq.n	80034be <HAL_ADC_PollForConversion+0x1e>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a70      	ldr	r2, [pc, #448]	@ (800367c <HAL_ADC_PollForConversion+0x1dc>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d101      	bne.n	80034c2 <HAL_ADC_PollForConversion+0x22>
 80034be:	4b70      	ldr	r3, [pc, #448]	@ (8003680 <HAL_ADC_PollForConversion+0x1e0>)
 80034c0:	e000      	b.n	80034c4 <HAL_ADC_PollForConversion+0x24>
 80034c2:	4b70      	ldr	r3, [pc, #448]	@ (8003684 <HAL_ADC_PollForConversion+0x1e4>)
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fbc9 	bl	8002c5c <LL_ADC_GetMultimode>
 80034ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d102      	bne.n	80034da <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80034d4:	2308      	movs	r3, #8
 80034d6:	61fb      	str	r3, [r7, #28]
 80034d8:	e037      	b.n	800354a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b05      	cmp	r3, #5
 80034e4:	d002      	beq.n	80034ec <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b09      	cmp	r3, #9
 80034ea:	d111      	bne.n	8003510 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d007      	beq.n	800350a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fe:	f043 0220 	orr.w	r2, r3, #32
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0b1      	b.n	800366e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800350a:	2304      	movs	r3, #4
 800350c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800350e:	e01c      	b.n	800354a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a58      	ldr	r2, [pc, #352]	@ (8003678 <HAL_ADC_PollForConversion+0x1d8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d004      	beq.n	8003524 <HAL_ADC_PollForConversion+0x84>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a57      	ldr	r2, [pc, #348]	@ (800367c <HAL_ADC_PollForConversion+0x1dc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d101      	bne.n	8003528 <HAL_ADC_PollForConversion+0x88>
 8003524:	4b56      	ldr	r3, [pc, #344]	@ (8003680 <HAL_ADC_PollForConversion+0x1e0>)
 8003526:	e000      	b.n	800352a <HAL_ADC_PollForConversion+0x8a>
 8003528:	4b56      	ldr	r3, [pc, #344]	@ (8003684 <HAL_ADC_PollForConversion+0x1e4>)
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fba4 	bl	8002c78 <LL_ADC_GetMultiDMATransfer>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800353a:	f043 0220 	orr.w	r2, r3, #32
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e093      	b.n	800366e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003546:	2304      	movs	r3, #4
 8003548:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800354a:	f7ff f94d 	bl	80027e8 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003550:	e021      	b.n	8003596 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003558:	d01d      	beq.n	8003596 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800355a:	f7ff f945 	bl	80027e8 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d302      	bcc.n	8003570 <HAL_ADC_PollForConversion+0xd0>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d112      	bne.n	8003596 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003582:	f043 0204 	orr.w	r2, r3, #4
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e06b      	b.n	800366e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0d6      	beq.n	8003552 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff faa7 	bl	8002b08 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01c      	beq.n	80035fa <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	7e5b      	ldrb	r3, [r3, #25]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d118      	bne.n	80035fa <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d111      	bne.n	80035fa <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d105      	bne.n	80035fa <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f2:	f043 0201 	orr.w	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a1f      	ldr	r2, [pc, #124]	@ (800367c <HAL_ADC_PollForConversion+0x1dc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d002      	beq.n	800360a <HAL_ADC_PollForConversion+0x16a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	e000      	b.n	800360c <HAL_ADC_PollForConversion+0x16c>
 800360a:	4b1b      	ldr	r3, [pc, #108]	@ (8003678 <HAL_ADC_PollForConversion+0x1d8>)
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	4293      	cmp	r3, r2
 8003612:	d008      	beq.n	8003626 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b05      	cmp	r3, #5
 800361e:	d002      	beq.n	8003626 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2b09      	cmp	r3, #9
 8003624:	d104      	bne.n	8003630 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	e00c      	b.n	800364a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a11      	ldr	r2, [pc, #68]	@ (800367c <HAL_ADC_PollForConversion+0x1dc>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d002      	beq.n	8003640 <HAL_ADC_PollForConversion+0x1a0>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	e000      	b.n	8003642 <HAL_ADC_PollForConversion+0x1a2>
 8003640:	4b0d      	ldr	r3, [pc, #52]	@ (8003678 <HAL_ADC_PollForConversion+0x1d8>)
 8003642:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d104      	bne.n	800365a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2208      	movs	r2, #8
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	e008      	b.n	800366c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d103      	bne.n	800366c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	220c      	movs	r2, #12
 800366a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40022000 	.word	0x40022000
 800367c:	40022100 	.word	0x40022100
 8003680:	40022300 	.word	0x40022300
 8003684:	58026300 	.word	0x58026300

08003688 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	b0a5      	sub	sp, #148	@ 0x94
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036be:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4aa4      	ldr	r2, [pc, #656]	@ (8003958 <HAL_ADC_ConfigChannel+0x2b4>)
 80036c6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d102      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x34>
 80036d2:	2302      	movs	r3, #2
 80036d4:	f000 bca2 	b.w	800401c <HAL_ADC_ConfigChannel+0x978>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fb99 	bl	8002e1c <LL_ADC_REG_IsConversionOngoing>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f040 8486 	bne.w	8003ffe <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	db31      	blt.n	800375e <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a97      	ldr	r2, [pc, #604]	@ (800395c <HAL_ADC_ConfigChannel+0x2b8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d02c      	beq.n	800375e <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800370c:	2b00      	cmp	r3, #0
 800370e:	d108      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x7e>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	0e9b      	lsrs	r3, r3, #26
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	2201      	movs	r2, #1
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	e016      	b.n	8003750 <HAL_ADC_ConfigChannel+0xac>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003730:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003732:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003734:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 800373a:	2320      	movs	r3, #32
 800373c:	e003      	b.n	8003746 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 800373e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003740:	fab3 f383 	clz	r3, r3
 8003744:	b2db      	uxtb	r3, r3
 8003746:	f003 031f 	and.w	r3, r3, #31
 800374a:	2201      	movs	r2, #1
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6812      	ldr	r2, [r2, #0]
 8003754:	69d1      	ldr	r1, [r2, #28]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	430b      	orrs	r3, r1
 800375c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	6859      	ldr	r1, [r3, #4]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	f7ff f9df 	bl	8002b2e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff fb51 	bl	8002e1c <LL_ADC_REG_IsConversionOngoing>
 800377a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fb72 	bl	8002e6c <LL_ADC_INJ_IsConversionOngoing>
 8003788:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800378c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003790:	2b00      	cmp	r3, #0
 8003792:	f040 824a 	bne.w	8003c2a <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003796:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800379a:	2b00      	cmp	r3, #0
 800379c:	f040 8245 	bne.w	8003c2a <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6819      	ldr	r1, [r3, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	461a      	mov	r2, r3
 80037ae:	f7ff f9ea 	bl	8002b86 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a69      	ldr	r2, [pc, #420]	@ (800395c <HAL_ADC_ConfigChannel+0x2b8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d10d      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	08db      	lsrs	r3, r3, #3
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037d6:	e032      	b.n	800383e <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80037d8:	4b61      	ldr	r3, [pc, #388]	@ (8003960 <HAL_ADC_ConfigChannel+0x2bc>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80037e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037e4:	d10b      	bne.n	80037fe <HAL_ADC_ConfigChannel+0x15a>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	089b      	lsrs	r3, r3, #2
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	e01d      	b.n	800383a <HAL_ADC_ConfigChannel+0x196>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x180>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	089b      	lsrs	r3, r3, #2
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	e00a      	b.n	800383a <HAL_ADC_ConfigChannel+0x196>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	089b      	lsrs	r3, r3, #2
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b04      	cmp	r3, #4
 8003844:	d048      	beq.n	80038d8 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6919      	ldr	r1, [r3, #16]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003856:	f7ff f865 	bl	8002924 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a3f      	ldr	r2, [pc, #252]	@ (800395c <HAL_ADC_ConfigChannel+0x2b8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d119      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6818      	ldr	r0, [r3, #0]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6919      	ldr	r1, [r3, #16]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	461a      	mov	r2, r3
 8003872:	f7ff f8fd 	bl	8002a70 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	6919      	ldr	r1, [r3, #16]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d102      	bne.n	800388e <HAL_ADC_ConfigChannel+0x1ea>
 8003888:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800388c:	e000      	b.n	8003890 <HAL_ADC_ConfigChannel+0x1ec>
 800388e:	2300      	movs	r3, #0
 8003890:	461a      	mov	r2, r3
 8003892:	f7ff f8cb 	bl	8002a2c <LL_ADC_SetOffsetSaturation>
 8003896:	e1c8      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6919      	ldr	r1, [r3, #16]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d102      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x20c>
 80038aa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80038ae:	e000      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x20e>
 80038b0:	2300      	movs	r3, #0
 80038b2:	461a      	mov	r2, r3
 80038b4:	f7ff f898 	bl	80029e8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	6919      	ldr	r1, [r3, #16]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	7e1b      	ldrb	r3, [r3, #24]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d102      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x22a>
 80038c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80038cc:	e000      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x22c>
 80038ce:	2300      	movs	r3, #0
 80038d0:	461a      	mov	r2, r3
 80038d2:	f7ff f86f 	bl	80029b4 <LL_ADC_SetDataRightShift>
 80038d6:	e1a8      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1f      	ldr	r2, [pc, #124]	@ (800395c <HAL_ADC_ConfigChannel+0x2b8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	f040 815b 	bne.w	8003b9a <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2100      	movs	r1, #0
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff f84c 	bl	8002988 <LL_ADC_GetOffsetChannel>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10a      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x26c>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff f841 	bl	8002988 <LL_ADC_GetOffsetChannel>
 8003906:	4603      	mov	r3, r0
 8003908:	0e9b      	lsrs	r3, r3, #26
 800390a:	f003 021f 	and.w	r2, r3, #31
 800390e:	e017      	b.n	8003940 <HAL_ADC_ConfigChannel+0x29c>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2100      	movs	r1, #0
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff f836 	bl	8002988 <LL_ADC_GetOffsetChannel>
 800391c:	4603      	mov	r3, r0
 800391e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003928:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800392a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800392c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003932:	2320      	movs	r3, #32
 8003934:	e003      	b.n	800393e <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8003936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003938:	fab3 f383 	clz	r3, r3
 800393c:	b2db      	uxtb	r3, r3
 800393e:	461a      	mov	r2, r3
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10b      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x2c0>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	0e9b      	lsrs	r3, r3, #26
 8003952:	f003 031f 	and.w	r3, r3, #31
 8003956:	e017      	b.n	8003988 <HAL_ADC_ConfigChannel+0x2e4>
 8003958:	47ff0000 	.word	0x47ff0000
 800395c:	58026000 	.word	0x58026000
 8003960:	5c001000 	.word	0x5c001000
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800396c:	fa93 f3a3 	rbit	r3, r3
 8003970:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003972:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003974:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003976:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800397c:	2320      	movs	r3, #32
 800397e:	e003      	b.n	8003988 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003980:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003982:	fab3 f383 	clz	r3, r3
 8003986:	b2db      	uxtb	r3, r3
 8003988:	429a      	cmp	r2, r3
 800398a:	d106      	bne.n	800399a <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2200      	movs	r2, #0
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff f88d 	bl	8002ab4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2101      	movs	r1, #1
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe fff1 	bl	8002988 <LL_ADC_GetOffsetChannel>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10a      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x322>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2101      	movs	r1, #1
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe ffe6 	bl	8002988 <LL_ADC_GetOffsetChannel>
 80039bc:	4603      	mov	r3, r0
 80039be:	0e9b      	lsrs	r3, r3, #26
 80039c0:	f003 021f 	and.w	r2, r3, #31
 80039c4:	e017      	b.n	80039f6 <HAL_ADC_ConfigChannel+0x352>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2101      	movs	r1, #1
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe ffdb 	bl	8002988 <LL_ADC_GetOffsetChannel>
 80039d2:	4603      	mov	r3, r0
 80039d4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80039de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80039e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 80039e8:	2320      	movs	r3, #32
 80039ea:	e003      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 80039ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ee:	fab3 f383 	clz	r3, r3
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d105      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x36a>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	0e9b      	lsrs	r3, r3, #26
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	e011      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x38e>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a16:	fa93 f3a3 	rbit	r3, r3
 8003a1a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003a1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003a20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003a26:	2320      	movs	r3, #32
 8003a28:	e003      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003a2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a2c:	fab3 f383 	clz	r3, r3
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d106      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff f838 	bl	8002ab4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2102      	movs	r1, #2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe ff9c 	bl	8002988 <LL_ADC_GetOffsetChannel>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x3cc>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2102      	movs	r1, #2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe ff91 	bl	8002988 <LL_ADC_GetOffsetChannel>
 8003a66:	4603      	mov	r3, r0
 8003a68:	0e9b      	lsrs	r3, r3, #26
 8003a6a:	f003 021f 	and.w	r2, r3, #31
 8003a6e:	e017      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x3fc>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2102      	movs	r1, #2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe ff86 	bl	8002988 <LL_ADC_GetOffsetChannel>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a82:	fa93 f3a3 	rbit	r3, r3
 8003a86:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003a92:	2320      	movs	r3, #32
 8003a94:	e003      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a98:	fab3 f383 	clz	r3, r3
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d105      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x414>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	0e9b      	lsrs	r3, r3, #26
 8003ab2:	f003 031f 	and.w	r3, r3, #31
 8003ab6:	e011      	b.n	8003adc <HAL_ADC_ConfigChannel+0x438>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac0:	fa93 f3a3 	rbit	r3, r3
 8003ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003ad0:	2320      	movs	r3, #32
 8003ad2:	e003      	b.n	8003adc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad6:	fab3 f383 	clz	r3, r3
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d106      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2102      	movs	r1, #2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe ffe3 	bl	8002ab4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2103      	movs	r1, #3
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fe ff47 	bl	8002988 <LL_ADC_GetOffsetChannel>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10a      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x476>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2103      	movs	r1, #3
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe ff3c 	bl	8002988 <LL_ADC_GetOffsetChannel>
 8003b10:	4603      	mov	r3, r0
 8003b12:	0e9b      	lsrs	r3, r3, #26
 8003b14:	f003 021f 	and.w	r2, r3, #31
 8003b18:	e017      	b.n	8003b4a <HAL_ADC_ConfigChannel+0x4a6>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2103      	movs	r1, #3
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe ff31 	bl	8002988 <LL_ADC_GetOffsetChannel>
 8003b26:	4603      	mov	r3, r0
 8003b28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	fa93 f3a3 	rbit	r3, r3
 8003b30:	61fb      	str	r3, [r7, #28]
  return result;
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003b3c:	2320      	movs	r3, #32
 8003b3e:	e003      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b42:	fab3 f383 	clz	r3, r3
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d105      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x4be>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	0e9b      	lsrs	r3, r3, #26
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	e011      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x4e2>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	fa93 f3a3 	rbit	r3, r3
 8003b6e:	613b      	str	r3, [r7, #16]
  return result;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8003b7a:	2320      	movs	r3, #32
 8003b7c:	e003      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	fab3 f383 	clz	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d14f      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2103      	movs	r1, #3
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe ff8e 	bl	8002ab4 <LL_ADC_SetOffsetState>
 8003b98:	e047      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	069b      	lsls	r3, r3, #26
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d107      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003bbc:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bc4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	069b      	lsls	r3, r3, #26
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d107      	bne.n	8003be2 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003be0:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003be8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	069b      	lsls	r3, r3, #26
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d107      	bne.n	8003c06 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003c04:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c0c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	069b      	lsls	r3, r3, #26
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d107      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003c28:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff f8a6 	bl	8002d80 <LL_ADC_IsEnabled>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f040 81ea 	bne.w	8004010 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	6819      	ldr	r1, [r3, #0]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f7fe ffc7 	bl	8002bdc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	4a7a      	ldr	r2, [pc, #488]	@ (8003e3c <HAL_ADC_ConfigChannel+0x798>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	f040 80e0 	bne.w	8003e1a <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4977      	ldr	r1, [pc, #476]	@ (8003e40 <HAL_ADC_ConfigChannel+0x79c>)
 8003c64:	428b      	cmp	r3, r1
 8003c66:	d147      	bne.n	8003cf8 <HAL_ADC_ConfigChannel+0x654>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4975      	ldr	r1, [pc, #468]	@ (8003e44 <HAL_ADC_ConfigChannel+0x7a0>)
 8003c6e:	428b      	cmp	r3, r1
 8003c70:	d040      	beq.n	8003cf4 <HAL_ADC_ConfigChannel+0x650>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4974      	ldr	r1, [pc, #464]	@ (8003e48 <HAL_ADC_ConfigChannel+0x7a4>)
 8003c78:	428b      	cmp	r3, r1
 8003c7a:	d039      	beq.n	8003cf0 <HAL_ADC_ConfigChannel+0x64c>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4972      	ldr	r1, [pc, #456]	@ (8003e4c <HAL_ADC_ConfigChannel+0x7a8>)
 8003c82:	428b      	cmp	r3, r1
 8003c84:	d032      	beq.n	8003cec <HAL_ADC_ConfigChannel+0x648>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4971      	ldr	r1, [pc, #452]	@ (8003e50 <HAL_ADC_ConfigChannel+0x7ac>)
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	d02b      	beq.n	8003ce8 <HAL_ADC_ConfigChannel+0x644>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	496f      	ldr	r1, [pc, #444]	@ (8003e54 <HAL_ADC_ConfigChannel+0x7b0>)
 8003c96:	428b      	cmp	r3, r1
 8003c98:	d024      	beq.n	8003ce4 <HAL_ADC_ConfigChannel+0x640>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	496e      	ldr	r1, [pc, #440]	@ (8003e58 <HAL_ADC_ConfigChannel+0x7b4>)
 8003ca0:	428b      	cmp	r3, r1
 8003ca2:	d01d      	beq.n	8003ce0 <HAL_ADC_ConfigChannel+0x63c>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	496c      	ldr	r1, [pc, #432]	@ (8003e5c <HAL_ADC_ConfigChannel+0x7b8>)
 8003caa:	428b      	cmp	r3, r1
 8003cac:	d016      	beq.n	8003cdc <HAL_ADC_ConfigChannel+0x638>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	496b      	ldr	r1, [pc, #428]	@ (8003e60 <HAL_ADC_ConfigChannel+0x7bc>)
 8003cb4:	428b      	cmp	r3, r1
 8003cb6:	d00f      	beq.n	8003cd8 <HAL_ADC_ConfigChannel+0x634>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4969      	ldr	r1, [pc, #420]	@ (8003e64 <HAL_ADC_ConfigChannel+0x7c0>)
 8003cbe:	428b      	cmp	r3, r1
 8003cc0:	d008      	beq.n	8003cd4 <HAL_ADC_ConfigChannel+0x630>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4968      	ldr	r1, [pc, #416]	@ (8003e68 <HAL_ADC_ConfigChannel+0x7c4>)
 8003cc8:	428b      	cmp	r3, r1
 8003cca:	d101      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x62c>
 8003ccc:	4b67      	ldr	r3, [pc, #412]	@ (8003e6c <HAL_ADC_ConfigChannel+0x7c8>)
 8003cce:	e0a0      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e09e      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003cd4:	4b66      	ldr	r3, [pc, #408]	@ (8003e70 <HAL_ADC_ConfigChannel+0x7cc>)
 8003cd6:	e09c      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003cd8:	4b66      	ldr	r3, [pc, #408]	@ (8003e74 <HAL_ADC_ConfigChannel+0x7d0>)
 8003cda:	e09a      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003cdc:	4b60      	ldr	r3, [pc, #384]	@ (8003e60 <HAL_ADC_ConfigChannel+0x7bc>)
 8003cde:	e098      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003ce0:	4b5e      	ldr	r3, [pc, #376]	@ (8003e5c <HAL_ADC_ConfigChannel+0x7b8>)
 8003ce2:	e096      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003ce4:	4b64      	ldr	r3, [pc, #400]	@ (8003e78 <HAL_ADC_ConfigChannel+0x7d4>)
 8003ce6:	e094      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003ce8:	4b64      	ldr	r3, [pc, #400]	@ (8003e7c <HAL_ADC_ConfigChannel+0x7d8>)
 8003cea:	e092      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003cec:	4b64      	ldr	r3, [pc, #400]	@ (8003e80 <HAL_ADC_ConfigChannel+0x7dc>)
 8003cee:	e090      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003cf0:	4b64      	ldr	r3, [pc, #400]	@ (8003e84 <HAL_ADC_ConfigChannel+0x7e0>)
 8003cf2:	e08e      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e08c      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4962      	ldr	r1, [pc, #392]	@ (8003e88 <HAL_ADC_ConfigChannel+0x7e4>)
 8003cfe:	428b      	cmp	r3, r1
 8003d00:	d140      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x6e0>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	494f      	ldr	r1, [pc, #316]	@ (8003e44 <HAL_ADC_ConfigChannel+0x7a0>)
 8003d08:	428b      	cmp	r3, r1
 8003d0a:	d039      	beq.n	8003d80 <HAL_ADC_ConfigChannel+0x6dc>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	494d      	ldr	r1, [pc, #308]	@ (8003e48 <HAL_ADC_ConfigChannel+0x7a4>)
 8003d12:	428b      	cmp	r3, r1
 8003d14:	d032      	beq.n	8003d7c <HAL_ADC_ConfigChannel+0x6d8>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	494c      	ldr	r1, [pc, #304]	@ (8003e4c <HAL_ADC_ConfigChannel+0x7a8>)
 8003d1c:	428b      	cmp	r3, r1
 8003d1e:	d02b      	beq.n	8003d78 <HAL_ADC_ConfigChannel+0x6d4>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	494a      	ldr	r1, [pc, #296]	@ (8003e50 <HAL_ADC_ConfigChannel+0x7ac>)
 8003d26:	428b      	cmp	r3, r1
 8003d28:	d024      	beq.n	8003d74 <HAL_ADC_ConfigChannel+0x6d0>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4949      	ldr	r1, [pc, #292]	@ (8003e54 <HAL_ADC_ConfigChannel+0x7b0>)
 8003d30:	428b      	cmp	r3, r1
 8003d32:	d01d      	beq.n	8003d70 <HAL_ADC_ConfigChannel+0x6cc>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4947      	ldr	r1, [pc, #284]	@ (8003e58 <HAL_ADC_ConfigChannel+0x7b4>)
 8003d3a:	428b      	cmp	r3, r1
 8003d3c:	d016      	beq.n	8003d6c <HAL_ADC_ConfigChannel+0x6c8>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4946      	ldr	r1, [pc, #280]	@ (8003e5c <HAL_ADC_ConfigChannel+0x7b8>)
 8003d44:	428b      	cmp	r3, r1
 8003d46:	d00f      	beq.n	8003d68 <HAL_ADC_ConfigChannel+0x6c4>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4944      	ldr	r1, [pc, #272]	@ (8003e60 <HAL_ADC_ConfigChannel+0x7bc>)
 8003d4e:	428b      	cmp	r3, r1
 8003d50:	d008      	beq.n	8003d64 <HAL_ADC_ConfigChannel+0x6c0>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4944      	ldr	r1, [pc, #272]	@ (8003e68 <HAL_ADC_ConfigChannel+0x7c4>)
 8003d58:	428b      	cmp	r3, r1
 8003d5a:	d101      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x6bc>
 8003d5c:	4b43      	ldr	r3, [pc, #268]	@ (8003e6c <HAL_ADC_ConfigChannel+0x7c8>)
 8003d5e:	e058      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003d60:	2300      	movs	r3, #0
 8003d62:	e056      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003d64:	4b43      	ldr	r3, [pc, #268]	@ (8003e74 <HAL_ADC_ConfigChannel+0x7d0>)
 8003d66:	e054      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003d68:	4b3d      	ldr	r3, [pc, #244]	@ (8003e60 <HAL_ADC_ConfigChannel+0x7bc>)
 8003d6a:	e052      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e5c <HAL_ADC_ConfigChannel+0x7b8>)
 8003d6e:	e050      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003d70:	4b41      	ldr	r3, [pc, #260]	@ (8003e78 <HAL_ADC_ConfigChannel+0x7d4>)
 8003d72:	e04e      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003d74:	4b41      	ldr	r3, [pc, #260]	@ (8003e7c <HAL_ADC_ConfigChannel+0x7d8>)
 8003d76:	e04c      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003d78:	4b41      	ldr	r3, [pc, #260]	@ (8003e80 <HAL_ADC_ConfigChannel+0x7dc>)
 8003d7a:	e04a      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003d7c:	4b41      	ldr	r3, [pc, #260]	@ (8003e84 <HAL_ADC_ConfigChannel+0x7e0>)
 8003d7e:	e048      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e046      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4940      	ldr	r1, [pc, #256]	@ (8003e8c <HAL_ADC_ConfigChannel+0x7e8>)
 8003d8a:	428b      	cmp	r3, r1
 8003d8c:	d140      	bne.n	8003e10 <HAL_ADC_ConfigChannel+0x76c>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	492c      	ldr	r1, [pc, #176]	@ (8003e44 <HAL_ADC_ConfigChannel+0x7a0>)
 8003d94:	428b      	cmp	r3, r1
 8003d96:	d039      	beq.n	8003e0c <HAL_ADC_ConfigChannel+0x768>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	492a      	ldr	r1, [pc, #168]	@ (8003e48 <HAL_ADC_ConfigChannel+0x7a4>)
 8003d9e:	428b      	cmp	r3, r1
 8003da0:	d032      	beq.n	8003e08 <HAL_ADC_ConfigChannel+0x764>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4929      	ldr	r1, [pc, #164]	@ (8003e4c <HAL_ADC_ConfigChannel+0x7a8>)
 8003da8:	428b      	cmp	r3, r1
 8003daa:	d02b      	beq.n	8003e04 <HAL_ADC_ConfigChannel+0x760>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4927      	ldr	r1, [pc, #156]	@ (8003e50 <HAL_ADC_ConfigChannel+0x7ac>)
 8003db2:	428b      	cmp	r3, r1
 8003db4:	d024      	beq.n	8003e00 <HAL_ADC_ConfigChannel+0x75c>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4926      	ldr	r1, [pc, #152]	@ (8003e54 <HAL_ADC_ConfigChannel+0x7b0>)
 8003dbc:	428b      	cmp	r3, r1
 8003dbe:	d01d      	beq.n	8003dfc <HAL_ADC_ConfigChannel+0x758>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4924      	ldr	r1, [pc, #144]	@ (8003e58 <HAL_ADC_ConfigChannel+0x7b4>)
 8003dc6:	428b      	cmp	r3, r1
 8003dc8:	d016      	beq.n	8003df8 <HAL_ADC_ConfigChannel+0x754>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4923      	ldr	r1, [pc, #140]	@ (8003e5c <HAL_ADC_ConfigChannel+0x7b8>)
 8003dd0:	428b      	cmp	r3, r1
 8003dd2:	d00f      	beq.n	8003df4 <HAL_ADC_ConfigChannel+0x750>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4926      	ldr	r1, [pc, #152]	@ (8003e74 <HAL_ADC_ConfigChannel+0x7d0>)
 8003dda:	428b      	cmp	r3, r1
 8003ddc:	d008      	beq.n	8003df0 <HAL_ADC_ConfigChannel+0x74c>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	492b      	ldr	r1, [pc, #172]	@ (8003e90 <HAL_ADC_ConfigChannel+0x7ec>)
 8003de4:	428b      	cmp	r3, r1
 8003de6:	d101      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x748>
 8003de8:	4b2a      	ldr	r3, [pc, #168]	@ (8003e94 <HAL_ADC_ConfigChannel+0x7f0>)
 8003dea:	e012      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003dec:	2300      	movs	r3, #0
 8003dee:	e010      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003df0:	4b27      	ldr	r3, [pc, #156]	@ (8003e90 <HAL_ADC_ConfigChannel+0x7ec>)
 8003df2:	e00e      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003df4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e60 <HAL_ADC_ConfigChannel+0x7bc>)
 8003df6:	e00c      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003df8:	4b18      	ldr	r3, [pc, #96]	@ (8003e5c <HAL_ADC_ConfigChannel+0x7b8>)
 8003dfa:	e00a      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8003e78 <HAL_ADC_ConfigChannel+0x7d4>)
 8003dfe:	e008      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003e00:	4b1e      	ldr	r3, [pc, #120]	@ (8003e7c <HAL_ADC_ConfigChannel+0x7d8>)
 8003e02:	e006      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003e04:	4b1e      	ldr	r3, [pc, #120]	@ (8003e80 <HAL_ADC_ConfigChannel+0x7dc>)
 8003e06:	e004      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003e08:	4b1e      	ldr	r3, [pc, #120]	@ (8003e84 <HAL_ADC_ConfigChannel+0x7e0>)
 8003e0a:	e002      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x76e>
 8003e10:	2300      	movs	r3, #0
 8003e12:	4619      	mov	r1, r3
 8003e14:	4610      	mov	r0, r2
 8003e16:	f7fe fd4b 	bl	80028b0 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f280 80f6 	bge.w	8004010 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a05      	ldr	r2, [pc, #20]	@ (8003e40 <HAL_ADC_ConfigChannel+0x79c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d004      	beq.n	8003e38 <HAL_ADC_ConfigChannel+0x794>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a15      	ldr	r2, [pc, #84]	@ (8003e88 <HAL_ADC_ConfigChannel+0x7e4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d131      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x7f8>
 8003e38:	4b17      	ldr	r3, [pc, #92]	@ (8003e98 <HAL_ADC_ConfigChannel+0x7f4>)
 8003e3a:	e030      	b.n	8003e9e <HAL_ADC_ConfigChannel+0x7fa>
 8003e3c:	47ff0000 	.word	0x47ff0000
 8003e40:	40022000 	.word	0x40022000
 8003e44:	04300002 	.word	0x04300002
 8003e48:	08600004 	.word	0x08600004
 8003e4c:	0c900008 	.word	0x0c900008
 8003e50:	10c00010 	.word	0x10c00010
 8003e54:	14f00020 	.word	0x14f00020
 8003e58:	2a000400 	.word	0x2a000400
 8003e5c:	2e300800 	.word	0x2e300800
 8003e60:	32601000 	.word	0x32601000
 8003e64:	43210000 	.word	0x43210000
 8003e68:	4b840000 	.word	0x4b840000
 8003e6c:	4fb80000 	.word	0x4fb80000
 8003e70:	47520000 	.word	0x47520000
 8003e74:	36902000 	.word	0x36902000
 8003e78:	25b00200 	.word	0x25b00200
 8003e7c:	21800100 	.word	0x21800100
 8003e80:	1d500080 	.word	0x1d500080
 8003e84:	19200040 	.word	0x19200040
 8003e88:	40022100 	.word	0x40022100
 8003e8c:	58026000 	.word	0x58026000
 8003e90:	3ac04000 	.word	0x3ac04000
 8003e94:	3ef08000 	.word	0x3ef08000
 8003e98:	40022300 	.word	0x40022300
 8003e9c:	4b61      	ldr	r3, [pc, #388]	@ (8004024 <HAL_ADC_ConfigChannel+0x980>)
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fe fcf8 	bl	8002894 <LL_ADC_GetCommonPathInternalCh>
 8003ea4:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a5f      	ldr	r2, [pc, #380]	@ (8004028 <HAL_ADC_ConfigChannel+0x984>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d004      	beq.n	8003eba <HAL_ADC_ConfigChannel+0x816>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a5d      	ldr	r2, [pc, #372]	@ (800402c <HAL_ADC_ConfigChannel+0x988>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x834>
 8003eba:	485b      	ldr	r0, [pc, #364]	@ (8004028 <HAL_ADC_ConfigChannel+0x984>)
 8003ebc:	f7fe ff60 	bl	8002d80 <LL_ADC_IsEnabled>
 8003ec0:	4604      	mov	r4, r0
 8003ec2:	485a      	ldr	r0, [pc, #360]	@ (800402c <HAL_ADC_ConfigChannel+0x988>)
 8003ec4:	f7fe ff5c 	bl	8002d80 <LL_ADC_IsEnabled>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	4323      	orrs	r3, r4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	e008      	b.n	8003eea <HAL_ADC_ConfigChannel+0x846>
 8003ed8:	4855      	ldr	r0, [pc, #340]	@ (8004030 <HAL_ADC_ConfigChannel+0x98c>)
 8003eda:	f7fe ff51 	bl	8002d80 <LL_ADC_IsEnabled>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bf0c      	ite	eq
 8003ee4:	2301      	moveq	r3, #1
 8003ee6:	2300      	movne	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d07d      	beq.n	8003fea <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a50      	ldr	r2, [pc, #320]	@ (8004034 <HAL_ADC_ConfigChannel+0x990>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d130      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x8b6>
 8003ef8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003efa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d12b      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a4a      	ldr	r2, [pc, #296]	@ (8004030 <HAL_ADC_ConfigChannel+0x98c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	f040 8081 	bne.w	8004010 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a45      	ldr	r2, [pc, #276]	@ (8004028 <HAL_ADC_ConfigChannel+0x984>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d004      	beq.n	8003f22 <HAL_ADC_ConfigChannel+0x87e>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a43      	ldr	r2, [pc, #268]	@ (800402c <HAL_ADC_ConfigChannel+0x988>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d101      	bne.n	8003f26 <HAL_ADC_ConfigChannel+0x882>
 8003f22:	4a45      	ldr	r2, [pc, #276]	@ (8004038 <HAL_ADC_ConfigChannel+0x994>)
 8003f24:	e000      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x884>
 8003f26:	4a3f      	ldr	r2, [pc, #252]	@ (8004024 <HAL_ADC_ConfigChannel+0x980>)
 8003f28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4610      	mov	r0, r2
 8003f32:	f7fe fc9c 	bl	800286e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f36:	4b41      	ldr	r3, [pc, #260]	@ (800403c <HAL_ADC_ConfigChannel+0x998>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	099b      	lsrs	r3, r3, #6
 8003f3c:	4a40      	ldr	r2, [pc, #256]	@ (8004040 <HAL_ADC_ConfigChannel+0x99c>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	099b      	lsrs	r3, r3, #6
 8003f44:	3301      	adds	r3, #1
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003f4a:	e002      	b.n	8003f52 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f9      	bne.n	8003f4c <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f58:	e05a      	b.n	8004010 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a39      	ldr	r2, [pc, #228]	@ (8004044 <HAL_ADC_ConfigChannel+0x9a0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d11e      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x8fe>
 8003f64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d119      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a2f      	ldr	r2, [pc, #188]	@ (8004030 <HAL_ADC_ConfigChannel+0x98c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d14b      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a2a      	ldr	r2, [pc, #168]	@ (8004028 <HAL_ADC_ConfigChannel+0x984>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d004      	beq.n	8003f8c <HAL_ADC_ConfigChannel+0x8e8>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a29      	ldr	r2, [pc, #164]	@ (800402c <HAL_ADC_ConfigChannel+0x988>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d101      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x8ec>
 8003f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8004038 <HAL_ADC_ConfigChannel+0x994>)
 8003f8e:	e000      	b.n	8003f92 <HAL_ADC_ConfigChannel+0x8ee>
 8003f90:	4a24      	ldr	r2, [pc, #144]	@ (8004024 <HAL_ADC_ConfigChannel+0x980>)
 8003f92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	f7fe fc67 	bl	800286e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fa0:	e036      	b.n	8004010 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a28      	ldr	r2, [pc, #160]	@ (8004048 <HAL_ADC_ConfigChannel+0x9a4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d131      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x96c>
 8003fac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d12c      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1d      	ldr	r2, [pc, #116]	@ (8004030 <HAL_ADC_ConfigChannel+0x98c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d127      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a18      	ldr	r2, [pc, #96]	@ (8004028 <HAL_ADC_ConfigChannel+0x984>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <HAL_ADC_ConfigChannel+0x930>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a17      	ldr	r2, [pc, #92]	@ (800402c <HAL_ADC_ConfigChannel+0x988>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d101      	bne.n	8003fd8 <HAL_ADC_ConfigChannel+0x934>
 8003fd4:	4a18      	ldr	r2, [pc, #96]	@ (8004038 <HAL_ADC_ConfigChannel+0x994>)
 8003fd6:	e000      	b.n	8003fda <HAL_ADC_ConfigChannel+0x936>
 8003fd8:	4a12      	ldr	r2, [pc, #72]	@ (8004024 <HAL_ADC_ConfigChannel+0x980>)
 8003fda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fdc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	f7fe fc43 	bl	800286e <LL_ADC_SetCommonPathInternalCh>
 8003fe8:	e012      	b.n	8004010 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fee:	f043 0220 	orr.w	r2, r3, #32
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8003ffc:	e008      	b.n	8004010 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004002:	f043 0220 	orr.w	r2, r3, #32
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004018:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800401c:	4618      	mov	r0, r3
 800401e:	3794      	adds	r7, #148	@ 0x94
 8004020:	46bd      	mov	sp, r7
 8004022:	bd90      	pop	{r4, r7, pc}
 8004024:	58026300 	.word	0x58026300
 8004028:	40022000 	.word	0x40022000
 800402c:	40022100 	.word	0x40022100
 8004030:	58026000 	.word	0x58026000
 8004034:	c7520000 	.word	0xc7520000
 8004038:	40022300 	.word	0x40022300
 800403c:	240001b0 	.word	0x240001b0
 8004040:	053e2d63 	.word	0x053e2d63
 8004044:	c3210000 	.word	0xc3210000
 8004048:	cb840000 	.word	0xcb840000

0800404c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004056:	2300      	movs	r3, #0
 8004058:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe feda 	bl	8002e1c <LL_ADC_REG_IsConversionOngoing>
 8004068:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fefc 	bl	8002e6c <LL_ADC_INJ_IsConversionOngoing>
 8004074:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d103      	bne.n	8004084 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8098 	beq.w	80041b4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d02a      	beq.n	80040e8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	7e5b      	ldrb	r3, [r3, #25]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d126      	bne.n	80040e8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	7e1b      	ldrb	r3, [r3, #24]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d122      	bne.n	80040e8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80040a2:	2301      	movs	r3, #1
 80040a4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80040a6:	e014      	b.n	80040d2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	4a45      	ldr	r2, [pc, #276]	@ (80041c0 <ADC_ConversionStop+0x174>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d90d      	bls.n	80040cc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b4:	f043 0210 	orr.w	r2, r3, #16
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040c0:	f043 0201 	orr.w	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e074      	b.n	80041b6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	3301      	adds	r3, #1
 80040d0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040dc:	2b40      	cmp	r3, #64	@ 0x40
 80040de:	d1e3      	bne.n	80040a8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2240      	movs	r2, #64	@ 0x40
 80040e6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d014      	beq.n	8004118 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe fe92 	bl	8002e1c <LL_ADC_REG_IsConversionOngoing>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00c      	beq.n	8004118 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fe4f 	bl	8002da6 <LL_ADC_IsDisableOngoing>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d104      	bne.n	8004118 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f7fe fe6e 	bl	8002df4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d014      	beq.n	8004148 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fe fea2 	bl	8002e6c <LL_ADC_INJ_IsConversionOngoing>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00c      	beq.n	8004148 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7fe fe37 	bl	8002da6 <LL_ADC_IsDisableOngoing>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d104      	bne.n	8004148 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fe fe7e 	bl	8002e44 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d005      	beq.n	800415a <ADC_ConversionStop+0x10e>
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	2b03      	cmp	r3, #3
 8004152:	d105      	bne.n	8004160 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004154:	230c      	movs	r3, #12
 8004156:	617b      	str	r3, [r7, #20]
        break;
 8004158:	e005      	b.n	8004166 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800415a:	2308      	movs	r3, #8
 800415c:	617b      	str	r3, [r7, #20]
        break;
 800415e:	e002      	b.n	8004166 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004160:	2304      	movs	r3, #4
 8004162:	617b      	str	r3, [r7, #20]
        break;
 8004164:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004166:	f7fe fb3f 	bl	80027e8 <HAL_GetTick>
 800416a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800416c:	e01b      	b.n	80041a6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800416e:	f7fe fb3b 	bl	80027e8 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b05      	cmp	r3, #5
 800417a:	d914      	bls.n	80041a6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	4013      	ands	r3, r2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00d      	beq.n	80041a6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800418e:	f043 0210 	orr.w	r2, r3, #16
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800419a:	f043 0201 	orr.w	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e007      	b.n	80041b6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1dc      	bne.n	800416e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3720      	adds	r7, #32
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	000cdbff 	.word	0x000cdbff

080041c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fe fdd5 	bl	8002d80 <LL_ADC_IsEnabled>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d16e      	bne.n	80042ba <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	4b38      	ldr	r3, [pc, #224]	@ (80042c4 <ADC_Enable+0x100>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00d      	beq.n	8004206 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ee:	f043 0210 	orr.w	r2, r3, #16
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041fa:	f043 0201 	orr.w	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e05a      	b.n	80042bc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe fd90 	bl	8002d30 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004210:	f7fe faea 	bl	80027e8 <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a2b      	ldr	r2, [pc, #172]	@ (80042c8 <ADC_Enable+0x104>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d004      	beq.n	800422a <ADC_Enable+0x66>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a29      	ldr	r2, [pc, #164]	@ (80042cc <ADC_Enable+0x108>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d101      	bne.n	800422e <ADC_Enable+0x6a>
 800422a:	4b29      	ldr	r3, [pc, #164]	@ (80042d0 <ADC_Enable+0x10c>)
 800422c:	e000      	b.n	8004230 <ADC_Enable+0x6c>
 800422e:	4b29      	ldr	r3, [pc, #164]	@ (80042d4 <ADC_Enable+0x110>)
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe fd13 	bl	8002c5c <LL_ADC_GetMultimode>
 8004236:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a23      	ldr	r2, [pc, #140]	@ (80042cc <ADC_Enable+0x108>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d002      	beq.n	8004248 <ADC_Enable+0x84>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	e000      	b.n	800424a <ADC_Enable+0x86>
 8004248:	4b1f      	ldr	r3, [pc, #124]	@ (80042c8 <ADC_Enable+0x104>)
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	4293      	cmp	r3, r2
 8004250:	d02c      	beq.n	80042ac <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d130      	bne.n	80042ba <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004258:	e028      	b.n	80042ac <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe fd8e 	bl	8002d80 <LL_ADC_IsEnabled>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d104      	bne.n	8004274 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe fd5e 	bl	8002d30 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004274:	f7fe fab8 	bl	80027e8 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d914      	bls.n	80042ac <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b01      	cmp	r3, #1
 800428e:	d00d      	beq.n	80042ac <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004294:	f043 0210 	orr.w	r2, r3, #16
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042a0:	f043 0201 	orr.w	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e007      	b.n	80042bc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d1cf      	bne.n	800425a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	8000003f 	.word	0x8000003f
 80042c8:	40022000 	.word	0x40022000
 80042cc:	40022100 	.word	0x40022100
 80042d0:	40022300 	.word	0x40022300
 80042d4:	58026300 	.word	0x58026300

080042d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fe fd5e 	bl	8002da6 <LL_ADC_IsDisableOngoing>
 80042ea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fe fd45 	bl	8002d80 <LL_ADC_IsEnabled>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d047      	beq.n	800438c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d144      	bne.n	800438c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 030d 	and.w	r3, r3, #13
 800430c:	2b01      	cmp	r3, #1
 800430e:	d10c      	bne.n	800432a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7fe fd1f 	bl	8002d58 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2203      	movs	r2, #3
 8004320:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004322:	f7fe fa61 	bl	80027e8 <HAL_GetTick>
 8004326:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004328:	e029      	b.n	800437e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800432e:	f043 0210 	orr.w	r2, r3, #16
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800433a:	f043 0201 	orr.w	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e023      	b.n	800438e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004346:	f7fe fa4f 	bl	80027e8 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d914      	bls.n	800437e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00d      	beq.n	800437e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004366:	f043 0210 	orr.w	r2, r3, #16
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004372:	f043 0201 	orr.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e007      	b.n	800438e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1dc      	bne.n	8004346 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a6c      	ldr	r2, [pc, #432]	@ (8004558 <ADC_ConfigureBoostMode+0x1c0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d004      	beq.n	80043b4 <ADC_ConfigureBoostMode+0x1c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a6b      	ldr	r2, [pc, #428]	@ (800455c <ADC_ConfigureBoostMode+0x1c4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d109      	bne.n	80043c8 <ADC_ConfigureBoostMode+0x30>
 80043b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004560 <ADC_ConfigureBoostMode+0x1c8>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf14      	ite	ne
 80043c0:	2301      	movne	r3, #1
 80043c2:	2300      	moveq	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e008      	b.n	80043da <ADC_ConfigureBoostMode+0x42>
 80043c8:	4b66      	ldr	r3, [pc, #408]	@ (8004564 <ADC_ConfigureBoostMode+0x1cc>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bf14      	ite	ne
 80043d4:	2301      	movne	r3, #1
 80043d6:	2300      	moveq	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d01c      	beq.n	8004418 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80043de:	f004 fc1f 	bl	8008c20 <HAL_RCC_GetHCLKFreq>
 80043e2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043ec:	d010      	beq.n	8004410 <ADC_ConfigureBoostMode+0x78>
 80043ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043f2:	d873      	bhi.n	80044dc <ADC_ConfigureBoostMode+0x144>
 80043f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f8:	d002      	beq.n	8004400 <ADC_ConfigureBoostMode+0x68>
 80043fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043fe:	d16d      	bne.n	80044dc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	0c1b      	lsrs	r3, r3, #16
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	fbb2 f3f3 	udiv	r3, r2, r3
 800440c:	60fb      	str	r3, [r7, #12]
        break;
 800440e:	e068      	b.n	80044e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	089b      	lsrs	r3, r3, #2
 8004414:	60fb      	str	r3, [r7, #12]
        break;
 8004416:	e064      	b.n	80044e2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004418:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800441c:	f04f 0100 	mov.w	r1, #0
 8004420:	f005 fde4 	bl	8009fec <HAL_RCCEx_GetPeriphCLKFreq>
 8004424:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800442e:	d051      	beq.n	80044d4 <ADC_ConfigureBoostMode+0x13c>
 8004430:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004434:	d854      	bhi.n	80044e0 <ADC_ConfigureBoostMode+0x148>
 8004436:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800443a:	d047      	beq.n	80044cc <ADC_ConfigureBoostMode+0x134>
 800443c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004440:	d84e      	bhi.n	80044e0 <ADC_ConfigureBoostMode+0x148>
 8004442:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004446:	d03d      	beq.n	80044c4 <ADC_ConfigureBoostMode+0x12c>
 8004448:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800444c:	d848      	bhi.n	80044e0 <ADC_ConfigureBoostMode+0x148>
 800444e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004452:	d033      	beq.n	80044bc <ADC_ConfigureBoostMode+0x124>
 8004454:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004458:	d842      	bhi.n	80044e0 <ADC_ConfigureBoostMode+0x148>
 800445a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800445e:	d029      	beq.n	80044b4 <ADC_ConfigureBoostMode+0x11c>
 8004460:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004464:	d83c      	bhi.n	80044e0 <ADC_ConfigureBoostMode+0x148>
 8004466:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800446a:	d01a      	beq.n	80044a2 <ADC_ConfigureBoostMode+0x10a>
 800446c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004470:	d836      	bhi.n	80044e0 <ADC_ConfigureBoostMode+0x148>
 8004472:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004476:	d014      	beq.n	80044a2 <ADC_ConfigureBoostMode+0x10a>
 8004478:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800447c:	d830      	bhi.n	80044e0 <ADC_ConfigureBoostMode+0x148>
 800447e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004482:	d00e      	beq.n	80044a2 <ADC_ConfigureBoostMode+0x10a>
 8004484:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004488:	d82a      	bhi.n	80044e0 <ADC_ConfigureBoostMode+0x148>
 800448a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800448e:	d008      	beq.n	80044a2 <ADC_ConfigureBoostMode+0x10a>
 8004490:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004494:	d824      	bhi.n	80044e0 <ADC_ConfigureBoostMode+0x148>
 8004496:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800449a:	d002      	beq.n	80044a2 <ADC_ConfigureBoostMode+0x10a>
 800449c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80044a0:	d11e      	bne.n	80044e0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	0c9b      	lsrs	r3, r3, #18
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b0:	60fb      	str	r3, [r7, #12]
        break;
 80044b2:	e016      	b.n	80044e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	091b      	lsrs	r3, r3, #4
 80044b8:	60fb      	str	r3, [r7, #12]
        break;
 80044ba:	e012      	b.n	80044e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	60fb      	str	r3, [r7, #12]
        break;
 80044c2:	e00e      	b.n	80044e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	099b      	lsrs	r3, r3, #6
 80044c8:	60fb      	str	r3, [r7, #12]
        break;
 80044ca:	e00a      	b.n	80044e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	09db      	lsrs	r3, r3, #7
 80044d0:	60fb      	str	r3, [r7, #12]
        break;
 80044d2:	e006      	b.n	80044e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	0a1b      	lsrs	r3, r3, #8
 80044d8:	60fb      	str	r3, [r7, #12]
        break;
 80044da:	e002      	b.n	80044e2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80044dc:	bf00      	nop
 80044de:	e000      	b.n	80044e2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80044e0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004568 <ADC_ConfigureBoostMode+0x1d0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d808      	bhi.n	8004502 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80044fe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004500:	e025      	b.n	800454e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4a19      	ldr	r2, [pc, #100]	@ (800456c <ADC_ConfigureBoostMode+0x1d4>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d80a      	bhi.n	8004520 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800451c:	609a      	str	r2, [r3, #8]
}
 800451e:	e016      	b.n	800454e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4a13      	ldr	r2, [pc, #76]	@ (8004570 <ADC_ConfigureBoostMode+0x1d8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d80a      	bhi.n	800453e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800453a:	609a      	str	r2, [r3, #8]
}
 800453c:	e007      	b.n	800454e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800454c:	609a      	str	r2, [r3, #8]
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40022000 	.word	0x40022000
 800455c:	40022100 	.word	0x40022100
 8004560:	40022300 	.word	0x40022300
 8004564:	58026300 	.word	0x58026300
 8004568:	005f5e10 	.word	0x005f5e10
 800456c:	00bebc20 	.word	0x00bebc20
 8004570:	017d7840 	.word	0x017d7840

08004574 <LL_ADC_IsEnabled>:
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <LL_ADC_IsEnabled+0x18>
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <LL_ADC_IsEnabled+0x1a>
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
	...

0800459c <LL_ADC_StartCalibration>:
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	4b09      	ldr	r3, [pc, #36]	@ (80045d4 <LL_ADC_StartCalibration+0x38>)
 80045ae:	4013      	ands	r3, r2
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80045bc:	430a      	orrs	r2, r1
 80045be:	4313      	orrs	r3, r2
 80045c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	609a      	str	r2, [r3, #8]
}
 80045c8:	bf00      	nop
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	3ffeffc0 	.word	0x3ffeffc0

080045d8 <LL_ADC_IsCalibrationOnGoing>:
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045ec:	d101      	bne.n	80045f2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <LL_ADC_REG_IsConversionOngoing>:
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b04      	cmp	r3, #4
 8004612:	d101      	bne.n	8004618 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004634:	2300      	movs	r3, #0
 8004636:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_ADCEx_Calibration_Start+0x1e>
 8004642:	2302      	movs	r3, #2
 8004644:	e04c      	b.n	80046e0 <HAL_ADCEx_Calibration_Start+0xb8>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f7ff fe42 	bl	80042d8 <ADC_Disable>
 8004654:	4603      	mov	r3, r0
 8004656:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004658:	7dfb      	ldrb	r3, [r7, #23]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d135      	bne.n	80046ca <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004662:	4b21      	ldr	r3, [pc, #132]	@ (80046e8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004664:	4013      	ands	r3, r2
 8004666:	f043 0202 	orr.w	r2, r3, #2
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff ff90 	bl	800459c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800467c:	e014      	b.n	80046a8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	3301      	adds	r3, #1
 8004682:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	4a19      	ldr	r2, [pc, #100]	@ (80046ec <HAL_ADCEx_Calibration_Start+0xc4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d30d      	bcc.n	80046a8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004690:	f023 0312 	bic.w	r3, r3, #18
 8004694:	f043 0210 	orr.w	r2, r3, #16
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e01b      	b.n	80046e0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff ff93 	bl	80045d8 <LL_ADC_IsCalibrationOnGoing>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e2      	bne.n	800467e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046bc:	f023 0303 	bic.w	r3, r3, #3
 80046c0:	f043 0201 	orr.w	r2, r3, #1
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	661a      	str	r2, [r3, #96]	@ 0x60
 80046c8:	e005      	b.n	80046d6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ce:	f043 0210 	orr.w	r2, r3, #16
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80046de:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	ffffeefd 	.word	0xffffeefd
 80046ec:	25c3f800 	.word	0x25c3f800

080046f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80046f0:	b590      	push	{r4, r7, lr}
 80046f2:	b0a3      	sub	sp, #140	@ 0x8c
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800470a:	2302      	movs	r3, #2
 800470c:	e0c1      	b.n	8004892 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004716:	2300      	movs	r3, #0
 8004718:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800471a:	2300      	movs	r3, #0
 800471c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a5e      	ldr	r2, [pc, #376]	@ (800489c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d102      	bne.n	800472e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004728:	4b5d      	ldr	r3, [pc, #372]	@ (80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	e001      	b.n	8004732 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10b      	bne.n	8004750 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800473c:	f043 0220 	orr.w	r2, r3, #32
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e0a0      	b.n	8004892 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff ff54 	bl	8004600 <LL_ADC_REG_IsConversionOngoing>
 8004758:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff ff4d 	bl	8004600 <LL_ADC_REG_IsConversionOngoing>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	f040 8081 	bne.w	8004870 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800476e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004772:	2b00      	cmp	r3, #0
 8004774:	d17c      	bne.n	8004870 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a48      	ldr	r2, [pc, #288]	@ (800489c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d004      	beq.n	800478a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a46      	ldr	r2, [pc, #280]	@ (80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d101      	bne.n	800478e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800478a:	4b46      	ldr	r3, [pc, #280]	@ (80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800478c:	e000      	b.n	8004790 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800478e:	4b46      	ldr	r3, [pc, #280]	@ (80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004790:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d039      	beq.n	800480e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800479a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a3a      	ldr	r2, [pc, #232]	@ (800489c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d004      	beq.n	80047c0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a39      	ldr	r2, [pc, #228]	@ (80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d10e      	bne.n	80047de <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80047c0:	4836      	ldr	r0, [pc, #216]	@ (800489c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80047c2:	f7ff fed7 	bl	8004574 <LL_ADC_IsEnabled>
 80047c6:	4604      	mov	r4, r0
 80047c8:	4835      	ldr	r0, [pc, #212]	@ (80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80047ca:	f7ff fed3 	bl	8004574 <LL_ADC_IsEnabled>
 80047ce:	4603      	mov	r3, r0
 80047d0:	4323      	orrs	r3, r4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bf0c      	ite	eq
 80047d6:	2301      	moveq	r3, #1
 80047d8:	2300      	movne	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	e008      	b.n	80047f0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80047de:	4833      	ldr	r0, [pc, #204]	@ (80048ac <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80047e0:	f7ff fec8 	bl	8004574 <LL_ADC_IsEnabled>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	bf0c      	ite	eq
 80047ea:	2301      	moveq	r3, #1
 80047ec:	2300      	movne	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d047      	beq.n	8004884 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80047f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	4b2d      	ldr	r3, [pc, #180]	@ (80048b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80047fa:	4013      	ands	r3, r2
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	6811      	ldr	r1, [r2, #0]
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	6892      	ldr	r2, [r2, #8]
 8004804:	430a      	orrs	r2, r1
 8004806:	431a      	orrs	r2, r3
 8004808:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800480a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800480c:	e03a      	b.n	8004884 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800480e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004816:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004818:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1f      	ldr	r2, [pc, #124]	@ (800489c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d004      	beq.n	800482e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1d      	ldr	r2, [pc, #116]	@ (80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d10e      	bne.n	800484c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800482e:	481b      	ldr	r0, [pc, #108]	@ (800489c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004830:	f7ff fea0 	bl	8004574 <LL_ADC_IsEnabled>
 8004834:	4604      	mov	r4, r0
 8004836:	481a      	ldr	r0, [pc, #104]	@ (80048a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004838:	f7ff fe9c 	bl	8004574 <LL_ADC_IsEnabled>
 800483c:	4603      	mov	r3, r0
 800483e:	4323      	orrs	r3, r4
 8004840:	2b00      	cmp	r3, #0
 8004842:	bf0c      	ite	eq
 8004844:	2301      	moveq	r3, #1
 8004846:	2300      	movne	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	e008      	b.n	800485e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800484c:	4817      	ldr	r0, [pc, #92]	@ (80048ac <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800484e:	f7ff fe91 	bl	8004574 <LL_ADC_IsEnabled>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	bf0c      	ite	eq
 8004858:	2301      	moveq	r3, #1
 800485a:	2300      	movne	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d010      	beq.n	8004884 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004862:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	4b12      	ldr	r3, [pc, #72]	@ (80048b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004868:	4013      	ands	r3, r2
 800486a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800486c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800486e:	e009      	b.n	8004884 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004874:	f043 0220 	orr.w	r2, r3, #32
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004882:	e000      	b.n	8004886 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004884:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800488e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004892:	4618      	mov	r0, r3
 8004894:	378c      	adds	r7, #140	@ 0x8c
 8004896:	46bd      	mov	sp, r7
 8004898:	bd90      	pop	{r4, r7, pc}
 800489a:	bf00      	nop
 800489c:	40022000 	.word	0x40022000
 80048a0:	40022100 	.word	0x40022100
 80048a4:	40022300 	.word	0x40022300
 80048a8:	58026300 	.word	0x58026300
 80048ac:	58026000 	.word	0x58026000
 80048b0:	fffff0e0 	.word	0xfffff0e0

080048b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048c4:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <__NVIC_SetPriorityGrouping+0x40>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048d0:	4013      	ands	r3, r2
 80048d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80048dc:	4b06      	ldr	r3, [pc, #24]	@ (80048f8 <__NVIC_SetPriorityGrouping+0x44>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048e2:	4a04      	ldr	r2, [pc, #16]	@ (80048f4 <__NVIC_SetPriorityGrouping+0x40>)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	60d3      	str	r3, [r2, #12]
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	e000ed00 	.word	0xe000ed00
 80048f8:	05fa0000 	.word	0x05fa0000

080048fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004900:	4b04      	ldr	r3, [pc, #16]	@ (8004914 <__NVIC_GetPriorityGrouping+0x18>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	0a1b      	lsrs	r3, r3, #8
 8004906:	f003 0307 	and.w	r3, r3, #7
}
 800490a:	4618      	mov	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004926:	2b00      	cmp	r3, #0
 8004928:	db0b      	blt.n	8004942 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	f003 021f 	and.w	r2, r3, #31
 8004930:	4907      	ldr	r1, [pc, #28]	@ (8004950 <__NVIC_EnableIRQ+0x38>)
 8004932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	2001      	movs	r0, #1
 800493a:	fa00 f202 	lsl.w	r2, r0, r2
 800493e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	e000e100 	.word	0xe000e100

08004954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	6039      	str	r1, [r7, #0]
 800495e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004960:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004964:	2b00      	cmp	r3, #0
 8004966:	db0a      	blt.n	800497e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	b2da      	uxtb	r2, r3
 800496c:	490c      	ldr	r1, [pc, #48]	@ (80049a0 <__NVIC_SetPriority+0x4c>)
 800496e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004972:	0112      	lsls	r2, r2, #4
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	440b      	add	r3, r1
 8004978:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800497c:	e00a      	b.n	8004994 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	b2da      	uxtb	r2, r3
 8004982:	4908      	ldr	r1, [pc, #32]	@ (80049a4 <__NVIC_SetPriority+0x50>)
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	3b04      	subs	r3, #4
 800498c:	0112      	lsls	r2, r2, #4
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	440b      	add	r3, r1
 8004992:	761a      	strb	r2, [r3, #24]
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	e000e100 	.word	0xe000e100
 80049a4:	e000ed00 	.word	0xe000ed00

080049a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b089      	sub	sp, #36	@ 0x24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f1c3 0307 	rsb	r3, r3, #7
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	bf28      	it	cs
 80049c6:	2304      	movcs	r3, #4
 80049c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	3304      	adds	r3, #4
 80049ce:	2b06      	cmp	r3, #6
 80049d0:	d902      	bls.n	80049d8 <NVIC_EncodePriority+0x30>
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	3b03      	subs	r3, #3
 80049d6:	e000      	b.n	80049da <NVIC_EncodePriority+0x32>
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049dc:	f04f 32ff 	mov.w	r2, #4294967295
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43da      	mvns	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	401a      	ands	r2, r3
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049f0:	f04f 31ff 	mov.w	r1, #4294967295
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	fa01 f303 	lsl.w	r3, r1, r3
 80049fa:	43d9      	mvns	r1, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a00:	4313      	orrs	r3, r2
         );
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3724      	adds	r7, #36	@ 0x24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
	...

08004a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a20:	d301      	bcc.n	8004a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a22:	2301      	movs	r3, #1
 8004a24:	e00f      	b.n	8004a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a26:	4a0a      	ldr	r2, [pc, #40]	@ (8004a50 <SysTick_Config+0x40>)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a2e:	210f      	movs	r1, #15
 8004a30:	f04f 30ff 	mov.w	r0, #4294967295
 8004a34:	f7ff ff8e 	bl	8004954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a38:	4b05      	ldr	r3, [pc, #20]	@ (8004a50 <SysTick_Config+0x40>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a3e:	4b04      	ldr	r3, [pc, #16]	@ (8004a50 <SysTick_Config+0x40>)
 8004a40:	2207      	movs	r2, #7
 8004a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	e000e010 	.word	0xe000e010

08004a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff ff29 	bl	80048b4 <__NVIC_SetPriorityGrouping>
}
 8004a62:	bf00      	nop
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b086      	sub	sp, #24
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	4603      	mov	r3, r0
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	607a      	str	r2, [r7, #4]
 8004a76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a78:	f7ff ff40 	bl	80048fc <__NVIC_GetPriorityGrouping>
 8004a7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	68b9      	ldr	r1, [r7, #8]
 8004a82:	6978      	ldr	r0, [r7, #20]
 8004a84:	f7ff ff90 	bl	80049a8 <NVIC_EncodePriority>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a8e:	4611      	mov	r1, r2
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff ff5f 	bl	8004954 <__NVIC_SetPriority>
}
 8004a96:	bf00      	nop
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff ff33 	bl	8004918 <__NVIC_EnableIRQ>
}
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b082      	sub	sp, #8
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff ffa4 	bl	8004a10 <SysTick_Config>
 8004ac8:	4603      	mov	r3, r0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004ad8:	f3bf 8f5f 	dmb	sy
}
 8004adc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004ade:	4b07      	ldr	r3, [pc, #28]	@ (8004afc <HAL_MPU_Disable+0x28>)
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae2:	4a06      	ldr	r2, [pc, #24]	@ (8004afc <HAL_MPU_Disable+0x28>)
 8004ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ae8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004aea:	4b05      	ldr	r3, [pc, #20]	@ (8004b00 <HAL_MPU_Disable+0x2c>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	605a      	str	r2, [r3, #4]
}
 8004af0:	bf00      	nop
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	e000ed00 	.word	0xe000ed00
 8004b00:	e000ed90 	.word	0xe000ed90

08004b04 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004b0c:	4a0b      	ldr	r2, [pc, #44]	@ (8004b3c <HAL_MPU_Enable+0x38>)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f043 0301 	orr.w	r3, r3, #1
 8004b14:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004b16:	4b0a      	ldr	r3, [pc, #40]	@ (8004b40 <HAL_MPU_Enable+0x3c>)
 8004b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1a:	4a09      	ldr	r2, [pc, #36]	@ (8004b40 <HAL_MPU_Enable+0x3c>)
 8004b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b20:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004b22:	f3bf 8f4f 	dsb	sy
}
 8004b26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b28:	f3bf 8f6f 	isb	sy
}
 8004b2c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	e000ed90 	.word	0xe000ed90
 8004b40:	e000ed00 	.word	0xe000ed00

08004b44 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	785a      	ldrb	r2, [r3, #1]
 8004b50:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc0 <HAL_MPU_ConfigRegion+0x7c>)
 8004b52:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004b54:	4b1a      	ldr	r3, [pc, #104]	@ (8004bc0 <HAL_MPU_ConfigRegion+0x7c>)
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	4a19      	ldr	r2, [pc, #100]	@ (8004bc0 <HAL_MPU_ConfigRegion+0x7c>)
 8004b5a:	f023 0301 	bic.w	r3, r3, #1
 8004b5e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004b60:	4a17      	ldr	r2, [pc, #92]	@ (8004bc0 <HAL_MPU_ConfigRegion+0x7c>)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	7b1b      	ldrb	r3, [r3, #12]
 8004b6c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	7adb      	ldrb	r3, [r3, #11]
 8004b72:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004b74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	7a9b      	ldrb	r3, [r3, #10]
 8004b7a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004b7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	7b5b      	ldrb	r3, [r3, #13]
 8004b82:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004b84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	7b9b      	ldrb	r3, [r3, #14]
 8004b8a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004b8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	7bdb      	ldrb	r3, [r3, #15]
 8004b92:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004b94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	7a5b      	ldrb	r3, [r3, #9]
 8004b9a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004b9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	7a1b      	ldrb	r3, [r3, #8]
 8004ba2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004ba4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	7812      	ldrb	r2, [r2, #0]
 8004baa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004bac:	4a04      	ldr	r2, [pc, #16]	@ (8004bc0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004bae:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004bb0:	6113      	str	r3, [r2, #16]
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	e000ed90 	.word	0xe000ed90

08004bc4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e054      	b.n	8004c80 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	7f5b      	ldrb	r3, [r3, #29]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d105      	bne.n	8004bec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fd f9c0 	bl	8001f6c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	791b      	ldrb	r3, [r3, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10c      	bne.n	8004c14 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a22      	ldr	r2, [pc, #136]	@ (8004c88 <HAL_CRC_Init+0xc4>)
 8004c00:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0218 	bic.w	r2, r2, #24
 8004c10:	609a      	str	r2, [r3, #8]
 8004c12:	e00c      	b.n	8004c2e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6899      	ldr	r1, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f834 	bl	8004c8c <HAL_CRCEx_Polynomial_Set>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e028      	b.n	8004c80 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	795b      	ldrb	r3, [r3, #5]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d105      	bne.n	8004c42 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3e:	611a      	str	r2, [r3, #16]
 8004c40:	e004      	b.n	8004c4c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6912      	ldr	r2, [r2, #16]
 8004c4a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695a      	ldr	r2, [r3, #20]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699a      	ldr	r2, [r3, #24]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	04c11db7 	.word	0x04c11db7

08004c8c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004c9c:	231f      	movs	r3, #31
 8004c9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d102      	bne.n	8004cb0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	75fb      	strb	r3, [r7, #23]
 8004cae:	e063      	b.n	8004d78 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004cb0:	bf00      	nop
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1e5a      	subs	r2, r3, #1
 8004cb6:	613a      	str	r2, [r7, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d009      	beq.n	8004cd0 <HAL_CRCEx_Polynomial_Set+0x44>
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0f0      	beq.n	8004cb2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b18      	cmp	r3, #24
 8004cd4:	d846      	bhi.n	8004d64 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cdc <HAL_CRCEx_Polynomial_Set+0x50>)
 8004cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cdc:	08004d6b 	.word	0x08004d6b
 8004ce0:	08004d65 	.word	0x08004d65
 8004ce4:	08004d65 	.word	0x08004d65
 8004ce8:	08004d65 	.word	0x08004d65
 8004cec:	08004d65 	.word	0x08004d65
 8004cf0:	08004d65 	.word	0x08004d65
 8004cf4:	08004d65 	.word	0x08004d65
 8004cf8:	08004d65 	.word	0x08004d65
 8004cfc:	08004d59 	.word	0x08004d59
 8004d00:	08004d65 	.word	0x08004d65
 8004d04:	08004d65 	.word	0x08004d65
 8004d08:	08004d65 	.word	0x08004d65
 8004d0c:	08004d65 	.word	0x08004d65
 8004d10:	08004d65 	.word	0x08004d65
 8004d14:	08004d65 	.word	0x08004d65
 8004d18:	08004d65 	.word	0x08004d65
 8004d1c:	08004d4d 	.word	0x08004d4d
 8004d20:	08004d65 	.word	0x08004d65
 8004d24:	08004d65 	.word	0x08004d65
 8004d28:	08004d65 	.word	0x08004d65
 8004d2c:	08004d65 	.word	0x08004d65
 8004d30:	08004d65 	.word	0x08004d65
 8004d34:	08004d65 	.word	0x08004d65
 8004d38:	08004d65 	.word	0x08004d65
 8004d3c:	08004d41 	.word	0x08004d41
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b06      	cmp	r3, #6
 8004d44:	d913      	bls.n	8004d6e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004d4a:	e010      	b.n	8004d6e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	2b07      	cmp	r3, #7
 8004d50:	d90f      	bls.n	8004d72 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004d56:	e00c      	b.n	8004d72 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	2b0f      	cmp	r3, #15
 8004d5c:	d90b      	bls.n	8004d76 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004d62:	e008      	b.n	8004d76 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	75fb      	strb	r3, [r7, #23]
        break;
 8004d68:	e006      	b.n	8004d78 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004d6a:	bf00      	nop
 8004d6c:	e004      	b.n	8004d78 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004d6e:	bf00      	nop
 8004d70:	e002      	b.n	8004d78 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004d72:	bf00      	nop
 8004d74:	e000      	b.n	8004d78 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004d76:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004d78:	7dfb      	ldrb	r3, [r7, #23]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10d      	bne.n	8004d9a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f023 0118 	bic.w	r1, r3, #24
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e237      	b.n	800522a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d004      	beq.n	8004dd0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2280      	movs	r2, #128	@ 0x80
 8004dca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e22c      	b.n	800522a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a5c      	ldr	r2, [pc, #368]	@ (8004f48 <HAL_DMA_Abort_IT+0x1a0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d04a      	beq.n	8004e70 <HAL_DMA_Abort_IT+0xc8>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a5b      	ldr	r2, [pc, #364]	@ (8004f4c <HAL_DMA_Abort_IT+0x1a4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d045      	beq.n	8004e70 <HAL_DMA_Abort_IT+0xc8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a59      	ldr	r2, [pc, #356]	@ (8004f50 <HAL_DMA_Abort_IT+0x1a8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d040      	beq.n	8004e70 <HAL_DMA_Abort_IT+0xc8>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a58      	ldr	r2, [pc, #352]	@ (8004f54 <HAL_DMA_Abort_IT+0x1ac>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d03b      	beq.n	8004e70 <HAL_DMA_Abort_IT+0xc8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a56      	ldr	r2, [pc, #344]	@ (8004f58 <HAL_DMA_Abort_IT+0x1b0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d036      	beq.n	8004e70 <HAL_DMA_Abort_IT+0xc8>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a55      	ldr	r2, [pc, #340]	@ (8004f5c <HAL_DMA_Abort_IT+0x1b4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d031      	beq.n	8004e70 <HAL_DMA_Abort_IT+0xc8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a53      	ldr	r2, [pc, #332]	@ (8004f60 <HAL_DMA_Abort_IT+0x1b8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d02c      	beq.n	8004e70 <HAL_DMA_Abort_IT+0xc8>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a52      	ldr	r2, [pc, #328]	@ (8004f64 <HAL_DMA_Abort_IT+0x1bc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d027      	beq.n	8004e70 <HAL_DMA_Abort_IT+0xc8>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a50      	ldr	r2, [pc, #320]	@ (8004f68 <HAL_DMA_Abort_IT+0x1c0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d022      	beq.n	8004e70 <HAL_DMA_Abort_IT+0xc8>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a4f      	ldr	r2, [pc, #316]	@ (8004f6c <HAL_DMA_Abort_IT+0x1c4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d01d      	beq.n	8004e70 <HAL_DMA_Abort_IT+0xc8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a4d      	ldr	r2, [pc, #308]	@ (8004f70 <HAL_DMA_Abort_IT+0x1c8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d018      	beq.n	8004e70 <HAL_DMA_Abort_IT+0xc8>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a4c      	ldr	r2, [pc, #304]	@ (8004f74 <HAL_DMA_Abort_IT+0x1cc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d013      	beq.n	8004e70 <HAL_DMA_Abort_IT+0xc8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a4a      	ldr	r2, [pc, #296]	@ (8004f78 <HAL_DMA_Abort_IT+0x1d0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00e      	beq.n	8004e70 <HAL_DMA_Abort_IT+0xc8>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a49      	ldr	r2, [pc, #292]	@ (8004f7c <HAL_DMA_Abort_IT+0x1d4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d009      	beq.n	8004e70 <HAL_DMA_Abort_IT+0xc8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a47      	ldr	r2, [pc, #284]	@ (8004f80 <HAL_DMA_Abort_IT+0x1d8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d004      	beq.n	8004e70 <HAL_DMA_Abort_IT+0xc8>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a46      	ldr	r2, [pc, #280]	@ (8004f84 <HAL_DMA_Abort_IT+0x1dc>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d101      	bne.n	8004e74 <HAL_DMA_Abort_IT+0xcc>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <HAL_DMA_Abort_IT+0xce>
 8004e74:	2300      	movs	r3, #0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 8086 	beq.w	8004f88 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2204      	movs	r2, #4
 8004e80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a2f      	ldr	r2, [pc, #188]	@ (8004f48 <HAL_DMA_Abort_IT+0x1a0>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d04a      	beq.n	8004f24 <HAL_DMA_Abort_IT+0x17c>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a2e      	ldr	r2, [pc, #184]	@ (8004f4c <HAL_DMA_Abort_IT+0x1a4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d045      	beq.n	8004f24 <HAL_DMA_Abort_IT+0x17c>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8004f50 <HAL_DMA_Abort_IT+0x1a8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d040      	beq.n	8004f24 <HAL_DMA_Abort_IT+0x17c>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a2b      	ldr	r2, [pc, #172]	@ (8004f54 <HAL_DMA_Abort_IT+0x1ac>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d03b      	beq.n	8004f24 <HAL_DMA_Abort_IT+0x17c>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a29      	ldr	r2, [pc, #164]	@ (8004f58 <HAL_DMA_Abort_IT+0x1b0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d036      	beq.n	8004f24 <HAL_DMA_Abort_IT+0x17c>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a28      	ldr	r2, [pc, #160]	@ (8004f5c <HAL_DMA_Abort_IT+0x1b4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d031      	beq.n	8004f24 <HAL_DMA_Abort_IT+0x17c>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a26      	ldr	r2, [pc, #152]	@ (8004f60 <HAL_DMA_Abort_IT+0x1b8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d02c      	beq.n	8004f24 <HAL_DMA_Abort_IT+0x17c>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a25      	ldr	r2, [pc, #148]	@ (8004f64 <HAL_DMA_Abort_IT+0x1bc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d027      	beq.n	8004f24 <HAL_DMA_Abort_IT+0x17c>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a23      	ldr	r2, [pc, #140]	@ (8004f68 <HAL_DMA_Abort_IT+0x1c0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d022      	beq.n	8004f24 <HAL_DMA_Abort_IT+0x17c>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a22      	ldr	r2, [pc, #136]	@ (8004f6c <HAL_DMA_Abort_IT+0x1c4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d01d      	beq.n	8004f24 <HAL_DMA_Abort_IT+0x17c>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a20      	ldr	r2, [pc, #128]	@ (8004f70 <HAL_DMA_Abort_IT+0x1c8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d018      	beq.n	8004f24 <HAL_DMA_Abort_IT+0x17c>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8004f74 <HAL_DMA_Abort_IT+0x1cc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d013      	beq.n	8004f24 <HAL_DMA_Abort_IT+0x17c>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a1d      	ldr	r2, [pc, #116]	@ (8004f78 <HAL_DMA_Abort_IT+0x1d0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00e      	beq.n	8004f24 <HAL_DMA_Abort_IT+0x17c>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8004f7c <HAL_DMA_Abort_IT+0x1d4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d009      	beq.n	8004f24 <HAL_DMA_Abort_IT+0x17c>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a1a      	ldr	r2, [pc, #104]	@ (8004f80 <HAL_DMA_Abort_IT+0x1d8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d004      	beq.n	8004f24 <HAL_DMA_Abort_IT+0x17c>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a19      	ldr	r2, [pc, #100]	@ (8004f84 <HAL_DMA_Abort_IT+0x1dc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d108      	bne.n	8004f36 <HAL_DMA_Abort_IT+0x18e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0201 	bic.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	e178      	b.n	8005228 <HAL_DMA_Abort_IT+0x480>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0201 	bic.w	r2, r2, #1
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	e16f      	b.n	8005228 <HAL_DMA_Abort_IT+0x480>
 8004f48:	40020010 	.word	0x40020010
 8004f4c:	40020028 	.word	0x40020028
 8004f50:	40020040 	.word	0x40020040
 8004f54:	40020058 	.word	0x40020058
 8004f58:	40020070 	.word	0x40020070
 8004f5c:	40020088 	.word	0x40020088
 8004f60:	400200a0 	.word	0x400200a0
 8004f64:	400200b8 	.word	0x400200b8
 8004f68:	40020410 	.word	0x40020410
 8004f6c:	40020428 	.word	0x40020428
 8004f70:	40020440 	.word	0x40020440
 8004f74:	40020458 	.word	0x40020458
 8004f78:	40020470 	.word	0x40020470
 8004f7c:	40020488 	.word	0x40020488
 8004f80:	400204a0 	.word	0x400204a0
 8004f84:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 020e 	bic.w	r2, r2, #14
 8004f96:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a6c      	ldr	r2, [pc, #432]	@ (8005150 <HAL_DMA_Abort_IT+0x3a8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d04a      	beq.n	8005038 <HAL_DMA_Abort_IT+0x290>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a6b      	ldr	r2, [pc, #428]	@ (8005154 <HAL_DMA_Abort_IT+0x3ac>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d045      	beq.n	8005038 <HAL_DMA_Abort_IT+0x290>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a69      	ldr	r2, [pc, #420]	@ (8005158 <HAL_DMA_Abort_IT+0x3b0>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d040      	beq.n	8005038 <HAL_DMA_Abort_IT+0x290>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a68      	ldr	r2, [pc, #416]	@ (800515c <HAL_DMA_Abort_IT+0x3b4>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d03b      	beq.n	8005038 <HAL_DMA_Abort_IT+0x290>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a66      	ldr	r2, [pc, #408]	@ (8005160 <HAL_DMA_Abort_IT+0x3b8>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d036      	beq.n	8005038 <HAL_DMA_Abort_IT+0x290>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a65      	ldr	r2, [pc, #404]	@ (8005164 <HAL_DMA_Abort_IT+0x3bc>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d031      	beq.n	8005038 <HAL_DMA_Abort_IT+0x290>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a63      	ldr	r2, [pc, #396]	@ (8005168 <HAL_DMA_Abort_IT+0x3c0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d02c      	beq.n	8005038 <HAL_DMA_Abort_IT+0x290>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a62      	ldr	r2, [pc, #392]	@ (800516c <HAL_DMA_Abort_IT+0x3c4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d027      	beq.n	8005038 <HAL_DMA_Abort_IT+0x290>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a60      	ldr	r2, [pc, #384]	@ (8005170 <HAL_DMA_Abort_IT+0x3c8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d022      	beq.n	8005038 <HAL_DMA_Abort_IT+0x290>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a5f      	ldr	r2, [pc, #380]	@ (8005174 <HAL_DMA_Abort_IT+0x3cc>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d01d      	beq.n	8005038 <HAL_DMA_Abort_IT+0x290>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a5d      	ldr	r2, [pc, #372]	@ (8005178 <HAL_DMA_Abort_IT+0x3d0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d018      	beq.n	8005038 <HAL_DMA_Abort_IT+0x290>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a5c      	ldr	r2, [pc, #368]	@ (800517c <HAL_DMA_Abort_IT+0x3d4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d013      	beq.n	8005038 <HAL_DMA_Abort_IT+0x290>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a5a      	ldr	r2, [pc, #360]	@ (8005180 <HAL_DMA_Abort_IT+0x3d8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00e      	beq.n	8005038 <HAL_DMA_Abort_IT+0x290>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a59      	ldr	r2, [pc, #356]	@ (8005184 <HAL_DMA_Abort_IT+0x3dc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d009      	beq.n	8005038 <HAL_DMA_Abort_IT+0x290>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a57      	ldr	r2, [pc, #348]	@ (8005188 <HAL_DMA_Abort_IT+0x3e0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d004      	beq.n	8005038 <HAL_DMA_Abort_IT+0x290>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a56      	ldr	r2, [pc, #344]	@ (800518c <HAL_DMA_Abort_IT+0x3e4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d108      	bne.n	800504a <HAL_DMA_Abort_IT+0x2a2>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0201 	bic.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	e007      	b.n	800505a <HAL_DMA_Abort_IT+0x2b2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0201 	bic.w	r2, r2, #1
 8005058:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a3c      	ldr	r2, [pc, #240]	@ (8005150 <HAL_DMA_Abort_IT+0x3a8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d072      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a3a      	ldr	r2, [pc, #232]	@ (8005154 <HAL_DMA_Abort_IT+0x3ac>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d06d      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a39      	ldr	r2, [pc, #228]	@ (8005158 <HAL_DMA_Abort_IT+0x3b0>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d068      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a37      	ldr	r2, [pc, #220]	@ (800515c <HAL_DMA_Abort_IT+0x3b4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d063      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a36      	ldr	r2, [pc, #216]	@ (8005160 <HAL_DMA_Abort_IT+0x3b8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d05e      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a34      	ldr	r2, [pc, #208]	@ (8005164 <HAL_DMA_Abort_IT+0x3bc>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d059      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a33      	ldr	r2, [pc, #204]	@ (8005168 <HAL_DMA_Abort_IT+0x3c0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d054      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a31      	ldr	r2, [pc, #196]	@ (800516c <HAL_DMA_Abort_IT+0x3c4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d04f      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a30      	ldr	r2, [pc, #192]	@ (8005170 <HAL_DMA_Abort_IT+0x3c8>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d04a      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005174 <HAL_DMA_Abort_IT+0x3cc>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d045      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a2d      	ldr	r2, [pc, #180]	@ (8005178 <HAL_DMA_Abort_IT+0x3d0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d040      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a2b      	ldr	r2, [pc, #172]	@ (800517c <HAL_DMA_Abort_IT+0x3d4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d03b      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a2a      	ldr	r2, [pc, #168]	@ (8005180 <HAL_DMA_Abort_IT+0x3d8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d036      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a28      	ldr	r2, [pc, #160]	@ (8005184 <HAL_DMA_Abort_IT+0x3dc>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d031      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a27      	ldr	r2, [pc, #156]	@ (8005188 <HAL_DMA_Abort_IT+0x3e0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d02c      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a25      	ldr	r2, [pc, #148]	@ (800518c <HAL_DMA_Abort_IT+0x3e4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d027      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a24      	ldr	r2, [pc, #144]	@ (8005190 <HAL_DMA_Abort_IT+0x3e8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d022      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a22      	ldr	r2, [pc, #136]	@ (8005194 <HAL_DMA_Abort_IT+0x3ec>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d01d      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a21      	ldr	r2, [pc, #132]	@ (8005198 <HAL_DMA_Abort_IT+0x3f0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d018      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a1f      	ldr	r2, [pc, #124]	@ (800519c <HAL_DMA_Abort_IT+0x3f4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d013      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a1e      	ldr	r2, [pc, #120]	@ (80051a0 <HAL_DMA_Abort_IT+0x3f8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00e      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1c      	ldr	r2, [pc, #112]	@ (80051a4 <HAL_DMA_Abort_IT+0x3fc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d009      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1b      	ldr	r2, [pc, #108]	@ (80051a8 <HAL_DMA_Abort_IT+0x400>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d004      	beq.n	800514a <HAL_DMA_Abort_IT+0x3a2>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a19      	ldr	r2, [pc, #100]	@ (80051ac <HAL_DMA_Abort_IT+0x404>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d132      	bne.n	80051b0 <HAL_DMA_Abort_IT+0x408>
 800514a:	2301      	movs	r3, #1
 800514c:	e031      	b.n	80051b2 <HAL_DMA_Abort_IT+0x40a>
 800514e:	bf00      	nop
 8005150:	40020010 	.word	0x40020010
 8005154:	40020028 	.word	0x40020028
 8005158:	40020040 	.word	0x40020040
 800515c:	40020058 	.word	0x40020058
 8005160:	40020070 	.word	0x40020070
 8005164:	40020088 	.word	0x40020088
 8005168:	400200a0 	.word	0x400200a0
 800516c:	400200b8 	.word	0x400200b8
 8005170:	40020410 	.word	0x40020410
 8005174:	40020428 	.word	0x40020428
 8005178:	40020440 	.word	0x40020440
 800517c:	40020458 	.word	0x40020458
 8005180:	40020470 	.word	0x40020470
 8005184:	40020488 	.word	0x40020488
 8005188:	400204a0 	.word	0x400204a0
 800518c:	400204b8 	.word	0x400204b8
 8005190:	58025408 	.word	0x58025408
 8005194:	5802541c 	.word	0x5802541c
 8005198:	58025430 	.word	0x58025430
 800519c:	58025444 	.word	0x58025444
 80051a0:	58025458 	.word	0x58025458
 80051a4:	5802546c 	.word	0x5802546c
 80051a8:	58025480 	.word	0x58025480
 80051ac:	58025494 	.word	0x58025494
 80051b0:	2300      	movs	r3, #0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d028      	beq.n	8005208 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051c4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ca:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d0:	f003 031f 	and.w	r3, r3, #31
 80051d4:	2201      	movs	r2, #1
 80051d6:	409a      	lsls	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80051e4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00c      	beq.n	8005208 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051fc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005206:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop

08005234 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005242:	b2db      	uxtb	r3, r3
}
 8005244:	4618      	mov	r0, r3
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e04f      	b.n	8005302 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d106      	bne.n	800527c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fc fe9a 	bl	8001fb0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4b20      	ldr	r3, [pc, #128]	@ (800530c <HAL_DMA2D_Init+0xbc>)
 800528c:	4013      	ands	r3, r2
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6851      	ldr	r1, [r2, #4]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	69d2      	ldr	r2, [r2, #28]
 8005296:	4311      	orrs	r1, r2
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	430b      	orrs	r3, r1
 800529e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005310 <HAL_DMA2D_Init+0xc0>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6891      	ldr	r1, [r2, #8]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6992      	ldr	r2, [r2, #24]
 80052b2:	4311      	orrs	r1, r2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6812      	ldr	r2, [r2, #0]
 80052b8:	430b      	orrs	r3, r1
 80052ba:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052c2:	4b14      	ldr	r3, [pc, #80]	@ (8005314 <HAL_DMA2D_Init+0xc4>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68d1      	ldr	r1, [r2, #12]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	430b      	orrs	r3, r1
 80052d0:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	051a      	lsls	r2, r3, #20
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	055b      	lsls	r3, r3, #21
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	fff8ffbf 	.word	0xfff8ffbf
 8005310:	fffffef8 	.word	0xfffffef8
 8005314:	ffff0000 	.word	0xffff0000

08005318 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_DMA2D_ConfigLayer+0x24>
 8005338:	2302      	movs	r3, #2
 800533a:	e092      	b.n	8005462 <HAL_DMA2D_ConfigLayer+0x14a>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	4613      	mov	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	1a9b      	subs	r3, r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	3328      	adds	r3, #40	@ 0x28
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	4413      	add	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	041b      	lsls	r3, r3, #16
 8005368:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005370:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800537c:	4b3c      	ldr	r3, [pc, #240]	@ (8005470 <HAL_DMA2D_ConfigLayer+0x158>)
 800537e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	2b0a      	cmp	r3, #10
 8005386:	d003      	beq.n	8005390 <HAL_DMA2D_ConfigLayer+0x78>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b09      	cmp	r3, #9
 800538e:	d107      	bne.n	80053a0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	e005      	b.n	80053ac <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	061b      	lsls	r3, r3, #24
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d120      	bne.n	80053f4 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	43db      	mvns	r3, r3
 80053bc:	ea02 0103 	and.w	r1, r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b0a      	cmp	r3, #10
 80053da:	d003      	beq.n	80053e4 <HAL_DMA2D_ConfigLayer+0xcc>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b09      	cmp	r3, #9
 80053e2:	d135      	bne.n	8005450 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80053f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80053f2:	e02d      	b.n	8005450 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b0b      	cmp	r3, #11
 80053fa:	d109      	bne.n	8005410 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	049b      	lsls	r3, r3, #18
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800540e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69da      	ldr	r2, [r3, #28]
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	43db      	mvns	r3, r3
 800541a:	ea02 0103 	and.w	r1, r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	430a      	orrs	r2, r1
 8005426:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b0a      	cmp	r3, #10
 8005438:	d003      	beq.n	8005442 <HAL_DMA2D_ConfigLayer+0x12a>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2b09      	cmp	r3, #9
 8005440:	d106      	bne.n	8005450 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800544e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	ff33000f 	.word	0xff33000f

08005474 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005474:	b480      	push	{r7}
 8005476:	b089      	sub	sp, #36	@ 0x24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800547e:	2300      	movs	r3, #0
 8005480:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005482:	4b86      	ldr	r3, [pc, #536]	@ (800569c <HAL_GPIO_Init+0x228>)
 8005484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005486:	e18c      	b.n	80057a2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	2101      	movs	r1, #1
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	fa01 f303 	lsl.w	r3, r1, r3
 8005494:	4013      	ands	r3, r2
 8005496:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 817e 	beq.w	800579c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f003 0303 	and.w	r3, r3, #3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d005      	beq.n	80054b8 <HAL_GPIO_Init+0x44>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d130      	bne.n	800551a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	2203      	movs	r2, #3
 80054c4:	fa02 f303 	lsl.w	r3, r2, r3
 80054c8:	43db      	mvns	r3, r3
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	4013      	ands	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	4313      	orrs	r3, r2
 80054e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054ee:	2201      	movs	r2, #1
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	43db      	mvns	r3, r3
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	4013      	ands	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	091b      	lsrs	r3, r3, #4
 8005504:	f003 0201 	and.w	r2, r3, #1
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4313      	orrs	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	2b03      	cmp	r3, #3
 8005524:	d017      	beq.n	8005556 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	2203      	movs	r2, #3
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	43db      	mvns	r3, r3
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	4013      	ands	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	4313      	orrs	r3, r2
 800554e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d123      	bne.n	80055aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	08da      	lsrs	r2, r3, #3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3208      	adds	r2, #8
 800556a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	220f      	movs	r2, #15
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	43db      	mvns	r3, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	4013      	ands	r3, r2
 8005584:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	4313      	orrs	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	08da      	lsrs	r2, r3, #3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3208      	adds	r2, #8
 80055a4:	69b9      	ldr	r1, [r7, #24]
 80055a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	2203      	movs	r2, #3
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	43db      	mvns	r3, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4013      	ands	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f003 0203 	and.w	r2, r3, #3
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 80d8 	beq.w	800579c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055ec:	4b2c      	ldr	r3, [pc, #176]	@ (80056a0 <HAL_GPIO_Init+0x22c>)
 80055ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055f2:	4a2b      	ldr	r2, [pc, #172]	@ (80056a0 <HAL_GPIO_Init+0x22c>)
 80055f4:	f043 0302 	orr.w	r3, r3, #2
 80055f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80055fc:	4b28      	ldr	r3, [pc, #160]	@ (80056a0 <HAL_GPIO_Init+0x22c>)
 80055fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800560a:	4a26      	ldr	r2, [pc, #152]	@ (80056a4 <HAL_GPIO_Init+0x230>)
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	089b      	lsrs	r3, r3, #2
 8005610:	3302      	adds	r3, #2
 8005612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	220f      	movs	r2, #15
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	43db      	mvns	r3, r3
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	4013      	ands	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a1d      	ldr	r2, [pc, #116]	@ (80056a8 <HAL_GPIO_Init+0x234>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d04a      	beq.n	80056cc <HAL_GPIO_Init+0x258>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a1c      	ldr	r2, [pc, #112]	@ (80056ac <HAL_GPIO_Init+0x238>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d02b      	beq.n	8005696 <HAL_GPIO_Init+0x222>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a1b      	ldr	r2, [pc, #108]	@ (80056b0 <HAL_GPIO_Init+0x23c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d025      	beq.n	8005692 <HAL_GPIO_Init+0x21e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a1a      	ldr	r2, [pc, #104]	@ (80056b4 <HAL_GPIO_Init+0x240>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d01f      	beq.n	800568e <HAL_GPIO_Init+0x21a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a19      	ldr	r2, [pc, #100]	@ (80056b8 <HAL_GPIO_Init+0x244>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d019      	beq.n	800568a <HAL_GPIO_Init+0x216>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a18      	ldr	r2, [pc, #96]	@ (80056bc <HAL_GPIO_Init+0x248>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d013      	beq.n	8005686 <HAL_GPIO_Init+0x212>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a17      	ldr	r2, [pc, #92]	@ (80056c0 <HAL_GPIO_Init+0x24c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00d      	beq.n	8005682 <HAL_GPIO_Init+0x20e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a16      	ldr	r2, [pc, #88]	@ (80056c4 <HAL_GPIO_Init+0x250>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d007      	beq.n	800567e <HAL_GPIO_Init+0x20a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a15      	ldr	r2, [pc, #84]	@ (80056c8 <HAL_GPIO_Init+0x254>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d101      	bne.n	800567a <HAL_GPIO_Init+0x206>
 8005676:	2309      	movs	r3, #9
 8005678:	e029      	b.n	80056ce <HAL_GPIO_Init+0x25a>
 800567a:	230a      	movs	r3, #10
 800567c:	e027      	b.n	80056ce <HAL_GPIO_Init+0x25a>
 800567e:	2307      	movs	r3, #7
 8005680:	e025      	b.n	80056ce <HAL_GPIO_Init+0x25a>
 8005682:	2306      	movs	r3, #6
 8005684:	e023      	b.n	80056ce <HAL_GPIO_Init+0x25a>
 8005686:	2305      	movs	r3, #5
 8005688:	e021      	b.n	80056ce <HAL_GPIO_Init+0x25a>
 800568a:	2304      	movs	r3, #4
 800568c:	e01f      	b.n	80056ce <HAL_GPIO_Init+0x25a>
 800568e:	2303      	movs	r3, #3
 8005690:	e01d      	b.n	80056ce <HAL_GPIO_Init+0x25a>
 8005692:	2302      	movs	r3, #2
 8005694:	e01b      	b.n	80056ce <HAL_GPIO_Init+0x25a>
 8005696:	2301      	movs	r3, #1
 8005698:	e019      	b.n	80056ce <HAL_GPIO_Init+0x25a>
 800569a:	bf00      	nop
 800569c:	58000080 	.word	0x58000080
 80056a0:	58024400 	.word	0x58024400
 80056a4:	58000400 	.word	0x58000400
 80056a8:	58020000 	.word	0x58020000
 80056ac:	58020400 	.word	0x58020400
 80056b0:	58020800 	.word	0x58020800
 80056b4:	58020c00 	.word	0x58020c00
 80056b8:	58021000 	.word	0x58021000
 80056bc:	58021400 	.word	0x58021400
 80056c0:	58021800 	.word	0x58021800
 80056c4:	58021c00 	.word	0x58021c00
 80056c8:	58022400 	.word	0x58022400
 80056cc:	2300      	movs	r3, #0
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	f002 0203 	and.w	r2, r2, #3
 80056d4:	0092      	lsls	r2, r2, #2
 80056d6:	4093      	lsls	r3, r2
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	4313      	orrs	r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056de:	4938      	ldr	r1, [pc, #224]	@ (80057c0 <HAL_GPIO_Init+0x34c>)
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	089b      	lsrs	r3, r3, #2
 80056e4:	3302      	adds	r3, #2
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	43db      	mvns	r3, r3
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	4013      	ands	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005712:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800571a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	43db      	mvns	r3, r3
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	4013      	ands	r3, r2
 800572a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005740:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	43db      	mvns	r3, r3
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4013      	ands	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	43db      	mvns	r3, r3
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	4013      	ands	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	3301      	adds	r3, #1
 80057a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	fa22 f303 	lsr.w	r3, r2, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f47f ae6b 	bne.w	8005488 <HAL_GPIO_Init+0x14>
  }
}
 80057b2:	bf00      	nop
 80057b4:	bf00      	nop
 80057b6:	3724      	adds	r7, #36	@ 0x24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	58000400 	.word	0x58000400

080057c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	460b      	mov	r3, r1
 80057ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	887b      	ldrh	r3, [r7, #2]
 80057d6:	4013      	ands	r3, r2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057dc:	2301      	movs	r3, #1
 80057de:	73fb      	strb	r3, [r7, #15]
 80057e0:	e001      	b.n	80057e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057e2:	2300      	movs	r3, #0
 80057e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	807b      	strh	r3, [r7, #2]
 8005800:	4613      	mov	r3, r2
 8005802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005804:	787b      	ldrb	r3, [r7, #1]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800580a:	887a      	ldrh	r2, [r7, #2]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005810:	e003      	b.n	800581a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005812:	887b      	ldrh	r3, [r7, #2]
 8005814:	041a      	lsls	r2, r3, #16
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	619a      	str	r2, [r3, #24]
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	4603      	mov	r3, r0
 800582e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005834:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005838:	88fb      	ldrh	r3, [r7, #6]
 800583a:	4013      	ands	r3, r2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d008      	beq.n	8005852 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005840:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005844:	88fb      	ldrh	r3, [r7, #6]
 8005846:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	4618      	mov	r0, r3
 800584e:	f7fc f93d 	bl	8001acc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005852:	bf00      	nop
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e08b      	b.n	8005986 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fc fbb6 	bl	8001ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2224      	movs	r2, #36	@ 0x24
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0201 	bic.w	r2, r2, #1
 800589e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80058ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d107      	bne.n	80058d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058d2:	609a      	str	r2, [r3, #8]
 80058d4:	e006      	b.n	80058e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80058e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d108      	bne.n	80058fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058fa:	605a      	str	r2, [r3, #4]
 80058fc:	e007      	b.n	800590e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800590c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6859      	ldr	r1, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	4b1d      	ldr	r3, [pc, #116]	@ (8005990 <HAL_I2C_Init+0x134>)
 800591a:	430b      	orrs	r3, r1
 800591c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800592c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691a      	ldr	r2, [r3, #16]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	69d9      	ldr	r1, [r3, #28]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1a      	ldr	r2, [r3, #32]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	02008000 	.word	0x02008000

08005994 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af02      	add	r7, sp, #8
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	607a      	str	r2, [r7, #4]
 800599e:	461a      	mov	r2, r3
 80059a0:	460b      	mov	r3, r1
 80059a2:	817b      	strh	r3, [r7, #10]
 80059a4:	4613      	mov	r3, r2
 80059a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	f040 80fd 	bne.w	8005bb0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_I2C_Master_Transmit+0x30>
 80059c0:	2302      	movs	r3, #2
 80059c2:	e0f6      	b.n	8005bb2 <HAL_I2C_Master_Transmit+0x21e>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059cc:	f7fc ff0c 	bl	80027e8 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	2319      	movs	r3, #25
 80059d8:	2201      	movs	r2, #1
 80059da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f001 fe6b 	bl	80076ba <I2C_WaitOnFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e0e1      	b.n	8005bb2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2221      	movs	r2, #33	@ 0x21
 80059f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2210      	movs	r2, #16
 80059fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	893a      	ldrh	r2, [r7, #8]
 8005a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	2bff      	cmp	r3, #255	@ 0xff
 8005a1e:	d906      	bls.n	8005a2e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	22ff      	movs	r2, #255	@ 0xff
 8005a24:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005a26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	e007      	b.n	8005a3e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005a38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a3c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d024      	beq.n	8005a90 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4a:	781a      	ldrb	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	8979      	ldrh	r1, [r7, #10]
 8005a82:	4b4e      	ldr	r3, [pc, #312]	@ (8005bbc <HAL_I2C_Master_Transmit+0x228>)
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f001 ffd9 	bl	8007a40 <I2C_TransferConfig>
 8005a8e:	e066      	b.n	8005b5e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	8979      	ldrh	r1, [r7, #10]
 8005a98:	4b48      	ldr	r3, [pc, #288]	@ (8005bbc <HAL_I2C_Master_Transmit+0x228>)
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f001 ffce 	bl	8007a40 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005aa4:	e05b      	b.n	8005b5e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	6a39      	ldr	r1, [r7, #32]
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f001 fe5e 	bl	800776c <I2C_WaitOnTXISFlagUntilTimeout>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e07b      	b.n	8005bb2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abe:	781a      	ldrb	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d034      	beq.n	8005b5e <HAL_I2C_Master_Transmit+0x1ca>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d130      	bne.n	8005b5e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	2200      	movs	r2, #0
 8005b04:	2180      	movs	r1, #128	@ 0x80
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f001 fdd7 	bl	80076ba <I2C_WaitOnFlagUntilTimeout>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e04d      	b.n	8005bb2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	2bff      	cmp	r3, #255	@ 0xff
 8005b1e:	d90e      	bls.n	8005b3e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	22ff      	movs	r2, #255	@ 0xff
 8005b24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	8979      	ldrh	r1, [r7, #10]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f001 ff82 	bl	8007a40 <I2C_TransferConfig>
 8005b3c:	e00f      	b.n	8005b5e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	8979      	ldrh	r1, [r7, #10]
 8005b50:	2300      	movs	r3, #0
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f001 ff71 	bl	8007a40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d19e      	bne.n	8005aa6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	6a39      	ldr	r1, [r7, #32]
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f001 fe44 	bl	80077fa <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e01a      	b.n	8005bb2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2220      	movs	r2, #32
 8005b82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6859      	ldr	r1, [r3, #4]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc0 <HAL_I2C_Master_Transmit+0x22c>)
 8005b90:	400b      	ands	r3, r1
 8005b92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	e000      	b.n	8005bb2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005bb0:	2302      	movs	r3, #2
  }
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	80002000 	.word	0x80002000
 8005bc0:	fe00e800 	.word	0xfe00e800

08005bc4 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b088      	sub	sp, #32
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	607a      	str	r2, [r7, #4]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	817b      	strh	r3, [r7, #10]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d153      	bne.n	8005c8c <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bf2:	d101      	bne.n	8005bf8 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e04a      	b.n	8005c8e <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_I2C_Master_Receive_IT+0x42>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e043      	b.n	8005c8e <HAL_I2C_Master_Receive_IT+0xca>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2222      	movs	r2, #34	@ 0x22
 8005c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2210      	movs	r2, #16
 8005c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	893a      	ldrh	r2, [r7, #8]
 8005c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4a19      	ldr	r2, [pc, #100]	@ (8005c98 <HAL_I2C_Master_Receive_IT+0xd4>)
 8005c34:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4a18      	ldr	r2, [pc, #96]	@ (8005c9c <HAL_I2C_Master_Receive_IT+0xd8>)
 8005c3a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2bff      	cmp	r3, #255	@ 0xff
 8005c44:	d906      	bls.n	8005c54 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	22ff      	movs	r2, #255	@ 0xff
 8005c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005c4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	e007      	b.n	8005c64 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005c5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c62:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	8979      	ldrh	r1, [r7, #10]
 8005c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca0 <HAL_I2C_Master_Receive_IT+0xdc>)
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f001 fee4 	bl	8007a40 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005c80:	2102      	movs	r1, #2
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f001 ff0e 	bl	8007aa4 <I2C_Enable_IRQ>

    return HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e000      	b.n	8005c8e <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005c8c:	2302      	movs	r3, #2
  }
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	ffff0000 	.word	0xffff0000
 8005c9c:	08005e57 	.word	0x08005e57
 8005ca0:	80002400 	.word	0x80002400

08005ca4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d005      	beq.n	8005cd0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	4798      	blx	r3
  }
}
 8005cd0:	bf00      	nop
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	0a1b      	lsrs	r3, r3, #8
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d010      	beq.n	8005d1e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	09db      	lsrs	r3, r3, #7
 8005d00:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00a      	beq.n	8005d1e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0c:	f043 0201 	orr.w	r2, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d1c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	0a9b      	lsrs	r3, r3, #10
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d010      	beq.n	8005d4c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	09db      	lsrs	r3, r3, #7
 8005d2e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d3a:	f043 0208 	orr.w	r2, r3, #8
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d4a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	0a5b      	lsrs	r3, r3, #9
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d010      	beq.n	8005d7a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	09db      	lsrs	r3, r3, #7
 8005d5c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00a      	beq.n	8005d7a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d68:	f043 0202 	orr.w	r2, r3, #2
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d78:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f003 030b 	and.w	r3, r3, #11
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005d8a:	68f9      	ldr	r1, [r7, #12]
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f001 fb3b 	bl	8007408 <I2C_ITError>
  }
}
 8005d92:	bf00      	nop
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	460b      	mov	r3, r1
 8005de0:	70fb      	strb	r3, [r7, #3]
 8005de2:	4613      	mov	r3, r2
 8005de4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b088      	sub	sp, #32
 8005e5a:	af02      	add	r7, sp, #8
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <I2C_Master_ISR_IT+0x1e>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e120      	b.n	80060b6 <I2C_Master_ISR_IT+0x260>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	091b      	lsrs	r3, r3, #4
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d013      	beq.n	8005eb0 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00d      	beq.n	8005eb0 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2210      	movs	r2, #16
 8005e9a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea0:	f043 0204 	orr.w	r2, r3, #4
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f001 fbc4 	bl	8007636 <I2C_Flush_TXDR>
 8005eae:	e0ed      	b.n	800608c <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	089b      	lsrs	r3, r3, #2
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d023      	beq.n	8005f04 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	089b      	lsrs	r3, r3, #2
 8005ec0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01d      	beq.n	8005f04 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f023 0304 	bic.w	r3, r3, #4
 8005ece:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	3b01      	subs	r3, #1
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f02:	e0c3      	b.n	800608c <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	099b      	lsrs	r3, r3, #6
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d12a      	bne.n	8005f66 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	085b      	lsrs	r3, r3, #1
 8005f14:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d024      	beq.n	8005f66 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01e      	beq.n	8005f66 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 80ac 	beq.w	800608c <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f38:	781a      	ldrb	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005f64:	e092      	b.n	800608c <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	09db      	lsrs	r3, r3, #7
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d05d      	beq.n	800602e <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	099b      	lsrs	r3, r3, #6
 8005f76:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d057      	beq.n	800602e <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d040      	beq.n	800600a <I2C_Master_ISR_IT+0x1b4>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d13c      	bne.n	800600a <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f9c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	2bff      	cmp	r3, #255	@ 0xff
 8005fa6:	d90e      	bls.n	8005fc6 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	22ff      	movs	r2, #255	@ 0xff
 8005fac:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	8a79      	ldrh	r1, [r7, #18]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f001 fd3e 	bl	8007a40 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fc4:	e032      	b.n	800602c <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005fd8:	d00b      	beq.n	8005ff2 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fde:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005fe4:	8a79      	ldrh	r1, [r7, #18]
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	9000      	str	r0, [sp, #0]
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f001 fd28 	bl	8007a40 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ff0:	e01c      	b.n	800602c <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	8a79      	ldrh	r1, [r7, #18]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f001 fd1c 	bl	8007a40 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006008:	e010      	b.n	800602c <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006014:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006018:	d003      	beq.n	8006022 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 fdde 	bl	8006bdc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006020:	e034      	b.n	800608c <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006022:	2140      	movs	r1, #64	@ 0x40
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f001 f9ef 	bl	8007408 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800602a:	e02f      	b.n	800608c <I2C_Master_ISR_IT+0x236>
 800602c:	e02e      	b.n	800608c <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	099b      	lsrs	r3, r3, #6
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d028      	beq.n	800608c <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	099b      	lsrs	r3, r3, #6
 800603e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006042:	2b00      	cmp	r3, #0
 8006044:	d022      	beq.n	800608c <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d119      	bne.n	8006084 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800605a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800605e:	d015      	beq.n	800608c <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006064:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006068:	d108      	bne.n	800607c <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006078:	605a      	str	r2, [r3, #4]
 800607a:	e007      	b.n	800608c <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 fdad 	bl	8006bdc <I2C_ITMasterSeqCplt>
 8006082:	e003      	b.n	800608c <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006084:	2140      	movs	r1, #64	@ 0x40
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f001 f9be 	bl	8007408 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d009      	beq.n	80060ac <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80060a4:	6979      	ldr	r1, [r7, #20]
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 fe34 	bl	8006d14 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b086      	sub	sp, #24
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <I2C_Slave_ISR_IT+0x24>
 80060de:	2302      	movs	r3, #2
 80060e0:	e0ed      	b.n	80062be <I2C_Slave_ISR_IT+0x200>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d004      	beq.n	800610c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006102:	6939      	ldr	r1, [r7, #16]
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 fecf 	bl	8006ea8 <I2C_ITSlaveCplt>
 800610a:	e0d3      	b.n	80062b4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	091b      	lsrs	r3, r3, #4
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d04d      	beq.n	80061b4 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	091b      	lsrs	r3, r3, #4
 800611c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006120:	2b00      	cmp	r3, #0
 8006122:	d047      	beq.n	80061b4 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d128      	bne.n	8006180 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b28      	cmp	r3, #40	@ 0x28
 8006138:	d108      	bne.n	800614c <I2C_Slave_ISR_IT+0x8e>
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006140:	d104      	bne.n	800614c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006142:	6939      	ldr	r1, [r7, #16]
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f001 f909 	bl	800735c <I2C_ITListenCplt>
 800614a:	e032      	b.n	80061b2 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b29      	cmp	r3, #41	@ 0x29
 8006156:	d10e      	bne.n	8006176 <I2C_Slave_ISR_IT+0xb8>
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800615e:	d00a      	beq.n	8006176 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2210      	movs	r2, #16
 8006166:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f001 fa64 	bl	8007636 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 fd71 	bl	8006c56 <I2C_ITSlaveSeqCplt>
 8006174:	e01d      	b.n	80061b2 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2210      	movs	r2, #16
 800617c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800617e:	e096      	b.n	80062ae <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2210      	movs	r2, #16
 8006186:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800618c:	f043 0204 	orr.w	r2, r3, #4
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d004      	beq.n	80061a4 <I2C_Slave_ISR_IT+0xe6>
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061a0:	f040 8085 	bne.w	80062ae <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a8:	4619      	mov	r1, r3
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f001 f92c 	bl	8007408 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80061b0:	e07d      	b.n	80062ae <I2C_Slave_ISR_IT+0x1f0>
 80061b2:	e07c      	b.n	80062ae <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	089b      	lsrs	r3, r3, #2
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d030      	beq.n	8006222 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	089b      	lsrs	r3, r3, #2
 80061c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d02a      	beq.n	8006222 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d018      	beq.n	8006208 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061fe:	b29b      	uxth	r3, r3
 8006200:	3b01      	subs	r3, #1
 8006202:	b29a      	uxth	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800620c:	b29b      	uxth	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d14f      	bne.n	80062b2 <I2C_Slave_ISR_IT+0x1f4>
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006218:	d04b      	beq.n	80062b2 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 fd1b 	bl	8006c56 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006220:	e047      	b.n	80062b2 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	08db      	lsrs	r3, r3, #3
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	08db      	lsrs	r3, r3, #3
 8006232:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006236:	2b00      	cmp	r3, #0
 8006238:	d004      	beq.n	8006244 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800623a:	6939      	ldr	r1, [r7, #16]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fc49 	bl	8006ad4 <I2C_ITAddrCplt>
 8006242:	e037      	b.n	80062b4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	085b      	lsrs	r3, r3, #1
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d031      	beq.n	80062b4 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	085b      	lsrs	r3, r3, #1
 8006254:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006258:	2b00      	cmp	r3, #0
 800625a:	d02b      	beq.n	80062b4 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006260:	b29b      	uxth	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d018      	beq.n	8006298 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626a:	781a      	ldrb	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006280:	b29b      	uxth	r3, r3
 8006282:	3b01      	subs	r3, #1
 8006284:	b29a      	uxth	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800628e:	3b01      	subs	r3, #1
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006296:	e00d      	b.n	80062b4 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800629e:	d002      	beq.n	80062a6 <I2C_Slave_ISR_IT+0x1e8>
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d106      	bne.n	80062b4 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fcd5 	bl	8006c56 <I2C_ITSlaveSeqCplt>
 80062ac:	e002      	b.n	80062b4 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80062ae:	bf00      	nop
 80062b0:	e000      	b.n	80062b4 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80062b2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b088      	sub	sp, #32
 80062ca:	af02      	add	r7, sp, #8
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	60b9      	str	r1, [r7, #8]
 80062d0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d101      	bne.n	80062e0 <I2C_Master_ISR_DMA+0x1a>
 80062dc:	2302      	movs	r3, #2
 80062de:	e0e1      	b.n	80064a4 <I2C_Master_ISR_DMA+0x1de>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	091b      	lsrs	r3, r3, #4
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d017      	beq.n	8006324 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	091b      	lsrs	r3, r3, #4
 80062f8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d011      	beq.n	8006324 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2210      	movs	r2, #16
 8006306:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800630c:	f043 0204 	orr.w	r2, r3, #4
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006314:	2120      	movs	r1, #32
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f001 fbc4 	bl	8007aa4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f001 f98a 	bl	8007636 <I2C_Flush_TXDR>
 8006322:	e0ba      	b.n	800649a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	09db      	lsrs	r3, r3, #7
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d072      	beq.n	8006416 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	099b      	lsrs	r3, r3, #6
 8006334:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006338:	2b00      	cmp	r3, #0
 800633a:	d06c      	beq.n	8006416 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800634a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d04e      	beq.n	80063f4 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	b29b      	uxth	r3, r3
 800635e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006362:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006368:	b29b      	uxth	r3, r3
 800636a:	2bff      	cmp	r3, #255	@ 0xff
 800636c:	d906      	bls.n	800637c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	22ff      	movs	r2, #255	@ 0xff
 8006372:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8006374:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	e010      	b.n	800639e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006380:	b29a      	uxth	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800638e:	d003      	beq.n	8006398 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	e002      	b.n	800639e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006398:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800639c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	8a79      	ldrh	r1, [r7, #18]
 80063a6:	2300      	movs	r3, #0
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f001 fb47 	bl	8007a40 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b22      	cmp	r3, #34	@ 0x22
 80063ce:	d108      	bne.n	80063e2 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063de:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80063e0:	e05b      	b.n	800649a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063f0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80063f2:	e052      	b.n	800649a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006402:	d003      	beq.n	800640c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 fbe9 	bl	8006bdc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800640a:	e046      	b.n	800649a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800640c:	2140      	movs	r1, #64	@ 0x40
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fffa 	bl	8007408 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006414:	e041      	b.n	800649a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	099b      	lsrs	r3, r3, #6
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d029      	beq.n	8006476 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	099b      	lsrs	r3, r3, #6
 8006426:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800642a:	2b00      	cmp	r3, #0
 800642c:	d023      	beq.n	8006476 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006432:	b29b      	uxth	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d119      	bne.n	800646c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006442:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006446:	d027      	beq.n	8006498 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006450:	d108      	bne.n	8006464 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006460:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006462:	e019      	b.n	8006498 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 fbb9 	bl	8006bdc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800646a:	e015      	b.n	8006498 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800646c:	2140      	movs	r1, #64	@ 0x40
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 ffca 	bl	8007408 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006474:	e010      	b.n	8006498 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	095b      	lsrs	r3, r3, #5
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00b      	beq.n	800649a <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	095b      	lsrs	r3, r3, #5
 8006486:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 fc3f 	bl	8006d14 <I2C_ITMasterCplt>
 8006496:	e000      	b.n	800649a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8006498:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80064b8:	4b92      	ldr	r3, [pc, #584]	@ (8006704 <I2C_Mem_ISR_DMA+0x258>)
 80064ba:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <I2C_Mem_ISR_DMA+0x1e>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e118      	b.n	80066fc <I2C_Mem_ISR_DMA+0x250>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	091b      	lsrs	r3, r3, #4
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d017      	beq.n	800650e <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	091b      	lsrs	r3, r3, #4
 80064e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d011      	beq.n	800650e <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2210      	movs	r2, #16
 80064f0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064f6:	f043 0204 	orr.w	r2, r3, #4
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80064fe:	2120      	movs	r1, #32
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f001 facf 	bl	8007aa4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f001 f895 	bl	8007636 <I2C_Flush_TXDR>
 800650c:	e0f1      	b.n	80066f2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00f      	beq.n	800653a <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	085b      	lsrs	r3, r3, #1
 800651e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006522:	2b00      	cmp	r3, #0
 8006524:	d009      	beq.n	800653a <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800652e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f04f 32ff 	mov.w	r2, #4294967295
 8006536:	651a      	str	r2, [r3, #80]	@ 0x50
 8006538:	e0db      	b.n	80066f2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	09db      	lsrs	r3, r3, #7
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d060      	beq.n	8006608 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	099b      	lsrs	r3, r3, #6
 800654a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800654e:	2b00      	cmp	r3, #0
 8006550:	d05a      	beq.n	8006608 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006552:	2101      	movs	r1, #1
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f001 fb29 	bl	8007bac <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800655a:	2110      	movs	r1, #16
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f001 faa1 	bl	8007aa4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006566:	b29b      	uxth	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d048      	beq.n	80065fe <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006570:	b29b      	uxth	r3, r3
 8006572:	2bff      	cmp	r3, #255	@ 0xff
 8006574:	d910      	bls.n	8006598 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	22ff      	movs	r2, #255	@ 0xff
 800657a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006580:	b299      	uxth	r1, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006586:	b2da      	uxtb	r2, r3
 8006588:	2300      	movs	r3, #0
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f001 fa55 	bl	8007a40 <I2C_TransferConfig>
 8006596:	e011      	b.n	80065bc <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800659c:	b29a      	uxth	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065a6:	b299      	uxth	r1, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	2300      	movs	r3, #0
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f001 fa42 	bl	8007a40 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b22      	cmp	r3, #34	@ 0x22
 80065d8:	d108      	bne.n	80065ec <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065e8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065ea:	e082      	b.n	80066f2 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065fa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065fc:	e079      	b.n	80066f2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80065fe:	2140      	movs	r1, #64	@ 0x40
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 ff01 	bl	8007408 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006606:	e074      	b.n	80066f2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	099b      	lsrs	r3, r3, #6
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d05e      	beq.n	80066d2 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	099b      	lsrs	r3, r3, #6
 8006618:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800661c:	2b00      	cmp	r3, #0
 800661e:	d058      	beq.n	80066d2 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006620:	2101      	movs	r1, #1
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f001 fac2 	bl	8007bac <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006628:	2110      	movs	r1, #16
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f001 fa3a 	bl	8007aa4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b22      	cmp	r3, #34	@ 0x22
 800663a:	d101      	bne.n	8006640 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800663c:	4b32      	ldr	r3, [pc, #200]	@ (8006708 <I2C_Mem_ISR_DMA+0x25c>)
 800663e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006644:	b29b      	uxth	r3, r3
 8006646:	2bff      	cmp	r3, #255	@ 0xff
 8006648:	d910      	bls.n	800666c <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	22ff      	movs	r2, #255	@ 0xff
 800664e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006654:	b299      	uxth	r1, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800665a:	b2da      	uxtb	r2, r3
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f001 f9eb 	bl	8007a40 <I2C_TransferConfig>
 800666a:	e011      	b.n	8006690 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006670:	b29a      	uxth	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800667a:	b299      	uxth	r1, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006680:	b2da      	uxtb	r2, r3
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f001 f9d8 	bl	8007a40 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006694:	b29a      	uxth	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	b29a      	uxth	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b22      	cmp	r3, #34	@ 0x22
 80066ac:	d108      	bne.n	80066c0 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066bc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066be:	e018      	b.n	80066f2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066ce:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066d0:	e00f      	b.n	80066f2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	095b      	lsrs	r3, r3, #5
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d009      	beq.n	80066f2 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80066ea:	68b9      	ldr	r1, [r7, #8]
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 fb11 	bl	8006d14 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	80002000 	.word	0x80002000
 8006708:	80002400 	.word	0x80002400

0800670c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b088      	sub	sp, #32
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800671c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <I2C_Slave_ISR_DMA+0x24>
 800672c:	2302      	movs	r3, #2
 800672e:	e1cc      	b.n	8006aca <I2C_Slave_ISR_DMA+0x3be>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00a      	beq.n	800675a <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800674c:	2b00      	cmp	r3, #0
 800674e:	d004      	beq.n	800675a <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 fba8 	bl	8006ea8 <I2C_ITSlaveCplt>
 8006758:	e1b2      	b.n	8006ac0 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	091b      	lsrs	r3, r3, #4
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 819c 	beq.w	8006aa0 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	091b      	lsrs	r3, r3, #4
 800676c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 8195 	beq.w	8006aa0 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	0b9b      	lsrs	r3, r3, #14
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d106      	bne.n	8006790 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	0bdb      	lsrs	r3, r3, #15
 8006786:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 8181 	beq.w	8006a92 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d07c      	beq.n	8006892 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	0bdb      	lsrs	r3, r3, #15
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d076      	beq.n	8006892 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a75      	ldr	r2, [pc, #468]	@ (8006980 <I2C_Slave_ISR_DMA+0x274>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d059      	beq.n	8006864 <I2C_Slave_ISR_DMA+0x158>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a73      	ldr	r2, [pc, #460]	@ (8006984 <I2C_Slave_ISR_DMA+0x278>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d053      	beq.n	8006864 <I2C_Slave_ISR_DMA+0x158>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a71      	ldr	r2, [pc, #452]	@ (8006988 <I2C_Slave_ISR_DMA+0x27c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d04d      	beq.n	8006864 <I2C_Slave_ISR_DMA+0x158>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a6f      	ldr	r2, [pc, #444]	@ (800698c <I2C_Slave_ISR_DMA+0x280>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d047      	beq.n	8006864 <I2C_Slave_ISR_DMA+0x158>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a6d      	ldr	r2, [pc, #436]	@ (8006990 <I2C_Slave_ISR_DMA+0x284>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d041      	beq.n	8006864 <I2C_Slave_ISR_DMA+0x158>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a6b      	ldr	r2, [pc, #428]	@ (8006994 <I2C_Slave_ISR_DMA+0x288>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d03b      	beq.n	8006864 <I2C_Slave_ISR_DMA+0x158>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a69      	ldr	r2, [pc, #420]	@ (8006998 <I2C_Slave_ISR_DMA+0x28c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d035      	beq.n	8006864 <I2C_Slave_ISR_DMA+0x158>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a67      	ldr	r2, [pc, #412]	@ (800699c <I2C_Slave_ISR_DMA+0x290>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d02f      	beq.n	8006864 <I2C_Slave_ISR_DMA+0x158>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a65      	ldr	r2, [pc, #404]	@ (80069a0 <I2C_Slave_ISR_DMA+0x294>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d029      	beq.n	8006864 <I2C_Slave_ISR_DMA+0x158>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a63      	ldr	r2, [pc, #396]	@ (80069a4 <I2C_Slave_ISR_DMA+0x298>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d023      	beq.n	8006864 <I2C_Slave_ISR_DMA+0x158>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a61      	ldr	r2, [pc, #388]	@ (80069a8 <I2C_Slave_ISR_DMA+0x29c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d01d      	beq.n	8006864 <I2C_Slave_ISR_DMA+0x158>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a5f      	ldr	r2, [pc, #380]	@ (80069ac <I2C_Slave_ISR_DMA+0x2a0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d017      	beq.n	8006864 <I2C_Slave_ISR_DMA+0x158>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a5d      	ldr	r2, [pc, #372]	@ (80069b0 <I2C_Slave_ISR_DMA+0x2a4>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d011      	beq.n	8006864 <I2C_Slave_ISR_DMA+0x158>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a5b      	ldr	r2, [pc, #364]	@ (80069b4 <I2C_Slave_ISR_DMA+0x2a8>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00b      	beq.n	8006864 <I2C_Slave_ISR_DMA+0x158>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a59      	ldr	r2, [pc, #356]	@ (80069b8 <I2C_Slave_ISR_DMA+0x2ac>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d005      	beq.n	8006864 <I2C_Slave_ISR_DMA+0x158>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a57      	ldr	r2, [pc, #348]	@ (80069bc <I2C_Slave_ISR_DMA+0x2b0>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d109      	bne.n	8006878 <I2C_Slave_ISR_DMA+0x16c>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	bf0c      	ite	eq
 8006870:	2301      	moveq	r3, #1
 8006872:	2300      	movne	r3, #0
 8006874:	b2db      	uxtb	r3, r3
 8006876:	e008      	b.n	800688a <I2C_Slave_ISR_DMA+0x17e>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	bf0c      	ite	eq
 8006884:	2301      	moveq	r3, #1
 8006886:	2300      	movne	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800688e:	2301      	movs	r3, #1
 8006890:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 809f 	beq.w	80069da <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	0b9b      	lsrs	r3, r3, #14
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 8098 	beq.w	80069da <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a33      	ldr	r2, [pc, #204]	@ (8006980 <I2C_Slave_ISR_DMA+0x274>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d059      	beq.n	800696a <I2C_Slave_ISR_DMA+0x25e>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a31      	ldr	r2, [pc, #196]	@ (8006984 <I2C_Slave_ISR_DMA+0x278>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d053      	beq.n	800696a <I2C_Slave_ISR_DMA+0x25e>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a2f      	ldr	r2, [pc, #188]	@ (8006988 <I2C_Slave_ISR_DMA+0x27c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d04d      	beq.n	800696a <I2C_Slave_ISR_DMA+0x25e>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a2d      	ldr	r2, [pc, #180]	@ (800698c <I2C_Slave_ISR_DMA+0x280>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d047      	beq.n	800696a <I2C_Slave_ISR_DMA+0x25e>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a2b      	ldr	r2, [pc, #172]	@ (8006990 <I2C_Slave_ISR_DMA+0x284>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d041      	beq.n	800696a <I2C_Slave_ISR_DMA+0x25e>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a29      	ldr	r2, [pc, #164]	@ (8006994 <I2C_Slave_ISR_DMA+0x288>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d03b      	beq.n	800696a <I2C_Slave_ISR_DMA+0x25e>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a27      	ldr	r2, [pc, #156]	@ (8006998 <I2C_Slave_ISR_DMA+0x28c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d035      	beq.n	800696a <I2C_Slave_ISR_DMA+0x25e>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a25      	ldr	r2, [pc, #148]	@ (800699c <I2C_Slave_ISR_DMA+0x290>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d02f      	beq.n	800696a <I2C_Slave_ISR_DMA+0x25e>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a23      	ldr	r2, [pc, #140]	@ (80069a0 <I2C_Slave_ISR_DMA+0x294>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d029      	beq.n	800696a <I2C_Slave_ISR_DMA+0x25e>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a21      	ldr	r2, [pc, #132]	@ (80069a4 <I2C_Slave_ISR_DMA+0x298>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d023      	beq.n	800696a <I2C_Slave_ISR_DMA+0x25e>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a1f      	ldr	r2, [pc, #124]	@ (80069a8 <I2C_Slave_ISR_DMA+0x29c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d01d      	beq.n	800696a <I2C_Slave_ISR_DMA+0x25e>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a1d      	ldr	r2, [pc, #116]	@ (80069ac <I2C_Slave_ISR_DMA+0x2a0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d017      	beq.n	800696a <I2C_Slave_ISR_DMA+0x25e>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a1b      	ldr	r2, [pc, #108]	@ (80069b0 <I2C_Slave_ISR_DMA+0x2a4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d011      	beq.n	800696a <I2C_Slave_ISR_DMA+0x25e>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a19      	ldr	r2, [pc, #100]	@ (80069b4 <I2C_Slave_ISR_DMA+0x2a8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00b      	beq.n	800696a <I2C_Slave_ISR_DMA+0x25e>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a17      	ldr	r2, [pc, #92]	@ (80069b8 <I2C_Slave_ISR_DMA+0x2ac>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d005      	beq.n	800696a <I2C_Slave_ISR_DMA+0x25e>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a15      	ldr	r2, [pc, #84]	@ (80069bc <I2C_Slave_ISR_DMA+0x2b0>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d12a      	bne.n	80069c0 <I2C_Slave_ISR_DMA+0x2b4>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	bf0c      	ite	eq
 8006976:	2301      	moveq	r3, #1
 8006978:	2300      	movne	r3, #0
 800697a:	b2db      	uxtb	r3, r3
 800697c:	e029      	b.n	80069d2 <I2C_Slave_ISR_DMA+0x2c6>
 800697e:	bf00      	nop
 8006980:	40020010 	.word	0x40020010
 8006984:	40020028 	.word	0x40020028
 8006988:	40020040 	.word	0x40020040
 800698c:	40020058 	.word	0x40020058
 8006990:	40020070 	.word	0x40020070
 8006994:	40020088 	.word	0x40020088
 8006998:	400200a0 	.word	0x400200a0
 800699c:	400200b8 	.word	0x400200b8
 80069a0:	40020410 	.word	0x40020410
 80069a4:	40020428 	.word	0x40020428
 80069a8:	40020440 	.word	0x40020440
 80069ac:	40020458 	.word	0x40020458
 80069b0:	40020470 	.word	0x40020470
 80069b4:	40020488 	.word	0x40020488
 80069b8:	400204a0 	.word	0x400204a0
 80069bc:	400204b8 	.word	0x400204b8
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	bf0c      	ite	eq
 80069cc:	2301      	moveq	r3, #1
 80069ce:	2300      	movne	r3, #0
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 80069d6:	2301      	movs	r3, #1
 80069d8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d128      	bne.n	8006a32 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b28      	cmp	r3, #40	@ 0x28
 80069ea:	d108      	bne.n	80069fe <I2C_Slave_ISR_DMA+0x2f2>
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069f2:	d104      	bne.n	80069fe <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80069f4:	68b9      	ldr	r1, [r7, #8]
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 fcb0 	bl	800735c <I2C_ITListenCplt>
 80069fc:	e048      	b.n	8006a90 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b29      	cmp	r3, #41	@ 0x29
 8006a08:	d10e      	bne.n	8006a28 <I2C_Slave_ISR_DMA+0x31c>
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a10:	d00a      	beq.n	8006a28 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2210      	movs	r2, #16
 8006a18:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 fe0b 	bl	8007636 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f918 	bl	8006c56 <I2C_ITSlaveSeqCplt>
 8006a26:	e033      	b.n	8006a90 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2210      	movs	r2, #16
 8006a2e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006a30:	e034      	b.n	8006a9c <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2210      	movs	r2, #16
 8006a38:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3e:	f043 0204 	orr.w	r2, r3, #4
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a4c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <I2C_Slave_ISR_DMA+0x350>
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a5a:	d11f      	bne.n	8006a9c <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006a5c:	7dfb      	ldrb	r3, [r7, #23]
 8006a5e:	2b21      	cmp	r3, #33	@ 0x21
 8006a60:	d002      	beq.n	8006a68 <I2C_Slave_ISR_DMA+0x35c>
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
 8006a64:	2b29      	cmp	r3, #41	@ 0x29
 8006a66:	d103      	bne.n	8006a70 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2221      	movs	r2, #33	@ 0x21
 8006a6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a6e:	e008      	b.n	8006a82 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
 8006a72:	2b22      	cmp	r3, #34	@ 0x22
 8006a74:	d002      	beq.n	8006a7c <I2C_Slave_ISR_DMA+0x370>
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
 8006a78:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a7a:	d102      	bne.n	8006a82 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2222      	movs	r2, #34	@ 0x22
 8006a80:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a86:	4619      	mov	r1, r3
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 fcbd 	bl	8007408 <I2C_ITError>
      if (treatdmanack == 1U)
 8006a8e:	e005      	b.n	8006a9c <I2C_Slave_ISR_DMA+0x390>
 8006a90:	e004      	b.n	8006a9c <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2210      	movs	r2, #16
 8006a98:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006a9a:	e011      	b.n	8006ac0 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 8006a9c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006a9e:	e00f      	b.n	8006ac0 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	08db      	lsrs	r3, r3, #3
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d009      	beq.n	8006ac0 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	08db      	lsrs	r3, r3, #3
 8006ab0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 f80a 	bl	8006ad4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3720      	adds	r7, #32
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop

08006ad4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006aea:	2b28      	cmp	r3, #40	@ 0x28
 8006aec:	d16a      	bne.n	8006bc4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	0c1b      	lsrs	r3, r3, #16
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	0c1b      	lsrs	r3, r3, #16
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006b0c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b1a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006b28:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d138      	bne.n	8006ba4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006b32:	897b      	ldrh	r3, [r7, #10]
 8006b34:	09db      	lsrs	r3, r3, #7
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	89bb      	ldrh	r3, [r7, #12]
 8006b3a:	4053      	eors	r3, r2
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f003 0306 	and.w	r3, r3, #6
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d11c      	bne.n	8006b80 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006b46:	897b      	ldrh	r3, [r7, #10]
 8006b48:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d13b      	bne.n	8006bd4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2208      	movs	r2, #8
 8006b68:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b72:	89ba      	ldrh	r2, [r7, #12]
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7ff f92c 	bl	8005dd6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006b7e:	e029      	b.n	8006bd4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006b80:	893b      	ldrh	r3, [r7, #8]
 8006b82:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006b84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 f80f 	bl	8007bac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b96:	89ba      	ldrh	r2, [r7, #12]
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7ff f91a 	bl	8005dd6 <HAL_I2C_AddrCallback>
}
 8006ba2:	e017      	b.n	8006bd4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006ba4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 ffff 	bl	8007bac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006bb6:	89ba      	ldrh	r2, [r7, #12]
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7ff f90a 	bl	8005dd6 <HAL_I2C_AddrCallback>
}
 8006bc2:	e007      	b.n	8006bd4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2208      	movs	r2, #8
 8006bca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006bd4:	bf00      	nop
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b21      	cmp	r3, #33	@ 0x21
 8006bf6:	d115      	bne.n	8006c24 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2211      	movs	r2, #17
 8006c04:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 ffcc 	bl	8007bac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff f8bc 	bl	8005d9a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006c22:	e014      	b.n	8006c4e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2220      	movs	r2, #32
 8006c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2212      	movs	r2, #18
 8006c30:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006c38:	2102      	movs	r1, #2
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 ffb6 	bl	8007bac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7fa ff79 	bl	8001b40 <HAL_I2C_MasterRxCpltCallback>
}
 8006c4e:	bf00      	nop
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	0b9b      	lsrs	r3, r3, #14
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d008      	beq.n	8006c8c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	e00d      	b.n	8006ca8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	0bdb      	lsrs	r3, r3, #15
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d007      	beq.n	8006ca8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ca6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b29      	cmp	r3, #41	@ 0x29
 8006cb2:	d112      	bne.n	8006cda <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2228      	movs	r2, #40	@ 0x28
 8006cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2221      	movs	r2, #33	@ 0x21
 8006cc0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 ff71 	bl	8007bac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff f86b 	bl	8005dae <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006cd8:	e017      	b.n	8006d0a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ce4:	d111      	bne.n	8006d0a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2228      	movs	r2, #40	@ 0x28
 8006cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2222      	movs	r2, #34	@ 0x22
 8006cf2:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006cf4:	2102      	movs	r1, #2
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 ff58 	bl	8007bac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7ff f85c 	bl	8005dc2 <HAL_I2C_SlaveRxCpltCallback>
}
 8006d0a:	bf00      	nop
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2220      	movs	r2, #32
 8006d28:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b21      	cmp	r3, #33	@ 0x21
 8006d34:	d107      	bne.n	8006d46 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006d36:	2101      	movs	r1, #1
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 ff37 	bl	8007bac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2211      	movs	r2, #17
 8006d42:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d44:	e00c      	b.n	8006d60 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b22      	cmp	r3, #34	@ 0x22
 8006d50:	d106      	bne.n	8006d60 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006d52:	2102      	movs	r1, #2
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 ff29 	bl	8007bac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2212      	movs	r2, #18
 8006d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6859      	ldr	r1, [r3, #4]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	4b4d      	ldr	r3, [pc, #308]	@ (8006ea0 <I2C_ITMasterCplt+0x18c>)
 8006d6c:	400b      	ands	r3, r1
 8006d6e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a4a      	ldr	r2, [pc, #296]	@ (8006ea4 <I2C_ITMasterCplt+0x190>)
 8006d7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	091b      	lsrs	r3, r3, #4
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d009      	beq.n	8006d9c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2210      	movs	r2, #16
 8006d8e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d94:	f043 0204 	orr.w	r2, r3, #4
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b60      	cmp	r3, #96	@ 0x60
 8006da6:	d10b      	bne.n	8006dc0 <I2C_ITMasterCplt+0xac>
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	089b      	lsrs	r3, r3, #2
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d005      	beq.n	8006dc0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fc38 	bl	8007636 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dca:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b60      	cmp	r3, #96	@ 0x60
 8006dd6:	d002      	beq.n	8006dde <I2C_ITMasterCplt+0xca>
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d006      	beq.n	8006dec <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fb0f 	bl	8007408 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006dea:	e054      	b.n	8006e96 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b21      	cmp	r3, #33	@ 0x21
 8006df6:	d124      	bne.n	8006e42 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b40      	cmp	r3, #64	@ 0x40
 8006e10:	d10b      	bne.n	8006e2a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7fe ffef 	bl	8005e06 <HAL_I2C_MemTxCpltCallback>
}
 8006e28:	e035      	b.n	8006e96 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fe ffad 	bl	8005d9a <HAL_I2C_MasterTxCpltCallback>
}
 8006e40:	e029      	b.n	8006e96 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b22      	cmp	r3, #34	@ 0x22
 8006e4c:	d123      	bne.n	8006e96 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b40      	cmp	r3, #64	@ 0x40
 8006e66:	d10b      	bne.n	8006e80 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7fe ffce 	bl	8005e1a <HAL_I2C_MemRxCpltCallback>
}
 8006e7e:	e00a      	b.n	8006e96 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7fa fe55 	bl	8001b40 <HAL_I2C_MasterRxCpltCallback>
}
 8006e96:	bf00      	nop
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	fe00e800 	.word	0xfe00e800
 8006ea4:	ffff0000 	.word	0xffff0000

08006ea8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eca:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006ed4:	7afb      	ldrb	r3, [r7, #11]
 8006ed6:	2b21      	cmp	r3, #33	@ 0x21
 8006ed8:	d002      	beq.n	8006ee0 <I2C_ITSlaveCplt+0x38>
 8006eda:	7afb      	ldrb	r3, [r7, #11]
 8006edc:	2b29      	cmp	r3, #41	@ 0x29
 8006ede:	d108      	bne.n	8006ef2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006ee0:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fe61 	bl	8007bac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2221      	movs	r2, #33	@ 0x21
 8006eee:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ef0:	e019      	b.n	8006f26 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ef2:	7afb      	ldrb	r3, [r7, #11]
 8006ef4:	2b22      	cmp	r3, #34	@ 0x22
 8006ef6:	d002      	beq.n	8006efe <I2C_ITSlaveCplt+0x56>
 8006ef8:	7afb      	ldrb	r3, [r7, #11]
 8006efa:	2b2a      	cmp	r3, #42	@ 0x2a
 8006efc:	d108      	bne.n	8006f10 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006efe:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fe52 	bl	8007bac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2222      	movs	r2, #34	@ 0x22
 8006f0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f0e:	e00a      	b.n	8006f26 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006f10:	7afb      	ldrb	r3, [r7, #11]
 8006f12:	2b28      	cmp	r3, #40	@ 0x28
 8006f14:	d107      	bne.n	8006f26 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006f16:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fe46 	bl	8007bac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f34:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	6859      	ldr	r1, [r3, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	4b80      	ldr	r3, [pc, #512]	@ (8007144 <I2C_ITSlaveCplt+0x29c>)
 8006f42:	400b      	ands	r3, r1
 8006f44:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fb75 	bl	8007636 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	0b9b      	lsrs	r3, r3, #14
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d07a      	beq.n	800704e <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f66:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 8112 	beq.w	8007196 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a73      	ldr	r2, [pc, #460]	@ (8007148 <I2C_ITSlaveCplt+0x2a0>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d059      	beq.n	8007032 <I2C_ITSlaveCplt+0x18a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a71      	ldr	r2, [pc, #452]	@ (800714c <I2C_ITSlaveCplt+0x2a4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d053      	beq.n	8007032 <I2C_ITSlaveCplt+0x18a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a6f      	ldr	r2, [pc, #444]	@ (8007150 <I2C_ITSlaveCplt+0x2a8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d04d      	beq.n	8007032 <I2C_ITSlaveCplt+0x18a>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a6d      	ldr	r2, [pc, #436]	@ (8007154 <I2C_ITSlaveCplt+0x2ac>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d047      	beq.n	8007032 <I2C_ITSlaveCplt+0x18a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a6b      	ldr	r2, [pc, #428]	@ (8007158 <I2C_ITSlaveCplt+0x2b0>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d041      	beq.n	8007032 <I2C_ITSlaveCplt+0x18a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a69      	ldr	r2, [pc, #420]	@ (800715c <I2C_ITSlaveCplt+0x2b4>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d03b      	beq.n	8007032 <I2C_ITSlaveCplt+0x18a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a67      	ldr	r2, [pc, #412]	@ (8007160 <I2C_ITSlaveCplt+0x2b8>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d035      	beq.n	8007032 <I2C_ITSlaveCplt+0x18a>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a65      	ldr	r2, [pc, #404]	@ (8007164 <I2C_ITSlaveCplt+0x2bc>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d02f      	beq.n	8007032 <I2C_ITSlaveCplt+0x18a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a63      	ldr	r2, [pc, #396]	@ (8007168 <I2C_ITSlaveCplt+0x2c0>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d029      	beq.n	8007032 <I2C_ITSlaveCplt+0x18a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a61      	ldr	r2, [pc, #388]	@ (800716c <I2C_ITSlaveCplt+0x2c4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d023      	beq.n	8007032 <I2C_ITSlaveCplt+0x18a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a5f      	ldr	r2, [pc, #380]	@ (8007170 <I2C_ITSlaveCplt+0x2c8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d01d      	beq.n	8007032 <I2C_ITSlaveCplt+0x18a>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a5d      	ldr	r2, [pc, #372]	@ (8007174 <I2C_ITSlaveCplt+0x2cc>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d017      	beq.n	8007032 <I2C_ITSlaveCplt+0x18a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a5b      	ldr	r2, [pc, #364]	@ (8007178 <I2C_ITSlaveCplt+0x2d0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d011      	beq.n	8007032 <I2C_ITSlaveCplt+0x18a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a59      	ldr	r2, [pc, #356]	@ (800717c <I2C_ITSlaveCplt+0x2d4>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00b      	beq.n	8007032 <I2C_ITSlaveCplt+0x18a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a57      	ldr	r2, [pc, #348]	@ (8007180 <I2C_ITSlaveCplt+0x2d8>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d005      	beq.n	8007032 <I2C_ITSlaveCplt+0x18a>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a55      	ldr	r2, [pc, #340]	@ (8007184 <I2C_ITSlaveCplt+0x2dc>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d105      	bne.n	800703e <I2C_ITSlaveCplt+0x196>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	b29b      	uxth	r3, r3
 800703c:	e004      	b.n	8007048 <I2C_ITSlaveCplt+0x1a0>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	b29b      	uxth	r3, r3
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800704c:	e0a3      	b.n	8007196 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	0bdb      	lsrs	r3, r3, #15
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 809d 	beq.w	8007196 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800706a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 8090 	beq.w	8007196 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a32      	ldr	r2, [pc, #200]	@ (8007148 <I2C_ITSlaveCplt+0x2a0>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d059      	beq.n	8007136 <I2C_ITSlaveCplt+0x28e>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a30      	ldr	r2, [pc, #192]	@ (800714c <I2C_ITSlaveCplt+0x2a4>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d053      	beq.n	8007136 <I2C_ITSlaveCplt+0x28e>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a2e      	ldr	r2, [pc, #184]	@ (8007150 <I2C_ITSlaveCplt+0x2a8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d04d      	beq.n	8007136 <I2C_ITSlaveCplt+0x28e>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a2c      	ldr	r2, [pc, #176]	@ (8007154 <I2C_ITSlaveCplt+0x2ac>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d047      	beq.n	8007136 <I2C_ITSlaveCplt+0x28e>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a2a      	ldr	r2, [pc, #168]	@ (8007158 <I2C_ITSlaveCplt+0x2b0>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d041      	beq.n	8007136 <I2C_ITSlaveCplt+0x28e>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a28      	ldr	r2, [pc, #160]	@ (800715c <I2C_ITSlaveCplt+0x2b4>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d03b      	beq.n	8007136 <I2C_ITSlaveCplt+0x28e>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a26      	ldr	r2, [pc, #152]	@ (8007160 <I2C_ITSlaveCplt+0x2b8>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d035      	beq.n	8007136 <I2C_ITSlaveCplt+0x28e>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a24      	ldr	r2, [pc, #144]	@ (8007164 <I2C_ITSlaveCplt+0x2bc>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d02f      	beq.n	8007136 <I2C_ITSlaveCplt+0x28e>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a22      	ldr	r2, [pc, #136]	@ (8007168 <I2C_ITSlaveCplt+0x2c0>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d029      	beq.n	8007136 <I2C_ITSlaveCplt+0x28e>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a20      	ldr	r2, [pc, #128]	@ (800716c <I2C_ITSlaveCplt+0x2c4>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d023      	beq.n	8007136 <I2C_ITSlaveCplt+0x28e>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a1e      	ldr	r2, [pc, #120]	@ (8007170 <I2C_ITSlaveCplt+0x2c8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d01d      	beq.n	8007136 <I2C_ITSlaveCplt+0x28e>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a1c      	ldr	r2, [pc, #112]	@ (8007174 <I2C_ITSlaveCplt+0x2cc>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d017      	beq.n	8007136 <I2C_ITSlaveCplt+0x28e>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a1a      	ldr	r2, [pc, #104]	@ (8007178 <I2C_ITSlaveCplt+0x2d0>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d011      	beq.n	8007136 <I2C_ITSlaveCplt+0x28e>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a18      	ldr	r2, [pc, #96]	@ (800717c <I2C_ITSlaveCplt+0x2d4>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d00b      	beq.n	8007136 <I2C_ITSlaveCplt+0x28e>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a16      	ldr	r2, [pc, #88]	@ (8007180 <I2C_ITSlaveCplt+0x2d8>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d005      	beq.n	8007136 <I2C_ITSlaveCplt+0x28e>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a14      	ldr	r2, [pc, #80]	@ (8007184 <I2C_ITSlaveCplt+0x2dc>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d128      	bne.n	8007188 <I2C_ITSlaveCplt+0x2e0>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	b29b      	uxth	r3, r3
 8007140:	e027      	b.n	8007192 <I2C_ITSlaveCplt+0x2ea>
 8007142:	bf00      	nop
 8007144:	fe00e800 	.word	0xfe00e800
 8007148:	40020010 	.word	0x40020010
 800714c:	40020028 	.word	0x40020028
 8007150:	40020040 	.word	0x40020040
 8007154:	40020058 	.word	0x40020058
 8007158:	40020070 	.word	0x40020070
 800715c:	40020088 	.word	0x40020088
 8007160:	400200a0 	.word	0x400200a0
 8007164:	400200b8 	.word	0x400200b8
 8007168:	40020410 	.word	0x40020410
 800716c:	40020428 	.word	0x40020428
 8007170:	40020440 	.word	0x40020440
 8007174:	40020458 	.word	0x40020458
 8007178:	40020470 	.word	0x40020470
 800717c:	40020488 	.word	0x40020488
 8007180:	400204a0 	.word	0x400204a0
 8007184:	400204b8 	.word	0x400204b8
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	b29b      	uxth	r3, r3
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	089b      	lsrs	r3, r3, #2
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d020      	beq.n	80071e4 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f023 0304 	bic.w	r3, r3, #4
 80071a8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b4:	b2d2      	uxtb	r2, r2
 80071b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00c      	beq.n	80071e4 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071ce:	3b01      	subs	r3, #1
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071da:	b29b      	uxth	r3, r3
 80071dc:	3b01      	subs	r3, #1
 80071de:	b29a      	uxth	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d005      	beq.n	80071fa <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f2:	f043 0204 	orr.w	r2, r3, #4
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	091b      	lsrs	r3, r3, #4
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d04a      	beq.n	800729c <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	091b      	lsrs	r3, r3, #4
 800720a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800720e:	2b00      	cmp	r3, #0
 8007210:	d044      	beq.n	800729c <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007216:	b29b      	uxth	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d128      	bne.n	800726e <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b28      	cmp	r3, #40	@ 0x28
 8007226:	d108      	bne.n	800723a <I2C_ITSlaveCplt+0x392>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800722e:	d104      	bne.n	800723a <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007230:	6979      	ldr	r1, [r7, #20]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f892 	bl	800735c <I2C_ITListenCplt>
 8007238:	e030      	b.n	800729c <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b29      	cmp	r3, #41	@ 0x29
 8007244:	d10e      	bne.n	8007264 <I2C_ITSlaveCplt+0x3bc>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800724c:	d00a      	beq.n	8007264 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2210      	movs	r2, #16
 8007254:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f9ed 	bl	8007636 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7ff fcfa 	bl	8006c56 <I2C_ITSlaveSeqCplt>
 8007262:	e01b      	b.n	800729c <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2210      	movs	r2, #16
 800726a:	61da      	str	r2, [r3, #28]
 800726c:	e016      	b.n	800729c <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2210      	movs	r2, #16
 8007274:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800727a:	f043 0204 	orr.w	r2, r3, #4
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d003      	beq.n	8007290 <I2C_ITSlaveCplt+0x3e8>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800728e:	d105      	bne.n	800729c <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f8b6 	bl	8007408 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d010      	beq.n	80072d4 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f8a5 	bl	8007408 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b28      	cmp	r3, #40	@ 0x28
 80072c8:	d141      	bne.n	800734e <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80072ca:	6979      	ldr	r1, [r7, #20]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f845 	bl	800735c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80072d2:	e03c      	b.n	800734e <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80072dc:	d014      	beq.n	8007308 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7ff fcb9 	bl	8006c56 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a1c      	ldr	r2, [pc, #112]	@ (8007358 <I2C_ITSlaveCplt+0x4b0>)
 80072e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2220      	movs	r2, #32
 80072ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7fe fd76 	bl	8005df2 <HAL_I2C_ListenCpltCallback>
}
 8007306:	e022      	b.n	800734e <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b22      	cmp	r3, #34	@ 0x22
 8007312:	d10e      	bne.n	8007332 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2220      	movs	r2, #32
 8007318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7fe fd49 	bl	8005dc2 <HAL_I2C_SlaveRxCpltCallback>
}
 8007330:	e00d      	b.n	800734e <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2220      	movs	r2, #32
 8007336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7fe fd30 	bl	8005dae <HAL_I2C_SlaveTxCpltCallback>
}
 800734e:	bf00      	nop
 8007350:	3718      	adds	r7, #24
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	ffff0000 	.word	0xffff0000

0800735c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a26      	ldr	r2, [pc, #152]	@ (8007404 <I2C_ITListenCplt+0xa8>)
 800736a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2220      	movs	r2, #32
 8007376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	089b      	lsrs	r3, r3, #2
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	d022      	beq.n	80073da <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739e:	b2d2      	uxtb	r2, r2
 80073a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d012      	beq.n	80073da <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073b8:	3b01      	subs	r3, #1
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	3b01      	subs	r3, #1
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073d2:	f043 0204 	orr.w	r2, r3, #4
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80073da:	f248 0103 	movw	r1, #32771	@ 0x8003
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fbe4 	bl	8007bac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2210      	movs	r2, #16
 80073ea:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7fe fcfc 	bl	8005df2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80073fa:	bf00      	nop
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	ffff0000 	.word	0xffff0000

08007408 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007418:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a6d      	ldr	r2, [pc, #436]	@ (80075dc <I2C_ITError+0x1d4>)
 8007426:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	431a      	orrs	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	2b28      	cmp	r3, #40	@ 0x28
 800743e:	d005      	beq.n	800744c <I2C_ITError+0x44>
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	2b29      	cmp	r3, #41	@ 0x29
 8007444:	d002      	beq.n	800744c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	2b2a      	cmp	r3, #42	@ 0x2a
 800744a:	d10b      	bne.n	8007464 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800744c:	2103      	movs	r1, #3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fbac 	bl	8007bac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2228      	movs	r2, #40	@ 0x28
 8007458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a60      	ldr	r2, [pc, #384]	@ (80075e0 <I2C_ITError+0x1d8>)
 8007460:	635a      	str	r2, [r3, #52]	@ 0x34
 8007462:	e030      	b.n	80074c6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007464:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fb9f 	bl	8007bac <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f8e1 	bl	8007636 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b60      	cmp	r3, #96	@ 0x60
 800747e:	d01f      	beq.n	80074c0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2220      	movs	r2, #32
 8007484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b20      	cmp	r3, #32
 8007494:	d114      	bne.n	80074c0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	f003 0310 	and.w	r3, r3, #16
 80074a0:	2b10      	cmp	r3, #16
 80074a2:	d109      	bne.n	80074b8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2210      	movs	r2, #16
 80074aa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074b0:	f043 0204 	orr.w	r2, r3, #4
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2220      	movs	r2, #32
 80074be:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d039      	beq.n	8007548 <I2C_ITError+0x140>
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b11      	cmp	r3, #17
 80074d8:	d002      	beq.n	80074e0 <I2C_ITError+0xd8>
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2b21      	cmp	r3, #33	@ 0x21
 80074de:	d133      	bne.n	8007548 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074ee:	d107      	bne.n	8007500 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80074fe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007504:	4618      	mov	r0, r3
 8007506:	f7fd fe95 	bl	8005234 <HAL_DMA_GetState>
 800750a:	4603      	mov	r3, r0
 800750c:	2b01      	cmp	r3, #1
 800750e:	d017      	beq.n	8007540 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007514:	4a33      	ldr	r2, [pc, #204]	@ (80075e4 <I2C_ITError+0x1dc>)
 8007516:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007524:	4618      	mov	r0, r3
 8007526:	f7fd fc3f 	bl	8004da8 <HAL_DMA_Abort_IT>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d04d      	beq.n	80075cc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800753a:	4610      	mov	r0, r2
 800753c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800753e:	e045      	b.n	80075cc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f851 	bl	80075e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007546:	e041      	b.n	80075cc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800754c:	2b00      	cmp	r3, #0
 800754e:	d039      	beq.n	80075c4 <I2C_ITError+0x1bc>
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2b12      	cmp	r3, #18
 8007554:	d002      	beq.n	800755c <I2C_ITError+0x154>
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2b22      	cmp	r3, #34	@ 0x22
 800755a:	d133      	bne.n	80075c4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007566:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800756a:	d107      	bne.n	800757c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800757a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007580:	4618      	mov	r0, r3
 8007582:	f7fd fe57 	bl	8005234 <HAL_DMA_GetState>
 8007586:	4603      	mov	r3, r0
 8007588:	2b01      	cmp	r3, #1
 800758a:	d017      	beq.n	80075bc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007590:	4a14      	ldr	r2, [pc, #80]	@ (80075e4 <I2C_ITError+0x1dc>)
 8007592:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fd fc01 	bl	8004da8 <HAL_DMA_Abort_IT>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d011      	beq.n	80075d0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80075b6:	4610      	mov	r0, r2
 80075b8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075ba:	e009      	b.n	80075d0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f813 	bl	80075e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075c2:	e005      	b.n	80075d0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f80f 	bl	80075e8 <I2C_TreatErrorCallback>
  }
}
 80075ca:	e002      	b.n	80075d2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80075cc:	bf00      	nop
 80075ce:	e000      	b.n	80075d2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075d0:	bf00      	nop
}
 80075d2:	bf00      	nop
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	ffff0000 	.word	0xffff0000
 80075e0:	080060bf 	.word	0x080060bf
 80075e4:	0800767f 	.word	0x0800767f

080075e8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b60      	cmp	r3, #96	@ 0x60
 80075fa:	d10e      	bne.n	800761a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7fe fc15 	bl	8005e42 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007618:	e009      	b.n	800762e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7fe fc00 	bl	8005e2e <HAL_I2C_ErrorCallback>
}
 800762e:	bf00      	nop
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007636:	b480      	push	{r7}
 8007638:	b083      	sub	sp, #12
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b02      	cmp	r3, #2
 800764a:	d103      	bne.n	8007654 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2200      	movs	r2, #0
 8007652:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b01      	cmp	r3, #1
 8007660:	d007      	beq.n	8007672 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	699a      	ldr	r2, [r3, #24]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f042 0201 	orr.w	r2, r2, #1
 8007670:	619a      	str	r2, [r3, #24]
  }
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b084      	sub	sp, #16
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007690:	2b00      	cmp	r3, #0
 8007692:	d003      	beq.n	800769c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007698:	2200      	movs	r2, #0
 800769a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076a8:	2200      	movs	r2, #0
 80076aa:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f7ff ff9b 	bl	80075e8 <I2C_TreatErrorCallback>
}
 80076b2:	bf00      	nop
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b084      	sub	sp, #16
 80076be:	af00      	add	r7, sp, #0
 80076c0:	60f8      	str	r0, [r7, #12]
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	603b      	str	r3, [r7, #0]
 80076c6:	4613      	mov	r3, r2
 80076c8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076ca:	e03b      	b.n	8007744 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80076cc:	69ba      	ldr	r2, [r7, #24]
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 f8d5 	bl	8007880 <I2C_IsErrorOccurred>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e041      	b.n	8007764 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e6:	d02d      	beq.n	8007744 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076e8:	f7fb f87e 	bl	80027e8 <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d302      	bcc.n	80076fe <I2C_WaitOnFlagUntilTimeout+0x44>
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d122      	bne.n	8007744 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	699a      	ldr	r2, [r3, #24]
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	4013      	ands	r3, r2
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	429a      	cmp	r2, r3
 800770c:	bf0c      	ite	eq
 800770e:	2301      	moveq	r3, #1
 8007710:	2300      	movne	r3, #0
 8007712:	b2db      	uxtb	r3, r3
 8007714:	461a      	mov	r2, r3
 8007716:	79fb      	ldrb	r3, [r7, #7]
 8007718:	429a      	cmp	r2, r3
 800771a:	d113      	bne.n	8007744 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007720:	f043 0220 	orr.w	r2, r3, #32
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2220      	movs	r2, #32
 800772c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e00f      	b.n	8007764 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	699a      	ldr	r2, [r3, #24]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	4013      	ands	r3, r2
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	429a      	cmp	r2, r3
 8007752:	bf0c      	ite	eq
 8007754:	2301      	moveq	r3, #1
 8007756:	2300      	movne	r3, #0
 8007758:	b2db      	uxtb	r3, r3
 800775a:	461a      	mov	r2, r3
 800775c:	79fb      	ldrb	r3, [r7, #7]
 800775e:	429a      	cmp	r2, r3
 8007760:	d0b4      	beq.n	80076cc <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007778:	e033      	b.n	80077e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	68b9      	ldr	r1, [r7, #8]
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 f87e 	bl	8007880 <I2C_IsErrorOccurred>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e031      	b.n	80077f2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007794:	d025      	beq.n	80077e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007796:	f7fb f827 	bl	80027e8 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d302      	bcc.n	80077ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d11a      	bne.n	80077e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d013      	beq.n	80077e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077be:	f043 0220 	orr.w	r2, r3, #32
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e007      	b.n	80077f2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	f003 0302 	and.w	r3, r3, #2
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d1c4      	bne.n	800777a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b084      	sub	sp, #16
 80077fe:	af00      	add	r7, sp, #0
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	60b9      	str	r1, [r7, #8]
 8007804:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007806:	e02f      	b.n	8007868 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	68b9      	ldr	r1, [r7, #8]
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 f837 	bl	8007880 <I2C_IsErrorOccurred>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e02d      	b.n	8007878 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800781c:	f7fa ffe4 	bl	80027e8 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	429a      	cmp	r2, r3
 800782a:	d302      	bcc.n	8007832 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d11a      	bne.n	8007868 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	f003 0320 	and.w	r3, r3, #32
 800783c:	2b20      	cmp	r3, #32
 800783e:	d013      	beq.n	8007868 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007844:	f043 0220 	orr.w	r2, r3, #32
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2220      	movs	r2, #32
 8007850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e007      	b.n	8007878 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	f003 0320 	and.w	r3, r3, #32
 8007872:	2b20      	cmp	r3, #32
 8007874:	d1c8      	bne.n	8007808 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08a      	sub	sp, #40	@ 0x28
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800788c:	2300      	movs	r3, #0
 800788e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	f003 0310 	and.w	r3, r3, #16
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d068      	beq.n	800797e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2210      	movs	r2, #16
 80078b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80078b4:	e049      	b.n	800794a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078bc:	d045      	beq.n	800794a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80078be:	f7fa ff93 	bl	80027e8 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d302      	bcc.n	80078d4 <I2C_IsErrorOccurred+0x54>
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d13a      	bne.n	800794a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078f6:	d121      	bne.n	800793c <I2C_IsErrorOccurred+0xbc>
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078fe:	d01d      	beq.n	800793c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007900:	7cfb      	ldrb	r3, [r7, #19]
 8007902:	2b20      	cmp	r3, #32
 8007904:	d01a      	beq.n	800793c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007914:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007916:	f7fa ff67 	bl	80027e8 <HAL_GetTick>
 800791a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800791c:	e00e      	b.n	800793c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800791e:	f7fa ff63 	bl	80027e8 <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	2b19      	cmp	r3, #25
 800792a:	d907      	bls.n	800793c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	f043 0320 	orr.w	r3, r3, #32
 8007932:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800793a:	e006      	b.n	800794a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	f003 0320 	and.w	r3, r3, #32
 8007946:	2b20      	cmp	r3, #32
 8007948:	d1e9      	bne.n	800791e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	f003 0320 	and.w	r3, r3, #32
 8007954:	2b20      	cmp	r3, #32
 8007956:	d003      	beq.n	8007960 <I2C_IsErrorOccurred+0xe0>
 8007958:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0aa      	beq.n	80078b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007964:	2b00      	cmp	r3, #0
 8007966:	d103      	bne.n	8007970 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2220      	movs	r2, #32
 800796e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	f043 0304 	orr.w	r3, r3, #4
 8007976:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00b      	beq.n	80079a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	f043 0301 	orr.w	r3, r3, #1
 8007996:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80079a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00b      	beq.n	80079ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80079b2:	6a3b      	ldr	r3, [r7, #32]
 80079b4:	f043 0308 	orr.w	r3, r3, #8
 80079b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80079c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00b      	beq.n	80079ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	f043 0302 	orr.w	r3, r3, #2
 80079da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80079ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d01c      	beq.n	8007a2e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f7ff fe1e 	bl	8007636 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6859      	ldr	r1, [r3, #4]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	4b0d      	ldr	r3, [pc, #52]	@ (8007a3c <I2C_IsErrorOccurred+0x1bc>)
 8007a06:	400b      	ands	r3, r1
 8007a08:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	431a      	orrs	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3728      	adds	r7, #40	@ 0x28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	fe00e800 	.word	0xfe00e800

08007a40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	607b      	str	r3, [r7, #4]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	817b      	strh	r3, [r7, #10]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a52:	897b      	ldrh	r3, [r7, #10]
 8007a54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007a58:	7a7b      	ldrb	r3, [r7, #9]
 8007a5a:	041b      	lsls	r3, r3, #16
 8007a5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a60:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a6e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	0d5b      	lsrs	r3, r3, #21
 8007a7a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007a7e:	4b08      	ldr	r3, [pc, #32]	@ (8007aa0 <I2C_TransferConfig+0x60>)
 8007a80:	430b      	orrs	r3, r1
 8007a82:	43db      	mvns	r3, r3
 8007a84:	ea02 0103 	and.w	r1, r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007a92:	bf00      	nop
 8007a94:	371c      	adds	r7, #28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	03ff63ff 	.word	0x03ff63ff

08007aa4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	460b      	mov	r3, r1
 8007aae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ab8:	4a39      	ldr	r2, [pc, #228]	@ (8007ba0 <I2C_Enable_IRQ+0xfc>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d032      	beq.n	8007b24 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007ac2:	4a38      	ldr	r2, [pc, #224]	@ (8007ba4 <I2C_Enable_IRQ+0x100>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d02d      	beq.n	8007b24 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007acc:	4a36      	ldr	r2, [pc, #216]	@ (8007ba8 <I2C_Enable_IRQ+0x104>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d028      	beq.n	8007b24 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007ad2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	da03      	bge.n	8007ae2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007ae0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007ae2:	887b      	ldrh	r3, [r7, #2]
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007af2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007af4:	887b      	ldrh	r3, [r7, #2]
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007b04:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007b06:	887b      	ldrh	r3, [r7, #2]
 8007b08:	2b10      	cmp	r3, #16
 8007b0a:	d103      	bne.n	8007b14 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007b12:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b14:	887b      	ldrh	r3, [r7, #2]
 8007b16:	2b20      	cmp	r3, #32
 8007b18:	d133      	bne.n	8007b82 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f043 0320 	orr.w	r3, r3, #32
 8007b20:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b22:	e02e      	b.n	8007b82 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007b24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	da03      	bge.n	8007b34 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007b32:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007b34:	887b      	ldrh	r3, [r7, #2]
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007b44:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007b46:	887b      	ldrh	r3, [r7, #2]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d003      	beq.n	8007b58 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007b56:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007b58:	887b      	ldrh	r3, [r7, #2]
 8007b5a:	2b10      	cmp	r3, #16
 8007b5c:	d103      	bne.n	8007b66 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007b64:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b66:	887b      	ldrh	r3, [r7, #2]
 8007b68:	2b20      	cmp	r3, #32
 8007b6a:	d103      	bne.n	8007b74 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007b72:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007b74:	887b      	ldrh	r3, [r7, #2]
 8007b76:	2b40      	cmp	r3, #64	@ 0x40
 8007b78:	d103      	bne.n	8007b82 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b80:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6819      	ldr	r1, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	601a      	str	r2, [r3, #0]
}
 8007b92:	bf00      	nop
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	080062c7 	.word	0x080062c7
 8007ba4:	0800670d 	.word	0x0800670d
 8007ba8:	080064ad 	.word	0x080064ad

08007bac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007bbc:	887b      	ldrh	r3, [r7, #2]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00f      	beq.n	8007be6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007bcc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007bda:	2b28      	cmp	r3, #40	@ 0x28
 8007bdc:	d003      	beq.n	8007be6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007be4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007be6:	887b      	ldrh	r3, [r7, #2]
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00f      	beq.n	8007c10 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007bf6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007c04:	2b28      	cmp	r3, #40	@ 0x28
 8007c06:	d003      	beq.n	8007c10 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007c0e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007c10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	da03      	bge.n	8007c20 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007c1e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007c20:	887b      	ldrh	r3, [r7, #2]
 8007c22:	2b10      	cmp	r3, #16
 8007c24:	d103      	bne.n	8007c2e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007c2c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007c2e:	887b      	ldrh	r3, [r7, #2]
 8007c30:	2b20      	cmp	r3, #32
 8007c32:	d103      	bne.n	8007c3c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f043 0320 	orr.w	r3, r3, #32
 8007c3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007c3c:	887b      	ldrh	r3, [r7, #2]
 8007c3e:	2b40      	cmp	r3, #64	@ 0x40
 8007c40:	d103      	bne.n	8007c4a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c48:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6819      	ldr	r1, [r3, #0]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	43da      	mvns	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	400a      	ands	r2, r1
 8007c5a:	601a      	str	r2, [r3, #0]
}
 8007c5c:	bf00      	nop
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b20      	cmp	r3, #32
 8007c7c:	d138      	bne.n	8007cf0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d101      	bne.n	8007c8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e032      	b.n	8007cf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2224      	movs	r2, #36	@ 0x24
 8007c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f022 0201 	bic.w	r2, r2, #1
 8007caa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007cba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6819      	ldr	r1, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f042 0201 	orr.w	r2, r2, #1
 8007cda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2220      	movs	r2, #32
 8007ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	e000      	b.n	8007cf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007cf0:	2302      	movs	r3, #2
  }
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b20      	cmp	r3, #32
 8007d12:	d139      	bne.n	8007d88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d101      	bne.n	8007d22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e033      	b.n	8007d8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2224      	movs	r2, #36	@ 0x24
 8007d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f022 0201 	bic.w	r2, r2, #1
 8007d40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007d50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	021b      	lsls	r3, r3, #8
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f042 0201 	orr.w	r2, r2, #1
 8007d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2220      	movs	r2, #32
 8007d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	e000      	b.n	8007d8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007d88:	2302      	movs	r3, #2
  }
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
	...

08007d98 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007da0:	4b19      	ldr	r3, [pc, #100]	@ (8007e08 <HAL_PWREx_ConfigSupply+0x70>)
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f003 0304 	and.w	r3, r3, #4
 8007da8:	2b04      	cmp	r3, #4
 8007daa:	d00a      	beq.n	8007dc2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007dac:	4b16      	ldr	r3, [pc, #88]	@ (8007e08 <HAL_PWREx_ConfigSupply+0x70>)
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d001      	beq.n	8007dbe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e01f      	b.n	8007dfe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	e01d      	b.n	8007dfe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007dc2:	4b11      	ldr	r3, [pc, #68]	@ (8007e08 <HAL_PWREx_ConfigSupply+0x70>)
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	f023 0207 	bic.w	r2, r3, #7
 8007dca:	490f      	ldr	r1, [pc, #60]	@ (8007e08 <HAL_PWREx_ConfigSupply+0x70>)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007dd2:	f7fa fd09 	bl	80027e8 <HAL_GetTick>
 8007dd6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007dd8:	e009      	b.n	8007dee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007dda:	f7fa fd05 	bl	80027e8 <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007de8:	d901      	bls.n	8007dee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e007      	b.n	8007dfe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007dee:	4b06      	ldr	r3, [pc, #24]	@ (8007e08 <HAL_PWREx_ConfigSupply+0x70>)
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dfa:	d1ee      	bne.n	8007dda <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	58024800 	.word	0x58024800

08007e0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08c      	sub	sp, #48	@ 0x30
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e3c8      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 8087 	beq.w	8007f3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e2c:	4b88      	ldr	r3, [pc, #544]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e36:	4b86      	ldr	r3, [pc, #536]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e3e:	2b10      	cmp	r3, #16
 8007e40:	d007      	beq.n	8007e52 <HAL_RCC_OscConfig+0x46>
 8007e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e44:	2b18      	cmp	r3, #24
 8007e46:	d110      	bne.n	8007e6a <HAL_RCC_OscConfig+0x5e>
 8007e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4a:	f003 0303 	and.w	r3, r3, #3
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d10b      	bne.n	8007e6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e52:	4b7f      	ldr	r3, [pc, #508]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d06c      	beq.n	8007f38 <HAL_RCC_OscConfig+0x12c>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d168      	bne.n	8007f38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e3a2      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e72:	d106      	bne.n	8007e82 <HAL_RCC_OscConfig+0x76>
 8007e74:	4b76      	ldr	r3, [pc, #472]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a75      	ldr	r2, [pc, #468]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	e02e      	b.n	8007ee0 <HAL_RCC_OscConfig+0xd4>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10c      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x98>
 8007e8a:	4b71      	ldr	r3, [pc, #452]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a70      	ldr	r2, [pc, #448]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007e90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	4b6e      	ldr	r3, [pc, #440]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a6d      	ldr	r2, [pc, #436]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007e9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	e01d      	b.n	8007ee0 <HAL_RCC_OscConfig+0xd4>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007eac:	d10c      	bne.n	8007ec8 <HAL_RCC_OscConfig+0xbc>
 8007eae:	4b68      	ldr	r3, [pc, #416]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a67      	ldr	r2, [pc, #412]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	4b65      	ldr	r3, [pc, #404]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a64      	ldr	r2, [pc, #400]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ec4:	6013      	str	r3, [r2, #0]
 8007ec6:	e00b      	b.n	8007ee0 <HAL_RCC_OscConfig+0xd4>
 8007ec8:	4b61      	ldr	r3, [pc, #388]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a60      	ldr	r2, [pc, #384]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ed2:	6013      	str	r3, [r2, #0]
 8007ed4:	4b5e      	ldr	r3, [pc, #376]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a5d      	ldr	r2, [pc, #372]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d013      	beq.n	8007f10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee8:	f7fa fc7e 	bl	80027e8 <HAL_GetTick>
 8007eec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007eee:	e008      	b.n	8007f02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ef0:	f7fa fc7a 	bl	80027e8 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	2b64      	cmp	r3, #100	@ 0x64
 8007efc:	d901      	bls.n	8007f02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e356      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f02:	4b53      	ldr	r3, [pc, #332]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0f0      	beq.n	8007ef0 <HAL_RCC_OscConfig+0xe4>
 8007f0e:	e014      	b.n	8007f3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f10:	f7fa fc6a 	bl	80027e8 <HAL_GetTick>
 8007f14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f16:	e008      	b.n	8007f2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f18:	f7fa fc66 	bl	80027e8 <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	2b64      	cmp	r3, #100	@ 0x64
 8007f24:	d901      	bls.n	8007f2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e342      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f2a:	4b49      	ldr	r3, [pc, #292]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1f0      	bne.n	8007f18 <HAL_RCC_OscConfig+0x10c>
 8007f36:	e000      	b.n	8007f3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f000 808c 	beq.w	8008060 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f48:	4b41      	ldr	r3, [pc, #260]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f52:	4b3f      	ldr	r3, [pc, #252]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d007      	beq.n	8007f6e <HAL_RCC_OscConfig+0x162>
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	2b18      	cmp	r3, #24
 8007f62:	d137      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x1c8>
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	f003 0303 	and.w	r3, r3, #3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d132      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f6e:	4b38      	ldr	r3, [pc, #224]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 0304 	and.w	r3, r3, #4
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d005      	beq.n	8007f86 <HAL_RCC_OscConfig+0x17a>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e314      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f86:	4b32      	ldr	r3, [pc, #200]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f023 0219 	bic.w	r2, r3, #25
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	492f      	ldr	r1, [pc, #188]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f98:	f7fa fc26 	bl	80027e8 <HAL_GetTick>
 8007f9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f9e:	e008      	b.n	8007fb2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fa0:	f7fa fc22 	bl	80027e8 <HAL_GetTick>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d901      	bls.n	8007fb2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e2fe      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fb2:	4b27      	ldr	r3, [pc, #156]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0304 	and.w	r3, r3, #4
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d0f0      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fbe:	4b24      	ldr	r3, [pc, #144]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	061b      	lsls	r3, r3, #24
 8007fcc:	4920      	ldr	r1, [pc, #128]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fd2:	e045      	b.n	8008060 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d026      	beq.n	800802a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f023 0219 	bic.w	r2, r3, #25
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	4919      	ldr	r1, [pc, #100]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fee:	f7fa fbfb 	bl	80027e8 <HAL_GetTick>
 8007ff2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ff4:	e008      	b.n	8008008 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ff6:	f7fa fbf7 	bl	80027e8 <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	2b02      	cmp	r3, #2
 8008002:	d901      	bls.n	8008008 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e2d3      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008008:	4b11      	ldr	r3, [pc, #68]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b00      	cmp	r3, #0
 8008012:	d0f0      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008014:	4b0e      	ldr	r3, [pc, #56]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	061b      	lsls	r3, r3, #24
 8008022:	490b      	ldr	r1, [pc, #44]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8008024:	4313      	orrs	r3, r2
 8008026:	604b      	str	r3, [r1, #4]
 8008028:	e01a      	b.n	8008060 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800802a:	4b09      	ldr	r3, [pc, #36]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a08      	ldr	r2, [pc, #32]	@ (8008050 <HAL_RCC_OscConfig+0x244>)
 8008030:	f023 0301 	bic.w	r3, r3, #1
 8008034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008036:	f7fa fbd7 	bl	80027e8 <HAL_GetTick>
 800803a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800803c:	e00a      	b.n	8008054 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800803e:	f7fa fbd3 	bl	80027e8 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	2b02      	cmp	r3, #2
 800804a:	d903      	bls.n	8008054 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e2af      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
 8008050:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008054:	4b96      	ldr	r3, [pc, #600]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0304 	and.w	r3, r3, #4
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1ee      	bne.n	800803e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0310 	and.w	r3, r3, #16
 8008068:	2b00      	cmp	r3, #0
 800806a:	d06a      	beq.n	8008142 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800806c:	4b90      	ldr	r3, [pc, #576]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008074:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008076:	4b8e      	ldr	r3, [pc, #568]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 8008078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800807a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	2b08      	cmp	r3, #8
 8008080:	d007      	beq.n	8008092 <HAL_RCC_OscConfig+0x286>
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	2b18      	cmp	r3, #24
 8008086:	d11b      	bne.n	80080c0 <HAL_RCC_OscConfig+0x2b4>
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f003 0303 	and.w	r3, r3, #3
 800808e:	2b01      	cmp	r3, #1
 8008090:	d116      	bne.n	80080c0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008092:	4b87      	ldr	r3, [pc, #540]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800809a:	2b00      	cmp	r3, #0
 800809c:	d005      	beq.n	80080aa <HAL_RCC_OscConfig+0x29e>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	2b80      	cmp	r3, #128	@ 0x80
 80080a4:	d001      	beq.n	80080aa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e282      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080aa:	4b81      	ldr	r3, [pc, #516]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	061b      	lsls	r3, r3, #24
 80080b8:	497d      	ldr	r1, [pc, #500]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080be:	e040      	b.n	8008142 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	69db      	ldr	r3, [r3, #28]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d023      	beq.n	8008110 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80080c8:	4b79      	ldr	r3, [pc, #484]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a78      	ldr	r2, [pc, #480]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 80080ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d4:	f7fa fb88 	bl	80027e8 <HAL_GetTick>
 80080d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080da:	e008      	b.n	80080ee <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80080dc:	f7fa fb84 	bl	80027e8 <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d901      	bls.n	80080ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e260      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080ee:	4b70      	ldr	r3, [pc, #448]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d0f0      	beq.n	80080dc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080fa:	4b6d      	ldr	r3, [pc, #436]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	061b      	lsls	r3, r3, #24
 8008108:	4969      	ldr	r1, [pc, #420]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 800810a:	4313      	orrs	r3, r2
 800810c:	60cb      	str	r3, [r1, #12]
 800810e:	e018      	b.n	8008142 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008110:	4b67      	ldr	r3, [pc, #412]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a66      	ldr	r2, [pc, #408]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 8008116:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800811a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800811c:	f7fa fb64 	bl	80027e8 <HAL_GetTick>
 8008120:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008122:	e008      	b.n	8008136 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008124:	f7fa fb60 	bl	80027e8 <HAL_GetTick>
 8008128:	4602      	mov	r2, r0
 800812a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	2b02      	cmp	r3, #2
 8008130:	d901      	bls.n	8008136 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e23c      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008136:	4b5e      	ldr	r3, [pc, #376]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1f0      	bne.n	8008124 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0308 	and.w	r3, r3, #8
 800814a:	2b00      	cmp	r3, #0
 800814c:	d036      	beq.n	80081bc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d019      	beq.n	800818a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008156:	4b56      	ldr	r3, [pc, #344]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 8008158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800815a:	4a55      	ldr	r2, [pc, #340]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 800815c:	f043 0301 	orr.w	r3, r3, #1
 8008160:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008162:	f7fa fb41 	bl	80027e8 <HAL_GetTick>
 8008166:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008168:	e008      	b.n	800817c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800816a:	f7fa fb3d 	bl	80027e8 <HAL_GetTick>
 800816e:	4602      	mov	r2, r0
 8008170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	2b02      	cmp	r3, #2
 8008176:	d901      	bls.n	800817c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e219      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800817c:	4b4c      	ldr	r3, [pc, #304]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 800817e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008180:	f003 0302 	and.w	r3, r3, #2
 8008184:	2b00      	cmp	r3, #0
 8008186:	d0f0      	beq.n	800816a <HAL_RCC_OscConfig+0x35e>
 8008188:	e018      	b.n	80081bc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800818a:	4b49      	ldr	r3, [pc, #292]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 800818c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800818e:	4a48      	ldr	r2, [pc, #288]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 8008190:	f023 0301 	bic.w	r3, r3, #1
 8008194:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008196:	f7fa fb27 	bl	80027e8 <HAL_GetTick>
 800819a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800819c:	e008      	b.n	80081b0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800819e:	f7fa fb23 	bl	80027e8 <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d901      	bls.n	80081b0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e1ff      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80081b0:	4b3f      	ldr	r3, [pc, #252]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 80081b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081b4:	f003 0302 	and.w	r3, r3, #2
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1f0      	bne.n	800819e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0320 	and.w	r3, r3, #32
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d036      	beq.n	8008236 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d019      	beq.n	8008204 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80081d0:	4b37      	ldr	r3, [pc, #220]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a36      	ldr	r2, [pc, #216]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 80081d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80081da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081dc:	f7fa fb04 	bl	80027e8 <HAL_GetTick>
 80081e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081e2:	e008      	b.n	80081f6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081e4:	f7fa fb00 	bl	80027e8 <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d901      	bls.n	80081f6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e1dc      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081f6:	4b2e      	ldr	r3, [pc, #184]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0f0      	beq.n	80081e4 <HAL_RCC_OscConfig+0x3d8>
 8008202:	e018      	b.n	8008236 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008204:	4b2a      	ldr	r3, [pc, #168]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a29      	ldr	r2, [pc, #164]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 800820a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800820e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008210:	f7fa faea 	bl	80027e8 <HAL_GetTick>
 8008214:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008216:	e008      	b.n	800822a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008218:	f7fa fae6 	bl	80027e8 <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	2b02      	cmp	r3, #2
 8008224:	d901      	bls.n	800822a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e1c2      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800822a:	4b21      	ldr	r3, [pc, #132]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1f0      	bne.n	8008218 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0304 	and.w	r3, r3, #4
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 8086 	beq.w	8008350 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008244:	4b1b      	ldr	r3, [pc, #108]	@ (80082b4 <HAL_RCC_OscConfig+0x4a8>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a1a      	ldr	r2, [pc, #104]	@ (80082b4 <HAL_RCC_OscConfig+0x4a8>)
 800824a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800824e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008250:	f7fa faca 	bl	80027e8 <HAL_GetTick>
 8008254:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008256:	e008      	b.n	800826a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008258:	f7fa fac6 	bl	80027e8 <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	2b64      	cmp	r3, #100	@ 0x64
 8008264:	d901      	bls.n	800826a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e1a2      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800826a:	4b12      	ldr	r3, [pc, #72]	@ (80082b4 <HAL_RCC_OscConfig+0x4a8>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0f0      	beq.n	8008258 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d106      	bne.n	800828c <HAL_RCC_OscConfig+0x480>
 800827e:	4b0c      	ldr	r3, [pc, #48]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 8008280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008282:	4a0b      	ldr	r2, [pc, #44]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 8008284:	f043 0301 	orr.w	r3, r3, #1
 8008288:	6713      	str	r3, [r2, #112]	@ 0x70
 800828a:	e032      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e6>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d111      	bne.n	80082b8 <HAL_RCC_OscConfig+0x4ac>
 8008294:	4b06      	ldr	r3, [pc, #24]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 8008296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008298:	4a05      	ldr	r2, [pc, #20]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 800829a:	f023 0301 	bic.w	r3, r3, #1
 800829e:	6713      	str	r3, [r2, #112]	@ 0x70
 80082a0:	4b03      	ldr	r3, [pc, #12]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 80082a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082a4:	4a02      	ldr	r2, [pc, #8]	@ (80082b0 <HAL_RCC_OscConfig+0x4a4>)
 80082a6:	f023 0304 	bic.w	r3, r3, #4
 80082aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80082ac:	e021      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e6>
 80082ae:	bf00      	nop
 80082b0:	58024400 	.word	0x58024400
 80082b4:	58024800 	.word	0x58024800
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	2b05      	cmp	r3, #5
 80082be:	d10c      	bne.n	80082da <HAL_RCC_OscConfig+0x4ce>
 80082c0:	4b83      	ldr	r3, [pc, #524]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 80082c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082c4:	4a82      	ldr	r2, [pc, #520]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 80082c6:	f043 0304 	orr.w	r3, r3, #4
 80082ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80082cc:	4b80      	ldr	r3, [pc, #512]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 80082ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082d0:	4a7f      	ldr	r2, [pc, #508]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 80082d2:	f043 0301 	orr.w	r3, r3, #1
 80082d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80082d8:	e00b      	b.n	80082f2 <HAL_RCC_OscConfig+0x4e6>
 80082da:	4b7d      	ldr	r3, [pc, #500]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 80082dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082de:	4a7c      	ldr	r2, [pc, #496]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 80082e0:	f023 0301 	bic.w	r3, r3, #1
 80082e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80082e6:	4b7a      	ldr	r3, [pc, #488]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 80082e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ea:	4a79      	ldr	r2, [pc, #484]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 80082ec:	f023 0304 	bic.w	r3, r3, #4
 80082f0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d015      	beq.n	8008326 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082fa:	f7fa fa75 	bl	80027e8 <HAL_GetTick>
 80082fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008300:	e00a      	b.n	8008318 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008302:	f7fa fa71 	bl	80027e8 <HAL_GetTick>
 8008306:	4602      	mov	r2, r0
 8008308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008310:	4293      	cmp	r3, r2
 8008312:	d901      	bls.n	8008318 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e14b      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008318:	4b6d      	ldr	r3, [pc, #436]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 800831a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800831c:	f003 0302 	and.w	r3, r3, #2
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0ee      	beq.n	8008302 <HAL_RCC_OscConfig+0x4f6>
 8008324:	e014      	b.n	8008350 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008326:	f7fa fa5f 	bl	80027e8 <HAL_GetTick>
 800832a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800832c:	e00a      	b.n	8008344 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800832e:	f7fa fa5b 	bl	80027e8 <HAL_GetTick>
 8008332:	4602      	mov	r2, r0
 8008334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800833c:	4293      	cmp	r3, r2
 800833e:	d901      	bls.n	8008344 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e135      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008344:	4b62      	ldr	r3, [pc, #392]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 8008346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008348:	f003 0302 	and.w	r3, r3, #2
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1ee      	bne.n	800832e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 812a 	beq.w	80085ae <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800835a:	4b5d      	ldr	r3, [pc, #372]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008362:	2b18      	cmp	r3, #24
 8008364:	f000 80ba 	beq.w	80084dc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800836c:	2b02      	cmp	r3, #2
 800836e:	f040 8095 	bne.w	800849c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008372:	4b57      	ldr	r3, [pc, #348]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a56      	ldr	r2, [pc, #344]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 8008378:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800837c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800837e:	f7fa fa33 	bl	80027e8 <HAL_GetTick>
 8008382:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008384:	e008      	b.n	8008398 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008386:	f7fa fa2f 	bl	80027e8 <HAL_GetTick>
 800838a:	4602      	mov	r2, r0
 800838c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	2b02      	cmp	r3, #2
 8008392:	d901      	bls.n	8008398 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e10b      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008398:	4b4d      	ldr	r3, [pc, #308]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1f0      	bne.n	8008386 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80083a4:	4b4a      	ldr	r3, [pc, #296]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 80083a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083a8:	4b4a      	ldr	r3, [pc, #296]	@ (80084d4 <HAL_RCC_OscConfig+0x6c8>)
 80083aa:	4013      	ands	r3, r2
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80083b4:	0112      	lsls	r2, r2, #4
 80083b6:	430a      	orrs	r2, r1
 80083b8:	4945      	ldr	r1, [pc, #276]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 80083ba:	4313      	orrs	r3, r2
 80083bc:	628b      	str	r3, [r1, #40]	@ 0x28
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083c2:	3b01      	subs	r3, #1
 80083c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083cc:	3b01      	subs	r3, #1
 80083ce:	025b      	lsls	r3, r3, #9
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	431a      	orrs	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d8:	3b01      	subs	r3, #1
 80083da:	041b      	lsls	r3, r3, #16
 80083dc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80083e0:	431a      	orrs	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083e6:	3b01      	subs	r3, #1
 80083e8:	061b      	lsls	r3, r3, #24
 80083ea:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80083ee:	4938      	ldr	r1, [pc, #224]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 80083f0:	4313      	orrs	r3, r2
 80083f2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80083f4:	4b36      	ldr	r3, [pc, #216]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 80083f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f8:	4a35      	ldr	r2, [pc, #212]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 80083fa:	f023 0301 	bic.w	r3, r3, #1
 80083fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008400:	4b33      	ldr	r3, [pc, #204]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 8008402:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008404:	4b34      	ldr	r3, [pc, #208]	@ (80084d8 <HAL_RCC_OscConfig+0x6cc>)
 8008406:	4013      	ands	r3, r2
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800840c:	00d2      	lsls	r2, r2, #3
 800840e:	4930      	ldr	r1, [pc, #192]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 8008410:	4313      	orrs	r3, r2
 8008412:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008414:	4b2e      	ldr	r3, [pc, #184]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 8008416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008418:	f023 020c 	bic.w	r2, r3, #12
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008420:	492b      	ldr	r1, [pc, #172]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 8008422:	4313      	orrs	r3, r2
 8008424:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008426:	4b2a      	ldr	r3, [pc, #168]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 8008428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800842a:	f023 0202 	bic.w	r2, r3, #2
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008432:	4927      	ldr	r1, [pc, #156]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 8008434:	4313      	orrs	r3, r2
 8008436:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008438:	4b25      	ldr	r3, [pc, #148]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 800843a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800843c:	4a24      	ldr	r2, [pc, #144]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 800843e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008442:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008444:	4b22      	ldr	r3, [pc, #136]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 8008446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008448:	4a21      	ldr	r2, [pc, #132]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 800844a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800844e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008450:	4b1f      	ldr	r3, [pc, #124]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 8008452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008454:	4a1e      	ldr	r2, [pc, #120]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 8008456:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800845a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800845c:	4b1c      	ldr	r3, [pc, #112]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 800845e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008460:	4a1b      	ldr	r2, [pc, #108]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 8008462:	f043 0301 	orr.w	r3, r3, #1
 8008466:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008468:	4b19      	ldr	r3, [pc, #100]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a18      	ldr	r2, [pc, #96]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 800846e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008474:	f7fa f9b8 	bl	80027e8 <HAL_GetTick>
 8008478:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800847a:	e008      	b.n	800848e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800847c:	f7fa f9b4 	bl	80027e8 <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	2b02      	cmp	r3, #2
 8008488:	d901      	bls.n	800848e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e090      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800848e:	4b10      	ldr	r3, [pc, #64]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d0f0      	beq.n	800847c <HAL_RCC_OscConfig+0x670>
 800849a:	e088      	b.n	80085ae <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800849c:	4b0c      	ldr	r3, [pc, #48]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a0b      	ldr	r2, [pc, #44]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 80084a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084a8:	f7fa f99e 	bl	80027e8 <HAL_GetTick>
 80084ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084ae:	e008      	b.n	80084c2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084b0:	f7fa f99a 	bl	80027e8 <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d901      	bls.n	80084c2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e076      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084c2:	4b03      	ldr	r3, [pc, #12]	@ (80084d0 <HAL_RCC_OscConfig+0x6c4>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1f0      	bne.n	80084b0 <HAL_RCC_OscConfig+0x6a4>
 80084ce:	e06e      	b.n	80085ae <HAL_RCC_OscConfig+0x7a2>
 80084d0:	58024400 	.word	0x58024400
 80084d4:	fffffc0c 	.word	0xfffffc0c
 80084d8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80084dc:	4b36      	ldr	r3, [pc, #216]	@ (80085b8 <HAL_RCC_OscConfig+0x7ac>)
 80084de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80084e2:	4b35      	ldr	r3, [pc, #212]	@ (80085b8 <HAL_RCC_OscConfig+0x7ac>)
 80084e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d031      	beq.n	8008554 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	f003 0203 	and.w	r2, r3, #3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d12a      	bne.n	8008554 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	091b      	lsrs	r3, r3, #4
 8008502:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800850a:	429a      	cmp	r2, r3
 800850c:	d122      	bne.n	8008554 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008518:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800851a:	429a      	cmp	r2, r3
 800851c:	d11a      	bne.n	8008554 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	0a5b      	lsrs	r3, r3, #9
 8008522:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800852a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800852c:	429a      	cmp	r2, r3
 800852e:	d111      	bne.n	8008554 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	0c1b      	lsrs	r3, r3, #16
 8008534:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800853c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800853e:	429a      	cmp	r2, r3
 8008540:	d108      	bne.n	8008554 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	0e1b      	lsrs	r3, r3, #24
 8008546:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800854e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008550:	429a      	cmp	r2, r3
 8008552:	d001      	beq.n	8008558 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e02b      	b.n	80085b0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008558:	4b17      	ldr	r3, [pc, #92]	@ (80085b8 <HAL_RCC_OscConfig+0x7ac>)
 800855a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800855c:	08db      	lsrs	r3, r3, #3
 800855e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008562:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	429a      	cmp	r2, r3
 800856c:	d01f      	beq.n	80085ae <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800856e:	4b12      	ldr	r3, [pc, #72]	@ (80085b8 <HAL_RCC_OscConfig+0x7ac>)
 8008570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008572:	4a11      	ldr	r2, [pc, #68]	@ (80085b8 <HAL_RCC_OscConfig+0x7ac>)
 8008574:	f023 0301 	bic.w	r3, r3, #1
 8008578:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800857a:	f7fa f935 	bl	80027e8 <HAL_GetTick>
 800857e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008580:	bf00      	nop
 8008582:	f7fa f931 	bl	80027e8 <HAL_GetTick>
 8008586:	4602      	mov	r2, r0
 8008588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858a:	4293      	cmp	r3, r2
 800858c:	d0f9      	beq.n	8008582 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800858e:	4b0a      	ldr	r3, [pc, #40]	@ (80085b8 <HAL_RCC_OscConfig+0x7ac>)
 8008590:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008592:	4b0a      	ldr	r3, [pc, #40]	@ (80085bc <HAL_RCC_OscConfig+0x7b0>)
 8008594:	4013      	ands	r3, r2
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800859a:	00d2      	lsls	r2, r2, #3
 800859c:	4906      	ldr	r1, [pc, #24]	@ (80085b8 <HAL_RCC_OscConfig+0x7ac>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80085a2:	4b05      	ldr	r3, [pc, #20]	@ (80085b8 <HAL_RCC_OscConfig+0x7ac>)
 80085a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a6:	4a04      	ldr	r2, [pc, #16]	@ (80085b8 <HAL_RCC_OscConfig+0x7ac>)
 80085a8:	f043 0301 	orr.w	r3, r3, #1
 80085ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3730      	adds	r7, #48	@ 0x30
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	58024400 	.word	0x58024400
 80085bc:	ffff0007 	.word	0xffff0007

080085c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e19c      	b.n	800890e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80085d4:	4b8a      	ldr	r3, [pc, #552]	@ (8008800 <HAL_RCC_ClockConfig+0x240>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 030f 	and.w	r3, r3, #15
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d910      	bls.n	8008604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085e2:	4b87      	ldr	r3, [pc, #540]	@ (8008800 <HAL_RCC_ClockConfig+0x240>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f023 020f 	bic.w	r2, r3, #15
 80085ea:	4985      	ldr	r1, [pc, #532]	@ (8008800 <HAL_RCC_ClockConfig+0x240>)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085f2:	4b83      	ldr	r3, [pc, #524]	@ (8008800 <HAL_RCC_ClockConfig+0x240>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 030f 	and.w	r3, r3, #15
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d001      	beq.n	8008604 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e184      	b.n	800890e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b00      	cmp	r3, #0
 800860e:	d010      	beq.n	8008632 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	691a      	ldr	r2, [r3, #16]
 8008614:	4b7b      	ldr	r3, [pc, #492]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800861c:	429a      	cmp	r2, r3
 800861e:	d908      	bls.n	8008632 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008620:	4b78      	ldr	r3, [pc, #480]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	4975      	ldr	r1, [pc, #468]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 800862e:	4313      	orrs	r3, r2
 8008630:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0308 	and.w	r3, r3, #8
 800863a:	2b00      	cmp	r3, #0
 800863c:	d010      	beq.n	8008660 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	695a      	ldr	r2, [r3, #20]
 8008642:	4b70      	ldr	r3, [pc, #448]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 8008644:	69db      	ldr	r3, [r3, #28]
 8008646:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800864a:	429a      	cmp	r2, r3
 800864c:	d908      	bls.n	8008660 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800864e:	4b6d      	ldr	r3, [pc, #436]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 8008650:	69db      	ldr	r3, [r3, #28]
 8008652:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	496a      	ldr	r1, [pc, #424]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 800865c:	4313      	orrs	r3, r2
 800865e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0310 	and.w	r3, r3, #16
 8008668:	2b00      	cmp	r3, #0
 800866a:	d010      	beq.n	800868e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	699a      	ldr	r2, [r3, #24]
 8008670:	4b64      	ldr	r3, [pc, #400]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008678:	429a      	cmp	r2, r3
 800867a:	d908      	bls.n	800868e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800867c:	4b61      	ldr	r3, [pc, #388]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 800867e:	69db      	ldr	r3, [r3, #28]
 8008680:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	495e      	ldr	r1, [pc, #376]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 800868a:	4313      	orrs	r3, r2
 800868c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0320 	and.w	r3, r3, #32
 8008696:	2b00      	cmp	r3, #0
 8008698:	d010      	beq.n	80086bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	69da      	ldr	r2, [r3, #28]
 800869e:	4b59      	ldr	r3, [pc, #356]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d908      	bls.n	80086bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80086aa:	4b56      	ldr	r3, [pc, #344]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	4953      	ldr	r1, [pc, #332]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0302 	and.w	r3, r3, #2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d010      	beq.n	80086ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68da      	ldr	r2, [r3, #12]
 80086cc:	4b4d      	ldr	r3, [pc, #308]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	f003 030f 	and.w	r3, r3, #15
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d908      	bls.n	80086ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086d8:	4b4a      	ldr	r3, [pc, #296]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	f023 020f 	bic.w	r2, r3, #15
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	4947      	ldr	r1, [pc, #284]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d055      	beq.n	80087a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80086f6:	4b43      	ldr	r3, [pc, #268]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	4940      	ldr	r1, [pc, #256]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 8008704:	4313      	orrs	r3, r2
 8008706:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	2b02      	cmp	r3, #2
 800870e:	d107      	bne.n	8008720 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008710:	4b3c      	ldr	r3, [pc, #240]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d121      	bne.n	8008760 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e0f6      	b.n	800890e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	2b03      	cmp	r3, #3
 8008726:	d107      	bne.n	8008738 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008728:	4b36      	ldr	r3, [pc, #216]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d115      	bne.n	8008760 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e0ea      	b.n	800890e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d107      	bne.n	8008750 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008740:	4b30      	ldr	r3, [pc, #192]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008748:	2b00      	cmp	r3, #0
 800874a:	d109      	bne.n	8008760 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e0de      	b.n	800890e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008750:	4b2c      	ldr	r3, [pc, #176]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	e0d6      	b.n	800890e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008760:	4b28      	ldr	r3, [pc, #160]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	f023 0207 	bic.w	r2, r3, #7
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	4925      	ldr	r1, [pc, #148]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 800876e:	4313      	orrs	r3, r2
 8008770:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008772:	f7fa f839 	bl	80027e8 <HAL_GetTick>
 8008776:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008778:	e00a      	b.n	8008790 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800877a:	f7fa f835 	bl	80027e8 <HAL_GetTick>
 800877e:	4602      	mov	r2, r0
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008788:	4293      	cmp	r3, r2
 800878a:	d901      	bls.n	8008790 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e0be      	b.n	800890e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008790:	4b1c      	ldr	r3, [pc, #112]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	00db      	lsls	r3, r3, #3
 800879e:	429a      	cmp	r2, r3
 80087a0:	d1eb      	bne.n	800877a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 0302 	and.w	r3, r3, #2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d010      	beq.n	80087d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68da      	ldr	r2, [r3, #12]
 80087b2:	4b14      	ldr	r3, [pc, #80]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	f003 030f 	and.w	r3, r3, #15
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d208      	bcs.n	80087d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087be:	4b11      	ldr	r3, [pc, #68]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	f023 020f 	bic.w	r2, r3, #15
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	490e      	ldr	r1, [pc, #56]	@ (8008804 <HAL_RCC_ClockConfig+0x244>)
 80087cc:	4313      	orrs	r3, r2
 80087ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80087d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008800 <HAL_RCC_ClockConfig+0x240>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 030f 	and.w	r3, r3, #15
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d214      	bcs.n	8008808 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087de:	4b08      	ldr	r3, [pc, #32]	@ (8008800 <HAL_RCC_ClockConfig+0x240>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f023 020f 	bic.w	r2, r3, #15
 80087e6:	4906      	ldr	r1, [pc, #24]	@ (8008800 <HAL_RCC_ClockConfig+0x240>)
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087ee:	4b04      	ldr	r3, [pc, #16]	@ (8008800 <HAL_RCC_ClockConfig+0x240>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 030f 	and.w	r3, r3, #15
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d005      	beq.n	8008808 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e086      	b.n	800890e <HAL_RCC_ClockConfig+0x34e>
 8008800:	52002000 	.word	0x52002000
 8008804:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0304 	and.w	r3, r3, #4
 8008810:	2b00      	cmp	r3, #0
 8008812:	d010      	beq.n	8008836 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	691a      	ldr	r2, [r3, #16]
 8008818:	4b3f      	ldr	r3, [pc, #252]	@ (8008918 <HAL_RCC_ClockConfig+0x358>)
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008820:	429a      	cmp	r2, r3
 8008822:	d208      	bcs.n	8008836 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008824:	4b3c      	ldr	r3, [pc, #240]	@ (8008918 <HAL_RCC_ClockConfig+0x358>)
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	4939      	ldr	r1, [pc, #228]	@ (8008918 <HAL_RCC_ClockConfig+0x358>)
 8008832:	4313      	orrs	r3, r2
 8008834:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0308 	and.w	r3, r3, #8
 800883e:	2b00      	cmp	r3, #0
 8008840:	d010      	beq.n	8008864 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	695a      	ldr	r2, [r3, #20]
 8008846:	4b34      	ldr	r3, [pc, #208]	@ (8008918 <HAL_RCC_ClockConfig+0x358>)
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800884e:	429a      	cmp	r2, r3
 8008850:	d208      	bcs.n	8008864 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008852:	4b31      	ldr	r3, [pc, #196]	@ (8008918 <HAL_RCC_ClockConfig+0x358>)
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	492e      	ldr	r1, [pc, #184]	@ (8008918 <HAL_RCC_ClockConfig+0x358>)
 8008860:	4313      	orrs	r3, r2
 8008862:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 0310 	and.w	r3, r3, #16
 800886c:	2b00      	cmp	r3, #0
 800886e:	d010      	beq.n	8008892 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	699a      	ldr	r2, [r3, #24]
 8008874:	4b28      	ldr	r3, [pc, #160]	@ (8008918 <HAL_RCC_ClockConfig+0x358>)
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800887c:	429a      	cmp	r2, r3
 800887e:	d208      	bcs.n	8008892 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008880:	4b25      	ldr	r3, [pc, #148]	@ (8008918 <HAL_RCC_ClockConfig+0x358>)
 8008882:	69db      	ldr	r3, [r3, #28]
 8008884:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	4922      	ldr	r1, [pc, #136]	@ (8008918 <HAL_RCC_ClockConfig+0x358>)
 800888e:	4313      	orrs	r3, r2
 8008890:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0320 	and.w	r3, r3, #32
 800889a:	2b00      	cmp	r3, #0
 800889c:	d010      	beq.n	80088c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	69da      	ldr	r2, [r3, #28]
 80088a2:	4b1d      	ldr	r3, [pc, #116]	@ (8008918 <HAL_RCC_ClockConfig+0x358>)
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d208      	bcs.n	80088c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80088ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008918 <HAL_RCC_ClockConfig+0x358>)
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	69db      	ldr	r3, [r3, #28]
 80088ba:	4917      	ldr	r1, [pc, #92]	@ (8008918 <HAL_RCC_ClockConfig+0x358>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80088c0:	f000 f834 	bl	800892c <HAL_RCC_GetSysClockFreq>
 80088c4:	4602      	mov	r2, r0
 80088c6:	4b14      	ldr	r3, [pc, #80]	@ (8008918 <HAL_RCC_ClockConfig+0x358>)
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	0a1b      	lsrs	r3, r3, #8
 80088cc:	f003 030f 	and.w	r3, r3, #15
 80088d0:	4912      	ldr	r1, [pc, #72]	@ (800891c <HAL_RCC_ClockConfig+0x35c>)
 80088d2:	5ccb      	ldrb	r3, [r1, r3]
 80088d4:	f003 031f 	and.w	r3, r3, #31
 80088d8:	fa22 f303 	lsr.w	r3, r2, r3
 80088dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088de:	4b0e      	ldr	r3, [pc, #56]	@ (8008918 <HAL_RCC_ClockConfig+0x358>)
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	f003 030f 	and.w	r3, r3, #15
 80088e6:	4a0d      	ldr	r2, [pc, #52]	@ (800891c <HAL_RCC_ClockConfig+0x35c>)
 80088e8:	5cd3      	ldrb	r3, [r2, r3]
 80088ea:	f003 031f 	and.w	r3, r3, #31
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	fa22 f303 	lsr.w	r3, r2, r3
 80088f4:	4a0a      	ldr	r2, [pc, #40]	@ (8008920 <HAL_RCC_ClockConfig+0x360>)
 80088f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80088f8:	4a0a      	ldr	r2, [pc, #40]	@ (8008924 <HAL_RCC_ClockConfig+0x364>)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80088fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008928 <HAL_RCC_ClockConfig+0x368>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4618      	mov	r0, r3
 8008904:	f7f9 ff26 	bl	8002754 <HAL_InitTick>
 8008908:	4603      	mov	r3, r0
 800890a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800890c:	7bfb      	ldrb	r3, [r7, #15]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	58024400 	.word	0x58024400
 800891c:	0800fd7c 	.word	0x0800fd7c
 8008920:	240001b4 	.word	0x240001b4
 8008924:	240001b0 	.word	0x240001b0
 8008928:	240001b8 	.word	0x240001b8

0800892c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800892c:	b480      	push	{r7}
 800892e:	b089      	sub	sp, #36	@ 0x24
 8008930:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008932:	4bb3      	ldr	r3, [pc, #716]	@ (8008c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800893a:	2b18      	cmp	r3, #24
 800893c:	f200 8155 	bhi.w	8008bea <HAL_RCC_GetSysClockFreq+0x2be>
 8008940:	a201      	add	r2, pc, #4	@ (adr r2, 8008948 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008946:	bf00      	nop
 8008948:	080089ad 	.word	0x080089ad
 800894c:	08008beb 	.word	0x08008beb
 8008950:	08008beb 	.word	0x08008beb
 8008954:	08008beb 	.word	0x08008beb
 8008958:	08008beb 	.word	0x08008beb
 800895c:	08008beb 	.word	0x08008beb
 8008960:	08008beb 	.word	0x08008beb
 8008964:	08008beb 	.word	0x08008beb
 8008968:	080089d3 	.word	0x080089d3
 800896c:	08008beb 	.word	0x08008beb
 8008970:	08008beb 	.word	0x08008beb
 8008974:	08008beb 	.word	0x08008beb
 8008978:	08008beb 	.word	0x08008beb
 800897c:	08008beb 	.word	0x08008beb
 8008980:	08008beb 	.word	0x08008beb
 8008984:	08008beb 	.word	0x08008beb
 8008988:	080089d9 	.word	0x080089d9
 800898c:	08008beb 	.word	0x08008beb
 8008990:	08008beb 	.word	0x08008beb
 8008994:	08008beb 	.word	0x08008beb
 8008998:	08008beb 	.word	0x08008beb
 800899c:	08008beb 	.word	0x08008beb
 80089a0:	08008beb 	.word	0x08008beb
 80089a4:	08008beb 	.word	0x08008beb
 80089a8:	080089df 	.word	0x080089df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089ac:	4b94      	ldr	r3, [pc, #592]	@ (8008c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0320 	and.w	r3, r3, #32
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d009      	beq.n	80089cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089b8:	4b91      	ldr	r3, [pc, #580]	@ (8008c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	08db      	lsrs	r3, r3, #3
 80089be:	f003 0303 	and.w	r3, r3, #3
 80089c2:	4a90      	ldr	r2, [pc, #576]	@ (8008c04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089c4:	fa22 f303 	lsr.w	r3, r2, r3
 80089c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80089ca:	e111      	b.n	8008bf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80089cc:	4b8d      	ldr	r3, [pc, #564]	@ (8008c04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089ce:	61bb      	str	r3, [r7, #24]
      break;
 80089d0:	e10e      	b.n	8008bf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80089d2:	4b8d      	ldr	r3, [pc, #564]	@ (8008c08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089d4:	61bb      	str	r3, [r7, #24]
      break;
 80089d6:	e10b      	b.n	8008bf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80089d8:	4b8c      	ldr	r3, [pc, #560]	@ (8008c0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80089da:	61bb      	str	r3, [r7, #24]
      break;
 80089dc:	e108      	b.n	8008bf0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089de:	4b88      	ldr	r3, [pc, #544]	@ (8008c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089e2:	f003 0303 	and.w	r3, r3, #3
 80089e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80089e8:	4b85      	ldr	r3, [pc, #532]	@ (8008c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ec:	091b      	lsrs	r3, r3, #4
 80089ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80089f4:	4b82      	ldr	r3, [pc, #520]	@ (8008c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80089fe:	4b80      	ldr	r3, [pc, #512]	@ (8008c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a02:	08db      	lsrs	r3, r3, #3
 8008a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	fb02 f303 	mul.w	r3, r2, r3
 8008a0e:	ee07 3a90 	vmov	s15, r3
 8008a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 80e1 	beq.w	8008be4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	f000 8083 	beq.w	8008b30 <HAL_RCC_GetSysClockFreq+0x204>
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	f200 80a1 	bhi.w	8008b74 <HAL_RCC_GetSysClockFreq+0x248>
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d003      	beq.n	8008a40 <HAL_RCC_GetSysClockFreq+0x114>
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d056      	beq.n	8008aec <HAL_RCC_GetSysClockFreq+0x1c0>
 8008a3e:	e099      	b.n	8008b74 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a40:	4b6f      	ldr	r3, [pc, #444]	@ (8008c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 0320 	and.w	r3, r3, #32
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d02d      	beq.n	8008aa8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a4c:	4b6c      	ldr	r3, [pc, #432]	@ (8008c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	08db      	lsrs	r3, r3, #3
 8008a52:	f003 0303 	and.w	r3, r3, #3
 8008a56:	4a6b      	ldr	r2, [pc, #428]	@ (8008c04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a58:	fa22 f303 	lsr.w	r3, r2, r3
 8008a5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	ee07 3a90 	vmov	s15, r3
 8008a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	ee07 3a90 	vmov	s15, r3
 8008a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a76:	4b62      	ldr	r3, [pc, #392]	@ (8008c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7e:	ee07 3a90 	vmov	s15, r3
 8008a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a8a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aa2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008aa6:	e087      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008c14 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aba:	4b51      	ldr	r3, [pc, #324]	@ (8008c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ace:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008aea:	e065      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	ee07 3a90 	vmov	s15, r3
 8008af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008c18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008afe:	4b40      	ldr	r3, [pc, #256]	@ (8008c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b06:	ee07 3a90 	vmov	s15, r3
 8008b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b12:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b2e:	e043      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b3a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008c1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8008b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b42:	4b2f      	ldr	r3, [pc, #188]	@ (8008c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b4a:	ee07 3a90 	vmov	s15, r3
 8008b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b56:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b72:	e021      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	ee07 3a90 	vmov	s15, r3
 8008b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b7e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008c18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b86:	4b1e      	ldr	r3, [pc, #120]	@ (8008c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b9a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008bb6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008bb8:	4b11      	ldr	r3, [pc, #68]	@ (8008c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bbc:	0a5b      	lsrs	r3, r3, #9
 8008bbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	ee07 3a90 	vmov	s15, r3
 8008bcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008bd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bdc:	ee17 3a90 	vmov	r3, s15
 8008be0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008be2:	e005      	b.n	8008bf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008be4:	2300      	movs	r3, #0
 8008be6:	61bb      	str	r3, [r7, #24]
      break;
 8008be8:	e002      	b.n	8008bf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008bea:	4b07      	ldr	r3, [pc, #28]	@ (8008c08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008bec:	61bb      	str	r3, [r7, #24]
      break;
 8008bee:	bf00      	nop
  }

  return sysclockfreq;
 8008bf0:	69bb      	ldr	r3, [r7, #24]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3724      	adds	r7, #36	@ 0x24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	58024400 	.word	0x58024400
 8008c04:	03d09000 	.word	0x03d09000
 8008c08:	003d0900 	.word	0x003d0900
 8008c0c:	007a1200 	.word	0x007a1200
 8008c10:	46000000 	.word	0x46000000
 8008c14:	4c742400 	.word	0x4c742400
 8008c18:	4a742400 	.word	0x4a742400
 8008c1c:	4af42400 	.word	0x4af42400

08008c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c26:	f7ff fe81 	bl	800892c <HAL_RCC_GetSysClockFreq>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	4b10      	ldr	r3, [pc, #64]	@ (8008c70 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	0a1b      	lsrs	r3, r3, #8
 8008c32:	f003 030f 	and.w	r3, r3, #15
 8008c36:	490f      	ldr	r1, [pc, #60]	@ (8008c74 <HAL_RCC_GetHCLKFreq+0x54>)
 8008c38:	5ccb      	ldrb	r3, [r1, r3]
 8008c3a:	f003 031f 	and.w	r3, r3, #31
 8008c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c44:	4b0a      	ldr	r3, [pc, #40]	@ (8008c70 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	f003 030f 	and.w	r3, r3, #15
 8008c4c:	4a09      	ldr	r2, [pc, #36]	@ (8008c74 <HAL_RCC_GetHCLKFreq+0x54>)
 8008c4e:	5cd3      	ldrb	r3, [r2, r3]
 8008c50:	f003 031f 	and.w	r3, r3, #31
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	fa22 f303 	lsr.w	r3, r2, r3
 8008c5a:	4a07      	ldr	r2, [pc, #28]	@ (8008c78 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c5e:	4a07      	ldr	r2, [pc, #28]	@ (8008c7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008c64:	4b04      	ldr	r3, [pc, #16]	@ (8008c78 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c66:	681b      	ldr	r3, [r3, #0]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	58024400 	.word	0x58024400
 8008c74:	0800fd7c 	.word	0x0800fd7c
 8008c78:	240001b4 	.word	0x240001b4
 8008c7c:	240001b0 	.word	0x240001b0

08008c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c84:	f7ff ffcc 	bl	8008c20 <HAL_RCC_GetHCLKFreq>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	4b06      	ldr	r3, [pc, #24]	@ (8008ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	091b      	lsrs	r3, r3, #4
 8008c90:	f003 0307 	and.w	r3, r3, #7
 8008c94:	4904      	ldr	r1, [pc, #16]	@ (8008ca8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c96:	5ccb      	ldrb	r3, [r1, r3]
 8008c98:	f003 031f 	and.w	r3, r3, #31
 8008c9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	58024400 	.word	0x58024400
 8008ca8:	0800fd7c 	.word	0x0800fd7c

08008cac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cb0:	b0c6      	sub	sp, #280	@ 0x118
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008cd0:	2500      	movs	r5, #0
 8008cd2:	ea54 0305 	orrs.w	r3, r4, r5
 8008cd6:	d049      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ce2:	d02f      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008ce4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ce8:	d828      	bhi.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008cea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cee:	d01a      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008cf0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cf4:	d822      	bhi.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008cfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cfe:	d007      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d00:	e01c      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d02:	4bab      	ldr	r3, [pc, #684]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d06:	4aaa      	ldr	r2, [pc, #680]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d0e:	e01a      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d14:	3308      	adds	r3, #8
 8008d16:	2102      	movs	r1, #2
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f002 fa49 	bl	800b1b0 <RCCEx_PLL2_Config>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d24:	e00f      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d2a:	3328      	adds	r3, #40	@ 0x28
 8008d2c:	2102      	movs	r1, #2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f002 faf0 	bl	800b314 <RCCEx_PLL3_Config>
 8008d34:	4603      	mov	r3, r0
 8008d36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d3a:	e004      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d42:	e000      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10a      	bne.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d4e:	4b98      	ldr	r3, [pc, #608]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d5c:	4a94      	ldr	r2, [pc, #592]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d5e:	430b      	orrs	r3, r1
 8008d60:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d62:	e003      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d74:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008d78:	f04f 0900 	mov.w	r9, #0
 8008d7c:	ea58 0309 	orrs.w	r3, r8, r9
 8008d80:	d047      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	d82a      	bhi.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d92:	bf00      	nop
 8008d94:	08008da9 	.word	0x08008da9
 8008d98:	08008db7 	.word	0x08008db7
 8008d9c:	08008dcd 	.word	0x08008dcd
 8008da0:	08008deb 	.word	0x08008deb
 8008da4:	08008deb 	.word	0x08008deb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008da8:	4b81      	ldr	r3, [pc, #516]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dac:	4a80      	ldr	r2, [pc, #512]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008db2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008db4:	e01a      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dba:	3308      	adds	r3, #8
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f002 f9f6 	bl	800b1b0 <RCCEx_PLL2_Config>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008dca:	e00f      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dd0:	3328      	adds	r3, #40	@ 0x28
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f002 fa9d 	bl	800b314 <RCCEx_PLL3_Config>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008de0:	e004      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008de8:	e000      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10a      	bne.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008df4:	4b6e      	ldr	r3, [pc, #440]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008df8:	f023 0107 	bic.w	r1, r3, #7
 8008dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e02:	4a6b      	ldr	r2, [pc, #428]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e04:	430b      	orrs	r3, r1
 8008e06:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e08:	e003      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008e1e:	f04f 0b00 	mov.w	fp, #0
 8008e22:	ea5a 030b 	orrs.w	r3, sl, fp
 8008e26:	d05b      	beq.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e30:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008e34:	d03b      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008e36:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008e3a:	d834      	bhi.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e40:	d037      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008e42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e46:	d82e      	bhi.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e48:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e4c:	d033      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008e4e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e52:	d828      	bhi.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e58:	d01a      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008e5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e5e:	d822      	bhi.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008e64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e68:	d007      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008e6a:	e01c      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e6c:	4b50      	ldr	r3, [pc, #320]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e70:	4a4f      	ldr	r2, [pc, #316]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e78:	e01e      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e7e:	3308      	adds	r3, #8
 8008e80:	2100      	movs	r1, #0
 8008e82:	4618      	mov	r0, r3
 8008e84:	f002 f994 	bl	800b1b0 <RCCEx_PLL2_Config>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e8e:	e013      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e94:	3328      	adds	r3, #40	@ 0x28
 8008e96:	2100      	movs	r1, #0
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f002 fa3b 	bl	800b314 <RCCEx_PLL3_Config>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ea4:	e008      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008eac:	e004      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008eae:	bf00      	nop
 8008eb0:	e002      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008eb2:	bf00      	nop
 8008eb4:	e000      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10b      	bne.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008ec0:	4b3b      	ldr	r3, [pc, #236]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ec4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ecc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ed0:	4a37      	ldr	r2, [pc, #220]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ed2:	430b      	orrs	r3, r1
 8008ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ed6:	e003      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ed8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008edc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008eec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008ef6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008efa:	460b      	mov	r3, r1
 8008efc:	4313      	orrs	r3, r2
 8008efe:	d05d      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008f08:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008f0c:	d03b      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008f0e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008f12:	d834      	bhi.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f18:	d037      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008f1a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f1e:	d82e      	bhi.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f24:	d033      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008f26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f2a:	d828      	bhi.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f30:	d01a      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008f32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f36:	d822      	bhi.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d003      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f40:	d007      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008f42:	e01c      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f44:	4b1a      	ldr	r3, [pc, #104]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f48:	4a19      	ldr	r2, [pc, #100]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f50:	e01e      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f56:	3308      	adds	r3, #8
 8008f58:	2100      	movs	r1, #0
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f002 f928 	bl	800b1b0 <RCCEx_PLL2_Config>
 8008f60:	4603      	mov	r3, r0
 8008f62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f66:	e013      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f6c:	3328      	adds	r3, #40	@ 0x28
 8008f6e:	2100      	movs	r1, #0
 8008f70:	4618      	mov	r0, r3
 8008f72:	f002 f9cf 	bl	800b314 <RCCEx_PLL3_Config>
 8008f76:	4603      	mov	r3, r0
 8008f78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f7c:	e008      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f84:	e004      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f86:	bf00      	nop
 8008f88:	e002      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f8a:	bf00      	nop
 8008f8c:	e000      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10d      	bne.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008f98:	4b05      	ldr	r3, [pc, #20]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f9c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fa4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008fa8:	4a01      	ldr	r2, [pc, #4]	@ (8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008faa:	430b      	orrs	r3, r1
 8008fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8008fae:	e005      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008fb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008fc8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008fd2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	d03a      	beq.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fe2:	2b30      	cmp	r3, #48	@ 0x30
 8008fe4:	d01f      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008fe6:	2b30      	cmp	r3, #48	@ 0x30
 8008fe8:	d819      	bhi.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008fea:	2b20      	cmp	r3, #32
 8008fec:	d00c      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008fee:	2b20      	cmp	r3, #32
 8008ff0:	d815      	bhi.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d019      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008ff6:	2b10      	cmp	r3, #16
 8008ff8:	d111      	bne.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ffa:	4baa      	ldr	r3, [pc, #680]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffe:	4aa9      	ldr	r2, [pc, #676]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009004:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009006:	e011      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800900c:	3308      	adds	r3, #8
 800900e:	2102      	movs	r1, #2
 8009010:	4618      	mov	r0, r3
 8009012:	f002 f8cd 	bl	800b1b0 <RCCEx_PLL2_Config>
 8009016:	4603      	mov	r3, r0
 8009018:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800901c:	e006      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009024:	e002      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009026:	bf00      	nop
 8009028:	e000      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800902a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800902c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10a      	bne.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009034:	4b9b      	ldr	r3, [pc, #620]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009038:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800903c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009042:	4a98      	ldr	r2, [pc, #608]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009044:	430b      	orrs	r3, r1
 8009046:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009048:	e003      	b.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800904a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800904e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800905e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009062:	2300      	movs	r3, #0
 8009064:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009068:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800906c:	460b      	mov	r3, r1
 800906e:	4313      	orrs	r3, r2
 8009070:	d051      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009072:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009078:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800907c:	d035      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800907e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009082:	d82e      	bhi.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009084:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009088:	d031      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x442>
 800908a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800908e:	d828      	bhi.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009094:	d01a      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800909a:	d822      	bhi.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800909c:	2b00      	cmp	r3, #0
 800909e:	d003      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80090a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090a4:	d007      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80090a6:	e01c      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090a8:	4b7e      	ldr	r3, [pc, #504]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ac:	4a7d      	ldr	r2, [pc, #500]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090b4:	e01c      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ba:	3308      	adds	r3, #8
 80090bc:	2100      	movs	r1, #0
 80090be:	4618      	mov	r0, r3
 80090c0:	f002 f876 	bl	800b1b0 <RCCEx_PLL2_Config>
 80090c4:	4603      	mov	r3, r0
 80090c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090ca:	e011      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090d0:	3328      	adds	r3, #40	@ 0x28
 80090d2:	2100      	movs	r1, #0
 80090d4:	4618      	mov	r0, r3
 80090d6:	f002 f91d 	bl	800b314 <RCCEx_PLL3_Config>
 80090da:	4603      	mov	r3, r0
 80090dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090e0:	e006      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80090e8:	e002      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80090ea:	bf00      	nop
 80090ec:	e000      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80090ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10a      	bne.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80090f8:	4b6a      	ldr	r3, [pc, #424]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009106:	4a67      	ldr	r2, [pc, #412]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009108:	430b      	orrs	r3, r1
 800910a:	6513      	str	r3, [r2, #80]	@ 0x50
 800910c:	e003      	b.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800910e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009112:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009122:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009126:	2300      	movs	r3, #0
 8009128:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800912c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009130:	460b      	mov	r3, r1
 8009132:	4313      	orrs	r3, r2
 8009134:	d053      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800913a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800913c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009140:	d033      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009142:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009146:	d82c      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009148:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800914c:	d02f      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x502>
 800914e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009152:	d826      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009154:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009158:	d02b      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800915a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800915e:	d820      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009160:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009164:	d012      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009166:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800916a:	d81a      	bhi.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800916c:	2b00      	cmp	r3, #0
 800916e:	d022      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009174:	d115      	bne.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800917a:	3308      	adds	r3, #8
 800917c:	2101      	movs	r1, #1
 800917e:	4618      	mov	r0, r3
 8009180:	f002 f816 	bl	800b1b0 <RCCEx_PLL2_Config>
 8009184:	4603      	mov	r3, r0
 8009186:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800918a:	e015      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800918c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009190:	3328      	adds	r3, #40	@ 0x28
 8009192:	2101      	movs	r1, #1
 8009194:	4618      	mov	r0, r3
 8009196:	f002 f8bd 	bl	800b314 <RCCEx_PLL3_Config>
 800919a:	4603      	mov	r3, r0
 800919c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80091a0:	e00a      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80091a8:	e006      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091aa:	bf00      	nop
 80091ac:	e004      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091ae:	bf00      	nop
 80091b0:	e002      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091b2:	bf00      	nop
 80091b4:	e000      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10a      	bne.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80091c0:	4b38      	ldr	r3, [pc, #224]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091c4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80091c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091ce:	4a35      	ldr	r2, [pc, #212]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091d0:	430b      	orrs	r3, r1
 80091d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80091d4:	e003      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80091de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80091ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80091ee:	2300      	movs	r3, #0
 80091f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80091f4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80091f8:	460b      	mov	r3, r1
 80091fa:	4313      	orrs	r3, r2
 80091fc:	d058      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80091fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009202:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009206:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800920a:	d033      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800920c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009210:	d82c      	bhi.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009216:	d02f      	beq.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800921c:	d826      	bhi.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800921e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009222:	d02b      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009224:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009228:	d820      	bhi.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800922a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800922e:	d012      	beq.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009234:	d81a      	bhi.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009236:	2b00      	cmp	r3, #0
 8009238:	d022      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800923a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800923e:	d115      	bne.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009244:	3308      	adds	r3, #8
 8009246:	2101      	movs	r1, #1
 8009248:	4618      	mov	r0, r3
 800924a:	f001 ffb1 	bl	800b1b0 <RCCEx_PLL2_Config>
 800924e:	4603      	mov	r3, r0
 8009250:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009254:	e015      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800925a:	3328      	adds	r3, #40	@ 0x28
 800925c:	2101      	movs	r1, #1
 800925e:	4618      	mov	r0, r3
 8009260:	f002 f858 	bl	800b314 <RCCEx_PLL3_Config>
 8009264:	4603      	mov	r3, r0
 8009266:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800926a:	e00a      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009272:	e006      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009274:	bf00      	nop
 8009276:	e004      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009278:	bf00      	nop
 800927a:	e002      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800927c:	bf00      	nop
 800927e:	e000      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009282:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10e      	bne.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800928a:	4b06      	ldr	r3, [pc, #24]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800928c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800928e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009296:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800929a:	4a02      	ldr	r2, [pc, #8]	@ (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800929c:	430b      	orrs	r3, r1
 800929e:	6593      	str	r3, [r2, #88]	@ 0x58
 80092a0:	e006      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80092a2:	bf00      	nop
 80092a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80092b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80092bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80092c0:	2300      	movs	r3, #0
 80092c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80092c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80092ca:	460b      	mov	r3, r1
 80092cc:	4313      	orrs	r3, r2
 80092ce:	d037      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80092d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092da:	d00e      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80092dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092e0:	d816      	bhi.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d018      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80092e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092ea:	d111      	bne.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092ec:	4bc4      	ldr	r3, [pc, #784]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f0:	4ac3      	ldr	r2, [pc, #780]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80092f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80092f8:	e00f      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092fe:	3308      	adds	r3, #8
 8009300:	2101      	movs	r1, #1
 8009302:	4618      	mov	r0, r3
 8009304:	f001 ff54 	bl	800b1b0 <RCCEx_PLL2_Config>
 8009308:	4603      	mov	r3, r0
 800930a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800930e:	e004      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009316:	e000      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800931a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10a      	bne.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009322:	4bb7      	ldr	r3, [pc, #732]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009326:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800932a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800932e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009330:	4ab3      	ldr	r2, [pc, #716]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009332:	430b      	orrs	r3, r1
 8009334:	6513      	str	r3, [r2, #80]	@ 0x50
 8009336:	e003      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009338:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800933c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009348:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800934c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009350:	2300      	movs	r3, #0
 8009352:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009356:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800935a:	460b      	mov	r3, r1
 800935c:	4313      	orrs	r3, r2
 800935e:	d039      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009366:	2b03      	cmp	r3, #3
 8009368:	d81c      	bhi.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800936a:	a201      	add	r2, pc, #4	@ (adr r2, 8009370 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800936c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009370:	080093ad 	.word	0x080093ad
 8009374:	08009381 	.word	0x08009381
 8009378:	0800938f 	.word	0x0800938f
 800937c:	080093ad 	.word	0x080093ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009380:	4b9f      	ldr	r3, [pc, #636]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009384:	4a9e      	ldr	r2, [pc, #632]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009386:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800938a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800938c:	e00f      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800938e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009392:	3308      	adds	r3, #8
 8009394:	2102      	movs	r1, #2
 8009396:	4618      	mov	r0, r3
 8009398:	f001 ff0a 	bl	800b1b0 <RCCEx_PLL2_Config>
 800939c:	4603      	mov	r3, r0
 800939e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80093a2:	e004      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80093aa:	e000      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80093ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10a      	bne.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80093b6:	4b92      	ldr	r3, [pc, #584]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093ba:	f023 0103 	bic.w	r1, r3, #3
 80093be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093c4:	4a8e      	ldr	r2, [pc, #568]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093c6:	430b      	orrs	r3, r1
 80093c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80093ca:	e003      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093dc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80093e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80093e4:	2300      	movs	r3, #0
 80093e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80093ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4313      	orrs	r3, r2
 80093f2:	f000 8099 	beq.w	8009528 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093f6:	4b83      	ldr	r3, [pc, #524]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a82      	ldr	r2, [pc, #520]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80093fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009400:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009402:	f7f9 f9f1 	bl	80027e8 <HAL_GetTick>
 8009406:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800940a:	e00b      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800940c:	f7f9 f9ec 	bl	80027e8 <HAL_GetTick>
 8009410:	4602      	mov	r2, r0
 8009412:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	2b64      	cmp	r3, #100	@ 0x64
 800941a:	d903      	bls.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800941c:	2303      	movs	r3, #3
 800941e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009422:	e005      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009424:	4b77      	ldr	r3, [pc, #476]	@ (8009604 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800942c:	2b00      	cmp	r3, #0
 800942e:	d0ed      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009430:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009434:	2b00      	cmp	r3, #0
 8009436:	d173      	bne.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009438:	4b71      	ldr	r3, [pc, #452]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800943a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800943c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009440:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009444:	4053      	eors	r3, r2
 8009446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800944a:	2b00      	cmp	r3, #0
 800944c:	d015      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800944e:	4b6c      	ldr	r3, [pc, #432]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009452:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009456:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800945a:	4b69      	ldr	r3, [pc, #420]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800945c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800945e:	4a68      	ldr	r2, [pc, #416]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009464:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009466:	4b66      	ldr	r3, [pc, #408]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800946a:	4a65      	ldr	r2, [pc, #404]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800946c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009470:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009472:	4a63      	ldr	r2, [pc, #396]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009478:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800947a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800947e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009486:	d118      	bne.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009488:	f7f9 f9ae 	bl	80027e8 <HAL_GetTick>
 800948c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009490:	e00d      	b.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009492:	f7f9 f9a9 	bl	80027e8 <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800949c:	1ad2      	subs	r2, r2, r3
 800949e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d903      	bls.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80094a6:	2303      	movs	r3, #3
 80094a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80094ac:	e005      	b.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094ae:	4b54      	ldr	r3, [pc, #336]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094b2:	f003 0302 	and.w	r3, r3, #2
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d0eb      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80094ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d129      	bne.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094d2:	d10e      	bne.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80094d4:	4b4a      	ldr	r3, [pc, #296]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80094dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094e4:	091a      	lsrs	r2, r3, #4
 80094e6:	4b48      	ldr	r3, [pc, #288]	@ (8009608 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80094e8:	4013      	ands	r3, r2
 80094ea:	4a45      	ldr	r2, [pc, #276]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094ec:	430b      	orrs	r3, r1
 80094ee:	6113      	str	r3, [r2, #16]
 80094f0:	e005      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x852>
 80094f2:	4b43      	ldr	r3, [pc, #268]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	4a42      	ldr	r2, [pc, #264]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80094fc:	6113      	str	r3, [r2, #16]
 80094fe:	4b40      	ldr	r3, [pc, #256]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009500:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009506:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800950a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800950e:	4a3c      	ldr	r2, [pc, #240]	@ (8009600 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009510:	430b      	orrs	r3, r1
 8009512:	6713      	str	r3, [r2, #112]	@ 0x70
 8009514:	e008      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009516:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800951a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800951e:	e003      	b.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009520:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009524:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009530:	f002 0301 	and.w	r3, r2, #1
 8009534:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009538:	2300      	movs	r3, #0
 800953a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800953e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009542:	460b      	mov	r3, r1
 8009544:	4313      	orrs	r3, r2
 8009546:	f000 808f 	beq.w	8009668 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800954a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800954e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009550:	2b28      	cmp	r3, #40	@ 0x28
 8009552:	d871      	bhi.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009554:	a201      	add	r2, pc, #4	@ (adr r2, 800955c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955a:	bf00      	nop
 800955c:	08009641 	.word	0x08009641
 8009560:	08009639 	.word	0x08009639
 8009564:	08009639 	.word	0x08009639
 8009568:	08009639 	.word	0x08009639
 800956c:	08009639 	.word	0x08009639
 8009570:	08009639 	.word	0x08009639
 8009574:	08009639 	.word	0x08009639
 8009578:	08009639 	.word	0x08009639
 800957c:	0800960d 	.word	0x0800960d
 8009580:	08009639 	.word	0x08009639
 8009584:	08009639 	.word	0x08009639
 8009588:	08009639 	.word	0x08009639
 800958c:	08009639 	.word	0x08009639
 8009590:	08009639 	.word	0x08009639
 8009594:	08009639 	.word	0x08009639
 8009598:	08009639 	.word	0x08009639
 800959c:	08009623 	.word	0x08009623
 80095a0:	08009639 	.word	0x08009639
 80095a4:	08009639 	.word	0x08009639
 80095a8:	08009639 	.word	0x08009639
 80095ac:	08009639 	.word	0x08009639
 80095b0:	08009639 	.word	0x08009639
 80095b4:	08009639 	.word	0x08009639
 80095b8:	08009639 	.word	0x08009639
 80095bc:	08009641 	.word	0x08009641
 80095c0:	08009639 	.word	0x08009639
 80095c4:	08009639 	.word	0x08009639
 80095c8:	08009639 	.word	0x08009639
 80095cc:	08009639 	.word	0x08009639
 80095d0:	08009639 	.word	0x08009639
 80095d4:	08009639 	.word	0x08009639
 80095d8:	08009639 	.word	0x08009639
 80095dc:	08009641 	.word	0x08009641
 80095e0:	08009639 	.word	0x08009639
 80095e4:	08009639 	.word	0x08009639
 80095e8:	08009639 	.word	0x08009639
 80095ec:	08009639 	.word	0x08009639
 80095f0:	08009639 	.word	0x08009639
 80095f4:	08009639 	.word	0x08009639
 80095f8:	08009639 	.word	0x08009639
 80095fc:	08009641 	.word	0x08009641
 8009600:	58024400 	.word	0x58024400
 8009604:	58024800 	.word	0x58024800
 8009608:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800960c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009610:	3308      	adds	r3, #8
 8009612:	2101      	movs	r1, #1
 8009614:	4618      	mov	r0, r3
 8009616:	f001 fdcb 	bl	800b1b0 <RCCEx_PLL2_Config>
 800961a:	4603      	mov	r3, r0
 800961c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009620:	e00f      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009626:	3328      	adds	r3, #40	@ 0x28
 8009628:	2101      	movs	r1, #1
 800962a:	4618      	mov	r0, r3
 800962c:	f001 fe72 	bl	800b314 <RCCEx_PLL3_Config>
 8009630:	4603      	mov	r3, r0
 8009632:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009636:	e004      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800963e:	e000      	b.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009642:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10a      	bne.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800964a:	4bbf      	ldr	r3, [pc, #764]	@ (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800964c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800964e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009656:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009658:	4abb      	ldr	r2, [pc, #748]	@ (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800965a:	430b      	orrs	r3, r1
 800965c:	6553      	str	r3, [r2, #84]	@ 0x54
 800965e:	e003      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009660:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009664:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800966c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009670:	f002 0302 	and.w	r3, r2, #2
 8009674:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009678:	2300      	movs	r3, #0
 800967a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800967e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009682:	460b      	mov	r3, r1
 8009684:	4313      	orrs	r3, r2
 8009686:	d041      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800968c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800968e:	2b05      	cmp	r3, #5
 8009690:	d824      	bhi.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009692:	a201      	add	r2, pc, #4	@ (adr r2, 8009698 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009698:	080096e5 	.word	0x080096e5
 800969c:	080096b1 	.word	0x080096b1
 80096a0:	080096c7 	.word	0x080096c7
 80096a4:	080096e5 	.word	0x080096e5
 80096a8:	080096e5 	.word	0x080096e5
 80096ac:	080096e5 	.word	0x080096e5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096b4:	3308      	adds	r3, #8
 80096b6:	2101      	movs	r1, #1
 80096b8:	4618      	mov	r0, r3
 80096ba:	f001 fd79 	bl	800b1b0 <RCCEx_PLL2_Config>
 80096be:	4603      	mov	r3, r0
 80096c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80096c4:	e00f      	b.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ca:	3328      	adds	r3, #40	@ 0x28
 80096cc:	2101      	movs	r1, #1
 80096ce:	4618      	mov	r0, r3
 80096d0:	f001 fe20 	bl	800b314 <RCCEx_PLL3_Config>
 80096d4:	4603      	mov	r3, r0
 80096d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80096da:	e004      	b.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80096e2:	e000      	b.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80096e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10a      	bne.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80096ee:	4b96      	ldr	r3, [pc, #600]	@ (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80096f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096f2:	f023 0107 	bic.w	r1, r3, #7
 80096f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096fc:	4a92      	ldr	r2, [pc, #584]	@ (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80096fe:	430b      	orrs	r3, r1
 8009700:	6553      	str	r3, [r2, #84]	@ 0x54
 8009702:	e003      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009704:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009708:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800970c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009714:	f002 0304 	and.w	r3, r2, #4
 8009718:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800971c:	2300      	movs	r3, #0
 800971e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009722:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009726:	460b      	mov	r3, r1
 8009728:	4313      	orrs	r3, r2
 800972a:	d044      	beq.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800972c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009734:	2b05      	cmp	r3, #5
 8009736:	d825      	bhi.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009738:	a201      	add	r2, pc, #4	@ (adr r2, 8009740 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800973a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973e:	bf00      	nop
 8009740:	0800978d 	.word	0x0800978d
 8009744:	08009759 	.word	0x08009759
 8009748:	0800976f 	.word	0x0800976f
 800974c:	0800978d 	.word	0x0800978d
 8009750:	0800978d 	.word	0x0800978d
 8009754:	0800978d 	.word	0x0800978d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800975c:	3308      	adds	r3, #8
 800975e:	2101      	movs	r1, #1
 8009760:	4618      	mov	r0, r3
 8009762:	f001 fd25 	bl	800b1b0 <RCCEx_PLL2_Config>
 8009766:	4603      	mov	r3, r0
 8009768:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800976c:	e00f      	b.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800976e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009772:	3328      	adds	r3, #40	@ 0x28
 8009774:	2101      	movs	r1, #1
 8009776:	4618      	mov	r0, r3
 8009778:	f001 fdcc 	bl	800b314 <RCCEx_PLL3_Config>
 800977c:	4603      	mov	r3, r0
 800977e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009782:	e004      	b.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800978a:	e000      	b.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800978c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800978e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10b      	bne.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009796:	4b6c      	ldr	r3, [pc, #432]	@ (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800979a:	f023 0107 	bic.w	r1, r3, #7
 800979e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097a6:	4a68      	ldr	r2, [pc, #416]	@ (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80097a8:	430b      	orrs	r3, r1
 80097aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80097ac:	e003      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80097b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f002 0320 	and.w	r3, r2, #32
 80097c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80097c6:	2300      	movs	r3, #0
 80097c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80097cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4313      	orrs	r3, r2
 80097d4:	d055      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80097d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097e2:	d033      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80097e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097e8:	d82c      	bhi.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ee:	d02f      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80097f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097f4:	d826      	bhi.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80097f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80097fa:	d02b      	beq.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80097fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009800:	d820      	bhi.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009802:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009806:	d012      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009808:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800980c:	d81a      	bhi.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800980e:	2b00      	cmp	r3, #0
 8009810:	d022      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009812:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009816:	d115      	bne.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800981c:	3308      	adds	r3, #8
 800981e:	2100      	movs	r1, #0
 8009820:	4618      	mov	r0, r3
 8009822:	f001 fcc5 	bl	800b1b0 <RCCEx_PLL2_Config>
 8009826:	4603      	mov	r3, r0
 8009828:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800982c:	e015      	b.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800982e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009832:	3328      	adds	r3, #40	@ 0x28
 8009834:	2102      	movs	r1, #2
 8009836:	4618      	mov	r0, r3
 8009838:	f001 fd6c 	bl	800b314 <RCCEx_PLL3_Config>
 800983c:	4603      	mov	r3, r0
 800983e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009842:	e00a      	b.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800984a:	e006      	b.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800984c:	bf00      	nop
 800984e:	e004      	b.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009850:	bf00      	nop
 8009852:	e002      	b.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009854:	bf00      	nop
 8009856:	e000      	b.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800985a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10b      	bne.n	800987a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009862:	4b39      	ldr	r3, [pc, #228]	@ (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009866:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800986a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800986e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009872:	4a35      	ldr	r2, [pc, #212]	@ (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009874:	430b      	orrs	r3, r1
 8009876:	6553      	str	r3, [r2, #84]	@ 0x54
 8009878:	e003      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800987a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800987e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800988e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009892:	2300      	movs	r3, #0
 8009894:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009898:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800989c:	460b      	mov	r3, r1
 800989e:	4313      	orrs	r3, r2
 80098a0:	d058      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80098a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098aa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80098ae:	d033      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80098b0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80098b4:	d82c      	bhi.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098ba:	d02f      	beq.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80098bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098c0:	d826      	bhi.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098c6:	d02b      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80098c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098cc:	d820      	bhi.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098d2:	d012      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80098d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098d8:	d81a      	bhi.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d022      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80098de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098e2:	d115      	bne.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e8:	3308      	adds	r3, #8
 80098ea:	2100      	movs	r1, #0
 80098ec:	4618      	mov	r0, r3
 80098ee:	f001 fc5f 	bl	800b1b0 <RCCEx_PLL2_Config>
 80098f2:	4603      	mov	r3, r0
 80098f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80098f8:	e015      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098fe:	3328      	adds	r3, #40	@ 0x28
 8009900:	2102      	movs	r1, #2
 8009902:	4618      	mov	r0, r3
 8009904:	f001 fd06 	bl	800b314 <RCCEx_PLL3_Config>
 8009908:	4603      	mov	r3, r0
 800990a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800990e:	e00a      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009916:	e006      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009918:	bf00      	nop
 800991a:	e004      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800991c:	bf00      	nop
 800991e:	e002      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009920:	bf00      	nop
 8009922:	e000      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009926:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10e      	bne.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800992e:	4b06      	ldr	r3, [pc, #24]	@ (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009932:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800993a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800993e:	4a02      	ldr	r2, [pc, #8]	@ (8009948 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009940:	430b      	orrs	r3, r1
 8009942:	6593      	str	r3, [r2, #88]	@ 0x58
 8009944:	e006      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009946:	bf00      	nop
 8009948:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800994c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009950:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009960:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009964:	2300      	movs	r3, #0
 8009966:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800996a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800996e:	460b      	mov	r3, r1
 8009970:	4313      	orrs	r3, r2
 8009972:	d055      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009978:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800997c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009980:	d033      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009982:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009986:	d82c      	bhi.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009988:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800998c:	d02f      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800998e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009992:	d826      	bhi.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009994:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009998:	d02b      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800999a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800999e:	d820      	bhi.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099a4:	d012      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80099a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099aa:	d81a      	bhi.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d022      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80099b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099b4:	d115      	bne.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ba:	3308      	adds	r3, #8
 80099bc:	2100      	movs	r1, #0
 80099be:	4618      	mov	r0, r3
 80099c0:	f001 fbf6 	bl	800b1b0 <RCCEx_PLL2_Config>
 80099c4:	4603      	mov	r3, r0
 80099c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80099ca:	e015      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099d0:	3328      	adds	r3, #40	@ 0x28
 80099d2:	2102      	movs	r1, #2
 80099d4:	4618      	mov	r0, r3
 80099d6:	f001 fc9d 	bl	800b314 <RCCEx_PLL3_Config>
 80099da:	4603      	mov	r3, r0
 80099dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80099e0:	e00a      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80099e8:	e006      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099ea:	bf00      	nop
 80099ec:	e004      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099ee:	bf00      	nop
 80099f0:	e002      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099f2:	bf00      	nop
 80099f4:	e000      	b.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80099f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10b      	bne.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009a00:	4ba0      	ldr	r3, [pc, #640]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a04:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a10:	4a9c      	ldr	r2, [pc, #624]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a12:	430b      	orrs	r3, r1
 8009a14:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a16:	e003      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a28:	f002 0308 	and.w	r3, r2, #8
 8009a2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a30:	2300      	movs	r3, #0
 8009a32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a36:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	d01e      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a4c:	d10c      	bne.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a52:	3328      	adds	r3, #40	@ 0x28
 8009a54:	2102      	movs	r1, #2
 8009a56:	4618      	mov	r0, r3
 8009a58:	f001 fc5c 	bl	800b314 <RCCEx_PLL3_Config>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d002      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009a68:	4b86      	ldr	r3, [pc, #536]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a6c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a78:	4a82      	ldr	r2, [pc, #520]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a7a:	430b      	orrs	r3, r1
 8009a7c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	f002 0310 	and.w	r3, r2, #16
 8009a8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a94:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009a98:	460b      	mov	r3, r1
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	d01e      	beq.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009aaa:	d10c      	bne.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab0:	3328      	adds	r3, #40	@ 0x28
 8009ab2:	2102      	movs	r1, #2
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f001 fc2d 	bl	800b314 <RCCEx_PLL3_Config>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d002      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ad6:	4a6b      	ldr	r2, [pc, #428]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ad8:	430b      	orrs	r3, r1
 8009ada:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009ae8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009aea:	2300      	movs	r3, #0
 8009aec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009aee:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009af2:	460b      	mov	r3, r1
 8009af4:	4313      	orrs	r3, r2
 8009af6:	d03e      	beq.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009afc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b04:	d022      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009b06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b0a:	d81b      	bhi.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d003      	beq.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b14:	d00b      	beq.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009b16:	e015      	b.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b1c:	3308      	adds	r3, #8
 8009b1e:	2100      	movs	r1, #0
 8009b20:	4618      	mov	r0, r3
 8009b22:	f001 fb45 	bl	800b1b0 <RCCEx_PLL2_Config>
 8009b26:	4603      	mov	r3, r0
 8009b28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b2c:	e00f      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b32:	3328      	adds	r3, #40	@ 0x28
 8009b34:	2102      	movs	r1, #2
 8009b36:	4618      	mov	r0, r3
 8009b38:	f001 fbec 	bl	800b314 <RCCEx_PLL3_Config>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b42:	e004      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b4a:	e000      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10b      	bne.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b56:	4b4b      	ldr	r3, [pc, #300]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b5a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b66:	4a47      	ldr	r2, [pc, #284]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b68:	430b      	orrs	r3, r1
 8009b6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b6c:	e003      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009b82:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b84:	2300      	movs	r3, #0
 8009b86:	677b      	str	r3, [r7, #116]	@ 0x74
 8009b88:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	d03b      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009b9e:	d01f      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009ba0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ba4:	d818      	bhi.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009ba6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009baa:	d003      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009bac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bb0:	d007      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009bb2:	e011      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bb4:	4b33      	ldr	r3, [pc, #204]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb8:	4a32      	ldr	r2, [pc, #200]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009bc0:	e00f      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bc6:	3328      	adds	r3, #40	@ 0x28
 8009bc8:	2101      	movs	r1, #1
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f001 fba2 	bl	800b314 <RCCEx_PLL3_Config>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009bd6:	e004      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009bde:	e000      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009be2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10b      	bne.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009bea:	4b26      	ldr	r3, [pc, #152]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bfa:	4a22      	ldr	r2, [pc, #136]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bfc:	430b      	orrs	r3, r1
 8009bfe:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c00:	e003      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c12:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009c16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c18:	2300      	movs	r3, #0
 8009c1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c1c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009c20:	460b      	mov	r3, r1
 8009c22:	4313      	orrs	r3, r2
 8009c24:	d034      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d003      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c34:	d007      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009c36:	e011      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c38:	4b12      	ldr	r3, [pc, #72]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c3c:	4a11      	ldr	r2, [pc, #68]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c44:	e00e      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c4a:	3308      	adds	r3, #8
 8009c4c:	2102      	movs	r1, #2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f001 faae 	bl	800b1b0 <RCCEx_PLL2_Config>
 8009c54:	4603      	mov	r3, r0
 8009c56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c5a:	e003      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10d      	bne.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009c6c:	4b05      	ldr	r3, [pc, #20]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c70:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c7a:	4a02      	ldr	r2, [pc, #8]	@ (8009c84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c7c:	430b      	orrs	r3, r1
 8009c7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009c80:	e006      	b.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009c82:	bf00      	nop
 8009c84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009c9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ca2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	d00c      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cb0:	3328      	adds	r3, #40	@ 0x28
 8009cb2:	2102      	movs	r1, #2
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f001 fb2d 	bl	800b314 <RCCEx_PLL3_Config>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d002      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009cd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cd8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	d036      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ce6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ce8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cec:	d018      	beq.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009cee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cf2:	d811      	bhi.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cf8:	d014      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009cfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cfe:	d80b      	bhi.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d011      	beq.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d08:	d106      	bne.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d0a:	4bb7      	ldr	r3, [pc, #732]	@ (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d0e:	4ab6      	ldr	r2, [pc, #728]	@ (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009d16:	e008      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d1e:	e004      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d20:	bf00      	nop
 8009d22:	e002      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d24:	bf00      	nop
 8009d26:	e000      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d10a      	bne.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d32:	4bad      	ldr	r3, [pc, #692]	@ (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d40:	4aa9      	ldr	r2, [pc, #676]	@ (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d42:	430b      	orrs	r3, r1
 8009d44:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d46:	e003      	b.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d58:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009d5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d5e:	2300      	movs	r3, #0
 8009d60:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009d66:	460b      	mov	r3, r1
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	d009      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009d6c:	4b9e      	ldr	r3, [pc, #632]	@ (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009d7a:	4a9b      	ldr	r2, [pc, #620]	@ (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d7c:	430b      	orrs	r3, r1
 8009d7e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d88:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d8e:	2300      	movs	r3, #0
 8009d90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d92:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009d96:	460b      	mov	r3, r1
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	d009      	beq.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009d9c:	4b92      	ldr	r3, [pc, #584]	@ (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009da0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009da8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009daa:	4a8f      	ldr	r2, [pc, #572]	@ (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dac:	430b      	orrs	r3, r1
 8009dae:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009dbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dc2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	d00e      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009dcc:	4b86      	ldr	r3, [pc, #536]	@ (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	4a85      	ldr	r2, [pc, #532]	@ (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dd2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009dd6:	6113      	str	r3, [r2, #16]
 8009dd8:	4b83      	ldr	r3, [pc, #524]	@ (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dda:	6919      	ldr	r1, [r3, #16]
 8009ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009de4:	4a80      	ldr	r2, [pc, #512]	@ (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009de6:	430b      	orrs	r3, r1
 8009de8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009df6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009df8:	2300      	movs	r3, #0
 8009dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dfc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009e00:	460b      	mov	r3, r1
 8009e02:	4313      	orrs	r3, r2
 8009e04:	d009      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009e06:	4b78      	ldr	r3, [pc, #480]	@ (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e0a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e14:	4a74      	ldr	r2, [pc, #464]	@ (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e16:	430b      	orrs	r3, r1
 8009e18:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e22:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009e26:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e28:	2300      	movs	r3, #0
 8009e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e2c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009e30:	460b      	mov	r3, r1
 8009e32:	4313      	orrs	r3, r2
 8009e34:	d00a      	beq.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e36:	4b6c      	ldr	r3, [pc, #432]	@ (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e3a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e46:	4a68      	ldr	r2, [pc, #416]	@ (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e48:	430b      	orrs	r3, r1
 8009e4a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e54:	2100      	movs	r1, #0
 8009e56:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009e58:	f003 0301 	and.w	r3, r3, #1
 8009e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e5e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009e62:	460b      	mov	r3, r1
 8009e64:	4313      	orrs	r3, r2
 8009e66:	d011      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e6c:	3308      	adds	r3, #8
 8009e6e:	2100      	movs	r1, #0
 8009e70:	4618      	mov	r0, r3
 8009e72:	f001 f99d 	bl	800b1b0 <RCCEx_PLL2_Config>
 8009e76:	4603      	mov	r3, r0
 8009e78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009e7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d003      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	2100      	movs	r1, #0
 8009e96:	6239      	str	r1, [r7, #32]
 8009e98:	f003 0302 	and.w	r3, r3, #2
 8009e9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e9e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	d011      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eac:	3308      	adds	r3, #8
 8009eae:	2101      	movs	r1, #1
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f001 f97d 	bl	800b1b0 <RCCEx_PLL2_Config>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009ebc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d003      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ec4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ec8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	61b9      	str	r1, [r7, #24]
 8009ed8:	f003 0304 	and.w	r3, r3, #4
 8009edc:	61fb      	str	r3, [r7, #28]
 8009ede:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	d011      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eec:	3308      	adds	r3, #8
 8009eee:	2102      	movs	r1, #2
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f001 f95d 	bl	800b1b0 <RCCEx_PLL2_Config>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009efc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d003      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f14:	2100      	movs	r1, #0
 8009f16:	6139      	str	r1, [r7, #16]
 8009f18:	f003 0308 	and.w	r3, r3, #8
 8009f1c:	617b      	str	r3, [r7, #20]
 8009f1e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009f22:	460b      	mov	r3, r1
 8009f24:	4313      	orrs	r3, r2
 8009f26:	d011      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f2c:	3328      	adds	r3, #40	@ 0x28
 8009f2e:	2100      	movs	r1, #0
 8009f30:	4618      	mov	r0, r3
 8009f32:	f001 f9ef 	bl	800b314 <RCCEx_PLL3_Config>
 8009f36:	4603      	mov	r3, r0
 8009f38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8009f3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d003      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f54:	2100      	movs	r1, #0
 8009f56:	60b9      	str	r1, [r7, #8]
 8009f58:	f003 0310 	and.w	r3, r3, #16
 8009f5c:	60fb      	str	r3, [r7, #12]
 8009f5e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009f62:	460b      	mov	r3, r1
 8009f64:	4313      	orrs	r3, r2
 8009f66:	d011      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f6c:	3328      	adds	r3, #40	@ 0x28
 8009f6e:	2101      	movs	r1, #1
 8009f70:	4618      	mov	r0, r3
 8009f72:	f001 f9cf 	bl	800b314 <RCCEx_PLL3_Config>
 8009f76:	4603      	mov	r3, r0
 8009f78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009f7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d003      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f94:	2100      	movs	r1, #0
 8009f96:	6039      	str	r1, [r7, #0]
 8009f98:	f003 0320 	and.w	r3, r3, #32
 8009f9c:	607b      	str	r3, [r7, #4]
 8009f9e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	d011      	beq.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fac:	3328      	adds	r3, #40	@ 0x28
 8009fae:	2102      	movs	r1, #2
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f001 f9af 	bl	800b314 <RCCEx_PLL3_Config>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d003      	beq.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8009fcc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	e000      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fe6:	bf00      	nop
 8009fe8:	58024400 	.word	0x58024400

08009fec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b090      	sub	sp, #64	@ 0x40
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ffa:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009ffe:	430b      	orrs	r3, r1
 800a000:	f040 8094 	bne.w	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a004:	4b9b      	ldr	r3, [pc, #620]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a008:	f003 0307 	and.w	r3, r3, #7
 800a00c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a010:	2b04      	cmp	r3, #4
 800a012:	f200 8087 	bhi.w	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a016:	a201      	add	r2, pc, #4	@ (adr r2, 800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01c:	0800a031 	.word	0x0800a031
 800a020:	0800a059 	.word	0x0800a059
 800a024:	0800a081 	.word	0x0800a081
 800a028:	0800a11d 	.word	0x0800a11d
 800a02c:	0800a0a9 	.word	0x0800a0a9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a030:	4b90      	ldr	r3, [pc, #576]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a038:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a03c:	d108      	bne.n	800a050 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a03e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a042:	4618      	mov	r0, r3
 800a044:	f000 ff62 	bl	800af0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a04c:	f000 bc93 	b.w	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a050:	2300      	movs	r3, #0
 800a052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a054:	f000 bc8f 	b.w	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a058:	4b86      	ldr	r3, [pc, #536]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a060:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a064:	d108      	bne.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a066:	f107 0318 	add.w	r3, r7, #24
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 fca6 	bl	800a9bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a074:	f000 bc7f 	b.w	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a078:	2300      	movs	r3, #0
 800a07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a07c:	f000 bc7b 	b.w	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a080:	4b7c      	ldr	r3, [pc, #496]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a088:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a08c:	d108      	bne.n	800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a08e:	f107 030c 	add.w	r3, r7, #12
 800a092:	4618      	mov	r0, r3
 800a094:	f000 fde6 	bl	800ac64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a09c:	f000 bc6b 	b.w	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0a4:	f000 bc67 	b.w	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0a8:	4b72      	ldr	r3, [pc, #456]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a0b0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0b2:	4b70      	ldr	r3, [pc, #448]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 0304 	and.w	r3, r3, #4
 800a0ba:	2b04      	cmp	r3, #4
 800a0bc:	d10c      	bne.n	800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a0be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d109      	bne.n	800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0c4:	4b6b      	ldr	r3, [pc, #428]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	08db      	lsrs	r3, r3, #3
 800a0ca:	f003 0303 	and.w	r3, r3, #3
 800a0ce:	4a6a      	ldr	r2, [pc, #424]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a0d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a0d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0d6:	e01f      	b.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0d8:	4b66      	ldr	r3, [pc, #408]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0e4:	d106      	bne.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a0e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0ec:	d102      	bne.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a0ee:	4b63      	ldr	r3, [pc, #396]	@ (800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a0f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0f2:	e011      	b.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0f4:	4b5f      	ldr	r3, [pc, #380]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a100:	d106      	bne.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a104:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a108:	d102      	bne.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a10a:	4b5d      	ldr	r3, [pc, #372]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a10e:	e003      	b.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a110:	2300      	movs	r3, #0
 800a112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a114:	f000 bc2f 	b.w	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a118:	f000 bc2d 	b.w	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a11c:	4b59      	ldr	r3, [pc, #356]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a120:	f000 bc29 	b.w	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a124:	2300      	movs	r3, #0
 800a126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a128:	f000 bc25 	b.w	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a12c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a130:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a134:	430b      	orrs	r3, r1
 800a136:	f040 80a7 	bne.w	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a13a:	4b4e      	ldr	r3, [pc, #312]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a13c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a13e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a142:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a146:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a14a:	d054      	beq.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a152:	f200 808b 	bhi.w	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a158:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a15c:	f000 8083 	beq.w	800a266 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a162:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a166:	f200 8081 	bhi.w	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a170:	d02f      	beq.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a174:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a178:	d878      	bhi.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d004      	beq.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a182:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a186:	d012      	beq.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a188:	e070      	b.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a18a:	4b3a      	ldr	r3, [pc, #232]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a192:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a196:	d107      	bne.n	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a19c:	4618      	mov	r0, r3
 800a19e:	f000 feb5 	bl	800af0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1a6:	e3e6      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1ac:	e3e3      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1ae:	4b31      	ldr	r3, [pc, #196]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1ba:	d107      	bne.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1bc:	f107 0318 	add.w	r3, r7, #24
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f000 fbfb 	bl	800a9bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ca:	e3d4      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1d0:	e3d1      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1d2:	4b28      	ldr	r3, [pc, #160]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1de:	d107      	bne.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1e0:	f107 030c 	add.w	r3, r7, #12
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f000 fd3d 	bl	800ac64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ee:	e3c2      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1f4:	e3bf      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1f6:	4b1f      	ldr	r3, [pc, #124]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a1fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a200:	4b1c      	ldr	r3, [pc, #112]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 0304 	and.w	r3, r3, #4
 800a208:	2b04      	cmp	r3, #4
 800a20a:	d10c      	bne.n	800a226 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d109      	bne.n	800a226 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a212:	4b18      	ldr	r3, [pc, #96]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	08db      	lsrs	r3, r3, #3
 800a218:	f003 0303 	and.w	r3, r3, #3
 800a21c:	4a16      	ldr	r2, [pc, #88]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a21e:	fa22 f303 	lsr.w	r3, r2, r3
 800a222:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a224:	e01e      	b.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a226:	4b13      	ldr	r3, [pc, #76]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a22e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a232:	d106      	bne.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a236:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a23a:	d102      	bne.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a23c:	4b0f      	ldr	r3, [pc, #60]	@ (800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a240:	e010      	b.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a242:	4b0c      	ldr	r3, [pc, #48]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a24a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a24e:	d106      	bne.n	800a25e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a252:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a256:	d102      	bne.n	800a25e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a258:	4b09      	ldr	r3, [pc, #36]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a25c:	e002      	b.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a25e:	2300      	movs	r3, #0
 800a260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a262:	e388      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a264:	e387      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a266:	4b07      	ldr	r3, [pc, #28]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a26a:	e384      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a26c:	2300      	movs	r3, #0
 800a26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a270:	e381      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a272:	bf00      	nop
 800a274:	58024400 	.word	0x58024400
 800a278:	03d09000 	.word	0x03d09000
 800a27c:	003d0900 	.word	0x003d0900
 800a280:	007a1200 	.word	0x007a1200
 800a284:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a28c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a290:	430b      	orrs	r3, r1
 800a292:	f040 809c 	bne.w	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a296:	4b9e      	ldr	r3, [pc, #632]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a29a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a29e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2a6:	d054      	beq.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2ae:	f200 808b 	bhi.w	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a2b8:	f000 8083 	beq.w	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a2c2:	f200 8081 	bhi.w	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2cc:	d02f      	beq.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2d4:	d878      	bhi.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d004      	beq.n	800a2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2e2:	d012      	beq.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a2e4:	e070      	b.n	800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2e6:	4b8a      	ldr	r3, [pc, #552]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2f2:	d107      	bne.n	800a304 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 fe07 	bl	800af0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a302:	e338      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a304:	2300      	movs	r3, #0
 800a306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a308:	e335      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a30a:	4b81      	ldr	r3, [pc, #516]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a312:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a316:	d107      	bne.n	800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a318:	f107 0318 	add.w	r3, r7, #24
 800a31c:	4618      	mov	r0, r3
 800a31e:	f000 fb4d 	bl	800a9bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a326:	e326      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a328:	2300      	movs	r3, #0
 800a32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a32c:	e323      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a32e:	4b78      	ldr	r3, [pc, #480]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a336:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a33a:	d107      	bne.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a33c:	f107 030c 	add.w	r3, r7, #12
 800a340:	4618      	mov	r0, r3
 800a342:	f000 fc8f 	bl	800ac64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a34a:	e314      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a34c:	2300      	movs	r3, #0
 800a34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a350:	e311      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a352:	4b6f      	ldr	r3, [pc, #444]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a356:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a35a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a35c:	4b6c      	ldr	r3, [pc, #432]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 0304 	and.w	r3, r3, #4
 800a364:	2b04      	cmp	r3, #4
 800a366:	d10c      	bne.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d109      	bne.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a36e:	4b68      	ldr	r3, [pc, #416]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	08db      	lsrs	r3, r3, #3
 800a374:	f003 0303 	and.w	r3, r3, #3
 800a378:	4a66      	ldr	r2, [pc, #408]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a37a:	fa22 f303 	lsr.w	r3, r2, r3
 800a37e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a380:	e01e      	b.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a382:	4b63      	ldr	r3, [pc, #396]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a38a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a38e:	d106      	bne.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a392:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a396:	d102      	bne.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a398:	4b5f      	ldr	r3, [pc, #380]	@ (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a39c:	e010      	b.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a39e:	4b5c      	ldr	r3, [pc, #368]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3aa:	d106      	bne.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a3ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3b2:	d102      	bne.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3b4:	4b59      	ldr	r3, [pc, #356]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3b8:	e002      	b.n	800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3be:	e2da      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a3c0:	e2d9      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3c2:	4b57      	ldr	r3, [pc, #348]	@ (800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a3c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3c6:	e2d6      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3cc:	e2d3      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a3ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3d2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a3d6:	430b      	orrs	r3, r1
 800a3d8:	f040 80a7 	bne.w	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a3dc:	4b4c      	ldr	r3, [pc, #304]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3e0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a3e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3ec:	d055      	beq.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3f4:	f200 8096 	bhi.w	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a3fe:	f000 8084 	beq.w	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a404:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a408:	f200 808c 	bhi.w	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a412:	d030      	beq.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a416:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a41a:	f200 8083 	bhi.w	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a420:	2b00      	cmp	r3, #0
 800a422:	d004      	beq.n	800a42e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a42a:	d012      	beq.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a42c:	e07a      	b.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a42e:	4b38      	ldr	r3, [pc, #224]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a436:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a43a:	d107      	bne.n	800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a43c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a440:	4618      	mov	r0, r3
 800a442:	f000 fd63 	bl	800af0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a44a:	e294      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a44c:	2300      	movs	r3, #0
 800a44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a450:	e291      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a452:	4b2f      	ldr	r3, [pc, #188]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a45a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a45e:	d107      	bne.n	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a460:	f107 0318 	add.w	r3, r7, #24
 800a464:	4618      	mov	r0, r3
 800a466:	f000 faa9 	bl	800a9bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a46e:	e282      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a474:	e27f      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a476:	4b26      	ldr	r3, [pc, #152]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a47e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a482:	d107      	bne.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a484:	f107 030c 	add.w	r3, r7, #12
 800a488:	4618      	mov	r0, r3
 800a48a:	f000 fbeb 	bl	800ac64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a492:	e270      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a494:	2300      	movs	r3, #0
 800a496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a498:	e26d      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a49a:	4b1d      	ldr	r3, [pc, #116]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a49c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a49e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a4a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4a4:	4b1a      	ldr	r3, [pc, #104]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0304 	and.w	r3, r3, #4
 800a4ac:	2b04      	cmp	r3, #4
 800a4ae:	d10c      	bne.n	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a4b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d109      	bne.n	800a4ca <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4b6:	4b16      	ldr	r3, [pc, #88]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	08db      	lsrs	r3, r3, #3
 800a4bc:	f003 0303 	and.w	r3, r3, #3
 800a4c0:	4a14      	ldr	r2, [pc, #80]	@ (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a4c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4c8:	e01e      	b.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4ca:	4b11      	ldr	r3, [pc, #68]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4d6:	d106      	bne.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a4d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4de:	d102      	bne.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a4e0:	4b0d      	ldr	r3, [pc, #52]	@ (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4e4:	e010      	b.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4e6:	4b0a      	ldr	r3, [pc, #40]	@ (800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4f2:	d106      	bne.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a4f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4fa:	d102      	bne.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4fc:	4b07      	ldr	r3, [pc, #28]	@ (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a500:	e002      	b.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a502:	2300      	movs	r3, #0
 800a504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a506:	e236      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a508:	e235      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a50a:	4b05      	ldr	r3, [pc, #20]	@ (800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a50e:	e232      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a510:	58024400 	.word	0x58024400
 800a514:	03d09000 	.word	0x03d09000
 800a518:	003d0900 	.word	0x003d0900
 800a51c:	007a1200 	.word	0x007a1200
 800a520:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a524:	2300      	movs	r3, #0
 800a526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a528:	e225      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a52a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a52e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a532:	430b      	orrs	r3, r1
 800a534:	f040 8085 	bne.w	800a642 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a538:	4b9c      	ldr	r3, [pc, #624]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a53a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a53c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a540:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a544:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a548:	d06b      	beq.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a550:	d874      	bhi.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a554:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a558:	d056      	beq.n	800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a55c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a560:	d86c      	bhi.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a564:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a568:	d03b      	beq.n	800a5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a56c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a570:	d864      	bhi.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a574:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a578:	d021      	beq.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a57c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a580:	d85c      	bhi.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a584:	2b00      	cmp	r3, #0
 800a586:	d004      	beq.n	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a58a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a58e:	d004      	beq.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a590:	e054      	b.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a592:	f7fe fb75 	bl	8008c80 <HAL_RCC_GetPCLK1Freq>
 800a596:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a598:	e1ed      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a59a:	4b84      	ldr	r3, [pc, #528]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5a6:	d107      	bne.n	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5a8:	f107 0318 	add.w	r3, r7, #24
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f000 fa05 	bl	800a9bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5b2:	69fb      	ldr	r3, [r7, #28]
 800a5b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5b6:	e1de      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5bc:	e1db      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5be:	4b7b      	ldr	r3, [pc, #492]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5ca:	d107      	bne.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5cc:	f107 030c 	add.w	r3, r7, #12
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f000 fb47 	bl	800ac64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5da:	e1cc      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5e0:	e1c9      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5e2:	4b72      	ldr	r3, [pc, #456]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 0304 	and.w	r3, r3, #4
 800a5ea:	2b04      	cmp	r3, #4
 800a5ec:	d109      	bne.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5ee:	4b6f      	ldr	r3, [pc, #444]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	08db      	lsrs	r3, r3, #3
 800a5f4:	f003 0303 	and.w	r3, r3, #3
 800a5f8:	4a6d      	ldr	r2, [pc, #436]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a5fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a600:	e1b9      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a602:	2300      	movs	r3, #0
 800a604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a606:	e1b6      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a608:	4b68      	ldr	r3, [pc, #416]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a610:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a614:	d102      	bne.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a616:	4b67      	ldr	r3, [pc, #412]	@ (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a61a:	e1ac      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a61c:	2300      	movs	r3, #0
 800a61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a620:	e1a9      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a622:	4b62      	ldr	r3, [pc, #392]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a62a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a62e:	d102      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a630:	4b61      	ldr	r3, [pc, #388]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a634:	e19f      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a636:	2300      	movs	r3, #0
 800a638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a63a:	e19c      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a63c:	2300      	movs	r3, #0
 800a63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a640:	e199      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a642:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a646:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a64a:	430b      	orrs	r3, r1
 800a64c:	d173      	bne.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a64e:	4b57      	ldr	r3, [pc, #348]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a652:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a656:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a65a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a65e:	d02f      	beq.n	800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a662:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a666:	d863      	bhi.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d004      	beq.n	800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a674:	d012      	beq.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a676:	e05b      	b.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a678:	4b4c      	ldr	r3, [pc, #304]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a680:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a684:	d107      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a686:	f107 0318 	add.w	r3, r7, #24
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 f996 	bl	800a9bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a694:	e16f      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a69a:	e16c      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a69c:	4b43      	ldr	r3, [pc, #268]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6a8:	d107      	bne.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6aa:	f107 030c 	add.w	r3, r7, #12
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f000 fad8 	bl	800ac64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6b8:	e15d      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6be:	e15a      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6c0:	4b3a      	ldr	r3, [pc, #232]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a6c8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6ca:	4b38      	ldr	r3, [pc, #224]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f003 0304 	and.w	r3, r3, #4
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	d10c      	bne.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a6d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d109      	bne.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6dc:	4b33      	ldr	r3, [pc, #204]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	08db      	lsrs	r3, r3, #3
 800a6e2:	f003 0303 	and.w	r3, r3, #3
 800a6e6:	4a32      	ldr	r2, [pc, #200]	@ (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a6e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6ee:	e01e      	b.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6f0:	4b2e      	ldr	r3, [pc, #184]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6fc:	d106      	bne.n	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a6fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a700:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a704:	d102      	bne.n	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a706:	4b2b      	ldr	r3, [pc, #172]	@ (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a708:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a70a:	e010      	b.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a70c:	4b27      	ldr	r3, [pc, #156]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a718:	d106      	bne.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a71c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a720:	d102      	bne.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a722:	4b25      	ldr	r3, [pc, #148]	@ (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a724:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a726:	e002      	b.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a728:	2300      	movs	r3, #0
 800a72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a72c:	e123      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a72e:	e122      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a730:	2300      	movs	r3, #0
 800a732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a734:	e11f      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a73a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a73e:	430b      	orrs	r3, r1
 800a740:	d13c      	bne.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a742:	4b1a      	ldr	r3, [pc, #104]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a74a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d004      	beq.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a758:	d012      	beq.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a75a:	e023      	b.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a75c:	4b13      	ldr	r3, [pc, #76]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a764:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a768:	d107      	bne.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a76a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a76e:	4618      	mov	r0, r3
 800a770:	f000 fbcc 	bl	800af0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a778:	e0fd      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a77e:	e0fa      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a780:	4b0a      	ldr	r3, [pc, #40]	@ (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a788:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a78c:	d107      	bne.n	800a79e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a78e:	f107 0318 	add.w	r3, r7, #24
 800a792:	4618      	mov	r0, r3
 800a794:	f000 f912 	bl	800a9bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a798:	6a3b      	ldr	r3, [r7, #32]
 800a79a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a79c:	e0eb      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7a2:	e0e8      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7a8:	e0e5      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a7aa:	bf00      	nop
 800a7ac:	58024400 	.word	0x58024400
 800a7b0:	03d09000 	.word	0x03d09000
 800a7b4:	003d0900 	.word	0x003d0900
 800a7b8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a7bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7c0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a7c4:	430b      	orrs	r3, r1
 800a7c6:	f040 8085 	bne.w	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a7ca:	4b6d      	ldr	r3, [pc, #436]	@ (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a7cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7ce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a7d2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7da:	d06b      	beq.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7e2:	d874      	bhi.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7ea:	d056      	beq.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7f2:	d86c      	bhi.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7fa:	d03b      	beq.n	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a802:	d864      	bhi.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a806:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a80a:	d021      	beq.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a80c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a80e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a812:	d85c      	bhi.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a816:	2b00      	cmp	r3, #0
 800a818:	d004      	beq.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a81c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a820:	d004      	beq.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a822:	e054      	b.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a824:	f000 f8b4 	bl	800a990 <HAL_RCCEx_GetD3PCLK1Freq>
 800a828:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a82a:	e0a4      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a82c:	4b54      	ldr	r3, [pc, #336]	@ (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a834:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a838:	d107      	bne.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a83a:	f107 0318 	add.w	r3, r7, #24
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 f8bc 	bl	800a9bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a848:	e095      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a84a:	2300      	movs	r3, #0
 800a84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a84e:	e092      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a850:	4b4b      	ldr	r3, [pc, #300]	@ (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a85c:	d107      	bne.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a85e:	f107 030c 	add.w	r3, r7, #12
 800a862:	4618      	mov	r0, r3
 800a864:	f000 f9fe 	bl	800ac64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a86c:	e083      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a86e:	2300      	movs	r3, #0
 800a870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a872:	e080      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a874:	4b42      	ldr	r3, [pc, #264]	@ (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 0304 	and.w	r3, r3, #4
 800a87c:	2b04      	cmp	r3, #4
 800a87e:	d109      	bne.n	800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a880:	4b3f      	ldr	r3, [pc, #252]	@ (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	08db      	lsrs	r3, r3, #3
 800a886:	f003 0303 	and.w	r3, r3, #3
 800a88a:	4a3e      	ldr	r2, [pc, #248]	@ (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a88c:	fa22 f303 	lsr.w	r3, r2, r3
 800a890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a892:	e070      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a894:	2300      	movs	r3, #0
 800a896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a898:	e06d      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a89a:	4b39      	ldr	r3, [pc, #228]	@ (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8a6:	d102      	bne.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a8a8:	4b37      	ldr	r3, [pc, #220]	@ (800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a8aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8ac:	e063      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8b2:	e060      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a8b4:	4b32      	ldr	r3, [pc, #200]	@ (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8c0:	d102      	bne.n	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a8c2:	4b32      	ldr	r3, [pc, #200]	@ (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a8c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8c6:	e056      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8cc:	e053      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8d2:	e050      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a8d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8d8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a8dc:	430b      	orrs	r3, r1
 800a8de:	d148      	bne.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a8e0:	4b27      	ldr	r3, [pc, #156]	@ (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8f0:	d02a      	beq.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a8f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8f8:	d838      	bhi.n	800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d004      	beq.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a902:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a906:	d00d      	beq.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a908:	e030      	b.n	800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a90a:	4b1d      	ldr	r3, [pc, #116]	@ (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a912:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a916:	d102      	bne.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a918:	4b1c      	ldr	r3, [pc, #112]	@ (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a91c:	e02b      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a91e:	2300      	movs	r3, #0
 800a920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a922:	e028      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a924:	4b16      	ldr	r3, [pc, #88]	@ (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a92c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a930:	d107      	bne.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a936:	4618      	mov	r0, r3
 800a938:	f000 fae8 	bl	800af0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a940:	e019      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a942:	2300      	movs	r3, #0
 800a944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a946:	e016      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a948:	4b0d      	ldr	r3, [pc, #52]	@ (800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a950:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a954:	d107      	bne.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a956:	f107 0318 	add.w	r3, r7, #24
 800a95a:	4618      	mov	r0, r3
 800a95c:	f000 f82e 	bl	800a9bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a964:	e007      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a966:	2300      	movs	r3, #0
 800a968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a96a:	e004      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a96c:	2300      	movs	r3, #0
 800a96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a970:	e001      	b.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a972:	2300      	movs	r3, #0
 800a974:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3740      	adds	r7, #64	@ 0x40
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	58024400 	.word	0x58024400
 800a984:	03d09000 	.word	0x03d09000
 800a988:	003d0900 	.word	0x003d0900
 800a98c:	007a1200 	.word	0x007a1200

0800a990 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a994:	f7fe f944 	bl	8008c20 <HAL_RCC_GetHCLKFreq>
 800a998:	4602      	mov	r2, r0
 800a99a:	4b06      	ldr	r3, [pc, #24]	@ (800a9b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	091b      	lsrs	r3, r3, #4
 800a9a0:	f003 0307 	and.w	r3, r3, #7
 800a9a4:	4904      	ldr	r1, [pc, #16]	@ (800a9b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a9a6:	5ccb      	ldrb	r3, [r1, r3]
 800a9a8:	f003 031f 	and.w	r3, r3, #31
 800a9ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	58024400 	.word	0x58024400
 800a9b8:	0800fd7c 	.word	0x0800fd7c

0800a9bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b089      	sub	sp, #36	@ 0x24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9c4:	4ba1      	ldr	r3, [pc, #644]	@ (800ac4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9c8:	f003 0303 	and.w	r3, r3, #3
 800a9cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a9ce:	4b9f      	ldr	r3, [pc, #636]	@ (800ac4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9d2:	0b1b      	lsrs	r3, r3, #12
 800a9d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a9d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a9da:	4b9c      	ldr	r3, [pc, #624]	@ (800ac4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9de:	091b      	lsrs	r3, r3, #4
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a9e6:	4b99      	ldr	r3, [pc, #612]	@ (800ac4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9ea:	08db      	lsrs	r3, r3, #3
 800a9ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9f0:	693a      	ldr	r2, [r7, #16]
 800a9f2:	fb02 f303 	mul.w	r3, r2, r3
 800a9f6:	ee07 3a90 	vmov	s15, r3
 800a9fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f000 8111 	beq.w	800ac2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	f000 8083 	beq.w	800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	f200 80a1 	bhi.w	800ab5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d003      	beq.n	800aa28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d056      	beq.n	800aad4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aa26:	e099      	b.n	800ab5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa28:	4b88      	ldr	r3, [pc, #544]	@ (800ac4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 0320 	and.w	r3, r3, #32
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d02d      	beq.n	800aa90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa34:	4b85      	ldr	r3, [pc, #532]	@ (800ac4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	08db      	lsrs	r3, r3, #3
 800aa3a:	f003 0303 	and.w	r3, r3, #3
 800aa3e:	4a84      	ldr	r2, [pc, #528]	@ (800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aa40:	fa22 f303 	lsr.w	r3, r2, r3
 800aa44:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	ee07 3a90 	vmov	s15, r3
 800aa4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	ee07 3a90 	vmov	s15, r3
 800aa56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa5e:	4b7b      	ldr	r3, [pc, #492]	@ (800ac4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa66:	ee07 3a90 	vmov	s15, r3
 800aa6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ac54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aa8e:	e087      	b.n	800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	ee07 3a90 	vmov	s15, r3
 800aa96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ac58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aa9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaa2:	4b6a      	ldr	r3, [pc, #424]	@ (800ac4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaaa:	ee07 3a90 	vmov	s15, r3
 800aaae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aab2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aab6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ac54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aabe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aad2:	e065      	b.n	800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	ee07 3a90 	vmov	s15, r3
 800aada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aade:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ac5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aae6:	4b59      	ldr	r3, [pc, #356]	@ (800ac4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaee:	ee07 3a90 	vmov	s15, r3
 800aaf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aafa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ac54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aafe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab16:	e043      	b.n	800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	ee07 3a90 	vmov	s15, r3
 800ab1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab22:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ac60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ab26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab2a:	4b48      	ldr	r3, [pc, #288]	@ (800ac4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab32:	ee07 3a90 	vmov	s15, r3
 800ab36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab3e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ac54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab5a:	e021      	b.n	800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	ee07 3a90 	vmov	s15, r3
 800ab62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab66:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ac5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab6e:	4b37      	ldr	r3, [pc, #220]	@ (800ac4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab76:	ee07 3a90 	vmov	s15, r3
 800ab7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab82:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ac54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aba0:	4b2a      	ldr	r3, [pc, #168]	@ (800ac4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aba4:	0a5b      	lsrs	r3, r3, #9
 800aba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abaa:	ee07 3a90 	vmov	s15, r3
 800abae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abba:	edd7 6a07 	vldr	s13, [r7, #28]
 800abbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abc6:	ee17 2a90 	vmov	r2, s15
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800abce:	4b1f      	ldr	r3, [pc, #124]	@ (800ac4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abd2:	0c1b      	lsrs	r3, r3, #16
 800abd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abd8:	ee07 3a90 	vmov	s15, r3
 800abdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abe8:	edd7 6a07 	vldr	s13, [r7, #28]
 800abec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abf4:	ee17 2a90 	vmov	r2, s15
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800abfc:	4b13      	ldr	r3, [pc, #76]	@ (800ac4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac00:	0e1b      	lsrs	r3, r3, #24
 800ac02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac06:	ee07 3a90 	vmov	s15, r3
 800ac0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac16:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac22:	ee17 2a90 	vmov	r2, s15
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac2a:	e008      	b.n	800ac3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	609a      	str	r2, [r3, #8]
}
 800ac3e:	bf00      	nop
 800ac40:	3724      	adds	r7, #36	@ 0x24
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	58024400 	.word	0x58024400
 800ac50:	03d09000 	.word	0x03d09000
 800ac54:	46000000 	.word	0x46000000
 800ac58:	4c742400 	.word	0x4c742400
 800ac5c:	4a742400 	.word	0x4a742400
 800ac60:	4af42400 	.word	0x4af42400

0800ac64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b089      	sub	sp, #36	@ 0x24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac6c:	4ba1      	ldr	r3, [pc, #644]	@ (800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac70:	f003 0303 	and.w	r3, r3, #3
 800ac74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ac76:	4b9f      	ldr	r3, [pc, #636]	@ (800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac7a:	0d1b      	lsrs	r3, r3, #20
 800ac7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ac82:	4b9c      	ldr	r3, [pc, #624]	@ (800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac86:	0a1b      	lsrs	r3, r3, #8
 800ac88:	f003 0301 	and.w	r3, r3, #1
 800ac8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ac8e:	4b99      	ldr	r3, [pc, #612]	@ (800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac92:	08db      	lsrs	r3, r3, #3
 800ac94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	fb02 f303 	mul.w	r3, r2, r3
 800ac9e:	ee07 3a90 	vmov	s15, r3
 800aca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aca6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2b00      	cmp	r3, #0
 800acae:	f000 8111 	beq.w	800aed4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	2b02      	cmp	r3, #2
 800acb6:	f000 8083 	beq.w	800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	2b02      	cmp	r3, #2
 800acbe:	f200 80a1 	bhi.w	800ae04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d003      	beq.n	800acd0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	2b01      	cmp	r3, #1
 800accc:	d056      	beq.n	800ad7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800acce:	e099      	b.n	800ae04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acd0:	4b88      	ldr	r3, [pc, #544]	@ (800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 0320 	and.w	r3, r3, #32
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d02d      	beq.n	800ad38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acdc:	4b85      	ldr	r3, [pc, #532]	@ (800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	08db      	lsrs	r3, r3, #3
 800ace2:	f003 0303 	and.w	r3, r3, #3
 800ace6:	4a84      	ldr	r2, [pc, #528]	@ (800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ace8:	fa22 f303 	lsr.w	r3, r2, r3
 800acec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	ee07 3a90 	vmov	s15, r3
 800acf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	ee07 3a90 	vmov	s15, r3
 800acfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad06:	4b7b      	ldr	r3, [pc, #492]	@ (800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad0e:	ee07 3a90 	vmov	s15, r3
 800ad12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800aefc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad36:	e087      	b.n	800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	ee07 3a90 	vmov	s15, r3
 800ad3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800af00 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ad46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad4a:	4b6a      	ldr	r3, [pc, #424]	@ (800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad52:	ee07 3a90 	vmov	s15, r3
 800ad56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800aefc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad7a:	e065      	b.n	800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	ee07 3a90 	vmov	s15, r3
 800ad82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800af04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad8e:	4b59      	ldr	r3, [pc, #356]	@ (800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad96:	ee07 3a90 	vmov	s15, r3
 800ad9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ada2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800aefc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ada6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adbe:	e043      	b.n	800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	ee07 3a90 	vmov	s15, r3
 800adc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800af08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800adce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800add2:	4b48      	ldr	r3, [pc, #288]	@ (800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800add4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adda:	ee07 3a90 	vmov	s15, r3
 800adde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ade2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ade6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800aefc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae02:	e021      	b.n	800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	ee07 3a90 	vmov	s15, r3
 800ae0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800af04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae16:	4b37      	ldr	r3, [pc, #220]	@ (800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae1e:	ee07 3a90 	vmov	s15, r3
 800ae22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800aefc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ae48:	4b2a      	ldr	r3, [pc, #168]	@ (800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae4c:	0a5b      	lsrs	r3, r3, #9
 800ae4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae52:	ee07 3a90 	vmov	s15, r3
 800ae56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae62:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae6e:	ee17 2a90 	vmov	r2, s15
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ae76:	4b1f      	ldr	r3, [pc, #124]	@ (800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae7a:	0c1b      	lsrs	r3, r3, #16
 800ae7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae80:	ee07 3a90 	vmov	s15, r3
 800ae84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae90:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae9c:	ee17 2a90 	vmov	r2, s15
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aea4:	4b13      	ldr	r3, [pc, #76]	@ (800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aea8:	0e1b      	lsrs	r3, r3, #24
 800aeaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aeae:	ee07 3a90 	vmov	s15, r3
 800aeb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aeba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aebe:	edd7 6a07 	vldr	s13, [r7, #28]
 800aec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aeca:	ee17 2a90 	vmov	r2, s15
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aed2:	e008      	b.n	800aee6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	609a      	str	r2, [r3, #8]
}
 800aee6:	bf00      	nop
 800aee8:	3724      	adds	r7, #36	@ 0x24
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop
 800aef4:	58024400 	.word	0x58024400
 800aef8:	03d09000 	.word	0x03d09000
 800aefc:	46000000 	.word	0x46000000
 800af00:	4c742400 	.word	0x4c742400
 800af04:	4a742400 	.word	0x4a742400
 800af08:	4af42400 	.word	0x4af42400

0800af0c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b089      	sub	sp, #36	@ 0x24
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af14:	4ba0      	ldr	r3, [pc, #640]	@ (800b198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af18:	f003 0303 	and.w	r3, r3, #3
 800af1c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800af1e:	4b9e      	ldr	r3, [pc, #632]	@ (800b198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af22:	091b      	lsrs	r3, r3, #4
 800af24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af28:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800af2a:	4b9b      	ldr	r3, [pc, #620]	@ (800b198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af2e:	f003 0301 	and.w	r3, r3, #1
 800af32:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800af34:	4b98      	ldr	r3, [pc, #608]	@ (800b198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af38:	08db      	lsrs	r3, r3, #3
 800af3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	fb02 f303 	mul.w	r3, r2, r3
 800af44:	ee07 3a90 	vmov	s15, r3
 800af48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af4c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	2b00      	cmp	r3, #0
 800af54:	f000 8111 	beq.w	800b17a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	f000 8083 	beq.w	800b066 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	2b02      	cmp	r3, #2
 800af64:	f200 80a1 	bhi.w	800b0aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d003      	beq.n	800af76 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	2b01      	cmp	r3, #1
 800af72:	d056      	beq.n	800b022 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800af74:	e099      	b.n	800b0aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af76:	4b88      	ldr	r3, [pc, #544]	@ (800b198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f003 0320 	and.w	r3, r3, #32
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d02d      	beq.n	800afde <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af82:	4b85      	ldr	r3, [pc, #532]	@ (800b198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	08db      	lsrs	r3, r3, #3
 800af88:	f003 0303 	and.w	r3, r3, #3
 800af8c:	4a83      	ldr	r2, [pc, #524]	@ (800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800af8e:	fa22 f303 	lsr.w	r3, r2, r3
 800af92:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	ee07 3a90 	vmov	s15, r3
 800af9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	ee07 3a90 	vmov	s15, r3
 800afa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afac:	4b7a      	ldr	r3, [pc, #488]	@ (800b198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afb4:	ee07 3a90 	vmov	s15, r3
 800afb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afbc:	ed97 6a03 	vldr	s12, [r7, #12]
 800afc0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afd8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800afdc:	e087      	b.n	800b0ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	ee07 3a90 	vmov	s15, r3
 800afe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800afec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aff0:	4b69      	ldr	r3, [pc, #420]	@ (800b198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff8:	ee07 3a90 	vmov	s15, r3
 800affc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b000:	ed97 6a03 	vldr	s12, [r7, #12]
 800b004:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b00c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b010:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b01c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b020:	e065      	b.n	800b0ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	ee07 3a90 	vmov	s15, r3
 800b028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b02c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b034:	4b58      	ldr	r3, [pc, #352]	@ (800b198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b03c:	ee07 3a90 	vmov	s15, r3
 800b040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b044:	ed97 6a03 	vldr	s12, [r7, #12]
 800b048:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b04c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b054:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b05c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b060:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b064:	e043      	b.n	800b0ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	ee07 3a90 	vmov	s15, r3
 800b06c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b070:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b1ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b074:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b078:	4b47      	ldr	r3, [pc, #284]	@ (800b198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b07a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b07c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b080:	ee07 3a90 	vmov	s15, r3
 800b084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b088:	ed97 6a03 	vldr	s12, [r7, #12]
 800b08c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b090:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b094:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b098:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b09c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0a8:	e021      	b.n	800b0ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	ee07 3a90 	vmov	s15, r3
 800b0b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b0b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0bc:	4b36      	ldr	r3, [pc, #216]	@ (800b198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0c4:	ee07 3a90 	vmov	s15, r3
 800b0c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0d0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b0ee:	4b2a      	ldr	r3, [pc, #168]	@ (800b198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0f2:	0a5b      	lsrs	r3, r3, #9
 800b0f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0f8:	ee07 3a90 	vmov	s15, r3
 800b0fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b100:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b104:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b108:	edd7 6a07 	vldr	s13, [r7, #28]
 800b10c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b114:	ee17 2a90 	vmov	r2, s15
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b11c:	4b1e      	ldr	r3, [pc, #120]	@ (800b198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b11e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b120:	0c1b      	lsrs	r3, r3, #16
 800b122:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b126:	ee07 3a90 	vmov	s15, r3
 800b12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b132:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b136:	edd7 6a07 	vldr	s13, [r7, #28]
 800b13a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b13e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b142:	ee17 2a90 	vmov	r2, s15
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b14a:	4b13      	ldr	r3, [pc, #76]	@ (800b198 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b14c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b14e:	0e1b      	lsrs	r3, r3, #24
 800b150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b154:	ee07 3a90 	vmov	s15, r3
 800b158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b15c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b160:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b164:	edd7 6a07 	vldr	s13, [r7, #28]
 800b168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b16c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b170:	ee17 2a90 	vmov	r2, s15
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b178:	e008      	b.n	800b18c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	609a      	str	r2, [r3, #8]
}
 800b18c:	bf00      	nop
 800b18e:	3724      	adds	r7, #36	@ 0x24
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr
 800b198:	58024400 	.word	0x58024400
 800b19c:	03d09000 	.word	0x03d09000
 800b1a0:	46000000 	.word	0x46000000
 800b1a4:	4c742400 	.word	0x4c742400
 800b1a8:	4a742400 	.word	0x4a742400
 800b1ac:	4af42400 	.word	0x4af42400

0800b1b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b1be:	4b53      	ldr	r3, [pc, #332]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b1c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1c2:	f003 0303 	and.w	r3, r3, #3
 800b1c6:	2b03      	cmp	r3, #3
 800b1c8:	d101      	bne.n	800b1ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e099      	b.n	800b302 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b1ce:	4b4f      	ldr	r3, [pc, #316]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a4e      	ldr	r2, [pc, #312]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b1d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b1d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1da:	f7f7 fb05 	bl	80027e8 <HAL_GetTick>
 800b1de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1e0:	e008      	b.n	800b1f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b1e2:	f7f7 fb01 	bl	80027e8 <HAL_GetTick>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	1ad3      	subs	r3, r2, r3
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	d901      	bls.n	800b1f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b1f0:	2303      	movs	r3, #3
 800b1f2:	e086      	b.n	800b302 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1f4:	4b45      	ldr	r3, [pc, #276]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1f0      	bne.n	800b1e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b200:	4b42      	ldr	r3, [pc, #264]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b204:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	031b      	lsls	r3, r3, #12
 800b20e:	493f      	ldr	r1, [pc, #252]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b210:	4313      	orrs	r3, r2
 800b212:	628b      	str	r3, [r1, #40]	@ 0x28
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	3b01      	subs	r3, #1
 800b21a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	3b01      	subs	r3, #1
 800b224:	025b      	lsls	r3, r3, #9
 800b226:	b29b      	uxth	r3, r3
 800b228:	431a      	orrs	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	3b01      	subs	r3, #1
 800b230:	041b      	lsls	r3, r3, #16
 800b232:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b236:	431a      	orrs	r2, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	691b      	ldr	r3, [r3, #16]
 800b23c:	3b01      	subs	r3, #1
 800b23e:	061b      	lsls	r3, r3, #24
 800b240:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b244:	4931      	ldr	r1, [pc, #196]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b246:	4313      	orrs	r3, r2
 800b248:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b24a:	4b30      	ldr	r3, [pc, #192]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b24c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b24e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	695b      	ldr	r3, [r3, #20]
 800b256:	492d      	ldr	r1, [pc, #180]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b258:	4313      	orrs	r3, r2
 800b25a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b25c:	4b2b      	ldr	r3, [pc, #172]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b25e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b260:	f023 0220 	bic.w	r2, r3, #32
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	699b      	ldr	r3, [r3, #24]
 800b268:	4928      	ldr	r1, [pc, #160]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b26a:	4313      	orrs	r3, r2
 800b26c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b26e:	4b27      	ldr	r3, [pc, #156]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b272:	4a26      	ldr	r2, [pc, #152]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b274:	f023 0310 	bic.w	r3, r3, #16
 800b278:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b27a:	4b24      	ldr	r3, [pc, #144]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b27c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b27e:	4b24      	ldr	r3, [pc, #144]	@ (800b310 <RCCEx_PLL2_Config+0x160>)
 800b280:	4013      	ands	r3, r2
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	69d2      	ldr	r2, [r2, #28]
 800b286:	00d2      	lsls	r2, r2, #3
 800b288:	4920      	ldr	r1, [pc, #128]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b28a:	4313      	orrs	r3, r2
 800b28c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b28e:	4b1f      	ldr	r3, [pc, #124]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b292:	4a1e      	ldr	r2, [pc, #120]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b294:	f043 0310 	orr.w	r3, r3, #16
 800b298:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d106      	bne.n	800b2ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b2a0:	4b1a      	ldr	r3, [pc, #104]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b2a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a4:	4a19      	ldr	r2, [pc, #100]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b2a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b2aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b2ac:	e00f      	b.n	800b2ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d106      	bne.n	800b2c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b2b4:	4b15      	ldr	r3, [pc, #84]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2b8:	4a14      	ldr	r2, [pc, #80]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b2ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b2be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b2c0:	e005      	b.n	800b2ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b2c2:	4b12      	ldr	r3, [pc, #72]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b2c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c6:	4a11      	ldr	r2, [pc, #68]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b2c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b2cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b2ce:	4b0f      	ldr	r3, [pc, #60]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4a0e      	ldr	r2, [pc, #56]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b2d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b2d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2da:	f7f7 fa85 	bl	80027e8 <HAL_GetTick>
 800b2de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2e0:	e008      	b.n	800b2f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b2e2:	f7f7 fa81 	bl	80027e8 <HAL_GetTick>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	1ad3      	subs	r3, r2, r3
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	d901      	bls.n	800b2f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b2f0:	2303      	movs	r3, #3
 800b2f2:	e006      	b.n	800b302 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2f4:	4b05      	ldr	r3, [pc, #20]	@ (800b30c <RCCEx_PLL2_Config+0x15c>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d0f0      	beq.n	800b2e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b300:	7bfb      	ldrb	r3, [r7, #15]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	58024400 	.word	0x58024400
 800b310:	ffff0007 	.word	0xffff0007

0800b314 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b31e:	2300      	movs	r3, #0
 800b320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b322:	4b53      	ldr	r3, [pc, #332]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b326:	f003 0303 	and.w	r3, r3, #3
 800b32a:	2b03      	cmp	r3, #3
 800b32c:	d101      	bne.n	800b332 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	e099      	b.n	800b466 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b332:	4b4f      	ldr	r3, [pc, #316]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a4e      	ldr	r2, [pc, #312]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b33c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b33e:	f7f7 fa53 	bl	80027e8 <HAL_GetTick>
 800b342:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b344:	e008      	b.n	800b358 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b346:	f7f7 fa4f 	bl	80027e8 <HAL_GetTick>
 800b34a:	4602      	mov	r2, r0
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	2b02      	cmp	r3, #2
 800b352:	d901      	bls.n	800b358 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b354:	2303      	movs	r3, #3
 800b356:	e086      	b.n	800b466 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b358:	4b45      	ldr	r3, [pc, #276]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b360:	2b00      	cmp	r3, #0
 800b362:	d1f0      	bne.n	800b346 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b364:	4b42      	ldr	r3, [pc, #264]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b368:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	051b      	lsls	r3, r3, #20
 800b372:	493f      	ldr	r1, [pc, #252]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b374:	4313      	orrs	r3, r2
 800b376:	628b      	str	r3, [r1, #40]	@ 0x28
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	3b01      	subs	r3, #1
 800b37e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	3b01      	subs	r3, #1
 800b388:	025b      	lsls	r3, r3, #9
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	431a      	orrs	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	3b01      	subs	r3, #1
 800b394:	041b      	lsls	r3, r3, #16
 800b396:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b39a:	431a      	orrs	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	691b      	ldr	r3, [r3, #16]
 800b3a0:	3b01      	subs	r3, #1
 800b3a2:	061b      	lsls	r3, r3, #24
 800b3a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b3a8:	4931      	ldr	r1, [pc, #196]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b3ae:	4b30      	ldr	r3, [pc, #192]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b3b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	695b      	ldr	r3, [r3, #20]
 800b3ba:	492d      	ldr	r1, [pc, #180]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b3c0:	4b2b      	ldr	r3, [pc, #172]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b3c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	699b      	ldr	r3, [r3, #24]
 800b3cc:	4928      	ldr	r1, [pc, #160]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b3d2:	4b27      	ldr	r3, [pc, #156]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b3d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3d6:	4a26      	ldr	r2, [pc, #152]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b3d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b3dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b3de:	4b24      	ldr	r3, [pc, #144]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b3e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3e2:	4b24      	ldr	r3, [pc, #144]	@ (800b474 <RCCEx_PLL3_Config+0x160>)
 800b3e4:	4013      	ands	r3, r2
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	69d2      	ldr	r2, [r2, #28]
 800b3ea:	00d2      	lsls	r2, r2, #3
 800b3ec:	4920      	ldr	r1, [pc, #128]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b3f2:	4b1f      	ldr	r3, [pc, #124]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b3f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f6:	4a1e      	ldr	r2, [pc, #120]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b3f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d106      	bne.n	800b412 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b404:	4b1a      	ldr	r3, [pc, #104]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b408:	4a19      	ldr	r2, [pc, #100]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b40a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b40e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b410:	e00f      	b.n	800b432 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	2b01      	cmp	r3, #1
 800b416:	d106      	bne.n	800b426 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b418:	4b15      	ldr	r3, [pc, #84]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b41c:	4a14      	ldr	r2, [pc, #80]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b41e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b422:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b424:	e005      	b.n	800b432 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b426:	4b12      	ldr	r3, [pc, #72]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b42a:	4a11      	ldr	r2, [pc, #68]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b42c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b430:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b432:	4b0f      	ldr	r3, [pc, #60]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a0e      	ldr	r2, [pc, #56]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b43c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b43e:	f7f7 f9d3 	bl	80027e8 <HAL_GetTick>
 800b442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b444:	e008      	b.n	800b458 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b446:	f7f7 f9cf 	bl	80027e8 <HAL_GetTick>
 800b44a:	4602      	mov	r2, r0
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	1ad3      	subs	r3, r2, r3
 800b450:	2b02      	cmp	r3, #2
 800b452:	d901      	bls.n	800b458 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b454:	2303      	movs	r3, #3
 800b456:	e006      	b.n	800b466 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b458:	4b05      	ldr	r3, [pc, #20]	@ (800b470 <RCCEx_PLL3_Config+0x15c>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b460:	2b00      	cmp	r3, #0
 800b462:	d0f0      	beq.n	800b446 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b464:	7bfb      	ldrb	r3, [r7, #15]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	58024400 	.word	0x58024400
 800b474:	ffff0007 	.word	0xffff0007

0800b478 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d101      	bne.n	800b48a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	e10f      	b.n	800b6aa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a87      	ldr	r2, [pc, #540]	@ (800b6b4 <HAL_SPI_Init+0x23c>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d00f      	beq.n	800b4ba <HAL_SPI_Init+0x42>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a86      	ldr	r2, [pc, #536]	@ (800b6b8 <HAL_SPI_Init+0x240>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d00a      	beq.n	800b4ba <HAL_SPI_Init+0x42>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a84      	ldr	r2, [pc, #528]	@ (800b6bc <HAL_SPI_Init+0x244>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d005      	beq.n	800b4ba <HAL_SPI_Init+0x42>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	2b0f      	cmp	r3, #15
 800b4b4:	d901      	bls.n	800b4ba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	e0f7      	b.n	800b6aa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fbbc 	bl	800bc38 <SPI_GetPacketSize>
 800b4c0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a7b      	ldr	r2, [pc, #492]	@ (800b6b4 <HAL_SPI_Init+0x23c>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d00c      	beq.n	800b4e6 <HAL_SPI_Init+0x6e>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a79      	ldr	r2, [pc, #484]	@ (800b6b8 <HAL_SPI_Init+0x240>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d007      	beq.n	800b4e6 <HAL_SPI_Init+0x6e>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a78      	ldr	r2, [pc, #480]	@ (800b6bc <HAL_SPI_Init+0x244>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d002      	beq.n	800b4e6 <HAL_SPI_Init+0x6e>
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2b08      	cmp	r3, #8
 800b4e4:	d811      	bhi.n	800b50a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b4ea:	4a72      	ldr	r2, [pc, #456]	@ (800b6b4 <HAL_SPI_Init+0x23c>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d009      	beq.n	800b504 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a70      	ldr	r2, [pc, #448]	@ (800b6b8 <HAL_SPI_Init+0x240>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d004      	beq.n	800b504 <HAL_SPI_Init+0x8c>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a6f      	ldr	r2, [pc, #444]	@ (800b6bc <HAL_SPI_Init+0x244>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d104      	bne.n	800b50e <HAL_SPI_Init+0x96>
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2b10      	cmp	r3, #16
 800b508:	d901      	bls.n	800b50e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b50a:	2301      	movs	r3, #1
 800b50c:	e0cd      	b.n	800b6aa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b514:	b2db      	uxtb	r3, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	d106      	bne.n	800b528 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7f6 fdde 	bl	80020e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2202      	movs	r2, #2
 800b52c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f022 0201 	bic.w	r2, r2, #1
 800b53e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b54a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	699b      	ldr	r3, [r3, #24]
 800b550:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b554:	d119      	bne.n	800b58a <HAL_SPI_Init+0x112>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b55e:	d103      	bne.n	800b568 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b564:	2b00      	cmp	r3, #0
 800b566:	d008      	beq.n	800b57a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10c      	bne.n	800b58a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b574:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b578:	d107      	bne.n	800b58a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b588:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00f      	beq.n	800b5b6 <HAL_SPI_Init+0x13e>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	2b06      	cmp	r3, #6
 800b59c:	d90b      	bls.n	800b5b6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	430a      	orrs	r2, r1
 800b5b2:	601a      	str	r2, [r3, #0]
 800b5b4:	e007      	b.n	800b5c6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b5c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	69da      	ldr	r2, [r3, #28]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ce:	431a      	orrs	r2, r3
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	431a      	orrs	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5d8:	ea42 0103 	orr.w	r1, r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	68da      	ldr	r2, [r3, #12]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	430a      	orrs	r2, r1
 800b5e6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5f0:	431a      	orrs	r2, r3
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5f6:	431a      	orrs	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	431a      	orrs	r2, r3
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	431a      	orrs	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	695b      	ldr	r3, [r3, #20]
 800b608:	431a      	orrs	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a1b      	ldr	r3, [r3, #32]
 800b60e:	431a      	orrs	r2, r3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	431a      	orrs	r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b61a:	431a      	orrs	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	689b      	ldr	r3, [r3, #8]
 800b620:	431a      	orrs	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b626:	ea42 0103 	orr.w	r1, r2, r3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	430a      	orrs	r2, r1
 800b634:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d113      	bne.n	800b666 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b650:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b664:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f022 0201 	bic.w	r2, r2, #1
 800b674:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00a      	beq.n	800b698 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	430a      	orrs	r2, r1
 800b696:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	40013000 	.word	0x40013000
 800b6b8:	40003800 	.word	0x40003800
 800b6bc:	40003c00 	.word	0x40003c00

0800b6c0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b088      	sub	sp, #32
 800b6c4:	af02      	add	r7, sp, #8
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	603b      	str	r3, [r7, #0]
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	3320      	adds	r3, #32
 800b6d6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b6d8:	f7f7 f886 	bl	80027e8 <HAL_GetTick>
 800b6dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d001      	beq.n	800b6ee <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b6ea:	2302      	movs	r3, #2
 800b6ec:	e1d1      	b.n	800ba92 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d002      	beq.n	800b6fa <HAL_SPI_Transmit+0x3a>
 800b6f4:	88fb      	ldrh	r3, [r7, #6]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d101      	bne.n	800b6fe <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	e1c9      	b.n	800ba92 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b704:	2b01      	cmp	r3, #1
 800b706:	d101      	bne.n	800b70c <HAL_SPI_Transmit+0x4c>
 800b708:	2302      	movs	r3, #2
 800b70a:	e1c2      	b.n	800ba92 <HAL_SPI_Transmit+0x3d2>
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2203      	movs	r2, #3
 800b718:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	68ba      	ldr	r2, [r7, #8]
 800b728:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	88fa      	ldrh	r2, [r7, #6]
 800b72e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	88fa      	ldrh	r2, [r7, #6]
 800b736:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2200      	movs	r2, #0
 800b73e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2200      	movs	r2, #0
 800b754:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2200      	movs	r2, #0
 800b75a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b764:	d108      	bne.n	800b778 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b774:	601a      	str	r2, [r3, #0]
 800b776:	e009      	b.n	800b78c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b78a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	685a      	ldr	r2, [r3, #4]
 800b792:	4b96      	ldr	r3, [pc, #600]	@ (800b9ec <HAL_SPI_Transmit+0x32c>)
 800b794:	4013      	ands	r3, r2
 800b796:	88f9      	ldrh	r1, [r7, #6]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	6812      	ldr	r2, [r2, #0]
 800b79c:	430b      	orrs	r3, r1
 800b79e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f042 0201 	orr.w	r2, r2, #1
 800b7ae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b7b8:	d107      	bne.n	800b7ca <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b7c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	2b0f      	cmp	r3, #15
 800b7d0:	d947      	bls.n	800b862 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b7d2:	e03f      	b.n	800b854 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	f003 0302 	and.w	r3, r3, #2
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d114      	bne.n	800b80c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	6812      	ldr	r2, [r2, #0]
 800b7ec:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7f2:	1d1a      	adds	r2, r3, #4
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	3b01      	subs	r3, #1
 800b802:	b29a      	uxth	r2, r3
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b80a:	e023      	b.n	800b854 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b80c:	f7f6 ffec 	bl	80027e8 <HAL_GetTick>
 800b810:	4602      	mov	r2, r0
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	1ad3      	subs	r3, r2, r3
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d803      	bhi.n	800b824 <HAL_SPI_Transmit+0x164>
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b822:	d102      	bne.n	800b82a <HAL_SPI_Transmit+0x16a>
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d114      	bne.n	800b854 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b82a:	68f8      	ldr	r0, [r7, #12]
 800b82c:	f000 f936 	bl	800ba9c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b836:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2200      	movs	r2, #0
 800b84c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b850:	2303      	movs	r3, #3
 800b852:	e11e      	b.n	800ba92 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1b9      	bne.n	800b7d4 <HAL_SPI_Transmit+0x114>
 800b860:	e0f1      	b.n	800ba46 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	2b07      	cmp	r3, #7
 800b868:	f240 80e6 	bls.w	800ba38 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b86c:	e05d      	b.n	800b92a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	695b      	ldr	r3, [r3, #20]
 800b874:	f003 0302 	and.w	r3, r3, #2
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d132      	bne.n	800b8e2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b882:	b29b      	uxth	r3, r3
 800b884:	2b01      	cmp	r3, #1
 800b886:	d918      	bls.n	800b8ba <HAL_SPI_Transmit+0x1fa>
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d014      	beq.n	800b8ba <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	6812      	ldr	r2, [r2, #0]
 800b89a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8a0:	1d1a      	adds	r2, r3, #4
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	3b02      	subs	r3, #2
 800b8b0:	b29a      	uxth	r2, r3
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b8b8:	e037      	b.n	800b92a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8be:	881a      	ldrh	r2, [r3, #0]
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8c8:	1c9a      	adds	r2, r3, #2
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	b29a      	uxth	r2, r3
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b8e0:	e023      	b.n	800b92a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b8e2:	f7f6 ff81 	bl	80027e8 <HAL_GetTick>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	683a      	ldr	r2, [r7, #0]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d803      	bhi.n	800b8fa <HAL_SPI_Transmit+0x23a>
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f8:	d102      	bne.n	800b900 <HAL_SPI_Transmit+0x240>
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d114      	bne.n	800b92a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f000 f8cb 	bl	800ba9c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b90c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b926:	2303      	movs	r3, #3
 800b928:	e0b3      	b.n	800ba92 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b930:	b29b      	uxth	r3, r3
 800b932:	2b00      	cmp	r3, #0
 800b934:	d19b      	bne.n	800b86e <HAL_SPI_Transmit+0x1ae>
 800b936:	e086      	b.n	800ba46 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	695b      	ldr	r3, [r3, #20]
 800b93e:	f003 0302 	and.w	r3, r3, #2
 800b942:	2b02      	cmp	r3, #2
 800b944:	d154      	bne.n	800b9f0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	2b03      	cmp	r3, #3
 800b950:	d918      	bls.n	800b984 <HAL_SPI_Transmit+0x2c4>
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b956:	2b40      	cmp	r3, #64	@ 0x40
 800b958:	d914      	bls.n	800b984 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	6812      	ldr	r2, [r2, #0]
 800b964:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b96a:	1d1a      	adds	r2, r3, #4
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b976:	b29b      	uxth	r3, r3
 800b978:	3b04      	subs	r3, #4
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b982:	e059      	b.n	800ba38 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d917      	bls.n	800b9c0 <HAL_SPI_Transmit+0x300>
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b994:	2b00      	cmp	r3, #0
 800b996:	d013      	beq.n	800b9c0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b99c:	881a      	ldrh	r2, [r3, #0]
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9a6:	1c9a      	adds	r2, r3, #2
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	3b02      	subs	r3, #2
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b9be:	e03b      	b.n	800ba38 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	3320      	adds	r3, #32
 800b9ca:	7812      	ldrb	r2, [r2, #0]
 800b9cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9d2:	1c5a      	adds	r2, r3, #1
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	b29a      	uxth	r2, r3
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b9ea:	e025      	b.n	800ba38 <HAL_SPI_Transmit+0x378>
 800b9ec:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b9f0:	f7f6 fefa 	bl	80027e8 <HAL_GetTick>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	1ad3      	subs	r3, r2, r3
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d803      	bhi.n	800ba08 <HAL_SPI_Transmit+0x348>
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba06:	d102      	bne.n	800ba0e <HAL_SPI_Transmit+0x34e>
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d114      	bne.n	800ba38 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f000 f844 	bl	800ba9c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ba34:	2303      	movs	r3, #3
 800ba36:	e02c      	b.n	800ba92 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	f47f af79 	bne.w	800b938 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	9300      	str	r3, [sp, #0]
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	2108      	movs	r1, #8
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f000 f8c3 	bl	800bbdc <SPI_WaitOnFlagUntilTimeout>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d007      	beq.n	800ba6c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba62:	f043 0220 	orr.w	r2, r3, #32
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f000 f815 	bl	800ba9c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2201      	movs	r2, #1
 800ba76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d001      	beq.n	800ba90 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e000      	b.n	800ba92 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800ba90:	2300      	movs	r3, #0
  }
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3718      	adds	r7, #24
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop

0800ba9c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b085      	sub	sp, #20
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	695b      	ldr	r3, [r3, #20]
 800baaa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	699a      	ldr	r2, [r3, #24]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f042 0208 	orr.w	r2, r2, #8
 800baba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	699a      	ldr	r2, [r3, #24]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f042 0210 	orr.w	r2, r2, #16
 800baca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f022 0201 	bic.w	r2, r2, #1
 800bada:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	6919      	ldr	r1, [r3, #16]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	4b3c      	ldr	r3, [pc, #240]	@ (800bbd8 <SPI_CloseTransfer+0x13c>)
 800bae8:	400b      	ands	r3, r1
 800baea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	689a      	ldr	r2, [r3, #8]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bafa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	2b04      	cmp	r3, #4
 800bb06:	d014      	beq.n	800bb32 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f003 0320 	and.w	r3, r3, #32
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00f      	beq.n	800bb32 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	699a      	ldr	r2, [r3, #24]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f042 0220 	orr.w	r2, r2, #32
 800bb30:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	2b03      	cmp	r3, #3
 800bb3c:	d014      	beq.n	800bb68 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d00f      	beq.n	800bb68 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb4e:	f043 0204 	orr.w	r2, r3, #4
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	699a      	ldr	r2, [r3, #24]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bb66:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00f      	beq.n	800bb92 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb78:	f043 0201 	orr.w	r2, r3, #1
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	699a      	ldr	r2, [r3, #24]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb90:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00f      	beq.n	800bbbc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bba2:	f043 0208 	orr.w	r2, r3, #8
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	699a      	ldr	r2, [r3, #24]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bbba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800bbcc:	bf00      	nop
 800bbce:	3714      	adds	r7, #20
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr
 800bbd8:	fffffc90 	.word	0xfffffc90

0800bbdc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	603b      	str	r3, [r7, #0]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bbec:	e010      	b.n	800bc10 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbee:	f7f6 fdfb 	bl	80027e8 <HAL_GetTick>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	69bb      	ldr	r3, [r7, #24]
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	683a      	ldr	r2, [r7, #0]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d803      	bhi.n	800bc06 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc04:	d102      	bne.n	800bc0c <SPI_WaitOnFlagUntilTimeout+0x30>
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d101      	bne.n	800bc10 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800bc0c:	2303      	movs	r3, #3
 800bc0e:	e00f      	b.n	800bc30 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	695a      	ldr	r2, [r3, #20]
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	4013      	ands	r3, r2
 800bc1a:	68ba      	ldr	r2, [r7, #8]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	bf0c      	ite	eq
 800bc20:	2301      	moveq	r3, #1
 800bc22:	2300      	movne	r3, #0
 800bc24:	b2db      	uxtb	r3, r3
 800bc26:	461a      	mov	r2, r3
 800bc28:	79fb      	ldrb	r3, [r7, #7]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d0df      	beq.n	800bbee <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc44:	095b      	lsrs	r3, r3, #5
 800bc46:	3301      	adds	r3, #1
 800bc48:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	68db      	ldr	r3, [r3, #12]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	3307      	adds	r3, #7
 800bc56:	08db      	lsrs	r3, r3, #3
 800bc58:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	fb02 f303 	mul.w	r3, r2, r3
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3714      	adds	r7, #20
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr

0800bc6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b082      	sub	sp, #8
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d101      	bne.n	800bc80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	e049      	b.n	800bd14 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d106      	bne.n	800bc9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7f6 fab3 	bl	8002200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2202      	movs	r2, #2
 800bc9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	3304      	adds	r3, #4
 800bcaa:	4619      	mov	r1, r3
 800bcac:	4610      	mov	r0, r2
 800bcae:	f000 fe4f 	bl	800c950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2201      	movs	r2, #1
 800bcce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2201      	movs	r2, #1
 800bcde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2201      	movs	r2, #1
 800bce6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2201      	movs	r2, #1
 800bcee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2201      	movs	r2, #1
 800bd06:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bd12:	2300      	movs	r3, #0
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3708      	adds	r7, #8
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b085      	sub	sp, #20
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d001      	beq.n	800bd34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e05e      	b.n	800bdf2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2202      	movs	r2, #2
 800bd38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	68da      	ldr	r2, [r3, #12]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f042 0201 	orr.w	r2, r2, #1
 800bd4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a2b      	ldr	r2, [pc, #172]	@ (800be00 <HAL_TIM_Base_Start_IT+0xe4>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d02c      	beq.n	800bdb0 <HAL_TIM_Base_Start_IT+0x94>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd5e:	d027      	beq.n	800bdb0 <HAL_TIM_Base_Start_IT+0x94>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a27      	ldr	r2, [pc, #156]	@ (800be04 <HAL_TIM_Base_Start_IT+0xe8>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d022      	beq.n	800bdb0 <HAL_TIM_Base_Start_IT+0x94>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a26      	ldr	r2, [pc, #152]	@ (800be08 <HAL_TIM_Base_Start_IT+0xec>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d01d      	beq.n	800bdb0 <HAL_TIM_Base_Start_IT+0x94>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a24      	ldr	r2, [pc, #144]	@ (800be0c <HAL_TIM_Base_Start_IT+0xf0>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d018      	beq.n	800bdb0 <HAL_TIM_Base_Start_IT+0x94>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a23      	ldr	r2, [pc, #140]	@ (800be10 <HAL_TIM_Base_Start_IT+0xf4>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d013      	beq.n	800bdb0 <HAL_TIM_Base_Start_IT+0x94>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a21      	ldr	r2, [pc, #132]	@ (800be14 <HAL_TIM_Base_Start_IT+0xf8>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d00e      	beq.n	800bdb0 <HAL_TIM_Base_Start_IT+0x94>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a20      	ldr	r2, [pc, #128]	@ (800be18 <HAL_TIM_Base_Start_IT+0xfc>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d009      	beq.n	800bdb0 <HAL_TIM_Base_Start_IT+0x94>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a1e      	ldr	r2, [pc, #120]	@ (800be1c <HAL_TIM_Base_Start_IT+0x100>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d004      	beq.n	800bdb0 <HAL_TIM_Base_Start_IT+0x94>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a1d      	ldr	r2, [pc, #116]	@ (800be20 <HAL_TIM_Base_Start_IT+0x104>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d115      	bne.n	800bddc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	689a      	ldr	r2, [r3, #8]
 800bdb6:	4b1b      	ldr	r3, [pc, #108]	@ (800be24 <HAL_TIM_Base_Start_IT+0x108>)
 800bdb8:	4013      	ands	r3, r2
 800bdba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2b06      	cmp	r3, #6
 800bdc0:	d015      	beq.n	800bdee <HAL_TIM_Base_Start_IT+0xd2>
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdc8:	d011      	beq.n	800bdee <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f042 0201 	orr.w	r2, r2, #1
 800bdd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdda:	e008      	b.n	800bdee <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f042 0201 	orr.w	r2, r2, #1
 800bdea:	601a      	str	r2, [r3, #0]
 800bdec:	e000      	b.n	800bdf0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3714      	adds	r7, #20
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	40010000 	.word	0x40010000
 800be04:	40000400 	.word	0x40000400
 800be08:	40000800 	.word	0x40000800
 800be0c:	40000c00 	.word	0x40000c00
 800be10:	40010400 	.word	0x40010400
 800be14:	40001800 	.word	0x40001800
 800be18:	40014000 	.word	0x40014000
 800be1c:	4000e000 	.word	0x4000e000
 800be20:	4000e400 	.word	0x4000e400
 800be24:	00010007 	.word	0x00010007

0800be28 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d101      	bne.n	800be3a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	e049      	b.n	800bece <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2b00      	cmp	r3, #0
 800be44:	d106      	bne.n	800be54 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 f841 	bl	800bed6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2202      	movs	r2, #2
 800be58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	3304      	adds	r3, #4
 800be64:	4619      	mov	r1, r3
 800be66:	4610      	mov	r0, r2
 800be68:	f000 fd72 	bl	800c950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2201      	movs	r2, #1
 800be70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2201      	movs	r2, #1
 800be78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2201      	movs	r2, #1
 800be80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2201      	movs	r2, #1
 800be88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2201      	movs	r2, #1
 800be90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2201      	movs	r2, #1
 800be98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2201      	movs	r2, #1
 800bea0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2201      	movs	r2, #1
 800bea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2201      	movs	r2, #1
 800beb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2201      	movs	r2, #1
 800beb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2201      	movs	r2, #1
 800bec0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2201      	movs	r2, #1
 800bec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800becc:	2300      	movs	r3, #0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3708      	adds	r7, #8
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800bed6:	b480      	push	{r7}
 800bed8:	b083      	sub	sp, #12
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800bede:	bf00      	nop
 800bee0:	370c      	adds	r7, #12
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr

0800beea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800beea:	b580      	push	{r7, lr}
 800beec:	b082      	sub	sp, #8
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d101      	bne.n	800befc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bef8:	2301      	movs	r3, #1
 800befa:	e049      	b.n	800bf90 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d106      	bne.n	800bf16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 f841 	bl	800bf98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2202      	movs	r2, #2
 800bf1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	3304      	adds	r3, #4
 800bf26:	4619      	mov	r1, r3
 800bf28:	4610      	mov	r0, r2
 800bf2a:	f000 fd11 	bl	800c950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2201      	movs	r2, #1
 800bf32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2201      	movs	r2, #1
 800bf42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2201      	movs	r2, #1
 800bf52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2201      	movs	r2, #1
 800bf5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2201      	movs	r2, #1
 800bf62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2201      	movs	r2, #1
 800bf72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2201      	movs	r2, #1
 800bf7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2201      	movs	r2, #1
 800bf82:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2201      	movs	r2, #1
 800bf8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bf8e:	2300      	movs	r3, #0
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3708      	adds	r7, #8
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b083      	sub	sp, #12
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d109      	bne.n	800bfd0 <HAL_TIM_PWM_Start+0x24>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	bf14      	ite	ne
 800bfc8:	2301      	movne	r3, #1
 800bfca:	2300      	moveq	r3, #0
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	e03c      	b.n	800c04a <HAL_TIM_PWM_Start+0x9e>
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	2b04      	cmp	r3, #4
 800bfd4:	d109      	bne.n	800bfea <HAL_TIM_PWM_Start+0x3e>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	bf14      	ite	ne
 800bfe2:	2301      	movne	r3, #1
 800bfe4:	2300      	moveq	r3, #0
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	e02f      	b.n	800c04a <HAL_TIM_PWM_Start+0x9e>
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b08      	cmp	r3, #8
 800bfee:	d109      	bne.n	800c004 <HAL_TIM_PWM_Start+0x58>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	bf14      	ite	ne
 800bffc:	2301      	movne	r3, #1
 800bffe:	2300      	moveq	r3, #0
 800c000:	b2db      	uxtb	r3, r3
 800c002:	e022      	b.n	800c04a <HAL_TIM_PWM_Start+0x9e>
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	2b0c      	cmp	r3, #12
 800c008:	d109      	bne.n	800c01e <HAL_TIM_PWM_Start+0x72>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c010:	b2db      	uxtb	r3, r3
 800c012:	2b01      	cmp	r3, #1
 800c014:	bf14      	ite	ne
 800c016:	2301      	movne	r3, #1
 800c018:	2300      	moveq	r3, #0
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	e015      	b.n	800c04a <HAL_TIM_PWM_Start+0x9e>
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	2b10      	cmp	r3, #16
 800c022:	d109      	bne.n	800c038 <HAL_TIM_PWM_Start+0x8c>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	bf14      	ite	ne
 800c030:	2301      	movne	r3, #1
 800c032:	2300      	moveq	r3, #0
 800c034:	b2db      	uxtb	r3, r3
 800c036:	e008      	b.n	800c04a <HAL_TIM_PWM_Start+0x9e>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	2b01      	cmp	r3, #1
 800c042:	bf14      	ite	ne
 800c044:	2301      	movne	r3, #1
 800c046:	2300      	moveq	r3, #0
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d001      	beq.n	800c052 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c04e:	2301      	movs	r3, #1
 800c050:	e0ab      	b.n	800c1aa <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d104      	bne.n	800c062 <HAL_TIM_PWM_Start+0xb6>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2202      	movs	r2, #2
 800c05c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c060:	e023      	b.n	800c0aa <HAL_TIM_PWM_Start+0xfe>
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	2b04      	cmp	r3, #4
 800c066:	d104      	bne.n	800c072 <HAL_TIM_PWM_Start+0xc6>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2202      	movs	r2, #2
 800c06c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c070:	e01b      	b.n	800c0aa <HAL_TIM_PWM_Start+0xfe>
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	2b08      	cmp	r3, #8
 800c076:	d104      	bne.n	800c082 <HAL_TIM_PWM_Start+0xd6>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2202      	movs	r2, #2
 800c07c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c080:	e013      	b.n	800c0aa <HAL_TIM_PWM_Start+0xfe>
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	2b0c      	cmp	r3, #12
 800c086:	d104      	bne.n	800c092 <HAL_TIM_PWM_Start+0xe6>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2202      	movs	r2, #2
 800c08c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c090:	e00b      	b.n	800c0aa <HAL_TIM_PWM_Start+0xfe>
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	2b10      	cmp	r3, #16
 800c096:	d104      	bne.n	800c0a2 <HAL_TIM_PWM_Start+0xf6>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2202      	movs	r2, #2
 800c09c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c0a0:	e003      	b.n	800c0aa <HAL_TIM_PWM_Start+0xfe>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2202      	movs	r2, #2
 800c0a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	6839      	ldr	r1, [r7, #0]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f001 f86c 	bl	800d190 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a3d      	ldr	r2, [pc, #244]	@ (800c1b4 <HAL_TIM_PWM_Start+0x208>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d013      	beq.n	800c0ea <HAL_TIM_PWM_Start+0x13e>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a3c      	ldr	r2, [pc, #240]	@ (800c1b8 <HAL_TIM_PWM_Start+0x20c>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d00e      	beq.n	800c0ea <HAL_TIM_PWM_Start+0x13e>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a3a      	ldr	r2, [pc, #232]	@ (800c1bc <HAL_TIM_PWM_Start+0x210>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d009      	beq.n	800c0ea <HAL_TIM_PWM_Start+0x13e>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a39      	ldr	r2, [pc, #228]	@ (800c1c0 <HAL_TIM_PWM_Start+0x214>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d004      	beq.n	800c0ea <HAL_TIM_PWM_Start+0x13e>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a37      	ldr	r2, [pc, #220]	@ (800c1c4 <HAL_TIM_PWM_Start+0x218>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d101      	bne.n	800c0ee <HAL_TIM_PWM_Start+0x142>
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e000      	b.n	800c0f0 <HAL_TIM_PWM_Start+0x144>
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d007      	beq.n	800c104 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c102:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a2a      	ldr	r2, [pc, #168]	@ (800c1b4 <HAL_TIM_PWM_Start+0x208>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d02c      	beq.n	800c168 <HAL_TIM_PWM_Start+0x1bc>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c116:	d027      	beq.n	800c168 <HAL_TIM_PWM_Start+0x1bc>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a2a      	ldr	r2, [pc, #168]	@ (800c1c8 <HAL_TIM_PWM_Start+0x21c>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d022      	beq.n	800c168 <HAL_TIM_PWM_Start+0x1bc>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a29      	ldr	r2, [pc, #164]	@ (800c1cc <HAL_TIM_PWM_Start+0x220>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d01d      	beq.n	800c168 <HAL_TIM_PWM_Start+0x1bc>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4a27      	ldr	r2, [pc, #156]	@ (800c1d0 <HAL_TIM_PWM_Start+0x224>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d018      	beq.n	800c168 <HAL_TIM_PWM_Start+0x1bc>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a1f      	ldr	r2, [pc, #124]	@ (800c1b8 <HAL_TIM_PWM_Start+0x20c>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d013      	beq.n	800c168 <HAL_TIM_PWM_Start+0x1bc>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a23      	ldr	r2, [pc, #140]	@ (800c1d4 <HAL_TIM_PWM_Start+0x228>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d00e      	beq.n	800c168 <HAL_TIM_PWM_Start+0x1bc>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a1b      	ldr	r2, [pc, #108]	@ (800c1bc <HAL_TIM_PWM_Start+0x210>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d009      	beq.n	800c168 <HAL_TIM_PWM_Start+0x1bc>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a1f      	ldr	r2, [pc, #124]	@ (800c1d8 <HAL_TIM_PWM_Start+0x22c>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d004      	beq.n	800c168 <HAL_TIM_PWM_Start+0x1bc>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a1e      	ldr	r2, [pc, #120]	@ (800c1dc <HAL_TIM_PWM_Start+0x230>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d115      	bne.n	800c194 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	689a      	ldr	r2, [r3, #8]
 800c16e:	4b1c      	ldr	r3, [pc, #112]	@ (800c1e0 <HAL_TIM_PWM_Start+0x234>)
 800c170:	4013      	ands	r3, r2
 800c172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2b06      	cmp	r3, #6
 800c178:	d015      	beq.n	800c1a6 <HAL_TIM_PWM_Start+0x1fa>
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c180:	d011      	beq.n	800c1a6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	681a      	ldr	r2, [r3, #0]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f042 0201 	orr.w	r2, r2, #1
 800c190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c192:	e008      	b.n	800c1a6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f042 0201 	orr.w	r2, r2, #1
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	e000      	b.n	800c1a8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	40010000 	.word	0x40010000
 800c1b8:	40010400 	.word	0x40010400
 800c1bc:	40014000 	.word	0x40014000
 800c1c0:	40014400 	.word	0x40014400
 800c1c4:	40014800 	.word	0x40014800
 800c1c8:	40000400 	.word	0x40000400
 800c1cc:	40000800 	.word	0x40000800
 800c1d0:	40000c00 	.word	0x40000c00
 800c1d4:	40001800 	.word	0x40001800
 800c1d8:	4000e000 	.word	0x4000e000
 800c1dc:	4000e400 	.word	0x4000e400
 800c1e0:	00010007 	.word	0x00010007

0800c1e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	f003 0302 	and.w	r3, r3, #2
 800c202:	2b00      	cmp	r3, #0
 800c204:	d020      	beq.n	800c248 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f003 0302 	and.w	r3, r3, #2
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d01b      	beq.n	800c248 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f06f 0202 	mvn.w	r2, #2
 800c218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2201      	movs	r2, #1
 800c21e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	699b      	ldr	r3, [r3, #24]
 800c226:	f003 0303 	and.w	r3, r3, #3
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d003      	beq.n	800c236 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 fb70 	bl	800c914 <HAL_TIM_IC_CaptureCallback>
 800c234:	e005      	b.n	800c242 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 fb62 	bl	800c900 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fb73 	bl	800c928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	f003 0304 	and.w	r3, r3, #4
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d020      	beq.n	800c294 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f003 0304 	and.w	r3, r3, #4
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d01b      	beq.n	800c294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f06f 0204 	mvn.w	r2, #4
 800c264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2202      	movs	r2, #2
 800c26a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	699b      	ldr	r3, [r3, #24]
 800c272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c276:	2b00      	cmp	r3, #0
 800c278:	d003      	beq.n	800c282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 fb4a 	bl	800c914 <HAL_TIM_IC_CaptureCallback>
 800c280:	e005      	b.n	800c28e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 fb3c 	bl	800c900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 fb4d 	bl	800c928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	f003 0308 	and.w	r3, r3, #8
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d020      	beq.n	800c2e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f003 0308 	and.w	r3, r3, #8
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d01b      	beq.n	800c2e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f06f 0208 	mvn.w	r2, #8
 800c2b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2204      	movs	r2, #4
 800c2b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	69db      	ldr	r3, [r3, #28]
 800c2be:	f003 0303 	and.w	r3, r3, #3
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d003      	beq.n	800c2ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 fb24 	bl	800c914 <HAL_TIM_IC_CaptureCallback>
 800c2cc:	e005      	b.n	800c2da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 fb16 	bl	800c900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 fb27 	bl	800c928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	f003 0310 	and.w	r3, r3, #16
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d020      	beq.n	800c32c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f003 0310 	and.w	r3, r3, #16
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d01b      	beq.n	800c32c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f06f 0210 	mvn.w	r2, #16
 800c2fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2208      	movs	r2, #8
 800c302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	69db      	ldr	r3, [r3, #28]
 800c30a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d003      	beq.n	800c31a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 fafe 	bl	800c914 <HAL_TIM_IC_CaptureCallback>
 800c318:	e005      	b.n	800c326 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 faf0 	bl	800c900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f000 fb01 	bl	800c928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	f003 0301 	and.w	r3, r3, #1
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00c      	beq.n	800c350 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f003 0301 	and.w	r3, r3, #1
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d007      	beq.n	800c350 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f06f 0201 	mvn.w	r2, #1
 800c348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f7f5 fa22 	bl	8001794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c356:	2b00      	cmp	r3, #0
 800c358:	d104      	bne.n	800c364 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c360:	2b00      	cmp	r3, #0
 800c362:	d00c      	beq.n	800c37e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d007      	beq.n	800c37e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 ffd5 	bl	800d328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00c      	beq.n	800c3a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d007      	beq.n	800c3a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c39a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 ffcd 	bl	800d33c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00c      	beq.n	800c3c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d007      	beq.n	800c3c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c3be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 fabb 	bl	800c93c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	f003 0320 	and.w	r3, r3, #32
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00c      	beq.n	800c3ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f003 0320 	and.w	r3, r3, #32
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d007      	beq.n	800c3ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f06f 0220 	mvn.w	r2, #32
 800c3e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f000 ff95 	bl	800d314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c3ea:	bf00      	nop
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
	...

0800c3f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b086      	sub	sp, #24
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c400:	2300      	movs	r3, #0
 800c402:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d101      	bne.n	800c412 <HAL_TIM_OC_ConfigChannel+0x1e>
 800c40e:	2302      	movs	r3, #2
 800c410:	e066      	b.n	800c4e0 <HAL_TIM_OC_ConfigChannel+0xec>
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2201      	movs	r2, #1
 800c416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2b14      	cmp	r3, #20
 800c41e:	d857      	bhi.n	800c4d0 <HAL_TIM_OC_ConfigChannel+0xdc>
 800c420:	a201      	add	r2, pc, #4	@ (adr r2, 800c428 <HAL_TIM_OC_ConfigChannel+0x34>)
 800c422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c426:	bf00      	nop
 800c428:	0800c47d 	.word	0x0800c47d
 800c42c:	0800c4d1 	.word	0x0800c4d1
 800c430:	0800c4d1 	.word	0x0800c4d1
 800c434:	0800c4d1 	.word	0x0800c4d1
 800c438:	0800c48b 	.word	0x0800c48b
 800c43c:	0800c4d1 	.word	0x0800c4d1
 800c440:	0800c4d1 	.word	0x0800c4d1
 800c444:	0800c4d1 	.word	0x0800c4d1
 800c448:	0800c499 	.word	0x0800c499
 800c44c:	0800c4d1 	.word	0x0800c4d1
 800c450:	0800c4d1 	.word	0x0800c4d1
 800c454:	0800c4d1 	.word	0x0800c4d1
 800c458:	0800c4a7 	.word	0x0800c4a7
 800c45c:	0800c4d1 	.word	0x0800c4d1
 800c460:	0800c4d1 	.word	0x0800c4d1
 800c464:	0800c4d1 	.word	0x0800c4d1
 800c468:	0800c4b5 	.word	0x0800c4b5
 800c46c:	0800c4d1 	.word	0x0800c4d1
 800c470:	0800c4d1 	.word	0x0800c4d1
 800c474:	0800c4d1 	.word	0x0800c4d1
 800c478:	0800c4c3 	.word	0x0800c4c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	68b9      	ldr	r1, [r7, #8]
 800c482:	4618      	mov	r0, r3
 800c484:	f000 fb10 	bl	800caa8 <TIM_OC1_SetConfig>
      break;
 800c488:	e025      	b.n	800c4d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	68b9      	ldr	r1, [r7, #8]
 800c490:	4618      	mov	r0, r3
 800c492:	f000 fb99 	bl	800cbc8 <TIM_OC2_SetConfig>
      break;
 800c496:	e01e      	b.n	800c4d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	68b9      	ldr	r1, [r7, #8]
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f000 fc1c 	bl	800ccdc <TIM_OC3_SetConfig>
      break;
 800c4a4:	e017      	b.n	800c4d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68b9      	ldr	r1, [r7, #8]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f000 fc9d 	bl	800cdec <TIM_OC4_SetConfig>
      break;
 800c4b2:	e010      	b.n	800c4d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	68b9      	ldr	r1, [r7, #8]
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f000 fd00 	bl	800cec0 <TIM_OC5_SetConfig>
      break;
 800c4c0:	e009      	b.n	800c4d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	68b9      	ldr	r1, [r7, #8]
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f000 fd5d 	bl	800cf88 <TIM_OC6_SetConfig>
      break;
 800c4ce:	e002      	b.n	800c4d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	75fb      	strb	r3, [r7, #23]
      break;
 800c4d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c4de:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3718      	adds	r7, #24
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d101      	bne.n	800c506 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c502:	2302      	movs	r3, #2
 800c504:	e0ff      	b.n	800c706 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2201      	movs	r2, #1
 800c50a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2b14      	cmp	r3, #20
 800c512:	f200 80f0 	bhi.w	800c6f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c516:	a201      	add	r2, pc, #4	@ (adr r2, 800c51c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c51c:	0800c571 	.word	0x0800c571
 800c520:	0800c6f7 	.word	0x0800c6f7
 800c524:	0800c6f7 	.word	0x0800c6f7
 800c528:	0800c6f7 	.word	0x0800c6f7
 800c52c:	0800c5b1 	.word	0x0800c5b1
 800c530:	0800c6f7 	.word	0x0800c6f7
 800c534:	0800c6f7 	.word	0x0800c6f7
 800c538:	0800c6f7 	.word	0x0800c6f7
 800c53c:	0800c5f3 	.word	0x0800c5f3
 800c540:	0800c6f7 	.word	0x0800c6f7
 800c544:	0800c6f7 	.word	0x0800c6f7
 800c548:	0800c6f7 	.word	0x0800c6f7
 800c54c:	0800c633 	.word	0x0800c633
 800c550:	0800c6f7 	.word	0x0800c6f7
 800c554:	0800c6f7 	.word	0x0800c6f7
 800c558:	0800c6f7 	.word	0x0800c6f7
 800c55c:	0800c675 	.word	0x0800c675
 800c560:	0800c6f7 	.word	0x0800c6f7
 800c564:	0800c6f7 	.word	0x0800c6f7
 800c568:	0800c6f7 	.word	0x0800c6f7
 800c56c:	0800c6b5 	.word	0x0800c6b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	68b9      	ldr	r1, [r7, #8]
 800c576:	4618      	mov	r0, r3
 800c578:	f000 fa96 	bl	800caa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	699a      	ldr	r2, [r3, #24]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f042 0208 	orr.w	r2, r2, #8
 800c58a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	699a      	ldr	r2, [r3, #24]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f022 0204 	bic.w	r2, r2, #4
 800c59a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	6999      	ldr	r1, [r3, #24]
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	691a      	ldr	r2, [r3, #16]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	430a      	orrs	r2, r1
 800c5ac:	619a      	str	r2, [r3, #24]
      break;
 800c5ae:	e0a5      	b.n	800c6fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	68b9      	ldr	r1, [r7, #8]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f000 fb06 	bl	800cbc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	699a      	ldr	r2, [r3, #24]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c5ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	699a      	ldr	r2, [r3, #24]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c5da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	6999      	ldr	r1, [r3, #24]
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	021a      	lsls	r2, r3, #8
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	430a      	orrs	r2, r1
 800c5ee:	619a      	str	r2, [r3, #24]
      break;
 800c5f0:	e084      	b.n	800c6fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	68b9      	ldr	r1, [r7, #8]
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f000 fb6f 	bl	800ccdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	69da      	ldr	r2, [r3, #28]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f042 0208 	orr.w	r2, r2, #8
 800c60c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	69da      	ldr	r2, [r3, #28]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f022 0204 	bic.w	r2, r2, #4
 800c61c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	69d9      	ldr	r1, [r3, #28]
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	691a      	ldr	r2, [r3, #16]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	430a      	orrs	r2, r1
 800c62e:	61da      	str	r2, [r3, #28]
      break;
 800c630:	e064      	b.n	800c6fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	68b9      	ldr	r1, [r7, #8]
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 fbd7 	bl	800cdec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	69da      	ldr	r2, [r3, #28]
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c64c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	69da      	ldr	r2, [r3, #28]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c65c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	69d9      	ldr	r1, [r3, #28]
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	691b      	ldr	r3, [r3, #16]
 800c668:	021a      	lsls	r2, r3, #8
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	430a      	orrs	r2, r1
 800c670:	61da      	str	r2, [r3, #28]
      break;
 800c672:	e043      	b.n	800c6fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68b9      	ldr	r1, [r7, #8]
 800c67a:	4618      	mov	r0, r3
 800c67c:	f000 fc20 	bl	800cec0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f042 0208 	orr.w	r2, r2, #8
 800c68e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f022 0204 	bic.w	r2, r2, #4
 800c69e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	691a      	ldr	r2, [r3, #16]
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	430a      	orrs	r2, r1
 800c6b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c6b2:	e023      	b.n	800c6fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	68b9      	ldr	r1, [r7, #8]
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f000 fc64 	bl	800cf88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c6ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c6de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	691b      	ldr	r3, [r3, #16]
 800c6ea:	021a      	lsls	r2, r3, #8
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	430a      	orrs	r2, r1
 800c6f2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c6f4:	e002      	b.n	800c6fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	75fb      	strb	r3, [r7, #23]
      break;
 800c6fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2200      	movs	r2, #0
 800c700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c704:	7dfb      	ldrb	r3, [r7, #23]
}
 800c706:	4618      	mov	r0, r3
 800c708:	3718      	adds	r7, #24
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop

0800c710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c71a:	2300      	movs	r3, #0
 800c71c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c724:	2b01      	cmp	r3, #1
 800c726:	d101      	bne.n	800c72c <HAL_TIM_ConfigClockSource+0x1c>
 800c728:	2302      	movs	r3, #2
 800c72a:	e0dc      	b.n	800c8e6 <HAL_TIM_ConfigClockSource+0x1d6>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2201      	movs	r2, #1
 800c730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2202      	movs	r2, #2
 800c738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c744:	68ba      	ldr	r2, [r7, #8]
 800c746:	4b6a      	ldr	r3, [pc, #424]	@ (800c8f0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c748:	4013      	ands	r3, r2
 800c74a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c752:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	68ba      	ldr	r2, [r7, #8]
 800c75a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4a64      	ldr	r2, [pc, #400]	@ (800c8f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c762:	4293      	cmp	r3, r2
 800c764:	f000 80a9 	beq.w	800c8ba <HAL_TIM_ConfigClockSource+0x1aa>
 800c768:	4a62      	ldr	r2, [pc, #392]	@ (800c8f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	f200 80ae 	bhi.w	800c8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800c770:	4a61      	ldr	r2, [pc, #388]	@ (800c8f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c772:	4293      	cmp	r3, r2
 800c774:	f000 80a1 	beq.w	800c8ba <HAL_TIM_ConfigClockSource+0x1aa>
 800c778:	4a5f      	ldr	r2, [pc, #380]	@ (800c8f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	f200 80a6 	bhi.w	800c8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800c780:	4a5e      	ldr	r2, [pc, #376]	@ (800c8fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800c782:	4293      	cmp	r3, r2
 800c784:	f000 8099 	beq.w	800c8ba <HAL_TIM_ConfigClockSource+0x1aa>
 800c788:	4a5c      	ldr	r2, [pc, #368]	@ (800c8fc <HAL_TIM_ConfigClockSource+0x1ec>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	f200 809e 	bhi.w	800c8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800c790:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c794:	f000 8091 	beq.w	800c8ba <HAL_TIM_ConfigClockSource+0x1aa>
 800c798:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c79c:	f200 8096 	bhi.w	800c8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800c7a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c7a4:	f000 8089 	beq.w	800c8ba <HAL_TIM_ConfigClockSource+0x1aa>
 800c7a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c7ac:	f200 808e 	bhi.w	800c8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800c7b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7b4:	d03e      	beq.n	800c834 <HAL_TIM_ConfigClockSource+0x124>
 800c7b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7ba:	f200 8087 	bhi.w	800c8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800c7be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7c2:	f000 8086 	beq.w	800c8d2 <HAL_TIM_ConfigClockSource+0x1c2>
 800c7c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7ca:	d87f      	bhi.n	800c8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800c7cc:	2b70      	cmp	r3, #112	@ 0x70
 800c7ce:	d01a      	beq.n	800c806 <HAL_TIM_ConfigClockSource+0xf6>
 800c7d0:	2b70      	cmp	r3, #112	@ 0x70
 800c7d2:	d87b      	bhi.n	800c8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800c7d4:	2b60      	cmp	r3, #96	@ 0x60
 800c7d6:	d050      	beq.n	800c87a <HAL_TIM_ConfigClockSource+0x16a>
 800c7d8:	2b60      	cmp	r3, #96	@ 0x60
 800c7da:	d877      	bhi.n	800c8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800c7dc:	2b50      	cmp	r3, #80	@ 0x50
 800c7de:	d03c      	beq.n	800c85a <HAL_TIM_ConfigClockSource+0x14a>
 800c7e0:	2b50      	cmp	r3, #80	@ 0x50
 800c7e2:	d873      	bhi.n	800c8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800c7e4:	2b40      	cmp	r3, #64	@ 0x40
 800c7e6:	d058      	beq.n	800c89a <HAL_TIM_ConfigClockSource+0x18a>
 800c7e8:	2b40      	cmp	r3, #64	@ 0x40
 800c7ea:	d86f      	bhi.n	800c8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800c7ec:	2b30      	cmp	r3, #48	@ 0x30
 800c7ee:	d064      	beq.n	800c8ba <HAL_TIM_ConfigClockSource+0x1aa>
 800c7f0:	2b30      	cmp	r3, #48	@ 0x30
 800c7f2:	d86b      	bhi.n	800c8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800c7f4:	2b20      	cmp	r3, #32
 800c7f6:	d060      	beq.n	800c8ba <HAL_TIM_ConfigClockSource+0x1aa>
 800c7f8:	2b20      	cmp	r3, #32
 800c7fa:	d867      	bhi.n	800c8cc <HAL_TIM_ConfigClockSource+0x1bc>
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d05c      	beq.n	800c8ba <HAL_TIM_ConfigClockSource+0x1aa>
 800c800:	2b10      	cmp	r3, #16
 800c802:	d05a      	beq.n	800c8ba <HAL_TIM_ConfigClockSource+0x1aa>
 800c804:	e062      	b.n	800c8cc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c816:	f000 fc9b 	bl	800d150 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c828:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	68ba      	ldr	r2, [r7, #8]
 800c830:	609a      	str	r2, [r3, #8]
      break;
 800c832:	e04f      	b.n	800c8d4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c844:	f000 fc84 	bl	800d150 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	689a      	ldr	r2, [r3, #8]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c856:	609a      	str	r2, [r3, #8]
      break;
 800c858:	e03c      	b.n	800c8d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c866:	461a      	mov	r2, r3
 800c868:	f000 fbf4 	bl	800d054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2150      	movs	r1, #80	@ 0x50
 800c872:	4618      	mov	r0, r3
 800c874:	f000 fc4e 	bl	800d114 <TIM_ITRx_SetConfig>
      break;
 800c878:	e02c      	b.n	800c8d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c886:	461a      	mov	r2, r3
 800c888:	f000 fc13 	bl	800d0b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2160      	movs	r1, #96	@ 0x60
 800c892:	4618      	mov	r0, r3
 800c894:	f000 fc3e 	bl	800d114 <TIM_ITRx_SetConfig>
      break;
 800c898:	e01c      	b.n	800c8d4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	f000 fbd4 	bl	800d054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2140      	movs	r1, #64	@ 0x40
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 fc2e 	bl	800d114 <TIM_ITRx_SetConfig>
      break;
 800c8b8:	e00c      	b.n	800c8d4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	f000 fc25 	bl	800d114 <TIM_ITRx_SetConfig>
      break;
 800c8ca:	e003      	b.n	800c8d4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	73fb      	strb	r3, [r7, #15]
      break;
 800c8d0:	e000      	b.n	800c8d4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c8d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	ffceff88 	.word	0xffceff88
 800c8f4:	00100040 	.word	0x00100040
 800c8f8:	00100030 	.word	0x00100030
 800c8fc:	00100020 	.word	0x00100020

0800c900 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c900:	b480      	push	{r7}
 800c902:	b083      	sub	sp, #12
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c908:	bf00      	nop
 800c90a:	370c      	adds	r7, #12
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr

0800c914 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c91c:	bf00      	nop
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c930:	bf00      	nop
 800c932:	370c      	adds	r7, #12
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr

0800c93c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c944:	bf00      	nop
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c950:	b480      	push	{r7}
 800c952:	b085      	sub	sp, #20
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4a47      	ldr	r2, [pc, #284]	@ (800ca80 <TIM_Base_SetConfig+0x130>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d013      	beq.n	800c990 <TIM_Base_SetConfig+0x40>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c96e:	d00f      	beq.n	800c990 <TIM_Base_SetConfig+0x40>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4a44      	ldr	r2, [pc, #272]	@ (800ca84 <TIM_Base_SetConfig+0x134>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d00b      	beq.n	800c990 <TIM_Base_SetConfig+0x40>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	4a43      	ldr	r2, [pc, #268]	@ (800ca88 <TIM_Base_SetConfig+0x138>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d007      	beq.n	800c990 <TIM_Base_SetConfig+0x40>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	4a42      	ldr	r2, [pc, #264]	@ (800ca8c <TIM_Base_SetConfig+0x13c>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d003      	beq.n	800c990 <TIM_Base_SetConfig+0x40>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	4a41      	ldr	r2, [pc, #260]	@ (800ca90 <TIM_Base_SetConfig+0x140>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d108      	bne.n	800c9a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	68fa      	ldr	r2, [r7, #12]
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	4a36      	ldr	r2, [pc, #216]	@ (800ca80 <TIM_Base_SetConfig+0x130>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d027      	beq.n	800c9fa <TIM_Base_SetConfig+0xaa>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9b0:	d023      	beq.n	800c9fa <TIM_Base_SetConfig+0xaa>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4a33      	ldr	r2, [pc, #204]	@ (800ca84 <TIM_Base_SetConfig+0x134>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d01f      	beq.n	800c9fa <TIM_Base_SetConfig+0xaa>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4a32      	ldr	r2, [pc, #200]	@ (800ca88 <TIM_Base_SetConfig+0x138>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d01b      	beq.n	800c9fa <TIM_Base_SetConfig+0xaa>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4a31      	ldr	r2, [pc, #196]	@ (800ca8c <TIM_Base_SetConfig+0x13c>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d017      	beq.n	800c9fa <TIM_Base_SetConfig+0xaa>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4a30      	ldr	r2, [pc, #192]	@ (800ca90 <TIM_Base_SetConfig+0x140>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d013      	beq.n	800c9fa <TIM_Base_SetConfig+0xaa>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	4a2f      	ldr	r2, [pc, #188]	@ (800ca94 <TIM_Base_SetConfig+0x144>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d00f      	beq.n	800c9fa <TIM_Base_SetConfig+0xaa>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4a2e      	ldr	r2, [pc, #184]	@ (800ca98 <TIM_Base_SetConfig+0x148>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d00b      	beq.n	800c9fa <TIM_Base_SetConfig+0xaa>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4a2d      	ldr	r2, [pc, #180]	@ (800ca9c <TIM_Base_SetConfig+0x14c>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d007      	beq.n	800c9fa <TIM_Base_SetConfig+0xaa>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	4a2c      	ldr	r2, [pc, #176]	@ (800caa0 <TIM_Base_SetConfig+0x150>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d003      	beq.n	800c9fa <TIM_Base_SetConfig+0xaa>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4a2b      	ldr	r2, [pc, #172]	@ (800caa4 <TIM_Base_SetConfig+0x154>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d108      	bne.n	800ca0c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ca00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	68db      	ldr	r3, [r3, #12]
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	695b      	ldr	r3, [r3, #20]
 800ca16:	4313      	orrs	r3, r2
 800ca18:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	689a      	ldr	r2, [r3, #8]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4a14      	ldr	r2, [pc, #80]	@ (800ca80 <TIM_Base_SetConfig+0x130>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d00f      	beq.n	800ca52 <TIM_Base_SetConfig+0x102>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	4a16      	ldr	r2, [pc, #88]	@ (800ca90 <TIM_Base_SetConfig+0x140>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d00b      	beq.n	800ca52 <TIM_Base_SetConfig+0x102>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	4a15      	ldr	r2, [pc, #84]	@ (800ca94 <TIM_Base_SetConfig+0x144>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d007      	beq.n	800ca52 <TIM_Base_SetConfig+0x102>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	4a14      	ldr	r2, [pc, #80]	@ (800ca98 <TIM_Base_SetConfig+0x148>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d003      	beq.n	800ca52 <TIM_Base_SetConfig+0x102>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	4a13      	ldr	r2, [pc, #76]	@ (800ca9c <TIM_Base_SetConfig+0x14c>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d103      	bne.n	800ca5a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	691a      	ldr	r2, [r3, #16]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f043 0204 	orr.w	r2, r3, #4
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2201      	movs	r2, #1
 800ca6a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	68fa      	ldr	r2, [r7, #12]
 800ca70:	601a      	str	r2, [r3, #0]
}
 800ca72:	bf00      	nop
 800ca74:	3714      	adds	r7, #20
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	40010000 	.word	0x40010000
 800ca84:	40000400 	.word	0x40000400
 800ca88:	40000800 	.word	0x40000800
 800ca8c:	40000c00 	.word	0x40000c00
 800ca90:	40010400 	.word	0x40010400
 800ca94:	40014000 	.word	0x40014000
 800ca98:	40014400 	.word	0x40014400
 800ca9c:	40014800 	.word	0x40014800
 800caa0:	4000e000 	.word	0x4000e000
 800caa4:	4000e400 	.word	0x4000e400

0800caa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b087      	sub	sp, #28
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6a1b      	ldr	r3, [r3, #32]
 800cab6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6a1b      	ldr	r3, [r3, #32]
 800cabc:	f023 0201 	bic.w	r2, r3, #1
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	699b      	ldr	r3, [r3, #24]
 800cace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	4b37      	ldr	r3, [pc, #220]	@ (800cbb0 <TIM_OC1_SetConfig+0x108>)
 800cad4:	4013      	ands	r3, r2
 800cad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f023 0303 	bic.w	r3, r3, #3
 800cade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	4313      	orrs	r3, r2
 800cae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	f023 0302 	bic.w	r3, r3, #2
 800caf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	689b      	ldr	r3, [r3, #8]
 800caf6:	697a      	ldr	r2, [r7, #20]
 800caf8:	4313      	orrs	r3, r2
 800cafa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	4a2d      	ldr	r2, [pc, #180]	@ (800cbb4 <TIM_OC1_SetConfig+0x10c>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d00f      	beq.n	800cb24 <TIM_OC1_SetConfig+0x7c>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	4a2c      	ldr	r2, [pc, #176]	@ (800cbb8 <TIM_OC1_SetConfig+0x110>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d00b      	beq.n	800cb24 <TIM_OC1_SetConfig+0x7c>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	4a2b      	ldr	r2, [pc, #172]	@ (800cbbc <TIM_OC1_SetConfig+0x114>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d007      	beq.n	800cb24 <TIM_OC1_SetConfig+0x7c>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	4a2a      	ldr	r2, [pc, #168]	@ (800cbc0 <TIM_OC1_SetConfig+0x118>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d003      	beq.n	800cb24 <TIM_OC1_SetConfig+0x7c>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a29      	ldr	r2, [pc, #164]	@ (800cbc4 <TIM_OC1_SetConfig+0x11c>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d10c      	bne.n	800cb3e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	f023 0308 	bic.w	r3, r3, #8
 800cb2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	697a      	ldr	r2, [r7, #20]
 800cb32:	4313      	orrs	r3, r2
 800cb34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	f023 0304 	bic.w	r3, r3, #4
 800cb3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	4a1c      	ldr	r2, [pc, #112]	@ (800cbb4 <TIM_OC1_SetConfig+0x10c>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d00f      	beq.n	800cb66 <TIM_OC1_SetConfig+0xbe>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4a1b      	ldr	r2, [pc, #108]	@ (800cbb8 <TIM_OC1_SetConfig+0x110>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d00b      	beq.n	800cb66 <TIM_OC1_SetConfig+0xbe>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	4a1a      	ldr	r2, [pc, #104]	@ (800cbbc <TIM_OC1_SetConfig+0x114>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d007      	beq.n	800cb66 <TIM_OC1_SetConfig+0xbe>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	4a19      	ldr	r2, [pc, #100]	@ (800cbc0 <TIM_OC1_SetConfig+0x118>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d003      	beq.n	800cb66 <TIM_OC1_SetConfig+0xbe>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4a18      	ldr	r2, [pc, #96]	@ (800cbc4 <TIM_OC1_SetConfig+0x11c>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d111      	bne.n	800cb8a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cb74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	695b      	ldr	r3, [r3, #20]
 800cb7a:	693a      	ldr	r2, [r7, #16]
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	699b      	ldr	r3, [r3, #24]
 800cb84:	693a      	ldr	r2, [r7, #16]
 800cb86:	4313      	orrs	r3, r2
 800cb88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	693a      	ldr	r2, [r7, #16]
 800cb8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	68fa      	ldr	r2, [r7, #12]
 800cb94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	685a      	ldr	r2, [r3, #4]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	697a      	ldr	r2, [r7, #20]
 800cba2:	621a      	str	r2, [r3, #32]
}
 800cba4:	bf00      	nop
 800cba6:	371c      	adds	r7, #28
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr
 800cbb0:	fffeff8f 	.word	0xfffeff8f
 800cbb4:	40010000 	.word	0x40010000
 800cbb8:	40010400 	.word	0x40010400
 800cbbc:	40014000 	.word	0x40014000
 800cbc0:	40014400 	.word	0x40014400
 800cbc4:	40014800 	.word	0x40014800

0800cbc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b087      	sub	sp, #28
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6a1b      	ldr	r3, [r3, #32]
 800cbd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6a1b      	ldr	r3, [r3, #32]
 800cbdc:	f023 0210 	bic.w	r2, r3, #16
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	699b      	ldr	r3, [r3, #24]
 800cbee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	4b34      	ldr	r3, [pc, #208]	@ (800ccc4 <TIM_OC2_SetConfig+0xfc>)
 800cbf4:	4013      	ands	r3, r2
 800cbf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cbfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	021b      	lsls	r3, r3, #8
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	f023 0320 	bic.w	r3, r3, #32
 800cc12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	011b      	lsls	r3, r3, #4
 800cc1a:	697a      	ldr	r2, [r7, #20]
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	4a29      	ldr	r2, [pc, #164]	@ (800ccc8 <TIM_OC2_SetConfig+0x100>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d003      	beq.n	800cc30 <TIM_OC2_SetConfig+0x68>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	4a28      	ldr	r2, [pc, #160]	@ (800cccc <TIM_OC2_SetConfig+0x104>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d10d      	bne.n	800cc4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	011b      	lsls	r3, r3, #4
 800cc3e:	697a      	ldr	r2, [r7, #20]
 800cc40:	4313      	orrs	r3, r2
 800cc42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	4a1e      	ldr	r2, [pc, #120]	@ (800ccc8 <TIM_OC2_SetConfig+0x100>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d00f      	beq.n	800cc74 <TIM_OC2_SetConfig+0xac>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	4a1d      	ldr	r2, [pc, #116]	@ (800cccc <TIM_OC2_SetConfig+0x104>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d00b      	beq.n	800cc74 <TIM_OC2_SetConfig+0xac>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	4a1c      	ldr	r2, [pc, #112]	@ (800ccd0 <TIM_OC2_SetConfig+0x108>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d007      	beq.n	800cc74 <TIM_OC2_SetConfig+0xac>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	4a1b      	ldr	r2, [pc, #108]	@ (800ccd4 <TIM_OC2_SetConfig+0x10c>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d003      	beq.n	800cc74 <TIM_OC2_SetConfig+0xac>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	4a1a      	ldr	r2, [pc, #104]	@ (800ccd8 <TIM_OC2_SetConfig+0x110>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d113      	bne.n	800cc9c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cc7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cc82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	695b      	ldr	r3, [r3, #20]
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	693a      	ldr	r2, [r7, #16]
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	699b      	ldr	r3, [r3, #24]
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	693a      	ldr	r2, [r7, #16]
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	693a      	ldr	r2, [r7, #16]
 800cca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	68fa      	ldr	r2, [r7, #12]
 800cca6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	685a      	ldr	r2, [r3, #4]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	697a      	ldr	r2, [r7, #20]
 800ccb4:	621a      	str	r2, [r3, #32]
}
 800ccb6:	bf00      	nop
 800ccb8:	371c      	adds	r7, #28
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr
 800ccc2:	bf00      	nop
 800ccc4:	feff8fff 	.word	0xfeff8fff
 800ccc8:	40010000 	.word	0x40010000
 800cccc:	40010400 	.word	0x40010400
 800ccd0:	40014000 	.word	0x40014000
 800ccd4:	40014400 	.word	0x40014400
 800ccd8:	40014800 	.word	0x40014800

0800ccdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b087      	sub	sp, #28
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6a1b      	ldr	r3, [r3, #32]
 800ccea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6a1b      	ldr	r3, [r3, #32]
 800ccf0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	69db      	ldr	r3, [r3, #28]
 800cd02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cd04:	68fa      	ldr	r2, [r7, #12]
 800cd06:	4b33      	ldr	r3, [pc, #204]	@ (800cdd4 <TIM_OC3_SetConfig+0xf8>)
 800cd08:	4013      	ands	r3, r2
 800cd0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f023 0303 	bic.w	r3, r3, #3
 800cd12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	4313      	orrs	r3, r2
 800cd1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cd24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	021b      	lsls	r3, r3, #8
 800cd2c:	697a      	ldr	r2, [r7, #20]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	4a28      	ldr	r2, [pc, #160]	@ (800cdd8 <TIM_OC3_SetConfig+0xfc>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d003      	beq.n	800cd42 <TIM_OC3_SetConfig+0x66>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	4a27      	ldr	r2, [pc, #156]	@ (800cddc <TIM_OC3_SetConfig+0x100>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d10d      	bne.n	800cd5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cd48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	68db      	ldr	r3, [r3, #12]
 800cd4e:	021b      	lsls	r3, r3, #8
 800cd50:	697a      	ldr	r2, [r7, #20]
 800cd52:	4313      	orrs	r3, r2
 800cd54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cd5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4a1d      	ldr	r2, [pc, #116]	@ (800cdd8 <TIM_OC3_SetConfig+0xfc>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d00f      	beq.n	800cd86 <TIM_OC3_SetConfig+0xaa>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	4a1c      	ldr	r2, [pc, #112]	@ (800cddc <TIM_OC3_SetConfig+0x100>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d00b      	beq.n	800cd86 <TIM_OC3_SetConfig+0xaa>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	4a1b      	ldr	r2, [pc, #108]	@ (800cde0 <TIM_OC3_SetConfig+0x104>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d007      	beq.n	800cd86 <TIM_OC3_SetConfig+0xaa>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	4a1a      	ldr	r2, [pc, #104]	@ (800cde4 <TIM_OC3_SetConfig+0x108>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d003      	beq.n	800cd86 <TIM_OC3_SetConfig+0xaa>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	4a19      	ldr	r2, [pc, #100]	@ (800cde8 <TIM_OC3_SetConfig+0x10c>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d113      	bne.n	800cdae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cd8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cd94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	695b      	ldr	r3, [r3, #20]
 800cd9a:	011b      	lsls	r3, r3, #4
 800cd9c:	693a      	ldr	r2, [r7, #16]
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	699b      	ldr	r3, [r3, #24]
 800cda6:	011b      	lsls	r3, r3, #4
 800cda8:	693a      	ldr	r2, [r7, #16]
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	693a      	ldr	r2, [r7, #16]
 800cdb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	685a      	ldr	r2, [r3, #4]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	697a      	ldr	r2, [r7, #20]
 800cdc6:	621a      	str	r2, [r3, #32]
}
 800cdc8:	bf00      	nop
 800cdca:	371c      	adds	r7, #28
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr
 800cdd4:	fffeff8f 	.word	0xfffeff8f
 800cdd8:	40010000 	.word	0x40010000
 800cddc:	40010400 	.word	0x40010400
 800cde0:	40014000 	.word	0x40014000
 800cde4:	40014400 	.word	0x40014400
 800cde8:	40014800 	.word	0x40014800

0800cdec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b087      	sub	sp, #28
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6a1b      	ldr	r3, [r3, #32]
 800cdfa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6a1b      	ldr	r3, [r3, #32]
 800ce00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	69db      	ldr	r3, [r3, #28]
 800ce12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ce14:	68fa      	ldr	r2, [r7, #12]
 800ce16:	4b24      	ldr	r3, [pc, #144]	@ (800cea8 <TIM_OC4_SetConfig+0xbc>)
 800ce18:	4013      	ands	r3, r2
 800ce1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ce22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	021b      	lsls	r3, r3, #8
 800ce2a:	68fa      	ldr	r2, [r7, #12]
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ce36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	031b      	lsls	r3, r3, #12
 800ce3e:	693a      	ldr	r2, [r7, #16]
 800ce40:	4313      	orrs	r3, r2
 800ce42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	4a19      	ldr	r2, [pc, #100]	@ (800ceac <TIM_OC4_SetConfig+0xc0>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d00f      	beq.n	800ce6c <TIM_OC4_SetConfig+0x80>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4a18      	ldr	r2, [pc, #96]	@ (800ceb0 <TIM_OC4_SetConfig+0xc4>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d00b      	beq.n	800ce6c <TIM_OC4_SetConfig+0x80>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	4a17      	ldr	r2, [pc, #92]	@ (800ceb4 <TIM_OC4_SetConfig+0xc8>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d007      	beq.n	800ce6c <TIM_OC4_SetConfig+0x80>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	4a16      	ldr	r2, [pc, #88]	@ (800ceb8 <TIM_OC4_SetConfig+0xcc>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d003      	beq.n	800ce6c <TIM_OC4_SetConfig+0x80>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	4a15      	ldr	r2, [pc, #84]	@ (800cebc <TIM_OC4_SetConfig+0xd0>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d109      	bne.n	800ce80 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ce72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	695b      	ldr	r3, [r3, #20]
 800ce78:	019b      	lsls	r3, r3, #6
 800ce7a:	697a      	ldr	r2, [r7, #20]
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	697a      	ldr	r2, [r7, #20]
 800ce84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	68fa      	ldr	r2, [r7, #12]
 800ce8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	685a      	ldr	r2, [r3, #4]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	693a      	ldr	r2, [r7, #16]
 800ce98:	621a      	str	r2, [r3, #32]
}
 800ce9a:	bf00      	nop
 800ce9c:	371c      	adds	r7, #28
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr
 800cea6:	bf00      	nop
 800cea8:	feff8fff 	.word	0xfeff8fff
 800ceac:	40010000 	.word	0x40010000
 800ceb0:	40010400 	.word	0x40010400
 800ceb4:	40014000 	.word	0x40014000
 800ceb8:	40014400 	.word	0x40014400
 800cebc:	40014800 	.word	0x40014800

0800cec0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b087      	sub	sp, #28
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6a1b      	ldr	r3, [r3, #32]
 800cece:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6a1b      	ldr	r3, [r3, #32]
 800ced4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	4b21      	ldr	r3, [pc, #132]	@ (800cf70 <TIM_OC5_SetConfig+0xb0>)
 800ceec:	4013      	ands	r3, r2
 800ceee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	68fa      	ldr	r2, [r7, #12]
 800cef6:	4313      	orrs	r3, r2
 800cef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cf00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	689b      	ldr	r3, [r3, #8]
 800cf06:	041b      	lsls	r3, r3, #16
 800cf08:	693a      	ldr	r2, [r7, #16]
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4a18      	ldr	r2, [pc, #96]	@ (800cf74 <TIM_OC5_SetConfig+0xb4>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d00f      	beq.n	800cf36 <TIM_OC5_SetConfig+0x76>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	4a17      	ldr	r2, [pc, #92]	@ (800cf78 <TIM_OC5_SetConfig+0xb8>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d00b      	beq.n	800cf36 <TIM_OC5_SetConfig+0x76>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	4a16      	ldr	r2, [pc, #88]	@ (800cf7c <TIM_OC5_SetConfig+0xbc>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d007      	beq.n	800cf36 <TIM_OC5_SetConfig+0x76>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	4a15      	ldr	r2, [pc, #84]	@ (800cf80 <TIM_OC5_SetConfig+0xc0>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d003      	beq.n	800cf36 <TIM_OC5_SetConfig+0x76>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4a14      	ldr	r2, [pc, #80]	@ (800cf84 <TIM_OC5_SetConfig+0xc4>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d109      	bne.n	800cf4a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cf3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	695b      	ldr	r3, [r3, #20]
 800cf42:	021b      	lsls	r3, r3, #8
 800cf44:	697a      	ldr	r2, [r7, #20]
 800cf46:	4313      	orrs	r3, r2
 800cf48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	697a      	ldr	r2, [r7, #20]
 800cf4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	68fa      	ldr	r2, [r7, #12]
 800cf54:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	685a      	ldr	r2, [r3, #4]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	693a      	ldr	r2, [r7, #16]
 800cf62:	621a      	str	r2, [r3, #32]
}
 800cf64:	bf00      	nop
 800cf66:	371c      	adds	r7, #28
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr
 800cf70:	fffeff8f 	.word	0xfffeff8f
 800cf74:	40010000 	.word	0x40010000
 800cf78:	40010400 	.word	0x40010400
 800cf7c:	40014000 	.word	0x40014000
 800cf80:	40014400 	.word	0x40014400
 800cf84:	40014800 	.word	0x40014800

0800cf88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b087      	sub	sp, #28
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6a1b      	ldr	r3, [r3, #32]
 800cf96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6a1b      	ldr	r3, [r3, #32]
 800cf9c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	685b      	ldr	r3, [r3, #4]
 800cfa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cfb0:	68fa      	ldr	r2, [r7, #12]
 800cfb2:	4b22      	ldr	r3, [pc, #136]	@ (800d03c <TIM_OC6_SetConfig+0xb4>)
 800cfb4:	4013      	ands	r3, r2
 800cfb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	021b      	lsls	r3, r3, #8
 800cfbe:	68fa      	ldr	r2, [r7, #12]
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cfca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	051b      	lsls	r3, r3, #20
 800cfd2:	693a      	ldr	r2, [r7, #16]
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	4a19      	ldr	r2, [pc, #100]	@ (800d040 <TIM_OC6_SetConfig+0xb8>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d00f      	beq.n	800d000 <TIM_OC6_SetConfig+0x78>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	4a18      	ldr	r2, [pc, #96]	@ (800d044 <TIM_OC6_SetConfig+0xbc>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d00b      	beq.n	800d000 <TIM_OC6_SetConfig+0x78>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4a17      	ldr	r2, [pc, #92]	@ (800d048 <TIM_OC6_SetConfig+0xc0>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d007      	beq.n	800d000 <TIM_OC6_SetConfig+0x78>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	4a16      	ldr	r2, [pc, #88]	@ (800d04c <TIM_OC6_SetConfig+0xc4>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d003      	beq.n	800d000 <TIM_OC6_SetConfig+0x78>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	4a15      	ldr	r2, [pc, #84]	@ (800d050 <TIM_OC6_SetConfig+0xc8>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d109      	bne.n	800d014 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d006:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	695b      	ldr	r3, [r3, #20]
 800d00c:	029b      	lsls	r3, r3, #10
 800d00e:	697a      	ldr	r2, [r7, #20]
 800d010:	4313      	orrs	r3, r2
 800d012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	697a      	ldr	r2, [r7, #20]
 800d018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	68fa      	ldr	r2, [r7, #12]
 800d01e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	685a      	ldr	r2, [r3, #4]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	693a      	ldr	r2, [r7, #16]
 800d02c:	621a      	str	r2, [r3, #32]
}
 800d02e:	bf00      	nop
 800d030:	371c      	adds	r7, #28
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	feff8fff 	.word	0xfeff8fff
 800d040:	40010000 	.word	0x40010000
 800d044:	40010400 	.word	0x40010400
 800d048:	40014000 	.word	0x40014000
 800d04c:	40014400 	.word	0x40014400
 800d050:	40014800 	.word	0x40014800

0800d054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d054:	b480      	push	{r7}
 800d056:	b087      	sub	sp, #28
 800d058:	af00      	add	r7, sp, #0
 800d05a:	60f8      	str	r0, [r7, #12]
 800d05c:	60b9      	str	r1, [r7, #8]
 800d05e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	6a1b      	ldr	r3, [r3, #32]
 800d064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	6a1b      	ldr	r3, [r3, #32]
 800d06a:	f023 0201 	bic.w	r2, r3, #1
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	699b      	ldr	r3, [r3, #24]
 800d076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d07e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	011b      	lsls	r3, r3, #4
 800d084:	693a      	ldr	r2, [r7, #16]
 800d086:	4313      	orrs	r3, r2
 800d088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	f023 030a 	bic.w	r3, r3, #10
 800d090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d092:	697a      	ldr	r2, [r7, #20]
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	4313      	orrs	r3, r2
 800d098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	693a      	ldr	r2, [r7, #16]
 800d09e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	697a      	ldr	r2, [r7, #20]
 800d0a4:	621a      	str	r2, [r3, #32]
}
 800d0a6:	bf00      	nop
 800d0a8:	371c      	adds	r7, #28
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr

0800d0b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d0b2:	b480      	push	{r7}
 800d0b4:	b087      	sub	sp, #28
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	60f8      	str	r0, [r7, #12]
 800d0ba:	60b9      	str	r1, [r7, #8]
 800d0bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	6a1b      	ldr	r3, [r3, #32]
 800d0c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6a1b      	ldr	r3, [r3, #32]
 800d0c8:	f023 0210 	bic.w	r2, r3, #16
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	699b      	ldr	r3, [r3, #24]
 800d0d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d0dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	031b      	lsls	r3, r3, #12
 800d0e2:	693a      	ldr	r2, [r7, #16]
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d0ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	011b      	lsls	r3, r3, #4
 800d0f4:	697a      	ldr	r2, [r7, #20]
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	693a      	ldr	r2, [r7, #16]
 800d0fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	697a      	ldr	r2, [r7, #20]
 800d104:	621a      	str	r2, [r3, #32]
}
 800d106:	bf00      	nop
 800d108:	371c      	adds	r7, #28
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr
	...

0800d114 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d114:	b480      	push	{r7}
 800d116:	b085      	sub	sp, #20
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	689b      	ldr	r3, [r3, #8]
 800d122:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d124:	68fa      	ldr	r2, [r7, #12]
 800d126:	4b09      	ldr	r3, [pc, #36]	@ (800d14c <TIM_ITRx_SetConfig+0x38>)
 800d128:	4013      	ands	r3, r2
 800d12a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d12c:	683a      	ldr	r2, [r7, #0]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	4313      	orrs	r3, r2
 800d132:	f043 0307 	orr.w	r3, r3, #7
 800d136:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	68fa      	ldr	r2, [r7, #12]
 800d13c:	609a      	str	r2, [r3, #8]
}
 800d13e:	bf00      	nop
 800d140:	3714      	adds	r7, #20
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop
 800d14c:	ffcfff8f 	.word	0xffcfff8f

0800d150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d150:	b480      	push	{r7}
 800d152:	b087      	sub	sp, #28
 800d154:	af00      	add	r7, sp, #0
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	60b9      	str	r1, [r7, #8]
 800d15a:	607a      	str	r2, [r7, #4]
 800d15c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d16a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	021a      	lsls	r2, r3, #8
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	431a      	orrs	r2, r3
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	4313      	orrs	r3, r2
 800d178:	697a      	ldr	r2, [r7, #20]
 800d17a:	4313      	orrs	r3, r2
 800d17c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	697a      	ldr	r2, [r7, #20]
 800d182:	609a      	str	r2, [r3, #8]
}
 800d184:	bf00      	nop
 800d186:	371c      	adds	r7, #28
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d190:	b480      	push	{r7}
 800d192:	b087      	sub	sp, #28
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	f003 031f 	and.w	r3, r3, #31
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	6a1a      	ldr	r2, [r3, #32]
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	43db      	mvns	r3, r3
 800d1b2:	401a      	ands	r2, r3
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	6a1a      	ldr	r2, [r3, #32]
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	f003 031f 	and.w	r3, r3, #31
 800d1c2:	6879      	ldr	r1, [r7, #4]
 800d1c4:	fa01 f303 	lsl.w	r3, r1, r3
 800d1c8:	431a      	orrs	r2, r3
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	621a      	str	r2, [r3, #32]
}
 800d1ce:	bf00      	nop
 800d1d0:	371c      	adds	r7, #28
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d8:	4770      	bx	lr
	...

0800d1dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b085      	sub	sp, #20
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d101      	bne.n	800d1f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d1f0:	2302      	movs	r3, #2
 800d1f2:	e077      	b.n	800d2e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2202      	movs	r2, #2
 800d200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a35      	ldr	r2, [pc, #212]	@ (800d2f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d004      	beq.n	800d228 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4a34      	ldr	r2, [pc, #208]	@ (800d2f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d108      	bne.n	800d23a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d22e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	68fa      	ldr	r2, [r7, #12]
 800d236:	4313      	orrs	r3, r2
 800d238:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d240:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	4313      	orrs	r3, r2
 800d24a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a25      	ldr	r2, [pc, #148]	@ (800d2f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d02c      	beq.n	800d2b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d266:	d027      	beq.n	800d2b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a22      	ldr	r2, [pc, #136]	@ (800d2f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d022      	beq.n	800d2b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4a21      	ldr	r2, [pc, #132]	@ (800d2fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d01d      	beq.n	800d2b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a1f      	ldr	r2, [pc, #124]	@ (800d300 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d018      	beq.n	800d2b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a1a      	ldr	r2, [pc, #104]	@ (800d2f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d013      	beq.n	800d2b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a1b      	ldr	r2, [pc, #108]	@ (800d304 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d00e      	beq.n	800d2b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4a1a      	ldr	r2, [pc, #104]	@ (800d308 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d009      	beq.n	800d2b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4a18      	ldr	r2, [pc, #96]	@ (800d30c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d004      	beq.n	800d2b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4a17      	ldr	r2, [pc, #92]	@ (800d310 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d10c      	bne.n	800d2d2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d2be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	689b      	ldr	r3, [r3, #8]
 800d2c4:	68ba      	ldr	r2, [r7, #8]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d2e2:	2300      	movs	r3, #0
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3714      	adds	r7, #20
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr
 800d2f0:	40010000 	.word	0x40010000
 800d2f4:	40010400 	.word	0x40010400
 800d2f8:	40000400 	.word	0x40000400
 800d2fc:	40000800 	.word	0x40000800
 800d300:	40000c00 	.word	0x40000c00
 800d304:	40001800 	.word	0x40001800
 800d308:	40014000 	.word	0x40014000
 800d30c:	4000e000 	.word	0x4000e000
 800d310:	4000e400 	.word	0x4000e400

0800d314 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d31c:	bf00      	nop
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr

0800d328 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d330:	bf00      	nop
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d344:	bf00      	nop
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr

0800d350 <_ZN8touchgfx4FontD1Ev>:
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	4a04      	ldr	r2, [pc, #16]	@ (800d36c <_ZN8touchgfx4FontD1Ev+0x1c>)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	601a      	str	r2, [r3, #0]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	4618      	mov	r0, r3
 800d362:	370c      	adds	r7, #12
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr
 800d36c:	0800fdfc 	.word	0x0800fdfc

0800d370 <_ZN8touchgfx4FontD0Ev>:
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f7ff ffe9 	bl	800d350 <_ZN8touchgfx4FontD1Ev>
 800d37e:	2114      	movs	r1, #20
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f001 fb6c 	bl	800ea5e <_ZdlPvj>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	4618      	mov	r0, r3
 800d38a:	3708      	adds	r7, #8
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <_ZNK8touchgfx4Font8getGlyphEt>:
 800d390:	b590      	push	{r4, r7, lr}
 800d392:	b087      	sub	sp, #28
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	460b      	mov	r3, r1
 800d39a:	807b      	strh	r3, [r7, #2]
 800d39c:	887b      	ldrh	r3, [r7, #2]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d101      	bne.n	800d3a6 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	e010      	b.n	800d3c8 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	613b      	str	r3, [r7, #16]
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	73fb      	strb	r3, [r7, #15]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	3308      	adds	r3, #8
 800d3b4:	681c      	ldr	r4, [r3, #0]
 800d3b6:	f107 030f 	add.w	r3, r7, #15
 800d3ba:	f107 0210 	add.w	r2, r7, #16
 800d3be:	8879      	ldrh	r1, [r7, #2]
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	47a0      	blx	r4
 800d3c4:	6178      	str	r0, [r7, #20]
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	371c      	adds	r7, #28
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd90      	pop	{r4, r7, pc}

0800d3d0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	89db      	ldrh	r3, [r3, #14]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	370c      	adds	r7, #12
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr

0800d3e8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
 800d3e8:	b480      	push	{r7}
 800d3ea:	b083      	sub	sp, #12
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	8a1b      	ldrh	r3, [r3, #16]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	370c      	adds	r7, #12
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr

0800d400 <_ZNK8touchgfx4Font11getBaselineEv>:
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	88db      	ldrh	r3, [r3, #6]
 800d40c:	4618      	mov	r0, r3
 800d40e:	370c      	adds	r7, #12
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <_ZNK8touchgfx4Font9getHeightEv>:
 800d418:	b480      	push	{r7}
 800d41a:	b083      	sub	sp, #12
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	889b      	ldrh	r3, [r3, #4]
 800d424:	4618      	mov	r0, r3
 800d426:	370c      	adds	r7, #12
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
 800d430:	b480      	push	{r7}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	7a9b      	ldrb	r3, [r3, #10]
 800d43c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800d440:	b2db      	uxtb	r3, r3
 800d442:	4618      	mov	r0, r3
 800d444:	370c      	adds	r7, #12
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr

0800d44e <_ZNK8touchgfx4Font15getByteAlignRowEv>:
 800d44e:	b480      	push	{r7}
 800d450:	b083      	sub	sp, #12
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	7a9b      	ldrb	r3, [r3, #10]
 800d45a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	4618      	mov	r0, r3
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	2300      	movs	r3, #0
 800d476:	4618      	mov	r0, r3
 800d478:	370c      	adds	r7, #12
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr

0800d482 <_ZNK8touchgfx4Font14getScaleFactorEv>:
 800d482:	b480      	push	{r7}
 800d484:	b083      	sub	sp, #12
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
 800d48a:	f04f 0300 	mov.w	r3, #0
 800d48e:	ee07 3a90 	vmov	s15, r3
 800d492:	eeb0 0a67 	vmov.f32	s0, s15
 800d496:	370c      	adds	r7, #12
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr

0800d4a0 <_ZN8touchgfx9ConstFontD1Ev>:
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	4a05      	ldr	r2, [pc, #20]	@ (800d4c0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	601a      	str	r2, [r3, #0]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7ff ff4d 	bl	800d350 <_ZN8touchgfx4FontD1Ev>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3708      	adds	r7, #8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	0800fe60 	.word	0x0800fe60

0800d4c4 <_ZN8touchgfx9ConstFontD0Ev>:
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f7ff ffe7 	bl	800d4a0 <_ZN8touchgfx9ConstFontD1Ev>
 800d4d2:	211c      	movs	r1, #28
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f001 fac2 	bl	800ea5e <_ZdlPvj>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3708      	adds	r7, #8
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <_ZN8touchgfx13GeneratedFontD1Ev>:
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	4a05      	ldr	r2, [pc, #20]	@ (800d504 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	601a      	str	r2, [r3, #0]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7ff ffd3 	bl	800d4a0 <_ZN8touchgfx9ConstFontD1Ev>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3708      	adds	r7, #8
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	0800fd94 	.word	0x0800fd94

0800d508 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7ff ffe7 	bl	800d4e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d516:	212c      	movs	r1, #44	@ 0x2c
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f001 faa0 	bl	800ea5e <_ZdlPvj>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4618      	mov	r0, r3
 800d522:	3708      	adds	r7, #8
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d534:	4618      	mov	r0, r3
 800d536:	370c      	adds	r7, #12
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr

0800d540 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
 800d540:	b480      	push	{r7}
 800d542:	b083      	sub	sp, #12
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d54c:	4618      	mov	r0, r3
 800d54e:	370c      	adds	r7, #12
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr

0800d558 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
 800d558:	b580      	push	{r7, lr}
 800d55a:	b08e      	sub	sp, #56	@ 0x38
 800d55c:	af0a      	add	r7, sp, #40	@ 0x28
 800d55e:	60f8      	str	r0, [r7, #12]
 800d560:	60b9      	str	r1, [r7, #8]
 800d562:	4611      	mov	r1, r2
 800d564:	461a      	mov	r2, r3
 800d566:	460b      	mov	r3, r1
 800d568:	80fb      	strh	r3, [r7, #6]
 800d56a:	4613      	mov	r3, r2
 800d56c:	80bb      	strh	r3, [r7, #4]
 800d56e:	68f8      	ldr	r0, [r7, #12]
 800d570:	88b9      	ldrh	r1, [r7, #4]
 800d572:	88fa      	ldrh	r2, [r7, #6]
 800d574:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d578:	9308      	str	r3, [sp, #32]
 800d57a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d57c:	9307      	str	r3, [sp, #28]
 800d57e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800d582:	9306      	str	r3, [sp, #24]
 800d584:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d588:	9305      	str	r3, [sp, #20]
 800d58a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d58e:	9304      	str	r3, [sp, #16]
 800d590:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d594:	9303      	str	r3, [sp, #12]
 800d596:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d59a:	9302      	str	r3, [sp, #8]
 800d59c:	7f3b      	ldrb	r3, [r7, #28]
 800d59e:	9301      	str	r3, [sp, #4]
 800d5a0:	8b3b      	ldrh	r3, [r7, #24]
 800d5a2:	9300      	str	r3, [sp, #0]
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	68b9      	ldr	r1, [r7, #8]
 800d5a8:	f000 fcb4 	bl	800df14 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800d5ac:	4a09      	ldr	r2, [pc, #36]	@ (800d5d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	601a      	str	r2, [r3, #0]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5b6:	61da      	str	r2, [r3, #28]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d5bc:	621a      	str	r2, [r3, #32]
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5c2:	625a      	str	r2, [r3, #36]	@ 0x24
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d5c8:	629a      	str	r2, [r3, #40]	@ 0x28
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3710      	adds	r7, #16
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	0800fd94 	.word	0x0800fd94

0800d5d8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
 800d5d8:	b480      	push	{r7}
 800d5da:	b087      	sub	sp, #28
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	617b      	str	r3, [r7, #20]
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	881b      	ldrh	r3, [r3, #0]
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	613b      	str	r3, [r7, #16]
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	3302      	adds	r3, #2
 800d5f2:	881b      	ldrh	r3, [r3, #0]
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	041b      	lsls	r3, r3, #16
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	613b      	str	r3, [r7, #16]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	69db      	ldr	r3, [r3, #28]
 800d604:	60fb      	str	r3, [r7, #12]
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	889b      	ldrh	r3, [r3, #4]
 800d60a:	0adb      	lsrs	r3, r3, #11
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	009b      	lsls	r3, r3, #2
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	4413      	add	r3, r2
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	60bb      	str	r3, [r7, #8]
 800d618:	68ba      	ldr	r2, [r7, #8]
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	4413      	add	r3, r2
 800d61e:	4618      	mov	r0, r3
 800d620:	371c      	adds	r7, #28
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr

0800d62a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:
 800d62a:	b480      	push	{r7}
 800d62c:	b089      	sub	sp, #36	@ 0x24
 800d62e:	af00      	add	r7, sp, #0
 800d630:	60f8      	str	r0, [r7, #12]
 800d632:	460b      	mov	r3, r1
 800d634:	607a      	str	r2, [r7, #4]
 800d636:	817b      	strh	r3, [r7, #10]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d003      	beq.n	800d646 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	7b1b      	ldrb	r3, [r3, #12]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d101      	bne.n	800d64a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
 800d646:	2300      	movs	r3, #0
 800d648:	e032      	b.n	800d6b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	6a1a      	ldr	r2, [r3, #32]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	617b      	str	r3, [r7, #20]
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	7b5b      	ldrb	r3, [r3, #13]
 800d656:	b21b      	sxth	r3, r3
 800d658:	021b      	lsls	r3, r3, #8
 800d65a:	b21b      	sxth	r3, r3
 800d65c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d660:	b219      	sxth	r1, r3
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	7adb      	ldrb	r3, [r3, #11]
 800d666:	b21b      	sxth	r3, r3
 800d668:	430b      	orrs	r3, r1
 800d66a:	b21b      	sxth	r3, r3
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	4413      	add	r3, r2
 800d672:	61fb      	str	r3, [r7, #28]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	7b1b      	ldrb	r3, [r3, #12]
 800d678:	837b      	strh	r3, [r7, #26]
 800d67a:	e013      	b.n	800d6a4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7a>
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	881b      	ldrh	r3, [r3, #0]
 800d680:	897a      	ldrh	r2, [r7, #10]
 800d682:	429a      	cmp	r2, r3
 800d684:	d103      	bne.n	800d68e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x64>
 800d686:	69fb      	ldr	r3, [r7, #28]
 800d688:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d68c:	e010      	b.n	800d6b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	881b      	ldrh	r3, [r3, #0]
 800d692:	897a      	ldrh	r2, [r7, #10]
 800d694:	429a      	cmp	r2, r3
 800d696:	d309      	bcc.n	800d6ac <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
 800d698:	8b7b      	ldrh	r3, [r7, #26]
 800d69a:	3b01      	subs	r3, #1
 800d69c:	837b      	strh	r3, [r7, #26]
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	3304      	adds	r3, #4
 800d6a2:	61fb      	str	r3, [r7, #28]
 800d6a4:	8b7b      	ldrh	r3, [r7, #26]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1e8      	bne.n	800d67c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
 800d6aa:	e000      	b.n	800d6ae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
 800d6ac:	bf00      	nop
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3724      	adds	r7, #36	@ 0x24
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr

0800d6bc <__tcf_0>:
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	4801      	ldr	r0, [pc, #4]	@ (800d6c8 <__tcf_0+0xc>)
 800d6c2:	f7ff ff0f 	bl	800d4e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	24000644 	.word	0x24000644

0800d6cc <_Z23getFont_consola_20_4bppv>:
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b08e      	sub	sp, #56	@ 0x38
 800d6d0:	af0e      	add	r7, sp, #56	@ 0x38
 800d6d2:	4b21      	ldr	r3, [pc, #132]	@ (800d758 <_Z23getFont_consola_20_4bppv+0x8c>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f3bf 8f5b 	dmb	ish
 800d6da:	f003 0301 	and.w	r3, r3, #1
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	bf0c      	ite	eq
 800d6e2:	2301      	moveq	r3, #1
 800d6e4:	2300      	movne	r3, #0
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d030      	beq.n	800d74e <_Z23getFont_consola_20_4bppv+0x82>
 800d6ec:	481a      	ldr	r0, [pc, #104]	@ (800d758 <_Z23getFont_consola_20_4bppv+0x8c>)
 800d6ee:	f001 f9b8 	bl	800ea62 <__cxa_guard_acquire>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	bf14      	ite	ne
 800d6f8:	2301      	movne	r3, #1
 800d6fa:	2300      	moveq	r3, #0
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d025      	beq.n	800d74e <_Z23getFont_consola_20_4bppv+0x82>
 800d702:	2300      	movs	r3, #0
 800d704:	930c      	str	r3, [sp, #48]	@ 0x30
 800d706:	2300      	movs	r3, #0
 800d708:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d70a:	2300      	movs	r3, #0
 800d70c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d70e:	233f      	movs	r3, #63	@ 0x3f
 800d710:	9309      	str	r3, [sp, #36]	@ 0x24
 800d712:	4b12      	ldr	r3, [pc, #72]	@ (800d75c <_Z23getFont_consola_20_4bppv+0x90>)
 800d714:	9308      	str	r3, [sp, #32]
 800d716:	4b12      	ldr	r3, [pc, #72]	@ (800d760 <_Z23getFont_consola_20_4bppv+0x94>)
 800d718:	9307      	str	r3, [sp, #28]
 800d71a:	2300      	movs	r3, #0
 800d71c:	9306      	str	r3, [sp, #24]
 800d71e:	2300      	movs	r3, #0
 800d720:	9305      	str	r3, [sp, #20]
 800d722:	2301      	movs	r3, #1
 800d724:	9304      	str	r3, [sp, #16]
 800d726:	2304      	movs	r3, #4
 800d728:	9303      	str	r3, [sp, #12]
 800d72a:	2300      	movs	r3, #0
 800d72c:	9302      	str	r3, [sp, #8]
 800d72e:	2300      	movs	r3, #0
 800d730:	9301      	str	r3, [sp, #4]
 800d732:	2314      	movs	r3, #20
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	2314      	movs	r3, #20
 800d738:	220c      	movs	r2, #12
 800d73a:	490a      	ldr	r1, [pc, #40]	@ (800d764 <_Z23getFont_consola_20_4bppv+0x98>)
 800d73c:	480a      	ldr	r0, [pc, #40]	@ (800d768 <_Z23getFont_consola_20_4bppv+0x9c>)
 800d73e:	f7ff ff0b 	bl	800d558 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d742:	480a      	ldr	r0, [pc, #40]	@ (800d76c <_Z23getFont_consola_20_4bppv+0xa0>)
 800d744:	f001 f9d8 	bl	800eaf8 <atexit>
 800d748:	4803      	ldr	r0, [pc, #12]	@ (800d758 <_Z23getFont_consola_20_4bppv+0x8c>)
 800d74a:	f001 f996 	bl	800ea7a <__cxa_guard_release>
 800d74e:	4b06      	ldr	r3, [pc, #24]	@ (800d768 <_Z23getFont_consola_20_4bppv+0x9c>)
 800d750:	4618      	mov	r0, r3
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	24000670 	.word	0x24000670
 800d75c:	080111f8 	.word	0x080111f8
 800d760:	0801120c 	.word	0x0801120c
 800d764:	08010f34 	.word	0x08010f34
 800d768:	24000644 	.word	0x24000644
 800d76c:	0800d6bd 	.word	0x0800d6bd

0800d770 <__tcf_0>:
 800d770:	b580      	push	{r7, lr}
 800d772:	af00      	add	r7, sp, #0
 800d774:	4801      	ldr	r0, [pc, #4]	@ (800d77c <__tcf_0+0xc>)
 800d776:	f7ff feb5 	bl	800d4e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	24000674 	.word	0x24000674

0800d780 <_Z24getFont_consolab_20_4bppv>:
 800d780:	b580      	push	{r7, lr}
 800d782:	b08e      	sub	sp, #56	@ 0x38
 800d784:	af0e      	add	r7, sp, #56	@ 0x38
 800d786:	4b21      	ldr	r3, [pc, #132]	@ (800d80c <_Z24getFont_consolab_20_4bppv+0x8c>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f3bf 8f5b 	dmb	ish
 800d78e:	f003 0301 	and.w	r3, r3, #1
 800d792:	2b00      	cmp	r3, #0
 800d794:	bf0c      	ite	eq
 800d796:	2301      	moveq	r3, #1
 800d798:	2300      	movne	r3, #0
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d030      	beq.n	800d802 <_Z24getFont_consolab_20_4bppv+0x82>
 800d7a0:	481a      	ldr	r0, [pc, #104]	@ (800d80c <_Z24getFont_consolab_20_4bppv+0x8c>)
 800d7a2:	f001 f95e 	bl	800ea62 <__cxa_guard_acquire>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	bf14      	ite	ne
 800d7ac:	2301      	movne	r3, #1
 800d7ae:	2300      	moveq	r3, #0
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d025      	beq.n	800d802 <_Z24getFont_consolab_20_4bppv+0x82>
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	930c      	str	r3, [sp, #48]	@ 0x30
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d7be:	2300      	movs	r3, #0
 800d7c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d7c2:	233f      	movs	r3, #63	@ 0x3f
 800d7c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7c6:	4b12      	ldr	r3, [pc, #72]	@ (800d810 <_Z24getFont_consolab_20_4bppv+0x90>)
 800d7c8:	9308      	str	r3, [sp, #32]
 800d7ca:	4b12      	ldr	r3, [pc, #72]	@ (800d814 <_Z24getFont_consolab_20_4bppv+0x94>)
 800d7cc:	9307      	str	r3, [sp, #28]
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	9306      	str	r3, [sp, #24]
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	9305      	str	r3, [sp, #20]
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	9304      	str	r3, [sp, #16]
 800d7da:	2304      	movs	r3, #4
 800d7dc:	9303      	str	r3, [sp, #12]
 800d7de:	2300      	movs	r3, #0
 800d7e0:	9302      	str	r3, [sp, #8]
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	9301      	str	r3, [sp, #4]
 800d7e6:	2314      	movs	r3, #20
 800d7e8:	9300      	str	r3, [sp, #0]
 800d7ea:	2314      	movs	r3, #20
 800d7ec:	2219      	movs	r2, #25
 800d7ee:	490a      	ldr	r1, [pc, #40]	@ (800d818 <_Z24getFont_consolab_20_4bppv+0x98>)
 800d7f0:	480a      	ldr	r0, [pc, #40]	@ (800d81c <_Z24getFont_consolab_20_4bppv+0x9c>)
 800d7f2:	f7ff feb1 	bl	800d558 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d7f6:	480a      	ldr	r0, [pc, #40]	@ (800d820 <_Z24getFont_consolab_20_4bppv+0xa0>)
 800d7f8:	f001 f97e 	bl	800eaf8 <atexit>
 800d7fc:	4803      	ldr	r0, [pc, #12]	@ (800d80c <_Z24getFont_consolab_20_4bppv+0x8c>)
 800d7fe:	f001 f93c 	bl	800ea7a <__cxa_guard_release>
 800d802:	4b06      	ldr	r3, [pc, #24]	@ (800d81c <_Z24getFont_consolab_20_4bppv+0x9c>)
 800d804:	4618      	mov	r0, r3
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	240006a0 	.word	0x240006a0
 800d810:	080111fc 	.word	0x080111fc
 800d814:	08011210 	.word	0x08011210
 800d818:	08010fdc 	.word	0x08010fdc
 800d81c:	24000674 	.word	0x24000674
 800d820:	0800d771 	.word	0x0800d771

0800d824 <__tcf_0>:
 800d824:	b580      	push	{r7, lr}
 800d826:	af00      	add	r7, sp, #0
 800d828:	4801      	ldr	r0, [pc, #4]	@ (800d830 <__tcf_0+0xc>)
 800d82a:	f7ff fe5b 	bl	800d4e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	240006a4 	.word	0x240006a4

0800d834 <_Z24getFont_consolab_30_4bppv>:
 800d834:	b580      	push	{r7, lr}
 800d836:	b08e      	sub	sp, #56	@ 0x38
 800d838:	af0e      	add	r7, sp, #56	@ 0x38
 800d83a:	4b21      	ldr	r3, [pc, #132]	@ (800d8c0 <_Z24getFont_consolab_30_4bppv+0x8c>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f3bf 8f5b 	dmb	ish
 800d842:	f003 0301 	and.w	r3, r3, #1
 800d846:	2b00      	cmp	r3, #0
 800d848:	bf0c      	ite	eq
 800d84a:	2301      	moveq	r3, #1
 800d84c:	2300      	movne	r3, #0
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	2b00      	cmp	r3, #0
 800d852:	d030      	beq.n	800d8b6 <_Z24getFont_consolab_30_4bppv+0x82>
 800d854:	481a      	ldr	r0, [pc, #104]	@ (800d8c0 <_Z24getFont_consolab_30_4bppv+0x8c>)
 800d856:	f001 f904 	bl	800ea62 <__cxa_guard_acquire>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	bf14      	ite	ne
 800d860:	2301      	movne	r3, #1
 800d862:	2300      	moveq	r3, #0
 800d864:	b2db      	uxtb	r3, r3
 800d866:	2b00      	cmp	r3, #0
 800d868:	d025      	beq.n	800d8b6 <_Z24getFont_consolab_30_4bppv+0x82>
 800d86a:	2300      	movs	r3, #0
 800d86c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d86e:	2300      	movs	r3, #0
 800d870:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d872:	2300      	movs	r3, #0
 800d874:	930a      	str	r3, [sp, #40]	@ 0x28
 800d876:	233f      	movs	r3, #63	@ 0x3f
 800d878:	9309      	str	r3, [sp, #36]	@ 0x24
 800d87a:	4b12      	ldr	r3, [pc, #72]	@ (800d8c4 <_Z24getFont_consolab_30_4bppv+0x90>)
 800d87c:	9308      	str	r3, [sp, #32]
 800d87e:	4b12      	ldr	r3, [pc, #72]	@ (800d8c8 <_Z24getFont_consolab_30_4bppv+0x94>)
 800d880:	9307      	str	r3, [sp, #28]
 800d882:	2300      	movs	r3, #0
 800d884:	9306      	str	r3, [sp, #24]
 800d886:	2300      	movs	r3, #0
 800d888:	9305      	str	r3, [sp, #20]
 800d88a:	2301      	movs	r3, #1
 800d88c:	9304      	str	r3, [sp, #16]
 800d88e:	2304      	movs	r3, #4
 800d890:	9303      	str	r3, [sp, #12]
 800d892:	2300      	movs	r3, #0
 800d894:	9302      	str	r3, [sp, #8]
 800d896:	2300      	movs	r3, #0
 800d898:	9301      	str	r3, [sp, #4]
 800d89a:	231e      	movs	r3, #30
 800d89c:	9300      	str	r3, [sp, #0]
 800d89e:	231e      	movs	r3, #30
 800d8a0:	220b      	movs	r2, #11
 800d8a2:	490a      	ldr	r1, [pc, #40]	@ (800d8cc <_Z24getFont_consolab_30_4bppv+0x98>)
 800d8a4:	480a      	ldr	r0, [pc, #40]	@ (800d8d0 <_Z24getFont_consolab_30_4bppv+0x9c>)
 800d8a6:	f7ff fe57 	bl	800d558 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d8aa:	480a      	ldr	r0, [pc, #40]	@ (800d8d4 <_Z24getFont_consolab_30_4bppv+0xa0>)
 800d8ac:	f001 f924 	bl	800eaf8 <atexit>
 800d8b0:	4803      	ldr	r0, [pc, #12]	@ (800d8c0 <_Z24getFont_consolab_30_4bppv+0x8c>)
 800d8b2:	f001 f8e2 	bl	800ea7a <__cxa_guard_release>
 800d8b6:	4b06      	ldr	r3, [pc, #24]	@ (800d8d0 <_Z24getFont_consolab_30_4bppv+0x9c>)
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	240006d0 	.word	0x240006d0
 800d8c4:	08011200 	.word	0x08011200
 800d8c8:	08011214 	.word	0x08011214
 800d8cc:	0801113c 	.word	0x0801113c
 800d8d0:	240006a4 	.word	0x240006a4
 800d8d4:	0800d825 	.word	0x0800d825

0800d8d8 <__tcf_0>:
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	4801      	ldr	r0, [pc, #4]	@ (800d8e4 <__tcf_0+0xc>)
 800d8de:	f7ff fe01 	bl	800d4e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	240006d4 	.word	0x240006d4

0800d8e8 <_Z23getFont_verdana_10_4bppv>:
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b08e      	sub	sp, #56	@ 0x38
 800d8ec:	af0e      	add	r7, sp, #56	@ 0x38
 800d8ee:	4b21      	ldr	r3, [pc, #132]	@ (800d974 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f3bf 8f5b 	dmb	ish
 800d8f6:	f003 0301 	and.w	r3, r3, #1
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	bf0c      	ite	eq
 800d8fe:	2301      	moveq	r3, #1
 800d900:	2300      	movne	r3, #0
 800d902:	b2db      	uxtb	r3, r3
 800d904:	2b00      	cmp	r3, #0
 800d906:	d030      	beq.n	800d96a <_Z23getFont_verdana_10_4bppv+0x82>
 800d908:	481a      	ldr	r0, [pc, #104]	@ (800d974 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800d90a:	f001 f8aa 	bl	800ea62 <__cxa_guard_acquire>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	bf14      	ite	ne
 800d914:	2301      	movne	r3, #1
 800d916:	2300      	moveq	r3, #0
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d025      	beq.n	800d96a <_Z23getFont_verdana_10_4bppv+0x82>
 800d91e:	2300      	movs	r3, #0
 800d920:	930c      	str	r3, [sp, #48]	@ 0x30
 800d922:	2300      	movs	r3, #0
 800d924:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d926:	2300      	movs	r3, #0
 800d928:	930a      	str	r3, [sp, #40]	@ 0x28
 800d92a:	233f      	movs	r3, #63	@ 0x3f
 800d92c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d92e:	4b12      	ldr	r3, [pc, #72]	@ (800d978 <_Z23getFont_verdana_10_4bppv+0x90>)
 800d930:	9308      	str	r3, [sp, #32]
 800d932:	4b12      	ldr	r3, [pc, #72]	@ (800d97c <_Z23getFont_verdana_10_4bppv+0x94>)
 800d934:	9307      	str	r3, [sp, #28]
 800d936:	2300      	movs	r3, #0
 800d938:	9306      	str	r3, [sp, #24]
 800d93a:	2300      	movs	r3, #0
 800d93c:	9305      	str	r3, [sp, #20]
 800d93e:	2301      	movs	r3, #1
 800d940:	9304      	str	r3, [sp, #16]
 800d942:	2304      	movs	r3, #4
 800d944:	9303      	str	r3, [sp, #12]
 800d946:	2300      	movs	r3, #0
 800d948:	9302      	str	r3, [sp, #8]
 800d94a:	2300      	movs	r3, #0
 800d94c:	9301      	str	r3, [sp, #4]
 800d94e:	230a      	movs	r3, #10
 800d950:	9300      	str	r3, [sp, #0]
 800d952:	230a      	movs	r3, #10
 800d954:	2201      	movs	r2, #1
 800d956:	490a      	ldr	r1, [pc, #40]	@ (800d980 <_Z23getFont_verdana_10_4bppv+0x98>)
 800d958:	480a      	ldr	r0, [pc, #40]	@ (800d984 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800d95a:	f7ff fdfd 	bl	800d558 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d95e:	480a      	ldr	r0, [pc, #40]	@ (800d988 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800d960:	f001 f8ca 	bl	800eaf8 <atexit>
 800d964:	4803      	ldr	r0, [pc, #12]	@ (800d974 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800d966:	f001 f888 	bl	800ea7a <__cxa_guard_release>
 800d96a:	4b06      	ldr	r3, [pc, #24]	@ (800d984 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800d96c:	4618      	mov	r0, r3
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	24000700 	.word	0x24000700
 800d978:	08011204 	.word	0x08011204
 800d97c:	08011218 	.word	0x08011218
 800d980:	080111d8 	.word	0x080111d8
 800d984:	240006d4 	.word	0x240006d4
 800d988:	0800d8d9 	.word	0x0800d8d9

0800d98c <__tcf_0>:
 800d98c:	b580      	push	{r7, lr}
 800d98e:	af00      	add	r7, sp, #0
 800d990:	4801      	ldr	r0, [pc, #4]	@ (800d998 <__tcf_0+0xc>)
 800d992:	f7ff fda7 	bl	800d4e4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d996:	bd80      	pop	{r7, pc}
 800d998:	24000704 	.word	0x24000704

0800d99c <_Z23getFont_verdana_40_4bppv>:
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b08e      	sub	sp, #56	@ 0x38
 800d9a0:	af0e      	add	r7, sp, #56	@ 0x38
 800d9a2:	4b21      	ldr	r3, [pc, #132]	@ (800da28 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f3bf 8f5b 	dmb	ish
 800d9aa:	f003 0301 	and.w	r3, r3, #1
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	bf0c      	ite	eq
 800d9b2:	2301      	moveq	r3, #1
 800d9b4:	2300      	movne	r3, #0
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d030      	beq.n	800da1e <_Z23getFont_verdana_40_4bppv+0x82>
 800d9bc:	481a      	ldr	r0, [pc, #104]	@ (800da28 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800d9be:	f001 f850 	bl	800ea62 <__cxa_guard_acquire>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	bf14      	ite	ne
 800d9c8:	2301      	movne	r3, #1
 800d9ca:	2300      	moveq	r3, #0
 800d9cc:	b2db      	uxtb	r3, r3
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d025      	beq.n	800da1e <_Z23getFont_verdana_40_4bppv+0x82>
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d9da:	2300      	movs	r3, #0
 800d9dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9de:	233f      	movs	r3, #63	@ 0x3f
 800d9e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9e2:	4b12      	ldr	r3, [pc, #72]	@ (800da2c <_Z23getFont_verdana_40_4bppv+0x90>)
 800d9e4:	9308      	str	r3, [sp, #32]
 800d9e6:	4b12      	ldr	r3, [pc, #72]	@ (800da30 <_Z23getFont_verdana_40_4bppv+0x94>)
 800d9e8:	9307      	str	r3, [sp, #28]
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	9306      	str	r3, [sp, #24]
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	9305      	str	r3, [sp, #20]
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	9304      	str	r3, [sp, #16]
 800d9f6:	2304      	movs	r3, #4
 800d9f8:	9303      	str	r3, [sp, #12]
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	9302      	str	r3, [sp, #8]
 800d9fe:	2300      	movs	r3, #0
 800da00:	9301      	str	r3, [sp, #4]
 800da02:	2328      	movs	r3, #40	@ 0x28
 800da04:	9300      	str	r3, [sp, #0]
 800da06:	2328      	movs	r3, #40	@ 0x28
 800da08:	2201      	movs	r2, #1
 800da0a:	490a      	ldr	r1, [pc, #40]	@ (800da34 <_Z23getFont_verdana_40_4bppv+0x98>)
 800da0c:	480a      	ldr	r0, [pc, #40]	@ (800da38 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800da0e:	f7ff fda3 	bl	800d558 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800da12:	480a      	ldr	r0, [pc, #40]	@ (800da3c <_Z23getFont_verdana_40_4bppv+0xa0>)
 800da14:	f001 f870 	bl	800eaf8 <atexit>
 800da18:	4803      	ldr	r0, [pc, #12]	@ (800da28 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800da1a:	f001 f82e 	bl	800ea7a <__cxa_guard_release>
 800da1e:	4b06      	ldr	r3, [pc, #24]	@ (800da38 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800da20:	4618      	mov	r0, r3
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	24000730 	.word	0x24000730
 800da2c:	08011208 	.word	0x08011208
 800da30:	0801121c 	.word	0x0801121c
 800da34:	080111e8 	.word	0x080111e8
 800da38:	24000704 	.word	0x24000704
 800da3c:	0800d98d 	.word	0x0800d98d

0800da40 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 800da40:	b480      	push	{r7}
 800da42:	b085      	sub	sp, #20
 800da44:	af00      	add	r7, sp, #0
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	460b      	mov	r3, r1
 800da4a:	607a      	str	r2, [r7, #4]
 800da4c:	817b      	strh	r3, [r7, #10]
 800da4e:	2300      	movs	r3, #0
 800da50:	4618      	mov	r0, r3
 800da52:	3714      	adds	r7, #20
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr

0800da5c <_ZNK8touchgfx4Font12getGSUBTableEv>:
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	2300      	movs	r3, #0
 800da66:	4618      	mov	r0, r3
 800da68:	370c      	adds	r7, #12
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr

0800da72 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
 800da72:	b480      	push	{r7}
 800da74:	b083      	sub	sp, #12
 800da76:	af00      	add	r7, sp, #0
 800da78:	6078      	str	r0, [r7, #4]
 800da7a:	2300      	movs	r3, #0
 800da7c:	4618      	mov	r0, r3
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 800da88:	b40e      	push	{r1, r2, r3}
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b085      	sub	sp, #20
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
 800da92:	f107 0320 	add.w	r3, r7, #32
 800da96:	60bb      	str	r3, [r7, #8]
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	69fa      	ldr	r2, [r7, #28]
 800da9c:	2100      	movs	r1, #0
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f000 f90c 	bl	800dcbc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800daa4:	4603      	mov	r3, r0
 800daa6:	81fb      	strh	r3, [r7, #14]
 800daa8:	89fb      	ldrh	r3, [r7, #14]
 800daaa:	4618      	mov	r0, r3
 800daac:	3714      	adds	r7, #20
 800daae:	46bd      	mov	sp, r7
 800dab0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dab4:	b003      	add	sp, #12
 800dab6:	4770      	bx	lr

0800dab8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 800dab8:	b40c      	push	{r2, r3}
 800daba:	b580      	push	{r7, lr}
 800dabc:	b084      	sub	sp, #16
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	6078      	str	r0, [r7, #4]
 800dac2:	460b      	mov	r3, r1
 800dac4:	70fb      	strb	r3, [r7, #3]
 800dac6:	f107 031c 	add.w	r3, r7, #28
 800daca:	60bb      	str	r3, [r7, #8]
 800dacc:	78f9      	ldrb	r1, [r7, #3]
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	69ba      	ldr	r2, [r7, #24]
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 f8f2 	bl	800dcbc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800dad8:	4603      	mov	r3, r0
 800dada:	81fb      	strh	r3, [r7, #14]
 800dadc:	89fb      	ldrh	r3, [r7, #14]
 800dade:	4618      	mov	r0, r3
 800dae0:	3710      	adds	r7, #16
 800dae2:	46bd      	mov	sp, r7
 800dae4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dae8:	b002      	add	sp, #8
 800daea:	4770      	bx	lr

0800daec <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 800daec:	b580      	push	{r7, lr}
 800daee:	b08a      	sub	sp, #40	@ 0x28
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	460b      	mov	r3, r1
 800daf6:	70fb      	strb	r3, [r7, #3]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d016      	beq.n	800db2e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	3322      	adds	r3, #34	@ 0x22
 800db04:	627b      	str	r3, [r7, #36]	@ 0x24
 800db06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db08:	8adb      	ldrh	r3, [r3, #22]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d105      	bne.n	800db1a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800db0e:	4b43      	ldr	r3, [pc, #268]	@ (800dc1c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800db10:	4a43      	ldr	r2, [pc, #268]	@ (800dc20 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800db12:	21c5      	movs	r1, #197	@ 0xc5
 800db14:	4843      	ldr	r0, [pc, #268]	@ (800dc24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800db16:	f000 ffd1 	bl	800eabc <__assert_func>
 800db1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db1c:	8a9b      	ldrh	r3, [r3, #20]
 800db1e:	461a      	mov	r2, r3
 800db20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d001      	beq.n	800db2e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800db2a:	2301      	movs	r3, #1
 800db2c:	e000      	b.n	800db30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800db2e:	2300      	movs	r3, #0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d06a      	beq.n	800dc0a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f000 ff73 	bl	800ea20 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	3322      	adds	r3, #34	@ 0x22
 800db3e:	623b      	str	r3, [r7, #32]
 800db40:	2301      	movs	r3, #1
 800db42:	83fb      	strh	r3, [r7, #30]
 800db44:	6a3b      	ldr	r3, [r7, #32]
 800db46:	8adb      	ldrh	r3, [r3, #22]
 800db48:	8bfa      	ldrh	r2, [r7, #30]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d305      	bcc.n	800db5a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800db4e:	4b36      	ldr	r3, [pc, #216]	@ (800dc28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800db50:	4a36      	ldr	r2, [pc, #216]	@ (800dc2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800db52:	21cb      	movs	r1, #203	@ 0xcb
 800db54:	4833      	ldr	r0, [pc, #204]	@ (800dc24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800db56:	f000 ffb1 	bl	800eabc <__assert_func>
 800db5a:	6a3b      	ldr	r3, [r7, #32]
 800db5c:	8a9a      	ldrh	r2, [r3, #20]
 800db5e:	8bfb      	ldrh	r3, [r7, #30]
 800db60:	4413      	add	r3, r2
 800db62:	83bb      	strh	r3, [r7, #28]
 800db64:	8bbb      	ldrh	r3, [r7, #28]
 800db66:	2b09      	cmp	r3, #9
 800db68:	d801      	bhi.n	800db6e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800db6a:	8bbb      	ldrh	r3, [r7, #28]
 800db6c:	e001      	b.n	800db72 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800db6e:	8bbb      	ldrh	r3, [r7, #28]
 800db70:	3b0a      	subs	r3, #10
 800db72:	6a3a      	ldr	r2, [r7, #32]
 800db74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db78:	f640 123f 	movw	r2, #2367	@ 0x93f
 800db7c:	4293      	cmp	r3, r2
 800db7e:	bf0c      	ite	eq
 800db80:	2301      	moveq	r3, #1
 800db82:	2300      	movne	r3, #0
 800db84:	b2db      	uxtb	r3, r3
 800db86:	2b00      	cmp	r3, #0
 800db88:	d03f      	beq.n	800dc0a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	3322      	adds	r3, #34	@ 0x22
 800db8e:	687a      	ldr	r2, [r7, #4]
 800db90:	3222      	adds	r2, #34	@ 0x22
 800db92:	60ba      	str	r2, [r7, #8]
 800db94:	68ba      	ldr	r2, [r7, #8]
 800db96:	8ad2      	ldrh	r2, [r2, #22]
 800db98:	2a00      	cmp	r2, #0
 800db9a:	d105      	bne.n	800dba8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800db9c:	4b1f      	ldr	r3, [pc, #124]	@ (800dc1c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800db9e:	4a20      	ldr	r2, [pc, #128]	@ (800dc20 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800dba0:	21c5      	movs	r1, #197	@ 0xc5
 800dba2:	4820      	ldr	r0, [pc, #128]	@ (800dc24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800dba4:	f000 ff8a 	bl	800eabc <__assert_func>
 800dba8:	68ba      	ldr	r2, [r7, #8]
 800dbaa:	8a92      	ldrh	r2, [r2, #20]
 800dbac:	4611      	mov	r1, r2
 800dbae:	68ba      	ldr	r2, [r7, #8]
 800dbb0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800dbb4:	613b      	str	r3, [r7, #16]
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	81fb      	strh	r3, [r7, #14]
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	8adb      	ldrh	r3, [r3, #22]
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	d806      	bhi.n	800dbd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800dbc2:	4b1b      	ldr	r3, [pc, #108]	@ (800dc30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800dbc4:	4a1b      	ldr	r2, [pc, #108]	@ (800dc34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800dbc6:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800dbca:	4816      	ldr	r0, [pc, #88]	@ (800dc24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800dbcc:	f000 ff76 	bl	800eabc <__assert_func>
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	8a9b      	ldrh	r3, [r3, #20]
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	81bb      	strh	r3, [r7, #12]
 800dbd8:	89bb      	ldrh	r3, [r7, #12]
 800dbda:	2b09      	cmp	r3, #9
 800dbdc:	d801      	bhi.n	800dbe2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800dbde:	89bb      	ldrh	r3, [r7, #12]
 800dbe0:	e000      	b.n	800dbe4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	693a      	ldr	r2, [r7, #16]
 800dbe6:	89f9      	ldrh	r1, [r7, #14]
 800dbe8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800dbec:	bf00      	nop
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	3322      	adds	r3, #34	@ 0x22
 800dbf2:	61bb      	str	r3, [r7, #24]
 800dbf4:	f640 133f 	movw	r3, #2367	@ 0x93f
 800dbf8:	82fb      	strh	r3, [r7, #22]
 800dbfa:	69bb      	ldr	r3, [r7, #24]
 800dbfc:	8a9b      	ldrh	r3, [r3, #20]
 800dbfe:	4619      	mov	r1, r3
 800dc00:	69bb      	ldr	r3, [r7, #24]
 800dc02:	8afa      	ldrh	r2, [r7, #22]
 800dc04:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 800dc08:	bf00      	nop
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 fe0a 	bl	800e824 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dc10:	4603      	mov	r3, r0
 800dc12:	4618      	mov	r0, r3
 800dc14:	3728      	adds	r7, #40	@ 0x28
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	0800fad8 	.word	0x0800fad8
 800dc20:	0800fae4 	.word	0x0800fae4
 800dc24:	0800fb90 	.word	0x0800fb90
 800dc28:	0800fbd8 	.word	0x0800fbd8
 800dc2c:	0800fbe8 	.word	0x0800fbe8
 800dc30:	0800fcbc 	.word	0x0800fcbc
 800dc34:	0800fcc8 	.word	0x0800fcc8

0800dc38 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 fdb8 	bl	800e7b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800dc46:	bf00      	nop
 800dc48:	3708      	adds	r7, #8
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
	...

0800dc50 <_Z41__static_initialization_and_destruction_0v>:
 800dc50:	b580      	push	{r7, lr}
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	f7ff fd94 	bl	800d780 <_Z24getFont_consolab_20_4bppv>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	4a0c      	ldr	r2, [pc, #48]	@ (800dc8c <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800dc5c:	6013      	str	r3, [r2, #0]
 800dc5e:	f7ff fe9d 	bl	800d99c <_Z23getFont_verdana_40_4bppv>
 800dc62:	4603      	mov	r3, r0
 800dc64:	4a09      	ldr	r2, [pc, #36]	@ (800dc8c <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800dc66:	6053      	str	r3, [r2, #4]
 800dc68:	f7ff fe3e 	bl	800d8e8 <_Z23getFont_verdana_10_4bppv>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	4a07      	ldr	r2, [pc, #28]	@ (800dc8c <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800dc70:	6093      	str	r3, [r2, #8]
 800dc72:	f7ff fd2b 	bl	800d6cc <_Z23getFont_consola_20_4bppv>
 800dc76:	4603      	mov	r3, r0
 800dc78:	4a04      	ldr	r2, [pc, #16]	@ (800dc8c <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800dc7a:	60d3      	str	r3, [r2, #12]
 800dc7c:	f7ff fdda 	bl	800d834 <_Z24getFont_consolab_30_4bppv>
 800dc80:	4603      	mov	r3, r0
 800dc82:	4a02      	ldr	r2, [pc, #8]	@ (800dc8c <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800dc84:	6113      	str	r3, [r2, #16]
 800dc86:	bf00      	nop
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	24000734 	.word	0x24000734

0800dc90 <_GLOBAL__sub_I_touchgfx_fonts>:
 800dc90:	b580      	push	{r7, lr}
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	f7ff ffdc 	bl	800dc50 <_Z41__static_initialization_and_destruction_0v>
 800dc98:	bd80      	pop	{r7, pc}
	...

0800dc9c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800dc9c:	4b01      	ldr	r3, [pc, #4]	@ (800dca4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800dc9e:	2200      	movs	r2, #0
 800dca0:	601a      	str	r2, [r3, #0]
 800dca2:	4770      	bx	lr
 800dca4:	24000748 	.word	0x24000748

0800dca8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800dca8:	4b03      	ldr	r3, [pc, #12]	@ (800dcb8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800dcaa:	2200      	movs	r2, #0
 800dcac:	801a      	strh	r2, [r3, #0]
 800dcae:	805a      	strh	r2, [r3, #2]
 800dcb0:	809a      	strh	r2, [r3, #4]
 800dcb2:	80da      	strh	r2, [r3, #6]
 800dcb4:	4770      	bx	lr
 800dcb6:	bf00      	nop
 800dcb8:	2400074c 	.word	0x2400074c

0800dcbc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800dcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc0:	b09d      	sub	sp, #116	@ 0x74
 800dcc2:	4606      	mov	r6, r0
 800dcc4:	4614      	mov	r4, r2
 800dcc6:	468a      	mov	sl, r1
 800dcc8:	a803      	add	r0, sp, #12
 800dcca:	461d      	mov	r5, r3
 800dccc:	f000 f9b4 	bl	800e038 <_ZN8touchgfx12TextProviderC1Ev>
 800dcd0:	6833      	ldr	r3, [r6, #0]
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 800dcd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcda:	4798      	blx	r3
 800dcdc:	6833      	ldr	r3, [r6, #0]
 800dcde:	4607      	mov	r7, r0
 800dce0:	4630      	mov	r0, r6
 800dce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dce4:	4798      	blx	r3
 800dce6:	462a      	mov	r2, r5
 800dce8:	2500      	movs	r5, #0
 800dcea:	4621      	mov	r1, r4
 800dcec:	9000      	str	r0, [sp, #0]
 800dcee:	463b      	mov	r3, r7
 800dcf0:	462c      	mov	r4, r5
 800dcf2:	46a9      	mov	r9, r5
 800dcf4:	46a8      	mov	r8, r5
 800dcf6:	a803      	add	r0, sp, #12
 800dcf8:	f000 f9f1 	bl	800e0de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	9302      	str	r3, [sp, #8]
 800dd00:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800dd04:	429c      	cmp	r4, r3
 800dd06:	d002      	beq.n	800dd0e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800dd08:	455c      	cmp	r4, fp
 800dd0a:	bf18      	it	ne
 800dd0c:	4625      	movne	r5, r4
 800dd0e:	ab02      	add	r3, sp, #8
 800dd10:	4632      	mov	r2, r6
 800dd12:	4651      	mov	r1, sl
 800dd14:	a803      	add	r0, sp, #12
 800dd16:	f000 fd05 	bl	800e724 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	b108      	cbz	r0, 800dd22 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800dd1e:	280a      	cmp	r0, #10
 800dd20:	d10a      	bne.n	800dd38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800dd22:	45c1      	cmp	r9, r8
 800dd24:	bf38      	it	cc
 800dd26:	46c1      	movcc	r9, r8
 800dd28:	f04f 0800 	mov.w	r8, #0
 800dd2c:	2c00      	cmp	r4, #0
 800dd2e:	d1e5      	bne.n	800dcfc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800dd30:	4648      	mov	r0, r9
 800dd32:	b01d      	add	sp, #116	@ 0x74
 800dd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd38:	9a02      	ldr	r2, [sp, #8]
 800dd3a:	2a00      	cmp	r2, #0
 800dd3c:	d0de      	beq.n	800dcfc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800dd3e:	7b57      	ldrb	r7, [r2, #13]
 800dd40:	4629      	mov	r1, r5
 800dd42:	6833      	ldr	r3, [r6, #0]
 800dd44:	007f      	lsls	r7, r7, #1
 800dd46:	8894      	ldrh	r4, [r2, #4]
 800dd48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd4a:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 800dd4e:	7a97      	ldrb	r7, [r2, #10]
 800dd50:	4307      	orrs	r7, r0
 800dd52:	4630      	mov	r0, r6
 800dd54:	4798      	blx	r3
 800dd56:	4438      	add	r0, r7
 800dd58:	4480      	add	r8, r0
 800dd5a:	fa1f f888 	uxth.w	r8, r8
 800dd5e:	e7e5      	b.n	800dd2c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800dd60 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800dd60:	b508      	push	{r3, lr}
 800dd62:	6803      	ldr	r3, [r0, #0]
 800dd64:	68db      	ldr	r3, [r3, #12]
 800dd66:	4798      	blx	r3
 800dd68:	b128      	cbz	r0, 800dd76 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800dd6a:	7b43      	ldrb	r3, [r0, #13]
 800dd6c:	7a80      	ldrb	r0, [r0, #10]
 800dd6e:	005b      	lsls	r3, r3, #1
 800dd70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd74:	4318      	orrs	r0, r3
 800dd76:	bd08      	pop	{r3, pc}

0800dd78 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800dd78:	b40e      	push	{r1, r2, r3}
 800dd7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd7c:	b09e      	sub	sp, #120	@ 0x78
 800dd7e:	4605      	mov	r5, r0
 800dd80:	ab23      	add	r3, sp, #140	@ 0x8c
 800dd82:	a805      	add	r0, sp, #20
 800dd84:	f853 4b04 	ldr.w	r4, [r3], #4
 800dd88:	9303      	str	r3, [sp, #12]
 800dd8a:	f000 f955 	bl	800e038 <_ZN8touchgfx12TextProviderC1Ev>
 800dd8e:	682b      	ldr	r3, [r5, #0]
 800dd90:	4628      	mov	r0, r5
 800dd92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd94:	4798      	blx	r3
 800dd96:	682b      	ldr	r3, [r5, #0]
 800dd98:	4606      	mov	r6, r0
 800dd9a:	4628      	mov	r0, r5
 800dd9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd9e:	4798      	blx	r3
 800dda0:	4633      	mov	r3, r6
 800dda2:	4621      	mov	r1, r4
 800dda4:	ae1e      	add	r6, sp, #120	@ 0x78
 800dda6:	2400      	movs	r4, #0
 800dda8:	9000      	str	r0, [sp, #0]
 800ddaa:	9a03      	ldr	r2, [sp, #12]
 800ddac:	a805      	add	r0, sp, #20
 800ddae:	f000 f996 	bl	800e0de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ddb2:	f846 4d68 	str.w	r4, [r6, #-104]!
 800ddb6:	462a      	mov	r2, r5
 800ddb8:	4633      	mov	r3, r6
 800ddba:	4621      	mov	r1, r4
 800ddbc:	a805      	add	r0, sp, #20
 800ddbe:	f000 fcb1 	bl	800e724 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ddc2:	b300      	cbz	r0, 800de06 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 800ddc4:	280a      	cmp	r0, #10
 800ddc6:	d01a      	beq.n	800ddfe <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800ddc8:	9f04      	ldr	r7, [sp, #16]
 800ddca:	b1c7      	cbz	r7, 800ddfe <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800ddcc:	7b78      	ldrb	r0, [r7, #13]
 800ddce:	7a3b      	ldrb	r3, [r7, #8]
 800ddd0:	00c1      	lsls	r1, r0, #3
 800ddd2:	88ea      	ldrh	r2, [r5, #6]
 800ddd4:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800ddd8:	4319      	orrs	r1, r3
 800ddda:	0643      	lsls	r3, r0, #25
 800dddc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800dde0:	bf48      	it	mi
 800dde2:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 800dde6:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800ddea:	bf48      	it	mi
 800ddec:	b219      	sxthmi	r1, r3
 800ddee:	79fb      	ldrb	r3, [r7, #7]
 800ddf0:	4303      	orrs	r3, r0
 800ddf2:	4413      	add	r3, r2
 800ddf4:	1a5b      	subs	r3, r3, r1
 800ddf6:	b21b      	sxth	r3, r3
 800ddf8:	429c      	cmp	r4, r3
 800ddfa:	bfb8      	it	lt
 800ddfc:	461c      	movlt	r4, r3
 800ddfe:	4633      	mov	r3, r6
 800de00:	462a      	mov	r2, r5
 800de02:	2100      	movs	r1, #0
 800de04:	e7da      	b.n	800ddbc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800de06:	b2a0      	uxth	r0, r4
 800de08:	b01e      	add	sp, #120	@ 0x78
 800de0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800de0e:	b003      	add	sp, #12
 800de10:	4770      	bx	lr

0800de12 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800de12:	7a43      	ldrb	r3, [r0, #9]
 800de14:	8880      	ldrh	r0, [r0, #4]
 800de16:	4418      	add	r0, r3
 800de18:	b280      	uxth	r0, r0
 800de1a:	4770      	bx	lr

0800de1c <_ZNK8touchgfx4Font13getFontHeightEv>:
 800de1c:	6803      	ldr	r3, [r0, #0]
 800de1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de20:	4718      	bx	r3

0800de22 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800de22:	b40e      	push	{r1, r2, r3}
 800de24:	b570      	push	{r4, r5, r6, lr}
 800de26:	b09d      	sub	sp, #116	@ 0x74
 800de28:	4604      	mov	r4, r0
 800de2a:	ab21      	add	r3, sp, #132	@ 0x84
 800de2c:	a803      	add	r0, sp, #12
 800de2e:	f853 5b04 	ldr.w	r5, [r3], #4
 800de32:	9302      	str	r3, [sp, #8]
 800de34:	f000 f900 	bl	800e038 <_ZN8touchgfx12TextProviderC1Ev>
 800de38:	6823      	ldr	r3, [r4, #0]
 800de3a:	4620      	mov	r0, r4
 800de3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de3e:	4798      	blx	r3
 800de40:	6823      	ldr	r3, [r4, #0]
 800de42:	4606      	mov	r6, r0
 800de44:	4620      	mov	r0, r4
 800de46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de48:	2401      	movs	r4, #1
 800de4a:	4798      	blx	r3
 800de4c:	4633      	mov	r3, r6
 800de4e:	9000      	str	r0, [sp, #0]
 800de50:	4629      	mov	r1, r5
 800de52:	9a02      	ldr	r2, [sp, #8]
 800de54:	a803      	add	r0, sp, #12
 800de56:	f000 f942 	bl	800e0de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800de5a:	a803      	add	r0, sp, #12
 800de5c:	f000 fce2 	bl	800e824 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800de60:	b2a3      	uxth	r3, r4
 800de62:	b138      	cbz	r0, 800de74 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 800de64:	280a      	cmp	r0, #10
 800de66:	a803      	add	r0, sp, #12
 800de68:	bf04      	itt	eq
 800de6a:	3301      	addeq	r3, #1
 800de6c:	b21c      	sxtheq	r4, r3
 800de6e:	f000 fcd9 	bl	800e824 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800de72:	e7f5      	b.n	800de60 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800de74:	4618      	mov	r0, r3
 800de76:	b01d      	add	sp, #116	@ 0x74
 800de78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de7c:	b003      	add	sp, #12
 800de7e:	4770      	bx	lr

0800de80 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800de80:	b40e      	push	{r1, r2, r3}
 800de82:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de84:	b09e      	sub	sp, #120	@ 0x78
 800de86:	4604      	mov	r4, r0
 800de88:	ab23      	add	r3, sp, #140	@ 0x8c
 800de8a:	a805      	add	r0, sp, #20
 800de8c:	f853 5b04 	ldr.w	r5, [r3], #4
 800de90:	9303      	str	r3, [sp, #12]
 800de92:	f000 f8d1 	bl	800e038 <_ZN8touchgfx12TextProviderC1Ev>
 800de96:	6823      	ldr	r3, [r4, #0]
 800de98:	4620      	mov	r0, r4
 800de9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de9c:	4798      	blx	r3
 800de9e:	6823      	ldr	r3, [r4, #0]
 800dea0:	4606      	mov	r6, r0
 800dea2:	4620      	mov	r0, r4
 800dea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dea6:	4798      	blx	r3
 800dea8:	4633      	mov	r3, r6
 800deaa:	4629      	mov	r1, r5
 800deac:	9000      	str	r0, [sp, #0]
 800deae:	9a03      	ldr	r2, [sp, #12]
 800deb0:	a805      	add	r0, sp, #20
 800deb2:	f000 f914 	bl	800e0de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800deb6:	ad1e      	add	r5, sp, #120	@ 0x78
 800deb8:	2100      	movs	r1, #0
 800deba:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 800debe:	4622      	mov	r2, r4
 800dec0:	a805      	add	r0, sp, #20
 800dec2:	f845 1d68 	str.w	r1, [r5, #-104]!
 800dec6:	462b      	mov	r3, r5
 800dec8:	f000 fc2c 	bl	800e724 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800decc:	b1d8      	cbz	r0, 800df06 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800dece:	280a      	cmp	r0, #10
 800ded0:	d012      	beq.n	800def8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800ded2:	9804      	ldr	r0, [sp, #16]
 800ded4:	b180      	cbz	r0, 800def8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800ded6:	7b47      	ldrb	r7, [r0, #13]
 800ded8:	88e2      	ldrh	r2, [r4, #6]
 800deda:	00fb      	lsls	r3, r7, #3
 800dedc:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800dee0:	7a03      	ldrb	r3, [r0, #8]
 800dee2:	430b      	orrs	r3, r1
 800dee4:	0679      	lsls	r1, r7, #25
 800dee6:	bf44      	itt	mi
 800dee8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800deec:	b21b      	sxthmi	r3, r3
 800deee:	1ad3      	subs	r3, r2, r3
 800def0:	b21b      	sxth	r3, r3
 800def2:	429e      	cmp	r6, r3
 800def4:	bfa8      	it	ge
 800def6:	461e      	movge	r6, r3
 800def8:	462b      	mov	r3, r5
 800defa:	4622      	mov	r2, r4
 800defc:	2100      	movs	r1, #0
 800defe:	a805      	add	r0, sp, #20
 800df00:	f000 fc10 	bl	800e724 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800df04:	e7e2      	b.n	800decc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800df06:	4630      	mov	r0, r6
 800df08:	b01e      	add	sp, #120	@ 0x78
 800df0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df0e:	b003      	add	sp, #12
 800df10:	4770      	bx	lr
	...

0800df14 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800df14:	b530      	push	{r4, r5, lr}
 800df16:	8083      	strh	r3, [r0, #4]
 800df18:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800df1c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800df20:	80c3      	strh	r3, [r0, #6]
 800df22:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800df26:	6141      	str	r1, [r0, #20]
 800df28:	7203      	strb	r3, [r0, #8]
 800df2a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800df2e:	8302      	strh	r2, [r0, #24]
 800df30:	7243      	strb	r3, [r0, #9]
 800df32:	7a83      	ldrb	r3, [r0, #10]
 800df34:	f365 0306 	bfi	r3, r5, #0, #7
 800df38:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800df3c:	f365 13c7 	bfi	r3, r5, #7, #1
 800df40:	7283      	strb	r3, [r0, #10]
 800df42:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800df46:	72c3      	strb	r3, [r0, #11]
 800df48:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800df4c:	7303      	strb	r3, [r0, #12]
 800df4e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800df52:	81c3      	strh	r3, [r0, #14]
 800df54:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800df58:	8203      	strh	r3, [r0, #16]
 800df5a:	4b01      	ldr	r3, [pc, #4]	@ (800df60 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800df5c:	6003      	str	r3, [r0, #0]
 800df5e:	bd30      	pop	{r4, r5, pc}
 800df60:	0800fe60 	.word	0x0800fe60

0800df64 <_ZNK8touchgfx9ConstFont4findEt>:
 800df64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df66:	6944      	ldr	r4, [r0, #20]
 800df68:	b3bc      	cbz	r4, 800dfda <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800df6a:	88a3      	ldrh	r3, [r4, #4]
 800df6c:	8b02      	ldrh	r2, [r0, #24]
 800df6e:	1acb      	subs	r3, r1, r3
 800df70:	f102 32ff 	add.w	r2, r2, #4294967295
 800df74:	d431      	bmi.n	800dfda <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800df76:	4293      	cmp	r3, r2
 800df78:	dd0c      	ble.n	800df94 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800df7a:	230e      	movs	r3, #14
 800df7c:	fb03 4302 	mla	r3, r3, r2, r4
 800df80:	889b      	ldrh	r3, [r3, #4]
 800df82:	1a5b      	subs	r3, r3, r1
 800df84:	1ad3      	subs	r3, r2, r3
 800df86:	429a      	cmp	r2, r3
 800df88:	db27      	blt.n	800dfda <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	bfbc      	itt	lt
 800df8e:	2302      	movlt	r3, #2
 800df90:	fb92 f3f3 	sdivlt	r3, r2, r3
 800df94:	2500      	movs	r5, #0
 800df96:	260e      	movs	r6, #14
 800df98:	4295      	cmp	r5, r2
 800df9a:	dc1e      	bgt.n	800dfda <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800df9c:	fb06 4003 	mla	r0, r6, r3, r4
 800dfa0:	8887      	ldrh	r7, [r0, #4]
 800dfa2:	42b9      	cmp	r1, r7
 800dfa4:	d01a      	beq.n	800dfdc <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800dfa6:	d20d      	bcs.n	800dfc4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800dfa8:	1e5a      	subs	r2, r3, #1
 800dfaa:	4295      	cmp	r5, r2
 800dfac:	dc15      	bgt.n	800dfda <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dfae:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800dfb2:	1a5b      	subs	r3, r3, r1
 800dfb4:	1ad3      	subs	r3, r2, r3
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	db0f      	blt.n	800dfda <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dfba:	429d      	cmp	r5, r3
 800dfbc:	ddec      	ble.n	800df98 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800dfbe:	1953      	adds	r3, r2, r5
 800dfc0:	105b      	asrs	r3, r3, #1
 800dfc2:	e7e9      	b.n	800df98 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800dfc4:	1c5d      	adds	r5, r3, #1
 800dfc6:	42aa      	cmp	r2, r5
 800dfc8:	db07      	blt.n	800dfda <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dfca:	8a43      	ldrh	r3, [r0, #18]
 800dfcc:	1acb      	subs	r3, r1, r3
 800dfce:	442b      	add	r3, r5
 800dfd0:	429d      	cmp	r5, r3
 800dfd2:	dc02      	bgt.n	800dfda <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	dadf      	bge.n	800df98 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800dfd8:	e7f1      	b.n	800dfbe <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800dfda:	2000      	movs	r0, #0
 800dfdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dfde <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800dfde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfe0:	4604      	mov	r4, r0
 800dfe2:	4617      	mov	r7, r2
 800dfe4:	461e      	mov	r6, r3
 800dfe6:	b911      	cbnz	r1, 800dfee <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800dfe8:	2500      	movs	r5, #0
 800dfea:	4628      	mov	r0, r5
 800dfec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfee:	290a      	cmp	r1, #10
 800dff0:	d0fa      	beq.n	800dfe8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800dff2:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800dff6:	4291      	cmp	r1, r2
 800dff8:	d0f6      	beq.n	800dfe8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800dffa:	f242 020b 	movw	r2, #8203	@ 0x200b
 800dffe:	4291      	cmp	r1, r2
 800e000:	d0f2      	beq.n	800dfe8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e002:	f7ff ffaf 	bl	800df64 <_ZNK8touchgfx9ConstFont4findEt>
 800e006:	4605      	mov	r5, r0
 800e008:	b950      	cbnz	r0, 800e020 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800e00a:	6823      	ldr	r3, [r4, #0]
 800e00c:	4620      	mov	r0, r4
 800e00e:	691b      	ldr	r3, [r3, #16]
 800e010:	4798      	blx	r3
 800e012:	4601      	mov	r1, r0
 800e014:	4620      	mov	r0, r4
 800e016:	f7ff ffa5 	bl	800df64 <_ZNK8touchgfx9ConstFont4findEt>
 800e01a:	4605      	mov	r5, r0
 800e01c:	2800      	cmp	r0, #0
 800e01e:	d0e3      	beq.n	800dfe8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e020:	6823      	ldr	r3, [r4, #0]
 800e022:	4629      	mov	r1, r5
 800e024:	4620      	mov	r0, r4
 800e026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e028:	4798      	blx	r3
 800e02a:	6038      	str	r0, [r7, #0]
 800e02c:	6823      	ldr	r3, [r4, #0]
 800e02e:	4620      	mov	r0, r4
 800e030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e032:	4798      	blx	r3
 800e034:	7030      	strb	r0, [r6, #0]
 800e036:	e7d8      	b.n	800dfea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800e038 <_ZN8touchgfx12TextProviderC1Ev>:
 800e038:	b538      	push	{r3, r4, r5, lr}
 800e03a:	2500      	movs	r5, #0
 800e03c:	2302      	movs	r3, #2
 800e03e:	4604      	mov	r4, r0
 800e040:	220e      	movs	r2, #14
 800e042:	7403      	strb	r3, [r0, #16]
 800e044:	4629      	mov	r1, r5
 800e046:	6145      	str	r5, [r0, #20]
 800e048:	7605      	strb	r5, [r0, #24]
 800e04a:	83c5      	strh	r5, [r0, #30]
 800e04c:	8405      	strh	r5, [r0, #32]
 800e04e:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800e050:	8705      	strh	r5, [r0, #56]	@ 0x38
 800e052:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 800e054:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 800e058:	e9c0 5500 	strd	r5, r5, [r0]
 800e05c:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 800e060:	304c      	adds	r0, #76	@ 0x4c
 800e062:	f000 ff24 	bl	800eeae <memset>
 800e066:	2301      	movs	r3, #1
 800e068:	4620      	mov	r0, r4
 800e06a:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800e06e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e072:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 800e076:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 800e07a:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800e07e:	f7ff fddb 	bl	800dc38 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800e082:	4620      	mov	r0, r4
 800e084:	bd38      	pop	{r3, r4, r5, pc}

0800e086 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800e086:	b530      	push	{r4, r5, lr}
 800e088:	2500      	movs	r5, #0
 800e08a:	2401      	movs	r4, #1
 800e08c:	6843      	ldr	r3, [r0, #4]
 800e08e:	b913      	cbnz	r3, 800e096 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800e090:	6803      	ldr	r3, [r0, #0]
 800e092:	b313      	cbz	r3, 800e0da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e094:	6043      	str	r3, [r0, #4]
 800e096:	7e03      	ldrb	r3, [r0, #24]
 800e098:	b143      	cbz	r3, 800e0ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800e09a:	6943      	ldr	r3, [r0, #20]
 800e09c:	b12b      	cbz	r3, 800e0aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e09e:	881a      	ldrh	r2, [r3, #0]
 800e0a0:	b11a      	cbz	r2, 800e0aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e0a2:	1c9a      	adds	r2, r3, #2
 800e0a4:	6142      	str	r2, [r0, #20]
 800e0a6:	8818      	ldrh	r0, [r3, #0]
 800e0a8:	bd30      	pop	{r4, r5, pc}
 800e0aa:	7605      	strb	r5, [r0, #24]
 800e0ac:	6843      	ldr	r3, [r0, #4]
 800e0ae:	8819      	ldrh	r1, [r3, #0]
 800e0b0:	b199      	cbz	r1, 800e0da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e0b2:	1c9a      	adds	r2, r3, #2
 800e0b4:	2902      	cmp	r1, #2
 800e0b6:	6042      	str	r2, [r0, #4]
 800e0b8:	d1f5      	bne.n	800e0a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800e0ba:	7c03      	ldrb	r3, [r0, #16]
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d8e5      	bhi.n	800e08c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e0c0:	1c5a      	adds	r2, r3, #1
 800e0c2:	3302      	adds	r3, #2
 800e0c4:	7402      	strb	r2, [r0, #16]
 800e0c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e0ca:	6143      	str	r3, [r0, #20]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d0dd      	beq.n	800e08c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e0d0:	881b      	ldrh	r3, [r3, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d0da      	beq.n	800e08c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e0d6:	7604      	strb	r4, [r0, #24]
 800e0d8:	e7d8      	b.n	800e08c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e0da:	2000      	movs	r0, #0
 800e0dc:	e7e4      	b.n	800e0a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800e0de <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800e0de:	6001      	str	r1, [r0, #0]
 800e0e0:	2100      	movs	r1, #0
 800e0e2:	b430      	push	{r4, r5}
 800e0e4:	6041      	str	r1, [r0, #4]
 800e0e6:	6815      	ldr	r5, [r2, #0]
 800e0e8:	6085      	str	r5, [r0, #8]
 800e0ea:	6852      	ldr	r2, [r2, #4]
 800e0ec:	6443      	str	r3, [r0, #68]	@ 0x44
 800e0ee:	9b02      	ldr	r3, [sp, #8]
 800e0f0:	60c2      	str	r2, [r0, #12]
 800e0f2:	7401      	strb	r1, [r0, #16]
 800e0f4:	6141      	str	r1, [r0, #20]
 800e0f6:	7601      	strb	r1, [r0, #24]
 800e0f8:	8701      	strh	r1, [r0, #56]	@ 0x38
 800e0fa:	8401      	strh	r1, [r0, #32]
 800e0fc:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 800e100:	6483      	str	r3, [r0, #72]	@ 0x48
 800e102:	bc30      	pop	{r4, r5}
 800e104:	f7ff bd98 	b.w	800dc38 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800e108 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800e108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e10a:	4605      	mov	r5, r0
 800e10c:	4608      	mov	r0, r1
 800e10e:	b1f1      	cbz	r1, 800e14e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 800e110:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 800e114:	460b      	mov	r3, r1
 800e116:	f101 0708 	add.w	r7, r1, #8
 800e11a:	4622      	mov	r2, r4
 800e11c:	6818      	ldr	r0, [r3, #0]
 800e11e:	3308      	adds	r3, #8
 800e120:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e124:	4626      	mov	r6, r4
 800e126:	42bb      	cmp	r3, r7
 800e128:	c603      	stmia	r6!, {r0, r1}
 800e12a:	4634      	mov	r4, r6
 800e12c:	d1f6      	bne.n	800e11c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800e12e:	6818      	ldr	r0, [r3, #0]
 800e130:	6030      	str	r0, [r6, #0]
 800e132:	4610      	mov	r0, r2
 800e134:	889b      	ldrh	r3, [r3, #4]
 800e136:	80b3      	strh	r3, [r6, #4]
 800e138:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800e13c:	015b      	lsls	r3, r3, #5
 800e13e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800e142:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 800e146:	430b      	orrs	r3, r1
 800e148:	425b      	negs	r3, r3
 800e14a:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800e14e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e150 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800e150:	b538      	push	{r3, r4, r5, lr}
 800e152:	460c      	mov	r4, r1
 800e154:	6811      	ldr	r1, [r2, #0]
 800e156:	4610      	mov	r0, r2
 800e158:	68cd      	ldr	r5, [r1, #12]
 800e15a:	4619      	mov	r1, r3
 800e15c:	47a8      	blx	r5
 800e15e:	2800      	cmp	r0, #0
 800e160:	bf08      	it	eq
 800e162:	4620      	moveq	r0, r4
 800e164:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e168 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800e168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e16c:	468c      	mov	ip, r1
 800e16e:	4605      	mov	r5, r0
 800e170:	4614      	mov	r4, r2
 800e172:	b942      	cbnz	r2, 800e186 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 800e174:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800e178:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 800e17c:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 800e180:	4620      	mov	r0, r4
 800e182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e186:	7b50      	ldrb	r0, [r2, #13]
 800e188:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 800e18c:	8893      	ldrh	r3, [r2, #4]
 800e18e:	0106      	lsls	r6, r0, #4
 800e190:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800e194:	79e6      	ldrb	r6, [r4, #7]
 800e196:	4316      	orrs	r6, r2
 800e198:	185a      	adds	r2, r3, r1
 800e19a:	b291      	uxth	r1, r2
 800e19c:	b2b7      	uxth	r7, r6
 800e19e:	291d      	cmp	r1, #29
 800e1a0:	d87f      	bhi.n	800e2a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	10f6      	asrs	r6, r6, #3
 800e1a6:	408a      	lsls	r2, r1
 800e1a8:	498b      	ldr	r1, [pc, #556]	@ (800e3d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 800e1aa:	420a      	tst	r2, r1
 800e1ac:	d12e      	bne.n	800e20c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800e1ae:	f412 7f60 	tst.w	r2, #896	@ 0x380
 800e1b2:	d076      	beq.n	800e2a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 800e1b4:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e1b8:	4623      	mov	r3, r4
 800e1ba:	f104 0e08 	add.w	lr, r4, #8
 800e1be:	4614      	mov	r4, r2
 800e1c0:	6818      	ldr	r0, [r3, #0]
 800e1c2:	3308      	adds	r3, #8
 800e1c4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e1c8:	4694      	mov	ip, r2
 800e1ca:	4573      	cmp	r3, lr
 800e1cc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800e1d0:	4662      	mov	r2, ip
 800e1d2:	d1f5      	bne.n	800e1c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 800e1d4:	6818      	ldr	r0, [r3, #0]
 800e1d6:	f8cc 0000 	str.w	r0, [ip]
 800e1da:	889b      	ldrh	r3, [r3, #4]
 800e1dc:	f8ac 3004 	strh.w	r3, [ip, #4]
 800e1e0:	b2b3      	uxth	r3, r6
 800e1e2:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 800e1e6:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 800e1ea:	1aca      	subs	r2, r1, r3
 800e1ec:	1bcf      	subs	r7, r1, r7
 800e1ee:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 800e1f2:	b292      	uxth	r2, r2
 800e1f4:	1afb      	subs	r3, r7, r3
 800e1f6:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 800e1fa:	10d2      	asrs	r2, r2, #3
 800e1fc:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 800e200:	4302      	orrs	r2, r0
 800e202:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 800e206:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 800e20a:	e7b9      	b.n	800e180 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800e20c:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e210:	4623      	mov	r3, r4
 800e212:	f104 0808 	add.w	r8, r4, #8
 800e216:	4614      	mov	r4, r2
 800e218:	6818      	ldr	r0, [r3, #0]
 800e21a:	3308      	adds	r3, #8
 800e21c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e220:	4696      	mov	lr, r2
 800e222:	4543      	cmp	r3, r8
 800e224:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e228:	4672      	mov	r2, lr
 800e22a:	d1f5      	bne.n	800e218 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 800e22c:	6818      	ldr	r0, [r3, #0]
 800e22e:	f8ce 0000 	str.w	r0, [lr]
 800e232:	889b      	ldrh	r3, [r3, #4]
 800e234:	f8ae 3004 	strh.w	r3, [lr, #4]
 800e238:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 800e23a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800e23e:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800e240:	f640 6333 	movw	r3, #3635	@ 0xe33
 800e244:	4299      	cmp	r1, r3
 800e246:	d111      	bne.n	800e26c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 800e248:	f8dc 3000 	ldr.w	r3, [ip]
 800e24c:	4660      	mov	r0, ip
 800e24e:	68db      	ldr	r3, [r3, #12]
 800e250:	4798      	blx	r3
 800e252:	7b41      	ldrb	r1, [r0, #13]
 800e254:	00cb      	lsls	r3, r1, #3
 800e256:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e25a:	7a03      	ldrb	r3, [r0, #8]
 800e25c:	4313      	orrs	r3, r2
 800e25e:	064a      	lsls	r2, r1, #25
 800e260:	bf44      	itt	mi
 800e262:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e266:	b21b      	sxthmi	r3, r3
 800e268:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e26c:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 800e270:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 800e274:	443b      	add	r3, r7
 800e276:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800e27a:	4433      	add	r3, r6
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e282:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 800e286:	10db      	asrs	r3, r3, #3
 800e288:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e28c:	4313      	orrs	r3, r2
 800e28e:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 800e292:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 800e296:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 800e29a:	1a9b      	subs	r3, r3, r2
 800e29c:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800e2a0:	e76e      	b.n	800e180 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800e2a2:	f023 0204 	bic.w	r2, r3, #4
 800e2a6:	f640 611b 	movw	r1, #3611	@ 0xe1b
 800e2aa:	428a      	cmp	r2, r1
 800e2ac:	d003      	beq.n	800e2b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 800e2ae:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d138      	bne.n	800e328 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 800e2b6:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 800e2ba:	4622      	mov	r2, r4
 800e2bc:	f104 0808 	add.w	r8, r4, #8
 800e2c0:	4634      	mov	r4, r6
 800e2c2:	6810      	ldr	r0, [r2, #0]
 800e2c4:	3208      	adds	r2, #8
 800e2c6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800e2ca:	46b6      	mov	lr, r6
 800e2cc:	4542      	cmp	r2, r8
 800e2ce:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e2d2:	4676      	mov	r6, lr
 800e2d4:	d1f5      	bne.n	800e2c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 800e2d6:	6810      	ldr	r0, [r2, #0]
 800e2d8:	3b01      	subs	r3, #1
 800e2da:	4621      	mov	r1, r4
 800e2dc:	f8ce 0000 	str.w	r0, [lr]
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	8892      	ldrh	r2, [r2, #4]
 800e2e4:	4628      	mov	r0, r5
 800e2e6:	f8ae 2004 	strh.w	r2, [lr, #4]
 800e2ea:	4662      	mov	r2, ip
 800e2ec:	f7ff ff30 	bl	800e150 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800e2f0:	7b41      	ldrb	r1, [r0, #13]
 800e2f2:	00cb      	lsls	r3, r1, #3
 800e2f4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e2f8:	7a03      	ldrb	r3, [r0, #8]
 800e2fa:	0648      	lsls	r0, r1, #25
 800e2fc:	ea43 0302 	orr.w	r3, r3, r2
 800e300:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 800e304:	bf44      	itt	mi
 800e306:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e30a:	b21b      	sxthmi	r3, r3
 800e30c:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e310:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800e314:	005b      	lsls	r3, r3, #1
 800e316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e31a:	4313      	orrs	r3, r2
 800e31c:	115a      	asrs	r2, r3, #5
 800e31e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800e322:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 800e326:	e047      	b.n	800e3b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 800e328:	00c2      	lsls	r2, r0, #3
 800e32a:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 800e32e:	7a22      	ldrb	r2, [r4, #8]
 800e330:	430a      	orrs	r2, r1
 800e332:	0641      	lsls	r1, r0, #25
 800e334:	f640 6109 	movw	r1, #3593	@ 0xe09
 800e338:	bf44      	itt	mi
 800e33a:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 800e33e:	b212      	sxthmi	r2, r2
 800e340:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800e344:	f023 0210 	bic.w	r2, r3, #16
 800e348:	428a      	cmp	r2, r1
 800e34a:	d003      	beq.n	800e354 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 800e34c:	f640 6213 	movw	r2, #3603	@ 0xe13
 800e350:	4293      	cmp	r3, r2
 800e352:	d13e      	bne.n	800e3d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 800e354:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e358:	f104 0808 	add.w	r8, r4, #8
 800e35c:	4696      	mov	lr, r2
 800e35e:	6820      	ldr	r0, [r4, #0]
 800e360:	3408      	adds	r4, #8
 800e362:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800e366:	4616      	mov	r6, r2
 800e368:	4544      	cmp	r4, r8
 800e36a:	c603      	stmia	r6!, {r0, r1}
 800e36c:	4632      	mov	r2, r6
 800e36e:	d1f6      	bne.n	800e35e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 800e370:	6820      	ldr	r0, [r4, #0]
 800e372:	6030      	str	r0, [r6, #0]
 800e374:	4628      	mov	r0, r5
 800e376:	88a1      	ldrh	r1, [r4, #4]
 800e378:	4674      	mov	r4, lr
 800e37a:	80b1      	strh	r1, [r6, #4]
 800e37c:	4671      	mov	r1, lr
 800e37e:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 800e382:	0076      	lsls	r6, r6, #1
 800e384:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800e388:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800e38c:	4316      	orrs	r6, r2
 800e38e:	f640 6213 	movw	r2, #3603	@ 0xe13
 800e392:	4293      	cmp	r3, r2
 800e394:	4662      	mov	r2, ip
 800e396:	bf16      	itet	ne
 800e398:	f103 33ff 	addne.w	r3, r3, #4294967295
 800e39c:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 800e3a0:	b29b      	uxthne	r3, r3
 800e3a2:	f7ff fed5 	bl	800e150 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800e3a6:	7b43      	ldrb	r3, [r0, #13]
 800e3a8:	7a82      	ldrb	r2, [r0, #10]
 800e3aa:	005b      	lsls	r3, r3, #1
 800e3ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e3b0:	4313      	orrs	r3, r2
 800e3b2:	1af6      	subs	r6, r6, r3
 800e3b4:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 800e3b8:	7b61      	ldrb	r1, [r4, #13]
 800e3ba:	00cb      	lsls	r3, r1, #3
 800e3bc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e3c0:	7a23      	ldrb	r3, [r4, #8]
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	064a      	lsls	r2, r1, #25
 800e3c6:	bf44      	itt	mi
 800e3c8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e3cc:	b21b      	sxthmi	r3, r3
 800e3ce:	1bdb      	subs	r3, r3, r7
 800e3d0:	e719      	b.n	800e206 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	e7a5      	b.n	800e322 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 800e3d6:	bf00      	nop
 800e3d8:	3fc00079 	.word	0x3fc00079

0800e3dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800e3dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3e0:	4604      	mov	r4, r0
 800e3e2:	b942      	cbnz	r2, 800e3f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800e3e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e3e8:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 800e3ec:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800e3f0:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800e3f4:	e047      	b.n	800e486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800e3f6:	7b51      	ldrb	r1, [r2, #13]
 800e3f8:	8893      	ldrh	r3, [r2, #4]
 800e3fa:	010d      	lsls	r5, r1, #4
 800e3fc:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 800e400:	79d5      	ldrb	r5, [r2, #7]
 800e402:	4305      	orrs	r5, r0
 800e404:	2d04      	cmp	r5, #4
 800e406:	bfcc      	ite	gt
 800e408:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800e40c:	f04f 0e01 	movle.w	lr, #1
 800e410:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 800e414:	f200 80ab 	bhi.w	800e56e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800e418:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 800e41c:	4283      	cmp	r3, r0
 800e41e:	d216      	bcs.n	800e44e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e420:	f240 605b 	movw	r0, #1627	@ 0x65b
 800e424:	4283      	cmp	r3, r0
 800e426:	d859      	bhi.n	800e4dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800e428:	f240 6057 	movw	r0, #1623	@ 0x657
 800e42c:	4283      	cmp	r3, r0
 800e42e:	d20e      	bcs.n	800e44e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e430:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800e434:	d24a      	bcs.n	800e4cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800e436:	f240 604e 	movw	r0, #1614	@ 0x64e
 800e43a:	4283      	cmp	r3, r0
 800e43c:	d207      	bcs.n	800e44e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e43e:	f240 601a 	movw	r0, #1562	@ 0x61a
 800e442:	4283      	cmp	r3, r0
 800e444:	d02a      	beq.n	800e49c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e446:	d821      	bhi.n	800e48c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800e448:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 800e44c:	d35b      	bcc.n	800e506 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800e44e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 800e452:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800e456:	f040 80d0 	bne.w	800e5fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800e45a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 800e45e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800e462:	f040 80ca 	bne.w	800e5fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800e466:	00cb      	lsls	r3, r1, #3
 800e468:	0649      	lsls	r1, r1, #25
 800e46a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800e46e:	7a13      	ldrb	r3, [r2, #8]
 800e470:	ea43 0300 	orr.w	r3, r3, r0
 800e474:	bf44      	itt	mi
 800e476:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e47a:	b21b      	sxthmi	r3, r3
 800e47c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800e480:	1b5d      	subs	r5, r3, r5
 800e482:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e486:	4610      	mov	r0, r2
 800e488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e48c:	f240 604b 	movw	r0, #1611	@ 0x64b
 800e490:	4283      	cmp	r3, r0
 800e492:	d338      	bcc.n	800e506 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800e494:	f240 604c 	movw	r0, #1612	@ 0x64c
 800e498:	4283      	cmp	r3, r0
 800e49a:	d9d8      	bls.n	800e44e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e49c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 800e4a0:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 800e4a4:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800e4a8:	f040 80f3 	bne.w	800e692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800e4ac:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800e4b0:	f040 80ef 	bne.w	800e692 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800e4b4:	00cb      	lsls	r3, r1, #3
 800e4b6:	064e      	lsls	r6, r1, #25
 800e4b8:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800e4bc:	7a13      	ldrb	r3, [r2, #8]
 800e4be:	ea43 0300 	orr.w	r3, r3, r0
 800e4c2:	bf44      	itt	mi
 800e4c4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e4c8:	b21b      	sxthmi	r3, r3
 800e4ca:	e7d9      	b.n	800e480 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800e4cc:	f240 6054 	movw	r0, #1620	@ 0x654
 800e4d0:	4283      	cmp	r3, r0
 800e4d2:	d8e3      	bhi.n	800e49c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e4d4:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800e4d8:	d9e0      	bls.n	800e49c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e4da:	e7b8      	b.n	800e44e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e4dc:	f240 6074 	movw	r0, #1652	@ 0x674
 800e4e0:	4283      	cmp	r3, r0
 800e4e2:	d0b4      	beq.n	800e44e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e4e4:	d82d      	bhi.n	800e542 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800e4e6:	f240 605e 	movw	r0, #1630	@ 0x65e
 800e4ea:	4283      	cmp	r3, r0
 800e4ec:	d804      	bhi.n	800e4f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800e4ee:	f240 605d 	movw	r0, #1629	@ 0x65d
 800e4f2:	4283      	cmp	r3, r0
 800e4f4:	d3d2      	bcc.n	800e49c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e4f6:	e7aa      	b.n	800e44e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e4f8:	f240 605f 	movw	r0, #1631	@ 0x65f
 800e4fc:	4283      	cmp	r3, r0
 800e4fe:	d0cd      	beq.n	800e49c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e500:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 800e504:	d0a3      	beq.n	800e44e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e506:	00cb      	lsls	r3, r1, #3
 800e508:	0649      	lsls	r1, r1, #25
 800e50a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800e50e:	7a13      	ldrb	r3, [r2, #8]
 800e510:	ea43 0300 	orr.w	r3, r3, r0
 800e514:	bf44      	itt	mi
 800e516:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e51a:	b21b      	sxthmi	r3, r3
 800e51c:	1b5d      	subs	r5, r3, r5
 800e51e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800e522:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e526:	7b53      	ldrb	r3, [r2, #13]
 800e528:	015b      	lsls	r3, r3, #5
 800e52a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800e52e:	7993      	ldrb	r3, [r2, #6]
 800e530:	430b      	orrs	r3, r1
 800e532:	2105      	movs	r1, #5
 800e534:	005b      	lsls	r3, r3, #1
 800e536:	fb93 f3f1 	sdiv	r3, r3, r1
 800e53a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800e53e:	440b      	add	r3, r1
 800e540:	e756      	b.n	800e3f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800e542:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 800e546:	4283      	cmp	r3, r0
 800e548:	d809      	bhi.n	800e55e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800e54a:	f240 60df 	movw	r0, #1759	@ 0x6df
 800e54e:	4283      	cmp	r3, r0
 800e550:	f4bf af7d 	bcs.w	800e44e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e554:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 800e558:	2b05      	cmp	r3, #5
 800e55a:	d8d4      	bhi.n	800e506 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800e55c:	e777      	b.n	800e44e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e55e:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 800e562:	4283      	cmp	r3, r0
 800e564:	d09a      	beq.n	800e49c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e566:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800e56a:	4283      	cmp	r3, r0
 800e56c:	e7ca      	b.n	800e504 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800e56e:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 800e572:	d22b      	bcs.n	800e5cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800e574:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 800e578:	4283      	cmp	r3, r0
 800e57a:	d28f      	bcs.n	800e49c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e57c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800e580:	4283      	cmp	r3, r0
 800e582:	d816      	bhi.n	800e5b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800e584:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 800e588:	4283      	cmp	r3, r0
 800e58a:	f4bf af60 	bcs.w	800e44e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e58e:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 800e592:	4283      	cmp	r3, r0
 800e594:	d80a      	bhi.n	800e5ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800e596:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800e59a:	4283      	cmp	r3, r0
 800e59c:	f4bf af57 	bcs.w	800e44e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e5a0:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 800e5a4:	4283      	cmp	r3, r0
 800e5a6:	f43f af79 	beq.w	800e49c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e5aa:	e7ac      	b.n	800e506 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800e5ac:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 800e5b0:	e7f8      	b.n	800e5a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800e5b2:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800e5b6:	4283      	cmp	r3, r0
 800e5b8:	d802      	bhi.n	800e5c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800e5ba:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800e5be:	e798      	b.n	800e4f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800e5c0:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 800e5c4:	4283      	cmp	r3, r0
 800e5c6:	f47f af42 	bne.w	800e44e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e5ca:	e767      	b.n	800e49c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e5cc:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 800e5d0:	4283      	cmp	r3, r0
 800e5d2:	f43f af63 	beq.w	800e49c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e5d6:	d802      	bhi.n	800e5de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800e5d8:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 800e5dc:	e7f2      	b.n	800e5c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800e5de:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 800e5e2:	4283      	cmp	r3, r0
 800e5e4:	d805      	bhi.n	800e5f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800e5e6:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 800e5ea:	4283      	cmp	r3, r0
 800e5ec:	f4ff af2f 	bcc.w	800e44e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e5f0:	e754      	b.n	800e49c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e5f2:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 800e5f6:	4283      	cmp	r3, r0
 800e5f8:	e7af      	b.n	800e55a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800e5fa:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800e5fe:	4617      	mov	r7, r2
 800e600:	f102 0808 	add.w	r8, r2, #8
 800e604:	4666      	mov	r6, ip
 800e606:	6838      	ldr	r0, [r7, #0]
 800e608:	3708      	adds	r7, #8
 800e60a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800e60e:	46e6      	mov	lr, ip
 800e610:	4547      	cmp	r7, r8
 800e612:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e616:	46f4      	mov	ip, lr
 800e618:	d1f5      	bne.n	800e606 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800e61a:	6838      	ldr	r0, [r7, #0]
 800e61c:	f8ce 0000 	str.w	r0, [lr]
 800e620:	88b9      	ldrh	r1, [r7, #4]
 800e622:	f8ae 1004 	strh.w	r1, [lr, #4]
 800e626:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800e62a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800e62e:	d009      	beq.n	800e644 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 800e630:	7b51      	ldrb	r1, [r2, #13]
 800e632:	7992      	ldrb	r2, [r2, #6]
 800e634:	0149      	lsls	r1, r1, #5
 800e636:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800e63a:	4311      	orrs	r1, r2
 800e63c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800e640:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800e644:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800e648:	b2ad      	uxth	r5, r5
 800e64a:	d00d      	beq.n	800e668 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 800e64c:	442b      	add	r3, r5
 800e64e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800e652:	b29b      	uxth	r3, r3
 800e654:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800e658:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800e65c:	10db      	asrs	r3, r3, #3
 800e65e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e662:	4313      	orrs	r3, r2
 800e664:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800e668:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800e66c:	00cb      	lsls	r3, r1, #3
 800e66e:	064f      	lsls	r7, r1, #25
 800e670:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e674:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800e678:	ea43 0302 	orr.w	r3, r3, r2
 800e67c:	bf44      	itt	mi
 800e67e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e682:	b21b      	sxthmi	r3, r3
 800e684:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800e688:	1b5b      	subs	r3, r3, r5
 800e68a:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800e68e:	4632      	mov	r2, r6
 800e690:	e6f9      	b.n	800e486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800e692:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800e696:	4617      	mov	r7, r2
 800e698:	f102 0908 	add.w	r9, r2, #8
 800e69c:	4666      	mov	r6, ip
 800e69e:	6838      	ldr	r0, [r7, #0]
 800e6a0:	3708      	adds	r7, #8
 800e6a2:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800e6a6:	46e0      	mov	r8, ip
 800e6a8:	454f      	cmp	r7, r9
 800e6aa:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800e6ae:	46c4      	mov	ip, r8
 800e6b0:	d1f5      	bne.n	800e69e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 800e6b2:	6838      	ldr	r0, [r7, #0]
 800e6b4:	f8c8 0000 	str.w	r0, [r8]
 800e6b8:	88b9      	ldrh	r1, [r7, #4]
 800e6ba:	f8a8 1004 	strh.w	r1, [r8, #4]
 800e6be:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800e6c2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800e6c6:	d009      	beq.n	800e6dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 800e6c8:	7b51      	ldrb	r1, [r2, #13]
 800e6ca:	7992      	ldrb	r2, [r2, #6]
 800e6cc:	0149      	lsls	r1, r1, #5
 800e6ce:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800e6d2:	4311      	orrs	r1, r2
 800e6d4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800e6d8:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800e6dc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800e6e0:	d00e      	beq.n	800e700 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 800e6e2:	eba3 030e 	sub.w	r3, r3, lr
 800e6e6:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800e6ea:	b29b      	uxth	r3, r3
 800e6ec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800e6f0:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800e6f4:	10db      	asrs	r3, r3, #3
 800e6f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e6fa:	4313      	orrs	r3, r2
 800e6fc:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800e700:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800e704:	00cb      	lsls	r3, r1, #3
 800e706:	0648      	lsls	r0, r1, #25
 800e708:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e70c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800e710:	ea43 0302 	orr.w	r3, r3, r2
 800e714:	bf44      	itt	mi
 800e716:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e71a:	b21b      	sxthmi	r3, r3
 800e71c:	1b5d      	subs	r5, r3, r5
 800e71e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e722:	e7b4      	b.n	800e68e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0800e724 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800e724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e728:	461e      	mov	r6, r3
 800e72a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800e72c:	4604      	mov	r4, r0
 800e72e:	4617      	mov	r7, r2
 800e730:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e734:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800e738:	f7ff f9d8 	bl	800daec <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800e73c:	4605      	mov	r5, r0
 800e73e:	b918      	cbnz	r0, 800e748 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800e740:	6030      	str	r0, [r6, #0]
 800e742:	4628      	mov	r0, r5
 800e744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	4601      	mov	r1, r0
 800e74c:	4638      	mov	r0, r7
 800e74e:	68db      	ldr	r3, [r3, #12]
 800e750:	4798      	blx	r3
 800e752:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800e756:	4602      	mov	r2, r0
 800e758:	6030      	str	r0, [r6, #0]
 800e75a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e75e:	d213      	bcs.n	800e788 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800e760:	4643      	mov	r3, r8
 800e762:	4639      	mov	r1, r7
 800e764:	4620      	mov	r0, r4
 800e766:	f7ff fe39 	bl	800e3dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800e76a:	6030      	str	r0, [r6, #0]
 800e76c:	6833      	ldr	r3, [r6, #0]
 800e76e:	b143      	cbz	r3, 800e782 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800e770:	7b5a      	ldrb	r2, [r3, #13]
 800e772:	7a9b      	ldrb	r3, [r3, #10]
 800e774:	0052      	lsls	r2, r2, #1
 800e776:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800e77a:	4313      	orrs	r3, r2
 800e77c:	bf0c      	ite	eq
 800e77e:	2301      	moveq	r3, #1
 800e780:	2300      	movne	r3, #0
 800e782:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800e786:	e7dc      	b.n	800e742 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800e788:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	2b7f      	cmp	r3, #127	@ 0x7f
 800e790:	d804      	bhi.n	800e79c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800e792:	4639      	mov	r1, r7
 800e794:	4620      	mov	r0, r4
 800e796:	f7ff fce7 	bl	800e168 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800e79a:	e7e6      	b.n	800e76a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800e79c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d0e3      	beq.n	800e76c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800e7a4:	f640 1302 	movw	r3, #2306	@ 0x902
 800e7a8:	429d      	cmp	r5, r3
 800e7aa:	d1df      	bne.n	800e76c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800e7ac:	4601      	mov	r1, r0
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	f7ff fcaa 	bl	800e108 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800e7b4:	e7d9      	b.n	800e76a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800e7b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800e7b6:	b510      	push	{r4, lr}
 800e7b8:	4604      	mov	r4, r0
 800e7ba:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800e7be:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800e7c0:	b1e1      	cbz	r1, 800e7fc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800e7c2:	2b0a      	cmp	r3, #10
 800e7c4:	d02d      	beq.n	800e822 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800e7c6:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800e7c8:	3901      	subs	r1, #1
 800e7ca:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800e7ce:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800e7d0:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 800e7d4:	1c51      	adds	r1, r2, #1
 800e7d6:	b289      	uxth	r1, r1
 800e7d8:	2901      	cmp	r1, #1
 800e7da:	bf8a      	itet	hi
 800e7dc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e7e0:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 800e7e2:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 800e7e4:	1c5a      	adds	r2, r3, #1
 800e7e6:	8722      	strh	r2, [r4, #56]	@ 0x38
 800e7e8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800e7ea:	4413      	add	r3, r2
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	2b09      	cmp	r3, #9
 800e7f0:	bf88      	it	hi
 800e7f2:	3b0a      	subhi	r3, #10
 800e7f4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800e7f8:	8458      	strh	r0, [r3, #34]	@ 0x22
 800e7fa:	e7de      	b.n	800e7ba <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800e7fc:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800e7fe:	2b0a      	cmp	r3, #10
 800e800:	d00f      	beq.n	800e822 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800e802:	4620      	mov	r0, r4
 800e804:	f7ff fc3f 	bl	800e086 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800e808:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800e80a:	1c5a      	adds	r2, r3, #1
 800e80c:	8722      	strh	r2, [r4, #56]	@ 0x38
 800e80e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800e810:	4413      	add	r3, r2
 800e812:	b29b      	uxth	r3, r3
 800e814:	2b09      	cmp	r3, #9
 800e816:	bf88      	it	hi
 800e818:	3b0a      	subhi	r3, #10
 800e81a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800e81e:	8458      	strh	r0, [r3, #34]	@ 0x22
 800e820:	e7ec      	b.n	800e7fc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800e822:	bd10      	pop	{r4, pc}

0800e824 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800e824:	b538      	push	{r3, r4, r5, lr}
 800e826:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800e828:	4604      	mov	r4, r0
 800e82a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800e82e:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 800e830:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 800e832:	3a01      	subs	r2, #1
 800e834:	8702      	strh	r2, [r0, #56]	@ 0x38
 800e836:	1c5a      	adds	r2, r3, #1
 800e838:	b292      	uxth	r2, r2
 800e83a:	2a09      	cmp	r2, #9
 800e83c:	bf8a      	itet	hi
 800e83e:	3b09      	subhi	r3, #9
 800e840:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 800e842:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 800e844:	f7ff ffb7 	bl	800e7b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800e848:	8c23      	ldrh	r3, [r4, #32]
 800e84a:	2b01      	cmp	r3, #1
 800e84c:	bf9c      	itt	ls
 800e84e:	3301      	addls	r3, #1
 800e850:	8423      	strhls	r3, [r4, #32]
 800e852:	8be3      	ldrh	r3, [r4, #30]
 800e854:	b90b      	cbnz	r3, 800e85a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800e856:	2302      	movs	r3, #2
 800e858:	83e3      	strh	r3, [r4, #30]
 800e85a:	8be3      	ldrh	r3, [r4, #30]
 800e85c:	4628      	mov	r0, r5
 800e85e:	3b01      	subs	r3, #1
 800e860:	b29b      	uxth	r3, r3
 800e862:	83e3      	strh	r3, [r4, #30]
 800e864:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800e868:	8365      	strh	r5, [r4, #26]
 800e86a:	bd38      	pop	{r3, r4, r5, pc}

0800e86c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800e86c:	428a      	cmp	r2, r1
 800e86e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e872:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 800e874:	d932      	bls.n	800e8dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 800e876:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 800e878:	1a54      	subs	r4, r2, r1
 800e87a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 800e87e:	19ee      	adds	r6, r5, r7
 800e880:	fa1f fe84 	uxth.w	lr, r4
 800e884:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 800e888:	3e01      	subs	r6, #1
 800e88a:	b2b4      	uxth	r4, r6
 800e88c:	eba4 090e 	sub.w	r9, r4, lr
 800e890:	fa1f f989 	uxth.w	r9, r9
 800e894:	2c09      	cmp	r4, #9
 800e896:	4626      	mov	r6, r4
 800e898:	bf88      	it	hi
 800e89a:	f1a4 060a 	subhi.w	r6, r4, #10
 800e89e:	f1bc 0f00 	cmp.w	ip, #0
 800e8a2:	f104 34ff 	add.w	r4, r4, #4294967295
 800e8a6:	bf08      	it	eq
 800e8a8:	f04f 0c02 	moveq.w	ip, #2
 800e8ac:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800e8b0:	b2a4      	uxth	r4, r4
 800e8b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e8b6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800e8ba:	454c      	cmp	r4, r9
 800e8bc:	fa1f fc8c 	uxth.w	ip, ip
 800e8c0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800e8c4:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 800e8c8:	d1e4      	bne.n	800e894 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800e8ca:	eba5 050e 	sub.w	r5, r5, lr
 800e8ce:	eb0e 0408 	add.w	r4, lr, r8
 800e8d2:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 800e8d6:	8705      	strh	r5, [r0, #56]	@ 0x38
 800e8d8:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 800e8dc:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800e8de:	250a      	movs	r5, #10
 800e8e0:	1a64      	subs	r4, r4, r1
 800e8e2:	4439      	add	r1, r7
 800e8e4:	b289      	uxth	r1, r1
 800e8e6:	8704      	strh	r4, [r0, #56]	@ 0x38
 800e8e8:	2909      	cmp	r1, #9
 800e8ea:	bf88      	it	hi
 800e8ec:	390a      	subhi	r1, #10
 800e8ee:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800e8f0:	b18a      	cbz	r2, 800e916 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 800e8f2:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 800e8f4:	3a01      	subs	r2, #1
 800e8f6:	3101      	adds	r1, #1
 800e8f8:	b292      	uxth	r2, r2
 800e8fa:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800e8fe:	8701      	strh	r1, [r0, #56]	@ 0x38
 800e900:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800e902:	b901      	cbnz	r1, 800e906 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 800e904:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800e906:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800e908:	3901      	subs	r1, #1
 800e90a:	b289      	uxth	r1, r1
 800e90c:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800e90e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800e912:	844c      	strh	r4, [r1, #34]	@ 0x22
 800e914:	e7ec      	b.n	800e8f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 800e916:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e91a:	f7ff bf4c 	b.w	800e7b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800e91e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800e91e:	b570      	push	{r4, r5, r6, lr}
 800e920:	2500      	movs	r5, #0
 800e922:	4295      	cmp	r5, r2
 800e924:	d011      	beq.n	800e94a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800e926:	8bc4      	ldrh	r4, [r0, #30]
 800e928:	f831 6b02 	ldrh.w	r6, [r1], #2
 800e92c:	4414      	add	r4, r2
 800e92e:	3c01      	subs	r4, #1
 800e930:	1b64      	subs	r4, r4, r5
 800e932:	b2a4      	uxth	r4, r4
 800e934:	2c01      	cmp	r4, #1
 800e936:	bf88      	it	hi
 800e938:	3c02      	subhi	r4, #2
 800e93a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800e93e:	8b64      	ldrh	r4, [r4, #26]
 800e940:	42b4      	cmp	r4, r6
 800e942:	d117      	bne.n	800e974 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800e944:	3501      	adds	r5, #1
 800e946:	b2ad      	uxth	r5, r5
 800e948:	e7eb      	b.n	800e922 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800e94a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800e94e:	2400      	movs	r4, #0
 800e950:	4413      	add	r3, r2
 800e952:	b2a2      	uxth	r2, r4
 800e954:	429a      	cmp	r2, r3
 800e956:	da0f      	bge.n	800e978 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800e958:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 800e95a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800e95e:	3401      	adds	r4, #1
 800e960:	4432      	add	r2, r6
 800e962:	b292      	uxth	r2, r2
 800e964:	2a09      	cmp	r2, #9
 800e966:	bf88      	it	hi
 800e968:	3a0a      	subhi	r2, #10
 800e96a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800e96e:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800e970:	42aa      	cmp	r2, r5
 800e972:	d0ee      	beq.n	800e952 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800e974:	2000      	movs	r0, #0
 800e976:	bd70      	pop	{r4, r5, r6, pc}
 800e978:	2001      	movs	r0, #1
 800e97a:	e7fc      	b.n	800e976 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800e97c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800e97c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e980:	4605      	mov	r5, r0
 800e982:	4616      	mov	r6, r2
 800e984:	1c8c      	adds	r4, r1, #2
 800e986:	8809      	ldrh	r1, [r1, #0]
 800e988:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800e98c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800e990:	42b3      	cmp	r3, r6
 800e992:	d124      	bne.n	800e9de <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800e994:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800e998:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800e99c:	f001 070f 	and.w	r7, r1, #15
 800e9a0:	4652      	mov	r2, sl
 800e9a2:	f8cd 8000 	str.w	r8, [sp]
 800e9a6:	464b      	mov	r3, r9
 800e9a8:	4621      	mov	r1, r4
 800e9aa:	4628      	mov	r0, r5
 800e9ac:	f7ff ffb7 	bl	800e91e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800e9b0:	4683      	mov	fp, r0
 800e9b2:	b168      	cbz	r0, 800e9d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800e9b4:	eb0a 0109 	add.w	r1, sl, r9
 800e9b8:	463a      	mov	r2, r7
 800e9ba:	4628      	mov	r0, r5
 800e9bc:	4441      	add	r1, r8
 800e9be:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800e9c2:	4649      	mov	r1, r9
 800e9c4:	f7ff ff52 	bl	800e86c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800e9c8:	4658      	mov	r0, fp
 800e9ca:	b003      	add	sp, #12
 800e9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9d0:	eb07 010a 	add.w	r1, r7, sl
 800e9d4:	4449      	add	r1, r9
 800e9d6:	4441      	add	r1, r8
 800e9d8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800e9dc:	e7d2      	b.n	800e984 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800e9de:	f04f 0b00 	mov.w	fp, #0
 800e9e2:	e7f1      	b.n	800e9c8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800e9e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800e9e4:	b570      	push	{r4, r5, r6, lr}
 800e9e6:	8810      	ldrh	r0, [r2, #0]
 800e9e8:	4298      	cmp	r0, r3
 800e9ea:	d817      	bhi.n	800ea1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800e9ec:	1e48      	subs	r0, r1, #1
 800e9ee:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800e9f2:	4298      	cmp	r0, r3
 800e9f4:	d312      	bcc.n	800ea1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800e9f6:	2400      	movs	r4, #0
 800e9f8:	428c      	cmp	r4, r1
 800e9fa:	d20f      	bcs.n	800ea1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800e9fc:	1860      	adds	r0, r4, r1
 800e9fe:	1040      	asrs	r0, r0, #1
 800ea00:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800ea04:	0085      	lsls	r5, r0, #2
 800ea06:	42b3      	cmp	r3, r6
 800ea08:	d902      	bls.n	800ea10 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800ea0a:	3001      	adds	r0, #1
 800ea0c:	b284      	uxth	r4, r0
 800ea0e:	e7f3      	b.n	800e9f8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800ea10:	d201      	bcs.n	800ea16 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800ea12:	b281      	uxth	r1, r0
 800ea14:	e7f0      	b.n	800e9f8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800ea16:	442a      	add	r2, r5
 800ea18:	8850      	ldrh	r0, [r2, #2]
 800ea1a:	bd70      	pop	{r4, r5, r6, pc}
 800ea1c:	2000      	movs	r0, #0
 800ea1e:	e7fc      	b.n	800ea1a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800ea20 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800ea20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea24:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800ea26:	4604      	mov	r4, r0
 800ea28:	260b      	movs	r6, #11
 800ea2a:	886f      	ldrh	r7, [r5, #2]
 800ea2c:	087f      	lsrs	r7, r7, #1
 800ea2e:	3e01      	subs	r6, #1
 800ea30:	d013      	beq.n	800ea5a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800ea32:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800ea34:	462a      	mov	r2, r5
 800ea36:	4639      	mov	r1, r7
 800ea38:	4620      	mov	r0, r4
 800ea3a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ea3e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800ea42:	4643      	mov	r3, r8
 800ea44:	f7ff ffce 	bl	800e9e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800ea48:	b138      	cbz	r0, 800ea5a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800ea4a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800ea4e:	4642      	mov	r2, r8
 800ea50:	4620      	mov	r0, r4
 800ea52:	f7ff ff93 	bl	800e97c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800ea56:	2800      	cmp	r0, #0
 800ea58:	d1e9      	bne.n	800ea2e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800ea5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ea5e <_ZdlPvj>:
 800ea5e:	f000 b812 	b.w	800ea86 <_ZdlPv>

0800ea62 <__cxa_guard_acquire>:
 800ea62:	6802      	ldr	r2, [r0, #0]
 800ea64:	07d2      	lsls	r2, r2, #31
 800ea66:	4603      	mov	r3, r0
 800ea68:	d405      	bmi.n	800ea76 <__cxa_guard_acquire+0x14>
 800ea6a:	7842      	ldrb	r2, [r0, #1]
 800ea6c:	b102      	cbz	r2, 800ea70 <__cxa_guard_acquire+0xe>
 800ea6e:	deff      	udf	#255	@ 0xff
 800ea70:	2001      	movs	r0, #1
 800ea72:	7058      	strb	r0, [r3, #1]
 800ea74:	4770      	bx	lr
 800ea76:	2000      	movs	r0, #0
 800ea78:	4770      	bx	lr

0800ea7a <__cxa_guard_release>:
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	6003      	str	r3, [r0, #0]
 800ea7e:	4770      	bx	lr

0800ea80 <__cxa_pure_virtual>:
 800ea80:	b508      	push	{r3, lr}
 800ea82:	f000 f80f 	bl	800eaa4 <_ZSt9terminatev>

0800ea86 <_ZdlPv>:
 800ea86:	f000 b845 	b.w	800eb14 <free>

0800ea8a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ea8a:	b508      	push	{r3, lr}
 800ea8c:	4780      	blx	r0
 800ea8e:	f000 f80e 	bl	800eaae <abort>
	...

0800ea94 <_ZSt13get_terminatev>:
 800ea94:	4b02      	ldr	r3, [pc, #8]	@ (800eaa0 <_ZSt13get_terminatev+0xc>)
 800ea96:	6818      	ldr	r0, [r3, #0]
 800ea98:	f3bf 8f5b 	dmb	ish
 800ea9c:	4770      	bx	lr
 800ea9e:	bf00      	nop
 800eaa0:	240001c0 	.word	0x240001c0

0800eaa4 <_ZSt9terminatev>:
 800eaa4:	b508      	push	{r3, lr}
 800eaa6:	f7ff fff5 	bl	800ea94 <_ZSt13get_terminatev>
 800eaaa:	f7ff ffee 	bl	800ea8a <_ZN10__cxxabiv111__terminateEPFvvE>

0800eaae <abort>:
 800eaae:	b508      	push	{r3, lr}
 800eab0:	2006      	movs	r0, #6
 800eab2:	f000 fa2d 	bl	800ef10 <raise>
 800eab6:	2001      	movs	r0, #1
 800eab8:	f7f3 fc8e 	bl	80023d8 <_exit>

0800eabc <__assert_func>:
 800eabc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eabe:	4614      	mov	r4, r2
 800eac0:	461a      	mov	r2, r3
 800eac2:	4b09      	ldr	r3, [pc, #36]	@ (800eae8 <__assert_func+0x2c>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	4605      	mov	r5, r0
 800eac8:	68d8      	ldr	r0, [r3, #12]
 800eaca:	b14c      	cbz	r4, 800eae0 <__assert_func+0x24>
 800eacc:	4b07      	ldr	r3, [pc, #28]	@ (800eaec <__assert_func+0x30>)
 800eace:	9100      	str	r1, [sp, #0]
 800ead0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ead4:	4906      	ldr	r1, [pc, #24]	@ (800eaf0 <__assert_func+0x34>)
 800ead6:	462b      	mov	r3, r5
 800ead8:	f000 f976 	bl	800edc8 <fiprintf>
 800eadc:	f7ff ffe7 	bl	800eaae <abort>
 800eae0:	4b04      	ldr	r3, [pc, #16]	@ (800eaf4 <__assert_func+0x38>)
 800eae2:	461c      	mov	r4, r3
 800eae4:	e7f3      	b.n	800eace <__assert_func+0x12>
 800eae6:	bf00      	nop
 800eae8:	240001d0 	.word	0x240001d0
 800eaec:	0800fec0 	.word	0x0800fec0
 800eaf0:	0800fecd 	.word	0x0800fecd
 800eaf4:	0800fefb 	.word	0x0800fefb

0800eaf8 <atexit>:
 800eaf8:	2300      	movs	r3, #0
 800eafa:	4601      	mov	r1, r0
 800eafc:	461a      	mov	r2, r3
 800eafe:	4618      	mov	r0, r3
 800eb00:	f000 baa6 	b.w	800f050 <__register_exitproc>

0800eb04 <malloc>:
 800eb04:	4b02      	ldr	r3, [pc, #8]	@ (800eb10 <malloc+0xc>)
 800eb06:	4601      	mov	r1, r0
 800eb08:	6818      	ldr	r0, [r3, #0]
 800eb0a:	f000 b82d 	b.w	800eb68 <_malloc_r>
 800eb0e:	bf00      	nop
 800eb10:	240001d0 	.word	0x240001d0

0800eb14 <free>:
 800eb14:	4b02      	ldr	r3, [pc, #8]	@ (800eb20 <free+0xc>)
 800eb16:	4601      	mov	r1, r0
 800eb18:	6818      	ldr	r0, [r3, #0]
 800eb1a:	f000 baf5 	b.w	800f108 <_free_r>
 800eb1e:	bf00      	nop
 800eb20:	240001d0 	.word	0x240001d0

0800eb24 <sbrk_aligned>:
 800eb24:	b570      	push	{r4, r5, r6, lr}
 800eb26:	4e0f      	ldr	r6, [pc, #60]	@ (800eb64 <sbrk_aligned+0x40>)
 800eb28:	460c      	mov	r4, r1
 800eb2a:	6831      	ldr	r1, [r6, #0]
 800eb2c:	4605      	mov	r5, r0
 800eb2e:	b911      	cbnz	r1, 800eb36 <sbrk_aligned+0x12>
 800eb30:	f000 fa3e 	bl	800efb0 <_sbrk_r>
 800eb34:	6030      	str	r0, [r6, #0]
 800eb36:	4621      	mov	r1, r4
 800eb38:	4628      	mov	r0, r5
 800eb3a:	f000 fa39 	bl	800efb0 <_sbrk_r>
 800eb3e:	1c43      	adds	r3, r0, #1
 800eb40:	d103      	bne.n	800eb4a <sbrk_aligned+0x26>
 800eb42:	f04f 34ff 	mov.w	r4, #4294967295
 800eb46:	4620      	mov	r0, r4
 800eb48:	bd70      	pop	{r4, r5, r6, pc}
 800eb4a:	1cc4      	adds	r4, r0, #3
 800eb4c:	f024 0403 	bic.w	r4, r4, #3
 800eb50:	42a0      	cmp	r0, r4
 800eb52:	d0f8      	beq.n	800eb46 <sbrk_aligned+0x22>
 800eb54:	1a21      	subs	r1, r4, r0
 800eb56:	4628      	mov	r0, r5
 800eb58:	f000 fa2a 	bl	800efb0 <_sbrk_r>
 800eb5c:	3001      	adds	r0, #1
 800eb5e:	d1f2      	bne.n	800eb46 <sbrk_aligned+0x22>
 800eb60:	e7ef      	b.n	800eb42 <sbrk_aligned+0x1e>
 800eb62:	bf00      	nop
 800eb64:	24000754 	.word	0x24000754

0800eb68 <_malloc_r>:
 800eb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb6c:	1ccd      	adds	r5, r1, #3
 800eb6e:	f025 0503 	bic.w	r5, r5, #3
 800eb72:	3508      	adds	r5, #8
 800eb74:	2d0c      	cmp	r5, #12
 800eb76:	bf38      	it	cc
 800eb78:	250c      	movcc	r5, #12
 800eb7a:	2d00      	cmp	r5, #0
 800eb7c:	4606      	mov	r6, r0
 800eb7e:	db01      	blt.n	800eb84 <_malloc_r+0x1c>
 800eb80:	42a9      	cmp	r1, r5
 800eb82:	d904      	bls.n	800eb8e <_malloc_r+0x26>
 800eb84:	230c      	movs	r3, #12
 800eb86:	6033      	str	r3, [r6, #0]
 800eb88:	2000      	movs	r0, #0
 800eb8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ec64 <_malloc_r+0xfc>
 800eb92:	f000 f869 	bl	800ec68 <__malloc_lock>
 800eb96:	f8d8 3000 	ldr.w	r3, [r8]
 800eb9a:	461c      	mov	r4, r3
 800eb9c:	bb44      	cbnz	r4, 800ebf0 <_malloc_r+0x88>
 800eb9e:	4629      	mov	r1, r5
 800eba0:	4630      	mov	r0, r6
 800eba2:	f7ff ffbf 	bl	800eb24 <sbrk_aligned>
 800eba6:	1c43      	adds	r3, r0, #1
 800eba8:	4604      	mov	r4, r0
 800ebaa:	d158      	bne.n	800ec5e <_malloc_r+0xf6>
 800ebac:	f8d8 4000 	ldr.w	r4, [r8]
 800ebb0:	4627      	mov	r7, r4
 800ebb2:	2f00      	cmp	r7, #0
 800ebb4:	d143      	bne.n	800ec3e <_malloc_r+0xd6>
 800ebb6:	2c00      	cmp	r4, #0
 800ebb8:	d04b      	beq.n	800ec52 <_malloc_r+0xea>
 800ebba:	6823      	ldr	r3, [r4, #0]
 800ebbc:	4639      	mov	r1, r7
 800ebbe:	4630      	mov	r0, r6
 800ebc0:	eb04 0903 	add.w	r9, r4, r3
 800ebc4:	f000 f9f4 	bl	800efb0 <_sbrk_r>
 800ebc8:	4581      	cmp	r9, r0
 800ebca:	d142      	bne.n	800ec52 <_malloc_r+0xea>
 800ebcc:	6821      	ldr	r1, [r4, #0]
 800ebce:	1a6d      	subs	r5, r5, r1
 800ebd0:	4629      	mov	r1, r5
 800ebd2:	4630      	mov	r0, r6
 800ebd4:	f7ff ffa6 	bl	800eb24 <sbrk_aligned>
 800ebd8:	3001      	adds	r0, #1
 800ebda:	d03a      	beq.n	800ec52 <_malloc_r+0xea>
 800ebdc:	6823      	ldr	r3, [r4, #0]
 800ebde:	442b      	add	r3, r5
 800ebe0:	6023      	str	r3, [r4, #0]
 800ebe2:	f8d8 3000 	ldr.w	r3, [r8]
 800ebe6:	685a      	ldr	r2, [r3, #4]
 800ebe8:	bb62      	cbnz	r2, 800ec44 <_malloc_r+0xdc>
 800ebea:	f8c8 7000 	str.w	r7, [r8]
 800ebee:	e00f      	b.n	800ec10 <_malloc_r+0xa8>
 800ebf0:	6822      	ldr	r2, [r4, #0]
 800ebf2:	1b52      	subs	r2, r2, r5
 800ebf4:	d420      	bmi.n	800ec38 <_malloc_r+0xd0>
 800ebf6:	2a0b      	cmp	r2, #11
 800ebf8:	d917      	bls.n	800ec2a <_malloc_r+0xc2>
 800ebfa:	1961      	adds	r1, r4, r5
 800ebfc:	42a3      	cmp	r3, r4
 800ebfe:	6025      	str	r5, [r4, #0]
 800ec00:	bf18      	it	ne
 800ec02:	6059      	strne	r1, [r3, #4]
 800ec04:	6863      	ldr	r3, [r4, #4]
 800ec06:	bf08      	it	eq
 800ec08:	f8c8 1000 	streq.w	r1, [r8]
 800ec0c:	5162      	str	r2, [r4, r5]
 800ec0e:	604b      	str	r3, [r1, #4]
 800ec10:	4630      	mov	r0, r6
 800ec12:	f000 f82f 	bl	800ec74 <__malloc_unlock>
 800ec16:	f104 000b 	add.w	r0, r4, #11
 800ec1a:	1d23      	adds	r3, r4, #4
 800ec1c:	f020 0007 	bic.w	r0, r0, #7
 800ec20:	1ac2      	subs	r2, r0, r3
 800ec22:	bf1c      	itt	ne
 800ec24:	1a1b      	subne	r3, r3, r0
 800ec26:	50a3      	strne	r3, [r4, r2]
 800ec28:	e7af      	b.n	800eb8a <_malloc_r+0x22>
 800ec2a:	6862      	ldr	r2, [r4, #4]
 800ec2c:	42a3      	cmp	r3, r4
 800ec2e:	bf0c      	ite	eq
 800ec30:	f8c8 2000 	streq.w	r2, [r8]
 800ec34:	605a      	strne	r2, [r3, #4]
 800ec36:	e7eb      	b.n	800ec10 <_malloc_r+0xa8>
 800ec38:	4623      	mov	r3, r4
 800ec3a:	6864      	ldr	r4, [r4, #4]
 800ec3c:	e7ae      	b.n	800eb9c <_malloc_r+0x34>
 800ec3e:	463c      	mov	r4, r7
 800ec40:	687f      	ldr	r7, [r7, #4]
 800ec42:	e7b6      	b.n	800ebb2 <_malloc_r+0x4a>
 800ec44:	461a      	mov	r2, r3
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	42a3      	cmp	r3, r4
 800ec4a:	d1fb      	bne.n	800ec44 <_malloc_r+0xdc>
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	6053      	str	r3, [r2, #4]
 800ec50:	e7de      	b.n	800ec10 <_malloc_r+0xa8>
 800ec52:	230c      	movs	r3, #12
 800ec54:	6033      	str	r3, [r6, #0]
 800ec56:	4630      	mov	r0, r6
 800ec58:	f000 f80c 	bl	800ec74 <__malloc_unlock>
 800ec5c:	e794      	b.n	800eb88 <_malloc_r+0x20>
 800ec5e:	6005      	str	r5, [r0, #0]
 800ec60:	e7d6      	b.n	800ec10 <_malloc_r+0xa8>
 800ec62:	bf00      	nop
 800ec64:	24000758 	.word	0x24000758

0800ec68 <__malloc_lock>:
 800ec68:	4801      	ldr	r0, [pc, #4]	@ (800ec70 <__malloc_lock+0x8>)
 800ec6a:	f000 b9ee 	b.w	800f04a <__retarget_lock_acquire_recursive>
 800ec6e:	bf00      	nop
 800ec70:	2400089c 	.word	0x2400089c

0800ec74 <__malloc_unlock>:
 800ec74:	4801      	ldr	r0, [pc, #4]	@ (800ec7c <__malloc_unlock+0x8>)
 800ec76:	f000 b9e9 	b.w	800f04c <__retarget_lock_release_recursive>
 800ec7a:	bf00      	nop
 800ec7c:	2400089c 	.word	0x2400089c

0800ec80 <std>:
 800ec80:	2300      	movs	r3, #0
 800ec82:	b510      	push	{r4, lr}
 800ec84:	4604      	mov	r4, r0
 800ec86:	e9c0 3300 	strd	r3, r3, [r0]
 800ec8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec8e:	6083      	str	r3, [r0, #8]
 800ec90:	8181      	strh	r1, [r0, #12]
 800ec92:	6643      	str	r3, [r0, #100]	@ 0x64
 800ec94:	81c2      	strh	r2, [r0, #14]
 800ec96:	6183      	str	r3, [r0, #24]
 800ec98:	4619      	mov	r1, r3
 800ec9a:	2208      	movs	r2, #8
 800ec9c:	305c      	adds	r0, #92	@ 0x5c
 800ec9e:	f000 f906 	bl	800eeae <memset>
 800eca2:	4b0d      	ldr	r3, [pc, #52]	@ (800ecd8 <std+0x58>)
 800eca4:	6263      	str	r3, [r4, #36]	@ 0x24
 800eca6:	4b0d      	ldr	r3, [pc, #52]	@ (800ecdc <std+0x5c>)
 800eca8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ecaa:	4b0d      	ldr	r3, [pc, #52]	@ (800ece0 <std+0x60>)
 800ecac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ecae:	4b0d      	ldr	r3, [pc, #52]	@ (800ece4 <std+0x64>)
 800ecb0:	6323      	str	r3, [r4, #48]	@ 0x30
 800ecb2:	4b0d      	ldr	r3, [pc, #52]	@ (800ece8 <std+0x68>)
 800ecb4:	6224      	str	r4, [r4, #32]
 800ecb6:	429c      	cmp	r4, r3
 800ecb8:	d006      	beq.n	800ecc8 <std+0x48>
 800ecba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ecbe:	4294      	cmp	r4, r2
 800ecc0:	d002      	beq.n	800ecc8 <std+0x48>
 800ecc2:	33d0      	adds	r3, #208	@ 0xd0
 800ecc4:	429c      	cmp	r4, r3
 800ecc6:	d105      	bne.n	800ecd4 <std+0x54>
 800ecc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800eccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecd0:	f000 b9ba 	b.w	800f048 <__retarget_lock_init_recursive>
 800ecd4:	bd10      	pop	{r4, pc}
 800ecd6:	bf00      	nop
 800ecd8:	0800ee29 	.word	0x0800ee29
 800ecdc:	0800ee4b 	.word	0x0800ee4b
 800ece0:	0800ee83 	.word	0x0800ee83
 800ece4:	0800eea7 	.word	0x0800eea7
 800ece8:	2400075c 	.word	0x2400075c

0800ecec <stdio_exit_handler>:
 800ecec:	4a02      	ldr	r2, [pc, #8]	@ (800ecf8 <stdio_exit_handler+0xc>)
 800ecee:	4903      	ldr	r1, [pc, #12]	@ (800ecfc <stdio_exit_handler+0x10>)
 800ecf0:	4803      	ldr	r0, [pc, #12]	@ (800ed00 <stdio_exit_handler+0x14>)
 800ecf2:	f000 b87b 	b.w	800edec <_fwalk_sglue>
 800ecf6:	bf00      	nop
 800ecf8:	240001c4 	.word	0x240001c4
 800ecfc:	0800f841 	.word	0x0800f841
 800ed00:	240001d4 	.word	0x240001d4

0800ed04 <cleanup_stdio>:
 800ed04:	6841      	ldr	r1, [r0, #4]
 800ed06:	4b0c      	ldr	r3, [pc, #48]	@ (800ed38 <cleanup_stdio+0x34>)
 800ed08:	4299      	cmp	r1, r3
 800ed0a:	b510      	push	{r4, lr}
 800ed0c:	4604      	mov	r4, r0
 800ed0e:	d001      	beq.n	800ed14 <cleanup_stdio+0x10>
 800ed10:	f000 fd96 	bl	800f840 <_fflush_r>
 800ed14:	68a1      	ldr	r1, [r4, #8]
 800ed16:	4b09      	ldr	r3, [pc, #36]	@ (800ed3c <cleanup_stdio+0x38>)
 800ed18:	4299      	cmp	r1, r3
 800ed1a:	d002      	beq.n	800ed22 <cleanup_stdio+0x1e>
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	f000 fd8f 	bl	800f840 <_fflush_r>
 800ed22:	68e1      	ldr	r1, [r4, #12]
 800ed24:	4b06      	ldr	r3, [pc, #24]	@ (800ed40 <cleanup_stdio+0x3c>)
 800ed26:	4299      	cmp	r1, r3
 800ed28:	d004      	beq.n	800ed34 <cleanup_stdio+0x30>
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed30:	f000 bd86 	b.w	800f840 <_fflush_r>
 800ed34:	bd10      	pop	{r4, pc}
 800ed36:	bf00      	nop
 800ed38:	2400075c 	.word	0x2400075c
 800ed3c:	240007c4 	.word	0x240007c4
 800ed40:	2400082c 	.word	0x2400082c

0800ed44 <global_stdio_init.part.0>:
 800ed44:	b510      	push	{r4, lr}
 800ed46:	4b0b      	ldr	r3, [pc, #44]	@ (800ed74 <global_stdio_init.part.0+0x30>)
 800ed48:	4c0b      	ldr	r4, [pc, #44]	@ (800ed78 <global_stdio_init.part.0+0x34>)
 800ed4a:	4a0c      	ldr	r2, [pc, #48]	@ (800ed7c <global_stdio_init.part.0+0x38>)
 800ed4c:	601a      	str	r2, [r3, #0]
 800ed4e:	4620      	mov	r0, r4
 800ed50:	2200      	movs	r2, #0
 800ed52:	2104      	movs	r1, #4
 800ed54:	f7ff ff94 	bl	800ec80 <std>
 800ed58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	2109      	movs	r1, #9
 800ed60:	f7ff ff8e 	bl	800ec80 <std>
 800ed64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ed68:	2202      	movs	r2, #2
 800ed6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed6e:	2112      	movs	r1, #18
 800ed70:	f7ff bf86 	b.w	800ec80 <std>
 800ed74:	24000894 	.word	0x24000894
 800ed78:	2400075c 	.word	0x2400075c
 800ed7c:	0800eced 	.word	0x0800eced

0800ed80 <__sfp_lock_acquire>:
 800ed80:	4801      	ldr	r0, [pc, #4]	@ (800ed88 <__sfp_lock_acquire+0x8>)
 800ed82:	f000 b962 	b.w	800f04a <__retarget_lock_acquire_recursive>
 800ed86:	bf00      	nop
 800ed88:	2400089e 	.word	0x2400089e

0800ed8c <__sfp_lock_release>:
 800ed8c:	4801      	ldr	r0, [pc, #4]	@ (800ed94 <__sfp_lock_release+0x8>)
 800ed8e:	f000 b95d 	b.w	800f04c <__retarget_lock_release_recursive>
 800ed92:	bf00      	nop
 800ed94:	2400089e 	.word	0x2400089e

0800ed98 <__sinit>:
 800ed98:	b510      	push	{r4, lr}
 800ed9a:	4604      	mov	r4, r0
 800ed9c:	f7ff fff0 	bl	800ed80 <__sfp_lock_acquire>
 800eda0:	6a23      	ldr	r3, [r4, #32]
 800eda2:	b11b      	cbz	r3, 800edac <__sinit+0x14>
 800eda4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eda8:	f7ff bff0 	b.w	800ed8c <__sfp_lock_release>
 800edac:	4b04      	ldr	r3, [pc, #16]	@ (800edc0 <__sinit+0x28>)
 800edae:	6223      	str	r3, [r4, #32]
 800edb0:	4b04      	ldr	r3, [pc, #16]	@ (800edc4 <__sinit+0x2c>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d1f5      	bne.n	800eda4 <__sinit+0xc>
 800edb8:	f7ff ffc4 	bl	800ed44 <global_stdio_init.part.0>
 800edbc:	e7f2      	b.n	800eda4 <__sinit+0xc>
 800edbe:	bf00      	nop
 800edc0:	0800ed05 	.word	0x0800ed05
 800edc4:	24000894 	.word	0x24000894

0800edc8 <fiprintf>:
 800edc8:	b40e      	push	{r1, r2, r3}
 800edca:	b503      	push	{r0, r1, lr}
 800edcc:	4601      	mov	r1, r0
 800edce:	ab03      	add	r3, sp, #12
 800edd0:	4805      	ldr	r0, [pc, #20]	@ (800ede8 <fiprintf+0x20>)
 800edd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800edd6:	6800      	ldr	r0, [r0, #0]
 800edd8:	9301      	str	r3, [sp, #4]
 800edda:	f000 fa09 	bl	800f1f0 <_vfiprintf_r>
 800edde:	b002      	add	sp, #8
 800ede0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ede4:	b003      	add	sp, #12
 800ede6:	4770      	bx	lr
 800ede8:	240001d0 	.word	0x240001d0

0800edec <_fwalk_sglue>:
 800edec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edf0:	4607      	mov	r7, r0
 800edf2:	4688      	mov	r8, r1
 800edf4:	4614      	mov	r4, r2
 800edf6:	2600      	movs	r6, #0
 800edf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800edfc:	f1b9 0901 	subs.w	r9, r9, #1
 800ee00:	d505      	bpl.n	800ee0e <_fwalk_sglue+0x22>
 800ee02:	6824      	ldr	r4, [r4, #0]
 800ee04:	2c00      	cmp	r4, #0
 800ee06:	d1f7      	bne.n	800edf8 <_fwalk_sglue+0xc>
 800ee08:	4630      	mov	r0, r6
 800ee0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee0e:	89ab      	ldrh	r3, [r5, #12]
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	d907      	bls.n	800ee24 <_fwalk_sglue+0x38>
 800ee14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee18:	3301      	adds	r3, #1
 800ee1a:	d003      	beq.n	800ee24 <_fwalk_sglue+0x38>
 800ee1c:	4629      	mov	r1, r5
 800ee1e:	4638      	mov	r0, r7
 800ee20:	47c0      	blx	r8
 800ee22:	4306      	orrs	r6, r0
 800ee24:	3568      	adds	r5, #104	@ 0x68
 800ee26:	e7e9      	b.n	800edfc <_fwalk_sglue+0x10>

0800ee28 <__sread>:
 800ee28:	b510      	push	{r4, lr}
 800ee2a:	460c      	mov	r4, r1
 800ee2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee30:	f000 f898 	bl	800ef64 <_read_r>
 800ee34:	2800      	cmp	r0, #0
 800ee36:	bfab      	itete	ge
 800ee38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ee3a:	89a3      	ldrhlt	r3, [r4, #12]
 800ee3c:	181b      	addge	r3, r3, r0
 800ee3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ee42:	bfac      	ite	ge
 800ee44:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ee46:	81a3      	strhlt	r3, [r4, #12]
 800ee48:	bd10      	pop	{r4, pc}

0800ee4a <__swrite>:
 800ee4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee4e:	461f      	mov	r7, r3
 800ee50:	898b      	ldrh	r3, [r1, #12]
 800ee52:	05db      	lsls	r3, r3, #23
 800ee54:	4605      	mov	r5, r0
 800ee56:	460c      	mov	r4, r1
 800ee58:	4616      	mov	r6, r2
 800ee5a:	d505      	bpl.n	800ee68 <__swrite+0x1e>
 800ee5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee60:	2302      	movs	r3, #2
 800ee62:	2200      	movs	r2, #0
 800ee64:	f000 f86c 	bl	800ef40 <_lseek_r>
 800ee68:	89a3      	ldrh	r3, [r4, #12]
 800ee6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ee72:	81a3      	strh	r3, [r4, #12]
 800ee74:	4632      	mov	r2, r6
 800ee76:	463b      	mov	r3, r7
 800ee78:	4628      	mov	r0, r5
 800ee7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee7e:	f000 b8a7 	b.w	800efd0 <_write_r>

0800ee82 <__sseek>:
 800ee82:	b510      	push	{r4, lr}
 800ee84:	460c      	mov	r4, r1
 800ee86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee8a:	f000 f859 	bl	800ef40 <_lseek_r>
 800ee8e:	1c43      	adds	r3, r0, #1
 800ee90:	89a3      	ldrh	r3, [r4, #12]
 800ee92:	bf15      	itete	ne
 800ee94:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ee96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ee9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ee9e:	81a3      	strheq	r3, [r4, #12]
 800eea0:	bf18      	it	ne
 800eea2:	81a3      	strhne	r3, [r4, #12]
 800eea4:	bd10      	pop	{r4, pc}

0800eea6 <__sclose>:
 800eea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeaa:	f000 b839 	b.w	800ef20 <_close_r>

0800eeae <memset>:
 800eeae:	4402      	add	r2, r0
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d100      	bne.n	800eeb8 <memset+0xa>
 800eeb6:	4770      	bx	lr
 800eeb8:	f803 1b01 	strb.w	r1, [r3], #1
 800eebc:	e7f9      	b.n	800eeb2 <memset+0x4>

0800eebe <_raise_r>:
 800eebe:	291f      	cmp	r1, #31
 800eec0:	b538      	push	{r3, r4, r5, lr}
 800eec2:	4605      	mov	r5, r0
 800eec4:	460c      	mov	r4, r1
 800eec6:	d904      	bls.n	800eed2 <_raise_r+0x14>
 800eec8:	2316      	movs	r3, #22
 800eeca:	6003      	str	r3, [r0, #0]
 800eecc:	f04f 30ff 	mov.w	r0, #4294967295
 800eed0:	bd38      	pop	{r3, r4, r5, pc}
 800eed2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eed4:	b112      	cbz	r2, 800eedc <_raise_r+0x1e>
 800eed6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eeda:	b94b      	cbnz	r3, 800eef0 <_raise_r+0x32>
 800eedc:	4628      	mov	r0, r5
 800eede:	f000 f865 	bl	800efac <_getpid_r>
 800eee2:	4622      	mov	r2, r4
 800eee4:	4601      	mov	r1, r0
 800eee6:	4628      	mov	r0, r5
 800eee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eeec:	f000 b84c 	b.w	800ef88 <_kill_r>
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	d00a      	beq.n	800ef0a <_raise_r+0x4c>
 800eef4:	1c59      	adds	r1, r3, #1
 800eef6:	d103      	bne.n	800ef00 <_raise_r+0x42>
 800eef8:	2316      	movs	r3, #22
 800eefa:	6003      	str	r3, [r0, #0]
 800eefc:	2001      	movs	r0, #1
 800eefe:	e7e7      	b.n	800eed0 <_raise_r+0x12>
 800ef00:	2100      	movs	r1, #0
 800ef02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ef06:	4620      	mov	r0, r4
 800ef08:	4798      	blx	r3
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	e7e0      	b.n	800eed0 <_raise_r+0x12>
	...

0800ef10 <raise>:
 800ef10:	4b02      	ldr	r3, [pc, #8]	@ (800ef1c <raise+0xc>)
 800ef12:	4601      	mov	r1, r0
 800ef14:	6818      	ldr	r0, [r3, #0]
 800ef16:	f7ff bfd2 	b.w	800eebe <_raise_r>
 800ef1a:	bf00      	nop
 800ef1c:	240001d0 	.word	0x240001d0

0800ef20 <_close_r>:
 800ef20:	b538      	push	{r3, r4, r5, lr}
 800ef22:	4d06      	ldr	r5, [pc, #24]	@ (800ef3c <_close_r+0x1c>)
 800ef24:	2300      	movs	r3, #0
 800ef26:	4604      	mov	r4, r0
 800ef28:	4608      	mov	r0, r1
 800ef2a:	602b      	str	r3, [r5, #0]
 800ef2c:	f7f3 fa98 	bl	8002460 <_close>
 800ef30:	1c43      	adds	r3, r0, #1
 800ef32:	d102      	bne.n	800ef3a <_close_r+0x1a>
 800ef34:	682b      	ldr	r3, [r5, #0]
 800ef36:	b103      	cbz	r3, 800ef3a <_close_r+0x1a>
 800ef38:	6023      	str	r3, [r4, #0]
 800ef3a:	bd38      	pop	{r3, r4, r5, pc}
 800ef3c:	24000898 	.word	0x24000898

0800ef40 <_lseek_r>:
 800ef40:	b538      	push	{r3, r4, r5, lr}
 800ef42:	4d07      	ldr	r5, [pc, #28]	@ (800ef60 <_lseek_r+0x20>)
 800ef44:	4604      	mov	r4, r0
 800ef46:	4608      	mov	r0, r1
 800ef48:	4611      	mov	r1, r2
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	602a      	str	r2, [r5, #0]
 800ef4e:	461a      	mov	r2, r3
 800ef50:	f7f3 faad 	bl	80024ae <_lseek>
 800ef54:	1c43      	adds	r3, r0, #1
 800ef56:	d102      	bne.n	800ef5e <_lseek_r+0x1e>
 800ef58:	682b      	ldr	r3, [r5, #0]
 800ef5a:	b103      	cbz	r3, 800ef5e <_lseek_r+0x1e>
 800ef5c:	6023      	str	r3, [r4, #0]
 800ef5e:	bd38      	pop	{r3, r4, r5, pc}
 800ef60:	24000898 	.word	0x24000898

0800ef64 <_read_r>:
 800ef64:	b538      	push	{r3, r4, r5, lr}
 800ef66:	4d07      	ldr	r5, [pc, #28]	@ (800ef84 <_read_r+0x20>)
 800ef68:	4604      	mov	r4, r0
 800ef6a:	4608      	mov	r0, r1
 800ef6c:	4611      	mov	r1, r2
 800ef6e:	2200      	movs	r2, #0
 800ef70:	602a      	str	r2, [r5, #0]
 800ef72:	461a      	mov	r2, r3
 800ef74:	f7f3 fa3b 	bl	80023ee <_read>
 800ef78:	1c43      	adds	r3, r0, #1
 800ef7a:	d102      	bne.n	800ef82 <_read_r+0x1e>
 800ef7c:	682b      	ldr	r3, [r5, #0]
 800ef7e:	b103      	cbz	r3, 800ef82 <_read_r+0x1e>
 800ef80:	6023      	str	r3, [r4, #0]
 800ef82:	bd38      	pop	{r3, r4, r5, pc}
 800ef84:	24000898 	.word	0x24000898

0800ef88 <_kill_r>:
 800ef88:	b538      	push	{r3, r4, r5, lr}
 800ef8a:	4d07      	ldr	r5, [pc, #28]	@ (800efa8 <_kill_r+0x20>)
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	4604      	mov	r4, r0
 800ef90:	4608      	mov	r0, r1
 800ef92:	4611      	mov	r1, r2
 800ef94:	602b      	str	r3, [r5, #0]
 800ef96:	f7f3 fa0f 	bl	80023b8 <_kill>
 800ef9a:	1c43      	adds	r3, r0, #1
 800ef9c:	d102      	bne.n	800efa4 <_kill_r+0x1c>
 800ef9e:	682b      	ldr	r3, [r5, #0]
 800efa0:	b103      	cbz	r3, 800efa4 <_kill_r+0x1c>
 800efa2:	6023      	str	r3, [r4, #0]
 800efa4:	bd38      	pop	{r3, r4, r5, pc}
 800efa6:	bf00      	nop
 800efa8:	24000898 	.word	0x24000898

0800efac <_getpid_r>:
 800efac:	f7f3 b9fc 	b.w	80023a8 <_getpid>

0800efb0 <_sbrk_r>:
 800efb0:	b538      	push	{r3, r4, r5, lr}
 800efb2:	4d06      	ldr	r5, [pc, #24]	@ (800efcc <_sbrk_r+0x1c>)
 800efb4:	2300      	movs	r3, #0
 800efb6:	4604      	mov	r4, r0
 800efb8:	4608      	mov	r0, r1
 800efba:	602b      	str	r3, [r5, #0]
 800efbc:	f7f3 fa84 	bl	80024c8 <_sbrk>
 800efc0:	1c43      	adds	r3, r0, #1
 800efc2:	d102      	bne.n	800efca <_sbrk_r+0x1a>
 800efc4:	682b      	ldr	r3, [r5, #0]
 800efc6:	b103      	cbz	r3, 800efca <_sbrk_r+0x1a>
 800efc8:	6023      	str	r3, [r4, #0]
 800efca:	bd38      	pop	{r3, r4, r5, pc}
 800efcc:	24000898 	.word	0x24000898

0800efd0 <_write_r>:
 800efd0:	b538      	push	{r3, r4, r5, lr}
 800efd2:	4d07      	ldr	r5, [pc, #28]	@ (800eff0 <_write_r+0x20>)
 800efd4:	4604      	mov	r4, r0
 800efd6:	4608      	mov	r0, r1
 800efd8:	4611      	mov	r1, r2
 800efda:	2200      	movs	r2, #0
 800efdc:	602a      	str	r2, [r5, #0]
 800efde:	461a      	mov	r2, r3
 800efe0:	f7f3 fa22 	bl	8002428 <_write>
 800efe4:	1c43      	adds	r3, r0, #1
 800efe6:	d102      	bne.n	800efee <_write_r+0x1e>
 800efe8:	682b      	ldr	r3, [r5, #0]
 800efea:	b103      	cbz	r3, 800efee <_write_r+0x1e>
 800efec:	6023      	str	r3, [r4, #0]
 800efee:	bd38      	pop	{r3, r4, r5, pc}
 800eff0:	24000898 	.word	0x24000898

0800eff4 <__errno>:
 800eff4:	4b01      	ldr	r3, [pc, #4]	@ (800effc <__errno+0x8>)
 800eff6:	6818      	ldr	r0, [r3, #0]
 800eff8:	4770      	bx	lr
 800effa:	bf00      	nop
 800effc:	240001d0 	.word	0x240001d0

0800f000 <__libc_init_array>:
 800f000:	b570      	push	{r4, r5, r6, lr}
 800f002:	4d0d      	ldr	r5, [pc, #52]	@ (800f038 <__libc_init_array+0x38>)
 800f004:	4c0d      	ldr	r4, [pc, #52]	@ (800f03c <__libc_init_array+0x3c>)
 800f006:	1b64      	subs	r4, r4, r5
 800f008:	10a4      	asrs	r4, r4, #2
 800f00a:	2600      	movs	r6, #0
 800f00c:	42a6      	cmp	r6, r4
 800f00e:	d109      	bne.n	800f024 <__libc_init_array+0x24>
 800f010:	4d0b      	ldr	r5, [pc, #44]	@ (800f040 <__libc_init_array+0x40>)
 800f012:	4c0c      	ldr	r4, [pc, #48]	@ (800f044 <__libc_init_array+0x44>)
 800f014:	f000 fd54 	bl	800fac0 <_init>
 800f018:	1b64      	subs	r4, r4, r5
 800f01a:	10a4      	asrs	r4, r4, #2
 800f01c:	2600      	movs	r6, #0
 800f01e:	42a6      	cmp	r6, r4
 800f020:	d105      	bne.n	800f02e <__libc_init_array+0x2e>
 800f022:	bd70      	pop	{r4, r5, r6, pc}
 800f024:	f855 3b04 	ldr.w	r3, [r5], #4
 800f028:	4798      	blx	r3
 800f02a:	3601      	adds	r6, #1
 800f02c:	e7ee      	b.n	800f00c <__libc_init_array+0xc>
 800f02e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f032:	4798      	blx	r3
 800f034:	3601      	adds	r6, #1
 800f036:	e7f2      	b.n	800f01e <__libc_init_array+0x1e>
 800f038:	08011228 	.word	0x08011228
 800f03c:	08011228 	.word	0x08011228
 800f040:	08011228 	.word	0x08011228
 800f044:	08011238 	.word	0x08011238

0800f048 <__retarget_lock_init_recursive>:
 800f048:	4770      	bx	lr

0800f04a <__retarget_lock_acquire_recursive>:
 800f04a:	4770      	bx	lr

0800f04c <__retarget_lock_release_recursive>:
 800f04c:	4770      	bx	lr
	...

0800f050 <__register_exitproc>:
 800f050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f054:	4d27      	ldr	r5, [pc, #156]	@ (800f0f4 <__register_exitproc+0xa4>)
 800f056:	4607      	mov	r7, r0
 800f058:	6828      	ldr	r0, [r5, #0]
 800f05a:	4691      	mov	r9, r2
 800f05c:	460e      	mov	r6, r1
 800f05e:	4698      	mov	r8, r3
 800f060:	f7ff fff3 	bl	800f04a <__retarget_lock_acquire_recursive>
 800f064:	4a24      	ldr	r2, [pc, #144]	@ (800f0f8 <__register_exitproc+0xa8>)
 800f066:	6814      	ldr	r4, [r2, #0]
 800f068:	b93c      	cbnz	r4, 800f07a <__register_exitproc+0x2a>
 800f06a:	4b24      	ldr	r3, [pc, #144]	@ (800f0fc <__register_exitproc+0xac>)
 800f06c:	6013      	str	r3, [r2, #0]
 800f06e:	4a24      	ldr	r2, [pc, #144]	@ (800f100 <__register_exitproc+0xb0>)
 800f070:	b112      	cbz	r2, 800f078 <__register_exitproc+0x28>
 800f072:	6812      	ldr	r2, [r2, #0]
 800f074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800f078:	4c20      	ldr	r4, [pc, #128]	@ (800f0fc <__register_exitproc+0xac>)
 800f07a:	6863      	ldr	r3, [r4, #4]
 800f07c:	2b1f      	cmp	r3, #31
 800f07e:	dd06      	ble.n	800f08e <__register_exitproc+0x3e>
 800f080:	6828      	ldr	r0, [r5, #0]
 800f082:	f7ff ffe3 	bl	800f04c <__retarget_lock_release_recursive>
 800f086:	f04f 30ff 	mov.w	r0, #4294967295
 800f08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f08e:	b32f      	cbz	r7, 800f0dc <__register_exitproc+0x8c>
 800f090:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800f094:	b968      	cbnz	r0, 800f0b2 <__register_exitproc+0x62>
 800f096:	4b1b      	ldr	r3, [pc, #108]	@ (800f104 <__register_exitproc+0xb4>)
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d0f1      	beq.n	800f080 <__register_exitproc+0x30>
 800f09c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800f0a0:	f7ff fd30 	bl	800eb04 <malloc>
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	d0eb      	beq.n	800f080 <__register_exitproc+0x30>
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 800f0ae:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 800f0b2:	6863      	ldr	r3, [r4, #4]
 800f0b4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	409a      	lsls	r2, r3
 800f0bc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800f0c0:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 800f0c4:	4313      	orrs	r3, r2
 800f0c6:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 800f0ca:	2f02      	cmp	r7, #2
 800f0cc:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 800f0d0:	bf02      	ittt	eq
 800f0d2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 800f0d6:	4313      	orreq	r3, r2
 800f0d8:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 800f0dc:	6863      	ldr	r3, [r4, #4]
 800f0de:	6828      	ldr	r0, [r5, #0]
 800f0e0:	1c5a      	adds	r2, r3, #1
 800f0e2:	3302      	adds	r3, #2
 800f0e4:	6062      	str	r2, [r4, #4]
 800f0e6:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800f0ea:	f7ff ffaf 	bl	800f04c <__retarget_lock_release_recursive>
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	e7cb      	b.n	800f08a <__register_exitproc+0x3a>
 800f0f2:	bf00      	nop
 800f0f4:	24000220 	.word	0x24000220
 800f0f8:	2400092c 	.word	0x2400092c
 800f0fc:	240008a0 	.word	0x240008a0
 800f100:	0800ff30 	.word	0x0800ff30
 800f104:	0800eb05 	.word	0x0800eb05

0800f108 <_free_r>:
 800f108:	b538      	push	{r3, r4, r5, lr}
 800f10a:	4605      	mov	r5, r0
 800f10c:	2900      	cmp	r1, #0
 800f10e:	d041      	beq.n	800f194 <_free_r+0x8c>
 800f110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f114:	1f0c      	subs	r4, r1, #4
 800f116:	2b00      	cmp	r3, #0
 800f118:	bfb8      	it	lt
 800f11a:	18e4      	addlt	r4, r4, r3
 800f11c:	f7ff fda4 	bl	800ec68 <__malloc_lock>
 800f120:	4a1d      	ldr	r2, [pc, #116]	@ (800f198 <_free_r+0x90>)
 800f122:	6813      	ldr	r3, [r2, #0]
 800f124:	b933      	cbnz	r3, 800f134 <_free_r+0x2c>
 800f126:	6063      	str	r3, [r4, #4]
 800f128:	6014      	str	r4, [r2, #0]
 800f12a:	4628      	mov	r0, r5
 800f12c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f130:	f7ff bda0 	b.w	800ec74 <__malloc_unlock>
 800f134:	42a3      	cmp	r3, r4
 800f136:	d908      	bls.n	800f14a <_free_r+0x42>
 800f138:	6820      	ldr	r0, [r4, #0]
 800f13a:	1821      	adds	r1, r4, r0
 800f13c:	428b      	cmp	r3, r1
 800f13e:	bf01      	itttt	eq
 800f140:	6819      	ldreq	r1, [r3, #0]
 800f142:	685b      	ldreq	r3, [r3, #4]
 800f144:	1809      	addeq	r1, r1, r0
 800f146:	6021      	streq	r1, [r4, #0]
 800f148:	e7ed      	b.n	800f126 <_free_r+0x1e>
 800f14a:	461a      	mov	r2, r3
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	b10b      	cbz	r3, 800f154 <_free_r+0x4c>
 800f150:	42a3      	cmp	r3, r4
 800f152:	d9fa      	bls.n	800f14a <_free_r+0x42>
 800f154:	6811      	ldr	r1, [r2, #0]
 800f156:	1850      	adds	r0, r2, r1
 800f158:	42a0      	cmp	r0, r4
 800f15a:	d10b      	bne.n	800f174 <_free_r+0x6c>
 800f15c:	6820      	ldr	r0, [r4, #0]
 800f15e:	4401      	add	r1, r0
 800f160:	1850      	adds	r0, r2, r1
 800f162:	4283      	cmp	r3, r0
 800f164:	6011      	str	r1, [r2, #0]
 800f166:	d1e0      	bne.n	800f12a <_free_r+0x22>
 800f168:	6818      	ldr	r0, [r3, #0]
 800f16a:	685b      	ldr	r3, [r3, #4]
 800f16c:	6053      	str	r3, [r2, #4]
 800f16e:	4408      	add	r0, r1
 800f170:	6010      	str	r0, [r2, #0]
 800f172:	e7da      	b.n	800f12a <_free_r+0x22>
 800f174:	d902      	bls.n	800f17c <_free_r+0x74>
 800f176:	230c      	movs	r3, #12
 800f178:	602b      	str	r3, [r5, #0]
 800f17a:	e7d6      	b.n	800f12a <_free_r+0x22>
 800f17c:	6820      	ldr	r0, [r4, #0]
 800f17e:	1821      	adds	r1, r4, r0
 800f180:	428b      	cmp	r3, r1
 800f182:	bf04      	itt	eq
 800f184:	6819      	ldreq	r1, [r3, #0]
 800f186:	685b      	ldreq	r3, [r3, #4]
 800f188:	6063      	str	r3, [r4, #4]
 800f18a:	bf04      	itt	eq
 800f18c:	1809      	addeq	r1, r1, r0
 800f18e:	6021      	streq	r1, [r4, #0]
 800f190:	6054      	str	r4, [r2, #4]
 800f192:	e7ca      	b.n	800f12a <_free_r+0x22>
 800f194:	bd38      	pop	{r3, r4, r5, pc}
 800f196:	bf00      	nop
 800f198:	24000758 	.word	0x24000758

0800f19c <__sfputc_r>:
 800f19c:	6893      	ldr	r3, [r2, #8]
 800f19e:	3b01      	subs	r3, #1
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	b410      	push	{r4}
 800f1a4:	6093      	str	r3, [r2, #8]
 800f1a6:	da08      	bge.n	800f1ba <__sfputc_r+0x1e>
 800f1a8:	6994      	ldr	r4, [r2, #24]
 800f1aa:	42a3      	cmp	r3, r4
 800f1ac:	db01      	blt.n	800f1b2 <__sfputc_r+0x16>
 800f1ae:	290a      	cmp	r1, #10
 800f1b0:	d103      	bne.n	800f1ba <__sfputc_r+0x1e>
 800f1b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1b6:	f000 bb6b 	b.w	800f890 <__swbuf_r>
 800f1ba:	6813      	ldr	r3, [r2, #0]
 800f1bc:	1c58      	adds	r0, r3, #1
 800f1be:	6010      	str	r0, [r2, #0]
 800f1c0:	7019      	strb	r1, [r3, #0]
 800f1c2:	4608      	mov	r0, r1
 800f1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1c8:	4770      	bx	lr

0800f1ca <__sfputs_r>:
 800f1ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1cc:	4606      	mov	r6, r0
 800f1ce:	460f      	mov	r7, r1
 800f1d0:	4614      	mov	r4, r2
 800f1d2:	18d5      	adds	r5, r2, r3
 800f1d4:	42ac      	cmp	r4, r5
 800f1d6:	d101      	bne.n	800f1dc <__sfputs_r+0x12>
 800f1d8:	2000      	movs	r0, #0
 800f1da:	e007      	b.n	800f1ec <__sfputs_r+0x22>
 800f1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1e0:	463a      	mov	r2, r7
 800f1e2:	4630      	mov	r0, r6
 800f1e4:	f7ff ffda 	bl	800f19c <__sfputc_r>
 800f1e8:	1c43      	adds	r3, r0, #1
 800f1ea:	d1f3      	bne.n	800f1d4 <__sfputs_r+0xa>
 800f1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f1f0 <_vfiprintf_r>:
 800f1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1f4:	460d      	mov	r5, r1
 800f1f6:	b09d      	sub	sp, #116	@ 0x74
 800f1f8:	4614      	mov	r4, r2
 800f1fa:	4698      	mov	r8, r3
 800f1fc:	4606      	mov	r6, r0
 800f1fe:	b118      	cbz	r0, 800f208 <_vfiprintf_r+0x18>
 800f200:	6a03      	ldr	r3, [r0, #32]
 800f202:	b90b      	cbnz	r3, 800f208 <_vfiprintf_r+0x18>
 800f204:	f7ff fdc8 	bl	800ed98 <__sinit>
 800f208:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f20a:	07d9      	lsls	r1, r3, #31
 800f20c:	d405      	bmi.n	800f21a <_vfiprintf_r+0x2a>
 800f20e:	89ab      	ldrh	r3, [r5, #12]
 800f210:	059a      	lsls	r2, r3, #22
 800f212:	d402      	bmi.n	800f21a <_vfiprintf_r+0x2a>
 800f214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f216:	f7ff ff18 	bl	800f04a <__retarget_lock_acquire_recursive>
 800f21a:	89ab      	ldrh	r3, [r5, #12]
 800f21c:	071b      	lsls	r3, r3, #28
 800f21e:	d501      	bpl.n	800f224 <_vfiprintf_r+0x34>
 800f220:	692b      	ldr	r3, [r5, #16]
 800f222:	b99b      	cbnz	r3, 800f24c <_vfiprintf_r+0x5c>
 800f224:	4629      	mov	r1, r5
 800f226:	4630      	mov	r0, r6
 800f228:	f000 fb70 	bl	800f90c <__swsetup_r>
 800f22c:	b170      	cbz	r0, 800f24c <_vfiprintf_r+0x5c>
 800f22e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f230:	07dc      	lsls	r4, r3, #31
 800f232:	d504      	bpl.n	800f23e <_vfiprintf_r+0x4e>
 800f234:	f04f 30ff 	mov.w	r0, #4294967295
 800f238:	b01d      	add	sp, #116	@ 0x74
 800f23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f23e:	89ab      	ldrh	r3, [r5, #12]
 800f240:	0598      	lsls	r0, r3, #22
 800f242:	d4f7      	bmi.n	800f234 <_vfiprintf_r+0x44>
 800f244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f246:	f7ff ff01 	bl	800f04c <__retarget_lock_release_recursive>
 800f24a:	e7f3      	b.n	800f234 <_vfiprintf_r+0x44>
 800f24c:	2300      	movs	r3, #0
 800f24e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f250:	2320      	movs	r3, #32
 800f252:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f256:	f8cd 800c 	str.w	r8, [sp, #12]
 800f25a:	2330      	movs	r3, #48	@ 0x30
 800f25c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f40c <_vfiprintf_r+0x21c>
 800f260:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f264:	f04f 0901 	mov.w	r9, #1
 800f268:	4623      	mov	r3, r4
 800f26a:	469a      	mov	sl, r3
 800f26c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f270:	b10a      	cbz	r2, 800f276 <_vfiprintf_r+0x86>
 800f272:	2a25      	cmp	r2, #37	@ 0x25
 800f274:	d1f9      	bne.n	800f26a <_vfiprintf_r+0x7a>
 800f276:	ebba 0b04 	subs.w	fp, sl, r4
 800f27a:	d00b      	beq.n	800f294 <_vfiprintf_r+0xa4>
 800f27c:	465b      	mov	r3, fp
 800f27e:	4622      	mov	r2, r4
 800f280:	4629      	mov	r1, r5
 800f282:	4630      	mov	r0, r6
 800f284:	f7ff ffa1 	bl	800f1ca <__sfputs_r>
 800f288:	3001      	adds	r0, #1
 800f28a:	f000 80a7 	beq.w	800f3dc <_vfiprintf_r+0x1ec>
 800f28e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f290:	445a      	add	r2, fp
 800f292:	9209      	str	r2, [sp, #36]	@ 0x24
 800f294:	f89a 3000 	ldrb.w	r3, [sl]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	f000 809f 	beq.w	800f3dc <_vfiprintf_r+0x1ec>
 800f29e:	2300      	movs	r3, #0
 800f2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800f2a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2a8:	f10a 0a01 	add.w	sl, sl, #1
 800f2ac:	9304      	str	r3, [sp, #16]
 800f2ae:	9307      	str	r3, [sp, #28]
 800f2b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f2b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f2b6:	4654      	mov	r4, sl
 800f2b8:	2205      	movs	r2, #5
 800f2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2be:	4853      	ldr	r0, [pc, #332]	@ (800f40c <_vfiprintf_r+0x21c>)
 800f2c0:	f7f1 f826 	bl	8000310 <memchr>
 800f2c4:	9a04      	ldr	r2, [sp, #16]
 800f2c6:	b9d8      	cbnz	r0, 800f300 <_vfiprintf_r+0x110>
 800f2c8:	06d1      	lsls	r1, r2, #27
 800f2ca:	bf44      	itt	mi
 800f2cc:	2320      	movmi	r3, #32
 800f2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2d2:	0713      	lsls	r3, r2, #28
 800f2d4:	bf44      	itt	mi
 800f2d6:	232b      	movmi	r3, #43	@ 0x2b
 800f2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800f2e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2e2:	d015      	beq.n	800f310 <_vfiprintf_r+0x120>
 800f2e4:	9a07      	ldr	r2, [sp, #28]
 800f2e6:	4654      	mov	r4, sl
 800f2e8:	2000      	movs	r0, #0
 800f2ea:	f04f 0c0a 	mov.w	ip, #10
 800f2ee:	4621      	mov	r1, r4
 800f2f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2f4:	3b30      	subs	r3, #48	@ 0x30
 800f2f6:	2b09      	cmp	r3, #9
 800f2f8:	d94b      	bls.n	800f392 <_vfiprintf_r+0x1a2>
 800f2fa:	b1b0      	cbz	r0, 800f32a <_vfiprintf_r+0x13a>
 800f2fc:	9207      	str	r2, [sp, #28]
 800f2fe:	e014      	b.n	800f32a <_vfiprintf_r+0x13a>
 800f300:	eba0 0308 	sub.w	r3, r0, r8
 800f304:	fa09 f303 	lsl.w	r3, r9, r3
 800f308:	4313      	orrs	r3, r2
 800f30a:	9304      	str	r3, [sp, #16]
 800f30c:	46a2      	mov	sl, r4
 800f30e:	e7d2      	b.n	800f2b6 <_vfiprintf_r+0xc6>
 800f310:	9b03      	ldr	r3, [sp, #12]
 800f312:	1d19      	adds	r1, r3, #4
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	9103      	str	r1, [sp, #12]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	bfbb      	ittet	lt
 800f31c:	425b      	neglt	r3, r3
 800f31e:	f042 0202 	orrlt.w	r2, r2, #2
 800f322:	9307      	strge	r3, [sp, #28]
 800f324:	9307      	strlt	r3, [sp, #28]
 800f326:	bfb8      	it	lt
 800f328:	9204      	strlt	r2, [sp, #16]
 800f32a:	7823      	ldrb	r3, [r4, #0]
 800f32c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f32e:	d10a      	bne.n	800f346 <_vfiprintf_r+0x156>
 800f330:	7863      	ldrb	r3, [r4, #1]
 800f332:	2b2a      	cmp	r3, #42	@ 0x2a
 800f334:	d132      	bne.n	800f39c <_vfiprintf_r+0x1ac>
 800f336:	9b03      	ldr	r3, [sp, #12]
 800f338:	1d1a      	adds	r2, r3, #4
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	9203      	str	r2, [sp, #12]
 800f33e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f342:	3402      	adds	r4, #2
 800f344:	9305      	str	r3, [sp, #20]
 800f346:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f41c <_vfiprintf_r+0x22c>
 800f34a:	7821      	ldrb	r1, [r4, #0]
 800f34c:	2203      	movs	r2, #3
 800f34e:	4650      	mov	r0, sl
 800f350:	f7f0 ffde 	bl	8000310 <memchr>
 800f354:	b138      	cbz	r0, 800f366 <_vfiprintf_r+0x176>
 800f356:	9b04      	ldr	r3, [sp, #16]
 800f358:	eba0 000a 	sub.w	r0, r0, sl
 800f35c:	2240      	movs	r2, #64	@ 0x40
 800f35e:	4082      	lsls	r2, r0
 800f360:	4313      	orrs	r3, r2
 800f362:	3401      	adds	r4, #1
 800f364:	9304      	str	r3, [sp, #16]
 800f366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f36a:	4829      	ldr	r0, [pc, #164]	@ (800f410 <_vfiprintf_r+0x220>)
 800f36c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f370:	2206      	movs	r2, #6
 800f372:	f7f0 ffcd 	bl	8000310 <memchr>
 800f376:	2800      	cmp	r0, #0
 800f378:	d03f      	beq.n	800f3fa <_vfiprintf_r+0x20a>
 800f37a:	4b26      	ldr	r3, [pc, #152]	@ (800f414 <_vfiprintf_r+0x224>)
 800f37c:	bb1b      	cbnz	r3, 800f3c6 <_vfiprintf_r+0x1d6>
 800f37e:	9b03      	ldr	r3, [sp, #12]
 800f380:	3307      	adds	r3, #7
 800f382:	f023 0307 	bic.w	r3, r3, #7
 800f386:	3308      	adds	r3, #8
 800f388:	9303      	str	r3, [sp, #12]
 800f38a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f38c:	443b      	add	r3, r7
 800f38e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f390:	e76a      	b.n	800f268 <_vfiprintf_r+0x78>
 800f392:	fb0c 3202 	mla	r2, ip, r2, r3
 800f396:	460c      	mov	r4, r1
 800f398:	2001      	movs	r0, #1
 800f39a:	e7a8      	b.n	800f2ee <_vfiprintf_r+0xfe>
 800f39c:	2300      	movs	r3, #0
 800f39e:	3401      	adds	r4, #1
 800f3a0:	9305      	str	r3, [sp, #20]
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	f04f 0c0a 	mov.w	ip, #10
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3ae:	3a30      	subs	r2, #48	@ 0x30
 800f3b0:	2a09      	cmp	r2, #9
 800f3b2:	d903      	bls.n	800f3bc <_vfiprintf_r+0x1cc>
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d0c6      	beq.n	800f346 <_vfiprintf_r+0x156>
 800f3b8:	9105      	str	r1, [sp, #20]
 800f3ba:	e7c4      	b.n	800f346 <_vfiprintf_r+0x156>
 800f3bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3c0:	4604      	mov	r4, r0
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	e7f0      	b.n	800f3a8 <_vfiprintf_r+0x1b8>
 800f3c6:	ab03      	add	r3, sp, #12
 800f3c8:	9300      	str	r3, [sp, #0]
 800f3ca:	462a      	mov	r2, r5
 800f3cc:	4b12      	ldr	r3, [pc, #72]	@ (800f418 <_vfiprintf_r+0x228>)
 800f3ce:	a904      	add	r1, sp, #16
 800f3d0:	4630      	mov	r0, r6
 800f3d2:	f3af 8000 	nop.w
 800f3d6:	4607      	mov	r7, r0
 800f3d8:	1c78      	adds	r0, r7, #1
 800f3da:	d1d6      	bne.n	800f38a <_vfiprintf_r+0x19a>
 800f3dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3de:	07d9      	lsls	r1, r3, #31
 800f3e0:	d405      	bmi.n	800f3ee <_vfiprintf_r+0x1fe>
 800f3e2:	89ab      	ldrh	r3, [r5, #12]
 800f3e4:	059a      	lsls	r2, r3, #22
 800f3e6:	d402      	bmi.n	800f3ee <_vfiprintf_r+0x1fe>
 800f3e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3ea:	f7ff fe2f 	bl	800f04c <__retarget_lock_release_recursive>
 800f3ee:	89ab      	ldrh	r3, [r5, #12]
 800f3f0:	065b      	lsls	r3, r3, #25
 800f3f2:	f53f af1f 	bmi.w	800f234 <_vfiprintf_r+0x44>
 800f3f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f3f8:	e71e      	b.n	800f238 <_vfiprintf_r+0x48>
 800f3fa:	ab03      	add	r3, sp, #12
 800f3fc:	9300      	str	r3, [sp, #0]
 800f3fe:	462a      	mov	r2, r5
 800f400:	4b05      	ldr	r3, [pc, #20]	@ (800f418 <_vfiprintf_r+0x228>)
 800f402:	a904      	add	r1, sp, #16
 800f404:	4630      	mov	r0, r6
 800f406:	f000 f879 	bl	800f4fc <_printf_i>
 800f40a:	e7e4      	b.n	800f3d6 <_vfiprintf_r+0x1e6>
 800f40c:	0800fefc 	.word	0x0800fefc
 800f410:	0800ff06 	.word	0x0800ff06
 800f414:	00000000 	.word	0x00000000
 800f418:	0800f1cb 	.word	0x0800f1cb
 800f41c:	0800ff02 	.word	0x0800ff02

0800f420 <_printf_common>:
 800f420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f424:	4616      	mov	r6, r2
 800f426:	4698      	mov	r8, r3
 800f428:	688a      	ldr	r2, [r1, #8]
 800f42a:	690b      	ldr	r3, [r1, #16]
 800f42c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f430:	4293      	cmp	r3, r2
 800f432:	bfb8      	it	lt
 800f434:	4613      	movlt	r3, r2
 800f436:	6033      	str	r3, [r6, #0]
 800f438:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f43c:	4607      	mov	r7, r0
 800f43e:	460c      	mov	r4, r1
 800f440:	b10a      	cbz	r2, 800f446 <_printf_common+0x26>
 800f442:	3301      	adds	r3, #1
 800f444:	6033      	str	r3, [r6, #0]
 800f446:	6823      	ldr	r3, [r4, #0]
 800f448:	0699      	lsls	r1, r3, #26
 800f44a:	bf42      	ittt	mi
 800f44c:	6833      	ldrmi	r3, [r6, #0]
 800f44e:	3302      	addmi	r3, #2
 800f450:	6033      	strmi	r3, [r6, #0]
 800f452:	6825      	ldr	r5, [r4, #0]
 800f454:	f015 0506 	ands.w	r5, r5, #6
 800f458:	d106      	bne.n	800f468 <_printf_common+0x48>
 800f45a:	f104 0a19 	add.w	sl, r4, #25
 800f45e:	68e3      	ldr	r3, [r4, #12]
 800f460:	6832      	ldr	r2, [r6, #0]
 800f462:	1a9b      	subs	r3, r3, r2
 800f464:	42ab      	cmp	r3, r5
 800f466:	dc26      	bgt.n	800f4b6 <_printf_common+0x96>
 800f468:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f46c:	6822      	ldr	r2, [r4, #0]
 800f46e:	3b00      	subs	r3, #0
 800f470:	bf18      	it	ne
 800f472:	2301      	movne	r3, #1
 800f474:	0692      	lsls	r2, r2, #26
 800f476:	d42b      	bmi.n	800f4d0 <_printf_common+0xb0>
 800f478:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f47c:	4641      	mov	r1, r8
 800f47e:	4638      	mov	r0, r7
 800f480:	47c8      	blx	r9
 800f482:	3001      	adds	r0, #1
 800f484:	d01e      	beq.n	800f4c4 <_printf_common+0xa4>
 800f486:	6823      	ldr	r3, [r4, #0]
 800f488:	6922      	ldr	r2, [r4, #16]
 800f48a:	f003 0306 	and.w	r3, r3, #6
 800f48e:	2b04      	cmp	r3, #4
 800f490:	bf02      	ittt	eq
 800f492:	68e5      	ldreq	r5, [r4, #12]
 800f494:	6833      	ldreq	r3, [r6, #0]
 800f496:	1aed      	subeq	r5, r5, r3
 800f498:	68a3      	ldr	r3, [r4, #8]
 800f49a:	bf0c      	ite	eq
 800f49c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f4a0:	2500      	movne	r5, #0
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	bfc4      	itt	gt
 800f4a6:	1a9b      	subgt	r3, r3, r2
 800f4a8:	18ed      	addgt	r5, r5, r3
 800f4aa:	2600      	movs	r6, #0
 800f4ac:	341a      	adds	r4, #26
 800f4ae:	42b5      	cmp	r5, r6
 800f4b0:	d11a      	bne.n	800f4e8 <_printf_common+0xc8>
 800f4b2:	2000      	movs	r0, #0
 800f4b4:	e008      	b.n	800f4c8 <_printf_common+0xa8>
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	4652      	mov	r2, sl
 800f4ba:	4641      	mov	r1, r8
 800f4bc:	4638      	mov	r0, r7
 800f4be:	47c8      	blx	r9
 800f4c0:	3001      	adds	r0, #1
 800f4c2:	d103      	bne.n	800f4cc <_printf_common+0xac>
 800f4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4cc:	3501      	adds	r5, #1
 800f4ce:	e7c6      	b.n	800f45e <_printf_common+0x3e>
 800f4d0:	18e1      	adds	r1, r4, r3
 800f4d2:	1c5a      	adds	r2, r3, #1
 800f4d4:	2030      	movs	r0, #48	@ 0x30
 800f4d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f4da:	4422      	add	r2, r4
 800f4dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f4e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f4e4:	3302      	adds	r3, #2
 800f4e6:	e7c7      	b.n	800f478 <_printf_common+0x58>
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	4622      	mov	r2, r4
 800f4ec:	4641      	mov	r1, r8
 800f4ee:	4638      	mov	r0, r7
 800f4f0:	47c8      	blx	r9
 800f4f2:	3001      	adds	r0, #1
 800f4f4:	d0e6      	beq.n	800f4c4 <_printf_common+0xa4>
 800f4f6:	3601      	adds	r6, #1
 800f4f8:	e7d9      	b.n	800f4ae <_printf_common+0x8e>
	...

0800f4fc <_printf_i>:
 800f4fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f500:	7e0f      	ldrb	r7, [r1, #24]
 800f502:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f504:	2f78      	cmp	r7, #120	@ 0x78
 800f506:	4691      	mov	r9, r2
 800f508:	4680      	mov	r8, r0
 800f50a:	460c      	mov	r4, r1
 800f50c:	469a      	mov	sl, r3
 800f50e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f512:	d807      	bhi.n	800f524 <_printf_i+0x28>
 800f514:	2f62      	cmp	r7, #98	@ 0x62
 800f516:	d80a      	bhi.n	800f52e <_printf_i+0x32>
 800f518:	2f00      	cmp	r7, #0
 800f51a:	f000 80d1 	beq.w	800f6c0 <_printf_i+0x1c4>
 800f51e:	2f58      	cmp	r7, #88	@ 0x58
 800f520:	f000 80b8 	beq.w	800f694 <_printf_i+0x198>
 800f524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f528:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f52c:	e03a      	b.n	800f5a4 <_printf_i+0xa8>
 800f52e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f532:	2b15      	cmp	r3, #21
 800f534:	d8f6      	bhi.n	800f524 <_printf_i+0x28>
 800f536:	a101      	add	r1, pc, #4	@ (adr r1, 800f53c <_printf_i+0x40>)
 800f538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f53c:	0800f595 	.word	0x0800f595
 800f540:	0800f5a9 	.word	0x0800f5a9
 800f544:	0800f525 	.word	0x0800f525
 800f548:	0800f525 	.word	0x0800f525
 800f54c:	0800f525 	.word	0x0800f525
 800f550:	0800f525 	.word	0x0800f525
 800f554:	0800f5a9 	.word	0x0800f5a9
 800f558:	0800f525 	.word	0x0800f525
 800f55c:	0800f525 	.word	0x0800f525
 800f560:	0800f525 	.word	0x0800f525
 800f564:	0800f525 	.word	0x0800f525
 800f568:	0800f6a7 	.word	0x0800f6a7
 800f56c:	0800f5d3 	.word	0x0800f5d3
 800f570:	0800f661 	.word	0x0800f661
 800f574:	0800f525 	.word	0x0800f525
 800f578:	0800f525 	.word	0x0800f525
 800f57c:	0800f6c9 	.word	0x0800f6c9
 800f580:	0800f525 	.word	0x0800f525
 800f584:	0800f5d3 	.word	0x0800f5d3
 800f588:	0800f525 	.word	0x0800f525
 800f58c:	0800f525 	.word	0x0800f525
 800f590:	0800f669 	.word	0x0800f669
 800f594:	6833      	ldr	r3, [r6, #0]
 800f596:	1d1a      	adds	r2, r3, #4
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	6032      	str	r2, [r6, #0]
 800f59c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f5a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	e09c      	b.n	800f6e2 <_printf_i+0x1e6>
 800f5a8:	6833      	ldr	r3, [r6, #0]
 800f5aa:	6820      	ldr	r0, [r4, #0]
 800f5ac:	1d19      	adds	r1, r3, #4
 800f5ae:	6031      	str	r1, [r6, #0]
 800f5b0:	0606      	lsls	r6, r0, #24
 800f5b2:	d501      	bpl.n	800f5b8 <_printf_i+0xbc>
 800f5b4:	681d      	ldr	r5, [r3, #0]
 800f5b6:	e003      	b.n	800f5c0 <_printf_i+0xc4>
 800f5b8:	0645      	lsls	r5, r0, #25
 800f5ba:	d5fb      	bpl.n	800f5b4 <_printf_i+0xb8>
 800f5bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f5c0:	2d00      	cmp	r5, #0
 800f5c2:	da03      	bge.n	800f5cc <_printf_i+0xd0>
 800f5c4:	232d      	movs	r3, #45	@ 0x2d
 800f5c6:	426d      	negs	r5, r5
 800f5c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f5cc:	4858      	ldr	r0, [pc, #352]	@ (800f730 <_printf_i+0x234>)
 800f5ce:	230a      	movs	r3, #10
 800f5d0:	e011      	b.n	800f5f6 <_printf_i+0xfa>
 800f5d2:	6821      	ldr	r1, [r4, #0]
 800f5d4:	6833      	ldr	r3, [r6, #0]
 800f5d6:	0608      	lsls	r0, r1, #24
 800f5d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800f5dc:	d402      	bmi.n	800f5e4 <_printf_i+0xe8>
 800f5de:	0649      	lsls	r1, r1, #25
 800f5e0:	bf48      	it	mi
 800f5e2:	b2ad      	uxthmi	r5, r5
 800f5e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800f5e6:	4852      	ldr	r0, [pc, #328]	@ (800f730 <_printf_i+0x234>)
 800f5e8:	6033      	str	r3, [r6, #0]
 800f5ea:	bf14      	ite	ne
 800f5ec:	230a      	movne	r3, #10
 800f5ee:	2308      	moveq	r3, #8
 800f5f0:	2100      	movs	r1, #0
 800f5f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f5f6:	6866      	ldr	r6, [r4, #4]
 800f5f8:	60a6      	str	r6, [r4, #8]
 800f5fa:	2e00      	cmp	r6, #0
 800f5fc:	db05      	blt.n	800f60a <_printf_i+0x10e>
 800f5fe:	6821      	ldr	r1, [r4, #0]
 800f600:	432e      	orrs	r6, r5
 800f602:	f021 0104 	bic.w	r1, r1, #4
 800f606:	6021      	str	r1, [r4, #0]
 800f608:	d04b      	beq.n	800f6a2 <_printf_i+0x1a6>
 800f60a:	4616      	mov	r6, r2
 800f60c:	fbb5 f1f3 	udiv	r1, r5, r3
 800f610:	fb03 5711 	mls	r7, r3, r1, r5
 800f614:	5dc7      	ldrb	r7, [r0, r7]
 800f616:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f61a:	462f      	mov	r7, r5
 800f61c:	42bb      	cmp	r3, r7
 800f61e:	460d      	mov	r5, r1
 800f620:	d9f4      	bls.n	800f60c <_printf_i+0x110>
 800f622:	2b08      	cmp	r3, #8
 800f624:	d10b      	bne.n	800f63e <_printf_i+0x142>
 800f626:	6823      	ldr	r3, [r4, #0]
 800f628:	07df      	lsls	r7, r3, #31
 800f62a:	d508      	bpl.n	800f63e <_printf_i+0x142>
 800f62c:	6923      	ldr	r3, [r4, #16]
 800f62e:	6861      	ldr	r1, [r4, #4]
 800f630:	4299      	cmp	r1, r3
 800f632:	bfde      	ittt	le
 800f634:	2330      	movle	r3, #48	@ 0x30
 800f636:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f63a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f63e:	1b92      	subs	r2, r2, r6
 800f640:	6122      	str	r2, [r4, #16]
 800f642:	f8cd a000 	str.w	sl, [sp]
 800f646:	464b      	mov	r3, r9
 800f648:	aa03      	add	r2, sp, #12
 800f64a:	4621      	mov	r1, r4
 800f64c:	4640      	mov	r0, r8
 800f64e:	f7ff fee7 	bl	800f420 <_printf_common>
 800f652:	3001      	adds	r0, #1
 800f654:	d14a      	bne.n	800f6ec <_printf_i+0x1f0>
 800f656:	f04f 30ff 	mov.w	r0, #4294967295
 800f65a:	b004      	add	sp, #16
 800f65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f660:	6823      	ldr	r3, [r4, #0]
 800f662:	f043 0320 	orr.w	r3, r3, #32
 800f666:	6023      	str	r3, [r4, #0]
 800f668:	4832      	ldr	r0, [pc, #200]	@ (800f734 <_printf_i+0x238>)
 800f66a:	2778      	movs	r7, #120	@ 0x78
 800f66c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f670:	6823      	ldr	r3, [r4, #0]
 800f672:	6831      	ldr	r1, [r6, #0]
 800f674:	061f      	lsls	r7, r3, #24
 800f676:	f851 5b04 	ldr.w	r5, [r1], #4
 800f67a:	d402      	bmi.n	800f682 <_printf_i+0x186>
 800f67c:	065f      	lsls	r7, r3, #25
 800f67e:	bf48      	it	mi
 800f680:	b2ad      	uxthmi	r5, r5
 800f682:	6031      	str	r1, [r6, #0]
 800f684:	07d9      	lsls	r1, r3, #31
 800f686:	bf44      	itt	mi
 800f688:	f043 0320 	orrmi.w	r3, r3, #32
 800f68c:	6023      	strmi	r3, [r4, #0]
 800f68e:	b11d      	cbz	r5, 800f698 <_printf_i+0x19c>
 800f690:	2310      	movs	r3, #16
 800f692:	e7ad      	b.n	800f5f0 <_printf_i+0xf4>
 800f694:	4826      	ldr	r0, [pc, #152]	@ (800f730 <_printf_i+0x234>)
 800f696:	e7e9      	b.n	800f66c <_printf_i+0x170>
 800f698:	6823      	ldr	r3, [r4, #0]
 800f69a:	f023 0320 	bic.w	r3, r3, #32
 800f69e:	6023      	str	r3, [r4, #0]
 800f6a0:	e7f6      	b.n	800f690 <_printf_i+0x194>
 800f6a2:	4616      	mov	r6, r2
 800f6a4:	e7bd      	b.n	800f622 <_printf_i+0x126>
 800f6a6:	6833      	ldr	r3, [r6, #0]
 800f6a8:	6825      	ldr	r5, [r4, #0]
 800f6aa:	6961      	ldr	r1, [r4, #20]
 800f6ac:	1d18      	adds	r0, r3, #4
 800f6ae:	6030      	str	r0, [r6, #0]
 800f6b0:	062e      	lsls	r6, r5, #24
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	d501      	bpl.n	800f6ba <_printf_i+0x1be>
 800f6b6:	6019      	str	r1, [r3, #0]
 800f6b8:	e002      	b.n	800f6c0 <_printf_i+0x1c4>
 800f6ba:	0668      	lsls	r0, r5, #25
 800f6bc:	d5fb      	bpl.n	800f6b6 <_printf_i+0x1ba>
 800f6be:	8019      	strh	r1, [r3, #0]
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	6123      	str	r3, [r4, #16]
 800f6c4:	4616      	mov	r6, r2
 800f6c6:	e7bc      	b.n	800f642 <_printf_i+0x146>
 800f6c8:	6833      	ldr	r3, [r6, #0]
 800f6ca:	1d1a      	adds	r2, r3, #4
 800f6cc:	6032      	str	r2, [r6, #0]
 800f6ce:	681e      	ldr	r6, [r3, #0]
 800f6d0:	6862      	ldr	r2, [r4, #4]
 800f6d2:	2100      	movs	r1, #0
 800f6d4:	4630      	mov	r0, r6
 800f6d6:	f7f0 fe1b 	bl	8000310 <memchr>
 800f6da:	b108      	cbz	r0, 800f6e0 <_printf_i+0x1e4>
 800f6dc:	1b80      	subs	r0, r0, r6
 800f6de:	6060      	str	r0, [r4, #4]
 800f6e0:	6863      	ldr	r3, [r4, #4]
 800f6e2:	6123      	str	r3, [r4, #16]
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6ea:	e7aa      	b.n	800f642 <_printf_i+0x146>
 800f6ec:	6923      	ldr	r3, [r4, #16]
 800f6ee:	4632      	mov	r2, r6
 800f6f0:	4649      	mov	r1, r9
 800f6f2:	4640      	mov	r0, r8
 800f6f4:	47d0      	blx	sl
 800f6f6:	3001      	adds	r0, #1
 800f6f8:	d0ad      	beq.n	800f656 <_printf_i+0x15a>
 800f6fa:	6823      	ldr	r3, [r4, #0]
 800f6fc:	079b      	lsls	r3, r3, #30
 800f6fe:	d413      	bmi.n	800f728 <_printf_i+0x22c>
 800f700:	68e0      	ldr	r0, [r4, #12]
 800f702:	9b03      	ldr	r3, [sp, #12]
 800f704:	4298      	cmp	r0, r3
 800f706:	bfb8      	it	lt
 800f708:	4618      	movlt	r0, r3
 800f70a:	e7a6      	b.n	800f65a <_printf_i+0x15e>
 800f70c:	2301      	movs	r3, #1
 800f70e:	4632      	mov	r2, r6
 800f710:	4649      	mov	r1, r9
 800f712:	4640      	mov	r0, r8
 800f714:	47d0      	blx	sl
 800f716:	3001      	adds	r0, #1
 800f718:	d09d      	beq.n	800f656 <_printf_i+0x15a>
 800f71a:	3501      	adds	r5, #1
 800f71c:	68e3      	ldr	r3, [r4, #12]
 800f71e:	9903      	ldr	r1, [sp, #12]
 800f720:	1a5b      	subs	r3, r3, r1
 800f722:	42ab      	cmp	r3, r5
 800f724:	dcf2      	bgt.n	800f70c <_printf_i+0x210>
 800f726:	e7eb      	b.n	800f700 <_printf_i+0x204>
 800f728:	2500      	movs	r5, #0
 800f72a:	f104 0619 	add.w	r6, r4, #25
 800f72e:	e7f5      	b.n	800f71c <_printf_i+0x220>
 800f730:	0800ff0d 	.word	0x0800ff0d
 800f734:	0800ff1e 	.word	0x0800ff1e

0800f738 <__sflush_r>:
 800f738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f740:	0716      	lsls	r6, r2, #28
 800f742:	4605      	mov	r5, r0
 800f744:	460c      	mov	r4, r1
 800f746:	d454      	bmi.n	800f7f2 <__sflush_r+0xba>
 800f748:	684b      	ldr	r3, [r1, #4]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	dc02      	bgt.n	800f754 <__sflush_r+0x1c>
 800f74e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f750:	2b00      	cmp	r3, #0
 800f752:	dd48      	ble.n	800f7e6 <__sflush_r+0xae>
 800f754:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f756:	2e00      	cmp	r6, #0
 800f758:	d045      	beq.n	800f7e6 <__sflush_r+0xae>
 800f75a:	2300      	movs	r3, #0
 800f75c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f760:	682f      	ldr	r7, [r5, #0]
 800f762:	6a21      	ldr	r1, [r4, #32]
 800f764:	602b      	str	r3, [r5, #0]
 800f766:	d030      	beq.n	800f7ca <__sflush_r+0x92>
 800f768:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f76a:	89a3      	ldrh	r3, [r4, #12]
 800f76c:	0759      	lsls	r1, r3, #29
 800f76e:	d505      	bpl.n	800f77c <__sflush_r+0x44>
 800f770:	6863      	ldr	r3, [r4, #4]
 800f772:	1ad2      	subs	r2, r2, r3
 800f774:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f776:	b10b      	cbz	r3, 800f77c <__sflush_r+0x44>
 800f778:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f77a:	1ad2      	subs	r2, r2, r3
 800f77c:	2300      	movs	r3, #0
 800f77e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f780:	6a21      	ldr	r1, [r4, #32]
 800f782:	4628      	mov	r0, r5
 800f784:	47b0      	blx	r6
 800f786:	1c43      	adds	r3, r0, #1
 800f788:	89a3      	ldrh	r3, [r4, #12]
 800f78a:	d106      	bne.n	800f79a <__sflush_r+0x62>
 800f78c:	6829      	ldr	r1, [r5, #0]
 800f78e:	291d      	cmp	r1, #29
 800f790:	d82b      	bhi.n	800f7ea <__sflush_r+0xb2>
 800f792:	4a2a      	ldr	r2, [pc, #168]	@ (800f83c <__sflush_r+0x104>)
 800f794:	40ca      	lsrs	r2, r1
 800f796:	07d6      	lsls	r6, r2, #31
 800f798:	d527      	bpl.n	800f7ea <__sflush_r+0xb2>
 800f79a:	2200      	movs	r2, #0
 800f79c:	6062      	str	r2, [r4, #4]
 800f79e:	04d9      	lsls	r1, r3, #19
 800f7a0:	6922      	ldr	r2, [r4, #16]
 800f7a2:	6022      	str	r2, [r4, #0]
 800f7a4:	d504      	bpl.n	800f7b0 <__sflush_r+0x78>
 800f7a6:	1c42      	adds	r2, r0, #1
 800f7a8:	d101      	bne.n	800f7ae <__sflush_r+0x76>
 800f7aa:	682b      	ldr	r3, [r5, #0]
 800f7ac:	b903      	cbnz	r3, 800f7b0 <__sflush_r+0x78>
 800f7ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800f7b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f7b2:	602f      	str	r7, [r5, #0]
 800f7b4:	b1b9      	cbz	r1, 800f7e6 <__sflush_r+0xae>
 800f7b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f7ba:	4299      	cmp	r1, r3
 800f7bc:	d002      	beq.n	800f7c4 <__sflush_r+0x8c>
 800f7be:	4628      	mov	r0, r5
 800f7c0:	f7ff fca2 	bl	800f108 <_free_r>
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800f7c8:	e00d      	b.n	800f7e6 <__sflush_r+0xae>
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	4628      	mov	r0, r5
 800f7ce:	47b0      	blx	r6
 800f7d0:	4602      	mov	r2, r0
 800f7d2:	1c50      	adds	r0, r2, #1
 800f7d4:	d1c9      	bne.n	800f76a <__sflush_r+0x32>
 800f7d6:	682b      	ldr	r3, [r5, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d0c6      	beq.n	800f76a <__sflush_r+0x32>
 800f7dc:	2b1d      	cmp	r3, #29
 800f7de:	d001      	beq.n	800f7e4 <__sflush_r+0xac>
 800f7e0:	2b16      	cmp	r3, #22
 800f7e2:	d11e      	bne.n	800f822 <__sflush_r+0xea>
 800f7e4:	602f      	str	r7, [r5, #0]
 800f7e6:	2000      	movs	r0, #0
 800f7e8:	e022      	b.n	800f830 <__sflush_r+0xf8>
 800f7ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7ee:	b21b      	sxth	r3, r3
 800f7f0:	e01b      	b.n	800f82a <__sflush_r+0xf2>
 800f7f2:	690f      	ldr	r7, [r1, #16]
 800f7f4:	2f00      	cmp	r7, #0
 800f7f6:	d0f6      	beq.n	800f7e6 <__sflush_r+0xae>
 800f7f8:	0793      	lsls	r3, r2, #30
 800f7fa:	680e      	ldr	r6, [r1, #0]
 800f7fc:	bf08      	it	eq
 800f7fe:	694b      	ldreq	r3, [r1, #20]
 800f800:	600f      	str	r7, [r1, #0]
 800f802:	bf18      	it	ne
 800f804:	2300      	movne	r3, #0
 800f806:	eba6 0807 	sub.w	r8, r6, r7
 800f80a:	608b      	str	r3, [r1, #8]
 800f80c:	f1b8 0f00 	cmp.w	r8, #0
 800f810:	dde9      	ble.n	800f7e6 <__sflush_r+0xae>
 800f812:	6a21      	ldr	r1, [r4, #32]
 800f814:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f816:	4643      	mov	r3, r8
 800f818:	463a      	mov	r2, r7
 800f81a:	4628      	mov	r0, r5
 800f81c:	47b0      	blx	r6
 800f81e:	2800      	cmp	r0, #0
 800f820:	dc08      	bgt.n	800f834 <__sflush_r+0xfc>
 800f822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f82a:	81a3      	strh	r3, [r4, #12]
 800f82c:	f04f 30ff 	mov.w	r0, #4294967295
 800f830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f834:	4407      	add	r7, r0
 800f836:	eba8 0800 	sub.w	r8, r8, r0
 800f83a:	e7e7      	b.n	800f80c <__sflush_r+0xd4>
 800f83c:	20400001 	.word	0x20400001

0800f840 <_fflush_r>:
 800f840:	b538      	push	{r3, r4, r5, lr}
 800f842:	690b      	ldr	r3, [r1, #16]
 800f844:	4605      	mov	r5, r0
 800f846:	460c      	mov	r4, r1
 800f848:	b913      	cbnz	r3, 800f850 <_fflush_r+0x10>
 800f84a:	2500      	movs	r5, #0
 800f84c:	4628      	mov	r0, r5
 800f84e:	bd38      	pop	{r3, r4, r5, pc}
 800f850:	b118      	cbz	r0, 800f85a <_fflush_r+0x1a>
 800f852:	6a03      	ldr	r3, [r0, #32]
 800f854:	b90b      	cbnz	r3, 800f85a <_fflush_r+0x1a>
 800f856:	f7ff fa9f 	bl	800ed98 <__sinit>
 800f85a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d0f3      	beq.n	800f84a <_fflush_r+0xa>
 800f862:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f864:	07d0      	lsls	r0, r2, #31
 800f866:	d404      	bmi.n	800f872 <_fflush_r+0x32>
 800f868:	0599      	lsls	r1, r3, #22
 800f86a:	d402      	bmi.n	800f872 <_fflush_r+0x32>
 800f86c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f86e:	f7ff fbec 	bl	800f04a <__retarget_lock_acquire_recursive>
 800f872:	4628      	mov	r0, r5
 800f874:	4621      	mov	r1, r4
 800f876:	f7ff ff5f 	bl	800f738 <__sflush_r>
 800f87a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f87c:	07da      	lsls	r2, r3, #31
 800f87e:	4605      	mov	r5, r0
 800f880:	d4e4      	bmi.n	800f84c <_fflush_r+0xc>
 800f882:	89a3      	ldrh	r3, [r4, #12]
 800f884:	059b      	lsls	r3, r3, #22
 800f886:	d4e1      	bmi.n	800f84c <_fflush_r+0xc>
 800f888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f88a:	f7ff fbdf 	bl	800f04c <__retarget_lock_release_recursive>
 800f88e:	e7dd      	b.n	800f84c <_fflush_r+0xc>

0800f890 <__swbuf_r>:
 800f890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f892:	460e      	mov	r6, r1
 800f894:	4614      	mov	r4, r2
 800f896:	4605      	mov	r5, r0
 800f898:	b118      	cbz	r0, 800f8a2 <__swbuf_r+0x12>
 800f89a:	6a03      	ldr	r3, [r0, #32]
 800f89c:	b90b      	cbnz	r3, 800f8a2 <__swbuf_r+0x12>
 800f89e:	f7ff fa7b 	bl	800ed98 <__sinit>
 800f8a2:	69a3      	ldr	r3, [r4, #24]
 800f8a4:	60a3      	str	r3, [r4, #8]
 800f8a6:	89a3      	ldrh	r3, [r4, #12]
 800f8a8:	071a      	lsls	r2, r3, #28
 800f8aa:	d501      	bpl.n	800f8b0 <__swbuf_r+0x20>
 800f8ac:	6923      	ldr	r3, [r4, #16]
 800f8ae:	b943      	cbnz	r3, 800f8c2 <__swbuf_r+0x32>
 800f8b0:	4621      	mov	r1, r4
 800f8b2:	4628      	mov	r0, r5
 800f8b4:	f000 f82a 	bl	800f90c <__swsetup_r>
 800f8b8:	b118      	cbz	r0, 800f8c2 <__swbuf_r+0x32>
 800f8ba:	f04f 37ff 	mov.w	r7, #4294967295
 800f8be:	4638      	mov	r0, r7
 800f8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8c2:	6823      	ldr	r3, [r4, #0]
 800f8c4:	6922      	ldr	r2, [r4, #16]
 800f8c6:	1a98      	subs	r0, r3, r2
 800f8c8:	6963      	ldr	r3, [r4, #20]
 800f8ca:	b2f6      	uxtb	r6, r6
 800f8cc:	4283      	cmp	r3, r0
 800f8ce:	4637      	mov	r7, r6
 800f8d0:	dc05      	bgt.n	800f8de <__swbuf_r+0x4e>
 800f8d2:	4621      	mov	r1, r4
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	f7ff ffb3 	bl	800f840 <_fflush_r>
 800f8da:	2800      	cmp	r0, #0
 800f8dc:	d1ed      	bne.n	800f8ba <__swbuf_r+0x2a>
 800f8de:	68a3      	ldr	r3, [r4, #8]
 800f8e0:	3b01      	subs	r3, #1
 800f8e2:	60a3      	str	r3, [r4, #8]
 800f8e4:	6823      	ldr	r3, [r4, #0]
 800f8e6:	1c5a      	adds	r2, r3, #1
 800f8e8:	6022      	str	r2, [r4, #0]
 800f8ea:	701e      	strb	r6, [r3, #0]
 800f8ec:	6962      	ldr	r2, [r4, #20]
 800f8ee:	1c43      	adds	r3, r0, #1
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d004      	beq.n	800f8fe <__swbuf_r+0x6e>
 800f8f4:	89a3      	ldrh	r3, [r4, #12]
 800f8f6:	07db      	lsls	r3, r3, #31
 800f8f8:	d5e1      	bpl.n	800f8be <__swbuf_r+0x2e>
 800f8fa:	2e0a      	cmp	r6, #10
 800f8fc:	d1df      	bne.n	800f8be <__swbuf_r+0x2e>
 800f8fe:	4621      	mov	r1, r4
 800f900:	4628      	mov	r0, r5
 800f902:	f7ff ff9d 	bl	800f840 <_fflush_r>
 800f906:	2800      	cmp	r0, #0
 800f908:	d0d9      	beq.n	800f8be <__swbuf_r+0x2e>
 800f90a:	e7d6      	b.n	800f8ba <__swbuf_r+0x2a>

0800f90c <__swsetup_r>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	4b29      	ldr	r3, [pc, #164]	@ (800f9b4 <__swsetup_r+0xa8>)
 800f910:	4605      	mov	r5, r0
 800f912:	6818      	ldr	r0, [r3, #0]
 800f914:	460c      	mov	r4, r1
 800f916:	b118      	cbz	r0, 800f920 <__swsetup_r+0x14>
 800f918:	6a03      	ldr	r3, [r0, #32]
 800f91a:	b90b      	cbnz	r3, 800f920 <__swsetup_r+0x14>
 800f91c:	f7ff fa3c 	bl	800ed98 <__sinit>
 800f920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f924:	0719      	lsls	r1, r3, #28
 800f926:	d422      	bmi.n	800f96e <__swsetup_r+0x62>
 800f928:	06da      	lsls	r2, r3, #27
 800f92a:	d407      	bmi.n	800f93c <__swsetup_r+0x30>
 800f92c:	2209      	movs	r2, #9
 800f92e:	602a      	str	r2, [r5, #0]
 800f930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f934:	81a3      	strh	r3, [r4, #12]
 800f936:	f04f 30ff 	mov.w	r0, #4294967295
 800f93a:	e033      	b.n	800f9a4 <__swsetup_r+0x98>
 800f93c:	0758      	lsls	r0, r3, #29
 800f93e:	d512      	bpl.n	800f966 <__swsetup_r+0x5a>
 800f940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f942:	b141      	cbz	r1, 800f956 <__swsetup_r+0x4a>
 800f944:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f948:	4299      	cmp	r1, r3
 800f94a:	d002      	beq.n	800f952 <__swsetup_r+0x46>
 800f94c:	4628      	mov	r0, r5
 800f94e:	f7ff fbdb 	bl	800f108 <_free_r>
 800f952:	2300      	movs	r3, #0
 800f954:	6363      	str	r3, [r4, #52]	@ 0x34
 800f956:	89a3      	ldrh	r3, [r4, #12]
 800f958:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f95c:	81a3      	strh	r3, [r4, #12]
 800f95e:	2300      	movs	r3, #0
 800f960:	6063      	str	r3, [r4, #4]
 800f962:	6923      	ldr	r3, [r4, #16]
 800f964:	6023      	str	r3, [r4, #0]
 800f966:	89a3      	ldrh	r3, [r4, #12]
 800f968:	f043 0308 	orr.w	r3, r3, #8
 800f96c:	81a3      	strh	r3, [r4, #12]
 800f96e:	6923      	ldr	r3, [r4, #16]
 800f970:	b94b      	cbnz	r3, 800f986 <__swsetup_r+0x7a>
 800f972:	89a3      	ldrh	r3, [r4, #12]
 800f974:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f97c:	d003      	beq.n	800f986 <__swsetup_r+0x7a>
 800f97e:	4621      	mov	r1, r4
 800f980:	4628      	mov	r0, r5
 800f982:	f000 f83f 	bl	800fa04 <__smakebuf_r>
 800f986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f98a:	f013 0201 	ands.w	r2, r3, #1
 800f98e:	d00a      	beq.n	800f9a6 <__swsetup_r+0x9a>
 800f990:	2200      	movs	r2, #0
 800f992:	60a2      	str	r2, [r4, #8]
 800f994:	6962      	ldr	r2, [r4, #20]
 800f996:	4252      	negs	r2, r2
 800f998:	61a2      	str	r2, [r4, #24]
 800f99a:	6922      	ldr	r2, [r4, #16]
 800f99c:	b942      	cbnz	r2, 800f9b0 <__swsetup_r+0xa4>
 800f99e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f9a2:	d1c5      	bne.n	800f930 <__swsetup_r+0x24>
 800f9a4:	bd38      	pop	{r3, r4, r5, pc}
 800f9a6:	0799      	lsls	r1, r3, #30
 800f9a8:	bf58      	it	pl
 800f9aa:	6962      	ldrpl	r2, [r4, #20]
 800f9ac:	60a2      	str	r2, [r4, #8]
 800f9ae:	e7f4      	b.n	800f99a <__swsetup_r+0x8e>
 800f9b0:	2000      	movs	r0, #0
 800f9b2:	e7f7      	b.n	800f9a4 <__swsetup_r+0x98>
 800f9b4:	240001d0 	.word	0x240001d0

0800f9b8 <__swhatbuf_r>:
 800f9b8:	b570      	push	{r4, r5, r6, lr}
 800f9ba:	460c      	mov	r4, r1
 800f9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9c0:	2900      	cmp	r1, #0
 800f9c2:	b096      	sub	sp, #88	@ 0x58
 800f9c4:	4615      	mov	r5, r2
 800f9c6:	461e      	mov	r6, r3
 800f9c8:	da0d      	bge.n	800f9e6 <__swhatbuf_r+0x2e>
 800f9ca:	89a3      	ldrh	r3, [r4, #12]
 800f9cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f9d0:	f04f 0100 	mov.w	r1, #0
 800f9d4:	bf14      	ite	ne
 800f9d6:	2340      	movne	r3, #64	@ 0x40
 800f9d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f9dc:	2000      	movs	r0, #0
 800f9de:	6031      	str	r1, [r6, #0]
 800f9e0:	602b      	str	r3, [r5, #0]
 800f9e2:	b016      	add	sp, #88	@ 0x58
 800f9e4:	bd70      	pop	{r4, r5, r6, pc}
 800f9e6:	466a      	mov	r2, sp
 800f9e8:	f000 f848 	bl	800fa7c <_fstat_r>
 800f9ec:	2800      	cmp	r0, #0
 800f9ee:	dbec      	blt.n	800f9ca <__swhatbuf_r+0x12>
 800f9f0:	9901      	ldr	r1, [sp, #4]
 800f9f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f9f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f9fa:	4259      	negs	r1, r3
 800f9fc:	4159      	adcs	r1, r3
 800f9fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fa02:	e7eb      	b.n	800f9dc <__swhatbuf_r+0x24>

0800fa04 <__smakebuf_r>:
 800fa04:	898b      	ldrh	r3, [r1, #12]
 800fa06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa08:	079d      	lsls	r5, r3, #30
 800fa0a:	4606      	mov	r6, r0
 800fa0c:	460c      	mov	r4, r1
 800fa0e:	d507      	bpl.n	800fa20 <__smakebuf_r+0x1c>
 800fa10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fa14:	6023      	str	r3, [r4, #0]
 800fa16:	6123      	str	r3, [r4, #16]
 800fa18:	2301      	movs	r3, #1
 800fa1a:	6163      	str	r3, [r4, #20]
 800fa1c:	b003      	add	sp, #12
 800fa1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa20:	ab01      	add	r3, sp, #4
 800fa22:	466a      	mov	r2, sp
 800fa24:	f7ff ffc8 	bl	800f9b8 <__swhatbuf_r>
 800fa28:	9f00      	ldr	r7, [sp, #0]
 800fa2a:	4605      	mov	r5, r0
 800fa2c:	4639      	mov	r1, r7
 800fa2e:	4630      	mov	r0, r6
 800fa30:	f7ff f89a 	bl	800eb68 <_malloc_r>
 800fa34:	b948      	cbnz	r0, 800fa4a <__smakebuf_r+0x46>
 800fa36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa3a:	059a      	lsls	r2, r3, #22
 800fa3c:	d4ee      	bmi.n	800fa1c <__smakebuf_r+0x18>
 800fa3e:	f023 0303 	bic.w	r3, r3, #3
 800fa42:	f043 0302 	orr.w	r3, r3, #2
 800fa46:	81a3      	strh	r3, [r4, #12]
 800fa48:	e7e2      	b.n	800fa10 <__smakebuf_r+0xc>
 800fa4a:	89a3      	ldrh	r3, [r4, #12]
 800fa4c:	6020      	str	r0, [r4, #0]
 800fa4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa52:	81a3      	strh	r3, [r4, #12]
 800fa54:	9b01      	ldr	r3, [sp, #4]
 800fa56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fa5a:	b15b      	cbz	r3, 800fa74 <__smakebuf_r+0x70>
 800fa5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa60:	4630      	mov	r0, r6
 800fa62:	f000 f81d 	bl	800faa0 <_isatty_r>
 800fa66:	b128      	cbz	r0, 800fa74 <__smakebuf_r+0x70>
 800fa68:	89a3      	ldrh	r3, [r4, #12]
 800fa6a:	f023 0303 	bic.w	r3, r3, #3
 800fa6e:	f043 0301 	orr.w	r3, r3, #1
 800fa72:	81a3      	strh	r3, [r4, #12]
 800fa74:	89a3      	ldrh	r3, [r4, #12]
 800fa76:	431d      	orrs	r5, r3
 800fa78:	81a5      	strh	r5, [r4, #12]
 800fa7a:	e7cf      	b.n	800fa1c <__smakebuf_r+0x18>

0800fa7c <_fstat_r>:
 800fa7c:	b538      	push	{r3, r4, r5, lr}
 800fa7e:	4d07      	ldr	r5, [pc, #28]	@ (800fa9c <_fstat_r+0x20>)
 800fa80:	2300      	movs	r3, #0
 800fa82:	4604      	mov	r4, r0
 800fa84:	4608      	mov	r0, r1
 800fa86:	4611      	mov	r1, r2
 800fa88:	602b      	str	r3, [r5, #0]
 800fa8a:	f7f2 fcf5 	bl	8002478 <_fstat>
 800fa8e:	1c43      	adds	r3, r0, #1
 800fa90:	d102      	bne.n	800fa98 <_fstat_r+0x1c>
 800fa92:	682b      	ldr	r3, [r5, #0]
 800fa94:	b103      	cbz	r3, 800fa98 <_fstat_r+0x1c>
 800fa96:	6023      	str	r3, [r4, #0]
 800fa98:	bd38      	pop	{r3, r4, r5, pc}
 800fa9a:	bf00      	nop
 800fa9c:	24000898 	.word	0x24000898

0800faa0 <_isatty_r>:
 800faa0:	b538      	push	{r3, r4, r5, lr}
 800faa2:	4d06      	ldr	r5, [pc, #24]	@ (800fabc <_isatty_r+0x1c>)
 800faa4:	2300      	movs	r3, #0
 800faa6:	4604      	mov	r4, r0
 800faa8:	4608      	mov	r0, r1
 800faaa:	602b      	str	r3, [r5, #0]
 800faac:	f7f2 fcf4 	bl	8002498 <_isatty>
 800fab0:	1c43      	adds	r3, r0, #1
 800fab2:	d102      	bne.n	800faba <_isatty_r+0x1a>
 800fab4:	682b      	ldr	r3, [r5, #0]
 800fab6:	b103      	cbz	r3, 800faba <_isatty_r+0x1a>
 800fab8:	6023      	str	r3, [r4, #0]
 800faba:	bd38      	pop	{r3, r4, r5, pc}
 800fabc:	24000898 	.word	0x24000898

0800fac0 <_init>:
 800fac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fac2:	bf00      	nop
 800fac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fac6:	bc08      	pop	{r3}
 800fac8:	469e      	mov	lr, r3
 800faca:	4770      	bx	lr

0800facc <_fini>:
 800facc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800face:	bf00      	nop
 800fad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fad2:	bc08      	pop	{r3}
 800fad4:	469e      	mov	lr, r3
 800fad6:	4770      	bx	lr
