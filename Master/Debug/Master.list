
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff2c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  080101fc  080101fc  000111fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000012c2  08010658  08010658  00011658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000028  0801191c  0801191c  0001291c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  08011944  08011944  00012944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000010  0801194c  0801194c  0001294c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801195c  0801195c  0001295c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  24000000  08011960  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000868  24000220  08011b80  00013220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000a88  08011b80  00013a88  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00013220  2**0
                  CONTENTS, READONLY
 12 .debug_info   000325e6  00000000  00000000  0001324e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007608  00000000  00000000  00045834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002058  00000000  00000000  0004ce40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000182b  00000000  00000000  0004ee98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039070  00000000  00000000  000506c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b6c2  00000000  00000000  00089733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001720a1  00000000  00000000  000b4df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c2  00000000  00000000  00226e96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009184  00000000  00000000  00226f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  002300dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000220 	.word	0x24000220
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080101e4 	.word	0x080101e4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000224 	.word	0x24000224
 800030c:	080101e4 	.word	0x080101e4

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80003b6:	f001 fcf1 	bl	8001d9c <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003ba:	f002 fa77 	bl	80028ac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80003be:	f000 faef 	bl	80009a0 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80003c2:	f000 fb5b 	bl	8000a7c <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003c6:	f000 febf 	bl	8001148 <MX_GPIO_Init>
	MX_CRC_Init();
 80003ca:	f000 fcdd 	bl	8000d88 <MX_CRC_Init>
	MX_DMA2D_Init();
 80003ce:	f000 fcfd 	bl	8000dcc <MX_DMA2D_Init>
	MX_ADC1_Init();
 80003d2:	f000 fb83 	bl	8000adc <MX_ADC1_Init>
	MX_I2C1_Init();
 80003d6:	f000 fd33 	bl	8000e40 <MX_I2C1_Init>
	MX_SPI1_Init();
 80003da:	f000 fd71 	bl	8000ec0 <MX_SPI1_Init>
	MX_TIM2_Init();
 80003de:	f000 fdc7 	bl	8000f70 <MX_TIM2_Init>
	MX_TIM3_Init();
 80003e2:	f000 fe39 	bl	8001058 <MX_TIM3_Init>
	MX_ADC2_Init();
 80003e6:	f000 fbf3 	bl	8000bd0 <MX_ADC2_Init>
	MX_ADC3_Init();
 80003ea:	f000 fc59 	bl	8000ca0 <MX_ADC3_Init>
	/* USER CODE BEGIN 2 */
	serial_communication_variable_init();
 80003ee:	f001 fd07 	bl	8001e00 <serial_communication_variable_init>
	speed_joystickX = 0;
 80003f2:	4ba6      	ldr	r3, [pc, #664]	@ (800068c <main+0x2dc>)
 80003f4:	f04f 0200 	mov.w	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
	speed_joystickY = 0;
 80003fa:	4ba5      	ldr	r3, [pc, #660]	@ (8000690 <main+0x2e0>)
 80003fc:	f04f 0200 	mov.w	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
	speed_joystickZ = 0;
 8000402:	4ba4      	ldr	r3, [pc, #656]	@ (8000694 <main+0x2e4>)
 8000404:	f04f 0200 	mov.w	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
	speed_joystickT = 0;
 800040a:	4ba3      	ldr	r3, [pc, #652]	@ (8000698 <main+0x2e8>)
 800040c:	f04f 0200 	mov.w	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
	solenoid_tear_1_status = 0;
 8000412:	4ba2      	ldr	r3, [pc, #648]	@ (800069c <main+0x2ec>)
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
	solenoid_tear_2_status = 0;
 8000418:	4ba1      	ldr	r3, [pc, #644]	@ (80006a0 <main+0x2f0>)
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
	solenoid_tear_clamp_status = 0;
 800041e:	4ba1      	ldr	r3, [pc, #644]	@ (80006a4 <main+0x2f4>)
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
	solenoid_tear_lock_status = 0;
 8000424:	4ba0      	ldr	r3, [pc, #640]	@ (80006a8 <main+0x2f8>)
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
	control_mode = 0;
 800042a:	4ba0      	ldr	r3, [pc, #640]	@ (80006ac <main+0x2fc>)
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
	bond_power_now = 0;
 8000430:	4b9f      	ldr	r3, [pc, #636]	@ (80006b0 <main+0x300>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	bond_power_before = 0;
 8000436:	4b9f      	ldr	r3, [pc, #636]	@ (80006b4 <main+0x304>)
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]
	search_height_adj_1 = 0;
 800043c:	4b9e      	ldr	r3, [pc, #632]	@ (80006b8 <main+0x308>)
 800043e:	f04f 0200 	mov.w	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
	search_height_adj_2 = 0;
 8000444:	4b9d      	ldr	r3, [pc, #628]	@ (80006bc <main+0x30c>)
 8000446:	f04f 0200 	mov.w	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
	measured_temperature_gauge = 0;
 800044c:	4b9c      	ldr	r3, [pc, #624]	@ (80006c0 <main+0x310>)
 800044e:	f04f 0200 	mov.w	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
	debug_head_touched = 0;
 8000454:	4b9b      	ldr	r3, [pc, #620]	@ (80006c4 <main+0x314>)
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
	fine_adjustment = 0;
 800045a:	4b9b      	ldr	r3, [pc, #620]	@ (80006c8 <main+0x318>)
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]

	if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8000460:	489a      	ldr	r0, [pc, #616]	@ (80006cc <main+0x31c>)
 8000462:	f00b ffed 	bl	800c440 <HAL_TIM_Base_Start_IT>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <main+0xc0>
	{
		/* Starting Error */
		Error_Handler();
 800046c:	f001 fcc2 	bl	8001df4 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000470:	2108      	movs	r1, #8
 8000472:	4897      	ldr	r0, [pc, #604]	@ (80006d0 <main+0x320>)
 8000474:	f00c f92c 	bl	800c6d0 <HAL_TIM_PWM_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	//Disable the ultrasonic driver
		HAL_GPIO_WritePin(ULTRASONIC_ENABLE_GPIO_Port, ULTRASONIC_ENABLE_Pin, GPIO_PIN_SET);
 8000478:	2201      	movs	r2, #1
 800047a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800047e:	4895      	ldr	r0, [pc, #596]	@ (80006d4 <main+0x324>)
 8000480:	f005 fd4a 	bl	8005f18 <HAL_GPIO_WritePin>
	write_bond_power_to_trimmer(0);
 8000484:	2000      	movs	r0, #0
 8000486:	f001 fbf5 	bl	8001c74 <write_bond_power_to_trimmer>

	position_joystick = 0;
 800048a:	4b93      	ldr	r3, [pc, #588]	@ (80006d8 <main+0x328>)
 800048c:	f04f 0200 	mov.w	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
	ui32_to_f conv;
	//https://deepbluembedded.com/stm32-potentiometer-read-examples-single-multiple-potentiometers/
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 8000492:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000496:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800049a:	4890      	ldr	r0, [pc, #576]	@ (80006dc <main+0x32c>)
 800049c:	f004 fc24 	bl	8004ce8 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 80004a0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80004a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80004a8:	488d      	ldr	r0, [pc, #564]	@ (80006e0 <main+0x330>)
 80004aa:	f004 fc1d 	bl	8004ce8 <HAL_ADCEx_Calibration_Start>



	//Reset position at startup
	write_uint32_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_MODE, POS_MODE);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2105      	movs	r1, #5
 80004b2:	202c      	movs	r0, #44	@ 0x2c
 80004b4:	f001 fb82 	bl	8001bbc <write_uint32_to_slave>
	HAL_Delay(10);
 80004b8:	200a      	movs	r0, #10
 80004ba:	f002 fa89 	bl	80029d0 <HAL_Delay>
	write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, 0);
 80004be:	ed9f 0a89 	vldr	s0, [pc, #548]	@ 80006e4 <main+0x334>
 80004c2:	2100      	movs	r1, #0
 80004c4:	202c      	movs	r0, #44	@ 0x2c
 80004c6:	f001 fb55 	bl	8001b74 <write_float_to_slave>
	HAL_Delay(10);
 80004ca:	200a      	movs	r0, #10
 80004cc:	f002 fa80 	bl	80029d0 <HAL_Delay>

	write_uint32_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_MODE, SPD_MODE);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2105      	movs	r1, #5
 80004d4:	2028      	movs	r0, #40	@ 0x28
 80004d6:	f001 fb71 	bl	8001bbc <write_uint32_to_slave>
	HAL_Delay(10);
 80004da:	200a      	movs	r0, #10
 80004dc:	f002 fa78 	bl	80029d0 <HAL_Delay>
	write_float_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_SPEED, 0);
 80004e0:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 80006e4 <main+0x334>
 80004e4:	2101      	movs	r1, #1
 80004e6:	2028      	movs	r0, #40	@ 0x28
 80004e8:	f001 fb44 	bl	8001b74 <write_float_to_slave>
	HAL_Delay(10);
 80004ec:	200a      	movs	r0, #10
 80004ee:	f002 fa6f 	bl	80029d0 <HAL_Delay>

	write_uint32_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_MODE, SPD_MODE);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2105      	movs	r1, #5
 80004f6:	202a      	movs	r0, #42	@ 0x2a
 80004f8:	f001 fb60 	bl	8001bbc <write_uint32_to_slave>
	HAL_Delay(10);
 80004fc:	200a      	movs	r0, #10
 80004fe:	f002 fa67 	bl	80029d0 <HAL_Delay>
	write_float_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_SPEED, 0);
 8000502:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 80006e4 <main+0x334>
 8000506:	2101      	movs	r1, #1
 8000508:	202a      	movs	r0, #42	@ 0x2a
 800050a:	f001 fb33 	bl	8001b74 <write_float_to_slave>
	HAL_Delay(10);
 800050e:	200a      	movs	r0, #10
 8000510:	f002 fa5e 	bl	80029d0 <HAL_Delay>

	write_uint32_to_slave(ADDRESS_MOTOR_T, VIRTUAL_MEM_MODE, SPD_MODE);
 8000514:	2201      	movs	r2, #1
 8000516:	2105      	movs	r1, #5
 8000518:	202e      	movs	r0, #46	@ 0x2e
 800051a:	f001 fb4f 	bl	8001bbc <write_uint32_to_slave>
	HAL_Delay(10);
 800051e:	200a      	movs	r0, #10
 8000520:	f002 fa56 	bl	80029d0 <HAL_Delay>
	write_float_to_slave(ADDRESS_MOTOR_T, VIRTUAL_MEM_SPEED, 0);
 8000524:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 80006e4 <main+0x334>
 8000528:	2101      	movs	r1, #1
 800052a:	202e      	movs	r0, #46	@ 0x2e
 800052c:	f001 fb22 	bl	8001b74 <write_float_to_slave>
	HAL_Delay(10);
 8000530:	200a      	movs	r0, #10
 8000532:	f002 fa4d 	bl	80029d0 <HAL_Delay>
		//				prepare_WRITE_packet(tx_buffer, VIRTUAL_MEM_POSITION, descent_position.ui32);
		//				HAL_I2C_Master_Transmit_IT(&hi2c1, ADDRESS_MOTOR_Z, tx_buffer, MAX_COMM_BUFFER_SIZE);
		//				HAL_Delay(6000);

		//Keep the head raised
		debug_head_touched = HAL_GPIO_ReadPin(PLATFORM_TOUCH_GPIO_Port, PLATFORM_TOUCH_Pin);
 8000536:	2108      	movs	r1, #8
 8000538:	4866      	ldr	r0, [pc, #408]	@ (80006d4 <main+0x324>)
 800053a:	f005 fcd5 	bl	8005ee8 <HAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	461a      	mov	r2, r3
 8000542:	4b60      	ldr	r3, [pc, #384]	@ (80006c4 <main+0x314>)
 8000544:	601a      	str	r2, [r3, #0]
		//		HAL_Delay(100);
		//


		HAL_ADC_Start(&hadc1);
 8000546:	4865      	ldr	r0, [pc, #404]	@ (80006dc <main+0x32c>)
 8000548:	f002 ffbe 	bl	80034c8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 800054c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000550:	4862      	ldr	r0, [pc, #392]	@ (80006dc <main+0x32c>)
 8000552:	f003 f8b7 	bl	80036c4 <HAL_ADC_PollForConversion>
		ADC_raw[0] = HAL_ADC_GetValue(&hadc1);
 8000556:	4861      	ldr	r0, [pc, #388]	@ (80006dc <main+0x32c>)
 8000558:	f003 f9a8 	bl	80038ac <HAL_ADC_GetValue>
 800055c:	4603      	mov	r3, r0
 800055e:	4a62      	ldr	r2, [pc, #392]	@ (80006e8 <main+0x338>)
 8000560:	6013      	str	r3, [r2, #0]

		HAL_ADC_Start(&hadc3);
 8000562:	4862      	ldr	r0, [pc, #392]	@ (80006ec <main+0x33c>)
 8000564:	f002 ffb0 	bl	80034c8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, 1000);
 8000568:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800056c:	485f      	ldr	r0, [pc, #380]	@ (80006ec <main+0x33c>)
 800056e:	f003 f8a9 	bl	80036c4 <HAL_ADC_PollForConversion>
		ADC_raw[1] = HAL_ADC_GetValue(&hadc3);
 8000572:	485e      	ldr	r0, [pc, #376]	@ (80006ec <main+0x33c>)
 8000574:	f003 f99a 	bl	80038ac <HAL_ADC_GetValue>
 8000578:	4603      	mov	r3, r0
 800057a:	4a5b      	ldr	r2, [pc, #364]	@ (80006e8 <main+0x338>)
 800057c:	6053      	str	r3, [r2, #4]

		//Enable XY jog mode
		measure_joystick_and_send_to_slave();
 800057e:	f001 f8b3 	bl	80016e8 <measure_joystick_and_send_to_slave>

		// Execute this code


#if 1
		if(HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_RESET)
 8000582:	2180      	movs	r1, #128	@ 0x80
 8000584:	4853      	ldr	r0, [pc, #332]	@ (80006d4 <main+0x324>)
 8000586:	f005 fcaf 	bl	8005ee8 <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	f040 818d 	bne.w	80008ac <main+0x4fc>
		{

			fine_adjustment = 1;
 8000592:	4b4d      	ldr	r3, [pc, #308]	@ (80006c8 <main+0x318>)
 8000594:	2201      	movs	r2, #1
 8000596:	601a      	str	r2, [r3, #0]

			stage = 0; //For debug; TODO: remove in the future
 8000598:	4b55      	ldr	r3, [pc, #340]	@ (80006f0 <main+0x340>)
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
			// Wait for the user to release the button
			wait_for_button_release();
 800059e:	f001 fb57 	bl	8001c50 <wait_for_button_release>

			ui32_to_f descent_position;

			stage++; //For debug; TODO: remove
 80005a2:	4b53      	ldr	r3, [pc, #332]	@ (80006f0 <main+0x340>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	3301      	adds	r3, #1
 80005a8:	4a51      	ldr	r2, [pc, #324]	@ (80006f0 <main+0x340>)
 80005aa:	6013      	str	r3, [r2, #0]
			// First search descent
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, search_height_1);
 80005ac:	4b51      	ldr	r3, [pc, #324]	@ (80006f4 <main+0x344>)
 80005ae:	edd3 7a00 	vldr	s15, [r3]
 80005b2:	eeb0 0a67 	vmov.f32	s0, s15
 80005b6:	2100      	movs	r1, #0
 80005b8:	202c      	movs	r0, #44	@ 0x2c
 80005ba:	f001 fadb 	bl	8001b74 <write_float_to_slave>

			// Wait for the button to be pressed and released
			//wait_for_button_press();

#if 1
			stage++; //For debug; TODO: remove
 80005be:	4b4c      	ldr	r3, [pc, #304]	@ (80006f0 <main+0x340>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	4a4a      	ldr	r2, [pc, #296]	@ (80006f0 <main+0x340>)
 80005c6:	6013      	str	r3, [r2, #0]
			// Enter into jog mode (XY movement with joystick)
			enter_jog_mode();
 80005c8:	f001 f958 	bl	800187c <enter_jog_mode>
			// Wait for the user to release the button
			wait_for_button_release();
 80005cc:	f001 fb40 	bl	8001c50 <wait_for_button_release>
#else
			wait_for_button_press();
#endif

			stage++; //For debug; TODO: remove
 80005d0:	4b47      	ldr	r3, [pc, #284]	@ (80006f0 <main+0x340>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a46      	ldr	r2, [pc, #280]	@ (80006f0 <main+0x340>)
 80005d8:	6013      	str	r3, [r2, #0]
			//Start descending until touch with substrate
			head_touched = false;
 80005da:	4b47      	ldr	r3, [pc, #284]	@ (80006f8 <main+0x348>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
			//write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, -1);
			write_uint32_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_MODE, SPD_MODE);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2105      	movs	r1, #5
 80005e4:	202c      	movs	r0, #44	@ 0x2c
 80005e6:	f001 fae9 	bl	8001bbc <write_uint32_to_slave>
			HAL_Delay(10);
 80005ea:	200a      	movs	r0, #10
 80005ec:	f002 f9f0 	bl	80029d0 <HAL_Delay>
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_SPEED, -0.1);
 80005f0:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 80006fc <main+0x34c>
 80005f4:	2101      	movs	r1, #1
 80005f6:	202c      	movs	r0, #44	@ 0x2c
 80005f8:	f001 fabc 	bl	8001b74 <write_float_to_slave>
			HAL_Delay(10);
 80005fc:	200a      	movs	r0, #10
 80005fe:	f002 f9e7 	bl	80029d0 <HAL_Delay>
			while(!head_touched){__NOP();};
 8000602:	e000      	b.n	8000606 <main+0x256>
 8000604:	bf00      	nop
 8000606:	4b3c      	ldr	r3, [pc, #240]	@ (80006f8 <main+0x348>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	f083 0301 	eor.w	r3, r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	2b00      	cmp	r3, #0
 8000612:	d1f7      	bne.n	8000604 <main+0x254>

			stage++; //For debug; TODO: remove
 8000614:	4b36      	ldr	r3, [pc, #216]	@ (80006f0 <main+0x340>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	4a35      	ldr	r2, [pc, #212]	@ (80006f0 <main+0x340>)
 800061c:	6013      	str	r3, [r2, #0]
			//Lower the head a bit more
			data_ready = false;
 800061e:	4b38      	ldr	r3, [pc, #224]	@ (8000700 <main+0x350>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
			//HAL_I2C_Master_Receive_IT(&hi2c1, ADDRESS_MOTOR_Z, rx_buffer, MAX_COMM_BUFFER_SIZE);
			//while(!data_ready){__NOP();};
			//write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, read_position - further_descent);

			//HAL_Delay(5);
			prepare_STOP_packet(tx_buffer);
 8000624:	4837      	ldr	r0, [pc, #220]	@ (8000704 <main+0x354>)
 8000626:	f001 fbfd 	bl	8001e24 <prepare_STOP_packet>
			HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_MOTOR_Z, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 800062a:	2364      	movs	r3, #100	@ 0x64
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2307      	movs	r3, #7
 8000630:	4a34      	ldr	r2, [pc, #208]	@ (8000704 <main+0x354>)
 8000632:	212c      	movs	r1, #44	@ 0x2c
 8000634:	4834      	ldr	r0, [pc, #208]	@ (8000708 <main+0x358>)
 8000636:	f005 fd3f 	bl	80060b8 <HAL_I2C_Master_Transmit>

			// Open clamp solenoid
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_SET);
 800063a:	2201      	movs	r2, #1
 800063c:	2108      	movs	r1, #8
 800063e:	4833      	ldr	r0, [pc, #204]	@ (800070c <main+0x35c>)
 8000640:	f005 fc6a 	bl	8005f18 <HAL_GPIO_WritePin>


			stage++; //For debug; TODO: remove
 8000644:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <main+0x340>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	3301      	adds	r3, #1
 800064a:	4a29      	ldr	r2, [pc, #164]	@ (80006f0 <main+0x340>)
 800064c:	6013      	str	r3, [r2, #0]
			HAL_Delay(100);
 800064e:	2064      	movs	r0, #100	@ 0x64
 8000650:	f002 f9be 	bl	80029d0 <HAL_Delay>
			//Perform the bond
			perform_bond(bond_time_1);
 8000654:	4b2e      	ldr	r3, [pc, #184]	@ (8000710 <main+0x360>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f001 facf 	bl	8001bfc <perform_bond>
			HAL_Delay(100);
 800065e:	2064      	movs	r0, #100	@ 0x64
 8000660:	f002 f9b6 	bl	80029d0 <HAL_Delay>

			prepare_READ_packet(tx_buffer, VIRTUAL_MEM_POSITION_MEAS);
 8000664:	2103      	movs	r1, #3
 8000666:	4827      	ldr	r0, [pc, #156]	@ (8000704 <main+0x354>)
 8000668:	f001 fc1f 	bl	8001eaa <prepare_READ_packet>
			HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_MOTOR_Z, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 800066c:	2364      	movs	r3, #100	@ 0x64
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2307      	movs	r3, #7
 8000672:	4a24      	ldr	r2, [pc, #144]	@ (8000704 <main+0x354>)
 8000674:	212c      	movs	r1, #44	@ 0x2c
 8000676:	4824      	ldr	r0, [pc, #144]	@ (8000708 <main+0x358>)
 8000678:	f005 fd1e 	bl	80060b8 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive_IT(&hi2c1, ADDRESS_MOTOR_Z, rx_buffer, MAX_COMM_BUFFER_SIZE);
 800067c:	2307      	movs	r3, #7
 800067e:	4a25      	ldr	r2, [pc, #148]	@ (8000714 <main+0x364>)
 8000680:	212c      	movs	r1, #44	@ 0x2c
 8000682:	4821      	ldr	r0, [pc, #132]	@ (8000708 <main+0x358>)
 8000684:	f005 fe30 	bl	80062e8 <HAL_I2C_Master_Receive_IT>
			while(!data_ready){__NOP();};
 8000688:	e047      	b.n	800071a <main+0x36a>
 800068a:	bf00      	nop
 800068c:	240005c0 	.word	0x240005c0
 8000690:	240005c4 	.word	0x240005c4
 8000694:	240005c8 	.word	0x240005c8
 8000698:	240005cc 	.word	0x240005cc
 800069c:	240005d0 	.word	0x240005d0
 80006a0:	240005d4 	.word	0x240005d4
 80006a4:	240005d8 	.word	0x240005d8
 80006a8:	240005dc 	.word	0x240005dc
 80006ac:	240005fc 	.word	0x240005fc
 80006b0:	240005ec 	.word	0x240005ec
 80006b4:	240005ed 	.word	0x240005ed
 80006b8:	2400058c 	.word	0x2400058c
 80006bc:	24000590 	.word	0x24000590
 80006c0:	24000594 	.word	0x24000594
 80006c4:	24000598 	.word	0x24000598
 80006c8:	240005e8 	.word	0x240005e8
 80006cc:	240004f4 	.word	0x240004f4
 80006d0:	24000540 	.word	0x24000540
 80006d4:	58021400 	.word	0x58021400
 80006d8:	240005bc 	.word	0x240005bc
 80006dc:	2400023c 	.word	0x2400023c
 80006e0:	240002ac 	.word	0x240002ac
 80006e4:	00000000 	.word	0x00000000
 80006e8:	240005f0 	.word	0x240005f0
 80006ec:	2400031c 	.word	0x2400031c
 80006f0:	2400059c 	.word	0x2400059c
 80006f4:	24000000 	.word	0x24000000
 80006f8:	240005ac 	.word	0x240005ac
 80006fc:	bdcccccd 	.word	0xbdcccccd
 8000700:	240005ad 	.word	0x240005ad
 8000704:	24000678 	.word	0x24000678
 8000708:	24000418 	.word	0x24000418
 800070c:	58020400 	.word	0x58020400
 8000710:	24000010 	.word	0x24000010
 8000714:	24000680 	.word	0x24000680
 8000718:	bf00      	nop
 800071a:	4b8d      	ldr	r3, [pc, #564]	@ (8000950 <main+0x5a0>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	f083 0301 	eor.w	r3, r3, #1
 8000722:	b2db      	uxtb	r3, r3
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1f7      	bne.n	8000718 <main+0x368>

			//Go to loop height

			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, read_position + loop_height);
 8000728:	4b8a      	ldr	r3, [pc, #552]	@ (8000954 <main+0x5a4>)
 800072a:	ed93 7a00 	vldr	s14, [r3]
 800072e:	4b8a      	ldr	r3, [pc, #552]	@ (8000958 <main+0x5a8>)
 8000730:	edd3 7a00 	vldr	s15, [r3]
 8000734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000738:	eeb0 0a67 	vmov.f32	s0, s15
 800073c:	2100      	movs	r1, #0
 800073e:	202c      	movs	r0, #44	@ 0x2c
 8000740:	f001 fa18 	bl	8001b74 <write_float_to_slave>
			HAL_Delay(10);
 8000744:	200a      	movs	r0, #10
 8000746:	f002 f943 	bl	80029d0 <HAL_Delay>
			write_uint32_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_MODE, POS_MODE);
 800074a:	2200      	movs	r2, #0
 800074c:	2105      	movs	r1, #5
 800074e:	202c      	movs	r0, #44	@ 0x2c
 8000750:	f001 fa34 	bl	8001bbc <write_uint32_to_slave>

#if 1
			stage++; //For debug; TODO: remove
 8000754:	4b81      	ldr	r3, [pc, #516]	@ (800095c <main+0x5ac>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	4a80      	ldr	r2, [pc, #512]	@ (800095c <main+0x5ac>)
 800075c:	6013      	str	r3, [r2, #0]
			// Enter into jog mode (XY movement with joystick)
			enter_jog_mode();
 800075e:	f001 f88d 	bl	800187c <enter_jog_mode>
			// Wait for the user to release the button
			wait_for_button_release();
 8000762:	f001 fa75 	bl	8001c50 <wait_for_button_release>
#else
			wait_for_button_press();
#endif
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	2108      	movs	r1, #8
 800076a:	487d      	ldr	r0, [pc, #500]	@ (8000960 <main+0x5b0>)
 800076c:	f005 fbd4 	bl	8005f18 <HAL_GPIO_WritePin>
			//Go to search height 2
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, search_height_2);
 8000770:	4b7c      	ldr	r3, [pc, #496]	@ (8000964 <main+0x5b4>)
 8000772:	edd3 7a00 	vldr	s15, [r3]
 8000776:	eeb0 0a67 	vmov.f32	s0, s15
 800077a:	2100      	movs	r1, #0
 800077c:	202c      	movs	r0, #44	@ 0x2c
 800077e:	f001 f9f9 	bl	8001b74 <write_float_to_slave>
			HAL_Delay(100);
 8000782:	2064      	movs	r0, #100	@ 0x64
 8000784:	f002 f924 	bl	80029d0 <HAL_Delay>
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2108      	movs	r1, #8
 800078c:	4874      	ldr	r0, [pc, #464]	@ (8000960 <main+0x5b0>)
 800078e:	f005 fbc3 	bl	8005f18 <HAL_GPIO_WritePin>
			// Wait for the button to be pressed and released
			//wait_for_button_press();

#if 1
			stage++; //For debug; TODO: remove
 8000792:	4b72      	ldr	r3, [pc, #456]	@ (800095c <main+0x5ac>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	4a70      	ldr	r2, [pc, #448]	@ (800095c <main+0x5ac>)
 800079a:	6013      	str	r3, [r2, #0]
			// Enter into jog mode (XY movement with joystick)
			enter_jog_mode();
 800079c:	f001 f86e 	bl	800187c <enter_jog_mode>
			// Wait for the user to release the button
			wait_for_button_release();
 80007a0:	f001 fa56 	bl	8001c50 <wait_for_button_release>
			wait_for_button_press();
#endif


			//Start descending until touch with substrate
			head_touched = false;
 80007a4:	4b70      	ldr	r3, [pc, #448]	@ (8000968 <main+0x5b8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
			//write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, -1);

			write_uint32_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_MODE, SPD_MODE);
 80007aa:	2201      	movs	r2, #1
 80007ac:	2105      	movs	r1, #5
 80007ae:	202c      	movs	r0, #44	@ 0x2c
 80007b0:	f001 fa04 	bl	8001bbc <write_uint32_to_slave>
						HAL_Delay(10);
 80007b4:	200a      	movs	r0, #10
 80007b6:	f002 f90b 	bl	80029d0 <HAL_Delay>
						write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_SPEED, -0.1);
 80007ba:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 800096c <main+0x5bc>
 80007be:	2101      	movs	r1, #1
 80007c0:	202c      	movs	r0, #44	@ 0x2c
 80007c2:	f001 f9d7 	bl	8001b74 <write_float_to_slave>
						HAL_Delay(10);
 80007c6:	200a      	movs	r0, #10
 80007c8:	f002 f902 	bl	80029d0 <HAL_Delay>

			while(!head_touched){__NOP();};
 80007cc:	e000      	b.n	80007d0 <main+0x420>
 80007ce:	bf00      	nop
 80007d0:	4b65      	ldr	r3, [pc, #404]	@ (8000968 <main+0x5b8>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f083 0301 	eor.w	r3, r3, #1
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1f7      	bne.n	80007ce <main+0x41e>

			stage++; //For debug; TODO: remove
 80007de:	4b5f      	ldr	r3, [pc, #380]	@ (800095c <main+0x5ac>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	4a5d      	ldr	r2, [pc, #372]	@ (800095c <main+0x5ac>)
 80007e6:	6013      	str	r3, [r2, #0]
			//Lower the head a bit more
			data_ready = false;
 80007e8:	4b59      	ldr	r3, [pc, #356]	@ (8000950 <main+0x5a0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
//			HAL_I2C_Master_Receive_IT(&hi2c1, ADDRESS_MOTOR_Z, rx_buffer, MAX_COMM_BUFFER_SIZE);
//			while(!data_ready){__NOP();};
//			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, read_position - further_descent);

			//HAL_Delay(5);
			prepare_STOP_packet(tx_buffer);
 80007ee:	4860      	ldr	r0, [pc, #384]	@ (8000970 <main+0x5c0>)
 80007f0:	f001 fb18 	bl	8001e24 <prepare_STOP_packet>
			HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_MOTOR_Z, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 80007f4:	2364      	movs	r3, #100	@ 0x64
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2307      	movs	r3, #7
 80007fa:	4a5d      	ldr	r2, [pc, #372]	@ (8000970 <main+0x5c0>)
 80007fc:	212c      	movs	r1, #44	@ 0x2c
 80007fe:	485d      	ldr	r0, [pc, #372]	@ (8000974 <main+0x5c4>)
 8000800:	f005 fc5a 	bl	80060b8 <HAL_I2C_Master_Transmit>

			stage++; //For debug; TODO: remove
 8000804:	4b55      	ldr	r3, [pc, #340]	@ (800095c <main+0x5ac>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	4a54      	ldr	r2, [pc, #336]	@ (800095c <main+0x5ac>)
 800080c:	6013      	str	r3, [r2, #0]
			HAL_Delay(1000);
 800080e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000812:	f002 f8dd 	bl	80029d0 <HAL_Delay>
			//Perform the bond
			perform_bond(bond_time_2);
 8000816:	4b58      	ldr	r3, [pc, #352]	@ (8000978 <main+0x5c8>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f001 f9ee 	bl	8001bfc <perform_bond>
			HAL_GPIO_WritePin(SOLENOID_TEAR_2_GPIO_Port, SOLENOID_TEAR_2_Pin, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	2110      	movs	r1, #16
 8000824:	484e      	ldr	r0, [pc, #312]	@ (8000960 <main+0x5b0>)
 8000826:	f005 fb77 	bl	8005f18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000830:	4852      	ldr	r0, [pc, #328]	@ (800097c <main+0x5cc>)
 8000832:	f005 fb71 	bl	8005f18 <HAL_GPIO_WritePin>

			HAL_Delay(2000);
 8000836:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800083a:	f002 f8c9 	bl	80029d0 <HAL_Delay>

			stage++; //For debug; TODO: remove
 800083e:	4b47      	ldr	r3, [pc, #284]	@ (800095c <main+0x5ac>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	3301      	adds	r3, #1
 8000844:	4a45      	ldr	r2, [pc, #276]	@ (800095c <main+0x5ac>)
 8000846:	6013      	str	r3, [r2, #0]
			// Close clamp solenoid
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2108      	movs	r1, #8
 800084c:	4844      	ldr	r0, [pc, #272]	@ (8000960 <main+0x5b0>)
 800084e:	f005 fb63 	bl	8005f18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SOLENOID_TEAR_2_GPIO_Port, SOLENOID_TEAR_2_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2110      	movs	r1, #16
 8000856:	4842      	ldr	r0, [pc, #264]	@ (8000960 <main+0x5b0>)
 8000858:	f005 fb5e 	bl	8005f18 <HAL_GPIO_WritePin>

			stage++; //For debug; TODO: remove
 800085c:	4b3f      	ldr	r3, [pc, #252]	@ (800095c <main+0x5ac>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	4a3e      	ldr	r2, [pc, #248]	@ (800095c <main+0x5ac>)
 8000864:	6013      	str	r3, [r2, #0]
			// Go back up
			head_touched = false;
 8000866:	4b40      	ldr	r3, [pc, #256]	@ (8000968 <main+0x5b8>)
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]

			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, 0);
 800086c:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 8000980 <main+0x5d0>
 8000870:	2100      	movs	r1, #0
 8000872:	202c      	movs	r0, #44	@ 0x2c
 8000874:	f001 f97e 	bl	8001b74 <write_float_to_slave>
			HAL_Delay(10);
 8000878:	200a      	movs	r0, #10
 800087a:	f002 f8a9 	bl	80029d0 <HAL_Delay>
			write_uint32_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_MODE, POS_MODE);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	202c      	movs	r0, #44	@ 0x2c
 8000884:	f001 f99a 	bl	8001bbc <write_uint32_to_slave>

			HAL_Delay(1000);
 8000888:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800088c:	f002 f8a0 	bl	80029d0 <HAL_Delay>

			HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000896:	4839      	ldr	r0, [pc, #228]	@ (800097c <main+0x5cc>)
 8000898:	f005 fb3e 	bl	8005f18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2108      	movs	r1, #8
 80008a0:	482f      	ldr	r0, [pc, #188]	@ (8000960 <main+0x5b0>)
 80008a2:	f005 fb39 	bl	8005f18 <HAL_GPIO_WritePin>

			fine_adjustment = 0;
 80008a6:	4b37      	ldr	r3, [pc, #220]	@ (8000984 <main+0x5d4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
		}
#endif

#if 1
		if(solenoid_tear_1_status)
 80008ac:	4b36      	ldr	r3, [pc, #216]	@ (8000988 <main+0x5d8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d006      	beq.n	80008c2 <main+0x512>
			HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ba:	4830      	ldr	r0, [pc, #192]	@ (800097c <main+0x5cc>)
 80008bc:	f005 fb2c 	bl	8005f18 <HAL_GPIO_WritePin>
 80008c0:	e005      	b.n	80008ce <main+0x51e>
		else
			HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c8:	482c      	ldr	r0, [pc, #176]	@ (800097c <main+0x5cc>)
 80008ca:	f005 fb25 	bl	8005f18 <HAL_GPIO_WritePin>

		if(solenoid_tear_2_status)
 80008ce:	4b2f      	ldr	r3, [pc, #188]	@ (800098c <main+0x5dc>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d005      	beq.n	80008e2 <main+0x532>
			HAL_GPIO_WritePin(SOLENOID_TEAR_2_GPIO_Port, SOLENOID_TEAR_2_Pin, GPIO_PIN_SET);
 80008d6:	2201      	movs	r2, #1
 80008d8:	2110      	movs	r1, #16
 80008da:	4821      	ldr	r0, [pc, #132]	@ (8000960 <main+0x5b0>)
 80008dc:	f005 fb1c 	bl	8005f18 <HAL_GPIO_WritePin>
 80008e0:	e004      	b.n	80008ec <main+0x53c>
		else
			HAL_GPIO_WritePin(SOLENOID_TEAR_2_GPIO_Port, SOLENOID_TEAR_2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2110      	movs	r1, #16
 80008e6:	481e      	ldr	r0, [pc, #120]	@ (8000960 <main+0x5b0>)
 80008e8:	f005 fb16 	bl	8005f18 <HAL_GPIO_WritePin>

		if(solenoid_tear_clamp_status)
 80008ec:	4b28      	ldr	r3, [pc, #160]	@ (8000990 <main+0x5e0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d005      	beq.n	8000900 <main+0x550>
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	2108      	movs	r1, #8
 80008f8:	4819      	ldr	r0, [pc, #100]	@ (8000960 <main+0x5b0>)
 80008fa:	f005 fb0d 	bl	8005f18 <HAL_GPIO_WritePin>
 80008fe:	e004      	b.n	800090a <main+0x55a>
		else
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2108      	movs	r1, #8
 8000904:	4816      	ldr	r0, [pc, #88]	@ (8000960 <main+0x5b0>)
 8000906:	f005 fb07 	bl	8005f18 <HAL_GPIO_WritePin>

		if(solenoid_lock_status)
 800090a:	4b22      	ldr	r3, [pc, #136]	@ (8000994 <main+0x5e4>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d005      	beq.n	800091e <main+0x56e>
			HAL_GPIO_WritePin(SOLENOID_LOCK_GPIO_Port, SOLENOID_LOCK_Pin, GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2101      	movs	r1, #1
 8000916:	4820      	ldr	r0, [pc, #128]	@ (8000998 <main+0x5e8>)
 8000918:	f005 fafe 	bl	8005f18 <HAL_GPIO_WritePin>
 800091c:	e004      	b.n	8000928 <main+0x578>
		else
			HAL_GPIO_WritePin(SOLENOID_LOCK_GPIO_Port, SOLENOID_LOCK_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2101      	movs	r1, #1
 8000922:	481d      	ldr	r0, [pc, #116]	@ (8000998 <main+0x5e8>)
 8000924:	f005 faf8 	bl	8005f18 <HAL_GPIO_WritePin>

		if(lamp_status)
 8000928:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <main+0x5ec>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d005      	beq.n	800093c <main+0x58c>
			HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2102      	movs	r1, #2
 8000934:	4818      	ldr	r0, [pc, #96]	@ (8000998 <main+0x5e8>)
 8000936:	f005 faef 	bl	8005f18 <HAL_GPIO_WritePin>
 800093a:	e004      	b.n	8000946 <main+0x596>
		else
			HAL_GPIO_WritePin(LAMP_GPIO_Port, LAMP_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2102      	movs	r1, #2
 8000940:	4815      	ldr	r0, [pc, #84]	@ (8000998 <main+0x5e8>)
 8000942:	f005 fae9 	bl	8005f18 <HAL_GPIO_WritePin>
		//HAL_I2C_Master_Seq_Receive_IT(&hi2c1, ADDRESS_MOTOR_X, rx_buffer, MAX_COMM_BUFFER_SIZE, I2C_FIRST_AND_LAST_FRAME);

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_Delay(100);
 8000946:	2064      	movs	r0, #100	@ 0x64
 8000948:	f002 f842 	bl	80029d0 <HAL_Delay>
		debug_head_touched = HAL_GPIO_ReadPin(PLATFORM_TOUCH_GPIO_Port, PLATFORM_TOUCH_Pin);
 800094c:	e5f3      	b.n	8000536 <main+0x186>
 800094e:	bf00      	nop
 8000950:	240005ad 	.word	0x240005ad
 8000954:	240005a8 	.word	0x240005a8
 8000958:	24000008 	.word	0x24000008
 800095c:	2400059c 	.word	0x2400059c
 8000960:	58020400 	.word	0x58020400
 8000964:	24000004 	.word	0x24000004
 8000968:	240005ac 	.word	0x240005ac
 800096c:	bdcccccd 	.word	0xbdcccccd
 8000970:	24000678 	.word	0x24000678
 8000974:	24000418 	.word	0x24000418
 8000978:	24000014 	.word	0x24000014
 800097c:	58020800 	.word	0x58020800
 8000980:	00000000 	.word	0x00000000
 8000984:	240005e8 	.word	0x240005e8
 8000988:	240005d0 	.word	0x240005d0
 800098c:	240005d4 	.word	0x240005d4
 8000990:	240005d8 	.word	0x240005d8
 8000994:	240005e0 	.word	0x240005e0
 8000998:	58021400 	.word	0x58021400
 800099c:	240005e4 	.word	0x240005e4

080009a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b09c      	sub	sp, #112	@ 0x70
 80009a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009aa:	224c      	movs	r2, #76	@ 0x4c
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f00e fe0f 	bl	800f5d2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2220      	movs	r2, #32
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f00e fe09 	bl	800f5d2 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009c0:	2002      	movs	r0, #2
 80009c2:	f007 fd7b 	bl	80084bc <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000a78 <SystemClock_Config+0xd8>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	4a2a      	ldr	r2, [pc, #168]	@ (8000a78 <SystemClock_Config+0xd8>)
 80009d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009d4:	6193      	str	r3, [r2, #24]
 80009d6:	4b28      	ldr	r3, [pc, #160]	@ (8000a78 <SystemClock_Config+0xd8>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009e2:	bf00      	nop
 80009e4:	4b24      	ldr	r3, [pc, #144]	@ (8000a78 <SystemClock_Config+0xd8>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009f0:	d1f8      	bne.n	80009e4 <SystemClock_Config+0x44>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009f2:	2302      	movs	r3, #2
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009f6:	2301      	movs	r3, #1
 80009f8:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 80009fa:	2340      	movs	r3, #64	@ 0x40
 80009fc:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fe:	2302      	movs	r3, #2
 8000a00:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a02:	2300      	movs	r3, #0
 8000a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000a06:	2304      	movs	r3, #4
 8000a08:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a12:	2304      	movs	r3, #4
 8000a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a1a:	230c      	movs	r3, #12
 8000a1c:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f007 fd80 	bl	8008530 <HAL_RCC_OscConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000a36:	f001 f9dd 	bl	8001df4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3a:	233f      	movs	r3, #63	@ 0x3f
 8000a3c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a4a:	2340      	movs	r3, #64	@ 0x40
 8000a4c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a4e:	2340      	movs	r3, #64	@ 0x40
 8000a50:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a56:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a58:	2340      	movs	r3, #64	@ 0x40
 8000a5a:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2102      	movs	r1, #2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f008 f93f 	bl	8008ce4 <HAL_RCC_ClockConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0xd0>
	{
		Error_Handler();
 8000a6c:	f001 f9c2 	bl	8001df4 <Error_Handler>
	}
}
 8000a70:	bf00      	nop
 8000a72:	3770      	adds	r7, #112	@ 0x70
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	58024800 	.word	0x58024800

08000a7c <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b0ae      	sub	sp, #184	@ 0xb8
 8000a80:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a82:	463b      	mov	r3, r7
 8000a84:	22b8      	movs	r2, #184	@ 0xb8
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f00e fda2 	bl	800f5d2 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a8e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a92:	f04f 0300 	mov.w	r3, #0
 8000a96:	e9c7 2300 	strd	r2, r3, [r7]
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000a9e:	230c      	movs	r3, #12
 8000aa0:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000aae:	23c0      	movs	r3, #192	@ 0xc0
 8000ab0:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8000ab6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f008 fc83 	bl	80093d0 <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <PeriphCommonClock_Config+0x58>
	{
		Error_Handler();
 8000ad0:	f001 f990 	bl	8001df4 <Error_Handler>
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	37b8      	adds	r7, #184	@ 0xb8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	@ 0x30
 8000ae0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8000ae2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000aee:	463b      	mov	r3, r7
 8000af0:	2224      	movs	r2, #36	@ 0x24
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f00e fd6c 	bl	800f5d2 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000afa:	4b32      	ldr	r3, [pc, #200]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000afc:	4a32      	ldr	r2, [pc, #200]	@ (8000bc8 <MX_ADC1_Init+0xec>)
 8000afe:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b00:	4b30      	ldr	r3, [pc, #192]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000b06:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000b08:	221c      	movs	r2, #28
 8000b0a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b12:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000b14:	2204      	movs	r2, #4
 8000b16:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b18:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000b1e:	4b29      	ldr	r3, [pc, #164]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8000b24:	4b27      	ldr	r3, [pc, #156]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b2a:	4b26      	ldr	r3, [pc, #152]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b32:	4b24      	ldr	r3, [pc, #144]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b38:	4b22      	ldr	r3, [pc, #136]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc1.Init.OversamplingMode = DISABLE;
 8000b50:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	hadc1.Init.Oversampling.Ratio = 1;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b5e:	4819      	ldr	r0, [pc, #100]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000b60:	f002 faaa 	bl	80030b8 <HAL_ADC_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_ADC1_Init+0x92>
	{
		Error_Handler();
 8000b6a:	f001 f943 	bl	8001df4 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b76:	4619      	mov	r1, r3
 8000b78:	4812      	ldr	r0, [pc, #72]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000b7a:	f004 f94b 	bl	8004e14 <HAL_ADCEx_MultiModeConfigChannel>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 8000b84:	f001 f936 	bl	8001df4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000b88:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <MX_ADC1_Init+0xf0>)
 8000b8a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b8c:	2306      	movs	r3, #6
 8000b8e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b94:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b98:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba8:	463b      	mov	r3, r7
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_ADC1_Init+0xe8>)
 8000bae:	f003 f8d9 	bl	8003d64 <HAL_ADC_ConfigChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_ADC1_Init+0xe0>
	{
		Error_Handler();
 8000bb8:	f001 f91c 	bl	8001df4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	3730      	adds	r7, #48	@ 0x30
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2400023c 	.word	0x2400023c
 8000bc8:	40022000 	.word	0x40022000
 8000bcc:	08600004 	.word	0x08600004

08000bd0 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2224      	movs	r2, #36	@ 0x24
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f00e fcf8 	bl	800f5d2 <memset>

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8000be2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c94 <MX_ADC2_Init+0xc4>)
 8000be4:	4a2c      	ldr	r2, [pc, #176]	@ (8000c98 <MX_ADC2_Init+0xc8>)
 8000be6:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000be8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c94 <MX_ADC2_Init+0xc4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000bee:	4b29      	ldr	r3, [pc, #164]	@ (8000c94 <MX_ADC2_Init+0xc4>)
 8000bf0:	2208      	movs	r2, #8
 8000bf2:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bf4:	4b27      	ldr	r3, [pc, #156]	@ (8000c94 <MX_ADC2_Init+0xc4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bfa:	4b26      	ldr	r3, [pc, #152]	@ (8000c94 <MX_ADC2_Init+0xc4>)
 8000bfc:	2204      	movs	r2, #4
 8000bfe:	615a      	str	r2, [r3, #20]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c00:	4b24      	ldr	r3, [pc, #144]	@ (8000c94 <MX_ADC2_Init+0xc4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	761a      	strb	r2, [r3, #24]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000c06:	4b23      	ldr	r3, [pc, #140]	@ (8000c94 <MX_ADC2_Init+0xc4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	765a      	strb	r2, [r3, #25]
	hadc2.Init.NbrOfConversion = 1;
 8000c0c:	4b21      	ldr	r3, [pc, #132]	@ (8000c94 <MX_ADC2_Init+0xc4>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	61da      	str	r2, [r3, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c12:	4b20      	ldr	r3, [pc, #128]	@ (8000c94 <MX_ADC2_Init+0xc4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c94 <MX_ADC2_Init+0xc4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c20:	4b1c      	ldr	r3, [pc, #112]	@ (8000c94 <MX_ADC2_Init+0xc4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <MX_ADC2_Init+0xc4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <MX_ADC2_Init+0xc4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c32:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <MX_ADC2_Init+0xc4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc2.Init.OversamplingMode = DISABLE;
 8000c38:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <MX_ADC2_Init+0xc4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	hadc2.Init.Oversampling.Ratio = 1;
 8000c40:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <MX_ADC2_Init+0xc4>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c46:	4813      	ldr	r0, [pc, #76]	@ (8000c94 <MX_ADC2_Init+0xc4>)
 8000c48:	f002 fa36 	bl	80030b8 <HAL_ADC_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_ADC2_Init+0x86>
	{
		Error_Handler();
 8000c52:	f001 f8cf 	bl	8001df4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000c56:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <MX_ADC2_Init+0xcc>)
 8000c58:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c62:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c66:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4806      	ldr	r0, [pc, #24]	@ (8000c94 <MX_ADC2_Init+0xc4>)
 8000c7c:	f003 f872 	bl	8003d64 <HAL_ADC_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_ADC2_Init+0xba>
	{
		Error_Handler();
 8000c86:	f001 f8b5 	bl	8001df4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	@ 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	240002ac 	.word	0x240002ac
 8000c98:	40022100 	.word	0x40022100
 8000c9c:	14f00020 	.word	0x14f00020

08000ca0 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2224      	movs	r2, #36	@ 0x24
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f00e fc90 	bl	800f5d2 <memset>

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 8000cb2:	4b32      	ldr	r3, [pc, #200]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000cb4:	4a32      	ldr	r2, [pc, #200]	@ (8000d80 <MX_ADC3_Init+0xe0>)
 8000cb6:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cb8:	4b30      	ldr	r3, [pc, #192]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8000cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000cc0:	221c      	movs	r2, #28
 8000cc2:	609a      	str	r2, [r3, #8]
	hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cca:	4b2c      	ldr	r3, [pc, #176]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 8000cd6:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	761a      	strb	r2, [r3, #24]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8000cdc:	4b27      	ldr	r3, [pc, #156]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	765a      	strb	r2, [r3, #25]
	hadc3.Init.NbrOfConversion = 1;
 8000ce2:	4b26      	ldr	r3, [pc, #152]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	61da      	str	r2, [r3, #28]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ce8:	4b24      	ldr	r3, [pc, #144]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cf0:	4b22      	ldr	r3, [pc, #136]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc3.Init.OversamplingMode = DISABLE;
 8000d1c:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8000d24:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d2a:	4814      	ldr	r0, [pc, #80]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000d2c:	f002 f9c4 	bl	80030b8 <HAL_ADC_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC3_Init+0x9a>
	{
		Error_Handler();
 8000d36:	f001 f85d 	bl	8001df4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000d3a:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <MX_ADC3_Init+0xe4>)
 8000d3c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d3e:	2306      	movs	r3, #6
 8000d40:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d46:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d4a:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	@ (8000d7c <MX_ADC3_Init+0xdc>)
 8000d64:	f002 fffe 	bl	8003d64 <HAL_ADC_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_ADC3_Init+0xd2>
	{
		Error_Handler();
 8000d6e:	f001 f841 	bl	8001df4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	@ 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2400031c 	.word	0x2400031c
 8000d80:	58026000 	.word	0x58026000
 8000d84:	04300002 	.word	0x04300002

08000d88 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <MX_CRC_Init+0x3c>)
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc8 <MX_CRC_Init+0x40>)
 8000d90:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d92:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_CRC_Init+0x3c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <MX_CRC_Init+0x3c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_CRC_Init+0x3c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <MX_CRC_Init+0x3c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000daa:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <MX_CRC_Init+0x3c>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <MX_CRC_Init+0x3c>)
 8000db2:	f004 fa99 	bl	80052e8 <HAL_CRC_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 8000dbc:	f001 f81a 	bl	8001df4 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2400038c 	.word	0x2400038c
 8000dc8:	58024c00 	.word	0x58024c00

08000dcc <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <MX_DMA2D_Init+0x6c>)
 8000dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8000e3c <MX_DMA2D_Init+0x70>)
 8000dd4:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <MX_DMA2D_Init+0x6c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000ddc:	4b16      	ldr	r3, [pc, #88]	@ (8000e38 <MX_DMA2D_Init+0x6c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <MX_DMA2D_Init+0x6c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <MX_DMA2D_Init+0x6c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	645a      	str	r2, [r3, #68]	@ 0x44
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000dee:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <MX_DMA2D_Init+0x6c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	649a      	str	r2, [r3, #72]	@ 0x48
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000df4:	4b10      	ldr	r3, [pc, #64]	@ (8000e38 <MX_DMA2D_Init+0x6c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	64da      	str	r2, [r3, #76]	@ 0x4c
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <MX_DMA2D_Init+0x6c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	651a      	str	r2, [r3, #80]	@ 0x50
	hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000e00:	4b0d      	ldr	r3, [pc, #52]	@ (8000e38 <MX_DMA2D_Init+0x6c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	655a      	str	r2, [r3, #84]	@ 0x54
	hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <MX_DMA2D_Init+0x6c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	659a      	str	r2, [r3, #88]	@ 0x58
	hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <MX_DMA2D_Init+0x6c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	65da      	str	r2, [r3, #92]	@ 0x5c
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000e12:	4809      	ldr	r0, [pc, #36]	@ (8000e38 <MX_DMA2D_Init+0x6c>)
 8000e14:	f004 fdae 	bl	8005974 <HAL_DMA2D_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 8000e1e:	f000 ffe9 	bl	8001df4 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000e22:	2101      	movs	r1, #1
 8000e24:	4804      	ldr	r0, [pc, #16]	@ (8000e38 <MX_DMA2D_Init+0x6c>)
 8000e26:	f004 fe09 	bl	8005a3c <HAL_DMA2D_ConfigLayer>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_DMA2D_Init+0x68>
	{
		Error_Handler();
 8000e30:	f000 ffe0 	bl	8001df4 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	240003b0 	.word	0x240003b0
 8000e3c:	52001000 	.word	0x52001000

08000e40 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e46:	4a1c      	ldr	r2, [pc, #112]	@ (8000eb8 <MX_I2C1_Init+0x78>)
 8000e48:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10B0DCFB;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ebc <MX_I2C1_Init+0x7c>)
 8000e4e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000e50:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e56:	4b17      	ldr	r3, [pc, #92]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000e62:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e7a:	480e      	ldr	r0, [pc, #56]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e7c:	f005 f880 	bl	8005f80 <HAL_I2C_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8000e86:	f000 ffb5 	bl	8001df4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4809      	ldr	r0, [pc, #36]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000e8e:	f007 fa7d 	bl	800838c <HAL_I2CEx_ConfigAnalogFilter>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8000e98:	f000 ffac 	bl	8001df4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <MX_I2C1_Init+0x74>)
 8000ea0:	f007 fabf 	bl	8008422 <HAL_I2CEx_ConfigDigitalFilter>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8000eaa:	f000 ffa3 	bl	8001df4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	24000418 	.word	0x24000418
 8000eb8:	40005400 	.word	0x40005400
 8000ebc:	10b0dcfb 	.word	0x10b0dcfb

08000ec0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000ec4:	4b28      	ldr	r3, [pc, #160]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000ec6:	4a29      	ldr	r2, [pc, #164]	@ (8000f6c <MX_SPI1_Init+0xac>)
 8000ec8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eca:	4b27      	ldr	r3, [pc, #156]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000ecc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ed0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000ed2:	4b25      	ldr	r3, [pc, #148]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000ed4:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000ed8:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eda:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee0:	4b21      	ldr	r3, [pc, #132]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee6:	4b20      	ldr	r3, [pc, #128]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eec:	4b1e      	ldr	r3, [pc, #120]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000eee:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ef2:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000ef6:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000efa:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f02:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f08:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f14:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000f16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f1a:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	645a      	str	r2, [r3, #68]	@ 0x44
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f40:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	659a      	str	r2, [r3, #88]	@ 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <MX_SPI1_Init+0xa8>)
 8000f54:	f00a fe22 	bl	800bb9c <HAL_SPI_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_SPI1_Init+0xa2>
	{
		Error_Handler();
 8000f5e:	f000 ff49 	bl	8001df4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2400046c 	.word	0x2400046c
 8000f6c:	40013000 	.word	0x40013000

08000f70 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08e      	sub	sp, #56	@ 0x38
 8000f74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000f90:	463b      	mov	r3, r7
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]
 8000f9e:	615a      	str	r2, [r3, #20]
 8000fa0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000fa2:	4b2c      	ldr	r3, [pc, #176]	@ (8001054 <MX_TIM2_Init+0xe4>)
 8000fa4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fa8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 19200-1;
 8000faa:	4b2a      	ldr	r3, [pc, #168]	@ (8001054 <MX_TIM2_Init+0xe4>)
 8000fac:	f644 22ff 	movw	r2, #19199	@ 0x4aff
 8000fb0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb2:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <MX_TIM2_Init+0xe4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000-1;
 8000fb8:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <MX_TIM2_Init+0xe4>)
 8000fba:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000fbe:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc0:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <MX_TIM2_Init+0xe4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc6:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <MX_TIM2_Init+0xe4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fcc:	4821      	ldr	r0, [pc, #132]	@ (8001054 <MX_TIM2_Init+0xe4>)
 8000fce:	f00b f9e0 	bl	800c392 <HAL_TIM_Base_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM2_Init+0x6c>
	{
		Error_Handler();
 8000fd8:	f000 ff0c 	bl	8001df4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fe2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	481a      	ldr	r0, [pc, #104]	@ (8001054 <MX_TIM2_Init+0xe4>)
 8000fea:	f00b ff23 	bl	800ce34 <HAL_TIM_ConfigClockSource>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM2_Init+0x88>
	{
		Error_Handler();
 8000ff4:	f000 fefe 	bl	8001df4 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000ff8:	4816      	ldr	r0, [pc, #88]	@ (8001054 <MX_TIM2_Init+0xe4>)
 8000ffa:	f00b faa7 	bl	800c54c <HAL_TIM_OC_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM2_Init+0x98>
	{
		Error_Handler();
 8001004:	f000 fef6 	bl	8001df4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	480f      	ldr	r0, [pc, #60]	@ (8001054 <MX_TIM2_Init+0xe4>)
 8001018:	f00c fc72 	bl	800d900 <HAL_TIMEx_MasterConfigSynchronization>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM2_Init+0xb6>
	{
		Error_Handler();
 8001022:	f000 fee7 	bl	8001df4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001026:	2300      	movs	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001036:	463b      	mov	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_TIM2_Init+0xe4>)
 800103e:	f00b fd6b 	bl	800cb18 <HAL_TIM_OC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM2_Init+0xdc>
	{
		Error_Handler();
 8001048:	f000 fed4 	bl	8001df4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	3738      	adds	r7, #56	@ 0x38
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	240004f4 	.word	0x240004f4

08001058 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08e      	sub	sp, #56	@ 0x38
 800105c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001078:	463b      	mov	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]
 8001086:	615a      	str	r2, [r3, #20]
 8001088:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800108a:	4b2d      	ldr	r3, [pc, #180]	@ (8001140 <MX_TIM3_Init+0xe8>)
 800108c:	4a2d      	ldr	r2, [pc, #180]	@ (8001144 <MX_TIM3_Init+0xec>)
 800108e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 192-1;
 8001090:	4b2b      	ldr	r3, [pc, #172]	@ (8001140 <MX_TIM3_Init+0xe8>)
 8001092:	22bf      	movs	r2, #191	@ 0xbf
 8001094:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001096:	4b2a      	ldr	r3, [pc, #168]	@ (8001140 <MX_TIM3_Init+0xe8>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000-1;
 800109c:	4b28      	ldr	r3, [pc, #160]	@ (8001140 <MX_TIM3_Init+0xe8>)
 800109e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010a2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a4:	4b26      	ldr	r3, [pc, #152]	@ (8001140 <MX_TIM3_Init+0xe8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010aa:	4b25      	ldr	r3, [pc, #148]	@ (8001140 <MX_TIM3_Init+0xe8>)
 80010ac:	2280      	movs	r2, #128	@ 0x80
 80010ae:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010b0:	4823      	ldr	r0, [pc, #140]	@ (8001140 <MX_TIM3_Init+0xe8>)
 80010b2:	f00b f96e 	bl	800c392 <HAL_TIM_Base_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 80010bc:	f000 fe9a 	bl	8001df4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ca:	4619      	mov	r1, r3
 80010cc:	481c      	ldr	r0, [pc, #112]	@ (8001140 <MX_TIM3_Init+0xe8>)
 80010ce:	f00b feb1 	bl	800ce34 <HAL_TIM_ConfigClockSource>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 80010d8:	f000 fe8c 	bl	8001df4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010dc:	4818      	ldr	r0, [pc, #96]	@ (8001140 <MX_TIM3_Init+0xe8>)
 80010de:	f00b fa96 	bl	800c60e <HAL_TIM_PWM_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 80010e8:	f000 fe84 	bl	8001df4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	4811      	ldr	r0, [pc, #68]	@ (8001140 <MX_TIM3_Init+0xe8>)
 80010fc:	f00c fc00 	bl	800d900 <HAL_TIMEx_MasterConfigSynchronization>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 8001106:	f000 fe75 	bl	8001df4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110a:	2360      	movs	r3, #96	@ 0x60
 800110c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800111a:	463b      	mov	r3, r7
 800111c:	2208      	movs	r2, #8
 800111e:	4619      	mov	r1, r3
 8001120:	4807      	ldr	r0, [pc, #28]	@ (8001140 <MX_TIM3_Init+0xe8>)
 8001122:	f00b fd73 	bl	800cc0c <HAL_TIM_PWM_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 800112c:	f000 fe62 	bl	8001df4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001130:	4803      	ldr	r0, [pc, #12]	@ (8001140 <MX_TIM3_Init+0xe8>)
 8001132:	f001 f97d 	bl	8002430 <HAL_TIM_MspPostInit>

}
 8001136:	bf00      	nop
 8001138:	3738      	adds	r7, #56	@ 0x38
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	24000540 	.word	0x24000540
 8001144:	40000400 	.word	0x40000400

08001148 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08c      	sub	sp, #48	@ 0x30
 800114c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800115e:	4bbe      	ldr	r3, [pc, #760]	@ (8001458 <MX_GPIO_Init+0x310>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001164:	4abc      	ldr	r2, [pc, #752]	@ (8001458 <MX_GPIO_Init+0x310>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800116e:	4bba      	ldr	r3, [pc, #744]	@ (8001458 <MX_GPIO_Init+0x310>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	61bb      	str	r3, [r7, #24]
 800117a:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800117c:	4bb6      	ldr	r3, [pc, #728]	@ (8001458 <MX_GPIO_Init+0x310>)
 800117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001182:	4ab5      	ldr	r2, [pc, #724]	@ (8001458 <MX_GPIO_Init+0x310>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800118c:	4bb2      	ldr	r3, [pc, #712]	@ (8001458 <MX_GPIO_Init+0x310>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800119a:	4baf      	ldr	r3, [pc, #700]	@ (8001458 <MX_GPIO_Init+0x310>)
 800119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a0:	4aad      	ldr	r2, [pc, #692]	@ (8001458 <MX_GPIO_Init+0x310>)
 80011a2:	f043 0320 	orr.w	r3, r3, #32
 80011a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011aa:	4bab      	ldr	r3, [pc, #684]	@ (8001458 <MX_GPIO_Init+0x310>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b0:	f003 0320 	and.w	r3, r3, #32
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	4ba7      	ldr	r3, [pc, #668]	@ (8001458 <MX_GPIO_Init+0x310>)
 80011ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011be:	4aa6      	ldr	r2, [pc, #664]	@ (8001458 <MX_GPIO_Init+0x310>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011c8:	4ba3      	ldr	r3, [pc, #652]	@ (8001458 <MX_GPIO_Init+0x310>)
 80011ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	4ba0      	ldr	r3, [pc, #640]	@ (8001458 <MX_GPIO_Init+0x310>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011dc:	4a9e      	ldr	r2, [pc, #632]	@ (8001458 <MX_GPIO_Init+0x310>)
 80011de:	f043 0302 	orr.w	r3, r3, #2
 80011e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011e6:	4b9c      	ldr	r3, [pc, #624]	@ (8001458 <MX_GPIO_Init+0x310>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80011f4:	4b98      	ldr	r3, [pc, #608]	@ (8001458 <MX_GPIO_Init+0x310>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fa:	4a97      	ldr	r2, [pc, #604]	@ (8001458 <MX_GPIO_Init+0x310>)
 80011fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001200:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001204:	4b94      	ldr	r3, [pc, #592]	@ (8001458 <MX_GPIO_Init+0x310>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001212:	4b91      	ldr	r3, [pc, #580]	@ (8001458 <MX_GPIO_Init+0x310>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001218:	4a8f      	ldr	r2, [pc, #572]	@ (8001458 <MX_GPIO_Init+0x310>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001222:	4b8d      	ldr	r3, [pc, #564]	@ (8001458 <MX_GPIO_Init+0x310>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001236:	4889      	ldr	r0, [pc, #548]	@ (800145c <MX_GPIO_Init+0x314>)
 8001238:	f004 fe6e 	bl	8005f18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, SOLENOID_LOCK_Pin|LAMP_Pin|ULTRASONIC_ENABLE_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f241 0103 	movw	r1, #4099	@ 0x1003
 8001242:	4887      	ldr	r0, [pc, #540]	@ (8001460 <MX_GPIO_Init+0x318>)
 8001244:	f004 fe68 	bl	8005f18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	2108      	movs	r1, #8
 800124c:	4885      	ldr	r0, [pc, #532]	@ (8001464 <MX_GPIO_Init+0x31c>)
 800124e:	f004 fe63 	bl	8005f18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SOLENOID_CLAMP_Pin|SOLENOID_TEAR_2_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	2118      	movs	r1, #24
 8001256:	4884      	ldr	r0, [pc, #528]	@ (8001468 <MX_GPIO_Init+0x320>)
 8001258:	f004 fe5e 	bl	8005f18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800125c:	2304      	movs	r3, #4
 800125e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800126c:	2309      	movs	r3, #9
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4619      	mov	r1, r3
 8001276:	487d      	ldr	r0, [pc, #500]	@ (800146c <MX_GPIO_Init+0x324>)
 8001278:	f004 fc8e 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pins : HEATER_TEMP_Pin TOUCHSCREEN_Y_Pin TOUCHSCREEN_X_Pin */
	GPIO_InitStruct.Pin = HEATER_TEMP_Pin|TOUCHSCREEN_Y_Pin|TOUCHSCREEN_X_Pin;
 800127c:	230b      	movs	r3, #11
 800127e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001280:	2303      	movs	r3, #3
 8001282:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	4619      	mov	r1, r3
 800128e:	4877      	ldr	r0, [pc, #476]	@ (800146c <MX_GPIO_Init+0x324>)
 8001290:	f004 fc82 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE4 PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001294:	2370      	movs	r3, #112	@ 0x70
 8001296:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012a4:	230d      	movs	r3, #13
 80012a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	486f      	ldr	r0, [pc, #444]	@ (800146c <MX_GPIO_Init+0x324>)
 80012b0:	f004 fc72 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : SOLENOID_TEAR_1_Pin */
	GPIO_InitStruct.Pin = SOLENOID_TEAR_1_Pin;
 80012b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(SOLENOID_TEAR_1_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	4619      	mov	r1, r3
 80012cc:	4863      	ldr	r0, [pc, #396]	@ (800145c <MX_GPIO_Init+0x314>)
 80012ce:	f004 fc63 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pins : SOLENOID_LOCK_Pin LAMP_Pin ULTRASONIC_ENABLE_Pin */
	GPIO_InitStruct.Pin = SOLENOID_LOCK_Pin|LAMP_Pin|ULTRASONIC_ENABLE_Pin;
 80012d2:	f241 0303 	movw	r3, #4099	@ 0x1003
 80012d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	485d      	ldr	r0, [pc, #372]	@ (8001460 <MX_GPIO_Init+0x318>)
 80012ec:	f004 fc54 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : HEATER_Pin */
	GPIO_InitStruct.Pin = HEATER_Pin;
 80012f0:	2304      	movs	r3, #4
 80012f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012f8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	4856      	ldr	r0, [pc, #344]	@ (8001460 <MX_GPIO_Init+0x318>)
 8001306:	f004 fc47 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PLATFORM_TOUCH_Pin */
	GPIO_InitStruct.Pin = PLATFORM_TOUCH_Pin;
 800130a:	2308      	movs	r3, #8
 800130c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800130e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001312:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001314:	2301      	movs	r3, #1
 8001316:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(PLATFORM_TOUCH_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4850      	ldr	r0, [pc, #320]	@ (8001460 <MX_GPIO_Init+0x318>)
 8001320:	f004 fc3a 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULTRASONIC_CURRENT_Pin ULTRASONIC_VOLTAGE_Pin */
	GPIO_InitStruct.Pin = ULTRASONIC_CURRENT_Pin|ULTRASONIC_VOLTAGE_Pin;
 8001324:	2330      	movs	r3, #48	@ 0x30
 8001326:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001328:	2303      	movs	r3, #3
 800132a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	484a      	ldr	r0, [pc, #296]	@ (8001460 <MX_GPIO_Init+0x318>)
 8001338:	f004 fc2e 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pins : PF6 PF8 PF9 */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 800133c:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8001340:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800134e:	230a      	movs	r3, #10
 8001350:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	4841      	ldr	r0, [pc, #260]	@ (8001460 <MX_GPIO_Init+0x318>)
 800135a:	f004 fc1d 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_START_BOND_Pin */
	GPIO_InitStruct.Pin = BUTTON_START_BOND_Pin;
 800135e:	2380      	movs	r3, #128	@ 0x80
 8001360:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001366:	2301      	movs	r3, #1
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(BUTTON_START_BOND_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	483b      	ldr	r0, [pc, #236]	@ (8001460 <MX_GPIO_Init+0x318>)
 8001372:	f004 fc11 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PF10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001376:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800137a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001388:	2309      	movs	r3, #9
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4833      	ldr	r0, [pc, #204]	@ (8001460 <MX_GPIO_Init+0x318>)
 8001394:	f004 fc00 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001398:	2301      	movs	r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 80013a8:	230b      	movs	r3, #11
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	482a      	ldr	r0, [pc, #168]	@ (800145c <MX_GPIO_Init+0x314>)
 80013b4:	f004 fbf0 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013b8:	2302      	movs	r3, #2
 80013ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80013c8:	230a      	movs	r3, #10
 80013ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	4822      	ldr	r0, [pc, #136]	@ (800145c <MX_GPIO_Init+0x314>)
 80013d4:	f004 fbe0 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013d8:	2304      	movs	r3, #4
 80013da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 80013e8:	2304      	movs	r3, #4
 80013ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	481a      	ldr	r0, [pc, #104]	@ (800145c <MX_GPIO_Init+0x314>)
 80013f4:	f004 fbd0 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF12_OCTOSPIM_P1;
 8001408:	230c      	movs	r3, #12
 800140a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4814      	ldr	r0, [pc, #80]	@ (8001464 <MX_GPIO_Init+0x31c>)
 8001414:	f004 fbc0 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_CS_Pin */
	GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001418:	2308      	movs	r3, #8
 800141a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	480d      	ldr	r0, [pc, #52]	@ (8001464 <MX_GPIO_Init+0x31c>)
 8001430:	f004 fbb2 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 PA6 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10;
 8001434:	f44f 63ca 	mov.w	r3, #1616	@ 0x650
 8001438:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001446:	230d      	movs	r3, #13
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	4804      	ldr	r0, [pc, #16]	@ (8001464 <MX_GPIO_Init+0x31c>)
 8001452:	f004 fba1 	bl	8005b98 <HAL_GPIO_Init>
 8001456:	e00b      	b.n	8001470 <MX_GPIO_Init+0x328>
 8001458:	58024400 	.word	0x58024400
 800145c:	58020800 	.word	0x58020800
 8001460:	58021400 	.word	0x58021400
 8001464:	58020000 	.word	0x58020000
 8001468:	58020400 	.word	0x58020400
 800146c:	58021000 	.word	0x58021000

	/*Configure GPIO pins : PA7 PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12;
 8001470:	f44f 53c4 	mov.w	r3, #6272	@ 0x1880
 8001474:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001482:	230e      	movs	r3, #14
 8001484:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	4619      	mov	r1, r3
 800148c:	488f      	ldr	r0, [pc, #572]	@ (80016cc <MX_GPIO_Init+0x584>)
 800148e:	f004 fb83 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 PC6 PC7 PC10
                           PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10
 8001492:	f44f 53a7 	mov.w	r3, #5344	@ 0x14e0
 8001496:	61fb      	str	r3, [r7, #28]
			|GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014a4:	230e      	movs	r3, #14
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	4888      	ldr	r0, [pc, #544]	@ (80016d0 <MX_GPIO_Init+0x588>)
 80014b0:	f004 fb72 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80014c6:	230a      	movs	r3, #10
 80014c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	4880      	ldr	r0, [pc, #512]	@ (80016d4 <MX_GPIO_Init+0x58c>)
 80014d2:	f004 fb61 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 80014e8:	230b      	movs	r3, #11
 80014ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	4619      	mov	r1, r3
 80014f2:	4878      	ldr	r0, [pc, #480]	@ (80016d4 <MX_GPIO_Init+0x58c>)
 80014f4:	f004 fb50 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014fc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800150a:	230e      	movs	r3, #14
 800150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	486f      	ldr	r0, [pc, #444]	@ (80016d4 <MX_GPIO_Init+0x58c>)
 8001516:	f004 fb3f 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB11 PB8 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8;
 800151a:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 800151e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800152c:	230e      	movs	r3, #14
 800152e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	4868      	ldr	r0, [pc, #416]	@ (80016d8 <MX_GPIO_Init+0x590>)
 8001538:	f004 fb2e 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG6 PG7 PG8 */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800153c:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001540:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800154e:	230e      	movs	r3, #14
 8001550:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	4860      	ldr	r0, [pc, #384]	@ (80016dc <MX_GPIO_Init+0x594>)
 800155a:	f004 fb1d 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800155e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001562:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001570:	230d      	movs	r3, #13
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	4855      	ldr	r0, [pc, #340]	@ (80016d0 <MX_GPIO_Init+0x588>)
 800157c:	f004 fb0c 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001580:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001584:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001592:	230d      	movs	r3, #13
 8001594:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	484b      	ldr	r0, [pc, #300]	@ (80016cc <MX_GPIO_Init+0x584>)
 800159e:	f004 fafb 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015b4:	2309      	movs	r3, #9
 80015b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	4843      	ldr	r0, [pc, #268]	@ (80016cc <MX_GPIO_Init+0x584>)
 80015c0:	f004 faea 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015c4:	2304      	movs	r3, #4
 80015c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015d4:	2309      	movs	r3, #9
 80015d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	4840      	ldr	r0, [pc, #256]	@ (80016e0 <MX_GPIO_Init+0x598>)
 80015e0:	f004 fada 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015e4:	2308      	movs	r3, #8
 80015e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80015f4:	230d      	movs	r3, #13
 80015f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	4838      	ldr	r0, [pc, #224]	@ (80016e0 <MX_GPIO_Init+0x598>)
 8001600:	f004 faca 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001604:	2340      	movs	r3, #64	@ 0x40
 8001606:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001614:	230e      	movs	r3, #14
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	4830      	ldr	r0, [pc, #192]	@ (80016e0 <MX_GPIO_Init+0x598>)
 8001620:	f004 faba 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001624:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001628:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001636:	230d      	movs	r3, #13
 8001638:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	4826      	ldr	r0, [pc, #152]	@ (80016dc <MX_GPIO_Init+0x594>)
 8001642:	f004 faa9 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001646:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800164a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001658:	2309      	movs	r3, #9
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	481e      	ldr	r0, [pc, #120]	@ (80016dc <MX_GPIO_Init+0x594>)
 8001664:	f004 fa98 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pins : SOLENOID_CLAMP_Pin SOLENOID_TEAR_2_Pin */
	GPIO_InitStruct.Pin = SOLENOID_CLAMP_Pin|SOLENOID_TEAR_2_Pin;
 8001668:	2318      	movs	r3, #24
 800166a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	4816      	ldr	r0, [pc, #88]	@ (80016d8 <MX_GPIO_Init+0x590>)
 8001680:	f004 fa8a 	bl	8005b98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001684:	2320      	movs	r3, #32
 8001686:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF3_LTDC;
 8001694:	2303      	movs	r3, #3
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	4619      	mov	r1, r3
 800169e:	480e      	ldr	r0, [pc, #56]	@ (80016d8 <MX_GPIO_Init+0x590>)
 80016a0:	f004 fa7a 	bl	8005b98 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(HEATER_EXTI_IRQn, 0, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	2008      	movs	r0, #8
 80016aa:	f003 fd70 	bl	800518e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(HEATER_EXTI_IRQn);
 80016ae:	2008      	movs	r0, #8
 80016b0:	f003 fd87 	bl	80051c2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(PLATFORM_TOUCH_EXTI_IRQn, 0, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2100      	movs	r1, #0
 80016b8:	2009      	movs	r0, #9
 80016ba:	f003 fd68 	bl	800518e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(PLATFORM_TOUCH_EXTI_IRQn);
 80016be:	2009      	movs	r0, #9
 80016c0:	f003 fd7f 	bl	80051c2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80016c4:	bf00      	nop
 80016c6:	3730      	adds	r7, #48	@ 0x30
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	58020000 	.word	0x58020000
 80016d0:	58020800 	.word	0x58020800
 80016d4:	58021000 	.word	0x58021000
 80016d8:	58020400 	.word	0x58020400
 80016dc:	58021800 	.word	0x58021800
 80016e0:	58020c00 	.word	0x58020c00
 80016e4:	00000000 	.word	0x00000000

080016e8 <measure_joystick_and_send_to_slave>:

/* USER CODE BEGIN 4 */
void measure_joystick_and_send_to_slave(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
	float divider;
	ADC_valX = ADC_raw[0] - 127.5;
 80016ee:	4b58      	ldr	r3, [pc, #352]	@ (8001850 <measure_joystick_and_send_to_slave+0x168>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80016fa:	ed9f 6b53 	vldr	d6, [pc, #332]	@ 8001848 <measure_joystick_and_send_to_slave+0x160>
 80016fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001702:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001706:	4b53      	ldr	r3, [pc, #332]	@ (8001854 <measure_joystick_and_send_to_slave+0x16c>)
 8001708:	edc3 7a00 	vstr	s15, [r3]
	ADC_valY = ADC_raw[1] - 127.5;         // Read The ADC Conversion Result
 800170c:	4b50      	ldr	r3, [pc, #320]	@ (8001850 <measure_joystick_and_send_to_slave+0x168>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001718:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8001848 <measure_joystick_and_send_to_slave+0x160>
 800171c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001720:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001724:	4b4c      	ldr	r3, [pc, #304]	@ (8001858 <measure_joystick_and_send_to_slave+0x170>)
 8001726:	edc3 7a00 	vstr	s15, [r3]
	/*
	 * Fine: /250.0
	 * Coarse: /50.0
	 */
	if (fine_adjustment)
 800172a:	4b4c      	ldr	r3, [pc, #304]	@ (800185c <measure_joystick_and_send_to_slave+0x174>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <measure_joystick_and_send_to_slave+0x50>
		divider = 100.0;
 8001732:	4b4b      	ldr	r3, [pc, #300]	@ (8001860 <measure_joystick_and_send_to_slave+0x178>)
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	e002      	b.n	800173e <measure_joystick_and_send_to_slave+0x56>
	else
		divider = 1.0;
 8001738:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800173c:	607b      	str	r3, [r7, #4]

	if (fabs(ADC_valX) > 40)
 800173e:	4b45      	ldr	r3, [pc, #276]	@ (8001854 <measure_joystick_and_send_to_slave+0x16c>)
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	eef0 7ae7 	vabs.f32	s15, s15
 8001748:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001864 <measure_joystick_and_send_to_slave+0x17c>
 800174c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001754:	dd04      	ble.n	8001760 <measure_joystick_and_send_to_slave+0x78>
		speed_joystickX = ADC_valX;
 8001756:	4b3f      	ldr	r3, [pc, #252]	@ (8001854 <measure_joystick_and_send_to_slave+0x16c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a43      	ldr	r2, [pc, #268]	@ (8001868 <measure_joystick_and_send_to_slave+0x180>)
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e003      	b.n	8001768 <measure_joystick_and_send_to_slave+0x80>
	else
		speed_joystickX = 0;
 8001760:	4b41      	ldr	r3, [pc, #260]	@ (8001868 <measure_joystick_and_send_to_slave+0x180>)
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

	if (fabs(ADC_valY) > 40)
 8001768:	4b3b      	ldr	r3, [pc, #236]	@ (8001858 <measure_joystick_and_send_to_slave+0x170>)
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	eef0 7ae7 	vabs.f32	s15, s15
 8001772:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001864 <measure_joystick_and_send_to_slave+0x17c>
 8001776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177e:	dd04      	ble.n	800178a <measure_joystick_and_send_to_slave+0xa2>
		speed_joystickY = ADC_valY;
 8001780:	4b35      	ldr	r3, [pc, #212]	@ (8001858 <measure_joystick_and_send_to_slave+0x170>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a39      	ldr	r2, [pc, #228]	@ (800186c <measure_joystick_and_send_to_slave+0x184>)
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	e003      	b.n	8001792 <measure_joystick_and_send_to_slave+0xaa>
	else
		speed_joystickY = 0;
 800178a:	4b38      	ldr	r3, [pc, #224]	@ (800186c <measure_joystick_and_send_to_slave+0x184>)
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	601a      	str	r2, [r3, #0]

	speed_joystickT = speed_joystickX;
 8001792:	4b35      	ldr	r3, [pc, #212]	@ (8001868 <measure_joystick_and_send_to_slave+0x180>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a36      	ldr	r2, [pc, #216]	@ (8001870 <measure_joystick_and_send_to_slave+0x188>)
 8001798:	6013      	str	r3, [r2, #0]
	speed_joystickZ = speed_joystickY;
 800179a:	4b34      	ldr	r3, [pc, #208]	@ (800186c <measure_joystick_and_send_to_slave+0x184>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a35      	ldr	r2, [pc, #212]	@ (8001874 <measure_joystick_and_send_to_slave+0x18c>)
 80017a0:	6013      	str	r3, [r2, #0]

	switch (control_mode)
 80017a2:	4b35      	ldr	r3, [pc, #212]	@ (8001878 <measure_joystick_and_send_to_slave+0x190>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d038      	beq.n	800181c <measure_joystick_and_send_to_slave+0x134>
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d847      	bhi.n	800183e <measure_joystick_and_send_to_slave+0x156>
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <measure_joystick_and_send_to_slave+0xd0>
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d021      	beq.n	80017fa <measure_joystick_and_send_to_slave+0x112>
	case 2:
		write_float_to_slave(ADDRESS_MOTOR_T, VIRTUAL_MEM_SPEED, speed_joystickT / divider);
		HAL_Delay(10);
		break;
	}
}
 80017b6:	e042      	b.n	800183e <measure_joystick_and_send_to_slave+0x156>
		write_float_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_SPEED, speed_joystickX / divider);
 80017b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001868 <measure_joystick_and_send_to_slave+0x180>)
 80017ba:	ed93 7a00 	vldr	s14, [r3]
 80017be:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017c6:	eeb0 0a66 	vmov.f32	s0, s13
 80017ca:	2101      	movs	r1, #1
 80017cc:	2028      	movs	r0, #40	@ 0x28
 80017ce:	f000 f9d1 	bl	8001b74 <write_float_to_slave>
		HAL_Delay(10);
 80017d2:	200a      	movs	r0, #10
 80017d4:	f001 f8fc 	bl	80029d0 <HAL_Delay>
		write_float_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_SPEED, speed_joystickY / divider);
 80017d8:	4b24      	ldr	r3, [pc, #144]	@ (800186c <measure_joystick_and_send_to_slave+0x184>)
 80017da:	ed93 7a00 	vldr	s14, [r3]
 80017de:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017e6:	eeb0 0a66 	vmov.f32	s0, s13
 80017ea:	2101      	movs	r1, #1
 80017ec:	202a      	movs	r0, #42	@ 0x2a
 80017ee:	f000 f9c1 	bl	8001b74 <write_float_to_slave>
		HAL_Delay(10);
 80017f2:	200a      	movs	r0, #10
 80017f4:	f001 f8ec 	bl	80029d0 <HAL_Delay>
		break;
 80017f8:	e021      	b.n	800183e <measure_joystick_and_send_to_slave+0x156>
		write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_SPEED, speed_joystickZ / divider);
 80017fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <measure_joystick_and_send_to_slave+0x18c>)
 80017fc:	ed93 7a00 	vldr	s14, [r3]
 8001800:	edd7 7a01 	vldr	s15, [r7, #4]
 8001804:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001808:	eeb0 0a66 	vmov.f32	s0, s13
 800180c:	2101      	movs	r1, #1
 800180e:	202c      	movs	r0, #44	@ 0x2c
 8001810:	f000 f9b0 	bl	8001b74 <write_float_to_slave>
		HAL_Delay(10);
 8001814:	200a      	movs	r0, #10
 8001816:	f001 f8db 	bl	80029d0 <HAL_Delay>
		break;
 800181a:	e010      	b.n	800183e <measure_joystick_and_send_to_slave+0x156>
		write_float_to_slave(ADDRESS_MOTOR_T, VIRTUAL_MEM_SPEED, speed_joystickT / divider);
 800181c:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <measure_joystick_and_send_to_slave+0x188>)
 800181e:	ed93 7a00 	vldr	s14, [r3]
 8001822:	edd7 7a01 	vldr	s15, [r7, #4]
 8001826:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800182a:	eeb0 0a66 	vmov.f32	s0, s13
 800182e:	2101      	movs	r1, #1
 8001830:	202e      	movs	r0, #46	@ 0x2e
 8001832:	f000 f99f 	bl	8001b74 <write_float_to_slave>
		HAL_Delay(10);
 8001836:	200a      	movs	r0, #10
 8001838:	f001 f8ca 	bl	80029d0 <HAL_Delay>
		break;
 800183c:	bf00      	nop
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	00000000 	.word	0x00000000
 800184c:	405fe000 	.word	0x405fe000
 8001850:	240005f0 	.word	0x240005f0
 8001854:	240005b4 	.word	0x240005b4
 8001858:	240005b8 	.word	0x240005b8
 800185c:	240005e8 	.word	0x240005e8
 8001860:	42c80000 	.word	0x42c80000
 8001864:	42200000 	.word	0x42200000
 8001868:	240005c0 	.word	0x240005c0
 800186c:	240005c4 	.word	0x240005c4
 8001870:	240005cc 	.word	0x240005cc
 8001874:	240005c8 	.word	0x240005c8
 8001878:	240005fc 	.word	0x240005fc

0800187c <enter_jog_mode>:

// Enter into jog mode (XY movement with joystick)
void enter_jog_mode(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	//	write_uint32_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_MODE, SPD_MODE);
	//	write_uint32_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_MODE, SPD_MODE);
	while (HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_SET)
 8001880:	e01d      	b.n	80018be <enter_jog_mode+0x42>
	{
		HAL_ADC_Start(&hadc1);
 8001882:	4814      	ldr	r0, [pc, #80]	@ (80018d4 <enter_jog_mode+0x58>)
 8001884:	f001 fe20 	bl	80034c8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8001888:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800188c:	4811      	ldr	r0, [pc, #68]	@ (80018d4 <enter_jog_mode+0x58>)
 800188e:	f001 ff19 	bl	80036c4 <HAL_ADC_PollForConversion>
		ADC_raw[0] = HAL_ADC_GetValue(&hadc1);
 8001892:	4810      	ldr	r0, [pc, #64]	@ (80018d4 <enter_jog_mode+0x58>)
 8001894:	f002 f80a 	bl	80038ac <HAL_ADC_GetValue>
 8001898:	4603      	mov	r3, r0
 800189a:	4a0f      	ldr	r2, [pc, #60]	@ (80018d8 <enter_jog_mode+0x5c>)
 800189c:	6013      	str	r3, [r2, #0]

		HAL_ADC_Start(&hadc3);
 800189e:	480f      	ldr	r0, [pc, #60]	@ (80018dc <enter_jog_mode+0x60>)
 80018a0:	f001 fe12 	bl	80034c8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, 1000);
 80018a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018a8:	480c      	ldr	r0, [pc, #48]	@ (80018dc <enter_jog_mode+0x60>)
 80018aa:	f001 ff0b 	bl	80036c4 <HAL_ADC_PollForConversion>
		ADC_raw[1] = HAL_ADC_GetValue(&hadc3);
 80018ae:	480b      	ldr	r0, [pc, #44]	@ (80018dc <enter_jog_mode+0x60>)
 80018b0:	f001 fffc 	bl	80038ac <HAL_ADC_GetValue>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a08      	ldr	r2, [pc, #32]	@ (80018d8 <enter_jog_mode+0x5c>)
 80018b8:	6053      	str	r3, [r2, #4]

		//Enable XY jog mode
		measure_joystick_and_send_to_slave();
 80018ba:	f7ff ff15 	bl	80016e8 <measure_joystick_and_send_to_slave>
	while (HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_SET)
 80018be:	2180      	movs	r1, #128	@ 0x80
 80018c0:	4807      	ldr	r0, [pc, #28]	@ (80018e0 <enter_jog_mode+0x64>)
 80018c2:	f004 fb11 	bl	8005ee8 <HAL_GPIO_ReadPin>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d0da      	beq.n	8001882 <enter_jog_mode+0x6>
		//measure_joystick_and_send_to_slave();
		//HAL_Delay(100);
	}
	//write_uint32_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_MODE, POS_MODE);
	//write_uint32_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_MODE, POS_MODE);
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2400023c 	.word	0x2400023c
 80018d8:	240005f0 	.word	0x240005f0
 80018dc:	2400031c 	.word	0x2400031c
 80018e0:	58021400 	.word	0x58021400

080018e4 <read_temp_from_ADC>:
uint32_t index1=0, index2=1;
int32_t feedback_pred =0;


float read_temp_from_ADC(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
	uint32_t ADC_value;

	ADC_value = HAL_ADC_GetValue(&hadc2);
 80018ea:	4823      	ldr	r0, [pc, #140]	@ (8001978 <read_temp_from_ADC+0x94>)
 80018ec:	f001 ffde 	bl	80038ac <HAL_ADC_GetValue>
 80018f0:	60f8      	str	r0, [r7, #12]

	if (ADC_value < ADC_MIN)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 80018f8:	d203      	bcs.n	8001902 <read_temp_from_ADC+0x1e>
	{
		ADC_value = ADC_MIN;
 80018fa:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	e006      	b.n	8001910 <read_temp_from_ADC+0x2c>
	}
	else if (ADC_value > ADC_MAX)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f5b3 6f58 	cmp.w	r3, #3456	@ 0xd80
 8001908:	d902      	bls.n	8001910 <read_temp_from_ADC+0x2c>
	{
		ADC_value = ADC_MAX;
 800190a:	f44f 6358 	mov.w	r3, #3456	@ 0xd80
 800190e:	60fb      	str	r3, [r7, #12]

	//Read_temp = Tlook[ADC_value - 195];  //209

	// Interpolating...

	int16_t adc_index = (ADC_value >> DECIMATION) - (ADC_MIN >> DECIMATION);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	095b      	lsrs	r3, r3, #5
 8001914:	b29b      	uxth	r3, r3
 8001916:	3b09      	subs	r3, #9
 8001918:	b29b      	uxth	r3, r3
 800191a:	817b      	strh	r3, [r7, #10]

	int32_t delta_T = Tlook[adc_index + 1] - Tlook[adc_index];
 800191c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001920:	3301      	adds	r3, #1
 8001922:	4a16      	ldr	r2, [pc, #88]	@ (800197c <read_temp_from_ADC+0x98>)
 8001924:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001928:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800192c:	4913      	ldr	r1, [pc, #76]	@ (800197c <read_temp_from_ADC+0x98>)
 800192e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	607b      	str	r3, [r7, #4]

	int16_t delta_ADC = ADC_value - ((adc_index + (ADC_MIN >> DECIMATION)) << DECIMATION);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	b29a      	uxth	r2, r3
 800193a:	897b      	ldrh	r3, [r7, #10]
 800193c:	3309      	adds	r3, #9
 800193e:	b29b      	uxth	r3, r3
 8001940:	015b      	lsls	r3, r3, #5
 8001942:	b29b      	uxth	r3, r3
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	b29b      	uxth	r3, r3
 8001948:	807b      	strh	r3, [r7, #2]

	return ((delta_T * delta_ADC) + (Tlook[adc_index] << DECIMATION)) >> DECIMATION;
 800194a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	fb03 f202 	mul.w	r2, r3, r2
 8001954:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001958:	4908      	ldr	r1, [pc, #32]	@ (800197c <read_temp_from_ADC+0x98>)
 800195a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800195e:	015b      	lsls	r3, r3, #5
 8001960:	4413      	add	r3, r2
 8001962:	115b      	asrs	r3, r3, #5
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800196c:	eeb0 0a67 	vmov.f32	s0, s15
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	240002ac 	.word	0x240002ac
 800197c:	2400001c 	.word	0x2400001c

08001980 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	@ 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	int32_t Read_temp, PI_error, PI_output, integral = 0, proportional, PI_prev_error = 0, limMaxInt = 0, limMinInt = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
 800198c:	2300      	movs	r3, #0
 800198e:	61bb      	str	r3, [r7, #24]
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]

	if(htim == &htim2) {
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a66      	ldr	r2, [pc, #408]	@ (8001b34 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	f040 80c4 	bne.w	8001b2a <HAL_TIM_PeriodElapsedCallback+0x1aa>
		/* Read ADC */
		HAL_ADC_Start(&hadc2);
 80019a2:	4865      	ldr	r0, [pc, #404]	@ (8001b38 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80019a4:	f001 fd90 	bl	80034c8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 1000);
 80019a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019ac:	4862      	ldr	r0, [pc, #392]	@ (8001b38 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80019ae:	f001 fe89 	bl	80036c4 <HAL_ADC_PollForConversion>
		Read_temp = read_temp_from_ADC();
 80019b2:	f7ff ff97 	bl	80018e4 <read_temp_from_ADC>
 80019b6:	eef0 7a40 	vmov.f32	s15, s0
 80019ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019be:	ee17 3a90 	vmov	r3, s15
 80019c2:	613b      	str	r3, [r7, #16]
		HAL_ADC_Stop(&hadc2);
 80019c4:	485c      	ldr	r0, [pc, #368]	@ (8001b38 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80019c6:	f001 fe49 	bl	800365c <HAL_ADC_Stop>

		measured_temperature_gauge = ((float)(Read_temp>>10)) - 273.5;
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	129b      	asrs	r3, r3, #10
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d6:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001b3c <HAL_TIM_PeriodElapsedCallback+0x1bc>
 80019da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019de:	4b58      	ldr	r3, [pc, #352]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80019e0:	edc3 7a00 	vstr	s15, [r3]
		temperature_testpoint = Read_temp;
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4a57      	ldr	r2, [pc, #348]	@ (8001b44 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80019e8:	6013      	str	r3, [r2, #0]

		/* PI Controller */
		//error = setpoint - feedback_pred;
		PI_error = setpoint - Read_temp;
 80019ea:	4b57      	ldr	r3, [pc, #348]	@ (8001b48 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	60fb      	str	r3, [r7, #12]

		proportional = Kp * PI_error;
 80019f4:	225a      	movs	r2, #90	@ 0x5a
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	60bb      	str	r3, [r7, #8]

		// Dynamic Anti-wind-up limits calculation
		if (PLMAX > proportional && proportional >= 0) {
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a04:	da07      	bge.n	8001a16 <HAL_TIM_PeriodElapsedCallback+0x96>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db04      	blt.n	8001a16 <HAL_TIM_PeriodElapsedCallback+0x96>
			limMaxInt = PLMAX - proportional;
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	e001      	b.n	8001a1a <HAL_TIM_PeriodElapsedCallback+0x9a>
		}
		else {
			limMaxInt = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
		}

		integral = integral + Ki * Sample_time * (PI_prev_error + PI_error);
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	69b9      	ldr	r1, [r7, #24]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	440a      	add	r2, r1
 8001a28:	fb02 f303 	mul.w	r3, r2, r3
 8001a2c:	6a3a      	ldr	r2, [r7, #32]
 8001a2e:	4413      	add	r3, r2
 8001a30:	623b      	str	r3, [r7, #32]
		PI_prev_error = PI_error;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	61bb      	str	r3, [r7, #24]

		// Anti-wind-up integrator limits clamping
		if (integral > limMaxInt) {
 8001a36:	6a3a      	ldr	r2, [r7, #32]
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	dd02      	ble.n	8001a44 <HAL_TIM_PeriodElapsedCallback+0xc4>
			integral = limMaxInt;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	623b      	str	r3, [r7, #32]
 8001a42:	e005      	b.n	8001a50 <HAL_TIM_PeriodElapsedCallback+0xd0>
		}
		else if (integral < limMinInt) {
 8001a44:	6a3a      	ldr	r2, [r7, #32]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	da01      	bge.n	8001a50 <HAL_TIM_PeriodElapsedCallback+0xd0>
			integral = limMinInt;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	623b      	str	r3, [r7, #32]
		}

		// output to PWM value conditioning
		PI_output = ((integral + proportional) >> 10) * 50;
 8001a50:	6a3a      	ldr	r2, [r7, #32]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	4413      	add	r3, r2
 8001a56:	129b      	asrs	r3, r3, #10
 8001a58:	2232      	movs	r2, #50	@ 0x32
 8001a5a:	fb02 f303 	mul.w	r3, r2, r3
 8001a5e:	627b      	str	r3, [r7, #36]	@ 0x24

		if (PI_output > OLMAX) {
 8001a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a66:	dd03      	ble.n	8001a70 <HAL_TIM_PeriodElapsedCallback+0xf0>
			PI_output = 1000;
 8001a68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a6e:	e004      	b.n	8001a7a <HAL_TIM_PeriodElapsedCallback+0xfa>
		}
		else if (PI_output < 0) {
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	da01      	bge.n	8001a7a <HAL_TIM_PeriodElapsedCallback+0xfa>
			PI_output = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		/* End PI Controller */

		TIM3->CCR3 = PI_output;
 8001a7a:	4a34      	ldr	r2, [pc, #208]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	63d3      	str	r3, [r2, #60]	@ 0x3c

		// Output diventa 2^10
		output2 = PI_output * 20;
 8001a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b30      	ldr	r3, [pc, #192]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001a8e:	601a      	str	r2, [r3, #0]

		// 2^20 -> 2^10
		in_model = (((output2 * output2) >> 10) * 82) >> 10;
 8001a90:	4b2f      	ldr	r3, [pc, #188]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a2e      	ldr	r2, [pc, #184]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	fb02 f303 	mul.w	r3, r2, r3
 8001a9c:	129b      	asrs	r3, r3, #10
 8001a9e:	2252      	movs	r2, #82	@ 0x52
 8001aa0:	fb02 f303 	mul.w	r3, r2, r3
 8001aa4:	129b      	asrs	r3, r3, #10
 8001aa6:	4a2b      	ldr	r2, [pc, #172]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001aa8:	6013      	str	r3, [r2, #0]

		//L'uscita è 2^10
		out_model =  (out_model_prev * ad + bu * in_model + bd * in_model_prev) >> 16;
 8001aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f64f 72c5 	movw	r2, #65477	@ 0xffc5
 8001ab2:	fb03 f202 	mul.w	r2, r3, r2
 8001ab6:	21d1      	movs	r1, #209	@ 0xd1
 8001ab8:	4b26      	ldr	r3, [pc, #152]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	fb01 f303 	mul.w	r3, r1, r3
 8001ac0:	441a      	add	r2, r3
 8001ac2:	21d1      	movs	r1, #209	@ 0xd1
 8001ac4:	4b25      	ldr	r3, [pc, #148]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	fb01 f303 	mul.w	r3, r1, r3
 8001acc:	4413      	add	r3, r2
 8001ace:	141b      	asrs	r3, r3, #16
 8001ad0:	4a23      	ldr	r2, [pc, #140]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001ad2:	6013      	str	r3, [r2, #0]

		in_model_prev = in_model;
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a20      	ldr	r2, [pc, #128]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001ada:	6013      	str	r3, [r2, #0]
		out_model_prev = out_model;
 8001adc:	4b20      	ldr	r3, [pc, #128]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001ae2:	6013      	str	r3, [r2, #0]

		// Prendo primo blocco
		out_delayed = delay_vect[index1];
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8001b68 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aee:	4a1f      	ldr	r2, [pc, #124]	@ (8001b6c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001af0:	6013      	str	r3, [r2, #0]

		delay_vect[index1] = out_model;
 8001af2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a1a      	ldr	r2, [pc, #104]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	491b      	ldr	r1, [pc, #108]	@ (8001b68 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		index1++;
 8001b00:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3301      	adds	r3, #1
 8001b06:	4a17      	ldr	r2, [pc, #92]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001b08:	6013      	str	r3, [r2, #0]

		if (index1 > 21)
 8001b0a:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b15      	cmp	r3, #21
 8001b10:	d902      	bls.n	8001b18 <HAL_TIM_PeriodElapsedCallback+0x198>
			index1 = 0;
 8001b12:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]


		feedback_pred = Read_temp - out_delayed + out_model;
 8001b18:	4b14      	ldr	r3, [pc, #80]	@ (8001b6c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	1ad2      	subs	r2, r2, r3
 8001b20:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a12      	ldr	r2, [pc, #72]	@ (8001b70 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001b28:	6013      	str	r3, [r2, #0]

	}
}
 8001b2a:	bf00      	nop
 8001b2c:	3728      	adds	r7, #40	@ 0x28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	240004f4 	.word	0x240004f4
 8001b38:	240002ac 	.word	0x240002ac
 8001b3c:	4388c000 	.word	0x4388c000
 8001b40:	24000594 	.word	0x24000594
 8001b44:	240005b0 	.word	0x240005b0
 8001b48:	24000018 	.word	0x24000018
 8001b4c:	40000400 	.word	0x40000400
 8001b50:	24000610 	.word	0x24000610
 8001b54:	24000608 	.word	0x24000608
 8001b58:	24000604 	.word	0x24000604
 8001b5c:	24000600 	.word	0x24000600
 8001b60:	2400060c 	.word	0x2400060c
 8001b64:	24000670 	.word	0x24000670
 8001b68:	24000618 	.word	0x24000618
 8001b6c:	24000614 	.word	0x24000614
 8001b70:	24000674 	.word	0x24000674

08001b74 <write_float_to_slave>:


void write_float_to_slave(uint8_t slave_address, uint8_t virtual_memory_address, float value)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	ed87 0a00 	vstr	s0, [r7]
 8001b82:	71fb      	strb	r3, [r7, #7]
 8001b84:	4613      	mov	r3, r2
 8001b86:	71bb      	strb	r3, [r7, #6]
	ui32_to_f conv;
	conv.f = value;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	60fb      	str	r3, [r7, #12]
	prepare_WRITE_packet(tx_buffer, virtual_memory_address, conv.ui32);
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	79bb      	ldrb	r3, [r7, #6]
 8001b90:	4619      	mov	r1, r3
 8001b92:	4808      	ldr	r0, [pc, #32]	@ (8001bb4 <write_float_to_slave+0x40>)
 8001b94:	f000 f95b 	bl	8001e4e <prepare_WRITE_packet>
	HAL_I2C_Master_Transmit(&hi2c1, slave_address, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	b299      	uxth	r1, r3
 8001b9c:	2364      	movs	r3, #100	@ 0x64
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2307      	movs	r3, #7
 8001ba2:	4a04      	ldr	r2, [pc, #16]	@ (8001bb4 <write_float_to_slave+0x40>)
 8001ba4:	4804      	ldr	r0, [pc, #16]	@ (8001bb8 <write_float_to_slave+0x44>)
 8001ba6:	f004 fa87 	bl	80060b8 <HAL_I2C_Master_Transmit>
}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	24000678 	.word	0x24000678
 8001bb8:	24000418 	.word	0x24000418

08001bbc <write_uint32_to_slave>:

void write_uint32_to_slave(uint8_t slave_address, uint8_t virtual_memory_address, uint32_t value)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	603a      	str	r2, [r7, #0]
 8001bc6:	71fb      	strb	r3, [r7, #7]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	71bb      	strb	r3, [r7, #6]
	prepare_WRITE_packet(tx_buffer, virtual_memory_address, value);
 8001bcc:	79bb      	ldrb	r3, [r7, #6]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4808      	ldr	r0, [pc, #32]	@ (8001bf4 <write_uint32_to_slave+0x38>)
 8001bd4:	f000 f93b 	bl	8001e4e <prepare_WRITE_packet>
	HAL_I2C_Master_Transmit(&hi2c1, slave_address, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	b299      	uxth	r1, r3
 8001bdc:	2364      	movs	r3, #100	@ 0x64
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2307      	movs	r3, #7
 8001be2:	4a04      	ldr	r2, [pc, #16]	@ (8001bf4 <write_uint32_to_slave+0x38>)
 8001be4:	4804      	ldr	r0, [pc, #16]	@ (8001bf8 <write_uint32_to_slave+0x3c>)
 8001be6:	f004 fa67 	bl	80060b8 <HAL_I2C_Master_Transmit>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	24000678 	.word	0x24000678
 8001bf8:	24000418 	.word	0x24000418

08001bfc <perform_bond>:

void perform_bond(uint32_t bond_time)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	//Perform the bond

	//Enable the ultrasonic driver
	HAL_GPIO_WritePin(ULTRASONIC_ENABLE_GPIO_Port, ULTRASONIC_ENABLE_Pin, GPIO_PIN_RESET);
 8001c04:	2200      	movs	r2, #0
 8001c06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c0a:	480f      	ldr	r0, [pc, #60]	@ (8001c48 <perform_bond+0x4c>)
 8001c0c:	f004 f984 	bl	8005f18 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001c10:	2064      	movs	r0, #100	@ 0x64
 8001c12:	f000 fedd 	bl	80029d0 <HAL_Delay>
	write_bond_power_to_trimmer(bond_power);
 8001c16:	4b0d      	ldr	r3, [pc, #52]	@ (8001c4c <perform_bond+0x50>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f82a 	bl	8001c74 <write_bond_power_to_trimmer>
	HAL_Delay(bond_time);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fed5 	bl	80029d0 <HAL_Delay>
	write_bond_power_to_trimmer(0);
 8001c26:	2000      	movs	r0, #0
 8001c28:	f000 f824 	bl	8001c74 <write_bond_power_to_trimmer>
	HAL_Delay(100);
 8001c2c:	2064      	movs	r0, #100	@ 0x64
 8001c2e:	f000 fecf 	bl	80029d0 <HAL_Delay>
	//Disable the ultrasonic driver
	HAL_GPIO_WritePin(ULTRASONIC_ENABLE_GPIO_Port, ULTRASONIC_ENABLE_Pin, GPIO_PIN_SET);
 8001c32:	2201      	movs	r2, #1
 8001c34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c38:	4803      	ldr	r0, [pc, #12]	@ (8001c48 <perform_bond+0x4c>)
 8001c3a:	f004 f96d 	bl	8005f18 <HAL_GPIO_WritePin>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	58021400 	.word	0x58021400
 8001c4c:	2400000c 	.word	0x2400000c

08001c50 <wait_for_button_release>:

void wait_for_button_release(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_RESET)
 8001c54:	e002      	b.n	8001c5c <wait_for_button_release+0xc>
		HAL_Delay(100);
 8001c56:	2064      	movs	r0, #100	@ 0x64
 8001c58:	f000 feba 	bl	80029d0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_RESET)
 8001c5c:	2180      	movs	r1, #128	@ 0x80
 8001c5e:	4804      	ldr	r0, [pc, #16]	@ (8001c70 <wait_for_button_release+0x20>)
 8001c60:	f004 f942 	bl	8005ee8 <HAL_GPIO_ReadPin>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f5      	beq.n	8001c56 <wait_for_button_release+0x6>
}
 8001c6a:	bf00      	nop
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	58021400 	.word	0x58021400

08001c74 <write_bond_power_to_trimmer>:
	// Wait for the user to release the button
	wait_for_button_release();
}

void write_bond_power_to_trimmer(uint8_t bond_power)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
	uint8_t payload[2] = {0x11, bond_power};
 8001c7e:	2311      	movs	r3, #17
 8001c80:	733b      	strb	r3, [r7, #12]
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2108      	movs	r1, #8
 8001c8a:	4809      	ldr	r0, [pc, #36]	@ (8001cb0 <write_bond_power_to_trimmer+0x3c>)
 8001c8c:	f004 f944 	bl	8005f18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, payload, 2, 100);
 8001c90:	f107 010c 	add.w	r1, r7, #12
 8001c94:	2364      	movs	r3, #100	@ 0x64
 8001c96:	2202      	movs	r2, #2
 8001c98:	4806      	ldr	r0, [pc, #24]	@ (8001cb4 <write_bond_power_to_trimmer+0x40>)
 8001c9a:	f00a f8a3 	bl	800bde4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2108      	movs	r1, #8
 8001ca2:	4803      	ldr	r0, [pc, #12]	@ (8001cb0 <write_bond_power_to_trimmer+0x3c>)
 8001ca4:	f004 f938 	bl	8005f18 <HAL_GPIO_WritePin>

	return;
 8001ca8:	bf00      	nop
}
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	58020000 	.word	0x58020000
 8001cb4:	2400046c 	.word	0x2400046c

08001cb8 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief Handles the GPIO callback
 * @param GPIO_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PLATFORM_TOUCH_Pin)
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d102      	bne.n	8001cce <HAL_GPIO_EXTI_Callback+0x16>
	{
		head_touched = true;
 8001cc8:	4b04      	ldr	r3, [pc, #16]	@ (8001cdc <HAL_GPIO_EXTI_Callback+0x24>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
	}
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	240005ac 	.word	0x240005ac

08001ce0 <execute_write_command>:

int execute_write_command(uint8_t write_address, uint32_t data)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
	int ret_val = COMM_ERR;
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf0:	60fb      	str	r3, [r7, #12]
	ui32_to_f conv;
	conv.ui32 = data;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	60bb      	str	r3, [r7, #8]

	switch (write_address)
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d108      	bne.n	8001d0e <execute_write_command+0x2e>
	{
	case VIRTUAL_MEM_POSITION_MEAS:
		read_position = conv.f;
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4a09      	ldr	r2, [pc, #36]	@ (8001d24 <execute_write_command+0x44>)
 8001d00:	6013      	str	r3, [r2, #0]
		data_ready = true;
 8001d02:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <execute_write_command+0x48>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
		ret_val = COMM_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
		break;
 8001d0c:	e003      	b.n	8001d16 <execute_write_command+0x36>

	default:
		ret_val = COMM_ERR;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	60fb      	str	r3, [r7, #12]
		break;
 8001d14:	bf00      	nop
	}

	return ret_val;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	240005a8 	.word	0x240005a8
 8001d28:	240005ad 	.word	0x240005ad

08001d2c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c1)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	//Perform different actions based on the received command
	switch (rx_buffer[0])
 8001d34:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <HAL_I2C_MasterRxCpltCallback+0x38>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b05      	cmp	r3, #5
 8001d3a:	d10e      	bne.n	8001d5a <HAL_I2C_MasterRxCpltCallback+0x2e>
	{
	case COMMAND_WRITE:
		read_data_from_WRITE_command(rx_buffer, &received_address, &received_data);
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d68 <HAL_I2C_MasterRxCpltCallback+0x3c>)
 8001d3e:	490b      	ldr	r1, [pc, #44]	@ (8001d6c <HAL_I2C_MasterRxCpltCallback+0x40>)
 8001d40:	4808      	ldr	r0, [pc, #32]	@ (8001d64 <HAL_I2C_MasterRxCpltCallback+0x38>)
 8001d42:	f000 f8cd 	bl	8001ee0 <read_data_from_WRITE_command>
		execute_write_command(received_address, received_data);
 8001d46:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <HAL_I2C_MasterRxCpltCallback+0x40>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	4a07      	ldr	r2, [pc, #28]	@ (8001d68 <HAL_I2C_MasterRxCpltCallback+0x3c>)
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ffc5 	bl	8001ce0 <execute_write_command>
		break;
 8001d56:	bf00      	nop
	}
	return;
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
}
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	24000680 	.word	0x24000680
 8001d68:	240005a0 	.word	0x240005a0
 8001d6c:	240005a4 	.word	0x240005a4

08001d70 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

	if(hadc == &hadc1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a06      	ldr	r2, [pc, #24]	@ (8001d94 <HAL_ADC_ConvCpltCallback+0x24>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d102      	bne.n	8001d86 <HAL_ADC_ConvCpltCallback+0x16>
		ADC_ready = 1;
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_ADC_ConvCpltCallback+0x28>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	2400023c 	.word	0x2400023c
 8001d98:	240005f8 	.word	0x240005f8

08001d9c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001da2:	463b      	mov	r3, r7
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8001dae:	f003 fa23 	bl	80051f8 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001db2:	2301      	movs	r3, #1
 8001db4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001dbe:	231f      	movs	r3, #31
 8001dc0:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8001dc2:	2387      	movs	r3, #135	@ 0x87
 8001dc4:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001dde:	463b      	mov	r3, r7
 8001de0:	4618      	mov	r0, r3
 8001de2:	f003 fa41 	bl	8005268 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001de6:	2004      	movs	r0, #4
 8001de8:	f003 fa1e 	bl	8005228 <HAL_MPU_Enable>

}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df8:	b672      	cpsid	i
}
 8001dfa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <Error_Handler+0x8>

08001e00 <serial_communication_variable_init>:
 **********************************************************************************************/
/**
 * Zeroes the tx and rx buffers
 */
void serial_communication_variable_init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
	memset(tx_buffer, 0x00, MAX_COMM_BUFFER_SIZE);
 8001e04:	2207      	movs	r2, #7
 8001e06:	2100      	movs	r1, #0
 8001e08:	4804      	ldr	r0, [pc, #16]	@ (8001e1c <serial_communication_variable_init+0x1c>)
 8001e0a:	f00d fbe2 	bl	800f5d2 <memset>
	memset(rx_buffer, 0x00, MAX_COMM_BUFFER_SIZE);
 8001e0e:	2207      	movs	r2, #7
 8001e10:	2100      	movs	r1, #0
 8001e12:	4803      	ldr	r0, [pc, #12]	@ (8001e20 <serial_communication_variable_init+0x20>)
 8001e14:	f00d fbdd 	bl	800f5d2 <memset>
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	24000678 	.word	0x24000678
 8001e20:	24000680 	.word	0x24000680

08001e24 <prepare_STOP_packet>:
 *
 * @param buffer tx buffer pointer
 * @return total message length
 */
uint16_t prepare_STOP_packet(uint8_t * buffer)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	uint16_t packet_size = 2;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	81fb      	strh	r3, [r7, #14]
	buffer[0] = COMMAND_STOP;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2204      	movs	r2, #4
 8001e34:	701a      	strb	r2, [r3, #0]
	buffer[1] = packet_size;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	89fa      	ldrh	r2, [r7, #14]
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	701a      	strb	r2, [r3, #0]
	return packet_size;
 8001e40:	89fb      	ldrh	r3, [r7, #14]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <prepare_WRITE_packet>:
 *
 * @param buffer tx buffer pointer
 * @return total message length
 */
uint16_t prepare_WRITE_packet(uint8_t * buffer, uint8_t virtual_memory_address, uint32_t value)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b087      	sub	sp, #28
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	460b      	mov	r3, r1
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	72fb      	strb	r3, [r7, #11]
	uint16_t packet_size = 7;
 8001e5c:	2307      	movs	r3, #7
 8001e5e:	82fb      	strh	r3, [r7, #22]
	ui32_to_ui8 conversion_union;

	conversion_union.ui32 = value;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	613b      	str	r3, [r7, #16]

	buffer[0] = COMMAND_WRITE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2205      	movs	r2, #5
 8001e68:	701a      	strb	r2, [r3, #0]
	buffer[1] = packet_size;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	8afa      	ldrh	r2, [r7, #22]
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	701a      	strb	r2, [r3, #0]
	buffer[2] = virtual_memory_address;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3302      	adds	r3, #2
 8001e78:	7afa      	ldrb	r2, [r7, #11]
 8001e7a:	701a      	strb	r2, [r3, #0]
	buffer[3] = conversion_union.ui8[0];
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3303      	adds	r3, #3
 8001e80:	7c3a      	ldrb	r2, [r7, #16]
 8001e82:	701a      	strb	r2, [r3, #0]
	buffer[4] = conversion_union.ui8[1];
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	3304      	adds	r3, #4
 8001e88:	7c7a      	ldrb	r2, [r7, #17]
 8001e8a:	701a      	strb	r2, [r3, #0]
	buffer[5] = conversion_union.ui8[2];
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3305      	adds	r3, #5
 8001e90:	7cba      	ldrb	r2, [r7, #18]
 8001e92:	701a      	strb	r2, [r3, #0]
	buffer[6] = conversion_union.ui8[3];
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3306      	adds	r3, #6
 8001e98:	7cfa      	ldrb	r2, [r7, #19]
 8001e9a:	701a      	strb	r2, [r3, #0]
	return packet_size;
 8001e9c:	8afb      	ldrh	r3, [r7, #22]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	371c      	adds	r7, #28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <prepare_READ_packet>:
 *
 * @param buffer tx buffer pointer
 * @return total message length
 */
uint16_t prepare_READ_packet(uint8_t * buffer, uint8_t read_address)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b085      	sub	sp, #20
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	70fb      	strb	r3, [r7, #3]
	uint16_t packet_size = 3;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	81fb      	strh	r3, [r7, #14]
	buffer[0] = COMMAND_READ;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2206      	movs	r2, #6
 8001ebe:	701a      	strb	r2, [r3, #0]
	buffer[1] = packet_size;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	89fa      	ldrh	r2, [r7, #14]
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	701a      	strb	r2, [r3, #0]
	buffer[2] = read_address;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3302      	adds	r3, #2
 8001ece:	78fa      	ldrb	r2, [r7, #3]
 8001ed0:	701a      	strb	r2, [r3, #0]
	return packet_size;
 8001ed2:	89fb      	ldrh	r3, [r7, #14]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <read_data_from_WRITE_command>:
 * @param buffer pointer to the input buffer (it contains the received WRITE command)
 * @param read_address address at which the WRITE command is directed
 * @param data received uint32_t word
 */
void read_data_from_WRITE_command(uint8_t * buffer, uint8_t * read_address, uint32_t * data)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
	ui32_to_ui8 conversion_union;
	(*read_address) = buffer[2];
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	789a      	ldrb	r2, [r3, #2]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	701a      	strb	r2, [r3, #0]
	conversion_union.ui8[0] = buffer[3];
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	78db      	ldrb	r3, [r3, #3]
 8001ef8:	753b      	strb	r3, [r7, #20]
	conversion_union.ui8[1] = buffer[4];
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	791b      	ldrb	r3, [r3, #4]
 8001efe:	757b      	strb	r3, [r7, #21]
	conversion_union.ui8[2] = buffer[5];
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	795b      	ldrb	r3, [r3, #5]
 8001f04:	75bb      	strb	r3, [r7, #22]
	conversion_union.ui8[3] = buffer[6];
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	799b      	ldrb	r3, [r3, #6]
 8001f0a:	75fb      	strb	r3, [r7, #23]
	(*data) = conversion_union.ui32;
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	601a      	str	r2, [r3, #0]

	return;
 8001f12:	bf00      	nop
}
 8001f14:	371c      	adds	r7, #28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f26:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <HAL_MspInit+0x30>)
 8001f28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f2c:	4a08      	ldr	r2, [pc, #32]	@ (8001f50 <HAL_MspInit+0x30>)
 8001f2e:	f043 0302 	orr.w	r3, r3, #2
 8001f32:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f36:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_MspInit+0x30>)
 8001f38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	58024400 	.word	0x58024400

08001f54 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08e      	sub	sp, #56	@ 0x38
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a64      	ldr	r2, [pc, #400]	@ (8002104 <HAL_ADC_MspInit+0x1b0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d157      	bne.n	8002026 <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f76:	4b64      	ldr	r3, [pc, #400]	@ (8002108 <HAL_ADC_MspInit+0x1b4>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	4a62      	ldr	r2, [pc, #392]	@ (8002108 <HAL_ADC_MspInit+0x1b4>)
 8001f7e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f80:	4b61      	ldr	r3, [pc, #388]	@ (8002108 <HAL_ADC_MspInit+0x1b4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d10e      	bne.n	8001fa6 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f88:	4b60      	ldr	r3, [pc, #384]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 8001f8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f8e:	4a5f      	ldr	r2, [pc, #380]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 8001f90:	f043 0320 	orr.w	r3, r3, #32
 8001f94:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f98:	4b5c      	ldr	r3, [pc, #368]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 8001f9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f9e:	f003 0320 	and.w	r3, r3, #32
 8001fa2:	623b      	str	r3, [r7, #32]
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa6:	4b59      	ldr	r3, [pc, #356]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 8001fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fac:	4a57      	ldr	r2, [pc, #348]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 8001fae:	f043 0302 	orr.w	r3, r3, #2
 8001fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fb6:	4b55      	ldr	r3, [pc, #340]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fc4:	4b51      	ldr	r3, [pc, #324]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 8001fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fca:	4a50      	ldr	r2, [pc, #320]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 8001fcc:	f043 0320 	orr.w	r3, r3, #32
 8001fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fd4:	4b4d      	ldr	r3, [pc, #308]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 8001fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4846      	ldr	r0, [pc, #280]	@ (8002110 <HAL_ADC_MspInit+0x1bc>)
 8001ff6:	f003 fdcf 	bl	8005b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ffa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002000:	2303      	movs	r3, #3
 8002002:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002008:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800200c:	4619      	mov	r1, r3
 800200e:	4841      	ldr	r0, [pc, #260]	@ (8002114 <HAL_ADC_MspInit+0x1c0>)
 8002010:	f003 fdc2 	bl	8005b98 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	2101      	movs	r1, #1
 8002018:	2012      	movs	r0, #18
 800201a:	f003 f8b8 	bl	800518e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800201e:	2012      	movs	r0, #18
 8002020:	f003 f8cf 	bl	80051c2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002024:	e069      	b.n	80020fa <HAL_ADC_MspInit+0x1a6>
  else if(hadc->Instance==ADC2)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a3b      	ldr	r2, [pc, #236]	@ (8002118 <HAL_ADC_MspInit+0x1c4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d13b      	bne.n	80020a8 <HAL_ADC_MspInit+0x154>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002030:	4b35      	ldr	r3, [pc, #212]	@ (8002108 <HAL_ADC_MspInit+0x1b4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3301      	adds	r3, #1
 8002036:	4a34      	ldr	r2, [pc, #208]	@ (8002108 <HAL_ADC_MspInit+0x1b4>)
 8002038:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800203a:	4b33      	ldr	r3, [pc, #204]	@ (8002108 <HAL_ADC_MspInit+0x1b4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d10e      	bne.n	8002060 <HAL_ADC_MspInit+0x10c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002042:	4b32      	ldr	r3, [pc, #200]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 8002044:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002048:	4a30      	ldr	r2, [pc, #192]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 800204a:	f043 0320 	orr.w	r3, r3, #32
 800204e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002052:	4b2e      	ldr	r3, [pc, #184]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 8002054:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002060:	4b2a      	ldr	r3, [pc, #168]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002066:	4a29      	ldr	r2, [pc, #164]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002070:	4b26      	ldr	r3, [pc, #152]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 8002072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800207e:	2302      	movs	r3, #2
 8002080:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002082:	2303      	movs	r3, #3
 8002084:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800208e:	4619      	mov	r1, r3
 8002090:	481f      	ldr	r0, [pc, #124]	@ (8002110 <HAL_ADC_MspInit+0x1bc>)
 8002092:	f003 fd81 	bl	8005b98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2101      	movs	r1, #1
 800209a:	2012      	movs	r0, #18
 800209c:	f003 f877 	bl	800518e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020a0:	2012      	movs	r0, #18
 80020a2:	f003 f88e 	bl	80051c2 <HAL_NVIC_EnableIRQ>
}
 80020a6:	e028      	b.n	80020fa <HAL_ADC_MspInit+0x1a6>
  else if(hadc->Instance==ADC3)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1b      	ldr	r2, [pc, #108]	@ (800211c <HAL_ADC_MspInit+0x1c8>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d123      	bne.n	80020fa <HAL_ADC_MspInit+0x1a6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80020b2:	4b16      	ldr	r3, [pc, #88]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b8:	4a14      	ldr	r2, [pc, #80]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 80020ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020c2:	4b12      	ldr	r3, [pc, #72]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 80020c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d0:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 80020d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d6:	4a0d      	ldr	r2, [pc, #52]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020e0:	4b0a      	ldr	r3, [pc, #40]	@ (800210c <HAL_ADC_MspInit+0x1b8>)
 80020e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80020ee:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80020f2:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80020f6:	f000 fc8f 	bl	8002a18 <HAL_SYSCFG_AnalogSwitchConfig>
}
 80020fa:	bf00      	nop
 80020fc:	3738      	adds	r7, #56	@ 0x38
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40022000 	.word	0x40022000
 8002108:	24000688 	.word	0x24000688
 800210c:	58024400 	.word	0x58024400
 8002110:	58020400 	.word	0x58020400
 8002114:	58021400 	.word	0x58021400
 8002118:	40022100 	.word	0x40022100
 800211c:	58026000 	.word	0x58026000

08002120 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0b      	ldr	r2, [pc, #44]	@ (800215c <HAL_CRC_MspInit+0x3c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d10e      	bne.n	8002150 <HAL_CRC_MspInit+0x30>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002132:	4b0b      	ldr	r3, [pc, #44]	@ (8002160 <HAL_CRC_MspInit+0x40>)
 8002134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002138:	4a09      	ldr	r2, [pc, #36]	@ (8002160 <HAL_CRC_MspInit+0x40>)
 800213a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800213e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002142:	4b07      	ldr	r3, [pc, #28]	@ (8002160 <HAL_CRC_MspInit+0x40>)
 8002144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002148:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	58024c00 	.word	0x58024c00
 8002160:	58024400 	.word	0x58024400

08002164 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0b      	ldr	r2, [pc, #44]	@ (80021a0 <HAL_DMA2D_MspInit+0x3c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d10e      	bne.n	8002194 <HAL_DMA2D_MspInit+0x30>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002176:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <HAL_DMA2D_MspInit+0x40>)
 8002178:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800217c:	4a09      	ldr	r2, [pc, #36]	@ (80021a4 <HAL_DMA2D_MspInit+0x40>)
 800217e:	f043 0310 	orr.w	r3, r3, #16
 8002182:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002186:	4b07      	ldr	r3, [pc, #28]	@ (80021a4 <HAL_DMA2D_MspInit+0x40>)
 8002188:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	52001000 	.word	0x52001000
 80021a4:	58024400 	.word	0x58024400

080021a8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b0b8      	sub	sp, #224	@ 0xe0
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	22b8      	movs	r2, #184	@ 0xb8
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f00d fa02 	bl	800f5d2 <memset>
  if(hi2c->Instance==I2C1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a2e      	ldr	r2, [pc, #184]	@ (800228c <HAL_I2C_MspInit+0xe4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d155      	bne.n	8002284 <HAL_I2C_MspInit+0xdc>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021d8:	f04f 0208 	mov.w	r2, #8
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ea:	f107 0310 	add.w	r3, r7, #16
 80021ee:	4618      	mov	r0, r3
 80021f0:	f007 f8ee 	bl	80093d0 <HAL_RCCEx_PeriphCLKConfig>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80021fa:	f7ff fdfb 	bl	8001df4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	4b24      	ldr	r3, [pc, #144]	@ (8002290 <HAL_I2C_MspInit+0xe8>)
 8002200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002204:	4a22      	ldr	r2, [pc, #136]	@ (8002290 <HAL_I2C_MspInit+0xe8>)
 8002206:	f043 0302 	orr.w	r3, r3, #2
 800220a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800220e:	4b20      	ldr	r3, [pc, #128]	@ (8002290 <HAL_I2C_MspInit+0xe8>)
 8002210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800221c:	23c0      	movs	r3, #192	@ 0xc0
 800221e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002222:	2312      	movs	r3, #18
 8002224:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002228:	2301      	movs	r3, #1
 800222a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2300      	movs	r3, #0
 8002230:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002234:	2304      	movs	r3, #4
 8002236:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800223e:	4619      	mov	r1, r3
 8002240:	4814      	ldr	r0, [pc, #80]	@ (8002294 <HAL_I2C_MspInit+0xec>)
 8002242:	f003 fca9 	bl	8005b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002246:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <HAL_I2C_MspInit+0xe8>)
 8002248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800224c:	4a10      	ldr	r2, [pc, #64]	@ (8002290 <HAL_I2C_MspInit+0xe8>)
 800224e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002252:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002256:	4b0e      	ldr	r3, [pc, #56]	@ (8002290 <HAL_I2C_MspInit+0xe8>)
 8002258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800225c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	201f      	movs	r0, #31
 800226a:	f002 ff90 	bl	800518e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800226e:	201f      	movs	r0, #31
 8002270:	f002 ffa7 	bl	80051c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002274:	2200      	movs	r2, #0
 8002276:	2100      	movs	r1, #0
 8002278:	2020      	movs	r0, #32
 800227a:	f002 ff88 	bl	800518e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800227e:	2020      	movs	r0, #32
 8002280:	f002 ff9f 	bl	80051c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002284:	bf00      	nop
 8002286:	37e0      	adds	r7, #224	@ 0xe0
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40005400 	.word	0x40005400
 8002290:	58024400 	.word	0x58024400
 8002294:	58020400 	.word	0x58020400

08002298 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b0ba      	sub	sp, #232	@ 0xe8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022b0:	f107 0318 	add.w	r3, r7, #24
 80022b4:	22b8      	movs	r2, #184	@ 0xb8
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f00d f98a 	bl	800f5d2 <memset>
  if(hspi->Instance==SPI1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a38      	ldr	r2, [pc, #224]	@ (80023a4 <HAL_SPI_MspInit+0x10c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d168      	bne.n	800239a <HAL_SPI_MspInit+0x102>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80022c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022d8:	f107 0318 	add.w	r3, r7, #24
 80022dc:	4618      	mov	r0, r3
 80022de:	f007 f877 	bl	80093d0 <HAL_RCCEx_PeriphCLKConfig>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80022e8:	f7ff fd84 	bl	8001df4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022ec:	4b2e      	ldr	r3, [pc, #184]	@ (80023a8 <HAL_SPI_MspInit+0x110>)
 80022ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022f2:	4a2d      	ldr	r2, [pc, #180]	@ (80023a8 <HAL_SPI_MspInit+0x110>)
 80022f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022fc:	4b2a      	ldr	r3, [pc, #168]	@ (80023a8 <HAL_SPI_MspInit+0x110>)
 80022fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002302:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230a:	4b27      	ldr	r3, [pc, #156]	@ (80023a8 <HAL_SPI_MspInit+0x110>)
 800230c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002310:	4a25      	ldr	r2, [pc, #148]	@ (80023a8 <HAL_SPI_MspInit+0x110>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800231a:	4b23      	ldr	r3, [pc, #140]	@ (80023a8 <HAL_SPI_MspInit+0x110>)
 800231c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002328:	4b1f      	ldr	r3, [pc, #124]	@ (80023a8 <HAL_SPI_MspInit+0x110>)
 800232a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800232e:	4a1e      	ldr	r2, [pc, #120]	@ (80023a8 <HAL_SPI_MspInit+0x110>)
 8002330:	f043 0308 	orr.w	r3, r3, #8
 8002334:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002338:	4b1b      	ldr	r3, [pc, #108]	@ (80023a8 <HAL_SPI_MspInit+0x110>)
 800233a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002346:	2320      	movs	r3, #32
 8002348:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800235e:	2305      	movs	r3, #5
 8002360:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002364:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002368:	4619      	mov	r1, r3
 800236a:	4810      	ldr	r0, [pc, #64]	@ (80023ac <HAL_SPI_MspInit+0x114>)
 800236c:	f003 fc14 	bl	8005b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002370:	2380      	movs	r3, #128	@ 0x80
 8002372:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	2300      	movs	r3, #0
 8002384:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002388:	2305      	movs	r3, #5
 800238a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800238e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002392:	4619      	mov	r1, r3
 8002394:	4806      	ldr	r0, [pc, #24]	@ (80023b0 <HAL_SPI_MspInit+0x118>)
 8002396:	f003 fbff 	bl	8005b98 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800239a:	bf00      	nop
 800239c:	37e8      	adds	r7, #232	@ 0xe8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40013000 	.word	0x40013000
 80023a8:	58024400 	.word	0x58024400
 80023ac:	58020000 	.word	0x58020000
 80023b0:	58020c00 	.word	0x58020c00

080023b4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023c4:	d117      	bne.n	80023f6 <HAL_TIM_Base_MspInit+0x42>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023c6:	4b18      	ldr	r3, [pc, #96]	@ (8002428 <HAL_TIM_Base_MspInit+0x74>)
 80023c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023cc:	4a16      	ldr	r2, [pc, #88]	@ (8002428 <HAL_TIM_Base_MspInit+0x74>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023d6:	4b14      	ldr	r3, [pc, #80]	@ (8002428 <HAL_TIM_Base_MspInit+0x74>)
 80023d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023e4:	2200      	movs	r2, #0
 80023e6:	2100      	movs	r1, #0
 80023e8:	201c      	movs	r0, #28
 80023ea:	f002 fed0 	bl	800518e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023ee:	201c      	movs	r0, #28
 80023f0:	f002 fee7 	bl	80051c2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023f4:	e013      	b.n	800241e <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM3)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a0c      	ldr	r2, [pc, #48]	@ (800242c <HAL_TIM_Base_MspInit+0x78>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d10e      	bne.n	800241e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002400:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <HAL_TIM_Base_MspInit+0x74>)
 8002402:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002406:	4a08      	ldr	r2, [pc, #32]	@ (8002428 <HAL_TIM_Base_MspInit+0x74>)
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002410:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <HAL_TIM_Base_MspInit+0x74>)
 8002412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	58024400 	.word	0x58024400
 800242c:	40000400 	.word	0x40000400

08002430 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 030c 	add.w	r3, r7, #12
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a12      	ldr	r2, [pc, #72]	@ (8002498 <HAL_TIM_MspPostInit+0x68>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d11e      	bne.n	8002490 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002452:	4b12      	ldr	r3, [pc, #72]	@ (800249c <HAL_TIM_MspPostInit+0x6c>)
 8002454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002458:	4a10      	ldr	r2, [pc, #64]	@ (800249c <HAL_TIM_MspPostInit+0x6c>)
 800245a:	f043 0302 	orr.w	r3, r3, #2
 800245e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002462:	4b0e      	ldr	r3, [pc, #56]	@ (800249c <HAL_TIM_MspPostInit+0x6c>)
 8002464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002470:	2301      	movs	r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247c:	2300      	movs	r3, #0
 800247e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002480:	2302      	movs	r3, #2
 8002482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002484:	f107 030c 	add.w	r3, r7, #12
 8002488:	4619      	mov	r1, r3
 800248a:	4805      	ldr	r0, [pc, #20]	@ (80024a0 <HAL_TIM_MspPostInit+0x70>)
 800248c:	f003 fb84 	bl	8005b98 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002490:	bf00      	nop
 8002492:	3720      	adds	r7, #32
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40000400 	.word	0x40000400
 800249c:	58024400 	.word	0x58024400
 80024a0:	58020400 	.word	0x58020400

080024a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <NMI_Handler+0x4>

080024ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b0:	bf00      	nop
 80024b2:	e7fd      	b.n	80024b0 <HardFault_Handler+0x4>

080024b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <MemManage_Handler+0x4>

080024bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c0:	bf00      	nop
 80024c2:	e7fd      	b.n	80024c0 <BusFault_Handler+0x4>

080024c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <UsageFault_Handler+0x4>

080024cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024fa:	f000 fa49 	bl	8002990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}

08002502 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HEATER_Pin);
 8002506:	2004      	movs	r0, #4
 8002508:	f003 fd1f 	bl	8005f4a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}

08002510 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PLATFORM_TOUCH_Pin);
 8002514:	2008      	movs	r0, #8
 8002516:	f003 fd18 	bl	8005f4a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002524:	4803      	ldr	r0, [pc, #12]	@ (8002534 <ADC_IRQHandler+0x14>)
 8002526:	f001 f9cf 	bl	80038c8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800252a:	4803      	ldr	r0, [pc, #12]	@ (8002538 <ADC_IRQHandler+0x18>)
 800252c:	f001 f9cc 	bl	80038c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}
 8002534:	2400023c 	.word	0x2400023c
 8002538:	240002ac 	.word	0x240002ac

0800253c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002540:	4802      	ldr	r0, [pc, #8]	@ (800254c <TIM2_IRQHandler+0x10>)
 8002542:	f00a f9e1 	bl	800c908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	240004f4 	.word	0x240004f4

08002550 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002554:	4802      	ldr	r0, [pc, #8]	@ (8002560 <I2C1_EV_IRQHandler+0x10>)
 8002556:	f003 ff37 	bl	80063c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	24000418 	.word	0x24000418

08002564 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002568:	4802      	ldr	r0, [pc, #8]	@ (8002574 <I2C1_ER_IRQHandler+0x10>)
 800256a:	f003 ff47 	bl	80063fc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	24000418 	.word	0x24000418

08002578 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return 1;
 800257c:	2301      	movs	r3, #1
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <_kill>:

int _kill(int pid, int sig)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002592:	f00d f8c1 	bl	800f718 <__errno>
 8002596:	4603      	mov	r3, r0
 8002598:	2216      	movs	r2, #22
 800259a:	601a      	str	r2, [r3, #0]
  return -1;
 800259c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <_exit>:

void _exit (int status)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025b0:	f04f 31ff 	mov.w	r1, #4294967295
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ffe7 	bl	8002588 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025ba:	bf00      	nop
 80025bc:	e7fd      	b.n	80025ba <_exit+0x12>

080025be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	e00a      	b.n	80025e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025d0:	f3af 8000 	nop.w
 80025d4:	4601      	mov	r1, r0
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	60ba      	str	r2, [r7, #8]
 80025dc:	b2ca      	uxtb	r2, r1
 80025de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	3301      	adds	r3, #1
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	dbf0      	blt.n	80025d0 <_read+0x12>
  }

  return len;
 80025ee:	687b      	ldr	r3, [r7, #4]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	e009      	b.n	800261e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	60ba      	str	r2, [r7, #8]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	3301      	adds	r3, #1
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	429a      	cmp	r2, r3
 8002624:	dbf1      	blt.n	800260a <_write+0x12>
  }
  return len;
 8002626:	687b      	ldr	r3, [r7, #4]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <_close>:

int _close(int file)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002638:	f04f 33ff 	mov.w	r3, #4294967295
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002658:	605a      	str	r2, [r3, #4]
  return 0;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <_isatty>:

int _isatty(int file)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002670:	2301      	movs	r3, #1
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800267e:	b480      	push	{r7}
 8002680:	b085      	sub	sp, #20
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a0:	4a14      	ldr	r2, [pc, #80]	@ (80026f4 <_sbrk+0x5c>)
 80026a2:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <_sbrk+0x60>)
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026ac:	4b13      	ldr	r3, [pc, #76]	@ (80026fc <_sbrk+0x64>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d102      	bne.n	80026ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b4:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <_sbrk+0x64>)
 80026b6:	4a12      	ldr	r2, [pc, #72]	@ (8002700 <_sbrk+0x68>)
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ba:	4b10      	ldr	r3, [pc, #64]	@ (80026fc <_sbrk+0x64>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d207      	bcs.n	80026d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026c8:	f00d f826 	bl	800f718 <__errno>
 80026cc:	4603      	mov	r3, r0
 80026ce:	220c      	movs	r2, #12
 80026d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
 80026d6:	e009      	b.n	80026ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026d8:	4b08      	ldr	r3, [pc, #32]	@ (80026fc <_sbrk+0x64>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026de:	4b07      	ldr	r3, [pc, #28]	@ (80026fc <_sbrk+0x64>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	4a05      	ldr	r2, [pc, #20]	@ (80026fc <_sbrk+0x64>)
 80026e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ea:	68fb      	ldr	r3, [r7, #12]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	24050000 	.word	0x24050000
 80026f8:	00000400 	.word	0x00000400
 80026fc:	2400068c 	.word	0x2400068c
 8002700:	24000a88 	.word	0x24000a88

08002704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002708:	4b3e      	ldr	r3, [pc, #248]	@ (8002804 <SystemInit+0x100>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270e:	4a3d      	ldr	r2, [pc, #244]	@ (8002804 <SystemInit+0x100>)
 8002710:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002714:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002718:	4b3b      	ldr	r3, [pc, #236]	@ (8002808 <SystemInit+0x104>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	2b06      	cmp	r3, #6
 8002722:	d807      	bhi.n	8002734 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002724:	4b38      	ldr	r3, [pc, #224]	@ (8002808 <SystemInit+0x104>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f023 030f 	bic.w	r3, r3, #15
 800272c:	4a36      	ldr	r2, [pc, #216]	@ (8002808 <SystemInit+0x104>)
 800272e:	f043 0307 	orr.w	r3, r3, #7
 8002732:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002734:	4b35      	ldr	r3, [pc, #212]	@ (800280c <SystemInit+0x108>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a34      	ldr	r2, [pc, #208]	@ (800280c <SystemInit+0x108>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002740:	4b32      	ldr	r3, [pc, #200]	@ (800280c <SystemInit+0x108>)
 8002742:	2200      	movs	r2, #0
 8002744:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002746:	4b31      	ldr	r3, [pc, #196]	@ (800280c <SystemInit+0x108>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4930      	ldr	r1, [pc, #192]	@ (800280c <SystemInit+0x108>)
 800274c:	4b30      	ldr	r3, [pc, #192]	@ (8002810 <SystemInit+0x10c>)
 800274e:	4013      	ands	r3, r2
 8002750:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002752:	4b2d      	ldr	r3, [pc, #180]	@ (8002808 <SystemInit+0x104>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800275e:	4b2a      	ldr	r3, [pc, #168]	@ (8002808 <SystemInit+0x104>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 030f 	bic.w	r3, r3, #15
 8002766:	4a28      	ldr	r2, [pc, #160]	@ (8002808 <SystemInit+0x104>)
 8002768:	f043 0307 	orr.w	r3, r3, #7
 800276c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800276e:	4b27      	ldr	r3, [pc, #156]	@ (800280c <SystemInit+0x108>)
 8002770:	2200      	movs	r2, #0
 8002772:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002774:	4b25      	ldr	r3, [pc, #148]	@ (800280c <SystemInit+0x108>)
 8002776:	2200      	movs	r2, #0
 8002778:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800277a:	4b24      	ldr	r3, [pc, #144]	@ (800280c <SystemInit+0x108>)
 800277c:	2200      	movs	r2, #0
 800277e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002780:	4b22      	ldr	r3, [pc, #136]	@ (800280c <SystemInit+0x108>)
 8002782:	4a24      	ldr	r2, [pc, #144]	@ (8002814 <SystemInit+0x110>)
 8002784:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002786:	4b21      	ldr	r3, [pc, #132]	@ (800280c <SystemInit+0x108>)
 8002788:	4a23      	ldr	r2, [pc, #140]	@ (8002818 <SystemInit+0x114>)
 800278a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800278c:	4b1f      	ldr	r3, [pc, #124]	@ (800280c <SystemInit+0x108>)
 800278e:	4a23      	ldr	r2, [pc, #140]	@ (800281c <SystemInit+0x118>)
 8002790:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002792:	4b1e      	ldr	r3, [pc, #120]	@ (800280c <SystemInit+0x108>)
 8002794:	2200      	movs	r2, #0
 8002796:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002798:	4b1c      	ldr	r3, [pc, #112]	@ (800280c <SystemInit+0x108>)
 800279a:	4a20      	ldr	r2, [pc, #128]	@ (800281c <SystemInit+0x118>)
 800279c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800279e:	4b1b      	ldr	r3, [pc, #108]	@ (800280c <SystemInit+0x108>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027a4:	4b19      	ldr	r3, [pc, #100]	@ (800280c <SystemInit+0x108>)
 80027a6:	4a1d      	ldr	r2, [pc, #116]	@ (800281c <SystemInit+0x118>)
 80027a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027aa:	4b18      	ldr	r3, [pc, #96]	@ (800280c <SystemInit+0x108>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027b0:	4b16      	ldr	r3, [pc, #88]	@ (800280c <SystemInit+0x108>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a15      	ldr	r2, [pc, #84]	@ (800280c <SystemInit+0x108>)
 80027b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027bc:	4b13      	ldr	r3, [pc, #76]	@ (800280c <SystemInit+0x108>)
 80027be:	2200      	movs	r2, #0
 80027c0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80027c2:	4b12      	ldr	r3, [pc, #72]	@ (800280c <SystemInit+0x108>)
 80027c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80027c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d113      	bne.n	80027f8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80027d0:	4b0e      	ldr	r3, [pc, #56]	@ (800280c <SystemInit+0x108>)
 80027d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80027d6:	4a0d      	ldr	r2, [pc, #52]	@ (800280c <SystemInit+0x108>)
 80027d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002820 <SystemInit+0x11c>)
 80027e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80027e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80027e8:	4b08      	ldr	r3, [pc, #32]	@ (800280c <SystemInit+0x108>)
 80027ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80027ee:	4a07      	ldr	r2, [pc, #28]	@ (800280c <SystemInit+0x108>)
 80027f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000ed00 	.word	0xe000ed00
 8002808:	52002000 	.word	0x52002000
 800280c:	58024400 	.word	0x58024400
 8002810:	eaf6ed7f 	.word	0xeaf6ed7f
 8002814:	02020200 	.word	0x02020200
 8002818:	01ff0000 	.word	0x01ff0000
 800281c:	01010280 	.word	0x01010280
 8002820:	52004000 	.word	0x52004000

08002824 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002828:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <ExitRun0Mode+0x2c>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4a08      	ldr	r2, [pc, #32]	@ (8002850 <ExitRun0Mode+0x2c>)
 800282e:	f043 0302 	orr.w	r3, r3, #2
 8002832:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002834:	bf00      	nop
 8002836:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <ExitRun0Mode+0x2c>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f9      	beq.n	8002836 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002842:	bf00      	nop
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	58024800 	.word	0x58024800

08002854 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack      /* set stack pointer */
 8002854:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002890 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002858:	f7ff ffe4 	bl	8002824 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800285c:	f7ff ff52 	bl	8002704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002860:	480c      	ldr	r0, [pc, #48]	@ (8002894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002862:	490d      	ldr	r1, [pc, #52]	@ (8002898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002864:	4a0d      	ldr	r2, [pc, #52]	@ (800289c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002868:	e002      	b.n	8002870 <LoopCopyDataInit>

0800286a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800286a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800286c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800286e:	3304      	adds	r3, #4

08002870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002874:	d3f9      	bcc.n	800286a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002876:	4a0a      	ldr	r2, [pc, #40]	@ (80028a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002878:	4c0a      	ldr	r4, [pc, #40]	@ (80028a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800287a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800287c:	e001      	b.n	8002882 <LoopFillZerobss>

0800287e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800287e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002880:	3204      	adds	r2, #4

08002882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002884:	d3fb      	bcc.n	800287e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002886:	f00c ff4d 	bl	800f724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800288a:	f7fd fd91 	bl	80003b0 <main>
  bx  lr
 800288e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002890:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002894:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002898:	24000220 	.word	0x24000220
  ldr r2, =_sidata
 800289c:	08011960 	.word	0x08011960
  ldr r2, =_sbss
 80028a0:	24000220 	.word	0x24000220
  ldr r4, =_ebss
 80028a4:	24000a88 	.word	0x24000a88

080028a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028a8:	e7fe      	b.n	80028a8 <ADC3_IRQHandler>
	...

080028ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b2:	2003      	movs	r0, #3
 80028b4:	f002 fc60 	bl	8005178 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028b8:	f006 fbca 	bl	8009050 <HAL_RCC_GetSysClockFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <HAL_Init+0x68>)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	4913      	ldr	r1, [pc, #76]	@ (8002918 <HAL_Init+0x6c>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
 80028d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002914 <HAL_Init+0x68>)
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	4a0e      	ldr	r2, [pc, #56]	@ (8002918 <HAL_Init+0x6c>)
 80028e0:	5cd3      	ldrb	r3, [r2, r3]
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	fa22 f303 	lsr.w	r3, r2, r3
 80028ec:	4a0b      	ldr	r2, [pc, #44]	@ (800291c <HAL_Init+0x70>)
 80028ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002920 <HAL_Init+0x74>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028f6:	2000      	movs	r0, #0
 80028f8:	f000 f814 	bl	8002924 <HAL_InitTick>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e002      	b.n	800290c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002906:	f7ff fb0b 	bl	8001f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	58024400 	.word	0x58024400
 8002918:	080104a0 	.word	0x080104a0
 800291c:	240001b0 	.word	0x240001b0
 8002920:	240001ac 	.word	0x240001ac

08002924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800292c:	4b15      	ldr	r3, [pc, #84]	@ (8002984 <HAL_InitTick+0x60>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e021      	b.n	800297c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002938:	4b13      	ldr	r3, [pc, #76]	@ (8002988 <HAL_InitTick+0x64>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b11      	ldr	r3, [pc, #68]	@ (8002984 <HAL_InitTick+0x60>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	4619      	mov	r1, r3
 8002942:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002946:	fbb3 f3f1 	udiv	r3, r3, r1
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	4618      	mov	r0, r3
 8002950:	f002 fc45 	bl	80051de <HAL_SYSTICK_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e00e      	b.n	800297c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b0f      	cmp	r3, #15
 8002962:	d80a      	bhi.n	800297a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002964:	2200      	movs	r2, #0
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	f04f 30ff 	mov.w	r0, #4294967295
 800296c:	f002 fc0f 	bl	800518e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002970:	4a06      	ldr	r2, [pc, #24]	@ (800298c <HAL_InitTick+0x68>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	240001b8 	.word	0x240001b8
 8002988:	240001ac 	.word	0x240001ac
 800298c:	240001b4 	.word	0x240001b4

08002990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002994:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_IncTick+0x20>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_IncTick+0x24>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	4a04      	ldr	r2, [pc, #16]	@ (80029b4 <HAL_IncTick+0x24>)
 80029a2:	6013      	str	r3, [r2, #0]
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	240001b8 	.word	0x240001b8
 80029b4:	24000690 	.word	0x24000690

080029b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return uwTick;
 80029bc:	4b03      	ldr	r3, [pc, #12]	@ (80029cc <HAL_GetTick+0x14>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	24000690 	.word	0x24000690

080029d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d8:	f7ff ffee 	bl	80029b8 <HAL_GetTick>
 80029dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e8:	d005      	beq.n	80029f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <HAL_Delay+0x44>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4413      	add	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029f6:	bf00      	nop
 80029f8:	f7ff ffde 	bl	80029b8 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d8f7      	bhi.n	80029f8 <HAL_Delay+0x28>
  {
  }
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	240001b8 	.word	0x240001b8

08002a18 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002a22:	4b07      	ldr	r3, [pc, #28]	@ (8002a40 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	4904      	ldr	r1, [pc, #16]	@ (8002a40 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	58000400 	.word	0x58000400

08002a44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	609a      	str	r2, [r3, #8]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	609a      	str	r2, [r3, #8]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a18      	ldr	r2, [pc, #96]	@ (8002b1c <LL_ADC_SetChannelPreselection+0x70>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d027      	beq.n	8002b0e <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d107      	bne.n	8002ad8 <LL_ADC_SetChannelPreselection+0x2c>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	0e9b      	lsrs	r3, r3, #26
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	e015      	b.n	8002b04 <LL_ADC_SetChannelPreselection+0x58>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8002aee:	2320      	movs	r3, #32
 8002af0:	e003      	b.n	8002afa <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	fab3 f383 	clz	r3, r3
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	2201      	movs	r2, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	69d2      	ldr	r2, [r2, #28]
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8002b0e:	bf00      	nop
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	58026000 	.word	0x58026000

08002b20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	3360      	adds	r3, #96	@ 0x60
 8002b32:	461a      	mov	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4a10      	ldr	r2, [pc, #64]	@ (8002b80 <LL_ADC_SetOffset+0x60>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d10b      	bne.n	8002b5c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b5a:	e00b      	b.n	8002b74 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	601a      	str	r2, [r3, #0]
}
 8002b74:	bf00      	nop
 8002b76:	371c      	adds	r7, #28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	58026000 	.word	0x58026000

08002b84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3360      	adds	r3, #96	@ 0x60
 8002b92:	461a      	mov	r2, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f003 031f 	and.w	r3, r3, #31
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	611a      	str	r2, [r3, #16]
}
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8002c24 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00e      	beq.n	8002c16 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	3360      	adds	r3, #96	@ 0x60
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	601a      	str	r2, [r3, #0]
  }
}
 8002c16:	bf00      	nop
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	58026000 	.word	0x58026000

08002c28 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4a0c      	ldr	r2, [pc, #48]	@ (8002c68 <LL_ADC_SetOffsetSaturation+0x40>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d10e      	bne.n	8002c5a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3360      	adds	r3, #96	@ 0x60
 8002c40:	461a      	mov	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	431a      	orrs	r2, r3
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	58026000 	.word	0x58026000

08002c6c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002cac <LL_ADC_SetOffsetSign+0x40>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d10e      	bne.n	8002c9e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3360      	adds	r3, #96	@ 0x60
 8002c84:	461a      	mov	r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002c9e:	bf00      	nop
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	58026000 	.word	0x58026000

08002cb0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3360      	adds	r3, #96	@ 0x60
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8002d00 <LL_ADC_SetOffsetState+0x50>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d108      	bne.n	8002ce4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002ce2:	e007      	b.n	8002cf4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	601a      	str	r2, [r3, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	58026000 	.word	0x58026000

08002d04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b087      	sub	sp, #28
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3330      	adds	r3, #48	@ 0x30
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	4413      	add	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	211f      	movs	r1, #31
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	401a      	ands	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	0e9b      	lsrs	r3, r3, #26
 8002d62:	f003 011f 	and.w	r1, r3, #31
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d70:	431a      	orrs	r2, r3
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d76:	bf00      	nop
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d8e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3314      	adds	r3, #20
 8002db8:	461a      	mov	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	0e5b      	lsrs	r3, r3, #25
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	4413      	add	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	0d1b      	lsrs	r3, r3, #20
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	2107      	movs	r1, #7
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	401a      	ands	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	0d1b      	lsrs	r3, r3, #20
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dec:	431a      	orrs	r2, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002df2:	bf00      	nop
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8002e78 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d115      	bne.n	8002e40 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e20:	43db      	mvns	r3, r3
 8002e22:	401a      	ands	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f003 0318 	and.w	r3, r3, #24
 8002e2a:	4914      	ldr	r1, [pc, #80]	@ (8002e7c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002e2c:	40d9      	lsrs	r1, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	400b      	ands	r3, r1
 8002e32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e36:	431a      	orrs	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002e3e:	e014      	b.n	8002e6a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	401a      	ands	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f003 0318 	and.w	r3, r3, #24
 8002e56:	4909      	ldr	r1, [pc, #36]	@ (8002e7c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002e58:	40d9      	lsrs	r1, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	400b      	ands	r3, r1
 8002e5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e62:	431a      	orrs	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002e6a:	bf00      	nop
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	58026000 	.word	0x58026000
 8002e7c:	000fffff 	.word	0x000fffff

08002e80 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 031f 	and.w	r3, r3, #31
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	4b04      	ldr	r3, [pc, #16]	@ (8002ed8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6093      	str	r3, [r2, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	5fffffc0 	.word	0x5fffffc0

08002edc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002eec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ef0:	d101      	bne.n	8002ef6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	4b05      	ldr	r3, [pc, #20]	@ (8002f28 <LL_ADC_EnableInternalRegulator+0x24>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	6fffffc0 	.word	0x6fffffc0

08002f2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f40:	d101      	bne.n	8002f46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	4b05      	ldr	r3, [pc, #20]	@ (8002f78 <LL_ADC_Enable+0x24>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	f043 0201 	orr.w	r2, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	7fffffc0 	.word	0x7fffffc0

08002f7c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	4b05      	ldr	r3, [pc, #20]	@ (8002fa0 <LL_ADC_Disable+0x24>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	f043 0202 	orr.w	r2, r3, #2
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	7fffffc0 	.word	0x7fffffc0

08002fa4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <LL_ADC_IsEnabled+0x18>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <LL_ADC_IsEnabled+0x1a>
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d101      	bne.n	8002fe2 <LL_ADC_IsDisableOngoing+0x18>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <LL_ADC_IsDisableOngoing+0x1a>
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	4b05      	ldr	r3, [pc, #20]	@ (8003014 <LL_ADC_REG_StartConversion+0x24>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	f043 0204 	orr.w	r2, r3, #4
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	7fffffc0 	.word	0x7fffffc0

08003018 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	4b05      	ldr	r3, [pc, #20]	@ (800303c <LL_ADC_REG_StopConversion+0x24>)
 8003026:	4013      	ands	r3, r2
 8003028:	f043 0210 	orr.w	r2, r3, #16
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	7fffffc0 	.word	0x7fffffc0

08003040 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b04      	cmp	r3, #4
 8003052:	d101      	bne.n	8003058 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
	...

08003068 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	4b05      	ldr	r3, [pc, #20]	@ (800308c <LL_ADC_INJ_StopConversion+0x24>)
 8003076:	4013      	ands	r3, r2
 8003078:	f043 0220 	orr.w	r2, r3, #32
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	7fffffc0 	.word	0x7fffffc0

08003090 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d101      	bne.n	80030a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030b8:	b590      	push	{r4, r7, lr}
 80030ba:	b089      	sub	sp, #36	@ 0x24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e1ee      	b.n	80034b0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d109      	bne.n	80030f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7fe ff37 	bl	8001f54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff feef 	bl	8002edc <LL_ADC_IsDeepPowerDownEnabled>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d004      	beq.n	800310e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fed5 	bl	8002eb8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ff0a 	bl	8002f2c <LL_ADC_IsInternalRegulatorEnabled>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d114      	bne.n	8003148 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff feee 	bl	8002f04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003128:	4b8e      	ldr	r3, [pc, #568]	@ (8003364 <HAL_ADC_Init+0x2ac>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	099b      	lsrs	r3, r3, #6
 800312e:	4a8e      	ldr	r2, [pc, #568]	@ (8003368 <HAL_ADC_Init+0x2b0>)
 8003130:	fba2 2303 	umull	r2, r3, r2, r3
 8003134:	099b      	lsrs	r3, r3, #6
 8003136:	3301      	adds	r3, #1
 8003138:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800313a:	e002      	b.n	8003142 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	3b01      	subs	r3, #1
 8003140:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f9      	bne.n	800313c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff feed 	bl	8002f2c <LL_ADC_IsInternalRegulatorEnabled>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10d      	bne.n	8003174 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315c:	f043 0210 	orr.w	r2, r3, #16
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003168:	f043 0201 	orr.w	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff61 	bl	8003040 <LL_ADC_REG_IsConversionOngoing>
 800317e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b00      	cmp	r3, #0
 800318a:	f040 8188 	bne.w	800349e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b00      	cmp	r3, #0
 8003192:	f040 8184 	bne.w	800349e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800319e:	f043 0202 	orr.w	r2, r3, #2
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fefa 	bl	8002fa4 <LL_ADC_IsEnabled>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d136      	bne.n	8003224 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a6c      	ldr	r2, [pc, #432]	@ (800336c <HAL_ADC_Init+0x2b4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d004      	beq.n	80031ca <HAL_ADC_Init+0x112>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003370 <HAL_ADC_Init+0x2b8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d10e      	bne.n	80031e8 <HAL_ADC_Init+0x130>
 80031ca:	4868      	ldr	r0, [pc, #416]	@ (800336c <HAL_ADC_Init+0x2b4>)
 80031cc:	f7ff feea 	bl	8002fa4 <LL_ADC_IsEnabled>
 80031d0:	4604      	mov	r4, r0
 80031d2:	4867      	ldr	r0, [pc, #412]	@ (8003370 <HAL_ADC_Init+0x2b8>)
 80031d4:	f7ff fee6 	bl	8002fa4 <LL_ADC_IsEnabled>
 80031d8:	4603      	mov	r3, r0
 80031da:	4323      	orrs	r3, r4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	e008      	b.n	80031fa <HAL_ADC_Init+0x142>
 80031e8:	4862      	ldr	r0, [pc, #392]	@ (8003374 <HAL_ADC_Init+0x2bc>)
 80031ea:	f7ff fedb 	bl	8002fa4 <LL_ADC_IsEnabled>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d012      	beq.n	8003224 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a5a      	ldr	r2, [pc, #360]	@ (800336c <HAL_ADC_Init+0x2b4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_ADC_Init+0x15a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a58      	ldr	r2, [pc, #352]	@ (8003370 <HAL_ADC_Init+0x2b8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <HAL_ADC_Init+0x15e>
 8003212:	4a59      	ldr	r2, [pc, #356]	@ (8003378 <HAL_ADC_Init+0x2c0>)
 8003214:	e000      	b.n	8003218 <HAL_ADC_Init+0x160>
 8003216:	4a59      	ldr	r2, [pc, #356]	@ (800337c <HAL_ADC_Init+0x2c4>)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4619      	mov	r1, r3
 800321e:	4610      	mov	r0, r2
 8003220:	f7ff fc10 	bl	8002a44 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a52      	ldr	r2, [pc, #328]	@ (8003374 <HAL_ADC_Init+0x2bc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d129      	bne.n	8003282 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	7e5b      	ldrb	r3, [r3, #25]
 8003232:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003238:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800323e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d013      	beq.n	8003270 <HAL_ADC_Init+0x1b8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b0c      	cmp	r3, #12
 800324e:	d00d      	beq.n	800326c <HAL_ADC_Init+0x1b4>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b1c      	cmp	r3, #28
 8003256:	d007      	beq.n	8003268 <HAL_ADC_Init+0x1b0>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b18      	cmp	r3, #24
 800325e:	d101      	bne.n	8003264 <HAL_ADC_Init+0x1ac>
 8003260:	2318      	movs	r3, #24
 8003262:	e006      	b.n	8003272 <HAL_ADC_Init+0x1ba>
 8003264:	2300      	movs	r3, #0
 8003266:	e004      	b.n	8003272 <HAL_ADC_Init+0x1ba>
 8003268:	2310      	movs	r3, #16
 800326a:	e002      	b.n	8003272 <HAL_ADC_Init+0x1ba>
 800326c:	2308      	movs	r3, #8
 800326e:	e000      	b.n	8003272 <HAL_ADC_Init+0x1ba>
 8003270:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003272:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800327a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800327c:	4313      	orrs	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	e00e      	b.n	80032a0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	7e5b      	ldrb	r3, [r3, #25]
 8003286:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800328c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003292:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3020 	ldrb.w	r3, [r3, #32]
 800329a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d106      	bne.n	80032b8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	3b01      	subs	r3, #1
 80032b0:	045b      	lsls	r3, r3, #17
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d009      	beq.n	80032d4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032cc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a26      	ldr	r2, [pc, #152]	@ (8003374 <HAL_ADC_Init+0x2bc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d115      	bne.n	800330a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	4b26      	ldr	r3, [pc, #152]	@ (8003380 <HAL_ADC_Init+0x2c8>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	69b9      	ldr	r1, [r7, #24]
 80032ee:	430b      	orrs	r3, r1
 80032f0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	611a      	str	r2, [r3, #16]
 8003308:	e009      	b.n	800331e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	4b1c      	ldr	r3, [pc, #112]	@ (8003384 <HAL_ADC_Init+0x2cc>)
 8003312:	4013      	ands	r3, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	69b9      	ldr	r1, [r7, #24]
 800331a:	430b      	orrs	r3, r1
 800331c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fe8c 	bl	8003040 <LL_ADC_REG_IsConversionOngoing>
 8003328:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff feae 	bl	8003090 <LL_ADC_INJ_IsConversionOngoing>
 8003334:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	f040 808e 	bne.w	800345a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	f040 808a 	bne.w	800345a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a0a      	ldr	r2, [pc, #40]	@ (8003374 <HAL_ADC_Init+0x2bc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d11b      	bne.n	8003388 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	7e1b      	ldrb	r3, [r3, #24]
 8003354:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800335c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	e018      	b.n	8003396 <HAL_ADC_Init+0x2de>
 8003364:	240001ac 	.word	0x240001ac
 8003368:	053e2d63 	.word	0x053e2d63
 800336c:	40022000 	.word	0x40022000
 8003370:	40022100 	.word	0x40022100
 8003374:	58026000 	.word	0x58026000
 8003378:	40022300 	.word	0x40022300
 800337c:	58026300 	.word	0x58026300
 8003380:	fff04007 	.word	0xfff04007
 8003384:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	7e1b      	ldrb	r3, [r3, #24]
 800338c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	4b46      	ldr	r3, [pc, #280]	@ (80034b8 <HAL_ADC_Init+0x400>)
 800339e:	4013      	ands	r3, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	69b9      	ldr	r1, [r7, #24]
 80033a6:	430b      	orrs	r3, r1
 80033a8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d137      	bne.n	8003424 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a3f      	ldr	r2, [pc, #252]	@ (80034bc <HAL_ADC_Init+0x404>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d116      	bne.n	80033f2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	4b3d      	ldr	r3, [pc, #244]	@ (80034c0 <HAL_ADC_Init+0x408>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80033d6:	4311      	orrs	r1, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80033dc:	4311      	orrs	r1, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80033e2:	430a      	orrs	r2, r1
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	611a      	str	r2, [r3, #16]
 80033f0:	e020      	b.n	8003434 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	4b32      	ldr	r3, [pc, #200]	@ (80034c4 <HAL_ADC_Init+0x40c>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003400:	3a01      	subs	r2, #1
 8003402:	0411      	lsls	r1, r2, #16
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003408:	4311      	orrs	r1, r2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800340e:	4311      	orrs	r1, r2
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003414:	430a      	orrs	r2, r1
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0201 	orr.w	r2, r2, #1
 8003420:	611a      	str	r2, [r3, #16]
 8003422:	e007      	b.n	8003434 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1b      	ldr	r2, [pc, #108]	@ (80034bc <HAL_ADC_Init+0x404>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d002      	beq.n	800345a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f001 faff 	bl	8004a58 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d10c      	bne.n	800347c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003468:	f023 010f 	bic.w	r1, r3, #15
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	1e5a      	subs	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	631a      	str	r2, [r3, #48]	@ 0x30
 800347a:	e007      	b.n	800348c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 020f 	bic.w	r2, r2, #15
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003490:	f023 0303 	bic.w	r3, r3, #3
 8003494:	f043 0201 	orr.w	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	661a      	str	r2, [r3, #96]	@ 0x60
 800349c:	e007      	b.n	80034ae <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a2:	f043 0210 	orr.w	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3724      	adds	r7, #36	@ 0x24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd90      	pop	{r4, r7, pc}
 80034b8:	ffffbffc 	.word	0xffffbffc
 80034bc:	58026000 	.word	0x58026000
 80034c0:	fc00f81f 	.word	0xfc00f81f
 80034c4:	fc00f81e 	.word	0xfc00f81e

080034c8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a5c      	ldr	r2, [pc, #368]	@ (8003648 <HAL_ADC_Start+0x180>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <HAL_ADC_Start+0x1c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a5b      	ldr	r2, [pc, #364]	@ (800364c <HAL_ADC_Start+0x184>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d101      	bne.n	80034e8 <HAL_ADC_Start+0x20>
 80034e4:	4b5a      	ldr	r3, [pc, #360]	@ (8003650 <HAL_ADC_Start+0x188>)
 80034e6:	e000      	b.n	80034ea <HAL_ADC_Start+0x22>
 80034e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003654 <HAL_ADC_Start+0x18c>)
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff fcc8 	bl	8002e80 <LL_ADC_GetMultimode>
 80034f0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff fda2 	bl	8003040 <LL_ADC_REG_IsConversionOngoing>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f040 809a 	bne.w	8003638 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_ADC_Start+0x4a>
 800350e:	2302      	movs	r3, #2
 8003510:	e095      	b.n	800363e <HAL_ADC_Start+0x176>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f001 f9b2 	bl	8004884 <ADC_Enable>
 8003520:	4603      	mov	r3, r0
 8003522:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003524:	7dfb      	ldrb	r3, [r7, #23]
 8003526:	2b00      	cmp	r3, #0
 8003528:	f040 8081 	bne.w	800362e <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003530:	4b49      	ldr	r3, [pc, #292]	@ (8003658 <HAL_ADC_Start+0x190>)
 8003532:	4013      	ands	r3, r2
 8003534:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a42      	ldr	r2, [pc, #264]	@ (800364c <HAL_ADC_Start+0x184>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d002      	beq.n	800354c <HAL_ADC_Start+0x84>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	e000      	b.n	800354e <HAL_ADC_Start+0x86>
 800354c:	4b3e      	ldr	r3, [pc, #248]	@ (8003648 <HAL_ADC_Start+0x180>)
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	4293      	cmp	r3, r2
 8003554:	d002      	beq.n	800355c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d105      	bne.n	8003568 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003560:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003574:	d106      	bne.n	8003584 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800357a:	f023 0206 	bic.w	r2, r3, #6
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	665a      	str	r2, [r3, #100]	@ 0x64
 8003582:	e002      	b.n	800358a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	221c      	movs	r2, #28
 8003590:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a2b      	ldr	r2, [pc, #172]	@ (800364c <HAL_ADC_Start+0x184>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d002      	beq.n	80035aa <HAL_ADC_Start+0xe2>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	e000      	b.n	80035ac <HAL_ADC_Start+0xe4>
 80035aa:	4b27      	ldr	r3, [pc, #156]	@ (8003648 <HAL_ADC_Start+0x180>)
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d008      	beq.n	80035c6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2b05      	cmp	r3, #5
 80035be:	d002      	beq.n	80035c6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2b09      	cmp	r3, #9
 80035c4:	d114      	bne.n	80035f0 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d007      	beq.n	80035e4 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fd01 	bl	8002ff0 <LL_ADC_REG_StartConversion>
 80035ee:	e025      	b.n	800363c <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a12      	ldr	r2, [pc, #72]	@ (800364c <HAL_ADC_Start+0x184>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d002      	beq.n	800360c <HAL_ADC_Start+0x144>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	e000      	b.n	800360e <HAL_ADC_Start+0x146>
 800360c:	4b0e      	ldr	r3, [pc, #56]	@ (8003648 <HAL_ADC_Start+0x180>)
 800360e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00f      	beq.n	800363c <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003620:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003624:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	661a      	str	r2, [r3, #96]	@ 0x60
 800362c:	e006      	b.n	800363c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003636:	e001      	b.n	800363c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003638:	2302      	movs	r3, #2
 800363a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800363c:	7dfb      	ldrb	r3, [r7, #23]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40022000 	.word	0x40022000
 800364c:	40022100 	.word	0x40022100
 8003650:	40022300 	.word	0x40022300
 8003654:	58026300 	.word	0x58026300
 8003658:	fffff0fe 	.word	0xfffff0fe

0800365c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_ADC_Stop+0x16>
 800366e:	2302      	movs	r3, #2
 8003670:	e021      	b.n	80036b6 <HAL_ADC_Stop+0x5a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800367a:	2103      	movs	r1, #3
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f001 f845 	bl	800470c <ADC_ConversionStop>
 8003682:	4603      	mov	r3, r0
 8003684:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10f      	bne.n	80036ac <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f001 f983 	bl	8004998 <ADC_Disable>
 8003692:	4603      	mov	r3, r0
 8003694:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d107      	bne.n	80036ac <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80036a0:	4b07      	ldr	r3, [pc, #28]	@ (80036c0 <HAL_ADC_Stop+0x64>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	f043 0201 	orr.w	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	ffffeefe 	.word	0xffffeefe

080036c4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a72      	ldr	r2, [pc, #456]	@ (800389c <HAL_ADC_PollForConversion+0x1d8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d004      	beq.n	80036e2 <HAL_ADC_PollForConversion+0x1e>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a70      	ldr	r2, [pc, #448]	@ (80038a0 <HAL_ADC_PollForConversion+0x1dc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_PollForConversion+0x22>
 80036e2:	4b70      	ldr	r3, [pc, #448]	@ (80038a4 <HAL_ADC_PollForConversion+0x1e0>)
 80036e4:	e000      	b.n	80036e8 <HAL_ADC_PollForConversion+0x24>
 80036e6:	4b70      	ldr	r3, [pc, #448]	@ (80038a8 <HAL_ADC_PollForConversion+0x1e4>)
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fbc9 	bl	8002e80 <LL_ADC_GetMultimode>
 80036ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d102      	bne.n	80036fe <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80036f8:	2308      	movs	r3, #8
 80036fa:	61fb      	str	r3, [r7, #28]
 80036fc:	e037      	b.n	800376e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2b05      	cmp	r3, #5
 8003708:	d002      	beq.n	8003710 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b09      	cmp	r3, #9
 800370e:	d111      	bne.n	8003734 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003722:	f043 0220 	orr.w	r2, r3, #32
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e0b1      	b.n	8003892 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800372e:	2304      	movs	r3, #4
 8003730:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003732:	e01c      	b.n	800376e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a58      	ldr	r2, [pc, #352]	@ (800389c <HAL_ADC_PollForConversion+0x1d8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d004      	beq.n	8003748 <HAL_ADC_PollForConversion+0x84>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a57      	ldr	r2, [pc, #348]	@ (80038a0 <HAL_ADC_PollForConversion+0x1dc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d101      	bne.n	800374c <HAL_ADC_PollForConversion+0x88>
 8003748:	4b56      	ldr	r3, [pc, #344]	@ (80038a4 <HAL_ADC_PollForConversion+0x1e0>)
 800374a:	e000      	b.n	800374e <HAL_ADC_PollForConversion+0x8a>
 800374c:	4b56      	ldr	r3, [pc, #344]	@ (80038a8 <HAL_ADC_PollForConversion+0x1e4>)
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff fba4 	bl	8002e9c <LL_ADC_GetMultiDMATransfer>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375e:	f043 0220 	orr.w	r2, r3, #32
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e093      	b.n	8003892 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800376a:	2304      	movs	r3, #4
 800376c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800376e:	f7ff f923 	bl	80029b8 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003774:	e021      	b.n	80037ba <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d01d      	beq.n	80037ba <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800377e:	f7ff f91b 	bl	80029b8 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <HAL_ADC_PollForConversion+0xd0>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d112      	bne.n	80037ba <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10b      	bne.n	80037ba <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a6:	f043 0204 	orr.w	r2, r3, #4
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e06b      	b.n	8003892 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0d6      	beq.n	8003776 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fa93 	bl	8002d04 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01c      	beq.n	800381e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	7e5b      	ldrb	r3, [r3, #25]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d118      	bne.n	800381e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d111      	bne.n	800381e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d105      	bne.n	800381e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003816:	f043 0201 	orr.w	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1f      	ldr	r2, [pc, #124]	@ (80038a0 <HAL_ADC_PollForConversion+0x1dc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d002      	beq.n	800382e <HAL_ADC_PollForConversion+0x16a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	e000      	b.n	8003830 <HAL_ADC_PollForConversion+0x16c>
 800382e:	4b1b      	ldr	r3, [pc, #108]	@ (800389c <HAL_ADC_PollForConversion+0x1d8>)
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	4293      	cmp	r3, r2
 8003836:	d008      	beq.n	800384a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2b05      	cmp	r3, #5
 8003842:	d002      	beq.n	800384a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b09      	cmp	r3, #9
 8003848:	d104      	bne.n	8003854 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	e00c      	b.n	800386e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a11      	ldr	r2, [pc, #68]	@ (80038a0 <HAL_ADC_PollForConversion+0x1dc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d002      	beq.n	8003864 <HAL_ADC_PollForConversion+0x1a0>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	e000      	b.n	8003866 <HAL_ADC_PollForConversion+0x1a2>
 8003864:	4b0d      	ldr	r3, [pc, #52]	@ (800389c <HAL_ADC_PollForConversion+0x1d8>)
 8003866:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	2b08      	cmp	r3, #8
 8003872:	d104      	bne.n	800387e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2208      	movs	r2, #8
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	e008      	b.n	8003890 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d103      	bne.n	8003890 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	220c      	movs	r2, #12
 800388e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3720      	adds	r7, #32
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40022000 	.word	0x40022000
 80038a0:	40022100 	.word	0x40022100
 80038a4:	40022300 	.word	0x40022300
 80038a8:	58026300 	.word	0x58026300

080038ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	@ 0x28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80038d0:	2300      	movs	r3, #0
 80038d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a87      	ldr	r2, [pc, #540]	@ (8003b08 <HAL_ADC_IRQHandler+0x240>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d004      	beq.n	80038f8 <HAL_ADC_IRQHandler+0x30>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a86      	ldr	r2, [pc, #536]	@ (8003b0c <HAL_ADC_IRQHandler+0x244>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d101      	bne.n	80038fc <HAL_ADC_IRQHandler+0x34>
 80038f8:	4b85      	ldr	r3, [pc, #532]	@ (8003b10 <HAL_ADC_IRQHandler+0x248>)
 80038fa:	e000      	b.n	80038fe <HAL_ADC_IRQHandler+0x36>
 80038fc:	4b85      	ldr	r3, [pc, #532]	@ (8003b14 <HAL_ADC_IRQHandler+0x24c>)
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff fabe 	bl	8002e80 <LL_ADC_GetMultimode>
 8003904:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d017      	beq.n	8003940 <HAL_ADC_IRQHandler+0x78>
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d012      	beq.n	8003940 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	d105      	bne.n	8003932 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f001 fa64 	bl	8004e00 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2202      	movs	r2, #2
 800393e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b00      	cmp	r3, #0
 8003948:	d004      	beq.n	8003954 <HAL_ADC_IRQHandler+0x8c>
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10a      	bne.n	800396a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 8083 	beq.w	8003a66 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d07d      	beq.n	8003a66 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	2b00      	cmp	r3, #0
 8003974:	d105      	bne.n	8003982 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800397a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff f9bc 	bl	8002d04 <LL_ADC_REG_IsTriggerSourceSWStart>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d062      	beq.n	8003a58 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a5d      	ldr	r2, [pc, #372]	@ (8003b0c <HAL_ADC_IRQHandler+0x244>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d002      	beq.n	80039a2 <HAL_ADC_IRQHandler+0xda>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	e000      	b.n	80039a4 <HAL_ADC_IRQHandler+0xdc>
 80039a2:	4b59      	ldr	r3, [pc, #356]	@ (8003b08 <HAL_ADC_IRQHandler+0x240>)
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d008      	beq.n	80039be <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2b05      	cmp	r3, #5
 80039b6:	d002      	beq.n	80039be <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2b09      	cmp	r3, #9
 80039bc:	d104      	bne.n	80039c8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	623b      	str	r3, [r7, #32]
 80039c6:	e00c      	b.n	80039e2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a4f      	ldr	r2, [pc, #316]	@ (8003b0c <HAL_ADC_IRQHandler+0x244>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d002      	beq.n	80039d8 <HAL_ADC_IRQHandler+0x110>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	e000      	b.n	80039da <HAL_ADC_IRQHandler+0x112>
 80039d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003b08 <HAL_ADC_IRQHandler+0x240>)
 80039da:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d135      	bne.n	8003a58 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d12e      	bne.n	8003a58 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fb1e 	bl	8003040 <LL_ADC_REG_IsConversionOngoing>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d11a      	bne.n	8003a40 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 020c 	bic.w	r2, r2, #12
 8003a18:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d112      	bne.n	8003a58 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a36:	f043 0201 	orr.w	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a3e:	e00b      	b.n	8003a58 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a44:	f043 0210 	orr.w	r2, r3, #16
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a50:	f043 0201 	orr.w	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7fe f989 	bl	8001d70 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	220c      	movs	r2, #12
 8003a64:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d004      	beq.n	8003a7a <HAL_ADC_IRQHandler+0x1b2>
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10b      	bne.n	8003a92 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 80a0 	beq.w	8003bc6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 809a 	beq.w	8003bc6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d105      	bne.n	8003aaa <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff f967 	bl	8002d82 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003ab4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff f922 	bl	8002d04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ac0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a11      	ldr	r2, [pc, #68]	@ (8003b0c <HAL_ADC_IRQHandler+0x244>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d002      	beq.n	8003ad2 <HAL_ADC_IRQHandler+0x20a>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	e000      	b.n	8003ad4 <HAL_ADC_IRQHandler+0x20c>
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8003b08 <HAL_ADC_IRQHandler+0x240>)
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d008      	beq.n	8003aee <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2b06      	cmp	r3, #6
 8003ae6:	d002      	beq.n	8003aee <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2b07      	cmp	r3, #7
 8003aec:	d104      	bne.n	8003af8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	623b      	str	r3, [r7, #32]
 8003af6:	e014      	b.n	8003b22 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a03      	ldr	r2, [pc, #12]	@ (8003b0c <HAL_ADC_IRQHandler+0x244>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00a      	beq.n	8003b18 <HAL_ADC_IRQHandler+0x250>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	e008      	b.n	8003b1a <HAL_ADC_IRQHandler+0x252>
 8003b08:	40022000 	.word	0x40022000
 8003b0c:	40022100 	.word	0x40022100
 8003b10:	40022300 	.word	0x40022300
 8003b14:	58026300 	.word	0x58026300
 8003b18:	4b84      	ldr	r3, [pc, #528]	@ (8003d2c <HAL_ADC_IRQHandler+0x464>)
 8003b1a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d047      	beq.n	8003bb8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <HAL_ADC_IRQHandler+0x27a>
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d03f      	beq.n	8003bb8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d13a      	bne.n	8003bb8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4c:	2b40      	cmp	r3, #64	@ 0x40
 8003b4e:	d133      	bne.n	8003bb8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d12e      	bne.n	8003bb8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fa96 	bl	8003090 <LL_ADC_INJ_IsConversionOngoing>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d11a      	bne.n	8003ba0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b78:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d112      	bne.n	8003bb8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b96:	f043 0201 	orr.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	661a      	str	r2, [r3, #96]	@ 0x60
 8003b9e:	e00b      	b.n	8003bb8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba4:	f043 0210 	orr.w	r2, r3, #16
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bb0:	f043 0201 	orr.w	r2, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f001 f8f9 	bl	8004db0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2260      	movs	r2, #96	@ 0x60
 8003bc4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d011      	beq.n	8003bf4 <HAL_ADC_IRQHandler+0x32c>
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00c      	beq.n	8003bf4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bde:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f8a8 	bl	8003d3c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2280      	movs	r2, #128	@ 0x80
 8003bf2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d012      	beq.n	8003c24 <HAL_ADC_IRQHandler+0x35c>
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00d      	beq.n	8003c24 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c0c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f001 f8df 	bl	8004dd8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d012      	beq.n	8003c54 <HAL_ADC_IRQHandler+0x38c>
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00d      	beq.n	8003c54 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c3c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f001 f8d1 	bl	8004dec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d043      	beq.n	8003ce6 <HAL_ADC_IRQHandler+0x41e>
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d03e      	beq.n	8003ce6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d102      	bne.n	8003c76 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003c70:	2301      	movs	r3, #1
 8003c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c74:	e021      	b.n	8003cba <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d015      	beq.n	8003ca8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a2a      	ldr	r2, [pc, #168]	@ (8003d2c <HAL_ADC_IRQHandler+0x464>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d004      	beq.n	8003c90 <HAL_ADC_IRQHandler+0x3c8>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a29      	ldr	r2, [pc, #164]	@ (8003d30 <HAL_ADC_IRQHandler+0x468>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d101      	bne.n	8003c94 <HAL_ADC_IRQHandler+0x3cc>
 8003c90:	4b28      	ldr	r3, [pc, #160]	@ (8003d34 <HAL_ADC_IRQHandler+0x46c>)
 8003c92:	e000      	b.n	8003c96 <HAL_ADC_IRQHandler+0x3ce>
 8003c94:	4b28      	ldr	r3, [pc, #160]	@ (8003d38 <HAL_ADC_IRQHandler+0x470>)
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff f900 	bl	8002e9c <LL_ADC_GetMultiDMATransfer>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00b      	beq.n	8003cba <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ca6:	e008      	b.n	8003cba <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d10e      	bne.n	8003cde <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cd0:	f043 0202 	orr.w	r2, r3, #2
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f839 	bl	8003d50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2210      	movs	r2, #16
 8003ce4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d018      	beq.n	8003d22 <HAL_ADC_IRQHandler+0x45a>
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d013      	beq.n	8003d22 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cfe:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d0a:	f043 0208 	orr.w	r2, r3, #8
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d1a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f001 f851 	bl	8004dc4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003d22:	bf00      	nop
 8003d24:	3728      	adds	r7, #40	@ 0x28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40022000 	.word	0x40022000
 8003d30:	40022100 	.word	0x40022100
 8003d34:	40022300 	.word	0x40022300
 8003d38:	58026300 	.word	0x58026300

08003d3c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b0a5      	sub	sp, #148	@ 0x94
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d7e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4aa4      	ldr	r2, [pc, #656]	@ (8004018 <HAL_ADC_ConfigChannel+0x2b4>)
 8003d86:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d102      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x34>
 8003d92:	2302      	movs	r3, #2
 8003d94:	f000 bca2 	b.w	80046dc <HAL_ADC_ConfigChannel+0x978>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff f94b 	bl	8003040 <LL_ADC_REG_IsConversionOngoing>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f040 8486 	bne.w	80046be <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	db31      	blt.n	8003e1e <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a97      	ldr	r2, [pc, #604]	@ (800401c <HAL_ADC_ConfigChannel+0x2b8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d02c      	beq.n	8003e1e <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d108      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x7e>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	0e9b      	lsrs	r3, r3, #26
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2201      	movs	r2, #1
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	e016      	b.n	8003e10 <HAL_ADC_ConfigChannel+0xac>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dea:	fa93 f3a3 	rbit	r3, r3
 8003dee:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003df0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003df2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003df4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8003dfa:	2320      	movs	r3, #32
 8003dfc:	e003      	b.n	8003e06 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8003dfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e00:	fab3 f383 	clz	r3, r3
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	69d1      	ldr	r1, [r2, #28]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6859      	ldr	r1, [r3, #4]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f7fe ff7d 	bl	8002d2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff f903 	bl	8003040 <LL_ADC_REG_IsConversionOngoing>
 8003e3a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff f924 	bl	8003090 <LL_ADC_INJ_IsConversionOngoing>
 8003e48:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f040 824a 	bne.w	80042ea <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f040 8245 	bne.w	80042ea <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	6819      	ldr	r1, [r3, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f7fe ff9b 	bl	8002da8 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a69      	ldr	r2, [pc, #420]	@ (800401c <HAL_ADC_ConfigChannel+0x2b8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d10d      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	08db      	lsrs	r3, r3, #3
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e96:	e032      	b.n	8003efe <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e98:	4b61      	ldr	r3, [pc, #388]	@ (8004020 <HAL_ADC_ConfigChannel+0x2bc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003ea0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ea4:	d10b      	bne.n	8003ebe <HAL_ADC_ConfigChannel+0x15a>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	695a      	ldr	r2, [r3, #20]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	089b      	lsrs	r3, r3, #2
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	e01d      	b.n	8003efa <HAL_ADC_ConfigChannel+0x196>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10b      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x180>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	695a      	ldr	r2, [r3, #20]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	e00a      	b.n	8003efa <HAL_ADC_ConfigChannel+0x196>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	695a      	ldr	r2, [r3, #20]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	089b      	lsrs	r3, r3, #2
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d048      	beq.n	8003f98 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	6919      	ldr	r1, [r3, #16]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f16:	f7fe fe03 	bl	8002b20 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a3f      	ldr	r2, [pc, #252]	@ (800401c <HAL_ADC_ConfigChannel+0x2b8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d119      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	6919      	ldr	r1, [r3, #16]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	461a      	mov	r2, r3
 8003f32:	f7fe fe9b 	bl	8002c6c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6919      	ldr	r1, [r3, #16]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d102      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x1ea>
 8003f48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f4c:	e000      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x1ec>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	461a      	mov	r2, r3
 8003f52:	f7fe fe69 	bl	8002c28 <LL_ADC_SetOffsetSaturation>
 8003f56:	e1c8      	b.n	80042ea <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	6919      	ldr	r1, [r3, #16]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d102      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x20c>
 8003f6a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003f6e:	e000      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x20e>
 8003f70:	2300      	movs	r3, #0
 8003f72:	461a      	mov	r2, r3
 8003f74:	f7fe fe36 	bl	8002be4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	6919      	ldr	r1, [r3, #16]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	7e1b      	ldrb	r3, [r3, #24]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d102      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x22a>
 8003f88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f8c:	e000      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x22c>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	461a      	mov	r2, r3
 8003f92:	f7fe fe0d 	bl	8002bb0 <LL_ADC_SetDataRightShift>
 8003f96:	e1a8      	b.n	80042ea <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800401c <HAL_ADC_ConfigChannel+0x2b8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	f040 815b 	bne.w	800425a <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe fdea 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x26c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe fddf 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	0e9b      	lsrs	r3, r3, #26
 8003fca:	f003 021f 	and.w	r2, r3, #31
 8003fce:	e017      	b.n	8004000 <HAL_ADC_ConfigChannel+0x29c>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe fdd4 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fe2:	fa93 f3a3 	rbit	r3, r3
 8003fe6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003fe8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003fec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003ff2:	2320      	movs	r3, #32
 8003ff4:	e003      	b.n	8003ffe <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8003ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ff8:	fab3 f383 	clz	r3, r3
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10b      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x2c0>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	0e9b      	lsrs	r3, r3, #26
 8004012:	f003 031f 	and.w	r3, r3, #31
 8004016:	e017      	b.n	8004048 <HAL_ADC_ConfigChannel+0x2e4>
 8004018:	47ff0000 	.word	0x47ff0000
 800401c:	58026000 	.word	0x58026000
 8004020:	5c001000 	.word	0x5c001000
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800402c:	fa93 f3a3 	rbit	r3, r3
 8004030:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004032:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004034:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004036:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800403c:	2320      	movs	r3, #32
 800403e:	e003      	b.n	8004048 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8004040:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004042:	fab3 f383 	clz	r3, r3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	429a      	cmp	r2, r3
 800404a:	d106      	bne.n	800405a <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2200      	movs	r2, #0
 8004052:	2100      	movs	r1, #0
 8004054:	4618      	mov	r0, r3
 8004056:	f7fe fe2b 	bl	8002cb0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2101      	movs	r1, #1
 8004060:	4618      	mov	r0, r3
 8004062:	f7fe fd8f 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 8004066:	4603      	mov	r3, r0
 8004068:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10a      	bne.n	8004086 <HAL_ADC_ConfigChannel+0x322>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2101      	movs	r1, #1
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fd84 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 800407c:	4603      	mov	r3, r0
 800407e:	0e9b      	lsrs	r3, r3, #26
 8004080:	f003 021f 	and.w	r2, r3, #31
 8004084:	e017      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x352>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2101      	movs	r1, #1
 800408c:	4618      	mov	r0, r3
 800408e:	f7fe fd79 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 8004092:	4603      	mov	r3, r0
 8004094:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004098:	fa93 f3a3 	rbit	r3, r3
 800409c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800409e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80040a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 80040a8:	2320      	movs	r3, #32
 80040aa:	e003      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 80040ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ae:	fab3 f383 	clz	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d105      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x36a>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	0e9b      	lsrs	r3, r3, #26
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	e011      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x38e>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040d6:	fa93 f3a3 	rbit	r3, r3
 80040da:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80040dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80040e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80040e6:	2320      	movs	r3, #32
 80040e8:	e003      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80040ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ec:	fab3 f383 	clz	r3, r3
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d106      	bne.n	8004104 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2200      	movs	r2, #0
 80040fc:	2101      	movs	r1, #1
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe fdd6 	bl	8002cb0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2102      	movs	r1, #2
 800410a:	4618      	mov	r0, r3
 800410c:	f7fe fd3a 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 8004110:	4603      	mov	r3, r0
 8004112:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x3cc>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2102      	movs	r1, #2
 8004120:	4618      	mov	r0, r3
 8004122:	f7fe fd2f 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 8004126:	4603      	mov	r3, r0
 8004128:	0e9b      	lsrs	r3, r3, #26
 800412a:	f003 021f 	and.w	r2, r3, #31
 800412e:	e017      	b.n	8004160 <HAL_ADC_ConfigChannel+0x3fc>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2102      	movs	r1, #2
 8004136:	4618      	mov	r0, r3
 8004138:	f7fe fd24 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 800413c:	4603      	mov	r3, r0
 800413e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004142:	fa93 f3a3 	rbit	r3, r3
 8004146:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800414a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800414c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004152:	2320      	movs	r3, #32
 8004154:	e003      	b.n	800415e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004158:	fab3 f383 	clz	r3, r3
 800415c:	b2db      	uxtb	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004168:	2b00      	cmp	r3, #0
 800416a:	d105      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x414>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	0e9b      	lsrs	r3, r3, #26
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	e011      	b.n	800419c <HAL_ADC_ConfigChannel+0x438>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004180:	fa93 f3a3 	rbit	r3, r3
 8004184:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004188:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800418a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004190:	2320      	movs	r3, #32
 8004192:	e003      	b.n	800419c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004196:	fab3 f383 	clz	r3, r3
 800419a:	b2db      	uxtb	r3, r3
 800419c:	429a      	cmp	r2, r3
 800419e:	d106      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2200      	movs	r2, #0
 80041a6:	2102      	movs	r1, #2
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fe fd81 	bl	8002cb0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2103      	movs	r1, #3
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fe fce5 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10a      	bne.n	80041da <HAL_ADC_ConfigChannel+0x476>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2103      	movs	r1, #3
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe fcda 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 80041d0:	4603      	mov	r3, r0
 80041d2:	0e9b      	lsrs	r3, r3, #26
 80041d4:	f003 021f 	and.w	r2, r3, #31
 80041d8:	e017      	b.n	800420a <HAL_ADC_ConfigChannel+0x4a6>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2103      	movs	r1, #3
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fe fccf 	bl	8002b84 <LL_ADC_GetOffsetChannel>
 80041e6:	4603      	mov	r3, r0
 80041e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	fa93 f3a3 	rbit	r3, r3
 80041f0:	61fb      	str	r3, [r7, #28]
  return result;
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80041fc:	2320      	movs	r3, #32
 80041fe:	e003      	b.n	8004208 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004202:	fab3 f383 	clz	r3, r3
 8004206:	b2db      	uxtb	r3, r3
 8004208:	461a      	mov	r2, r3
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004212:	2b00      	cmp	r3, #0
 8004214:	d105      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x4be>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	0e9b      	lsrs	r3, r3, #26
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	e011      	b.n	8004246 <HAL_ADC_ConfigChannel+0x4e2>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	fa93 f3a3 	rbit	r3, r3
 800422e:	613b      	str	r3, [r7, #16]
  return result;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800423a:	2320      	movs	r3, #32
 800423c:	e003      	b.n	8004246 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	fab3 f383 	clz	r3, r3
 8004244:	b2db      	uxtb	r3, r3
 8004246:	429a      	cmp	r2, r3
 8004248:	d14f      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2200      	movs	r2, #0
 8004250:	2103      	movs	r1, #3
 8004252:	4618      	mov	r0, r3
 8004254:	f7fe fd2c 	bl	8002cb0 <LL_ADC_SetOffsetState>
 8004258:	e047      	b.n	80042ea <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004260:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	069b      	lsls	r3, r3, #26
 800426a:	429a      	cmp	r2, r3
 800426c:	d107      	bne.n	800427e <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800427c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004284:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	069b      	lsls	r3, r3, #26
 800428e:	429a      	cmp	r2, r3
 8004290:	d107      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042a0:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	069b      	lsls	r3, r3, #26
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d107      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042c4:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	069b      	lsls	r3, r3, #26
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d107      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042e8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe fe58 	bl	8002fa4 <LL_ADC_IsEnabled>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f040 81ea 	bne.w	80046d0 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	6819      	ldr	r1, [r3, #0]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	461a      	mov	r2, r3
 800430a:	f7fe fd79 	bl	8002e00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	4a7a      	ldr	r2, [pc, #488]	@ (80044fc <HAL_ADC_ConfigChannel+0x798>)
 8004314:	4293      	cmp	r3, r2
 8004316:	f040 80e0 	bne.w	80044da <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4977      	ldr	r1, [pc, #476]	@ (8004500 <HAL_ADC_ConfigChannel+0x79c>)
 8004324:	428b      	cmp	r3, r1
 8004326:	d147      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x654>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4975      	ldr	r1, [pc, #468]	@ (8004504 <HAL_ADC_ConfigChannel+0x7a0>)
 800432e:	428b      	cmp	r3, r1
 8004330:	d040      	beq.n	80043b4 <HAL_ADC_ConfigChannel+0x650>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4974      	ldr	r1, [pc, #464]	@ (8004508 <HAL_ADC_ConfigChannel+0x7a4>)
 8004338:	428b      	cmp	r3, r1
 800433a:	d039      	beq.n	80043b0 <HAL_ADC_ConfigChannel+0x64c>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4972      	ldr	r1, [pc, #456]	@ (800450c <HAL_ADC_ConfigChannel+0x7a8>)
 8004342:	428b      	cmp	r3, r1
 8004344:	d032      	beq.n	80043ac <HAL_ADC_ConfigChannel+0x648>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4971      	ldr	r1, [pc, #452]	@ (8004510 <HAL_ADC_ConfigChannel+0x7ac>)
 800434c:	428b      	cmp	r3, r1
 800434e:	d02b      	beq.n	80043a8 <HAL_ADC_ConfigChannel+0x644>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	496f      	ldr	r1, [pc, #444]	@ (8004514 <HAL_ADC_ConfigChannel+0x7b0>)
 8004356:	428b      	cmp	r3, r1
 8004358:	d024      	beq.n	80043a4 <HAL_ADC_ConfigChannel+0x640>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	496e      	ldr	r1, [pc, #440]	@ (8004518 <HAL_ADC_ConfigChannel+0x7b4>)
 8004360:	428b      	cmp	r3, r1
 8004362:	d01d      	beq.n	80043a0 <HAL_ADC_ConfigChannel+0x63c>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	496c      	ldr	r1, [pc, #432]	@ (800451c <HAL_ADC_ConfigChannel+0x7b8>)
 800436a:	428b      	cmp	r3, r1
 800436c:	d016      	beq.n	800439c <HAL_ADC_ConfigChannel+0x638>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	496b      	ldr	r1, [pc, #428]	@ (8004520 <HAL_ADC_ConfigChannel+0x7bc>)
 8004374:	428b      	cmp	r3, r1
 8004376:	d00f      	beq.n	8004398 <HAL_ADC_ConfigChannel+0x634>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4969      	ldr	r1, [pc, #420]	@ (8004524 <HAL_ADC_ConfigChannel+0x7c0>)
 800437e:	428b      	cmp	r3, r1
 8004380:	d008      	beq.n	8004394 <HAL_ADC_ConfigChannel+0x630>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4968      	ldr	r1, [pc, #416]	@ (8004528 <HAL_ADC_ConfigChannel+0x7c4>)
 8004388:	428b      	cmp	r3, r1
 800438a:	d101      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x62c>
 800438c:	4b67      	ldr	r3, [pc, #412]	@ (800452c <HAL_ADC_ConfigChannel+0x7c8>)
 800438e:	e0a0      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 8004390:	2300      	movs	r3, #0
 8004392:	e09e      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 8004394:	4b66      	ldr	r3, [pc, #408]	@ (8004530 <HAL_ADC_ConfigChannel+0x7cc>)
 8004396:	e09c      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 8004398:	4b66      	ldr	r3, [pc, #408]	@ (8004534 <HAL_ADC_ConfigChannel+0x7d0>)
 800439a:	e09a      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 800439c:	4b60      	ldr	r3, [pc, #384]	@ (8004520 <HAL_ADC_ConfigChannel+0x7bc>)
 800439e:	e098      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 80043a0:	4b5e      	ldr	r3, [pc, #376]	@ (800451c <HAL_ADC_ConfigChannel+0x7b8>)
 80043a2:	e096      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 80043a4:	4b64      	ldr	r3, [pc, #400]	@ (8004538 <HAL_ADC_ConfigChannel+0x7d4>)
 80043a6:	e094      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 80043a8:	4b64      	ldr	r3, [pc, #400]	@ (800453c <HAL_ADC_ConfigChannel+0x7d8>)
 80043aa:	e092      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 80043ac:	4b64      	ldr	r3, [pc, #400]	@ (8004540 <HAL_ADC_ConfigChannel+0x7dc>)
 80043ae:	e090      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 80043b0:	4b64      	ldr	r3, [pc, #400]	@ (8004544 <HAL_ADC_ConfigChannel+0x7e0>)
 80043b2:	e08e      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 80043b4:	2301      	movs	r3, #1
 80043b6:	e08c      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4962      	ldr	r1, [pc, #392]	@ (8004548 <HAL_ADC_ConfigChannel+0x7e4>)
 80043be:	428b      	cmp	r3, r1
 80043c0:	d140      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x6e0>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	494f      	ldr	r1, [pc, #316]	@ (8004504 <HAL_ADC_ConfigChannel+0x7a0>)
 80043c8:	428b      	cmp	r3, r1
 80043ca:	d039      	beq.n	8004440 <HAL_ADC_ConfigChannel+0x6dc>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	494d      	ldr	r1, [pc, #308]	@ (8004508 <HAL_ADC_ConfigChannel+0x7a4>)
 80043d2:	428b      	cmp	r3, r1
 80043d4:	d032      	beq.n	800443c <HAL_ADC_ConfigChannel+0x6d8>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	494c      	ldr	r1, [pc, #304]	@ (800450c <HAL_ADC_ConfigChannel+0x7a8>)
 80043dc:	428b      	cmp	r3, r1
 80043de:	d02b      	beq.n	8004438 <HAL_ADC_ConfigChannel+0x6d4>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	494a      	ldr	r1, [pc, #296]	@ (8004510 <HAL_ADC_ConfigChannel+0x7ac>)
 80043e6:	428b      	cmp	r3, r1
 80043e8:	d024      	beq.n	8004434 <HAL_ADC_ConfigChannel+0x6d0>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4949      	ldr	r1, [pc, #292]	@ (8004514 <HAL_ADC_ConfigChannel+0x7b0>)
 80043f0:	428b      	cmp	r3, r1
 80043f2:	d01d      	beq.n	8004430 <HAL_ADC_ConfigChannel+0x6cc>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4947      	ldr	r1, [pc, #284]	@ (8004518 <HAL_ADC_ConfigChannel+0x7b4>)
 80043fa:	428b      	cmp	r3, r1
 80043fc:	d016      	beq.n	800442c <HAL_ADC_ConfigChannel+0x6c8>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4946      	ldr	r1, [pc, #280]	@ (800451c <HAL_ADC_ConfigChannel+0x7b8>)
 8004404:	428b      	cmp	r3, r1
 8004406:	d00f      	beq.n	8004428 <HAL_ADC_ConfigChannel+0x6c4>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4944      	ldr	r1, [pc, #272]	@ (8004520 <HAL_ADC_ConfigChannel+0x7bc>)
 800440e:	428b      	cmp	r3, r1
 8004410:	d008      	beq.n	8004424 <HAL_ADC_ConfigChannel+0x6c0>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4944      	ldr	r1, [pc, #272]	@ (8004528 <HAL_ADC_ConfigChannel+0x7c4>)
 8004418:	428b      	cmp	r3, r1
 800441a:	d101      	bne.n	8004420 <HAL_ADC_ConfigChannel+0x6bc>
 800441c:	4b43      	ldr	r3, [pc, #268]	@ (800452c <HAL_ADC_ConfigChannel+0x7c8>)
 800441e:	e058      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 8004420:	2300      	movs	r3, #0
 8004422:	e056      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 8004424:	4b43      	ldr	r3, [pc, #268]	@ (8004534 <HAL_ADC_ConfigChannel+0x7d0>)
 8004426:	e054      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 8004428:	4b3d      	ldr	r3, [pc, #244]	@ (8004520 <HAL_ADC_ConfigChannel+0x7bc>)
 800442a:	e052      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 800442c:	4b3b      	ldr	r3, [pc, #236]	@ (800451c <HAL_ADC_ConfigChannel+0x7b8>)
 800442e:	e050      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 8004430:	4b41      	ldr	r3, [pc, #260]	@ (8004538 <HAL_ADC_ConfigChannel+0x7d4>)
 8004432:	e04e      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 8004434:	4b41      	ldr	r3, [pc, #260]	@ (800453c <HAL_ADC_ConfigChannel+0x7d8>)
 8004436:	e04c      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 8004438:	4b41      	ldr	r3, [pc, #260]	@ (8004540 <HAL_ADC_ConfigChannel+0x7dc>)
 800443a:	e04a      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 800443c:	4b41      	ldr	r3, [pc, #260]	@ (8004544 <HAL_ADC_ConfigChannel+0x7e0>)
 800443e:	e048      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 8004440:	2301      	movs	r3, #1
 8004442:	e046      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4940      	ldr	r1, [pc, #256]	@ (800454c <HAL_ADC_ConfigChannel+0x7e8>)
 800444a:	428b      	cmp	r3, r1
 800444c:	d140      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x76c>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	492c      	ldr	r1, [pc, #176]	@ (8004504 <HAL_ADC_ConfigChannel+0x7a0>)
 8004454:	428b      	cmp	r3, r1
 8004456:	d039      	beq.n	80044cc <HAL_ADC_ConfigChannel+0x768>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	492a      	ldr	r1, [pc, #168]	@ (8004508 <HAL_ADC_ConfigChannel+0x7a4>)
 800445e:	428b      	cmp	r3, r1
 8004460:	d032      	beq.n	80044c8 <HAL_ADC_ConfigChannel+0x764>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4929      	ldr	r1, [pc, #164]	@ (800450c <HAL_ADC_ConfigChannel+0x7a8>)
 8004468:	428b      	cmp	r3, r1
 800446a:	d02b      	beq.n	80044c4 <HAL_ADC_ConfigChannel+0x760>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4927      	ldr	r1, [pc, #156]	@ (8004510 <HAL_ADC_ConfigChannel+0x7ac>)
 8004472:	428b      	cmp	r3, r1
 8004474:	d024      	beq.n	80044c0 <HAL_ADC_ConfigChannel+0x75c>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4926      	ldr	r1, [pc, #152]	@ (8004514 <HAL_ADC_ConfigChannel+0x7b0>)
 800447c:	428b      	cmp	r3, r1
 800447e:	d01d      	beq.n	80044bc <HAL_ADC_ConfigChannel+0x758>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4924      	ldr	r1, [pc, #144]	@ (8004518 <HAL_ADC_ConfigChannel+0x7b4>)
 8004486:	428b      	cmp	r3, r1
 8004488:	d016      	beq.n	80044b8 <HAL_ADC_ConfigChannel+0x754>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4923      	ldr	r1, [pc, #140]	@ (800451c <HAL_ADC_ConfigChannel+0x7b8>)
 8004490:	428b      	cmp	r3, r1
 8004492:	d00f      	beq.n	80044b4 <HAL_ADC_ConfigChannel+0x750>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4926      	ldr	r1, [pc, #152]	@ (8004534 <HAL_ADC_ConfigChannel+0x7d0>)
 800449a:	428b      	cmp	r3, r1
 800449c:	d008      	beq.n	80044b0 <HAL_ADC_ConfigChannel+0x74c>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	492b      	ldr	r1, [pc, #172]	@ (8004550 <HAL_ADC_ConfigChannel+0x7ec>)
 80044a4:	428b      	cmp	r3, r1
 80044a6:	d101      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x748>
 80044a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004554 <HAL_ADC_ConfigChannel+0x7f0>)
 80044aa:	e012      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 80044ac:	2300      	movs	r3, #0
 80044ae:	e010      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 80044b0:	4b27      	ldr	r3, [pc, #156]	@ (8004550 <HAL_ADC_ConfigChannel+0x7ec>)
 80044b2:	e00e      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 80044b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004520 <HAL_ADC_ConfigChannel+0x7bc>)
 80044b6:	e00c      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 80044b8:	4b18      	ldr	r3, [pc, #96]	@ (800451c <HAL_ADC_ConfigChannel+0x7b8>)
 80044ba:	e00a      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 80044bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004538 <HAL_ADC_ConfigChannel+0x7d4>)
 80044be:	e008      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 80044c0:	4b1e      	ldr	r3, [pc, #120]	@ (800453c <HAL_ADC_ConfigChannel+0x7d8>)
 80044c2:	e006      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 80044c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004540 <HAL_ADC_ConfigChannel+0x7dc>)
 80044c6:	e004      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 80044c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004544 <HAL_ADC_ConfigChannel+0x7e0>)
 80044ca:	e002      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x76e>
 80044d0:	2300      	movs	r3, #0
 80044d2:	4619      	mov	r1, r3
 80044d4:	4610      	mov	r0, r2
 80044d6:	f7fe fae9 	bl	8002aac <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f280 80f6 	bge.w	80046d0 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a05      	ldr	r2, [pc, #20]	@ (8004500 <HAL_ADC_ConfigChannel+0x79c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d004      	beq.n	80044f8 <HAL_ADC_ConfigChannel+0x794>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a15      	ldr	r2, [pc, #84]	@ (8004548 <HAL_ADC_ConfigChannel+0x7e4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d131      	bne.n	800455c <HAL_ADC_ConfigChannel+0x7f8>
 80044f8:	4b17      	ldr	r3, [pc, #92]	@ (8004558 <HAL_ADC_ConfigChannel+0x7f4>)
 80044fa:	e030      	b.n	800455e <HAL_ADC_ConfigChannel+0x7fa>
 80044fc:	47ff0000 	.word	0x47ff0000
 8004500:	40022000 	.word	0x40022000
 8004504:	04300002 	.word	0x04300002
 8004508:	08600004 	.word	0x08600004
 800450c:	0c900008 	.word	0x0c900008
 8004510:	10c00010 	.word	0x10c00010
 8004514:	14f00020 	.word	0x14f00020
 8004518:	2a000400 	.word	0x2a000400
 800451c:	2e300800 	.word	0x2e300800
 8004520:	32601000 	.word	0x32601000
 8004524:	43210000 	.word	0x43210000
 8004528:	4b840000 	.word	0x4b840000
 800452c:	4fb80000 	.word	0x4fb80000
 8004530:	47520000 	.word	0x47520000
 8004534:	36902000 	.word	0x36902000
 8004538:	25b00200 	.word	0x25b00200
 800453c:	21800100 	.word	0x21800100
 8004540:	1d500080 	.word	0x1d500080
 8004544:	19200040 	.word	0x19200040
 8004548:	40022100 	.word	0x40022100
 800454c:	58026000 	.word	0x58026000
 8004550:	3ac04000 	.word	0x3ac04000
 8004554:	3ef08000 	.word	0x3ef08000
 8004558:	40022300 	.word	0x40022300
 800455c:	4b61      	ldr	r3, [pc, #388]	@ (80046e4 <HAL_ADC_ConfigChannel+0x980>)
 800455e:	4618      	mov	r0, r3
 8004560:	f7fe fa96 	bl	8002a90 <LL_ADC_GetCommonPathInternalCh>
 8004564:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a5f      	ldr	r2, [pc, #380]	@ (80046e8 <HAL_ADC_ConfigChannel+0x984>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d004      	beq.n	800457a <HAL_ADC_ConfigChannel+0x816>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a5d      	ldr	r2, [pc, #372]	@ (80046ec <HAL_ADC_ConfigChannel+0x988>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d10e      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x834>
 800457a:	485b      	ldr	r0, [pc, #364]	@ (80046e8 <HAL_ADC_ConfigChannel+0x984>)
 800457c:	f7fe fd12 	bl	8002fa4 <LL_ADC_IsEnabled>
 8004580:	4604      	mov	r4, r0
 8004582:	485a      	ldr	r0, [pc, #360]	@ (80046ec <HAL_ADC_ConfigChannel+0x988>)
 8004584:	f7fe fd0e 	bl	8002fa4 <LL_ADC_IsEnabled>
 8004588:	4603      	mov	r3, r0
 800458a:	4323      	orrs	r3, r4
 800458c:	2b00      	cmp	r3, #0
 800458e:	bf0c      	ite	eq
 8004590:	2301      	moveq	r3, #1
 8004592:	2300      	movne	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	e008      	b.n	80045aa <HAL_ADC_ConfigChannel+0x846>
 8004598:	4855      	ldr	r0, [pc, #340]	@ (80046f0 <HAL_ADC_ConfigChannel+0x98c>)
 800459a:	f7fe fd03 	bl	8002fa4 <LL_ADC_IsEnabled>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf0c      	ite	eq
 80045a4:	2301      	moveq	r3, #1
 80045a6:	2300      	movne	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d07d      	beq.n	80046aa <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a50      	ldr	r2, [pc, #320]	@ (80046f4 <HAL_ADC_ConfigChannel+0x990>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d130      	bne.n	800461a <HAL_ADC_ConfigChannel+0x8b6>
 80045b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d12b      	bne.n	800461a <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a4a      	ldr	r2, [pc, #296]	@ (80046f0 <HAL_ADC_ConfigChannel+0x98c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	f040 8081 	bne.w	80046d0 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a45      	ldr	r2, [pc, #276]	@ (80046e8 <HAL_ADC_ConfigChannel+0x984>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d004      	beq.n	80045e2 <HAL_ADC_ConfigChannel+0x87e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a43      	ldr	r2, [pc, #268]	@ (80046ec <HAL_ADC_ConfigChannel+0x988>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d101      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x882>
 80045e2:	4a45      	ldr	r2, [pc, #276]	@ (80046f8 <HAL_ADC_ConfigChannel+0x994>)
 80045e4:	e000      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x884>
 80045e6:	4a3f      	ldr	r2, [pc, #252]	@ (80046e4 <HAL_ADC_ConfigChannel+0x980>)
 80045e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045ee:	4619      	mov	r1, r3
 80045f0:	4610      	mov	r0, r2
 80045f2:	f7fe fa3a 	bl	8002a6a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045f6:	4b41      	ldr	r3, [pc, #260]	@ (80046fc <HAL_ADC_ConfigChannel+0x998>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	099b      	lsrs	r3, r3, #6
 80045fc:	4a40      	ldr	r2, [pc, #256]	@ (8004700 <HAL_ADC_ConfigChannel+0x99c>)
 80045fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004602:	099b      	lsrs	r3, r3, #6
 8004604:	3301      	adds	r3, #1
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800460a:	e002      	b.n	8004612 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3b01      	subs	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f9      	bne.n	800460c <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004618:	e05a      	b.n	80046d0 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a39      	ldr	r2, [pc, #228]	@ (8004704 <HAL_ADC_ConfigChannel+0x9a0>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d11e      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x8fe>
 8004624:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004626:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d119      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a2f      	ldr	r2, [pc, #188]	@ (80046f0 <HAL_ADC_ConfigChannel+0x98c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d14b      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a2a      	ldr	r2, [pc, #168]	@ (80046e8 <HAL_ADC_ConfigChannel+0x984>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d004      	beq.n	800464c <HAL_ADC_ConfigChannel+0x8e8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a29      	ldr	r2, [pc, #164]	@ (80046ec <HAL_ADC_ConfigChannel+0x988>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d101      	bne.n	8004650 <HAL_ADC_ConfigChannel+0x8ec>
 800464c:	4a2a      	ldr	r2, [pc, #168]	@ (80046f8 <HAL_ADC_ConfigChannel+0x994>)
 800464e:	e000      	b.n	8004652 <HAL_ADC_ConfigChannel+0x8ee>
 8004650:	4a24      	ldr	r2, [pc, #144]	@ (80046e4 <HAL_ADC_ConfigChannel+0x980>)
 8004652:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004654:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004658:	4619      	mov	r1, r3
 800465a:	4610      	mov	r0, r2
 800465c:	f7fe fa05 	bl	8002a6a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004660:	e036      	b.n	80046d0 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a28      	ldr	r2, [pc, #160]	@ (8004708 <HAL_ADC_ConfigChannel+0x9a4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d131      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x96c>
 800466c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800466e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d12c      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1d      	ldr	r2, [pc, #116]	@ (80046f0 <HAL_ADC_ConfigChannel+0x98c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d127      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a18      	ldr	r2, [pc, #96]	@ (80046e8 <HAL_ADC_ConfigChannel+0x984>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_ADC_ConfigChannel+0x930>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a17      	ldr	r2, [pc, #92]	@ (80046ec <HAL_ADC_ConfigChannel+0x988>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d101      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x934>
 8004694:	4a18      	ldr	r2, [pc, #96]	@ (80046f8 <HAL_ADC_ConfigChannel+0x994>)
 8004696:	e000      	b.n	800469a <HAL_ADC_ConfigChannel+0x936>
 8004698:	4a12      	ldr	r2, [pc, #72]	@ (80046e4 <HAL_ADC_ConfigChannel+0x980>)
 800469a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800469c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046a0:	4619      	mov	r1, r3
 80046a2:	4610      	mov	r0, r2
 80046a4:	f7fe f9e1 	bl	8002a6a <LL_ADC_SetCommonPathInternalCh>
 80046a8:	e012      	b.n	80046d0 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ae:	f043 0220 	orr.w	r2, r3, #32
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80046bc:	e008      	b.n	80046d0 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c2:	f043 0220 	orr.w	r2, r3, #32
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80046d8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3794      	adds	r7, #148	@ 0x94
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd90      	pop	{r4, r7, pc}
 80046e4:	58026300 	.word	0x58026300
 80046e8:	40022000 	.word	0x40022000
 80046ec:	40022100 	.word	0x40022100
 80046f0:	58026000 	.word	0x58026000
 80046f4:	c7520000 	.word	0xc7520000
 80046f8:	40022300 	.word	0x40022300
 80046fc:	240001ac 	.word	0x240001ac
 8004700:	053e2d63 	.word	0x053e2d63
 8004704:	c3210000 	.word	0xc3210000
 8004708:	cb840000 	.word	0xcb840000

0800470c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe fc8c 	bl	8003040 <LL_ADC_REG_IsConversionOngoing>
 8004728:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7fe fcae 	bl	8003090 <LL_ADC_INJ_IsConversionOngoing>
 8004734:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d103      	bne.n	8004744 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 8098 	beq.w	8004874 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d02a      	beq.n	80047a8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	7e5b      	ldrb	r3, [r3, #25]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d126      	bne.n	80047a8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	7e1b      	ldrb	r3, [r3, #24]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d122      	bne.n	80047a8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004762:	2301      	movs	r3, #1
 8004764:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004766:	e014      	b.n	8004792 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	4a45      	ldr	r2, [pc, #276]	@ (8004880 <ADC_ConversionStop+0x174>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d90d      	bls.n	800478c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004774:	f043 0210 	orr.w	r2, r3, #16
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004780:	f043 0201 	orr.w	r2, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e074      	b.n	8004876 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	3301      	adds	r3, #1
 8004790:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479c:	2b40      	cmp	r3, #64	@ 0x40
 800479e:	d1e3      	bne.n	8004768 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2240      	movs	r2, #64	@ 0x40
 80047a6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d014      	beq.n	80047d8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe fc44 	bl	8003040 <LL_ADC_REG_IsConversionOngoing>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00c      	beq.n	80047d8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fe fc01 	bl	8002fca <LL_ADC_IsDisableOngoing>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d104      	bne.n	80047d8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fe fc20 	bl	8003018 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d014      	beq.n	8004808 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fe fc54 	bl	8003090 <LL_ADC_INJ_IsConversionOngoing>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00c      	beq.n	8004808 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe fbe9 	bl	8002fca <LL_ADC_IsDisableOngoing>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d104      	bne.n	8004808 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7fe fc30 	bl	8003068 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d005      	beq.n	800481a <ADC_ConversionStop+0x10e>
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d105      	bne.n	8004820 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004814:	230c      	movs	r3, #12
 8004816:	617b      	str	r3, [r7, #20]
        break;
 8004818:	e005      	b.n	8004826 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800481a:	2308      	movs	r3, #8
 800481c:	617b      	str	r3, [r7, #20]
        break;
 800481e:	e002      	b.n	8004826 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004820:	2304      	movs	r3, #4
 8004822:	617b      	str	r3, [r7, #20]
        break;
 8004824:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004826:	f7fe f8c7 	bl	80029b8 <HAL_GetTick>
 800482a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800482c:	e01b      	b.n	8004866 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800482e:	f7fe f8c3 	bl	80029b8 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b05      	cmp	r3, #5
 800483a:	d914      	bls.n	8004866 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	4013      	ands	r3, r2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00d      	beq.n	8004866 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800484e:	f043 0210 	orr.w	r2, r3, #16
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800485a:	f043 0201 	orr.w	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e007      	b.n	8004876 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1dc      	bne.n	800482e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	000cdbff 	.word	0x000cdbff

08004884 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe fb87 	bl	8002fa4 <LL_ADC_IsEnabled>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d16e      	bne.n	800497a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	4b38      	ldr	r3, [pc, #224]	@ (8004984 <ADC_Enable+0x100>)
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00d      	beq.n	80048c6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ae:	f043 0210 	orr.w	r2, r3, #16
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048ba:	f043 0201 	orr.w	r2, r3, #1
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e05a      	b.n	800497c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fe fb42 	bl	8002f54 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80048d0:	f7fe f872 	bl	80029b8 <HAL_GetTick>
 80048d4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a2b      	ldr	r2, [pc, #172]	@ (8004988 <ADC_Enable+0x104>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d004      	beq.n	80048ea <ADC_Enable+0x66>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a29      	ldr	r2, [pc, #164]	@ (800498c <ADC_Enable+0x108>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d101      	bne.n	80048ee <ADC_Enable+0x6a>
 80048ea:	4b29      	ldr	r3, [pc, #164]	@ (8004990 <ADC_Enable+0x10c>)
 80048ec:	e000      	b.n	80048f0 <ADC_Enable+0x6c>
 80048ee:	4b29      	ldr	r3, [pc, #164]	@ (8004994 <ADC_Enable+0x110>)
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fe fac5 	bl	8002e80 <LL_ADC_GetMultimode>
 80048f6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a23      	ldr	r2, [pc, #140]	@ (800498c <ADC_Enable+0x108>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d002      	beq.n	8004908 <ADC_Enable+0x84>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	e000      	b.n	800490a <ADC_Enable+0x86>
 8004908:	4b1f      	ldr	r3, [pc, #124]	@ (8004988 <ADC_Enable+0x104>)
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	4293      	cmp	r3, r2
 8004910:	d02c      	beq.n	800496c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d130      	bne.n	800497a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004918:	e028      	b.n	800496c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7fe fb40 	bl	8002fa4 <LL_ADC_IsEnabled>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d104      	bne.n	8004934 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe fb10 	bl	8002f54 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004934:	f7fe f840 	bl	80029b8 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d914      	bls.n	800496c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b01      	cmp	r3, #1
 800494e:	d00d      	beq.n	800496c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004954:	f043 0210 	orr.w	r2, r3, #16
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004960:	f043 0201 	orr.w	r2, r3, #1
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e007      	b.n	800497c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b01      	cmp	r3, #1
 8004978:	d1cf      	bne.n	800491a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	8000003f 	.word	0x8000003f
 8004988:	40022000 	.word	0x40022000
 800498c:	40022100 	.word	0x40022100
 8004990:	40022300 	.word	0x40022300
 8004994:	58026300 	.word	0x58026300

08004998 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fe fb10 	bl	8002fca <LL_ADC_IsDisableOngoing>
 80049aa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fe faf7 	bl	8002fa4 <LL_ADC_IsEnabled>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d047      	beq.n	8004a4c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d144      	bne.n	8004a4c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 030d 	and.w	r3, r3, #13
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d10c      	bne.n	80049ea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe fad1 	bl	8002f7c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2203      	movs	r2, #3
 80049e0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049e2:	f7fd ffe9 	bl	80029b8 <HAL_GetTick>
 80049e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80049e8:	e029      	b.n	8004a3e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ee:	f043 0210 	orr.w	r2, r3, #16
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049fa:	f043 0201 	orr.w	r2, r3, #1
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e023      	b.n	8004a4e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004a06:	f7fd ffd7 	bl	80029b8 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d914      	bls.n	8004a3e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00d      	beq.n	8004a3e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a26:	f043 0210 	orr.w	r2, r3, #16
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a32:	f043 0201 	orr.w	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e007      	b.n	8004a4e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1dc      	bne.n	8004a06 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a6c      	ldr	r2, [pc, #432]	@ (8004c18 <ADC_ConfigureBoostMode+0x1c0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <ADC_ConfigureBoostMode+0x1c>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a6b      	ldr	r2, [pc, #428]	@ (8004c1c <ADC_ConfigureBoostMode+0x1c4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d109      	bne.n	8004a88 <ADC_ConfigureBoostMode+0x30>
 8004a74:	4b6a      	ldr	r3, [pc, #424]	@ (8004c20 <ADC_ConfigureBoostMode+0x1c8>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	bf14      	ite	ne
 8004a80:	2301      	movne	r3, #1
 8004a82:	2300      	moveq	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	e008      	b.n	8004a9a <ADC_ConfigureBoostMode+0x42>
 8004a88:	4b66      	ldr	r3, [pc, #408]	@ (8004c24 <ADC_ConfigureBoostMode+0x1cc>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	bf14      	ite	ne
 8004a94:	2301      	movne	r3, #1
 8004a96:	2300      	moveq	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d01c      	beq.n	8004ad8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004a9e:	f004 fc51 	bl	8009344 <HAL_RCC_GetHCLKFreq>
 8004aa2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004aac:	d010      	beq.n	8004ad0 <ADC_ConfigureBoostMode+0x78>
 8004aae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ab2:	d873      	bhi.n	8004b9c <ADC_ConfigureBoostMode+0x144>
 8004ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab8:	d002      	beq.n	8004ac0 <ADC_ConfigureBoostMode+0x68>
 8004aba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004abe:	d16d      	bne.n	8004b9c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	0c1b      	lsrs	r3, r3, #16
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004acc:	60fb      	str	r3, [r7, #12]
        break;
 8004ace:	e068      	b.n	8004ba2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	089b      	lsrs	r3, r3, #2
 8004ad4:	60fb      	str	r3, [r7, #12]
        break;
 8004ad6:	e064      	b.n	8004ba2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004ad8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004adc:	f04f 0100 	mov.w	r1, #0
 8004ae0:	f005 fe16 	bl	800a710 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ae4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004aee:	d051      	beq.n	8004b94 <ADC_ConfigureBoostMode+0x13c>
 8004af0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004af4:	d854      	bhi.n	8004ba0 <ADC_ConfigureBoostMode+0x148>
 8004af6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004afa:	d047      	beq.n	8004b8c <ADC_ConfigureBoostMode+0x134>
 8004afc:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004b00:	d84e      	bhi.n	8004ba0 <ADC_ConfigureBoostMode+0x148>
 8004b02:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004b06:	d03d      	beq.n	8004b84 <ADC_ConfigureBoostMode+0x12c>
 8004b08:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004b0c:	d848      	bhi.n	8004ba0 <ADC_ConfigureBoostMode+0x148>
 8004b0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b12:	d033      	beq.n	8004b7c <ADC_ConfigureBoostMode+0x124>
 8004b14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b18:	d842      	bhi.n	8004ba0 <ADC_ConfigureBoostMode+0x148>
 8004b1a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004b1e:	d029      	beq.n	8004b74 <ADC_ConfigureBoostMode+0x11c>
 8004b20:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004b24:	d83c      	bhi.n	8004ba0 <ADC_ConfigureBoostMode+0x148>
 8004b26:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004b2a:	d01a      	beq.n	8004b62 <ADC_ConfigureBoostMode+0x10a>
 8004b2c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004b30:	d836      	bhi.n	8004ba0 <ADC_ConfigureBoostMode+0x148>
 8004b32:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004b36:	d014      	beq.n	8004b62 <ADC_ConfigureBoostMode+0x10a>
 8004b38:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004b3c:	d830      	bhi.n	8004ba0 <ADC_ConfigureBoostMode+0x148>
 8004b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b42:	d00e      	beq.n	8004b62 <ADC_ConfigureBoostMode+0x10a>
 8004b44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b48:	d82a      	bhi.n	8004ba0 <ADC_ConfigureBoostMode+0x148>
 8004b4a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b4e:	d008      	beq.n	8004b62 <ADC_ConfigureBoostMode+0x10a>
 8004b50:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b54:	d824      	bhi.n	8004ba0 <ADC_ConfigureBoostMode+0x148>
 8004b56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b5a:	d002      	beq.n	8004b62 <ADC_ConfigureBoostMode+0x10a>
 8004b5c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b60:	d11e      	bne.n	8004ba0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	0c9b      	lsrs	r3, r3, #18
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b70:	60fb      	str	r3, [r7, #12]
        break;
 8004b72:	e016      	b.n	8004ba2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	091b      	lsrs	r3, r3, #4
 8004b78:	60fb      	str	r3, [r7, #12]
        break;
 8004b7a:	e012      	b.n	8004ba2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	60fb      	str	r3, [r7, #12]
        break;
 8004b82:	e00e      	b.n	8004ba2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	099b      	lsrs	r3, r3, #6
 8004b88:	60fb      	str	r3, [r7, #12]
        break;
 8004b8a:	e00a      	b.n	8004ba2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	09db      	lsrs	r3, r3, #7
 8004b90:	60fb      	str	r3, [r7, #12]
        break;
 8004b92:	e006      	b.n	8004ba2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	0a1b      	lsrs	r3, r3, #8
 8004b98:	60fb      	str	r3, [r7, #12]
        break;
 8004b9a:	e002      	b.n	8004ba2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004b9c:	bf00      	nop
 8004b9e:	e000      	b.n	8004ba2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004ba0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	085b      	lsrs	r3, r3, #1
 8004ba6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4a1f      	ldr	r2, [pc, #124]	@ (8004c28 <ADC_ConfigureBoostMode+0x1d0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d808      	bhi.n	8004bc2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004bbe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004bc0:	e025      	b.n	8004c0e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4a19      	ldr	r2, [pc, #100]	@ (8004c2c <ADC_ConfigureBoostMode+0x1d4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d80a      	bhi.n	8004be0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bdc:	609a      	str	r2, [r3, #8]
}
 8004bde:	e016      	b.n	8004c0e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4a13      	ldr	r2, [pc, #76]	@ (8004c30 <ADC_ConfigureBoostMode+0x1d8>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d80a      	bhi.n	8004bfe <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bfa:	609a      	str	r2, [r3, #8]
}
 8004bfc:	e007      	b.n	8004c0e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004c0c:	609a      	str	r2, [r3, #8]
}
 8004c0e:	bf00      	nop
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40022000 	.word	0x40022000
 8004c1c:	40022100 	.word	0x40022100
 8004c20:	40022300 	.word	0x40022300
 8004c24:	58026300 	.word	0x58026300
 8004c28:	005f5e10 	.word	0x005f5e10
 8004c2c:	00bebc20 	.word	0x00bebc20
 8004c30:	017d7840 	.word	0x017d7840

08004c34 <LL_ADC_IsEnabled>:
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <LL_ADC_IsEnabled+0x18>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <LL_ADC_IsEnabled+0x1a>
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
	...

08004c5c <LL_ADC_StartCalibration>:
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	4b09      	ldr	r3, [pc, #36]	@ (8004c94 <LL_ADC_StartCalibration+0x38>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	609a      	str	r2, [r3, #8]
}
 8004c88:	bf00      	nop
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	3ffeffc0 	.word	0x3ffeffc0

08004c98 <LL_ADC_IsCalibrationOnGoing>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cac:	d101      	bne.n	8004cb2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <LL_ADC_REG_IsConversionOngoing>:
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d101      	bne.n	8004cd8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e000      	b.n	8004cda <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <HAL_ADCEx_Calibration_Start+0x1e>
 8004d02:	2302      	movs	r3, #2
 8004d04:	e04c      	b.n	8004da0 <HAL_ADCEx_Calibration_Start+0xb8>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff fe42 	bl	8004998 <ADC_Disable>
 8004d14:	4603      	mov	r3, r0
 8004d16:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d135      	bne.n	8004d8a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004d22:	4b21      	ldr	r3, [pc, #132]	@ (8004da8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	f043 0202 	orr.w	r2, r3, #2
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff ff90 	bl	8004c5c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d3c:	e014      	b.n	8004d68 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	3301      	adds	r3, #1
 8004d42:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4a19      	ldr	r2, [pc, #100]	@ (8004dac <HAL_ADCEx_Calibration_Start+0xc4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d30d      	bcc.n	8004d68 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d50:	f023 0312 	bic.w	r3, r3, #18
 8004d54:	f043 0210 	orr.w	r2, r3, #16
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e01b      	b.n	8004da0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff ff93 	bl	8004c98 <LL_ADC_IsCalibrationOnGoing>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e2      	bne.n	8004d3e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d7c:	f023 0303 	bic.w	r3, r3, #3
 8004d80:	f043 0201 	orr.w	r2, r3, #1
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	661a      	str	r2, [r3, #96]	@ 0x60
 8004d88:	e005      	b.n	8004d96 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d8e:	f043 0210 	orr.w	r2, r3, #16
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	ffffeefd 	.word	0xffffeefd
 8004dac:	25c3f800 	.word	0x25c3f800

08004db0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004e14:	b590      	push	{r4, r7, lr}
 8004e16:	b0a3      	sub	sp, #140	@ 0x8c
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e0c1      	b.n	8004fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a5e      	ldr	r2, [pc, #376]	@ (8004fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d102      	bne.n	8004e52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e4c:	4b5d      	ldr	r3, [pc, #372]	@ (8004fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	e001      	b.n	8004e56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10b      	bne.n	8004e74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e60:	f043 0220 	orr.w	r2, r3, #32
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0a0      	b.n	8004fb6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff ff22 	bl	8004cc0 <LL_ADC_REG_IsConversionOngoing>
 8004e7c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff ff1b 	bl	8004cc0 <LL_ADC_REG_IsConversionOngoing>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f040 8081 	bne.w	8004f94 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004e92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d17c      	bne.n	8004f94 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a48      	ldr	r2, [pc, #288]	@ (8004fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d004      	beq.n	8004eae <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a46      	ldr	r2, [pc, #280]	@ (8004fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d101      	bne.n	8004eb2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004eae:	4b46      	ldr	r3, [pc, #280]	@ (8004fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004eb0:	e000      	b.n	8004eb4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004eb2:	4b46      	ldr	r3, [pc, #280]	@ (8004fcc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004eb4:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d039      	beq.n	8004f32 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004ebe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ece:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a3a      	ldr	r2, [pc, #232]	@ (8004fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d004      	beq.n	8004ee4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a39      	ldr	r2, [pc, #228]	@ (8004fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d10e      	bne.n	8004f02 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004ee4:	4836      	ldr	r0, [pc, #216]	@ (8004fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ee6:	f7ff fea5 	bl	8004c34 <LL_ADC_IsEnabled>
 8004eea:	4604      	mov	r4, r0
 8004eec:	4835      	ldr	r0, [pc, #212]	@ (8004fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004eee:	f7ff fea1 	bl	8004c34 <LL_ADC_IsEnabled>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	4323      	orrs	r3, r4
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	bf0c      	ite	eq
 8004efa:	2301      	moveq	r3, #1
 8004efc:	2300      	movne	r3, #0
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	e008      	b.n	8004f14 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004f02:	4833      	ldr	r0, [pc, #204]	@ (8004fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004f04:	f7ff fe96 	bl	8004c34 <LL_ADC_IsEnabled>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	bf0c      	ite	eq
 8004f0e:	2301      	moveq	r3, #1
 8004f10:	2300      	movne	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d047      	beq.n	8004fa8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	6811      	ldr	r1, [r2, #0]
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	6892      	ldr	r2, [r2, #8]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f2e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f30:	e03a      	b.n	8004fa8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004f32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f3c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1f      	ldr	r2, [pc, #124]	@ (8004fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d004      	beq.n	8004f52 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d10e      	bne.n	8004f70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004f52:	481b      	ldr	r0, [pc, #108]	@ (8004fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f54:	f7ff fe6e 	bl	8004c34 <LL_ADC_IsEnabled>
 8004f58:	4604      	mov	r4, r0
 8004f5a:	481a      	ldr	r0, [pc, #104]	@ (8004fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f5c:	f7ff fe6a 	bl	8004c34 <LL_ADC_IsEnabled>
 8004f60:	4603      	mov	r3, r0
 8004f62:	4323      	orrs	r3, r4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	bf0c      	ite	eq
 8004f68:	2301      	moveq	r3, #1
 8004f6a:	2300      	movne	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	e008      	b.n	8004f82 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004f70:	4817      	ldr	r0, [pc, #92]	@ (8004fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004f72:	f7ff fe5f 	bl	8004c34 <LL_ADC_IsEnabled>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d010      	beq.n	8004fa8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	4b12      	ldr	r3, [pc, #72]	@ (8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004f90:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f92:	e009      	b.n	8004fa8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f98:	f043 0220 	orr.w	r2, r3, #32
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004fa6:	e000      	b.n	8004faa <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fa8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004fb2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	378c      	adds	r7, #140	@ 0x8c
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd90      	pop	{r4, r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40022000 	.word	0x40022000
 8004fc4:	40022100 	.word	0x40022100
 8004fc8:	40022300 	.word	0x40022300
 8004fcc:	58026300 	.word	0x58026300
 8004fd0:	58026000 	.word	0x58026000
 8004fd4:	fffff0e0 	.word	0xfffff0e0

08004fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8005018 <__NVIC_SetPriorityGrouping+0x40>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005000:	4b06      	ldr	r3, [pc, #24]	@ (800501c <__NVIC_SetPriorityGrouping+0x44>)
 8005002:	4313      	orrs	r3, r2
 8005004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005006:	4a04      	ldr	r2, [pc, #16]	@ (8005018 <__NVIC_SetPriorityGrouping+0x40>)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	60d3      	str	r3, [r2, #12]
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	e000ed00 	.word	0xe000ed00
 800501c:	05fa0000 	.word	0x05fa0000

08005020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005024:	4b04      	ldr	r3, [pc, #16]	@ (8005038 <__NVIC_GetPriorityGrouping+0x18>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	0a1b      	lsrs	r3, r3, #8
 800502a:	f003 0307 	and.w	r3, r3, #7
}
 800502e:	4618      	mov	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	e000ed00 	.word	0xe000ed00

0800503c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800504a:	2b00      	cmp	r3, #0
 800504c:	db0b      	blt.n	8005066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	f003 021f 	and.w	r2, r3, #31
 8005054:	4907      	ldr	r1, [pc, #28]	@ (8005074 <__NVIC_EnableIRQ+0x38>)
 8005056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	2001      	movs	r0, #1
 800505e:	fa00 f202 	lsl.w	r2, r0, r2
 8005062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	e000e100 	.word	0xe000e100

08005078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	6039      	str	r1, [r7, #0]
 8005082:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005084:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005088:	2b00      	cmp	r3, #0
 800508a:	db0a      	blt.n	80050a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	b2da      	uxtb	r2, r3
 8005090:	490c      	ldr	r1, [pc, #48]	@ (80050c4 <__NVIC_SetPriority+0x4c>)
 8005092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005096:	0112      	lsls	r2, r2, #4
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	440b      	add	r3, r1
 800509c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050a0:	e00a      	b.n	80050b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	4908      	ldr	r1, [pc, #32]	@ (80050c8 <__NVIC_SetPriority+0x50>)
 80050a8:	88fb      	ldrh	r3, [r7, #6]
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	3b04      	subs	r3, #4
 80050b0:	0112      	lsls	r2, r2, #4
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	440b      	add	r3, r1
 80050b6:	761a      	strb	r2, [r3, #24]
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	e000e100 	.word	0xe000e100
 80050c8:	e000ed00 	.word	0xe000ed00

080050cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b089      	sub	sp, #36	@ 0x24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	f1c3 0307 	rsb	r3, r3, #7
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	bf28      	it	cs
 80050ea:	2304      	movcs	r3, #4
 80050ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	3304      	adds	r3, #4
 80050f2:	2b06      	cmp	r3, #6
 80050f4:	d902      	bls.n	80050fc <NVIC_EncodePriority+0x30>
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	3b03      	subs	r3, #3
 80050fa:	e000      	b.n	80050fe <NVIC_EncodePriority+0x32>
 80050fc:	2300      	movs	r3, #0
 80050fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005100:	f04f 32ff 	mov.w	r2, #4294967295
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	43da      	mvns	r2, r3
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	401a      	ands	r2, r3
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005114:	f04f 31ff 	mov.w	r1, #4294967295
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	fa01 f303 	lsl.w	r3, r1, r3
 800511e:	43d9      	mvns	r1, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005124:	4313      	orrs	r3, r2
         );
}
 8005126:	4618      	mov	r0, r3
 8005128:	3724      	adds	r7, #36	@ 0x24
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
	...

08005134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3b01      	subs	r3, #1
 8005140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005144:	d301      	bcc.n	800514a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005146:	2301      	movs	r3, #1
 8005148:	e00f      	b.n	800516a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800514a:	4a0a      	ldr	r2, [pc, #40]	@ (8005174 <SysTick_Config+0x40>)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3b01      	subs	r3, #1
 8005150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005152:	210f      	movs	r1, #15
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	f7ff ff8e 	bl	8005078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800515c:	4b05      	ldr	r3, [pc, #20]	@ (8005174 <SysTick_Config+0x40>)
 800515e:	2200      	movs	r2, #0
 8005160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005162:	4b04      	ldr	r3, [pc, #16]	@ (8005174 <SysTick_Config+0x40>)
 8005164:	2207      	movs	r2, #7
 8005166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	e000e010 	.word	0xe000e010

08005178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff ff29 	bl	8004fd8 <__NVIC_SetPriorityGrouping>
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b086      	sub	sp, #24
 8005192:	af00      	add	r7, sp, #0
 8005194:	4603      	mov	r3, r0
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	607a      	str	r2, [r7, #4]
 800519a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800519c:	f7ff ff40 	bl	8005020 <__NVIC_GetPriorityGrouping>
 80051a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	6978      	ldr	r0, [r7, #20]
 80051a8:	f7ff ff90 	bl	80050cc <NVIC_EncodePriority>
 80051ac:	4602      	mov	r2, r0
 80051ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051b2:	4611      	mov	r1, r2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff ff5f 	bl	8005078 <__NVIC_SetPriority>
}
 80051ba:	bf00      	nop
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b082      	sub	sp, #8
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	4603      	mov	r3, r0
 80051ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff ff33 	bl	800503c <__NVIC_EnableIRQ>
}
 80051d6:	bf00      	nop
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff ffa4 	bl	8005134 <SysTick_Config>
 80051ec:	4603      	mov	r3, r0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80051fc:	f3bf 8f5f 	dmb	sy
}
 8005200:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005202:	4b07      	ldr	r3, [pc, #28]	@ (8005220 <HAL_MPU_Disable+0x28>)
 8005204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005206:	4a06      	ldr	r2, [pc, #24]	@ (8005220 <HAL_MPU_Disable+0x28>)
 8005208:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800520c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800520e:	4b05      	ldr	r3, [pc, #20]	@ (8005224 <HAL_MPU_Disable+0x2c>)
 8005210:	2200      	movs	r2, #0
 8005212:	605a      	str	r2, [r3, #4]
}
 8005214:	bf00      	nop
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	e000ed00 	.word	0xe000ed00
 8005224:	e000ed90 	.word	0xe000ed90

08005228 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005230:	4a0b      	ldr	r2, [pc, #44]	@ (8005260 <HAL_MPU_Enable+0x38>)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800523a:	4b0a      	ldr	r3, [pc, #40]	@ (8005264 <HAL_MPU_Enable+0x3c>)
 800523c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523e:	4a09      	ldr	r2, [pc, #36]	@ (8005264 <HAL_MPU_Enable+0x3c>)
 8005240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005244:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005246:	f3bf 8f4f 	dsb	sy
}
 800524a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800524c:	f3bf 8f6f 	isb	sy
}
 8005250:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	e000ed90 	.word	0xe000ed90
 8005264:	e000ed00 	.word	0xe000ed00

08005268 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	785a      	ldrb	r2, [r3, #1]
 8005274:	4b1b      	ldr	r3, [pc, #108]	@ (80052e4 <HAL_MPU_ConfigRegion+0x7c>)
 8005276:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005278:	4b1a      	ldr	r3, [pc, #104]	@ (80052e4 <HAL_MPU_ConfigRegion+0x7c>)
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	4a19      	ldr	r2, [pc, #100]	@ (80052e4 <HAL_MPU_ConfigRegion+0x7c>)
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005284:	4a17      	ldr	r2, [pc, #92]	@ (80052e4 <HAL_MPU_ConfigRegion+0x7c>)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	7b1b      	ldrb	r3, [r3, #12]
 8005290:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	7adb      	ldrb	r3, [r3, #11]
 8005296:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005298:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	7a9b      	ldrb	r3, [r3, #10]
 800529e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80052a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	7b5b      	ldrb	r3, [r3, #13]
 80052a6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80052a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	7b9b      	ldrb	r3, [r3, #14]
 80052ae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80052b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	7bdb      	ldrb	r3, [r3, #15]
 80052b6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80052b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	7a5b      	ldrb	r3, [r3, #9]
 80052be:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80052c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	7a1b      	ldrb	r3, [r3, #8]
 80052c6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80052c8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	7812      	ldrb	r2, [r2, #0]
 80052ce:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80052d0:	4a04      	ldr	r2, [pc, #16]	@ (80052e4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80052d2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80052d4:	6113      	str	r3, [r2, #16]
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	e000ed90 	.word	0xe000ed90

080052e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e054      	b.n	80053a4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7f5b      	ldrb	r3, [r3, #29]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d105      	bne.n	8005310 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fc ff08 	bl	8002120 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	791b      	ldrb	r3, [r3, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10c      	bne.n	8005338 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a22      	ldr	r2, [pc, #136]	@ (80053ac <HAL_CRC_Init+0xc4>)
 8005324:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0218 	bic.w	r2, r2, #24
 8005334:	609a      	str	r2, [r3, #8]
 8005336:	e00c      	b.n	8005352 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6899      	ldr	r1, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	461a      	mov	r2, r3
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f834 	bl	80053b0 <HAL_CRCEx_Polynomial_Set>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e028      	b.n	80053a4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	795b      	ldrb	r3, [r3, #5]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d105      	bne.n	8005366 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f04f 32ff 	mov.w	r2, #4294967295
 8005362:	611a      	str	r2, [r3, #16]
 8005364:	e004      	b.n	8005370 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6912      	ldr	r2, [r2, #16]
 800536e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695a      	ldr	r2, [r3, #20]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699a      	ldr	r2, [r3, #24]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	04c11db7 	.word	0x04c11db7

080053b0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80053c0:	231f      	movs	r3, #31
 80053c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d102      	bne.n	80053d4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	75fb      	strb	r3, [r7, #23]
 80053d2:	e063      	b.n	800549c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80053d4:	bf00      	nop
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1e5a      	subs	r2, r3, #1
 80053da:	613a      	str	r2, [r7, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d009      	beq.n	80053f4 <HAL_CRCEx_Polynomial_Set+0x44>
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f003 031f 	and.w	r3, r3, #31
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	fa22 f303 	lsr.w	r3, r2, r3
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0f0      	beq.n	80053d6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b18      	cmp	r3, #24
 80053f8:	d846      	bhi.n	8005488 <HAL_CRCEx_Polynomial_Set+0xd8>
 80053fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005400 <HAL_CRCEx_Polynomial_Set+0x50>)
 80053fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005400:	0800548f 	.word	0x0800548f
 8005404:	08005489 	.word	0x08005489
 8005408:	08005489 	.word	0x08005489
 800540c:	08005489 	.word	0x08005489
 8005410:	08005489 	.word	0x08005489
 8005414:	08005489 	.word	0x08005489
 8005418:	08005489 	.word	0x08005489
 800541c:	08005489 	.word	0x08005489
 8005420:	0800547d 	.word	0x0800547d
 8005424:	08005489 	.word	0x08005489
 8005428:	08005489 	.word	0x08005489
 800542c:	08005489 	.word	0x08005489
 8005430:	08005489 	.word	0x08005489
 8005434:	08005489 	.word	0x08005489
 8005438:	08005489 	.word	0x08005489
 800543c:	08005489 	.word	0x08005489
 8005440:	08005471 	.word	0x08005471
 8005444:	08005489 	.word	0x08005489
 8005448:	08005489 	.word	0x08005489
 800544c:	08005489 	.word	0x08005489
 8005450:	08005489 	.word	0x08005489
 8005454:	08005489 	.word	0x08005489
 8005458:	08005489 	.word	0x08005489
 800545c:	08005489 	.word	0x08005489
 8005460:	08005465 	.word	0x08005465
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	2b06      	cmp	r3, #6
 8005468:	d913      	bls.n	8005492 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800546e:	e010      	b.n	8005492 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b07      	cmp	r3, #7
 8005474:	d90f      	bls.n	8005496 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800547a:	e00c      	b.n	8005496 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	2b0f      	cmp	r3, #15
 8005480:	d90b      	bls.n	800549a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005486:	e008      	b.n	800549a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	75fb      	strb	r3, [r7, #23]
        break;
 800548c:	e006      	b.n	800549c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800548e:	bf00      	nop
 8005490:	e004      	b.n	800549c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005492:	bf00      	nop
 8005494:	e002      	b.n	800549c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005496:	bf00      	nop
 8005498:	e000      	b.n	800549c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800549a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800549c:	7dfb      	ldrb	r3, [r7, #23]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10d      	bne.n	80054be <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f023 0118 	bic.w	r1, r3, #24
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80054be:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	371c      	adds	r7, #28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e237      	b.n	800594e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d004      	beq.n	80054f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2280      	movs	r2, #128	@ 0x80
 80054ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e22c      	b.n	800594e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a5c      	ldr	r2, [pc, #368]	@ (800566c <HAL_DMA_Abort_IT+0x1a0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d04a      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a5b      	ldr	r2, [pc, #364]	@ (8005670 <HAL_DMA_Abort_IT+0x1a4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d045      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a59      	ldr	r2, [pc, #356]	@ (8005674 <HAL_DMA_Abort_IT+0x1a8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d040      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a58      	ldr	r2, [pc, #352]	@ (8005678 <HAL_DMA_Abort_IT+0x1ac>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d03b      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a56      	ldr	r2, [pc, #344]	@ (800567c <HAL_DMA_Abort_IT+0x1b0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d036      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a55      	ldr	r2, [pc, #340]	@ (8005680 <HAL_DMA_Abort_IT+0x1b4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d031      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a53      	ldr	r2, [pc, #332]	@ (8005684 <HAL_DMA_Abort_IT+0x1b8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d02c      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a52      	ldr	r2, [pc, #328]	@ (8005688 <HAL_DMA_Abort_IT+0x1bc>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d027      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a50      	ldr	r2, [pc, #320]	@ (800568c <HAL_DMA_Abort_IT+0x1c0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d022      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a4f      	ldr	r2, [pc, #316]	@ (8005690 <HAL_DMA_Abort_IT+0x1c4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d01d      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a4d      	ldr	r2, [pc, #308]	@ (8005694 <HAL_DMA_Abort_IT+0x1c8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d018      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a4c      	ldr	r2, [pc, #304]	@ (8005698 <HAL_DMA_Abort_IT+0x1cc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d013      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a4a      	ldr	r2, [pc, #296]	@ (800569c <HAL_DMA_Abort_IT+0x1d0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00e      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a49      	ldr	r2, [pc, #292]	@ (80056a0 <HAL_DMA_Abort_IT+0x1d4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d009      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a47      	ldr	r2, [pc, #284]	@ (80056a4 <HAL_DMA_Abort_IT+0x1d8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_DMA_Abort_IT+0xc8>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a46      	ldr	r2, [pc, #280]	@ (80056a8 <HAL_DMA_Abort_IT+0x1dc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d101      	bne.n	8005598 <HAL_DMA_Abort_IT+0xcc>
 8005594:	2301      	movs	r3, #1
 8005596:	e000      	b.n	800559a <HAL_DMA_Abort_IT+0xce>
 8005598:	2300      	movs	r3, #0
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 8086 	beq.w	80056ac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2204      	movs	r2, #4
 80055a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a2f      	ldr	r2, [pc, #188]	@ (800566c <HAL_DMA_Abort_IT+0x1a0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d04a      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005670 <HAL_DMA_Abort_IT+0x1a4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d045      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005674 <HAL_DMA_Abort_IT+0x1a8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d040      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005678 <HAL_DMA_Abort_IT+0x1ac>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d03b      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a29      	ldr	r2, [pc, #164]	@ (800567c <HAL_DMA_Abort_IT+0x1b0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d036      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a28      	ldr	r2, [pc, #160]	@ (8005680 <HAL_DMA_Abort_IT+0x1b4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d031      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a26      	ldr	r2, [pc, #152]	@ (8005684 <HAL_DMA_Abort_IT+0x1b8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d02c      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a25      	ldr	r2, [pc, #148]	@ (8005688 <HAL_DMA_Abort_IT+0x1bc>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d027      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a23      	ldr	r2, [pc, #140]	@ (800568c <HAL_DMA_Abort_IT+0x1c0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d022      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a22      	ldr	r2, [pc, #136]	@ (8005690 <HAL_DMA_Abort_IT+0x1c4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d01d      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a20      	ldr	r2, [pc, #128]	@ (8005694 <HAL_DMA_Abort_IT+0x1c8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d018      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a1f      	ldr	r2, [pc, #124]	@ (8005698 <HAL_DMA_Abort_IT+0x1cc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d013      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a1d      	ldr	r2, [pc, #116]	@ (800569c <HAL_DMA_Abort_IT+0x1d0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00e      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a1c      	ldr	r2, [pc, #112]	@ (80056a0 <HAL_DMA_Abort_IT+0x1d4>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d009      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a1a      	ldr	r2, [pc, #104]	@ (80056a4 <HAL_DMA_Abort_IT+0x1d8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d004      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a19      	ldr	r2, [pc, #100]	@ (80056a8 <HAL_DMA_Abort_IT+0x1dc>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d108      	bne.n	800565a <HAL_DMA_Abort_IT+0x18e>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0201 	bic.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	e178      	b.n	800594c <HAL_DMA_Abort_IT+0x480>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0201 	bic.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	e16f      	b.n	800594c <HAL_DMA_Abort_IT+0x480>
 800566c:	40020010 	.word	0x40020010
 8005670:	40020028 	.word	0x40020028
 8005674:	40020040 	.word	0x40020040
 8005678:	40020058 	.word	0x40020058
 800567c:	40020070 	.word	0x40020070
 8005680:	40020088 	.word	0x40020088
 8005684:	400200a0 	.word	0x400200a0
 8005688:	400200b8 	.word	0x400200b8
 800568c:	40020410 	.word	0x40020410
 8005690:	40020428 	.word	0x40020428
 8005694:	40020440 	.word	0x40020440
 8005698:	40020458 	.word	0x40020458
 800569c:	40020470 	.word	0x40020470
 80056a0:	40020488 	.word	0x40020488
 80056a4:	400204a0 	.word	0x400204a0
 80056a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 020e 	bic.w	r2, r2, #14
 80056ba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a6c      	ldr	r2, [pc, #432]	@ (8005874 <HAL_DMA_Abort_IT+0x3a8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d04a      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a6b      	ldr	r2, [pc, #428]	@ (8005878 <HAL_DMA_Abort_IT+0x3ac>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d045      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a69      	ldr	r2, [pc, #420]	@ (800587c <HAL_DMA_Abort_IT+0x3b0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d040      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a68      	ldr	r2, [pc, #416]	@ (8005880 <HAL_DMA_Abort_IT+0x3b4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d03b      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a66      	ldr	r2, [pc, #408]	@ (8005884 <HAL_DMA_Abort_IT+0x3b8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d036      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a65      	ldr	r2, [pc, #404]	@ (8005888 <HAL_DMA_Abort_IT+0x3bc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d031      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a63      	ldr	r2, [pc, #396]	@ (800588c <HAL_DMA_Abort_IT+0x3c0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d02c      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a62      	ldr	r2, [pc, #392]	@ (8005890 <HAL_DMA_Abort_IT+0x3c4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d027      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a60      	ldr	r2, [pc, #384]	@ (8005894 <HAL_DMA_Abort_IT+0x3c8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d022      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a5f      	ldr	r2, [pc, #380]	@ (8005898 <HAL_DMA_Abort_IT+0x3cc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d01d      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a5d      	ldr	r2, [pc, #372]	@ (800589c <HAL_DMA_Abort_IT+0x3d0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d018      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a5c      	ldr	r2, [pc, #368]	@ (80058a0 <HAL_DMA_Abort_IT+0x3d4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a5a      	ldr	r2, [pc, #360]	@ (80058a4 <HAL_DMA_Abort_IT+0x3d8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00e      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a59      	ldr	r2, [pc, #356]	@ (80058a8 <HAL_DMA_Abort_IT+0x3dc>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d009      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a57      	ldr	r2, [pc, #348]	@ (80058ac <HAL_DMA_Abort_IT+0x3e0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d004      	beq.n	800575c <HAL_DMA_Abort_IT+0x290>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a56      	ldr	r2, [pc, #344]	@ (80058b0 <HAL_DMA_Abort_IT+0x3e4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d108      	bne.n	800576e <HAL_DMA_Abort_IT+0x2a2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0201 	bic.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	e007      	b.n	800577e <HAL_DMA_Abort_IT+0x2b2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0201 	bic.w	r2, r2, #1
 800577c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a3c      	ldr	r2, [pc, #240]	@ (8005874 <HAL_DMA_Abort_IT+0x3a8>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d072      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a3a      	ldr	r2, [pc, #232]	@ (8005878 <HAL_DMA_Abort_IT+0x3ac>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d06d      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a39      	ldr	r2, [pc, #228]	@ (800587c <HAL_DMA_Abort_IT+0x3b0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d068      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a37      	ldr	r2, [pc, #220]	@ (8005880 <HAL_DMA_Abort_IT+0x3b4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d063      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a36      	ldr	r2, [pc, #216]	@ (8005884 <HAL_DMA_Abort_IT+0x3b8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d05e      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a34      	ldr	r2, [pc, #208]	@ (8005888 <HAL_DMA_Abort_IT+0x3bc>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d059      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a33      	ldr	r2, [pc, #204]	@ (800588c <HAL_DMA_Abort_IT+0x3c0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d054      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a31      	ldr	r2, [pc, #196]	@ (8005890 <HAL_DMA_Abort_IT+0x3c4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d04f      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a30      	ldr	r2, [pc, #192]	@ (8005894 <HAL_DMA_Abort_IT+0x3c8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d04a      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005898 <HAL_DMA_Abort_IT+0x3cc>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d045      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a2d      	ldr	r2, [pc, #180]	@ (800589c <HAL_DMA_Abort_IT+0x3d0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d040      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a2b      	ldr	r2, [pc, #172]	@ (80058a0 <HAL_DMA_Abort_IT+0x3d4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d03b      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a2a      	ldr	r2, [pc, #168]	@ (80058a4 <HAL_DMA_Abort_IT+0x3d8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d036      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a28      	ldr	r2, [pc, #160]	@ (80058a8 <HAL_DMA_Abort_IT+0x3dc>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d031      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a27      	ldr	r2, [pc, #156]	@ (80058ac <HAL_DMA_Abort_IT+0x3e0>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d02c      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a25      	ldr	r2, [pc, #148]	@ (80058b0 <HAL_DMA_Abort_IT+0x3e4>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d027      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a24      	ldr	r2, [pc, #144]	@ (80058b4 <HAL_DMA_Abort_IT+0x3e8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d022      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a22      	ldr	r2, [pc, #136]	@ (80058b8 <HAL_DMA_Abort_IT+0x3ec>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d01d      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a21      	ldr	r2, [pc, #132]	@ (80058bc <HAL_DMA_Abort_IT+0x3f0>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d018      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1f      	ldr	r2, [pc, #124]	@ (80058c0 <HAL_DMA_Abort_IT+0x3f4>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d013      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a1e      	ldr	r2, [pc, #120]	@ (80058c4 <HAL_DMA_Abort_IT+0x3f8>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00e      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a1c      	ldr	r2, [pc, #112]	@ (80058c8 <HAL_DMA_Abort_IT+0x3fc>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d009      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a1b      	ldr	r2, [pc, #108]	@ (80058cc <HAL_DMA_Abort_IT+0x400>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d004      	beq.n	800586e <HAL_DMA_Abort_IT+0x3a2>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a19      	ldr	r2, [pc, #100]	@ (80058d0 <HAL_DMA_Abort_IT+0x404>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d132      	bne.n	80058d4 <HAL_DMA_Abort_IT+0x408>
 800586e:	2301      	movs	r3, #1
 8005870:	e031      	b.n	80058d6 <HAL_DMA_Abort_IT+0x40a>
 8005872:	bf00      	nop
 8005874:	40020010 	.word	0x40020010
 8005878:	40020028 	.word	0x40020028
 800587c:	40020040 	.word	0x40020040
 8005880:	40020058 	.word	0x40020058
 8005884:	40020070 	.word	0x40020070
 8005888:	40020088 	.word	0x40020088
 800588c:	400200a0 	.word	0x400200a0
 8005890:	400200b8 	.word	0x400200b8
 8005894:	40020410 	.word	0x40020410
 8005898:	40020428 	.word	0x40020428
 800589c:	40020440 	.word	0x40020440
 80058a0:	40020458 	.word	0x40020458
 80058a4:	40020470 	.word	0x40020470
 80058a8:	40020488 	.word	0x40020488
 80058ac:	400204a0 	.word	0x400204a0
 80058b0:	400204b8 	.word	0x400204b8
 80058b4:	58025408 	.word	0x58025408
 80058b8:	5802541c 	.word	0x5802541c
 80058bc:	58025430 	.word	0x58025430
 80058c0:	58025444 	.word	0x58025444
 80058c4:	58025458 	.word	0x58025458
 80058c8:	5802546c 	.word	0x5802546c
 80058cc:	58025480 	.word	0x58025480
 80058d0:	58025494 	.word	0x58025494
 80058d4:	2300      	movs	r3, #0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d028      	beq.n	800592c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058e8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	2201      	movs	r2, #1
 80058fa:	409a      	lsls	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005908:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00c      	beq.n	800592c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800591c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005920:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800592a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop

08005958 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005966:	b2db      	uxtb	r3, r3
}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e04f      	b.n	8005a26 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d106      	bne.n	80059a0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fc fbe2 	bl	8002164 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	4b20      	ldr	r3, [pc, #128]	@ (8005a30 <HAL_DMA2D_Init+0xbc>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6851      	ldr	r1, [r2, #4]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	69d2      	ldr	r2, [r2, #28]
 80059ba:	4311      	orrs	r1, r2
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6812      	ldr	r2, [r2, #0]
 80059c0:	430b      	orrs	r3, r1
 80059c2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005a34 <HAL_DMA2D_Init+0xc0>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6891      	ldr	r1, [r2, #8]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6992      	ldr	r2, [r2, #24]
 80059d6:	4311      	orrs	r1, r2
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6812      	ldr	r2, [r2, #0]
 80059dc:	430b      	orrs	r3, r1
 80059de:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059e6:	4b14      	ldr	r3, [pc, #80]	@ (8005a38 <HAL_DMA2D_Init+0xc4>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	68d1      	ldr	r1, [r2, #12]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6812      	ldr	r2, [r2, #0]
 80059f2:	430b      	orrs	r3, r1
 80059f4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	051a      	lsls	r2, r3, #20
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	055b      	lsls	r3, r3, #21
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	fff8ffbf 	.word	0xfff8ffbf
 8005a34:	fffffef8 	.word	0xfffffef8
 8005a38:	ffff0000 	.word	0xffff0000

08005a3c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_DMA2D_ConfigLayer+0x24>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e092      	b.n	8005b86 <HAL_DMA2D_ConfigLayer+0x14a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	4613      	mov	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	1a9b      	subs	r3, r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	3328      	adds	r3, #40	@ 0x28
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	4413      	add	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	041b      	lsls	r3, r3, #16
 8005a8c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005a94:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005aa0:	4b3c      	ldr	r3, [pc, #240]	@ (8005b94 <HAL_DMA2D_ConfigLayer+0x158>)
 8005aa2:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b0a      	cmp	r3, #10
 8005aaa:	d003      	beq.n	8005ab4 <HAL_DMA2D_ConfigLayer+0x78>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b09      	cmp	r3, #9
 8005ab2:	d107      	bne.n	8005ac4 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	613b      	str	r3, [r7, #16]
 8005ac2:	e005      	b.n	8005ad0 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	061b      	lsls	r3, r3, #24
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d120      	bne.n	8005b18 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	43db      	mvns	r3, r3
 8005ae0:	ea02 0103 	and.w	r1, r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	6812      	ldr	r2, [r2, #0]
 8005af6:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b0a      	cmp	r3, #10
 8005afe:	d003      	beq.n	8005b08 <HAL_DMA2D_ConfigLayer+0xcc>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2b09      	cmp	r3, #9
 8005b06:	d135      	bne.n	8005b74 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005b14:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b16:	e02d      	b.n	8005b74 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2b0b      	cmp	r3, #11
 8005b1e:	d109      	bne.n	8005b34 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	049b      	lsls	r3, r3, #18
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8005b32:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69da      	ldr	r2, [r3, #28]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	43db      	mvns	r3, r3
 8005b3e:	ea02 0103 	and.w	r1, r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	6812      	ldr	r2, [r2, #0]
 8005b54:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b0a      	cmp	r3, #10
 8005b5c:	d003      	beq.n	8005b66 <HAL_DMA2D_ConfigLayer+0x12a>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2b09      	cmp	r3, #9
 8005b64:	d106      	bne.n	8005b74 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005b72:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	371c      	adds	r7, #28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	ff33000f 	.word	0xff33000f

08005b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b089      	sub	sp, #36	@ 0x24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005ba6:	4b86      	ldr	r3, [pc, #536]	@ (8005dc0 <HAL_GPIO_Init+0x228>)
 8005ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005baa:	e18c      	b.n	8005ec6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb8:	4013      	ands	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 817e 	beq.w	8005ec0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f003 0303 	and.w	r3, r3, #3
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d005      	beq.n	8005bdc <HAL_GPIO_Init+0x44>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f003 0303 	and.w	r3, r3, #3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d130      	bne.n	8005c3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	2203      	movs	r2, #3
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	43db      	mvns	r3, r3
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c12:	2201      	movs	r2, #1
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1a:	43db      	mvns	r3, r3
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	091b      	lsrs	r3, r3, #4
 8005c28:	f003 0201 	and.w	r2, r3, #1
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d017      	beq.n	8005c7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	2203      	movs	r2, #3
 8005c56:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5a:	43db      	mvns	r3, r3
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d123      	bne.n	8005cce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	08da      	lsrs	r2, r3, #3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3208      	adds	r2, #8
 8005c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	220f      	movs	r2, #15
 8005c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca2:	43db      	mvns	r3, r3
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	691a      	ldr	r2, [r3, #16]
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	08da      	lsrs	r2, r3, #3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3208      	adds	r2, #8
 8005cc8:	69b9      	ldr	r1, [r7, #24]
 8005cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	2203      	movs	r2, #3
 8005cda:	fa02 f303 	lsl.w	r3, r2, r3
 8005cde:	43db      	mvns	r3, r3
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f003 0203 	and.w	r2, r3, #3
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 80d8 	beq.w	8005ec0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d10:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc4 <HAL_GPIO_Init+0x22c>)
 8005d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d16:	4a2b      	ldr	r2, [pc, #172]	@ (8005dc4 <HAL_GPIO_Init+0x22c>)
 8005d18:	f043 0302 	orr.w	r3, r3, #2
 8005d1c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005d20:	4b28      	ldr	r3, [pc, #160]	@ (8005dc4 <HAL_GPIO_Init+0x22c>)
 8005d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d2e:	4a26      	ldr	r2, [pc, #152]	@ (8005dc8 <HAL_GPIO_Init+0x230>)
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	089b      	lsrs	r3, r3, #2
 8005d34:	3302      	adds	r3, #2
 8005d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	220f      	movs	r2, #15
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	43db      	mvns	r3, r3
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a1d      	ldr	r2, [pc, #116]	@ (8005dcc <HAL_GPIO_Init+0x234>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d04a      	beq.n	8005df0 <HAL_GPIO_Init+0x258>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8005dd0 <HAL_GPIO_Init+0x238>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d02b      	beq.n	8005dba <HAL_GPIO_Init+0x222>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a1b      	ldr	r2, [pc, #108]	@ (8005dd4 <HAL_GPIO_Init+0x23c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d025      	beq.n	8005db6 <HAL_GPIO_Init+0x21e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a1a      	ldr	r2, [pc, #104]	@ (8005dd8 <HAL_GPIO_Init+0x240>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d01f      	beq.n	8005db2 <HAL_GPIO_Init+0x21a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a19      	ldr	r2, [pc, #100]	@ (8005ddc <HAL_GPIO_Init+0x244>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d019      	beq.n	8005dae <HAL_GPIO_Init+0x216>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a18      	ldr	r2, [pc, #96]	@ (8005de0 <HAL_GPIO_Init+0x248>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <HAL_GPIO_Init+0x212>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a17      	ldr	r2, [pc, #92]	@ (8005de4 <HAL_GPIO_Init+0x24c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00d      	beq.n	8005da6 <HAL_GPIO_Init+0x20e>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a16      	ldr	r2, [pc, #88]	@ (8005de8 <HAL_GPIO_Init+0x250>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d007      	beq.n	8005da2 <HAL_GPIO_Init+0x20a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a15      	ldr	r2, [pc, #84]	@ (8005dec <HAL_GPIO_Init+0x254>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d101      	bne.n	8005d9e <HAL_GPIO_Init+0x206>
 8005d9a:	2309      	movs	r3, #9
 8005d9c:	e029      	b.n	8005df2 <HAL_GPIO_Init+0x25a>
 8005d9e:	230a      	movs	r3, #10
 8005da0:	e027      	b.n	8005df2 <HAL_GPIO_Init+0x25a>
 8005da2:	2307      	movs	r3, #7
 8005da4:	e025      	b.n	8005df2 <HAL_GPIO_Init+0x25a>
 8005da6:	2306      	movs	r3, #6
 8005da8:	e023      	b.n	8005df2 <HAL_GPIO_Init+0x25a>
 8005daa:	2305      	movs	r3, #5
 8005dac:	e021      	b.n	8005df2 <HAL_GPIO_Init+0x25a>
 8005dae:	2304      	movs	r3, #4
 8005db0:	e01f      	b.n	8005df2 <HAL_GPIO_Init+0x25a>
 8005db2:	2303      	movs	r3, #3
 8005db4:	e01d      	b.n	8005df2 <HAL_GPIO_Init+0x25a>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e01b      	b.n	8005df2 <HAL_GPIO_Init+0x25a>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e019      	b.n	8005df2 <HAL_GPIO_Init+0x25a>
 8005dbe:	bf00      	nop
 8005dc0:	58000080 	.word	0x58000080
 8005dc4:	58024400 	.word	0x58024400
 8005dc8:	58000400 	.word	0x58000400
 8005dcc:	58020000 	.word	0x58020000
 8005dd0:	58020400 	.word	0x58020400
 8005dd4:	58020800 	.word	0x58020800
 8005dd8:	58020c00 	.word	0x58020c00
 8005ddc:	58021000 	.word	0x58021000
 8005de0:	58021400 	.word	0x58021400
 8005de4:	58021800 	.word	0x58021800
 8005de8:	58021c00 	.word	0x58021c00
 8005dec:	58022400 	.word	0x58022400
 8005df0:	2300      	movs	r3, #0
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	f002 0203 	and.w	r2, r2, #3
 8005df8:	0092      	lsls	r2, r2, #2
 8005dfa:	4093      	lsls	r3, r2
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e02:	4938      	ldr	r1, [pc, #224]	@ (8005ee4 <HAL_GPIO_Init+0x34c>)
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	089b      	lsrs	r3, r3, #2
 8005e08:	3302      	adds	r3, #2
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	43db      	mvns	r3, r3
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	43db      	mvns	r3, r3
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	43db      	mvns	r3, r3
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f47f ae6b 	bne.w	8005bac <HAL_GPIO_Init+0x14>
  }
}
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	3724      	adds	r7, #36	@ 0x24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	58000400 	.word	0x58000400

08005ee8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691a      	ldr	r2, [r3, #16]
 8005ef8:	887b      	ldrh	r3, [r7, #2]
 8005efa:	4013      	ands	r3, r2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f00:	2301      	movs	r3, #1
 8005f02:	73fb      	strb	r3, [r7, #15]
 8005f04:	e001      	b.n	8005f0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f06:	2300      	movs	r3, #0
 8005f08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	807b      	strh	r3, [r7, #2]
 8005f24:	4613      	mov	r3, r2
 8005f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f28:	787b      	ldrb	r3, [r7, #1]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f2e:	887a      	ldrh	r2, [r7, #2]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005f34:	e003      	b.n	8005f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005f36:	887b      	ldrh	r3, [r7, #2]
 8005f38:	041a      	lsls	r2, r3, #16
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	619a      	str	r2, [r3, #24]
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b082      	sub	sp, #8
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	4603      	mov	r3, r0
 8005f52:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f58:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005f5c:	88fb      	ldrh	r3, [r7, #6]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d008      	beq.n	8005f76 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f68:	88fb      	ldrh	r3, [r7, #6]
 8005f6a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f6e:	88fb      	ldrh	r3, [r7, #6]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fb fea1 	bl	8001cb8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e08b      	b.n	80060aa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fc f8fe 	bl	80021a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2224      	movs	r2, #36	@ 0x24
 8005fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0201 	bic.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005fd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fe0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d107      	bne.n	8005ffa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ff6:	609a      	str	r2, [r3, #8]
 8005ff8:	e006      	b.n	8006008 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006006:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d108      	bne.n	8006022 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800601e:	605a      	str	r2, [r3, #4]
 8006020:	e007      	b.n	8006032 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006030:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6859      	ldr	r1, [r3, #4]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	4b1d      	ldr	r3, [pc, #116]	@ (80060b4 <HAL_I2C_Init+0x134>)
 800603e:	430b      	orrs	r3, r1
 8006040:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68da      	ldr	r2, [r3, #12]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006050:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691a      	ldr	r2, [r3, #16]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	69d9      	ldr	r1, [r3, #28]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a1a      	ldr	r2, [r3, #32]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0201 	orr.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2220      	movs	r2, #32
 8006096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	02008000 	.word	0x02008000

080060b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af02      	add	r7, sp, #8
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	607a      	str	r2, [r7, #4]
 80060c2:	461a      	mov	r2, r3
 80060c4:	460b      	mov	r3, r1
 80060c6:	817b      	strh	r3, [r7, #10]
 80060c8:	4613      	mov	r3, r2
 80060ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	f040 80fd 	bne.w	80062d4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_I2C_Master_Transmit+0x30>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e0f6      	b.n	80062d6 <HAL_I2C_Master_Transmit+0x21e>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060f0:	f7fc fc62 	bl	80029b8 <HAL_GetTick>
 80060f4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	2319      	movs	r3, #25
 80060fc:	2201      	movs	r2, #1
 80060fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f001 fe6b 	bl	8007dde <I2C_WaitOnFlagUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e0e1      	b.n	80062d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2221      	movs	r2, #33	@ 0x21
 8006116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2210      	movs	r2, #16
 800611e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	893a      	ldrh	r2, [r7, #8]
 8006132:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800613e:	b29b      	uxth	r3, r3
 8006140:	2bff      	cmp	r3, #255	@ 0xff
 8006142:	d906      	bls.n	8006152 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	22ff      	movs	r2, #255	@ 0xff
 8006148:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800614a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	e007      	b.n	8006162 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006156:	b29a      	uxth	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800615c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006160:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006166:	2b00      	cmp	r3, #0
 8006168:	d024      	beq.n	80061b4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616e:	781a      	ldrb	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	3301      	adds	r3, #1
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	8979      	ldrh	r1, [r7, #10]
 80061a6:	4b4e      	ldr	r3, [pc, #312]	@ (80062e0 <HAL_I2C_Master_Transmit+0x228>)
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f001 ffd9 	bl	8008164 <I2C_TransferConfig>
 80061b2:	e066      	b.n	8006282 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	8979      	ldrh	r1, [r7, #10]
 80061bc:	4b48      	ldr	r3, [pc, #288]	@ (80062e0 <HAL_I2C_Master_Transmit+0x228>)
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f001 ffce 	bl	8008164 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80061c8:	e05b      	b.n	8006282 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	6a39      	ldr	r1, [r7, #32]
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f001 fe5e 	bl	8007e90 <I2C_WaitOnTXISFlagUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e07b      	b.n	80062d6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e2:	781a      	ldrb	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	3b01      	subs	r3, #1
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006212:	b29b      	uxth	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d034      	beq.n	8006282 <HAL_I2C_Master_Transmit+0x1ca>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800621c:	2b00      	cmp	r3, #0
 800621e:	d130      	bne.n	8006282 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	2200      	movs	r2, #0
 8006228:	2180      	movs	r1, #128	@ 0x80
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f001 fdd7 	bl	8007dde <I2C_WaitOnFlagUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e04d      	b.n	80062d6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800623e:	b29b      	uxth	r3, r3
 8006240:	2bff      	cmp	r3, #255	@ 0xff
 8006242:	d90e      	bls.n	8006262 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	22ff      	movs	r2, #255	@ 0xff
 8006248:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800624e:	b2da      	uxtb	r2, r3
 8006250:	8979      	ldrh	r1, [r7, #10]
 8006252:	2300      	movs	r3, #0
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f001 ff82 	bl	8008164 <I2C_TransferConfig>
 8006260:	e00f      	b.n	8006282 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006270:	b2da      	uxtb	r2, r3
 8006272:	8979      	ldrh	r1, [r7, #10]
 8006274:	2300      	movs	r3, #0
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f001 ff71 	bl	8008164 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006286:	b29b      	uxth	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d19e      	bne.n	80061ca <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	6a39      	ldr	r1, [r7, #32]
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f001 fe44 	bl	8007f1e <I2C_WaitOnSTOPFlagUntilTimeout>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e01a      	b.n	80062d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2220      	movs	r2, #32
 80062a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6859      	ldr	r1, [r3, #4]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4b0c      	ldr	r3, [pc, #48]	@ (80062e4 <HAL_I2C_Master_Transmit+0x22c>)
 80062b4:	400b      	ands	r3, r1
 80062b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	e000      	b.n	80062d6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80062d4:	2302      	movs	r3, #2
  }
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	80002000 	.word	0x80002000
 80062e4:	fe00e800 	.word	0xfe00e800

080062e8 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b088      	sub	sp, #32
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	607a      	str	r2, [r7, #4]
 80062f2:	461a      	mov	r2, r3
 80062f4:	460b      	mov	r3, r1
 80062f6:	817b      	strh	r3, [r7, #10]
 80062f8:	4613      	mov	r3, r2
 80062fa:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b20      	cmp	r3, #32
 8006306:	d153      	bne.n	80063b0 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006312:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006316:	d101      	bne.n	800631c <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8006318:	2302      	movs	r3, #2
 800631a:	e04a      	b.n	80063b2 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006322:	2b01      	cmp	r3, #1
 8006324:	d101      	bne.n	800632a <HAL_I2C_Master_Receive_IT+0x42>
 8006326:	2302      	movs	r3, #2
 8006328:	e043      	b.n	80063b2 <HAL_I2C_Master_Receive_IT+0xca>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2222      	movs	r2, #34	@ 0x22
 8006336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2210      	movs	r2, #16
 800633e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	893a      	ldrh	r2, [r7, #8]
 8006352:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4a19      	ldr	r2, [pc, #100]	@ (80063bc <HAL_I2C_Master_Receive_IT+0xd4>)
 8006358:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4a18      	ldr	r2, [pc, #96]	@ (80063c0 <HAL_I2C_Master_Receive_IT+0xd8>)
 800635e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006364:	b29b      	uxth	r3, r3
 8006366:	2bff      	cmp	r3, #255	@ 0xff
 8006368:	d906      	bls.n	8006378 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	22ff      	movs	r2, #255	@ 0xff
 800636e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006370:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	e007      	b.n	8006388 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006382:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006386:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800638c:	b2da      	uxtb	r2, r3
 800638e:	8979      	ldrh	r1, [r7, #10]
 8006390:	4b0c      	ldr	r3, [pc, #48]	@ (80063c4 <HAL_I2C_Master_Receive_IT+0xdc>)
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f001 fee4 	bl	8008164 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80063a4:	2102      	movs	r1, #2
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f001 ff0e 	bl	80081c8 <I2C_Enable_IRQ>

    return HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	e000      	b.n	80063b2 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80063b0:	2302      	movs	r3, #2
  }
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	ffff0000 	.word	0xffff0000
 80063c0:	0800657b 	.word	0x0800657b
 80063c4:	80002400 	.word	0x80002400

080063c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	68f9      	ldr	r1, [r7, #12]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	4798      	blx	r3
  }
}
 80063f4:	bf00      	nop
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	0a1b      	lsrs	r3, r3, #8
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d010      	beq.n	8006442 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	09db      	lsrs	r3, r3, #7
 8006424:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00a      	beq.n	8006442 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006430:	f043 0201 	orr.w	r2, r3, #1
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006440:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	0a9b      	lsrs	r3, r3, #10
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d010      	beq.n	8006470 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	09db      	lsrs	r3, r3, #7
 8006452:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800645e:	f043 0208 	orr.w	r2, r3, #8
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800646e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	0a5b      	lsrs	r3, r3, #9
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d010      	beq.n	800649e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	09db      	lsrs	r3, r3, #7
 8006480:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00a      	beq.n	800649e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800648c:	f043 0202 	orr.w	r2, r3, #2
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800649c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f003 030b 	and.w	r3, r3, #11
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80064ae:	68f9      	ldr	r1, [r7, #12]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f001 fb3b 	bl	8007b2c <I2C_ITError>
  }
}
 80064b6:	bf00      	nop
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80064ee:	bf00      	nop
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	460b      	mov	r3, r1
 8006504:	70fb      	strb	r3, [r7, #3]
 8006506:	4613      	mov	r3, r2
 8006508:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006532:	bf00      	nop
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800655a:	bf00      	nop
 800655c:	370c      	adds	r7, #12
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006566:	b480      	push	{r7}
 8006568:	b083      	sub	sp, #12
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b088      	sub	sp, #32
 800657e:	af02      	add	r7, sp, #8
 8006580:	60f8      	str	r0, [r7, #12]
 8006582:	60b9      	str	r1, [r7, #8]
 8006584:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <I2C_Master_ISR_IT+0x1e>
 8006594:	2302      	movs	r3, #2
 8006596:	e120      	b.n	80067da <I2C_Master_ISR_IT+0x260>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	091b      	lsrs	r3, r3, #4
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d013      	beq.n	80065d4 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	091b      	lsrs	r3, r3, #4
 80065b0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00d      	beq.n	80065d4 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2210      	movs	r2, #16
 80065be:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c4:	f043 0204 	orr.w	r2, r3, #4
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f001 fbc4 	bl	8007d5a <I2C_Flush_TXDR>
 80065d2:	e0ed      	b.n	80067b0 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	089b      	lsrs	r3, r3, #2
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d023      	beq.n	8006628 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	089b      	lsrs	r3, r3, #2
 80065e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01d      	beq.n	8006628 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f023 0304 	bic.w	r3, r3, #4
 80065f2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800661c:	b29b      	uxth	r3, r3
 800661e:	3b01      	subs	r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006626:	e0c3      	b.n	80067b0 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	099b      	lsrs	r3, r3, #6
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d12a      	bne.n	800668a <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	085b      	lsrs	r3, r3, #1
 8006638:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800663c:	2b00      	cmp	r3, #0
 800663e:	d024      	beq.n	800668a <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	085b      	lsrs	r3, r3, #1
 8006644:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01e      	beq.n	800668a <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006650:	b29b      	uxth	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 80ac 	beq.w	80067b0 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665c:	781a      	ldrb	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006672:	3b01      	subs	r3, #1
 8006674:	b29a      	uxth	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800667e:	b29b      	uxth	r3, r3
 8006680:	3b01      	subs	r3, #1
 8006682:	b29a      	uxth	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8006688:	e092      	b.n	80067b0 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	09db      	lsrs	r3, r3, #7
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d05d      	beq.n	8006752 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	099b      	lsrs	r3, r3, #6
 800669a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d057      	beq.n	8006752 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d040      	beq.n	800672e <I2C_Master_ISR_IT+0x1b4>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d13c      	bne.n	800672e <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066c0:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	2bff      	cmp	r3, #255	@ 0xff
 80066ca:	d90e      	bls.n	80066ea <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	22ff      	movs	r2, #255	@ 0xff
 80066d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	8a79      	ldrh	r1, [r7, #18]
 80066da:	2300      	movs	r3, #0
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f001 fd3e 	bl	8008164 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066e8:	e032      	b.n	8006750 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066fc:	d00b      	beq.n	8006716 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006702:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006708:	8a79      	ldrh	r1, [r7, #18]
 800670a:	2000      	movs	r0, #0
 800670c:	9000      	str	r0, [sp, #0]
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f001 fd28 	bl	8008164 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006714:	e01c      	b.n	8006750 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800671a:	b2da      	uxtb	r2, r3
 800671c:	8a79      	ldrh	r1, [r7, #18]
 800671e:	2300      	movs	r3, #0
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f001 fd1c 	bl	8008164 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800672c:	e010      	b.n	8006750 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006738:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800673c:	d003      	beq.n	8006746 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 fdde 	bl	8007300 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006744:	e034      	b.n	80067b0 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006746:	2140      	movs	r1, #64	@ 0x40
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f001 f9ef 	bl	8007b2c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800674e:	e02f      	b.n	80067b0 <I2C_Master_ISR_IT+0x236>
 8006750:	e02e      	b.n	80067b0 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	099b      	lsrs	r3, r3, #6
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d028      	beq.n	80067b0 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	099b      	lsrs	r3, r3, #6
 8006762:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006766:	2b00      	cmp	r3, #0
 8006768:	d022      	beq.n	80067b0 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d119      	bne.n	80067a8 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800677e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006782:	d015      	beq.n	80067b0 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006788:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800678c:	d108      	bne.n	80067a0 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800679c:	605a      	str	r2, [r3, #4]
 800679e:	e007      	b.n	80067b0 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 fdad 	bl	8007300 <I2C_ITMasterSeqCplt>
 80067a6:	e003      	b.n	80067b0 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80067a8:	2140      	movs	r1, #64	@ 0x40
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f001 f9be 	bl	8007b2c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	095b      	lsrs	r3, r3, #5
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d009      	beq.n	80067d0 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80067c8:	6979      	ldr	r1, [r7, #20]
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f000 fe34 	bl	8007438 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b086      	sub	sp, #24
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	60f8      	str	r0, [r7, #12]
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d101      	bne.n	8006806 <I2C_Slave_ISR_IT+0x24>
 8006802:	2302      	movs	r3, #2
 8006804:	e0ed      	b.n	80069e2 <I2C_Slave_ISR_IT+0x200>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	095b      	lsrs	r3, r3, #5
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	095b      	lsrs	r3, r3, #5
 800681e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006822:	2b00      	cmp	r3, #0
 8006824:	d004      	beq.n	8006830 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006826:	6939      	ldr	r1, [r7, #16]
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f000 fecf 	bl	80075cc <I2C_ITSlaveCplt>
 800682e:	e0d3      	b.n	80069d8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	091b      	lsrs	r3, r3, #4
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d04d      	beq.n	80068d8 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	091b      	lsrs	r3, r3, #4
 8006840:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006844:	2b00      	cmp	r3, #0
 8006846:	d047      	beq.n	80068d8 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d128      	bne.n	80068a4 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b28      	cmp	r3, #40	@ 0x28
 800685c:	d108      	bne.n	8006870 <I2C_Slave_ISR_IT+0x8e>
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006864:	d104      	bne.n	8006870 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006866:	6939      	ldr	r1, [r7, #16]
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f001 f909 	bl	8007a80 <I2C_ITListenCplt>
 800686e:	e032      	b.n	80068d6 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b29      	cmp	r3, #41	@ 0x29
 800687a:	d10e      	bne.n	800689a <I2C_Slave_ISR_IT+0xb8>
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006882:	d00a      	beq.n	800689a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2210      	movs	r2, #16
 800688a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f001 fa64 	bl	8007d5a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 fd71 	bl	800737a <I2C_ITSlaveSeqCplt>
 8006898:	e01d      	b.n	80068d6 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2210      	movs	r2, #16
 80068a0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80068a2:	e096      	b.n	80069d2 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2210      	movs	r2, #16
 80068aa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068b0:	f043 0204 	orr.w	r2, r3, #4
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d004      	beq.n	80068c8 <I2C_Slave_ISR_IT+0xe6>
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068c4:	f040 8085 	bne.w	80069d2 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068cc:	4619      	mov	r1, r3
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f001 f92c 	bl	8007b2c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80068d4:	e07d      	b.n	80069d2 <I2C_Slave_ISR_IT+0x1f0>
 80068d6:	e07c      	b.n	80069d2 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	089b      	lsrs	r3, r3, #2
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d030      	beq.n	8006946 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	089b      	lsrs	r3, r3, #2
 80068e8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d02a      	beq.n	8006946 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d018      	beq.n	800692c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006916:	3b01      	subs	r3, #1
 8006918:	b29a      	uxth	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006922:	b29b      	uxth	r3, r3
 8006924:	3b01      	subs	r3, #1
 8006926:	b29a      	uxth	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d14f      	bne.n	80069d6 <I2C_Slave_ISR_IT+0x1f4>
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800693c:	d04b      	beq.n	80069d6 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 fd1b 	bl	800737a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006944:	e047      	b.n	80069d6 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	08db      	lsrs	r3, r3, #3
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	08db      	lsrs	r3, r3, #3
 8006956:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800695a:	2b00      	cmp	r3, #0
 800695c:	d004      	beq.n	8006968 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800695e:	6939      	ldr	r1, [r7, #16]
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 fc49 	bl	80071f8 <I2C_ITAddrCplt>
 8006966:	e037      	b.n	80069d8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	085b      	lsrs	r3, r3, #1
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b00      	cmp	r3, #0
 8006972:	d031      	beq.n	80069d8 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	085b      	lsrs	r3, r3, #1
 8006978:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800697c:	2b00      	cmp	r3, #0
 800697e:	d02b      	beq.n	80069d8 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d018      	beq.n	80069bc <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698e:	781a      	ldrb	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069b2:	3b01      	subs	r3, #1
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80069ba:	e00d      	b.n	80069d8 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069c2:	d002      	beq.n	80069ca <I2C_Slave_ISR_IT+0x1e8>
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d106      	bne.n	80069d8 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 fcd5 	bl	800737a <I2C_ITSlaveSeqCplt>
 80069d0:	e002      	b.n	80069d8 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80069d2:	bf00      	nop
 80069d4:	e000      	b.n	80069d8 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80069d6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b088      	sub	sp, #32
 80069ee:	af02      	add	r7, sp, #8
 80069f0:	60f8      	str	r0, [r7, #12]
 80069f2:	60b9      	str	r1, [r7, #8]
 80069f4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d101      	bne.n	8006a04 <I2C_Master_ISR_DMA+0x1a>
 8006a00:	2302      	movs	r3, #2
 8006a02:	e0e1      	b.n	8006bc8 <I2C_Master_ISR_DMA+0x1de>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	091b      	lsrs	r3, r3, #4
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d017      	beq.n	8006a48 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	091b      	lsrs	r3, r3, #4
 8006a1c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d011      	beq.n	8006a48 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2210      	movs	r2, #16
 8006a2a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a30:	f043 0204 	orr.w	r2, r3, #4
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006a38:	2120      	movs	r1, #32
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f001 fbc4 	bl	80081c8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f001 f98a 	bl	8007d5a <I2C_Flush_TXDR>
 8006a46:	e0ba      	b.n	8006bbe <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	09db      	lsrs	r3, r3, #7
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d072      	beq.n	8006b3a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	099b      	lsrs	r3, r3, #6
 8006a58:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d06c      	beq.n	8006b3a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a6e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d04e      	beq.n	8006b18 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a86:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2bff      	cmp	r3, #255	@ 0xff
 8006a90:	d906      	bls.n	8006aa0 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	22ff      	movs	r2, #255	@ 0xff
 8006a96:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8006a98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a9c:	617b      	str	r3, [r7, #20]
 8006a9e:	e010      	b.n	8006ac2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ab2:	d003      	beq.n	8006abc <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab8:	617b      	str	r3, [r7, #20]
 8006aba:	e002      	b.n	8006ac2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006abc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ac0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	8a79      	ldrh	r1, [r7, #18]
 8006aca:	2300      	movs	r3, #0
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f001 fb47 	bl	8008164 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b22      	cmp	r3, #34	@ 0x22
 8006af2:	d108      	bne.n	8006b06 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b02:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006b04:	e05b      	b.n	8006bbe <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b14:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006b16:	e052      	b.n	8006bbe <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b26:	d003      	beq.n	8006b30 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 fbe9 	bl	8007300 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006b2e:	e046      	b.n	8006bbe <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006b30:	2140      	movs	r1, #64	@ 0x40
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 fffa 	bl	8007b2c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006b38:	e041      	b.n	8006bbe <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	099b      	lsrs	r3, r3, #6
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d029      	beq.n	8006b9a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	099b      	lsrs	r3, r3, #6
 8006b4a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d023      	beq.n	8006b9a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d119      	bne.n	8006b90 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b6a:	d027      	beq.n	8006bbc <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b74:	d108      	bne.n	8006b88 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b84:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006b86:	e019      	b.n	8006bbc <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 fbb9 	bl	8007300 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006b8e:	e015      	b.n	8006bbc <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006b90:	2140      	movs	r1, #64	@ 0x40
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 ffca 	bl	8007b2c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006b98:	e010      	b.n	8006bbc <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	095b      	lsrs	r3, r3, #5
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00b      	beq.n	8006bbe <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	095b      	lsrs	r3, r3, #5
 8006baa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d005      	beq.n	8006bbe <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006bb2:	68b9      	ldr	r1, [r7, #8]
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 fc3f 	bl	8007438 <I2C_ITMasterCplt>
 8006bba:	e000      	b.n	8006bbe <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8006bbc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3718      	adds	r7, #24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006bdc:	4b92      	ldr	r3, [pc, #584]	@ (8006e28 <I2C_Mem_ISR_DMA+0x258>)
 8006bde:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <I2C_Mem_ISR_DMA+0x1e>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e118      	b.n	8006e20 <I2C_Mem_ISR_DMA+0x250>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	091b      	lsrs	r3, r3, #4
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d017      	beq.n	8006c32 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	091b      	lsrs	r3, r3, #4
 8006c06:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d011      	beq.n	8006c32 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2210      	movs	r2, #16
 8006c14:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c1a:	f043 0204 	orr.w	r2, r3, #4
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006c22:	2120      	movs	r1, #32
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f001 facf 	bl	80081c8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f001 f895 	bl	8007d5a <I2C_Flush_TXDR>
 8006c30:	e0f1      	b.n	8006e16 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	085b      	lsrs	r3, r3, #1
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00f      	beq.n	8006c5e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	085b      	lsrs	r3, r3, #1
 8006c42:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d009      	beq.n	8006c5e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006c52:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5a:	651a      	str	r2, [r3, #80]	@ 0x50
 8006c5c:	e0db      	b.n	8006e16 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	09db      	lsrs	r3, r3, #7
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d060      	beq.n	8006d2c <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	099b      	lsrs	r3, r3, #6
 8006c6e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d05a      	beq.n	8006d2c <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c76:	2101      	movs	r1, #1
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f001 fb29 	bl	80082d0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006c7e:	2110      	movs	r1, #16
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f001 faa1 	bl	80081c8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d048      	beq.n	8006d22 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	2bff      	cmp	r3, #255	@ 0xff
 8006c98:	d910      	bls.n	8006cbc <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	22ff      	movs	r2, #255	@ 0xff
 8006c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ca4:	b299      	uxth	r1, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	2300      	movs	r3, #0
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f001 fa55 	bl	8008164 <I2C_TransferConfig>
 8006cba:	e011      	b.n	8006ce0 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cca:	b299      	uxth	r1, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f001 fa42 	bl	8008164 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b22      	cmp	r3, #34	@ 0x22
 8006cfc:	d108      	bne.n	8006d10 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d0c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006d0e:	e082      	b.n	8006e16 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d1e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006d20:	e079      	b.n	8006e16 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006d22:	2140      	movs	r1, #64	@ 0x40
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 ff01 	bl	8007b2c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006d2a:	e074      	b.n	8006e16 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	099b      	lsrs	r3, r3, #6
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d05e      	beq.n	8006df6 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	099b      	lsrs	r3, r3, #6
 8006d3c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d058      	beq.n	8006df6 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006d44:	2101      	movs	r1, #1
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f001 fac2 	bl	80082d0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006d4c:	2110      	movs	r1, #16
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f001 fa3a 	bl	80081c8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b22      	cmp	r3, #34	@ 0x22
 8006d5e:	d101      	bne.n	8006d64 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8006d60:	4b32      	ldr	r3, [pc, #200]	@ (8006e2c <I2C_Mem_ISR_DMA+0x25c>)
 8006d62:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	2bff      	cmp	r3, #255	@ 0xff
 8006d6c:	d910      	bls.n	8006d90 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	22ff      	movs	r2, #255	@ 0xff
 8006d72:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d78:	b299      	uxth	r1, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f001 f9eb 	bl	8008164 <I2C_TransferConfig>
 8006d8e:	e011      	b.n	8006db4 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d9e:	b299      	uxth	r1, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f001 f9d8 	bl	8008164 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b22      	cmp	r3, #34	@ 0x22
 8006dd0:	d108      	bne.n	8006de4 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006de0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006de2:	e018      	b.n	8006e16 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006df2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006df4:	e00f      	b.n	8006e16 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	095b      	lsrs	r3, r3, #5
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d009      	beq.n	8006e16 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	095b      	lsrs	r3, r3, #5
 8006e06:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006e0e:	68b9      	ldr	r1, [r7, #8]
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 fb11 	bl	8007438 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3718      	adds	r7, #24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	80002000 	.word	0x80002000
 8006e2c:	80002400 	.word	0x80002400

08006e30 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e40:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <I2C_Slave_ISR_DMA+0x24>
 8006e50:	2302      	movs	r3, #2
 8006e52:	e1cc      	b.n	80071ee <I2C_Slave_ISR_DMA+0x3be>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	095b      	lsrs	r3, r3, #5
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00a      	beq.n	8006e7e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	095b      	lsrs	r3, r3, #5
 8006e6c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d004      	beq.n	8006e7e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006e74:	68b9      	ldr	r1, [r7, #8]
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 fba8 	bl	80075cc <I2C_ITSlaveCplt>
 8006e7c:	e1b2      	b.n	80071e4 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	091b      	lsrs	r3, r3, #4
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f000 819c 	beq.w	80071c4 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	091b      	lsrs	r3, r3, #4
 8006e90:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8195 	beq.w	80071c4 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	0b9b      	lsrs	r3, r3, #14
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d106      	bne.n	8006eb4 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	0bdb      	lsrs	r3, r3, #15
 8006eaa:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 8181 	beq.w	80071b6 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d07c      	beq.n	8006fb6 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	0bdb      	lsrs	r3, r3, #15
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d076      	beq.n	8006fb6 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a75      	ldr	r2, [pc, #468]	@ (80070a4 <I2C_Slave_ISR_DMA+0x274>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d059      	beq.n	8006f88 <I2C_Slave_ISR_DMA+0x158>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a73      	ldr	r2, [pc, #460]	@ (80070a8 <I2C_Slave_ISR_DMA+0x278>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d053      	beq.n	8006f88 <I2C_Slave_ISR_DMA+0x158>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a71      	ldr	r2, [pc, #452]	@ (80070ac <I2C_Slave_ISR_DMA+0x27c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d04d      	beq.n	8006f88 <I2C_Slave_ISR_DMA+0x158>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a6f      	ldr	r2, [pc, #444]	@ (80070b0 <I2C_Slave_ISR_DMA+0x280>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d047      	beq.n	8006f88 <I2C_Slave_ISR_DMA+0x158>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a6d      	ldr	r2, [pc, #436]	@ (80070b4 <I2C_Slave_ISR_DMA+0x284>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d041      	beq.n	8006f88 <I2C_Slave_ISR_DMA+0x158>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a6b      	ldr	r2, [pc, #428]	@ (80070b8 <I2C_Slave_ISR_DMA+0x288>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d03b      	beq.n	8006f88 <I2C_Slave_ISR_DMA+0x158>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a69      	ldr	r2, [pc, #420]	@ (80070bc <I2C_Slave_ISR_DMA+0x28c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d035      	beq.n	8006f88 <I2C_Slave_ISR_DMA+0x158>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a67      	ldr	r2, [pc, #412]	@ (80070c0 <I2C_Slave_ISR_DMA+0x290>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d02f      	beq.n	8006f88 <I2C_Slave_ISR_DMA+0x158>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a65      	ldr	r2, [pc, #404]	@ (80070c4 <I2C_Slave_ISR_DMA+0x294>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d029      	beq.n	8006f88 <I2C_Slave_ISR_DMA+0x158>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a63      	ldr	r2, [pc, #396]	@ (80070c8 <I2C_Slave_ISR_DMA+0x298>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d023      	beq.n	8006f88 <I2C_Slave_ISR_DMA+0x158>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a61      	ldr	r2, [pc, #388]	@ (80070cc <I2C_Slave_ISR_DMA+0x29c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d01d      	beq.n	8006f88 <I2C_Slave_ISR_DMA+0x158>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a5f      	ldr	r2, [pc, #380]	@ (80070d0 <I2C_Slave_ISR_DMA+0x2a0>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d017      	beq.n	8006f88 <I2C_Slave_ISR_DMA+0x158>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a5d      	ldr	r2, [pc, #372]	@ (80070d4 <I2C_Slave_ISR_DMA+0x2a4>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d011      	beq.n	8006f88 <I2C_Slave_ISR_DMA+0x158>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a5b      	ldr	r2, [pc, #364]	@ (80070d8 <I2C_Slave_ISR_DMA+0x2a8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d00b      	beq.n	8006f88 <I2C_Slave_ISR_DMA+0x158>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a59      	ldr	r2, [pc, #356]	@ (80070dc <I2C_Slave_ISR_DMA+0x2ac>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d005      	beq.n	8006f88 <I2C_Slave_ISR_DMA+0x158>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a57      	ldr	r2, [pc, #348]	@ (80070e0 <I2C_Slave_ISR_DMA+0x2b0>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d109      	bne.n	8006f9c <I2C_Slave_ISR_DMA+0x16c>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	bf0c      	ite	eq
 8006f94:	2301      	moveq	r3, #1
 8006f96:	2300      	movne	r3, #0
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	e008      	b.n	8006fae <I2C_Slave_ISR_DMA+0x17e>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	bf0c      	ite	eq
 8006fa8:	2301      	moveq	r3, #1
 8006faa:	2300      	movne	r3, #0
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 809f 	beq.w	80070fe <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	0b9b      	lsrs	r3, r3, #14
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 8098 	beq.w	80070fe <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a33      	ldr	r2, [pc, #204]	@ (80070a4 <I2C_Slave_ISR_DMA+0x274>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d059      	beq.n	800708e <I2C_Slave_ISR_DMA+0x25e>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a31      	ldr	r2, [pc, #196]	@ (80070a8 <I2C_Slave_ISR_DMA+0x278>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d053      	beq.n	800708e <I2C_Slave_ISR_DMA+0x25e>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a2f      	ldr	r2, [pc, #188]	@ (80070ac <I2C_Slave_ISR_DMA+0x27c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d04d      	beq.n	800708e <I2C_Slave_ISR_DMA+0x25e>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a2d      	ldr	r2, [pc, #180]	@ (80070b0 <I2C_Slave_ISR_DMA+0x280>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d047      	beq.n	800708e <I2C_Slave_ISR_DMA+0x25e>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a2b      	ldr	r2, [pc, #172]	@ (80070b4 <I2C_Slave_ISR_DMA+0x284>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d041      	beq.n	800708e <I2C_Slave_ISR_DMA+0x25e>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a29      	ldr	r2, [pc, #164]	@ (80070b8 <I2C_Slave_ISR_DMA+0x288>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d03b      	beq.n	800708e <I2C_Slave_ISR_DMA+0x25e>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a27      	ldr	r2, [pc, #156]	@ (80070bc <I2C_Slave_ISR_DMA+0x28c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d035      	beq.n	800708e <I2C_Slave_ISR_DMA+0x25e>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a25      	ldr	r2, [pc, #148]	@ (80070c0 <I2C_Slave_ISR_DMA+0x290>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d02f      	beq.n	800708e <I2C_Slave_ISR_DMA+0x25e>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a23      	ldr	r2, [pc, #140]	@ (80070c4 <I2C_Slave_ISR_DMA+0x294>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d029      	beq.n	800708e <I2C_Slave_ISR_DMA+0x25e>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a21      	ldr	r2, [pc, #132]	@ (80070c8 <I2C_Slave_ISR_DMA+0x298>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d023      	beq.n	800708e <I2C_Slave_ISR_DMA+0x25e>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a1f      	ldr	r2, [pc, #124]	@ (80070cc <I2C_Slave_ISR_DMA+0x29c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d01d      	beq.n	800708e <I2C_Slave_ISR_DMA+0x25e>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a1d      	ldr	r2, [pc, #116]	@ (80070d0 <I2C_Slave_ISR_DMA+0x2a0>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d017      	beq.n	800708e <I2C_Slave_ISR_DMA+0x25e>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a1b      	ldr	r2, [pc, #108]	@ (80070d4 <I2C_Slave_ISR_DMA+0x2a4>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d011      	beq.n	800708e <I2C_Slave_ISR_DMA+0x25e>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a19      	ldr	r2, [pc, #100]	@ (80070d8 <I2C_Slave_ISR_DMA+0x2a8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00b      	beq.n	800708e <I2C_Slave_ISR_DMA+0x25e>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a17      	ldr	r2, [pc, #92]	@ (80070dc <I2C_Slave_ISR_DMA+0x2ac>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d005      	beq.n	800708e <I2C_Slave_ISR_DMA+0x25e>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a15      	ldr	r2, [pc, #84]	@ (80070e0 <I2C_Slave_ISR_DMA+0x2b0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d12a      	bne.n	80070e4 <I2C_Slave_ISR_DMA+0x2b4>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	bf0c      	ite	eq
 800709a:	2301      	moveq	r3, #1
 800709c:	2300      	movne	r3, #0
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	e029      	b.n	80070f6 <I2C_Slave_ISR_DMA+0x2c6>
 80070a2:	bf00      	nop
 80070a4:	40020010 	.word	0x40020010
 80070a8:	40020028 	.word	0x40020028
 80070ac:	40020040 	.word	0x40020040
 80070b0:	40020058 	.word	0x40020058
 80070b4:	40020070 	.word	0x40020070
 80070b8:	40020088 	.word	0x40020088
 80070bc:	400200a0 	.word	0x400200a0
 80070c0:	400200b8 	.word	0x400200b8
 80070c4:	40020410 	.word	0x40020410
 80070c8:	40020428 	.word	0x40020428
 80070cc:	40020440 	.word	0x40020440
 80070d0:	40020458 	.word	0x40020458
 80070d4:	40020470 	.word	0x40020470
 80070d8:	40020488 	.word	0x40020488
 80070dc:	400204a0 	.word	0x400204a0
 80070e0:	400204b8 	.word	0x400204b8
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	bf0c      	ite	eq
 80070f0:	2301      	moveq	r3, #1
 80070f2:	2300      	movne	r3, #0
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 80070fa:	2301      	movs	r3, #1
 80070fc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d128      	bne.n	8007156 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b28      	cmp	r3, #40	@ 0x28
 800710e:	d108      	bne.n	8007122 <I2C_Slave_ISR_DMA+0x2f2>
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007116:	d104      	bne.n	8007122 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007118:	68b9      	ldr	r1, [r7, #8]
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 fcb0 	bl	8007a80 <I2C_ITListenCplt>
 8007120:	e048      	b.n	80071b4 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b29      	cmp	r3, #41	@ 0x29
 800712c:	d10e      	bne.n	800714c <I2C_Slave_ISR_DMA+0x31c>
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007134:	d00a      	beq.n	800714c <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2210      	movs	r2, #16
 800713c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 fe0b 	bl	8007d5a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f000 f918 	bl	800737a <I2C_ITSlaveSeqCplt>
 800714a:	e033      	b.n	80071b4 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2210      	movs	r2, #16
 8007152:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007154:	e034      	b.n	80071c0 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2210      	movs	r2, #16
 800715c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007162:	f043 0204 	orr.w	r2, r3, #4
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007170:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <I2C_Slave_ISR_DMA+0x350>
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800717e:	d11f      	bne.n	80071c0 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007180:	7dfb      	ldrb	r3, [r7, #23]
 8007182:	2b21      	cmp	r3, #33	@ 0x21
 8007184:	d002      	beq.n	800718c <I2C_Slave_ISR_DMA+0x35c>
 8007186:	7dfb      	ldrb	r3, [r7, #23]
 8007188:	2b29      	cmp	r3, #41	@ 0x29
 800718a:	d103      	bne.n	8007194 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2221      	movs	r2, #33	@ 0x21
 8007190:	631a      	str	r2, [r3, #48]	@ 0x30
 8007192:	e008      	b.n	80071a6 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007194:	7dfb      	ldrb	r3, [r7, #23]
 8007196:	2b22      	cmp	r3, #34	@ 0x22
 8007198:	d002      	beq.n	80071a0 <I2C_Slave_ISR_DMA+0x370>
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	2b2a      	cmp	r3, #42	@ 0x2a
 800719e:	d102      	bne.n	80071a6 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2222      	movs	r2, #34	@ 0x22
 80071a4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071aa:	4619      	mov	r1, r3
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 fcbd 	bl	8007b2c <I2C_ITError>
      if (treatdmanack == 1U)
 80071b2:	e005      	b.n	80071c0 <I2C_Slave_ISR_DMA+0x390>
 80071b4:	e004      	b.n	80071c0 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2210      	movs	r2, #16
 80071bc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80071be:	e011      	b.n	80071e4 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 80071c0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80071c2:	e00f      	b.n	80071e4 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	08db      	lsrs	r3, r3, #3
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d009      	beq.n	80071e4 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	08db      	lsrs	r3, r3, #3
 80071d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80071dc:	68b9      	ldr	r1, [r7, #8]
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 f80a 	bl	80071f8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3720      	adds	r7, #32
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop

080071f8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007208:	b2db      	uxtb	r3, r3
 800720a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800720e:	2b28      	cmp	r3, #40	@ 0x28
 8007210:	d16a      	bne.n	80072e8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	0c1b      	lsrs	r3, r3, #16
 800721a:	b2db      	uxtb	r3, r3
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	0c1b      	lsrs	r3, r3, #16
 800722a:	b29b      	uxth	r3, r3
 800722c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007230:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	b29b      	uxth	r3, r3
 800723a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800723e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	b29b      	uxth	r3, r3
 8007248:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800724c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	2b02      	cmp	r3, #2
 8007254:	d138      	bne.n	80072c8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007256:	897b      	ldrh	r3, [r7, #10]
 8007258:	09db      	lsrs	r3, r3, #7
 800725a:	b29a      	uxth	r2, r3
 800725c:	89bb      	ldrh	r3, [r7, #12]
 800725e:	4053      	eors	r3, r2
 8007260:	b29b      	uxth	r3, r3
 8007262:	f003 0306 	and.w	r3, r3, #6
 8007266:	2b00      	cmp	r3, #0
 8007268:	d11c      	bne.n	80072a4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800726a:	897b      	ldrh	r3, [r7, #10]
 800726c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800727c:	2b02      	cmp	r3, #2
 800727e:	d13b      	bne.n	80072f8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2208      	movs	r2, #8
 800728c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007296:	89ba      	ldrh	r2, [r7, #12]
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7ff f92c 	bl	80064fa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80072a2:	e029      	b.n	80072f8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80072a4:	893b      	ldrh	r3, [r7, #8]
 80072a6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80072a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f001 f80f 	bl	80082d0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80072ba:	89ba      	ldrh	r2, [r7, #12]
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff f91a 	bl	80064fa <HAL_I2C_AddrCallback>
}
 80072c6:	e017      	b.n	80072f8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80072c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 ffff 	bl	80082d0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80072da:	89ba      	ldrh	r2, [r7, #12]
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7ff f90a 	bl	80064fa <HAL_I2C_AddrCallback>
}
 80072e6:	e007      	b.n	80072f8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2208      	movs	r2, #8
 80072ee:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80072f8:	bf00      	nop
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b21      	cmp	r3, #33	@ 0x21
 800731a:	d115      	bne.n	8007348 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2220      	movs	r2, #32
 8007320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2211      	movs	r2, #17
 8007328:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007330:	2101      	movs	r1, #1
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 ffcc 	bl	80082d0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7ff f8bc 	bl	80064be <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007346:	e014      	b.n	8007372 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2220      	movs	r2, #32
 800734c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2212      	movs	r2, #18
 8007354:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800735c:	2102      	movs	r1, #2
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 ffb6 	bl	80082d0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7fa fcdd 	bl	8001d2c <HAL_I2C_MasterRxCpltCallback>
}
 8007372:	bf00      	nop
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	0b9b      	lsrs	r3, r3, #14
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b00      	cmp	r3, #0
 800739c:	d008      	beq.n	80073b0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	e00d      	b.n	80073cc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	0bdb      	lsrs	r3, r3, #15
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d007      	beq.n	80073cc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80073ca:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b29      	cmp	r3, #41	@ 0x29
 80073d6:	d112      	bne.n	80073fe <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2228      	movs	r2, #40	@ 0x28
 80073dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2221      	movs	r2, #33	@ 0x21
 80073e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80073e6:	2101      	movs	r1, #1
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 ff71 	bl	80082d0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7ff f86b 	bl	80064d2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80073fc:	e017      	b.n	800742e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b2a      	cmp	r3, #42	@ 0x2a
 8007408:	d111      	bne.n	800742e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2228      	movs	r2, #40	@ 0x28
 800740e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2222      	movs	r2, #34	@ 0x22
 8007416:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007418:	2102      	movs	r1, #2
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 ff58 	bl	80082d0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7ff f85c 	bl	80064e6 <HAL_I2C_SlaveRxCpltCallback>
}
 800742e:	bf00      	nop
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
	...

08007438 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2220      	movs	r2, #32
 800744c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b21      	cmp	r3, #33	@ 0x21
 8007458:	d107      	bne.n	800746a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800745a:	2101      	movs	r1, #1
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 ff37 	bl	80082d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2211      	movs	r2, #17
 8007466:	631a      	str	r2, [r3, #48]	@ 0x30
 8007468:	e00c      	b.n	8007484 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b22      	cmp	r3, #34	@ 0x22
 8007474:	d106      	bne.n	8007484 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007476:	2102      	movs	r1, #2
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 ff29 	bl	80082d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2212      	movs	r2, #18
 8007482:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6859      	ldr	r1, [r3, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	4b4d      	ldr	r3, [pc, #308]	@ (80075c4 <I2C_ITMasterCplt+0x18c>)
 8007490:	400b      	ands	r3, r1
 8007492:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a4a      	ldr	r2, [pc, #296]	@ (80075c8 <I2C_ITMasterCplt+0x190>)
 800749e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	091b      	lsrs	r3, r3, #4
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d009      	beq.n	80074c0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2210      	movs	r2, #16
 80074b2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074b8:	f043 0204 	orr.w	r2, r3, #4
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b60      	cmp	r3, #96	@ 0x60
 80074ca:	d10b      	bne.n	80074e4 <I2C_ITMasterCplt+0xac>
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	089b      	lsrs	r3, r3, #2
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d005      	beq.n	80074e4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80074e2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fc38 	bl	8007d5a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ee:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b60      	cmp	r3, #96	@ 0x60
 80074fa:	d002      	beq.n	8007502 <I2C_ITMasterCplt+0xca>
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d006      	beq.n	8007510 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fb0f 	bl	8007b2c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800750e:	e054      	b.n	80075ba <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b21      	cmp	r3, #33	@ 0x21
 800751a:	d124      	bne.n	8007566 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2220      	movs	r2, #32
 8007520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b40      	cmp	r3, #64	@ 0x40
 8007534:	d10b      	bne.n	800754e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7fe ffef 	bl	800652a <HAL_I2C_MemTxCpltCallback>
}
 800754c:	e035      	b.n	80075ba <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7fe ffad 	bl	80064be <HAL_I2C_MasterTxCpltCallback>
}
 8007564:	e029      	b.n	80075ba <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b22      	cmp	r3, #34	@ 0x22
 8007570:	d123      	bne.n	80075ba <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b40      	cmp	r3, #64	@ 0x40
 800758a:	d10b      	bne.n	80075a4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7fe ffce 	bl	800653e <HAL_I2C_MemRxCpltCallback>
}
 80075a2:	e00a      	b.n	80075ba <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f7fa fbb9 	bl	8001d2c <HAL_I2C_MasterRxCpltCallback>
}
 80075ba:	bf00      	nop
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	fe00e800 	.word	0xfe00e800
 80075c8:	ffff0000 	.word	0xffff0000

080075cc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075ee:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2220      	movs	r2, #32
 80075f6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80075f8:	7afb      	ldrb	r3, [r7, #11]
 80075fa:	2b21      	cmp	r3, #33	@ 0x21
 80075fc:	d002      	beq.n	8007604 <I2C_ITSlaveCplt+0x38>
 80075fe:	7afb      	ldrb	r3, [r7, #11]
 8007600:	2b29      	cmp	r3, #41	@ 0x29
 8007602:	d108      	bne.n	8007616 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007604:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fe61 	bl	80082d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2221      	movs	r2, #33	@ 0x21
 8007612:	631a      	str	r2, [r3, #48]	@ 0x30
 8007614:	e019      	b.n	800764a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007616:	7afb      	ldrb	r3, [r7, #11]
 8007618:	2b22      	cmp	r3, #34	@ 0x22
 800761a:	d002      	beq.n	8007622 <I2C_ITSlaveCplt+0x56>
 800761c:	7afb      	ldrb	r3, [r7, #11]
 800761e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007620:	d108      	bne.n	8007634 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007622:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fe52 	bl	80082d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2222      	movs	r2, #34	@ 0x22
 8007630:	631a      	str	r2, [r3, #48]	@ 0x30
 8007632:	e00a      	b.n	800764a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007634:	7afb      	ldrb	r3, [r7, #11]
 8007636:	2b28      	cmp	r3, #40	@ 0x28
 8007638:	d107      	bne.n	800764a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800763a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fe46 	bl	80082d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007658:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6859      	ldr	r1, [r3, #4]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	4b80      	ldr	r3, [pc, #512]	@ (8007868 <I2C_ITSlaveCplt+0x29c>)
 8007666:	400b      	ands	r3, r1
 8007668:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fb75 	bl	8007d5a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	0b9b      	lsrs	r3, r3, #14
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	d07a      	beq.n	8007772 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800768a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 8112 	beq.w	80078ba <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a73      	ldr	r2, [pc, #460]	@ (800786c <I2C_ITSlaveCplt+0x2a0>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d059      	beq.n	8007756 <I2C_ITSlaveCplt+0x18a>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a71      	ldr	r2, [pc, #452]	@ (8007870 <I2C_ITSlaveCplt+0x2a4>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d053      	beq.n	8007756 <I2C_ITSlaveCplt+0x18a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a6f      	ldr	r2, [pc, #444]	@ (8007874 <I2C_ITSlaveCplt+0x2a8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d04d      	beq.n	8007756 <I2C_ITSlaveCplt+0x18a>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a6d      	ldr	r2, [pc, #436]	@ (8007878 <I2C_ITSlaveCplt+0x2ac>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d047      	beq.n	8007756 <I2C_ITSlaveCplt+0x18a>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a6b      	ldr	r2, [pc, #428]	@ (800787c <I2C_ITSlaveCplt+0x2b0>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d041      	beq.n	8007756 <I2C_ITSlaveCplt+0x18a>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a69      	ldr	r2, [pc, #420]	@ (8007880 <I2C_ITSlaveCplt+0x2b4>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d03b      	beq.n	8007756 <I2C_ITSlaveCplt+0x18a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a67      	ldr	r2, [pc, #412]	@ (8007884 <I2C_ITSlaveCplt+0x2b8>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d035      	beq.n	8007756 <I2C_ITSlaveCplt+0x18a>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a65      	ldr	r2, [pc, #404]	@ (8007888 <I2C_ITSlaveCplt+0x2bc>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d02f      	beq.n	8007756 <I2C_ITSlaveCplt+0x18a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a63      	ldr	r2, [pc, #396]	@ (800788c <I2C_ITSlaveCplt+0x2c0>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d029      	beq.n	8007756 <I2C_ITSlaveCplt+0x18a>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a61      	ldr	r2, [pc, #388]	@ (8007890 <I2C_ITSlaveCplt+0x2c4>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d023      	beq.n	8007756 <I2C_ITSlaveCplt+0x18a>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a5f      	ldr	r2, [pc, #380]	@ (8007894 <I2C_ITSlaveCplt+0x2c8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d01d      	beq.n	8007756 <I2C_ITSlaveCplt+0x18a>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a5d      	ldr	r2, [pc, #372]	@ (8007898 <I2C_ITSlaveCplt+0x2cc>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d017      	beq.n	8007756 <I2C_ITSlaveCplt+0x18a>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a5b      	ldr	r2, [pc, #364]	@ (800789c <I2C_ITSlaveCplt+0x2d0>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d011      	beq.n	8007756 <I2C_ITSlaveCplt+0x18a>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a59      	ldr	r2, [pc, #356]	@ (80078a0 <I2C_ITSlaveCplt+0x2d4>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d00b      	beq.n	8007756 <I2C_ITSlaveCplt+0x18a>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a57      	ldr	r2, [pc, #348]	@ (80078a4 <I2C_ITSlaveCplt+0x2d8>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d005      	beq.n	8007756 <I2C_ITSlaveCplt+0x18a>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a55      	ldr	r2, [pc, #340]	@ (80078a8 <I2C_ITSlaveCplt+0x2dc>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d105      	bne.n	8007762 <I2C_ITSlaveCplt+0x196>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	b29b      	uxth	r3, r3
 8007760:	e004      	b.n	800776c <I2C_ITSlaveCplt+0x1a0>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	b29b      	uxth	r3, r3
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8007770:	e0a3      	b.n	80078ba <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	0bdb      	lsrs	r3, r3, #15
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 809d 	beq.w	80078ba <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800778e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 8090 	beq.w	80078ba <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a32      	ldr	r2, [pc, #200]	@ (800786c <I2C_ITSlaveCplt+0x2a0>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d059      	beq.n	800785a <I2C_ITSlaveCplt+0x28e>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a30      	ldr	r2, [pc, #192]	@ (8007870 <I2C_ITSlaveCplt+0x2a4>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d053      	beq.n	800785a <I2C_ITSlaveCplt+0x28e>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a2e      	ldr	r2, [pc, #184]	@ (8007874 <I2C_ITSlaveCplt+0x2a8>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d04d      	beq.n	800785a <I2C_ITSlaveCplt+0x28e>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a2c      	ldr	r2, [pc, #176]	@ (8007878 <I2C_ITSlaveCplt+0x2ac>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d047      	beq.n	800785a <I2C_ITSlaveCplt+0x28e>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a2a      	ldr	r2, [pc, #168]	@ (800787c <I2C_ITSlaveCplt+0x2b0>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d041      	beq.n	800785a <I2C_ITSlaveCplt+0x28e>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a28      	ldr	r2, [pc, #160]	@ (8007880 <I2C_ITSlaveCplt+0x2b4>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d03b      	beq.n	800785a <I2C_ITSlaveCplt+0x28e>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a26      	ldr	r2, [pc, #152]	@ (8007884 <I2C_ITSlaveCplt+0x2b8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d035      	beq.n	800785a <I2C_ITSlaveCplt+0x28e>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a24      	ldr	r2, [pc, #144]	@ (8007888 <I2C_ITSlaveCplt+0x2bc>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d02f      	beq.n	800785a <I2C_ITSlaveCplt+0x28e>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a22      	ldr	r2, [pc, #136]	@ (800788c <I2C_ITSlaveCplt+0x2c0>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d029      	beq.n	800785a <I2C_ITSlaveCplt+0x28e>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a20      	ldr	r2, [pc, #128]	@ (8007890 <I2C_ITSlaveCplt+0x2c4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d023      	beq.n	800785a <I2C_ITSlaveCplt+0x28e>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a1e      	ldr	r2, [pc, #120]	@ (8007894 <I2C_ITSlaveCplt+0x2c8>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d01d      	beq.n	800785a <I2C_ITSlaveCplt+0x28e>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a1c      	ldr	r2, [pc, #112]	@ (8007898 <I2C_ITSlaveCplt+0x2cc>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d017      	beq.n	800785a <I2C_ITSlaveCplt+0x28e>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a1a      	ldr	r2, [pc, #104]	@ (800789c <I2C_ITSlaveCplt+0x2d0>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d011      	beq.n	800785a <I2C_ITSlaveCplt+0x28e>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a18      	ldr	r2, [pc, #96]	@ (80078a0 <I2C_ITSlaveCplt+0x2d4>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d00b      	beq.n	800785a <I2C_ITSlaveCplt+0x28e>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a16      	ldr	r2, [pc, #88]	@ (80078a4 <I2C_ITSlaveCplt+0x2d8>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d005      	beq.n	800785a <I2C_ITSlaveCplt+0x28e>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a14      	ldr	r2, [pc, #80]	@ (80078a8 <I2C_ITSlaveCplt+0x2dc>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d128      	bne.n	80078ac <I2C_ITSlaveCplt+0x2e0>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	b29b      	uxth	r3, r3
 8007864:	e027      	b.n	80078b6 <I2C_ITSlaveCplt+0x2ea>
 8007866:	bf00      	nop
 8007868:	fe00e800 	.word	0xfe00e800
 800786c:	40020010 	.word	0x40020010
 8007870:	40020028 	.word	0x40020028
 8007874:	40020040 	.word	0x40020040
 8007878:	40020058 	.word	0x40020058
 800787c:	40020070 	.word	0x40020070
 8007880:	40020088 	.word	0x40020088
 8007884:	400200a0 	.word	0x400200a0
 8007888:	400200b8 	.word	0x400200b8
 800788c:	40020410 	.word	0x40020410
 8007890:	40020428 	.word	0x40020428
 8007894:	40020440 	.word	0x40020440
 8007898:	40020458 	.word	0x40020458
 800789c:	40020470 	.word	0x40020470
 80078a0:	40020488 	.word	0x40020488
 80078a4:	400204a0 	.word	0x400204a0
 80078a8:	400204b8 	.word	0x400204b8
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	089b      	lsrs	r3, r3, #2
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d020      	beq.n	8007908 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f023 0304 	bic.w	r3, r3, #4
 80078cc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d8:	b2d2      	uxtb	r2, r2
 80078da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00c      	beq.n	8007908 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078f2:	3b01      	subs	r3, #1
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078fe:	b29b      	uxth	r3, r3
 8007900:	3b01      	subs	r3, #1
 8007902:	b29a      	uxth	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d005      	beq.n	800791e <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007916:	f043 0204 	orr.w	r2, r3, #4
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	091b      	lsrs	r3, r3, #4
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d04a      	beq.n	80079c0 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	091b      	lsrs	r3, r3, #4
 800792e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007932:	2b00      	cmp	r3, #0
 8007934:	d044      	beq.n	80079c0 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800793a:	b29b      	uxth	r3, r3
 800793c:	2b00      	cmp	r3, #0
 800793e:	d128      	bne.n	8007992 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b28      	cmp	r3, #40	@ 0x28
 800794a:	d108      	bne.n	800795e <I2C_ITSlaveCplt+0x392>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007952:	d104      	bne.n	800795e <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007954:	6979      	ldr	r1, [r7, #20]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f892 	bl	8007a80 <I2C_ITListenCplt>
 800795c:	e030      	b.n	80079c0 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b29      	cmp	r3, #41	@ 0x29
 8007968:	d10e      	bne.n	8007988 <I2C_ITSlaveCplt+0x3bc>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007970:	d00a      	beq.n	8007988 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2210      	movs	r2, #16
 8007978:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f9ed 	bl	8007d5a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7ff fcfa 	bl	800737a <I2C_ITSlaveSeqCplt>
 8007986:	e01b      	b.n	80079c0 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2210      	movs	r2, #16
 800798e:	61da      	str	r2, [r3, #28]
 8007990:	e016      	b.n	80079c0 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2210      	movs	r2, #16
 8007998:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800799e:	f043 0204 	orr.w	r2, r3, #4
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <I2C_ITSlaveCplt+0x3e8>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079b2:	d105      	bne.n	80079c0 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f8b6 	bl	8007b2c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d010      	beq.n	80079f8 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079da:	4619      	mov	r1, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f8a5 	bl	8007b2c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b28      	cmp	r3, #40	@ 0x28
 80079ec:	d141      	bne.n	8007a72 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80079ee:	6979      	ldr	r1, [r7, #20]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f845 	bl	8007a80 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80079f6:	e03c      	b.n	8007a72 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007a00:	d014      	beq.n	8007a2c <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff fcb9 	bl	800737a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8007a7c <I2C_ITSlaveCplt+0x4b0>)
 8007a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2220      	movs	r2, #32
 8007a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7fe fd76 	bl	8006516 <HAL_I2C_ListenCpltCallback>
}
 8007a2a:	e022      	b.n	8007a72 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b22      	cmp	r3, #34	@ 0x22
 8007a36:	d10e      	bne.n	8007a56 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7fe fd49 	bl	80064e6 <HAL_I2C_SlaveRxCpltCallback>
}
 8007a54:	e00d      	b.n	8007a72 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7fe fd30 	bl	80064d2 <HAL_I2C_SlaveTxCpltCallback>
}
 8007a72:	bf00      	nop
 8007a74:	3718      	adds	r7, #24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	ffff0000 	.word	0xffff0000

08007a80 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a26      	ldr	r2, [pc, #152]	@ (8007b28 <I2C_ITListenCplt+0xa8>)
 8007a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	089b      	lsrs	r3, r3, #2
 8007ab0:	f003 0301 	and.w	r3, r3, #1
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d022      	beq.n	8007afe <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aca:	1c5a      	adds	r2, r3, #1
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d012      	beq.n	8007afe <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007adc:	3b01      	subs	r3, #1
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	3b01      	subs	r3, #1
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af6:	f043 0204 	orr.w	r2, r3, #4
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007afe:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fbe4 	bl	80082d0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2210      	movs	r2, #16
 8007b0e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7fe fcfc 	bl	8006516 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007b1e:	bf00      	nop
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	ffff0000 	.word	0xffff0000

08007b2c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b3c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a6d      	ldr	r2, [pc, #436]	@ (8007d00 <I2C_ITError+0x1d4>)
 8007b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	2b28      	cmp	r3, #40	@ 0x28
 8007b62:	d005      	beq.n	8007b70 <I2C_ITError+0x44>
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	2b29      	cmp	r3, #41	@ 0x29
 8007b68:	d002      	beq.n	8007b70 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
 8007b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b6e:	d10b      	bne.n	8007b88 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007b70:	2103      	movs	r1, #3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fbac 	bl	80082d0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2228      	movs	r2, #40	@ 0x28
 8007b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a60      	ldr	r2, [pc, #384]	@ (8007d04 <I2C_ITError+0x1d8>)
 8007b84:	635a      	str	r2, [r3, #52]	@ 0x34
 8007b86:	e030      	b.n	8007bea <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007b88:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fb9f 	bl	80082d0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f8e1 	bl	8007d5a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b60      	cmp	r3, #96	@ 0x60
 8007ba2:	d01f      	beq.n	8007be4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	f003 0320 	and.w	r3, r3, #32
 8007bb6:	2b20      	cmp	r3, #32
 8007bb8:	d114      	bne.n	8007be4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	f003 0310 	and.w	r3, r3, #16
 8007bc4:	2b10      	cmp	r3, #16
 8007bc6:	d109      	bne.n	8007bdc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2210      	movs	r2, #16
 8007bce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bd4:	f043 0204 	orr.w	r2, r3, #4
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2220      	movs	r2, #32
 8007be2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d039      	beq.n	8007c6c <I2C_ITError+0x140>
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2b11      	cmp	r3, #17
 8007bfc:	d002      	beq.n	8007c04 <I2C_ITError+0xd8>
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b21      	cmp	r3, #33	@ 0x21
 8007c02:	d133      	bne.n	8007c6c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c12:	d107      	bne.n	8007c24 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007c22:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fd fe95 	bl	8005958 <HAL_DMA_GetState>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d017      	beq.n	8007c64 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c38:	4a33      	ldr	r2, [pc, #204]	@ (8007d08 <I2C_ITError+0x1dc>)
 8007c3a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fd fc3f 	bl	80054cc <HAL_DMA_Abort_IT>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d04d      	beq.n	8007cf0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007c5e:	4610      	mov	r0, r2
 8007c60:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007c62:	e045      	b.n	8007cf0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f851 	bl	8007d0c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007c6a:	e041      	b.n	8007cf0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d039      	beq.n	8007ce8 <I2C_ITError+0x1bc>
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b12      	cmp	r3, #18
 8007c78:	d002      	beq.n	8007c80 <I2C_ITError+0x154>
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b22      	cmp	r3, #34	@ 0x22
 8007c7e:	d133      	bne.n	8007ce8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c8e:	d107      	bne.n	8007ca0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007c9e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fd fe57 	bl	8005958 <HAL_DMA_GetState>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d017      	beq.n	8007ce0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cb4:	4a14      	ldr	r2, [pc, #80]	@ (8007d08 <I2C_ITError+0x1dc>)
 8007cb6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7fd fc01 	bl	80054cc <HAL_DMA_Abort_IT>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d011      	beq.n	8007cf4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007cda:	4610      	mov	r0, r2
 8007cdc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cde:	e009      	b.n	8007cf4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f813 	bl	8007d0c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ce6:	e005      	b.n	8007cf4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f80f 	bl	8007d0c <I2C_TreatErrorCallback>
  }
}
 8007cee:	e002      	b.n	8007cf6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007cf0:	bf00      	nop
 8007cf2:	e000      	b.n	8007cf6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cf4:	bf00      	nop
}
 8007cf6:	bf00      	nop
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	ffff0000 	.word	0xffff0000
 8007d04:	080067e3 	.word	0x080067e3
 8007d08:	08007da3 	.word	0x08007da3

08007d0c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b60      	cmp	r3, #96	@ 0x60
 8007d1e:	d10e      	bne.n	8007d3e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2220      	movs	r2, #32
 8007d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7fe fc15 	bl	8006566 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007d3c:	e009      	b.n	8007d52 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7fe fc00 	bl	8006552 <HAL_I2C_ErrorCallback>
}
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d103      	bne.n	8007d78 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2200      	movs	r2, #0
 8007d76:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d007      	beq.n	8007d96 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	699a      	ldr	r2, [r3, #24]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f042 0201 	orr.w	r2, r2, #1
 8007d94:	619a      	str	r2, [r3, #24]
  }
}
 8007d96:	bf00      	nop
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dcc:	2200      	movs	r2, #0
 8007dce:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f7ff ff9b 	bl	8007d0c <I2C_TreatErrorCallback>
}
 8007dd6:	bf00      	nop
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b084      	sub	sp, #16
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	60f8      	str	r0, [r7, #12]
 8007de6:	60b9      	str	r1, [r7, #8]
 8007de8:	603b      	str	r3, [r7, #0]
 8007dea:	4613      	mov	r3, r2
 8007dec:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dee:	e03b      	b.n	8007e68 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f000 f8d5 	bl	8007fa4 <I2C_IsErrorOccurred>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e041      	b.n	8007e88 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0a:	d02d      	beq.n	8007e68 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e0c:	f7fa fdd4 	bl	80029b8 <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d302      	bcc.n	8007e22 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d122      	bne.n	8007e68 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	699a      	ldr	r2, [r3, #24]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	bf0c      	ite	eq
 8007e32:	2301      	moveq	r3, #1
 8007e34:	2300      	movne	r3, #0
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	461a      	mov	r2, r3
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d113      	bne.n	8007e68 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e44:	f043 0220 	orr.w	r2, r3, #32
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e00f      	b.n	8007e88 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699a      	ldr	r2, [r3, #24]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	4013      	ands	r3, r2
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	bf0c      	ite	eq
 8007e78:	2301      	moveq	r3, #1
 8007e7a:	2300      	movne	r3, #0
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	461a      	mov	r2, r3
 8007e80:	79fb      	ldrb	r3, [r7, #7]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d0b4      	beq.n	8007df0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e9c:	e033      	b.n	8007f06 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	68b9      	ldr	r1, [r7, #8]
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 f87e 	bl	8007fa4 <I2C_IsErrorOccurred>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e031      	b.n	8007f16 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb8:	d025      	beq.n	8007f06 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eba:	f7fa fd7d 	bl	80029b8 <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d302      	bcc.n	8007ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d11a      	bne.n	8007f06 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d013      	beq.n	8007f06 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ee2:	f043 0220 	orr.w	r2, r3, #32
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2220      	movs	r2, #32
 8007eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e007      	b.n	8007f16 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	f003 0302 	and.w	r3, r3, #2
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d1c4      	bne.n	8007e9e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f2a:	e02f      	b.n	8007f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	68b9      	ldr	r1, [r7, #8]
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 f837 	bl	8007fa4 <I2C_IsErrorOccurred>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e02d      	b.n	8007f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f40:	f7fa fd3a 	bl	80029b8 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d302      	bcc.n	8007f56 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d11a      	bne.n	8007f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	f003 0320 	and.w	r3, r3, #32
 8007f60:	2b20      	cmp	r3, #32
 8007f62:	d013      	beq.n	8007f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f68:	f043 0220 	orr.w	r2, r3, #32
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2220      	movs	r2, #32
 8007f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e007      	b.n	8007f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	f003 0320 	and.w	r3, r3, #32
 8007f96:	2b20      	cmp	r3, #32
 8007f98:	d1c8      	bne.n	8007f2c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b08a      	sub	sp, #40	@ 0x28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	f003 0310 	and.w	r3, r3, #16
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d068      	beq.n	80080a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2210      	movs	r2, #16
 8007fd6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007fd8:	e049      	b.n	800806e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe0:	d045      	beq.n	800806e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007fe2:	f7fa fce9 	bl	80029b8 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d302      	bcc.n	8007ff8 <I2C_IsErrorOccurred+0x54>
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d13a      	bne.n	800806e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008002:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800800a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008016:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800801a:	d121      	bne.n	8008060 <I2C_IsErrorOccurred+0xbc>
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008022:	d01d      	beq.n	8008060 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008024:	7cfb      	ldrb	r3, [r7, #19]
 8008026:	2b20      	cmp	r3, #32
 8008028:	d01a      	beq.n	8008060 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685a      	ldr	r2, [r3, #4]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008038:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800803a:	f7fa fcbd 	bl	80029b8 <HAL_GetTick>
 800803e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008040:	e00e      	b.n	8008060 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008042:	f7fa fcb9 	bl	80029b8 <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	2b19      	cmp	r3, #25
 800804e:	d907      	bls.n	8008060 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	f043 0320 	orr.w	r3, r3, #32
 8008056:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800805e:	e006      	b.n	800806e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	f003 0320 	and.w	r3, r3, #32
 800806a:	2b20      	cmp	r3, #32
 800806c:	d1e9      	bne.n	8008042 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	f003 0320 	and.w	r3, r3, #32
 8008078:	2b20      	cmp	r3, #32
 800807a:	d003      	beq.n	8008084 <I2C_IsErrorOccurred+0xe0>
 800807c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008080:	2b00      	cmp	r3, #0
 8008082:	d0aa      	beq.n	8007fda <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008088:	2b00      	cmp	r3, #0
 800808a:	d103      	bne.n	8008094 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2220      	movs	r2, #32
 8008092:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	f043 0304 	orr.w	r3, r3, #4
 800809a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00b      	beq.n	80080cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80080b4:	6a3b      	ldr	r3, [r7, #32]
 80080b6:	f043 0301 	orr.w	r3, r3, #1
 80080ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00b      	beq.n	80080ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	f043 0308 	orr.w	r3, r3, #8
 80080dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80080e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00b      	beq.n	8008110 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80080f8:	6a3b      	ldr	r3, [r7, #32]
 80080fa:	f043 0302 	orr.w	r3, r3, #2
 80080fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008108:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008114:	2b00      	cmp	r3, #0
 8008116:	d01c      	beq.n	8008152 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f7ff fe1e 	bl	8007d5a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6859      	ldr	r1, [r3, #4]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	4b0d      	ldr	r3, [pc, #52]	@ (8008160 <I2C_IsErrorOccurred+0x1bc>)
 800812a:	400b      	ands	r3, r1
 800812c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	431a      	orrs	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2220      	movs	r2, #32
 800813e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008152:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008156:	4618      	mov	r0, r3
 8008158:	3728      	adds	r7, #40	@ 0x28
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	fe00e800 	.word	0xfe00e800

08008164 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	607b      	str	r3, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	817b      	strh	r3, [r7, #10]
 8008172:	4613      	mov	r3, r2
 8008174:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008176:	897b      	ldrh	r3, [r7, #10]
 8008178:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800817c:	7a7b      	ldrb	r3, [r7, #9]
 800817e:	041b      	lsls	r3, r3, #16
 8008180:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008184:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	4313      	orrs	r3, r2
 800818e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008192:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685a      	ldr	r2, [r3, #4]
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	0d5b      	lsrs	r3, r3, #21
 800819e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80081a2:	4b08      	ldr	r3, [pc, #32]	@ (80081c4 <I2C_TransferConfig+0x60>)
 80081a4:	430b      	orrs	r3, r1
 80081a6:	43db      	mvns	r3, r3
 80081a8:	ea02 0103 	and.w	r1, r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80081b6:	bf00      	nop
 80081b8:	371c      	adds	r7, #28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	03ff63ff 	.word	0x03ff63ff

080081c8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80081d4:	2300      	movs	r3, #0
 80081d6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081dc:	4a39      	ldr	r2, [pc, #228]	@ (80082c4 <I2C_Enable_IRQ+0xfc>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d032      	beq.n	8008248 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80081e6:	4a38      	ldr	r2, [pc, #224]	@ (80082c8 <I2C_Enable_IRQ+0x100>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d02d      	beq.n	8008248 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80081f0:	4a36      	ldr	r2, [pc, #216]	@ (80082cc <I2C_Enable_IRQ+0x104>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d028      	beq.n	8008248 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80081f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	da03      	bge.n	8008206 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008204:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008206:	887b      	ldrh	r3, [r7, #2]
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8008216:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008218:	887b      	ldrh	r3, [r7, #2]
 800821a:	f003 0302 	and.w	r3, r3, #2
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8008228:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800822a:	887b      	ldrh	r3, [r7, #2]
 800822c:	2b10      	cmp	r3, #16
 800822e:	d103      	bne.n	8008238 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008236:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008238:	887b      	ldrh	r3, [r7, #2]
 800823a:	2b20      	cmp	r3, #32
 800823c:	d133      	bne.n	80082a6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f043 0320 	orr.w	r3, r3, #32
 8008244:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008246:	e02e      	b.n	80082a6 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008248:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800824c:	2b00      	cmp	r3, #0
 800824e:	da03      	bge.n	8008258 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008256:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008258:	887b      	ldrh	r3, [r7, #2]
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8008268:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800826a:	887b      	ldrh	r3, [r7, #2]
 800826c:	f003 0302 	and.w	r3, r3, #2
 8008270:	2b00      	cmp	r3, #0
 8008272:	d003      	beq.n	800827c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800827a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800827c:	887b      	ldrh	r3, [r7, #2]
 800827e:	2b10      	cmp	r3, #16
 8008280:	d103      	bne.n	800828a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008288:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800828a:	887b      	ldrh	r3, [r7, #2]
 800828c:	2b20      	cmp	r3, #32
 800828e:	d103      	bne.n	8008298 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008296:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008298:	887b      	ldrh	r3, [r7, #2]
 800829a:	2b40      	cmp	r3, #64	@ 0x40
 800829c:	d103      	bne.n	80082a6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082a4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6819      	ldr	r1, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	430a      	orrs	r2, r1
 80082b4:	601a      	str	r2, [r3, #0]
}
 80082b6:	bf00      	nop
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	080069eb 	.word	0x080069eb
 80082c8:	08006e31 	.word	0x08006e31
 80082cc:	08006bd1 	.word	0x08006bd1

080082d0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80082dc:	2300      	movs	r3, #0
 80082de:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80082e0:	887b      	ldrh	r3, [r7, #2]
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00f      	beq.n	800830a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80082f0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80082fe:	2b28      	cmp	r3, #40	@ 0x28
 8008300:	d003      	beq.n	800830a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008308:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800830a:	887b      	ldrh	r3, [r7, #2]
 800830c:	f003 0302 	and.w	r3, r3, #2
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00f      	beq.n	8008334 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800831a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008322:	b2db      	uxtb	r3, r3
 8008324:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008328:	2b28      	cmp	r3, #40	@ 0x28
 800832a:	d003      	beq.n	8008334 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008332:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008334:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008338:	2b00      	cmp	r3, #0
 800833a:	da03      	bge.n	8008344 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008342:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008344:	887b      	ldrh	r3, [r7, #2]
 8008346:	2b10      	cmp	r3, #16
 8008348:	d103      	bne.n	8008352 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008350:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008352:	887b      	ldrh	r3, [r7, #2]
 8008354:	2b20      	cmp	r3, #32
 8008356:	d103      	bne.n	8008360 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f043 0320 	orr.w	r3, r3, #32
 800835e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008360:	887b      	ldrh	r3, [r7, #2]
 8008362:	2b40      	cmp	r3, #64	@ 0x40
 8008364:	d103      	bne.n	800836e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800836c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6819      	ldr	r1, [r3, #0]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	43da      	mvns	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	400a      	ands	r2, r1
 800837e:	601a      	str	r2, [r3, #0]
}
 8008380:	bf00      	nop
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b20      	cmp	r3, #32
 80083a0:	d138      	bne.n	8008414 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d101      	bne.n	80083b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80083ac:	2302      	movs	r3, #2
 80083ae:	e032      	b.n	8008416 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2224      	movs	r2, #36	@ 0x24
 80083bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 0201 	bic.w	r2, r2, #1
 80083ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80083de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6819      	ldr	r1, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f042 0201 	orr.w	r2, r2, #1
 80083fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2220      	movs	r2, #32
 8008404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	e000      	b.n	8008416 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008414:	2302      	movs	r3, #2
  }
}
 8008416:	4618      	mov	r0, r3
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008422:	b480      	push	{r7}
 8008424:	b085      	sub	sp, #20
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008432:	b2db      	uxtb	r3, r3
 8008434:	2b20      	cmp	r3, #32
 8008436:	d139      	bne.n	80084ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800843e:	2b01      	cmp	r3, #1
 8008440:	d101      	bne.n	8008446 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008442:	2302      	movs	r3, #2
 8008444:	e033      	b.n	80084ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2224      	movs	r2, #36	@ 0x24
 8008452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 0201 	bic.w	r2, r2, #1
 8008464:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008474:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	021b      	lsls	r3, r3, #8
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	4313      	orrs	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f042 0201 	orr.w	r2, r2, #1
 8008496:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2220      	movs	r2, #32
 800849c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	e000      	b.n	80084ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80084ac:	2302      	movs	r3, #2
  }
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
	...

080084bc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80084c4:	4b19      	ldr	r3, [pc, #100]	@ (800852c <HAL_PWREx_ConfigSupply+0x70>)
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f003 0304 	and.w	r3, r3, #4
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d00a      	beq.n	80084e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80084d0:	4b16      	ldr	r3, [pc, #88]	@ (800852c <HAL_PWREx_ConfigSupply+0x70>)
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f003 0307 	and.w	r3, r3, #7
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d001      	beq.n	80084e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e01f      	b.n	8008522 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	e01d      	b.n	8008522 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80084e6:	4b11      	ldr	r3, [pc, #68]	@ (800852c <HAL_PWREx_ConfigSupply+0x70>)
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f023 0207 	bic.w	r2, r3, #7
 80084ee:	490f      	ldr	r1, [pc, #60]	@ (800852c <HAL_PWREx_ConfigSupply+0x70>)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80084f6:	f7fa fa5f 	bl	80029b8 <HAL_GetTick>
 80084fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80084fc:	e009      	b.n	8008512 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80084fe:	f7fa fa5b 	bl	80029b8 <HAL_GetTick>
 8008502:	4602      	mov	r2, r0
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800850c:	d901      	bls.n	8008512 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e007      	b.n	8008522 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008512:	4b06      	ldr	r3, [pc, #24]	@ (800852c <HAL_PWREx_ConfigSupply+0x70>)
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800851a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800851e:	d1ee      	bne.n	80084fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	58024800 	.word	0x58024800

08008530 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b08c      	sub	sp, #48	@ 0x30
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e3c8      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 8087 	beq.w	800865e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008550:	4b88      	ldr	r3, [pc, #544]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008558:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800855a:	4b86      	ldr	r3, [pc, #536]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 800855c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008562:	2b10      	cmp	r3, #16
 8008564:	d007      	beq.n	8008576 <HAL_RCC_OscConfig+0x46>
 8008566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008568:	2b18      	cmp	r3, #24
 800856a:	d110      	bne.n	800858e <HAL_RCC_OscConfig+0x5e>
 800856c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856e:	f003 0303 	and.w	r3, r3, #3
 8008572:	2b02      	cmp	r3, #2
 8008574:	d10b      	bne.n	800858e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008576:	4b7f      	ldr	r3, [pc, #508]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d06c      	beq.n	800865c <HAL_RCC_OscConfig+0x12c>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d168      	bne.n	800865c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e3a2      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008596:	d106      	bne.n	80085a6 <HAL_RCC_OscConfig+0x76>
 8008598:	4b76      	ldr	r3, [pc, #472]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a75      	ldr	r2, [pc, #468]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 800859e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085a2:	6013      	str	r3, [r2, #0]
 80085a4:	e02e      	b.n	8008604 <HAL_RCC_OscConfig+0xd4>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10c      	bne.n	80085c8 <HAL_RCC_OscConfig+0x98>
 80085ae:	4b71      	ldr	r3, [pc, #452]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a70      	ldr	r2, [pc, #448]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 80085b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085b8:	6013      	str	r3, [r2, #0]
 80085ba:	4b6e      	ldr	r3, [pc, #440]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a6d      	ldr	r2, [pc, #436]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 80085c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80085c4:	6013      	str	r3, [r2, #0]
 80085c6:	e01d      	b.n	8008604 <HAL_RCC_OscConfig+0xd4>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80085d0:	d10c      	bne.n	80085ec <HAL_RCC_OscConfig+0xbc>
 80085d2:	4b68      	ldr	r3, [pc, #416]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a67      	ldr	r2, [pc, #412]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 80085d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085dc:	6013      	str	r3, [r2, #0]
 80085de:	4b65      	ldr	r3, [pc, #404]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a64      	ldr	r2, [pc, #400]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 80085e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	e00b      	b.n	8008604 <HAL_RCC_OscConfig+0xd4>
 80085ec:	4b61      	ldr	r3, [pc, #388]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a60      	ldr	r2, [pc, #384]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 80085f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	4b5e      	ldr	r3, [pc, #376]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a5d      	ldr	r2, [pc, #372]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 80085fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d013      	beq.n	8008634 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800860c:	f7fa f9d4 	bl	80029b8 <HAL_GetTick>
 8008610:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008612:	e008      	b.n	8008626 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008614:	f7fa f9d0 	bl	80029b8 <HAL_GetTick>
 8008618:	4602      	mov	r2, r0
 800861a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	2b64      	cmp	r3, #100	@ 0x64
 8008620:	d901      	bls.n	8008626 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e356      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008626:	4b53      	ldr	r3, [pc, #332]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d0f0      	beq.n	8008614 <HAL_RCC_OscConfig+0xe4>
 8008632:	e014      	b.n	800865e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008634:	f7fa f9c0 	bl	80029b8 <HAL_GetTick>
 8008638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800863a:	e008      	b.n	800864e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800863c:	f7fa f9bc 	bl	80029b8 <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	2b64      	cmp	r3, #100	@ 0x64
 8008648:	d901      	bls.n	800864e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	e342      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800864e:	4b49      	ldr	r3, [pc, #292]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1f0      	bne.n	800863c <HAL_RCC_OscConfig+0x10c>
 800865a:	e000      	b.n	800865e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800865c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 0302 	and.w	r3, r3, #2
 8008666:	2b00      	cmp	r3, #0
 8008668:	f000 808c 	beq.w	8008784 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800866c:	4b41      	ldr	r3, [pc, #260]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008674:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008676:	4b3f      	ldr	r3, [pc, #252]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 8008678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800867a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d007      	beq.n	8008692 <HAL_RCC_OscConfig+0x162>
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	2b18      	cmp	r3, #24
 8008686:	d137      	bne.n	80086f8 <HAL_RCC_OscConfig+0x1c8>
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	f003 0303 	and.w	r3, r3, #3
 800868e:	2b00      	cmp	r3, #0
 8008690:	d132      	bne.n	80086f8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008692:	4b38      	ldr	r3, [pc, #224]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 0304 	and.w	r3, r3, #4
 800869a:	2b00      	cmp	r3, #0
 800869c:	d005      	beq.n	80086aa <HAL_RCC_OscConfig+0x17a>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e314      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80086aa:	4b32      	ldr	r3, [pc, #200]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f023 0219 	bic.w	r2, r3, #25
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	492f      	ldr	r1, [pc, #188]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086bc:	f7fa f97c 	bl	80029b8 <HAL_GetTick>
 80086c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086c2:	e008      	b.n	80086d6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086c4:	f7fa f978 	bl	80029b8 <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d901      	bls.n	80086d6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e2fe      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086d6:	4b27      	ldr	r3, [pc, #156]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 0304 	and.w	r3, r3, #4
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d0f0      	beq.n	80086c4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086e2:	4b24      	ldr	r3, [pc, #144]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	061b      	lsls	r3, r3, #24
 80086f0:	4920      	ldr	r1, [pc, #128]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 80086f2:	4313      	orrs	r3, r2
 80086f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086f6:	e045      	b.n	8008784 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d026      	beq.n	800874e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008700:	4b1c      	ldr	r3, [pc, #112]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f023 0219 	bic.w	r2, r3, #25
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	4919      	ldr	r1, [pc, #100]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 800870e:	4313      	orrs	r3, r2
 8008710:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008712:	f7fa f951 	bl	80029b8 <HAL_GetTick>
 8008716:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008718:	e008      	b.n	800872c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800871a:	f7fa f94d 	bl	80029b8 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	2b02      	cmp	r3, #2
 8008726:	d901      	bls.n	800872c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e2d3      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800872c:	4b11      	ldr	r3, [pc, #68]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0304 	and.w	r3, r3, #4
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0f0      	beq.n	800871a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008738:	4b0e      	ldr	r3, [pc, #56]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	061b      	lsls	r3, r3, #24
 8008746:	490b      	ldr	r1, [pc, #44]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 8008748:	4313      	orrs	r3, r2
 800874a:	604b      	str	r3, [r1, #4]
 800874c:	e01a      	b.n	8008784 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800874e:	4b09      	ldr	r3, [pc, #36]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a08      	ldr	r2, [pc, #32]	@ (8008774 <HAL_RCC_OscConfig+0x244>)
 8008754:	f023 0301 	bic.w	r3, r3, #1
 8008758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800875a:	f7fa f92d 	bl	80029b8 <HAL_GetTick>
 800875e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008760:	e00a      	b.n	8008778 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008762:	f7fa f929 	bl	80029b8 <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	2b02      	cmp	r3, #2
 800876e:	d903      	bls.n	8008778 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e2af      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
 8008774:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008778:	4b96      	ldr	r3, [pc, #600]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0304 	and.w	r3, r3, #4
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1ee      	bne.n	8008762 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0310 	and.w	r3, r3, #16
 800878c:	2b00      	cmp	r3, #0
 800878e:	d06a      	beq.n	8008866 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008790:	4b90      	ldr	r3, [pc, #576]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008798:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800879a:	4b8e      	ldr	r3, [pc, #568]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 800879c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800879e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	2b08      	cmp	r3, #8
 80087a4:	d007      	beq.n	80087b6 <HAL_RCC_OscConfig+0x286>
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	2b18      	cmp	r3, #24
 80087aa:	d11b      	bne.n	80087e4 <HAL_RCC_OscConfig+0x2b4>
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f003 0303 	and.w	r3, r3, #3
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d116      	bne.n	80087e4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80087b6:	4b87      	ldr	r3, [pc, #540]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d005      	beq.n	80087ce <HAL_RCC_OscConfig+0x29e>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	2b80      	cmp	r3, #128	@ 0x80
 80087c8:	d001      	beq.n	80087ce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e282      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087ce:	4b81      	ldr	r3, [pc, #516]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	061b      	lsls	r3, r3, #24
 80087dc:	497d      	ldr	r1, [pc, #500]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80087e2:	e040      	b.n	8008866 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	69db      	ldr	r3, [r3, #28]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d023      	beq.n	8008834 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80087ec:	4b79      	ldr	r3, [pc, #484]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a78      	ldr	r2, [pc, #480]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 80087f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f8:	f7fa f8de 	bl	80029b8 <HAL_GetTick>
 80087fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80087fe:	e008      	b.n	8008812 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008800:	f7fa f8da 	bl	80029b8 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	2b02      	cmp	r3, #2
 800880c:	d901      	bls.n	8008812 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e260      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008812:	4b70      	ldr	r3, [pc, #448]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800881a:	2b00      	cmp	r3, #0
 800881c:	d0f0      	beq.n	8008800 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800881e:	4b6d      	ldr	r3, [pc, #436]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	061b      	lsls	r3, r3, #24
 800882c:	4969      	ldr	r1, [pc, #420]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 800882e:	4313      	orrs	r3, r2
 8008830:	60cb      	str	r3, [r1, #12]
 8008832:	e018      	b.n	8008866 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008834:	4b67      	ldr	r3, [pc, #412]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a66      	ldr	r2, [pc, #408]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 800883a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800883e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008840:	f7fa f8ba 	bl	80029b8 <HAL_GetTick>
 8008844:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008846:	e008      	b.n	800885a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008848:	f7fa f8b6 	bl	80029b8 <HAL_GetTick>
 800884c:	4602      	mov	r2, r0
 800884e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	2b02      	cmp	r3, #2
 8008854:	d901      	bls.n	800885a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e23c      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800885a:	4b5e      	ldr	r3, [pc, #376]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1f0      	bne.n	8008848 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 0308 	and.w	r3, r3, #8
 800886e:	2b00      	cmp	r3, #0
 8008870:	d036      	beq.n	80088e0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d019      	beq.n	80088ae <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800887a:	4b56      	ldr	r3, [pc, #344]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 800887c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800887e:	4a55      	ldr	r2, [pc, #340]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 8008880:	f043 0301 	orr.w	r3, r3, #1
 8008884:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008886:	f7fa f897 	bl	80029b8 <HAL_GetTick>
 800888a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800888c:	e008      	b.n	80088a0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800888e:	f7fa f893 	bl	80029b8 <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	2b02      	cmp	r3, #2
 800889a:	d901      	bls.n	80088a0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800889c:	2303      	movs	r3, #3
 800889e:	e219      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80088a0:	4b4c      	ldr	r3, [pc, #304]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 80088a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088a4:	f003 0302 	and.w	r3, r3, #2
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d0f0      	beq.n	800888e <HAL_RCC_OscConfig+0x35e>
 80088ac:	e018      	b.n	80088e0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088ae:	4b49      	ldr	r3, [pc, #292]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 80088b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088b2:	4a48      	ldr	r2, [pc, #288]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 80088b4:	f023 0301 	bic.w	r3, r3, #1
 80088b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088ba:	f7fa f87d 	bl	80029b8 <HAL_GetTick>
 80088be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088c0:	e008      	b.n	80088d4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088c2:	f7fa f879 	bl	80029b8 <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d901      	bls.n	80088d4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e1ff      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088d4:	4b3f      	ldr	r3, [pc, #252]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 80088d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088d8:	f003 0302 	and.w	r3, r3, #2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1f0      	bne.n	80088c2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0320 	and.w	r3, r3, #32
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d036      	beq.n	800895a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d019      	beq.n	8008928 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80088f4:	4b37      	ldr	r3, [pc, #220]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a36      	ldr	r2, [pc, #216]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 80088fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80088fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008900:	f7fa f85a 	bl	80029b8 <HAL_GetTick>
 8008904:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008906:	e008      	b.n	800891a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008908:	f7fa f856 	bl	80029b8 <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	2b02      	cmp	r3, #2
 8008914:	d901      	bls.n	800891a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e1dc      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800891a:	4b2e      	ldr	r3, [pc, #184]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d0f0      	beq.n	8008908 <HAL_RCC_OscConfig+0x3d8>
 8008926:	e018      	b.n	800895a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008928:	4b2a      	ldr	r3, [pc, #168]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a29      	ldr	r2, [pc, #164]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 800892e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008932:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008934:	f7fa f840 	bl	80029b8 <HAL_GetTick>
 8008938:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800893a:	e008      	b.n	800894e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800893c:	f7fa f83c 	bl	80029b8 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b02      	cmp	r3, #2
 8008948:	d901      	bls.n	800894e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e1c2      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800894e:	4b21      	ldr	r3, [pc, #132]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1f0      	bne.n	800893c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0304 	and.w	r3, r3, #4
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 8086 	beq.w	8008a74 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008968:	4b1b      	ldr	r3, [pc, #108]	@ (80089d8 <HAL_RCC_OscConfig+0x4a8>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a1a      	ldr	r2, [pc, #104]	@ (80089d8 <HAL_RCC_OscConfig+0x4a8>)
 800896e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008972:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008974:	f7fa f820 	bl	80029b8 <HAL_GetTick>
 8008978:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800897a:	e008      	b.n	800898e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800897c:	f7fa f81c 	bl	80029b8 <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	2b64      	cmp	r3, #100	@ 0x64
 8008988:	d901      	bls.n	800898e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800898a:	2303      	movs	r3, #3
 800898c:	e1a2      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800898e:	4b12      	ldr	r3, [pc, #72]	@ (80089d8 <HAL_RCC_OscConfig+0x4a8>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0f0      	beq.n	800897c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d106      	bne.n	80089b0 <HAL_RCC_OscConfig+0x480>
 80089a2:	4b0c      	ldr	r3, [pc, #48]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 80089a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089a6:	4a0b      	ldr	r2, [pc, #44]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 80089a8:	f043 0301 	orr.w	r3, r3, #1
 80089ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80089ae:	e032      	b.n	8008a16 <HAL_RCC_OscConfig+0x4e6>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d111      	bne.n	80089dc <HAL_RCC_OscConfig+0x4ac>
 80089b8:	4b06      	ldr	r3, [pc, #24]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 80089ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089bc:	4a05      	ldr	r2, [pc, #20]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 80089be:	f023 0301 	bic.w	r3, r3, #1
 80089c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80089c4:	4b03      	ldr	r3, [pc, #12]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 80089c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089c8:	4a02      	ldr	r2, [pc, #8]	@ (80089d4 <HAL_RCC_OscConfig+0x4a4>)
 80089ca:	f023 0304 	bic.w	r3, r3, #4
 80089ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80089d0:	e021      	b.n	8008a16 <HAL_RCC_OscConfig+0x4e6>
 80089d2:	bf00      	nop
 80089d4:	58024400 	.word	0x58024400
 80089d8:	58024800 	.word	0x58024800
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	2b05      	cmp	r3, #5
 80089e2:	d10c      	bne.n	80089fe <HAL_RCC_OscConfig+0x4ce>
 80089e4:	4b83      	ldr	r3, [pc, #524]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 80089e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089e8:	4a82      	ldr	r2, [pc, #520]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 80089ea:	f043 0304 	orr.w	r3, r3, #4
 80089ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80089f0:	4b80      	ldr	r3, [pc, #512]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 80089f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089f4:	4a7f      	ldr	r2, [pc, #508]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 80089f6:	f043 0301 	orr.w	r3, r3, #1
 80089fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80089fc:	e00b      	b.n	8008a16 <HAL_RCC_OscConfig+0x4e6>
 80089fe:	4b7d      	ldr	r3, [pc, #500]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a02:	4a7c      	ldr	r2, [pc, #496]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008a04:	f023 0301 	bic.w	r3, r3, #1
 8008a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a0a:	4b7a      	ldr	r3, [pc, #488]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a0e:	4a79      	ldr	r2, [pc, #484]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008a10:	f023 0304 	bic.w	r3, r3, #4
 8008a14:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d015      	beq.n	8008a4a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a1e:	f7f9 ffcb 	bl	80029b8 <HAL_GetTick>
 8008a22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a24:	e00a      	b.n	8008a3c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a26:	f7f9 ffc7 	bl	80029b8 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d901      	bls.n	8008a3c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e14b      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a3c:	4b6d      	ldr	r3, [pc, #436]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a40:	f003 0302 	and.w	r3, r3, #2
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d0ee      	beq.n	8008a26 <HAL_RCC_OscConfig+0x4f6>
 8008a48:	e014      	b.n	8008a74 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a4a:	f7f9 ffb5 	bl	80029b8 <HAL_GetTick>
 8008a4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a50:	e00a      	b.n	8008a68 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a52:	f7f9 ffb1 	bl	80029b8 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d901      	bls.n	8008a68 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e135      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a68:	4b62      	ldr	r3, [pc, #392]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a6c:	f003 0302 	and.w	r3, r3, #2
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1ee      	bne.n	8008a52 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 812a 	beq.w	8008cd2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008a7e:	4b5d      	ldr	r3, [pc, #372]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a86:	2b18      	cmp	r3, #24
 8008a88:	f000 80ba 	beq.w	8008c00 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	f040 8095 	bne.w	8008bc0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a96:	4b57      	ldr	r3, [pc, #348]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a56      	ldr	r2, [pc, #344]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008a9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa2:	f7f9 ff89 	bl	80029b8 <HAL_GetTick>
 8008aa6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008aa8:	e008      	b.n	8008abc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aaa:	f7f9 ff85 	bl	80029b8 <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d901      	bls.n	8008abc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e10b      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008abc:	4b4d      	ldr	r3, [pc, #308]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1f0      	bne.n	8008aaa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008aca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008acc:	4b4a      	ldr	r3, [pc, #296]	@ (8008bf8 <HAL_RCC_OscConfig+0x6c8>)
 8008ace:	4013      	ands	r3, r2
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008ad8:	0112      	lsls	r2, r2, #4
 8008ada:	430a      	orrs	r2, r1
 8008adc:	4945      	ldr	r1, [pc, #276]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	628b      	str	r3, [r1, #40]	@ 0x28
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008af0:	3b01      	subs	r3, #1
 8008af2:	025b      	lsls	r3, r3, #9
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	431a      	orrs	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008afc:	3b01      	subs	r3, #1
 8008afe:	041b      	lsls	r3, r3, #16
 8008b00:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008b04:	431a      	orrs	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	061b      	lsls	r3, r3, #24
 8008b0e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008b12:	4938      	ldr	r1, [pc, #224]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b14:	4313      	orrs	r3, r2
 8008b16:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008b18:	4b36      	ldr	r3, [pc, #216]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b1c:	4a35      	ldr	r2, [pc, #212]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b1e:	f023 0301 	bic.w	r3, r3, #1
 8008b22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008b24:	4b33      	ldr	r3, [pc, #204]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b28:	4b34      	ldr	r3, [pc, #208]	@ (8008bfc <HAL_RCC_OscConfig+0x6cc>)
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008b30:	00d2      	lsls	r2, r2, #3
 8008b32:	4930      	ldr	r1, [pc, #192]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008b38:	4b2e      	ldr	r3, [pc, #184]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b3c:	f023 020c 	bic.w	r2, r3, #12
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b44:	492b      	ldr	r1, [pc, #172]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4e:	f023 0202 	bic.w	r2, r3, #2
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b56:	4927      	ldr	r1, [pc, #156]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008b5c:	4b25      	ldr	r3, [pc, #148]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b60:	4a24      	ldr	r2, [pc, #144]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b68:	4b22      	ldr	r3, [pc, #136]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6c:	4a21      	ldr	r2, [pc, #132]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008b74:	4b1f      	ldr	r3, [pc, #124]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b78:	4a1e      	ldr	r2, [pc, #120]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008b80:	4b1c      	ldr	r3, [pc, #112]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b84:	4a1b      	ldr	r2, [pc, #108]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b86:	f043 0301 	orr.w	r3, r3, #1
 8008b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b8c:	4b19      	ldr	r3, [pc, #100]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a18      	ldr	r2, [pc, #96]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b98:	f7f9 ff0e 	bl	80029b8 <HAL_GetTick>
 8008b9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b9e:	e008      	b.n	8008bb2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ba0:	f7f9 ff0a 	bl	80029b8 <HAL_GetTick>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d901      	bls.n	8008bb2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e090      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008bb2:	4b10      	ldr	r3, [pc, #64]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d0f0      	beq.n	8008ba0 <HAL_RCC_OscConfig+0x670>
 8008bbe:	e088      	b.n	8008cd2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008bc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008bca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bcc:	f7f9 fef4 	bl	80029b8 <HAL_GetTick>
 8008bd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008bd2:	e008      	b.n	8008be6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bd4:	f7f9 fef0 	bl	80029b8 <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d901      	bls.n	8008be6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e076      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008be6:	4b03      	ldr	r3, [pc, #12]	@ (8008bf4 <HAL_RCC_OscConfig+0x6c4>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1f0      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x6a4>
 8008bf2:	e06e      	b.n	8008cd2 <HAL_RCC_OscConfig+0x7a2>
 8008bf4:	58024400 	.word	0x58024400
 8008bf8:	fffffc0c 	.word	0xfffffc0c
 8008bfc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008c00:	4b36      	ldr	r3, [pc, #216]	@ (8008cdc <HAL_RCC_OscConfig+0x7ac>)
 8008c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008c06:	4b35      	ldr	r3, [pc, #212]	@ (8008cdc <HAL_RCC_OscConfig+0x7ac>)
 8008c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d031      	beq.n	8008c78 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	f003 0203 	and.w	r2, r3, #3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d12a      	bne.n	8008c78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	091b      	lsrs	r3, r3, #4
 8008c26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d122      	bne.n	8008c78 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d11a      	bne.n	8008c78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	0a5b      	lsrs	r3, r3, #9
 8008c46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d111      	bne.n	8008c78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	0c1b      	lsrs	r3, r3, #16
 8008c58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d108      	bne.n	8008c78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	0e1b      	lsrs	r3, r3, #24
 8008c6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d001      	beq.n	8008c7c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e02b      	b.n	8008cd4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008c7c:	4b17      	ldr	r3, [pc, #92]	@ (8008cdc <HAL_RCC_OscConfig+0x7ac>)
 8008c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c80:	08db      	lsrs	r3, r3, #3
 8008c82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d01f      	beq.n	8008cd2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008c92:	4b12      	ldr	r3, [pc, #72]	@ (8008cdc <HAL_RCC_OscConfig+0x7ac>)
 8008c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c96:	4a11      	ldr	r2, [pc, #68]	@ (8008cdc <HAL_RCC_OscConfig+0x7ac>)
 8008c98:	f023 0301 	bic.w	r3, r3, #1
 8008c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c9e:	f7f9 fe8b 	bl	80029b8 <HAL_GetTick>
 8008ca2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008ca4:	bf00      	nop
 8008ca6:	f7f9 fe87 	bl	80029b8 <HAL_GetTick>
 8008caa:	4602      	mov	r2, r0
 8008cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d0f9      	beq.n	8008ca6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8008cdc <HAL_RCC_OscConfig+0x7ac>)
 8008cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8008ce0 <HAL_RCC_OscConfig+0x7b0>)
 8008cb8:	4013      	ands	r3, r2
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008cbe:	00d2      	lsls	r2, r2, #3
 8008cc0:	4906      	ldr	r1, [pc, #24]	@ (8008cdc <HAL_RCC_OscConfig+0x7ac>)
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008cc6:	4b05      	ldr	r3, [pc, #20]	@ (8008cdc <HAL_RCC_OscConfig+0x7ac>)
 8008cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cca:	4a04      	ldr	r2, [pc, #16]	@ (8008cdc <HAL_RCC_OscConfig+0x7ac>)
 8008ccc:	f043 0301 	orr.w	r3, r3, #1
 8008cd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3730      	adds	r7, #48	@ 0x30
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	58024400 	.word	0x58024400
 8008ce0:	ffff0007 	.word	0xffff0007

08008ce4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d101      	bne.n	8008cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e19c      	b.n	8009032 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008cf8:	4b8a      	ldr	r3, [pc, #552]	@ (8008f24 <HAL_RCC_ClockConfig+0x240>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 030f 	and.w	r3, r3, #15
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d910      	bls.n	8008d28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d06:	4b87      	ldr	r3, [pc, #540]	@ (8008f24 <HAL_RCC_ClockConfig+0x240>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f023 020f 	bic.w	r2, r3, #15
 8008d0e:	4985      	ldr	r1, [pc, #532]	@ (8008f24 <HAL_RCC_ClockConfig+0x240>)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d16:	4b83      	ldr	r3, [pc, #524]	@ (8008f24 <HAL_RCC_ClockConfig+0x240>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 030f 	and.w	r3, r3, #15
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d001      	beq.n	8008d28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e184      	b.n	8009032 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0304 	and.w	r3, r3, #4
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d010      	beq.n	8008d56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	4b7b      	ldr	r3, [pc, #492]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d908      	bls.n	8008d56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008d44:	4b78      	ldr	r3, [pc, #480]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	4975      	ldr	r1, [pc, #468]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0308 	and.w	r3, r3, #8
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d010      	beq.n	8008d84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	695a      	ldr	r2, [r3, #20]
 8008d66:	4b70      	ldr	r3, [pc, #448]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008d68:	69db      	ldr	r3, [r3, #28]
 8008d6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d908      	bls.n	8008d84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008d72:	4b6d      	ldr	r3, [pc, #436]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	496a      	ldr	r1, [pc, #424]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008d80:	4313      	orrs	r3, r2
 8008d82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 0310 	and.w	r3, r3, #16
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d010      	beq.n	8008db2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	699a      	ldr	r2, [r3, #24]
 8008d94:	4b64      	ldr	r3, [pc, #400]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d908      	bls.n	8008db2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008da0:	4b61      	ldr	r3, [pc, #388]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008da2:	69db      	ldr	r3, [r3, #28]
 8008da4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	495e      	ldr	r1, [pc, #376]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0320 	and.w	r3, r3, #32
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d010      	beq.n	8008de0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	69da      	ldr	r2, [r3, #28]
 8008dc2:	4b59      	ldr	r3, [pc, #356]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d908      	bls.n	8008de0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008dce:	4b56      	ldr	r3, [pc, #344]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	4953      	ldr	r1, [pc, #332]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 0302 	and.w	r3, r3, #2
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d010      	beq.n	8008e0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68da      	ldr	r2, [r3, #12]
 8008df0:	4b4d      	ldr	r3, [pc, #308]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	f003 030f 	and.w	r3, r3, #15
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d908      	bls.n	8008e0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dfc:	4b4a      	ldr	r3, [pc, #296]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	f023 020f 	bic.w	r2, r3, #15
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	4947      	ldr	r1, [pc, #284]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d055      	beq.n	8008ec6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008e1a:	4b43      	ldr	r3, [pc, #268]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	4940      	ldr	r1, [pc, #256]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d107      	bne.n	8008e44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e34:	4b3c      	ldr	r3, [pc, #240]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d121      	bne.n	8008e84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e0f6      	b.n	8009032 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	2b03      	cmp	r3, #3
 8008e4a:	d107      	bne.n	8008e5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e4c:	4b36      	ldr	r3, [pc, #216]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d115      	bne.n	8008e84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e0ea      	b.n	8009032 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d107      	bne.n	8008e74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e64:	4b30      	ldr	r3, [pc, #192]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d109      	bne.n	8008e84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e0de      	b.n	8009032 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e74:	4b2c      	ldr	r3, [pc, #176]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e0d6      	b.n	8009032 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e84:	4b28      	ldr	r3, [pc, #160]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	f023 0207 	bic.w	r2, r3, #7
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	4925      	ldr	r1, [pc, #148]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e96:	f7f9 fd8f 	bl	80029b8 <HAL_GetTick>
 8008e9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e9c:	e00a      	b.n	8008eb4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e9e:	f7f9 fd8b 	bl	80029b8 <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d901      	bls.n	8008eb4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e0be      	b.n	8009032 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	00db      	lsls	r3, r3, #3
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d1eb      	bne.n	8008e9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0302 	and.w	r3, r3, #2
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d010      	beq.n	8008ef4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68da      	ldr	r2, [r3, #12]
 8008ed6:	4b14      	ldr	r3, [pc, #80]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	f003 030f 	and.w	r3, r3, #15
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d208      	bcs.n	8008ef4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ee2:	4b11      	ldr	r3, [pc, #68]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	f023 020f 	bic.w	r2, r3, #15
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	490e      	ldr	r1, [pc, #56]	@ (8008f28 <HAL_RCC_ClockConfig+0x244>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8008f24 <HAL_RCC_ClockConfig+0x240>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 030f 	and.w	r3, r3, #15
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d214      	bcs.n	8008f2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f02:	4b08      	ldr	r3, [pc, #32]	@ (8008f24 <HAL_RCC_ClockConfig+0x240>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f023 020f 	bic.w	r2, r3, #15
 8008f0a:	4906      	ldr	r1, [pc, #24]	@ (8008f24 <HAL_RCC_ClockConfig+0x240>)
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f12:	4b04      	ldr	r3, [pc, #16]	@ (8008f24 <HAL_RCC_ClockConfig+0x240>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 030f 	and.w	r3, r3, #15
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d005      	beq.n	8008f2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e086      	b.n	8009032 <HAL_RCC_ClockConfig+0x34e>
 8008f24:	52002000 	.word	0x52002000
 8008f28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 0304 	and.w	r3, r3, #4
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d010      	beq.n	8008f5a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	691a      	ldr	r2, [r3, #16]
 8008f3c:	4b3f      	ldr	r3, [pc, #252]	@ (800903c <HAL_RCC_ClockConfig+0x358>)
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d208      	bcs.n	8008f5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f48:	4b3c      	ldr	r3, [pc, #240]	@ (800903c <HAL_RCC_ClockConfig+0x358>)
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	4939      	ldr	r1, [pc, #228]	@ (800903c <HAL_RCC_ClockConfig+0x358>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 0308 	and.w	r3, r3, #8
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d010      	beq.n	8008f88 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	695a      	ldr	r2, [r3, #20]
 8008f6a:	4b34      	ldr	r3, [pc, #208]	@ (800903c <HAL_RCC_ClockConfig+0x358>)
 8008f6c:	69db      	ldr	r3, [r3, #28]
 8008f6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d208      	bcs.n	8008f88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f76:	4b31      	ldr	r3, [pc, #196]	@ (800903c <HAL_RCC_ClockConfig+0x358>)
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	695b      	ldr	r3, [r3, #20]
 8008f82:	492e      	ldr	r1, [pc, #184]	@ (800903c <HAL_RCC_ClockConfig+0x358>)
 8008f84:	4313      	orrs	r3, r2
 8008f86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0310 	and.w	r3, r3, #16
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d010      	beq.n	8008fb6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	699a      	ldr	r2, [r3, #24]
 8008f98:	4b28      	ldr	r3, [pc, #160]	@ (800903c <HAL_RCC_ClockConfig+0x358>)
 8008f9a:	69db      	ldr	r3, [r3, #28]
 8008f9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d208      	bcs.n	8008fb6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008fa4:	4b25      	ldr	r3, [pc, #148]	@ (800903c <HAL_RCC_ClockConfig+0x358>)
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	4922      	ldr	r1, [pc, #136]	@ (800903c <HAL_RCC_ClockConfig+0x358>)
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 0320 	and.w	r3, r3, #32
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d010      	beq.n	8008fe4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	69da      	ldr	r2, [r3, #28]
 8008fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800903c <HAL_RCC_ClockConfig+0x358>)
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d208      	bcs.n	8008fe4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800903c <HAL_RCC_ClockConfig+0x358>)
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	4917      	ldr	r1, [pc, #92]	@ (800903c <HAL_RCC_ClockConfig+0x358>)
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008fe4:	f000 f834 	bl	8009050 <HAL_RCC_GetSysClockFreq>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	4b14      	ldr	r3, [pc, #80]	@ (800903c <HAL_RCC_ClockConfig+0x358>)
 8008fec:	699b      	ldr	r3, [r3, #24]
 8008fee:	0a1b      	lsrs	r3, r3, #8
 8008ff0:	f003 030f 	and.w	r3, r3, #15
 8008ff4:	4912      	ldr	r1, [pc, #72]	@ (8009040 <HAL_RCC_ClockConfig+0x35c>)
 8008ff6:	5ccb      	ldrb	r3, [r1, r3]
 8008ff8:	f003 031f 	and.w	r3, r3, #31
 8008ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8009000:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009002:	4b0e      	ldr	r3, [pc, #56]	@ (800903c <HAL_RCC_ClockConfig+0x358>)
 8009004:	699b      	ldr	r3, [r3, #24]
 8009006:	f003 030f 	and.w	r3, r3, #15
 800900a:	4a0d      	ldr	r2, [pc, #52]	@ (8009040 <HAL_RCC_ClockConfig+0x35c>)
 800900c:	5cd3      	ldrb	r3, [r2, r3]
 800900e:	f003 031f 	and.w	r3, r3, #31
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	fa22 f303 	lsr.w	r3, r2, r3
 8009018:	4a0a      	ldr	r2, [pc, #40]	@ (8009044 <HAL_RCC_ClockConfig+0x360>)
 800901a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800901c:	4a0a      	ldr	r2, [pc, #40]	@ (8009048 <HAL_RCC_ClockConfig+0x364>)
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009022:	4b0a      	ldr	r3, [pc, #40]	@ (800904c <HAL_RCC_ClockConfig+0x368>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4618      	mov	r0, r3
 8009028:	f7f9 fc7c 	bl	8002924 <HAL_InitTick>
 800902c:	4603      	mov	r3, r0
 800902e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009030:	7bfb      	ldrb	r3, [r7, #15]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3718      	adds	r7, #24
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	58024400 	.word	0x58024400
 8009040:	080104a0 	.word	0x080104a0
 8009044:	240001b0 	.word	0x240001b0
 8009048:	240001ac 	.word	0x240001ac
 800904c:	240001b4 	.word	0x240001b4

08009050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009050:	b480      	push	{r7}
 8009052:	b089      	sub	sp, #36	@ 0x24
 8009054:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009056:	4bb3      	ldr	r3, [pc, #716]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800905e:	2b18      	cmp	r3, #24
 8009060:	f200 8155 	bhi.w	800930e <HAL_RCC_GetSysClockFreq+0x2be>
 8009064:	a201      	add	r2, pc, #4	@ (adr r2, 800906c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906a:	bf00      	nop
 800906c:	080090d1 	.word	0x080090d1
 8009070:	0800930f 	.word	0x0800930f
 8009074:	0800930f 	.word	0x0800930f
 8009078:	0800930f 	.word	0x0800930f
 800907c:	0800930f 	.word	0x0800930f
 8009080:	0800930f 	.word	0x0800930f
 8009084:	0800930f 	.word	0x0800930f
 8009088:	0800930f 	.word	0x0800930f
 800908c:	080090f7 	.word	0x080090f7
 8009090:	0800930f 	.word	0x0800930f
 8009094:	0800930f 	.word	0x0800930f
 8009098:	0800930f 	.word	0x0800930f
 800909c:	0800930f 	.word	0x0800930f
 80090a0:	0800930f 	.word	0x0800930f
 80090a4:	0800930f 	.word	0x0800930f
 80090a8:	0800930f 	.word	0x0800930f
 80090ac:	080090fd 	.word	0x080090fd
 80090b0:	0800930f 	.word	0x0800930f
 80090b4:	0800930f 	.word	0x0800930f
 80090b8:	0800930f 	.word	0x0800930f
 80090bc:	0800930f 	.word	0x0800930f
 80090c0:	0800930f 	.word	0x0800930f
 80090c4:	0800930f 	.word	0x0800930f
 80090c8:	0800930f 	.word	0x0800930f
 80090cc:	08009103 	.word	0x08009103
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090d0:	4b94      	ldr	r3, [pc, #592]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 0320 	and.w	r3, r3, #32
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d009      	beq.n	80090f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090dc:	4b91      	ldr	r3, [pc, #580]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	08db      	lsrs	r3, r3, #3
 80090e2:	f003 0303 	and.w	r3, r3, #3
 80090e6:	4a90      	ldr	r2, [pc, #576]	@ (8009328 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090e8:	fa22 f303 	lsr.w	r3, r2, r3
 80090ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80090ee:	e111      	b.n	8009314 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80090f0:	4b8d      	ldr	r3, [pc, #564]	@ (8009328 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090f2:	61bb      	str	r3, [r7, #24]
      break;
 80090f4:	e10e      	b.n	8009314 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80090f6:	4b8d      	ldr	r3, [pc, #564]	@ (800932c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80090f8:	61bb      	str	r3, [r7, #24]
      break;
 80090fa:	e10b      	b.n	8009314 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80090fc:	4b8c      	ldr	r3, [pc, #560]	@ (8009330 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80090fe:	61bb      	str	r3, [r7, #24]
      break;
 8009100:	e108      	b.n	8009314 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009102:	4b88      	ldr	r3, [pc, #544]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009106:	f003 0303 	and.w	r3, r3, #3
 800910a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800910c:	4b85      	ldr	r3, [pc, #532]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800910e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009110:	091b      	lsrs	r3, r3, #4
 8009112:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009116:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009118:	4b82      	ldr	r3, [pc, #520]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800911a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800911c:	f003 0301 	and.w	r3, r3, #1
 8009120:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009122:	4b80      	ldr	r3, [pc, #512]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009126:	08db      	lsrs	r3, r3, #3
 8009128:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	fb02 f303 	mul.w	r3, r2, r3
 8009132:	ee07 3a90 	vmov	s15, r3
 8009136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800913a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	2b00      	cmp	r3, #0
 8009142:	f000 80e1 	beq.w	8009308 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2b02      	cmp	r3, #2
 800914a:	f000 8083 	beq.w	8009254 <HAL_RCC_GetSysClockFreq+0x204>
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	2b02      	cmp	r3, #2
 8009152:	f200 80a1 	bhi.w	8009298 <HAL_RCC_GetSysClockFreq+0x248>
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d003      	beq.n	8009164 <HAL_RCC_GetSysClockFreq+0x114>
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d056      	beq.n	8009210 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009162:	e099      	b.n	8009298 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009164:	4b6f      	ldr	r3, [pc, #444]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 0320 	and.w	r3, r3, #32
 800916c:	2b00      	cmp	r3, #0
 800916e:	d02d      	beq.n	80091cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009170:	4b6c      	ldr	r3, [pc, #432]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	08db      	lsrs	r3, r3, #3
 8009176:	f003 0303 	and.w	r3, r3, #3
 800917a:	4a6b      	ldr	r2, [pc, #428]	@ (8009328 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800917c:	fa22 f303 	lsr.w	r3, r2, r3
 8009180:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	ee07 3a90 	vmov	s15, r3
 8009188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	ee07 3a90 	vmov	s15, r3
 8009192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800919a:	4b62      	ldr	r3, [pc, #392]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800919c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800919e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091a2:	ee07 3a90 	vmov	s15, r3
 80091a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80091ae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009334 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80091ca:	e087      	b.n	80092dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	ee07 3a90 	vmov	s15, r3
 80091d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009338 <HAL_RCC_GetSysClockFreq+0x2e8>
 80091da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091de:	4b51      	ldr	r3, [pc, #324]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e6:	ee07 3a90 	vmov	s15, r3
 80091ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80091f2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009334 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800920a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800920e:	e065      	b.n	80092dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	ee07 3a90 	vmov	s15, r3
 8009216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800921a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800933c <HAL_RCC_GetSysClockFreq+0x2ec>
 800921e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009222:	4b40      	ldr	r3, [pc, #256]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800922a:	ee07 3a90 	vmov	s15, r3
 800922e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009232:	ed97 6a02 	vldr	s12, [r7, #8]
 8009236:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009334 <HAL_RCC_GetSysClockFreq+0x2e4>
 800923a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800923e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800924a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800924e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009252:	e043      	b.n	80092dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	ee07 3a90 	vmov	s15, r3
 800925a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800925e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009340 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009266:	4b2f      	ldr	r3, [pc, #188]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800926a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800926e:	ee07 3a90 	vmov	s15, r3
 8009272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009276:	ed97 6a02 	vldr	s12, [r7, #8]
 800927a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009334 <HAL_RCC_GetSysClockFreq+0x2e4>
 800927e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800928a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800928e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009292:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009296:	e021      	b.n	80092dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	ee07 3a90 	vmov	s15, r3
 800929e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800933c <HAL_RCC_GetSysClockFreq+0x2ec>
 80092a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092aa:	4b1e      	ldr	r3, [pc, #120]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092b2:	ee07 3a90 	vmov	s15, r3
 80092b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80092be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009334 <HAL_RCC_GetSysClockFreq+0x2e4>
 80092c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80092da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80092dc:	4b11      	ldr	r3, [pc, #68]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092e0:	0a5b      	lsrs	r3, r3, #9
 80092e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092e6:	3301      	adds	r3, #1
 80092e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	ee07 3a90 	vmov	s15, r3
 80092f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80092f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80092f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009300:	ee17 3a90 	vmov	r3, s15
 8009304:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009306:	e005      	b.n	8009314 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009308:	2300      	movs	r3, #0
 800930a:	61bb      	str	r3, [r7, #24]
      break;
 800930c:	e002      	b.n	8009314 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800930e:	4b07      	ldr	r3, [pc, #28]	@ (800932c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009310:	61bb      	str	r3, [r7, #24]
      break;
 8009312:	bf00      	nop
  }

  return sysclockfreq;
 8009314:	69bb      	ldr	r3, [r7, #24]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3724      	adds	r7, #36	@ 0x24
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	58024400 	.word	0x58024400
 8009328:	03d09000 	.word	0x03d09000
 800932c:	003d0900 	.word	0x003d0900
 8009330:	007a1200 	.word	0x007a1200
 8009334:	46000000 	.word	0x46000000
 8009338:	4c742400 	.word	0x4c742400
 800933c:	4a742400 	.word	0x4a742400
 8009340:	4af42400 	.word	0x4af42400

08009344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800934a:	f7ff fe81 	bl	8009050 <HAL_RCC_GetSysClockFreq>
 800934e:	4602      	mov	r2, r0
 8009350:	4b10      	ldr	r3, [pc, #64]	@ (8009394 <HAL_RCC_GetHCLKFreq+0x50>)
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	0a1b      	lsrs	r3, r3, #8
 8009356:	f003 030f 	and.w	r3, r3, #15
 800935a:	490f      	ldr	r1, [pc, #60]	@ (8009398 <HAL_RCC_GetHCLKFreq+0x54>)
 800935c:	5ccb      	ldrb	r3, [r1, r3]
 800935e:	f003 031f 	and.w	r3, r3, #31
 8009362:	fa22 f303 	lsr.w	r3, r2, r3
 8009366:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009368:	4b0a      	ldr	r3, [pc, #40]	@ (8009394 <HAL_RCC_GetHCLKFreq+0x50>)
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	f003 030f 	and.w	r3, r3, #15
 8009370:	4a09      	ldr	r2, [pc, #36]	@ (8009398 <HAL_RCC_GetHCLKFreq+0x54>)
 8009372:	5cd3      	ldrb	r3, [r2, r3]
 8009374:	f003 031f 	and.w	r3, r3, #31
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	fa22 f303 	lsr.w	r3, r2, r3
 800937e:	4a07      	ldr	r2, [pc, #28]	@ (800939c <HAL_RCC_GetHCLKFreq+0x58>)
 8009380:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009382:	4a07      	ldr	r2, [pc, #28]	@ (80093a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009388:	4b04      	ldr	r3, [pc, #16]	@ (800939c <HAL_RCC_GetHCLKFreq+0x58>)
 800938a:	681b      	ldr	r3, [r3, #0]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	58024400 	.word	0x58024400
 8009398:	080104a0 	.word	0x080104a0
 800939c:	240001b0 	.word	0x240001b0
 80093a0:	240001ac 	.word	0x240001ac

080093a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80093a8:	f7ff ffcc 	bl	8009344 <HAL_RCC_GetHCLKFreq>
 80093ac:	4602      	mov	r2, r0
 80093ae:	4b06      	ldr	r3, [pc, #24]	@ (80093c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80093b0:	69db      	ldr	r3, [r3, #28]
 80093b2:	091b      	lsrs	r3, r3, #4
 80093b4:	f003 0307 	and.w	r3, r3, #7
 80093b8:	4904      	ldr	r1, [pc, #16]	@ (80093cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80093ba:	5ccb      	ldrb	r3, [r1, r3]
 80093bc:	f003 031f 	and.w	r3, r3, #31
 80093c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	58024400 	.word	0x58024400
 80093cc:	080104a0 	.word	0x080104a0

080093d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093d4:	b0c6      	sub	sp, #280	@ 0x118
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80093dc:	2300      	movs	r3, #0
 80093de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80093e2:	2300      	movs	r3, #0
 80093e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80093e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80093f4:	2500      	movs	r5, #0
 80093f6:	ea54 0305 	orrs.w	r3, r4, r5
 80093fa:	d049      	beq.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80093fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009400:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009402:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009406:	d02f      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009408:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800940c:	d828      	bhi.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800940e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009412:	d01a      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009414:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009418:	d822      	bhi.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800941a:	2b00      	cmp	r3, #0
 800941c:	d003      	beq.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800941e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009422:	d007      	beq.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009424:	e01c      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009426:	4bab      	ldr	r3, [pc, #684]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942a:	4aaa      	ldr	r2, [pc, #680]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800942c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009430:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009432:	e01a      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009438:	3308      	adds	r3, #8
 800943a:	2102      	movs	r1, #2
 800943c:	4618      	mov	r0, r3
 800943e:	f002 fa49 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009442:	4603      	mov	r3, r0
 8009444:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009448:	e00f      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800944a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800944e:	3328      	adds	r3, #40	@ 0x28
 8009450:	2102      	movs	r1, #2
 8009452:	4618      	mov	r0, r3
 8009454:	f002 faf0 	bl	800ba38 <RCCEx_PLL3_Config>
 8009458:	4603      	mov	r3, r0
 800945a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800945e:	e004      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009466:	e000      	b.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800946a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800946e:	2b00      	cmp	r3, #0
 8009470:	d10a      	bne.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009472:	4b98      	ldr	r3, [pc, #608]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009476:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800947a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800947e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009480:	4a94      	ldr	r2, [pc, #592]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009482:	430b      	orrs	r3, r1
 8009484:	6513      	str	r3, [r2, #80]	@ 0x50
 8009486:	e003      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009488:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800948c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009498:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800949c:	f04f 0900 	mov.w	r9, #0
 80094a0:	ea58 0309 	orrs.w	r3, r8, r9
 80094a4:	d047      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80094a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ac:	2b04      	cmp	r3, #4
 80094ae:	d82a      	bhi.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80094b0:	a201      	add	r2, pc, #4	@ (adr r2, 80094b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80094b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b6:	bf00      	nop
 80094b8:	080094cd 	.word	0x080094cd
 80094bc:	080094db 	.word	0x080094db
 80094c0:	080094f1 	.word	0x080094f1
 80094c4:	0800950f 	.word	0x0800950f
 80094c8:	0800950f 	.word	0x0800950f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094cc:	4b81      	ldr	r3, [pc, #516]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80094ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d0:	4a80      	ldr	r2, [pc, #512]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80094d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094d8:	e01a      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094de:	3308      	adds	r3, #8
 80094e0:	2100      	movs	r1, #0
 80094e2:	4618      	mov	r0, r3
 80094e4:	f002 f9f6 	bl	800b8d4 <RCCEx_PLL2_Config>
 80094e8:	4603      	mov	r3, r0
 80094ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094ee:	e00f      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094f4:	3328      	adds	r3, #40	@ 0x28
 80094f6:	2100      	movs	r1, #0
 80094f8:	4618      	mov	r0, r3
 80094fa:	f002 fa9d 	bl	800ba38 <RCCEx_PLL3_Config>
 80094fe:	4603      	mov	r3, r0
 8009500:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009504:	e004      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800950c:	e000      	b.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800950e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009510:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10a      	bne.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009518:	4b6e      	ldr	r3, [pc, #440]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800951a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800951c:	f023 0107 	bic.w	r1, r3, #7
 8009520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009526:	4a6b      	ldr	r2, [pc, #428]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009528:	430b      	orrs	r3, r1
 800952a:	6513      	str	r3, [r2, #80]	@ 0x50
 800952c:	e003      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800952e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009532:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8009542:	f04f 0b00 	mov.w	fp, #0
 8009546:	ea5a 030b 	orrs.w	r3, sl, fp
 800954a:	d05b      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800954c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009550:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009554:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009558:	d03b      	beq.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800955a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800955e:	d834      	bhi.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009560:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009564:	d037      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009566:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800956a:	d82e      	bhi.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800956c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009570:	d033      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009572:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009576:	d828      	bhi.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009578:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800957c:	d01a      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800957e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009582:	d822      	bhi.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009584:	2b00      	cmp	r3, #0
 8009586:	d003      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009588:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800958c:	d007      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800958e:	e01c      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009590:	4b50      	ldr	r3, [pc, #320]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009594:	4a4f      	ldr	r2, [pc, #316]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800959a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800959c:	e01e      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800959e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095a2:	3308      	adds	r3, #8
 80095a4:	2100      	movs	r1, #0
 80095a6:	4618      	mov	r0, r3
 80095a8:	f002 f994 	bl	800b8d4 <RCCEx_PLL2_Config>
 80095ac:	4603      	mov	r3, r0
 80095ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80095b2:	e013      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095b8:	3328      	adds	r3, #40	@ 0x28
 80095ba:	2100      	movs	r1, #0
 80095bc:	4618      	mov	r0, r3
 80095be:	f002 fa3b 	bl	800ba38 <RCCEx_PLL3_Config>
 80095c2:	4603      	mov	r3, r0
 80095c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095c8:	e008      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80095d0:	e004      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80095d2:	bf00      	nop
 80095d4:	e002      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80095d6:	bf00      	nop
 80095d8:	e000      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80095da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10b      	bne.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80095e4:	4b3b      	ldr	r3, [pc, #236]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80095e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095e8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80095ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80095f4:	4a37      	ldr	r2, [pc, #220]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80095f6:	430b      	orrs	r3, r1
 80095f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80095fa:	e003      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009600:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009610:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009614:	2300      	movs	r3, #0
 8009616:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800961a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800961e:	460b      	mov	r3, r1
 8009620:	4313      	orrs	r3, r2
 8009622:	d05d      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009628:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800962c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009630:	d03b      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009632:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009636:	d834      	bhi.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009638:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800963c:	d037      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800963e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009642:	d82e      	bhi.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009644:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009648:	d033      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800964a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800964e:	d828      	bhi.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009650:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009654:	d01a      	beq.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009656:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800965a:	d822      	bhi.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800965c:	2b00      	cmp	r3, #0
 800965e:	d003      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009664:	d007      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009666:	e01c      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009668:	4b1a      	ldr	r3, [pc, #104]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800966a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966c:	4a19      	ldr	r2, [pc, #100]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800966e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009672:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009674:	e01e      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800967a:	3308      	adds	r3, #8
 800967c:	2100      	movs	r1, #0
 800967e:	4618      	mov	r0, r3
 8009680:	f002 f928 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009684:	4603      	mov	r3, r0
 8009686:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800968a:	e013      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800968c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009690:	3328      	adds	r3, #40	@ 0x28
 8009692:	2100      	movs	r1, #0
 8009694:	4618      	mov	r0, r3
 8009696:	f002 f9cf 	bl	800ba38 <RCCEx_PLL3_Config>
 800969a:	4603      	mov	r3, r0
 800969c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096a0:	e008      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80096a8:	e004      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80096aa:	bf00      	nop
 80096ac:	e002      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80096ae:	bf00      	nop
 80096b0:	e000      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80096b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10d      	bne.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80096bc:	4b05      	ldr	r3, [pc, #20]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096c0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80096c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80096cc:	4a01      	ldr	r2, [pc, #4]	@ (80096d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80096ce:	430b      	orrs	r3, r1
 80096d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80096d2:	e005      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80096d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80096e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80096ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80096f0:	2300      	movs	r3, #0
 80096f2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80096f6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80096fa:	460b      	mov	r3, r1
 80096fc:	4313      	orrs	r3, r2
 80096fe:	d03a      	beq.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009706:	2b30      	cmp	r3, #48	@ 0x30
 8009708:	d01f      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800970a:	2b30      	cmp	r3, #48	@ 0x30
 800970c:	d819      	bhi.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800970e:	2b20      	cmp	r3, #32
 8009710:	d00c      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009712:	2b20      	cmp	r3, #32
 8009714:	d815      	bhi.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009716:	2b00      	cmp	r3, #0
 8009718:	d019      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800971a:	2b10      	cmp	r3, #16
 800971c:	d111      	bne.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800971e:	4baa      	ldr	r3, [pc, #680]	@ (80099c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009722:	4aa9      	ldr	r2, [pc, #676]	@ (80099c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009728:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800972a:	e011      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800972c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009730:	3308      	adds	r3, #8
 8009732:	2102      	movs	r1, #2
 8009734:	4618      	mov	r0, r3
 8009736:	f002 f8cd 	bl	800b8d4 <RCCEx_PLL2_Config>
 800973a:	4603      	mov	r3, r0
 800973c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009740:	e006      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009748:	e002      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800974a:	bf00      	nop
 800974c:	e000      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800974e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009750:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10a      	bne.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009758:	4b9b      	ldr	r3, [pc, #620]	@ (80099c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800975a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800975c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009766:	4a98      	ldr	r2, [pc, #608]	@ (80099c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009768:	430b      	orrs	r3, r1
 800976a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800976c:	e003      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800976e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009772:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800977a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009782:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009786:	2300      	movs	r3, #0
 8009788:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800978c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009790:	460b      	mov	r3, r1
 8009792:	4313      	orrs	r3, r2
 8009794:	d051      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800979a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800979c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097a0:	d035      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80097a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097a6:	d82e      	bhi.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80097a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80097ac:	d031      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80097ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80097b2:	d828      	bhi.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80097b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097b8:	d01a      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80097ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097be:	d822      	bhi.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d003      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80097c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097c8:	d007      	beq.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80097ca:	e01c      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097cc:	4b7e      	ldr	r3, [pc, #504]	@ (80099c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d0:	4a7d      	ldr	r2, [pc, #500]	@ (80099c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097d8:	e01c      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097de:	3308      	adds	r3, #8
 80097e0:	2100      	movs	r1, #0
 80097e2:	4618      	mov	r0, r3
 80097e4:	f002 f876 	bl	800b8d4 <RCCEx_PLL2_Config>
 80097e8:	4603      	mov	r3, r0
 80097ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097ee:	e011      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f4:	3328      	adds	r3, #40	@ 0x28
 80097f6:	2100      	movs	r1, #0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f002 f91d 	bl	800ba38 <RCCEx_PLL3_Config>
 80097fe:	4603      	mov	r3, r0
 8009800:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009804:	e006      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800980c:	e002      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800980e:	bf00      	nop
 8009810:	e000      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009814:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10a      	bne.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800981c:	4b6a      	ldr	r3, [pc, #424]	@ (80099c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800981e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009820:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800982a:	4a67      	ldr	r2, [pc, #412]	@ (80099c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800982c:	430b      	orrs	r3, r1
 800982e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009830:	e003      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009832:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009836:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800983a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800983e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009842:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009846:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800984a:	2300      	movs	r3, #0
 800984c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009850:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009854:	460b      	mov	r3, r1
 8009856:	4313      	orrs	r3, r2
 8009858:	d053      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800985a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800985e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009860:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009864:	d033      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009866:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800986a:	d82c      	bhi.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800986c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009870:	d02f      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009872:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009876:	d826      	bhi.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009878:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800987c:	d02b      	beq.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800987e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009882:	d820      	bhi.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009884:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009888:	d012      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800988a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800988e:	d81a      	bhi.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009890:	2b00      	cmp	r3, #0
 8009892:	d022      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009898:	d115      	bne.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800989a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800989e:	3308      	adds	r3, #8
 80098a0:	2101      	movs	r1, #1
 80098a2:	4618      	mov	r0, r3
 80098a4:	f002 f816 	bl	800b8d4 <RCCEx_PLL2_Config>
 80098a8:	4603      	mov	r3, r0
 80098aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80098ae:	e015      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098b4:	3328      	adds	r3, #40	@ 0x28
 80098b6:	2101      	movs	r1, #1
 80098b8:	4618      	mov	r0, r3
 80098ba:	f002 f8bd 	bl	800ba38 <RCCEx_PLL3_Config>
 80098be:	4603      	mov	r3, r0
 80098c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80098c4:	e00a      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098cc:	e006      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80098ce:	bf00      	nop
 80098d0:	e004      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80098d2:	bf00      	nop
 80098d4:	e002      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80098d6:	bf00      	nop
 80098d8:	e000      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80098da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d10a      	bne.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80098e4:	4b38      	ldr	r3, [pc, #224]	@ (80099c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098e8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80098ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098f2:	4a35      	ldr	r2, [pc, #212]	@ (80099c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098f4:	430b      	orrs	r3, r1
 80098f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80098f8:	e003      	b.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800990e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009912:	2300      	movs	r3, #0
 8009914:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009918:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800991c:	460b      	mov	r3, r1
 800991e:	4313      	orrs	r3, r2
 8009920:	d058      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009926:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800992a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800992e:	d033      	beq.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009930:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009934:	d82c      	bhi.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009936:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800993a:	d02f      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800993c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009940:	d826      	bhi.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009942:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009946:	d02b      	beq.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009948:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800994c:	d820      	bhi.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800994e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009952:	d012      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009958:	d81a      	bhi.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800995a:	2b00      	cmp	r3, #0
 800995c:	d022      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800995e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009962:	d115      	bne.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009968:	3308      	adds	r3, #8
 800996a:	2101      	movs	r1, #1
 800996c:	4618      	mov	r0, r3
 800996e:	f001 ffb1 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009972:	4603      	mov	r3, r0
 8009974:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009978:	e015      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800997a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800997e:	3328      	adds	r3, #40	@ 0x28
 8009980:	2101      	movs	r1, #1
 8009982:	4618      	mov	r0, r3
 8009984:	f002 f858 	bl	800ba38 <RCCEx_PLL3_Config>
 8009988:	4603      	mov	r3, r0
 800998a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800998e:	e00a      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009996:	e006      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009998:	bf00      	nop
 800999a:	e004      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800999c:	bf00      	nop
 800999e:	e002      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80099a0:	bf00      	nop
 80099a2:	e000      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80099a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10e      	bne.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80099ae:	4b06      	ldr	r3, [pc, #24]	@ (80099c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099b2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80099b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80099be:	4a02      	ldr	r2, [pc, #8]	@ (80099c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80099c0:	430b      	orrs	r3, r1
 80099c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80099c4:	e006      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80099c6:	bf00      	nop
 80099c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80099d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099dc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80099e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80099e4:	2300      	movs	r3, #0
 80099e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80099ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80099ee:	460b      	mov	r3, r1
 80099f0:	4313      	orrs	r3, r2
 80099f2:	d037      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80099f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099fe:	d00e      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009a00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a04:	d816      	bhi.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d018      	beq.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a0e:	d111      	bne.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a10:	4bc4      	ldr	r3, [pc, #784]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a14:	4ac3      	ldr	r2, [pc, #780]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009a1c:	e00f      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a22:	3308      	adds	r3, #8
 8009a24:	2101      	movs	r1, #1
 8009a26:	4618      	mov	r0, r3
 8009a28:	f001 ff54 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009a32:	e004      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a3a:	e000      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10a      	bne.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009a46:	4bb7      	ldr	r3, [pc, #732]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a4a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a54:	4ab3      	ldr	r2, [pc, #716]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a56:	430b      	orrs	r3, r1
 8009a58:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a5a:	e003      	b.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009a70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a74:	2300      	movs	r3, #0
 8009a76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009a7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009a7e:	460b      	mov	r3, r1
 8009a80:	4313      	orrs	r3, r2
 8009a82:	d039      	beq.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a8a:	2b03      	cmp	r3, #3
 8009a8c:	d81c      	bhi.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a94 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a94:	08009ad1 	.word	0x08009ad1
 8009a98:	08009aa5 	.word	0x08009aa5
 8009a9c:	08009ab3 	.word	0x08009ab3
 8009aa0:	08009ad1 	.word	0x08009ad1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009aa4:	4b9f      	ldr	r3, [pc, #636]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa8:	4a9e      	ldr	r2, [pc, #632]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009ab0:	e00f      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab6:	3308      	adds	r3, #8
 8009ab8:	2102      	movs	r1, #2
 8009aba:	4618      	mov	r0, r3
 8009abc:	f001 ff0a 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009ac6:	e004      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009ace:	e000      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ad2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10a      	bne.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009ada:	4b92      	ldr	r3, [pc, #584]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ade:	f023 0103 	bic.w	r1, r3, #3
 8009ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ae8:	4a8e      	ldr	r2, [pc, #568]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009aea:	430b      	orrs	r3, r1
 8009aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009aee:	e003      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009af4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b00:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009b04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b08:	2300      	movs	r3, #0
 8009b0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009b12:	460b      	mov	r3, r1
 8009b14:	4313      	orrs	r3, r2
 8009b16:	f000 8099 	beq.w	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b1a:	4b83      	ldr	r3, [pc, #524]	@ (8009d28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a82      	ldr	r2, [pc, #520]	@ (8009d28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b26:	f7f8 ff47 	bl	80029b8 <HAL_GetTick>
 8009b2a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b2e:	e00b      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b30:	f7f8 ff42 	bl	80029b8 <HAL_GetTick>
 8009b34:	4602      	mov	r2, r0
 8009b36:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	2b64      	cmp	r3, #100	@ 0x64
 8009b3e:	d903      	bls.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009b40:	2303      	movs	r3, #3
 8009b42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b46:	e005      	b.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b48:	4b77      	ldr	r3, [pc, #476]	@ (8009d28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d0ed      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009b54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d173      	bne.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009b5c:	4b71      	ldr	r3, [pc, #452]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009b68:	4053      	eors	r3, r2
 8009b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d015      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b72:	4b6c      	ldr	r3, [pc, #432]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b7a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b7e:	4b69      	ldr	r3, [pc, #420]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b82:	4a68      	ldr	r2, [pc, #416]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b88:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009b8a:	4b66      	ldr	r3, [pc, #408]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b8e:	4a65      	ldr	r2, [pc, #404]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b94:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009b96:	4a63      	ldr	r2, [pc, #396]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b9c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009baa:	d118      	bne.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bac:	f7f8 ff04 	bl	80029b8 <HAL_GetTick>
 8009bb0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009bb4:	e00d      	b.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bb6:	f7f8 feff 	bl	80029b8 <HAL_GetTick>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009bc0:	1ad2      	subs	r2, r2, r3
 8009bc2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d903      	bls.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009bd0:	e005      	b.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009bd2:	4b54      	ldr	r3, [pc, #336]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bd6:	f003 0302 	and.w	r3, r3, #2
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d0eb      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009bde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d129      	bne.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bf6:	d10e      	bne.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009bf8:	4b4a      	ldr	r3, [pc, #296]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009c08:	091a      	lsrs	r2, r3, #4
 8009c0a:	4b48      	ldr	r3, [pc, #288]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	4a45      	ldr	r2, [pc, #276]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c10:	430b      	orrs	r3, r1
 8009c12:	6113      	str	r3, [r2, #16]
 8009c14:	e005      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009c16:	4b43      	ldr	r3, [pc, #268]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	4a42      	ldr	r2, [pc, #264]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009c20:	6113      	str	r3, [r2, #16]
 8009c22:	4b40      	ldr	r3, [pc, #256]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c24:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c32:	4a3c      	ldr	r2, [pc, #240]	@ (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009c34:	430b      	orrs	r3, r1
 8009c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8009c38:	e008      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8009c42:	e003      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c54:	f002 0301 	and.w	r3, r2, #1
 8009c58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009c62:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009c66:	460b      	mov	r3, r1
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	f000 808f 	beq.w	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c74:	2b28      	cmp	r3, #40	@ 0x28
 8009c76:	d871      	bhi.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009c78:	a201      	add	r2, pc, #4	@ (adr r2, 8009c80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7e:	bf00      	nop
 8009c80:	08009d65 	.word	0x08009d65
 8009c84:	08009d5d 	.word	0x08009d5d
 8009c88:	08009d5d 	.word	0x08009d5d
 8009c8c:	08009d5d 	.word	0x08009d5d
 8009c90:	08009d5d 	.word	0x08009d5d
 8009c94:	08009d5d 	.word	0x08009d5d
 8009c98:	08009d5d 	.word	0x08009d5d
 8009c9c:	08009d5d 	.word	0x08009d5d
 8009ca0:	08009d31 	.word	0x08009d31
 8009ca4:	08009d5d 	.word	0x08009d5d
 8009ca8:	08009d5d 	.word	0x08009d5d
 8009cac:	08009d5d 	.word	0x08009d5d
 8009cb0:	08009d5d 	.word	0x08009d5d
 8009cb4:	08009d5d 	.word	0x08009d5d
 8009cb8:	08009d5d 	.word	0x08009d5d
 8009cbc:	08009d5d 	.word	0x08009d5d
 8009cc0:	08009d47 	.word	0x08009d47
 8009cc4:	08009d5d 	.word	0x08009d5d
 8009cc8:	08009d5d 	.word	0x08009d5d
 8009ccc:	08009d5d 	.word	0x08009d5d
 8009cd0:	08009d5d 	.word	0x08009d5d
 8009cd4:	08009d5d 	.word	0x08009d5d
 8009cd8:	08009d5d 	.word	0x08009d5d
 8009cdc:	08009d5d 	.word	0x08009d5d
 8009ce0:	08009d65 	.word	0x08009d65
 8009ce4:	08009d5d 	.word	0x08009d5d
 8009ce8:	08009d5d 	.word	0x08009d5d
 8009cec:	08009d5d 	.word	0x08009d5d
 8009cf0:	08009d5d 	.word	0x08009d5d
 8009cf4:	08009d5d 	.word	0x08009d5d
 8009cf8:	08009d5d 	.word	0x08009d5d
 8009cfc:	08009d5d 	.word	0x08009d5d
 8009d00:	08009d65 	.word	0x08009d65
 8009d04:	08009d5d 	.word	0x08009d5d
 8009d08:	08009d5d 	.word	0x08009d5d
 8009d0c:	08009d5d 	.word	0x08009d5d
 8009d10:	08009d5d 	.word	0x08009d5d
 8009d14:	08009d5d 	.word	0x08009d5d
 8009d18:	08009d5d 	.word	0x08009d5d
 8009d1c:	08009d5d 	.word	0x08009d5d
 8009d20:	08009d65 	.word	0x08009d65
 8009d24:	58024400 	.word	0x58024400
 8009d28:	58024800 	.word	0x58024800
 8009d2c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d34:	3308      	adds	r3, #8
 8009d36:	2101      	movs	r1, #1
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f001 fdcb 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d44:	e00f      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d4a:	3328      	adds	r3, #40	@ 0x28
 8009d4c:	2101      	movs	r1, #1
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f001 fe72 	bl	800ba38 <RCCEx_PLL3_Config>
 8009d54:	4603      	mov	r3, r0
 8009d56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d5a:	e004      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d62:	e000      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10a      	bne.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009d6e:	4bbf      	ldr	r3, [pc, #764]	@ (800a06c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d72:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d7c:	4abb      	ldr	r2, [pc, #748]	@ (800a06c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009d7e:	430b      	orrs	r3, r1
 8009d80:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d82:	e003      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d94:	f002 0302 	and.w	r3, r2, #2
 8009d98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009da2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009da6:	460b      	mov	r3, r1
 8009da8:	4313      	orrs	r3, r2
 8009daa:	d041      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009db2:	2b05      	cmp	r3, #5
 8009db4:	d824      	bhi.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009db6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dbc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbc:	08009e09 	.word	0x08009e09
 8009dc0:	08009dd5 	.word	0x08009dd5
 8009dc4:	08009deb 	.word	0x08009deb
 8009dc8:	08009e09 	.word	0x08009e09
 8009dcc:	08009e09 	.word	0x08009e09
 8009dd0:	08009e09 	.word	0x08009e09
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dd8:	3308      	adds	r3, #8
 8009dda:	2101      	movs	r1, #1
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f001 fd79 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009de2:	4603      	mov	r3, r0
 8009de4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009de8:	e00f      	b.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dee:	3328      	adds	r3, #40	@ 0x28
 8009df0:	2101      	movs	r1, #1
 8009df2:	4618      	mov	r0, r3
 8009df4:	f001 fe20 	bl	800ba38 <RCCEx_PLL3_Config>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009dfe:	e004      	b.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e06:	e000      	b.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10a      	bne.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009e12:	4b96      	ldr	r3, [pc, #600]	@ (800a06c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e16:	f023 0107 	bic.w	r1, r3, #7
 8009e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e20:	4a92      	ldr	r2, [pc, #584]	@ (800a06c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009e22:	430b      	orrs	r3, r1
 8009e24:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e26:	e003      	b.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	f002 0304 	and.w	r3, r2, #4
 8009e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e40:	2300      	movs	r3, #0
 8009e42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009e46:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	d044      	beq.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e58:	2b05      	cmp	r3, #5
 8009e5a:	d825      	bhi.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e64 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e62:	bf00      	nop
 8009e64:	08009eb1 	.word	0x08009eb1
 8009e68:	08009e7d 	.word	0x08009e7d
 8009e6c:	08009e93 	.word	0x08009e93
 8009e70:	08009eb1 	.word	0x08009eb1
 8009e74:	08009eb1 	.word	0x08009eb1
 8009e78:	08009eb1 	.word	0x08009eb1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e80:	3308      	adds	r3, #8
 8009e82:	2101      	movs	r1, #1
 8009e84:	4618      	mov	r0, r3
 8009e86:	f001 fd25 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009e90:	e00f      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e96:	3328      	adds	r3, #40	@ 0x28
 8009e98:	2101      	movs	r1, #1
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f001 fdcc 	bl	800ba38 <RCCEx_PLL3_Config>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009ea6:	e004      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009eae:	e000      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10b      	bne.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009eba:	4b6c      	ldr	r3, [pc, #432]	@ (800a06c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ebe:	f023 0107 	bic.w	r1, r3, #7
 8009ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009eca:	4a68      	ldr	r2, [pc, #416]	@ (800a06c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009ecc:	430b      	orrs	r3, r1
 8009ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ed0:	e003      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ed6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee2:	f002 0320 	and.w	r3, r2, #32
 8009ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009eea:	2300      	movs	r3, #0
 8009eec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009ef0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	d055      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f06:	d033      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f0c:	d82c      	bhi.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f12:	d02f      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f18:	d826      	bhi.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009f1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009f1e:	d02b      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009f20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009f24:	d820      	bhi.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009f26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f2a:	d012      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009f2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f30:	d81a      	bhi.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d022      	beq.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009f36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f3a:	d115      	bne.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f40:	3308      	adds	r3, #8
 8009f42:	2100      	movs	r1, #0
 8009f44:	4618      	mov	r0, r3
 8009f46:	f001 fcc5 	bl	800b8d4 <RCCEx_PLL2_Config>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f50:	e015      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f56:	3328      	adds	r3, #40	@ 0x28
 8009f58:	2102      	movs	r1, #2
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f001 fd6c 	bl	800ba38 <RCCEx_PLL3_Config>
 8009f60:	4603      	mov	r3, r0
 8009f62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f66:	e00a      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f6e:	e006      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009f70:	bf00      	nop
 8009f72:	e004      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009f74:	bf00      	nop
 8009f76:	e002      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009f78:	bf00      	nop
 8009f7a:	e000      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10b      	bne.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f86:	4b39      	ldr	r3, [pc, #228]	@ (800a06c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f8a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f96:	4a35      	ldr	r2, [pc, #212]	@ (800a06c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f98:	430b      	orrs	r3, r1
 8009f9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f9c:	e003      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fa2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009fb2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009fbc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	d058      	beq.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009fce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009fd2:	d033      	beq.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009fd4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009fd8:	d82c      	bhi.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fde:	d02f      	beq.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fe4:	d826      	bhi.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009fe6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009fea:	d02b      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009fec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ff0:	d820      	bhi.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009ff2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ff6:	d012      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ffc:	d81a      	bhi.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d022      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a006:	d115      	bne.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a00c:	3308      	adds	r3, #8
 800a00e:	2100      	movs	r1, #0
 800a010:	4618      	mov	r0, r3
 800a012:	f001 fc5f 	bl	800b8d4 <RCCEx_PLL2_Config>
 800a016:	4603      	mov	r3, r0
 800a018:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a01c:	e015      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a022:	3328      	adds	r3, #40	@ 0x28
 800a024:	2102      	movs	r1, #2
 800a026:	4618      	mov	r0, r3
 800a028:	f001 fd06 	bl	800ba38 <RCCEx_PLL3_Config>
 800a02c:	4603      	mov	r3, r0
 800a02e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a032:	e00a      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a03a:	e006      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a03c:	bf00      	nop
 800a03e:	e004      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a040:	bf00      	nop
 800a042:	e002      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a044:	bf00      	nop
 800a046:	e000      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a04a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10e      	bne.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a052:	4b06      	ldr	r3, [pc, #24]	@ (800a06c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a056:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a05a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a05e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a062:	4a02      	ldr	r2, [pc, #8]	@ (800a06c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a064:	430b      	orrs	r3, r1
 800a066:	6593      	str	r3, [r2, #88]	@ 0x58
 800a068:	e006      	b.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a06a:	bf00      	nop
 800a06c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a070:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a074:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a080:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a084:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a088:	2300      	movs	r3, #0
 800a08a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a08e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a092:	460b      	mov	r3, r1
 800a094:	4313      	orrs	r3, r2
 800a096:	d055      	beq.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a09c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a0a0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a0a4:	d033      	beq.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a0a6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a0aa:	d82c      	bhi.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a0ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0b0:	d02f      	beq.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a0b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0b6:	d826      	bhi.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a0b8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a0bc:	d02b      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a0be:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a0c2:	d820      	bhi.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a0c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0c8:	d012      	beq.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a0ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0ce:	d81a      	bhi.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d022      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a0d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0d8:	d115      	bne.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0de:	3308      	adds	r3, #8
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f001 fbf6 	bl	800b8d4 <RCCEx_PLL2_Config>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a0ee:	e015      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0f4:	3328      	adds	r3, #40	@ 0x28
 800a0f6:	2102      	movs	r1, #2
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f001 fc9d 	bl	800ba38 <RCCEx_PLL3_Config>
 800a0fe:	4603      	mov	r3, r0
 800a100:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a104:	e00a      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a10c:	e006      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a10e:	bf00      	nop
 800a110:	e004      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a112:	bf00      	nop
 800a114:	e002      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a116:	bf00      	nop
 800a118:	e000      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a11a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a11c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10b      	bne.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a124:	4ba0      	ldr	r3, [pc, #640]	@ (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a128:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a130:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a134:	4a9c      	ldr	r2, [pc, #624]	@ (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a136:	430b      	orrs	r3, r1
 800a138:	6593      	str	r3, [r2, #88]	@ 0x58
 800a13a:	e003      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a13c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a140:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14c:	f002 0308 	and.w	r3, r2, #8
 800a150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a154:	2300      	movs	r3, #0
 800a156:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a15a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a15e:	460b      	mov	r3, r1
 800a160:	4313      	orrs	r3, r2
 800a162:	d01e      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a16c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a170:	d10c      	bne.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a176:	3328      	adds	r3, #40	@ 0x28
 800a178:	2102      	movs	r1, #2
 800a17a:	4618      	mov	r0, r3
 800a17c:	f001 fc5c 	bl	800ba38 <RCCEx_PLL3_Config>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d002      	beq.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a18c:	4b86      	ldr	r3, [pc, #536]	@ (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a18e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a190:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a198:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a19c:	4a82      	ldr	r2, [pc, #520]	@ (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a19e:	430b      	orrs	r3, r1
 800a1a0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1aa:	f002 0310 	and.w	r3, r2, #16
 800a1ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a1b8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a1bc:	460b      	mov	r3, r1
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	d01e      	beq.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a1c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1ce:	d10c      	bne.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1d4:	3328      	adds	r3, #40	@ 0x28
 800a1d6:	2102      	movs	r1, #2
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f001 fc2d 	bl	800ba38 <RCCEx_PLL3_Config>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d002      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a1ea:	4b6f      	ldr	r3, [pc, #444]	@ (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a1ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1fa:	4a6b      	ldr	r2, [pc, #428]	@ (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a1fc:	430b      	orrs	r3, r1
 800a1fe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a208:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a20c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a20e:	2300      	movs	r3, #0
 800a210:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a212:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a216:	460b      	mov	r3, r1
 800a218:	4313      	orrs	r3, r2
 800a21a:	d03e      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a21c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a220:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a224:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a228:	d022      	beq.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a22a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a22e:	d81b      	bhi.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a230:	2b00      	cmp	r3, #0
 800a232:	d003      	beq.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a238:	d00b      	beq.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a23a:	e015      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a240:	3308      	adds	r3, #8
 800a242:	2100      	movs	r1, #0
 800a244:	4618      	mov	r0, r3
 800a246:	f001 fb45 	bl	800b8d4 <RCCEx_PLL2_Config>
 800a24a:	4603      	mov	r3, r0
 800a24c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a250:	e00f      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a256:	3328      	adds	r3, #40	@ 0x28
 800a258:	2102      	movs	r1, #2
 800a25a:	4618      	mov	r0, r3
 800a25c:	f001 fbec 	bl	800ba38 <RCCEx_PLL3_Config>
 800a260:	4603      	mov	r3, r0
 800a262:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a266:	e004      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a26e:	e000      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a270:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a272:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10b      	bne.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a27a:	4b4b      	ldr	r3, [pc, #300]	@ (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a27c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a27e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a286:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a28a:	4a47      	ldr	r2, [pc, #284]	@ (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a28c:	430b      	orrs	r3, r1
 800a28e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a290:	e003      	b.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a292:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a296:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a2a6:	673b      	str	r3, [r7, #112]	@ 0x70
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	677b      	str	r3, [r7, #116]	@ 0x74
 800a2ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	d03b      	beq.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a2b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a2c2:	d01f      	beq.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a2c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a2c8:	d818      	bhi.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a2ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2ce:	d003      	beq.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a2d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2d4:	d007      	beq.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a2d6:	e011      	b.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2d8:	4b33      	ldr	r3, [pc, #204]	@ (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2dc:	4a32      	ldr	r2, [pc, #200]	@ (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a2de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a2e4:	e00f      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ea:	3328      	adds	r3, #40	@ 0x28
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f001 fba2 	bl	800ba38 <RCCEx_PLL3_Config>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a2fa:	e004      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a302:	e000      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a304:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a306:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d10b      	bne.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a30e:	4b26      	ldr	r3, [pc, #152]	@ (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a312:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a31a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a31e:	4a22      	ldr	r2, [pc, #136]	@ (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a320:	430b      	orrs	r3, r1
 800a322:	6553      	str	r3, [r2, #84]	@ 0x54
 800a324:	e003      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a326:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a32a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a336:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a33a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a33c:	2300      	movs	r3, #0
 800a33e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a340:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a344:	460b      	mov	r3, r1
 800a346:	4313      	orrs	r3, r2
 800a348:	d034      	beq.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a34a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a34e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a350:	2b00      	cmp	r3, #0
 800a352:	d003      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a358:	d007      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a35a:	e011      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a35c:	4b12      	ldr	r3, [pc, #72]	@ (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a35e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a360:	4a11      	ldr	r2, [pc, #68]	@ (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a368:	e00e      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a36e:	3308      	adds	r3, #8
 800a370:	2102      	movs	r1, #2
 800a372:	4618      	mov	r0, r3
 800a374:	f001 faae 	bl	800b8d4 <RCCEx_PLL2_Config>
 800a378:	4603      	mov	r3, r0
 800a37a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a37e:	e003      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a380:	2301      	movs	r3, #1
 800a382:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a386:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a388:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10d      	bne.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a390:	4b05      	ldr	r3, [pc, #20]	@ (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a394:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a39c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a39e:	4a02      	ldr	r2, [pc, #8]	@ (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a3a0:	430b      	orrs	r3, r1
 800a3a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a3a4:	e006      	b.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a3a6:	bf00      	nop
 800a3a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a3b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a3c0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3c6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	d00c      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3d4:	3328      	adds	r3, #40	@ 0x28
 800a3d6:	2102      	movs	r1, #2
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f001 fb2d 	bl	800ba38 <RCCEx_PLL3_Config>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d002      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a3ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a3f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3fc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a400:	460b      	mov	r3, r1
 800a402:	4313      	orrs	r3, r2
 800a404:	d036      	beq.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a40a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a40c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a410:	d018      	beq.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a412:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a416:	d811      	bhi.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a41c:	d014      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a41e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a422:	d80b      	bhi.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a424:	2b00      	cmp	r3, #0
 800a426:	d011      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a42c:	d106      	bne.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a42e:	4bb7      	ldr	r3, [pc, #732]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a432:	4ab6      	ldr	r2, [pc, #728]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a434:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a438:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a43a:	e008      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a442:	e004      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a444:	bf00      	nop
 800a446:	e002      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a448:	bf00      	nop
 800a44a:	e000      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a44c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a44e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10a      	bne.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a456:	4bad      	ldr	r3, [pc, #692]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a45a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a462:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a464:	4aa9      	ldr	r2, [pc, #676]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a466:	430b      	orrs	r3, r1
 800a468:	6553      	str	r3, [r2, #84]	@ 0x54
 800a46a:	e003      	b.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a46c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a470:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a480:	653b      	str	r3, [r7, #80]	@ 0x50
 800a482:	2300      	movs	r3, #0
 800a484:	657b      	str	r3, [r7, #84]	@ 0x54
 800a486:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a48a:	460b      	mov	r3, r1
 800a48c:	4313      	orrs	r3, r2
 800a48e:	d009      	beq.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a490:	4b9e      	ldr	r3, [pc, #632]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a494:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a49c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a49e:	4a9b      	ldr	r2, [pc, #620]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a4a0:	430b      	orrs	r3, r1
 800a4a2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a4b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	d009      	beq.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a4c0:	4b92      	ldr	r3, [pc, #584]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a4c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4c4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4ce:	4a8f      	ldr	r2, [pc, #572]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a4d0:	430b      	orrs	r3, r1
 800a4d2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4dc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a4e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4e6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	d00e      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4f0:	4b86      	ldr	r3, [pc, #536]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	4a85      	ldr	r2, [pc, #532]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a4f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a4fa:	6113      	str	r3, [r2, #16]
 800a4fc:	4b83      	ldr	r3, [pc, #524]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a4fe:	6919      	ldr	r1, [r3, #16]
 800a500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a504:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a508:	4a80      	ldr	r2, [pc, #512]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a50a:	430b      	orrs	r3, r1
 800a50c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a50e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a516:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a51a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a51c:	2300      	movs	r3, #0
 800a51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a520:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a524:	460b      	mov	r3, r1
 800a526:	4313      	orrs	r3, r2
 800a528:	d009      	beq.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a52a:	4b78      	ldr	r3, [pc, #480]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a52c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a52e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a538:	4a74      	ldr	r2, [pc, #464]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a53a:	430b      	orrs	r3, r1
 800a53c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a53e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a546:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a54a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a54c:	2300      	movs	r3, #0
 800a54e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a550:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a554:	460b      	mov	r3, r1
 800a556:	4313      	orrs	r3, r2
 800a558:	d00a      	beq.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a55a:	4b6c      	ldr	r3, [pc, #432]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a55c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a55e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a56a:	4a68      	ldr	r2, [pc, #416]	@ (800a70c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a56c:	430b      	orrs	r3, r1
 800a56e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	2100      	movs	r1, #0
 800a57a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a57c:	f003 0301 	and.w	r3, r3, #1
 800a580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a582:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a586:	460b      	mov	r3, r1
 800a588:	4313      	orrs	r3, r2
 800a58a:	d011      	beq.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a590:	3308      	adds	r3, #8
 800a592:	2100      	movs	r1, #0
 800a594:	4618      	mov	r0, r3
 800a596:	f001 f99d 	bl	800b8d4 <RCCEx_PLL2_Config>
 800a59a:	4603      	mov	r3, r0
 800a59c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a5a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d003      	beq.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	6239      	str	r1, [r7, #32]
 800a5bc:	f003 0302 	and.w	r3, r3, #2
 800a5c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5c2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	d011      	beq.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5d0:	3308      	adds	r3, #8
 800a5d2:	2101      	movs	r1, #1
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f001 f97d 	bl	800b8d4 <RCCEx_PLL2_Config>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a5e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d003      	beq.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	61b9      	str	r1, [r7, #24]
 800a5fc:	f003 0304 	and.w	r3, r3, #4
 800a600:	61fb      	str	r3, [r7, #28]
 800a602:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a606:	460b      	mov	r3, r1
 800a608:	4313      	orrs	r3, r2
 800a60a:	d011      	beq.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a60c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a610:	3308      	adds	r3, #8
 800a612:	2102      	movs	r1, #2
 800a614:	4618      	mov	r0, r3
 800a616:	f001 f95d 	bl	800b8d4 <RCCEx_PLL2_Config>
 800a61a:	4603      	mov	r3, r0
 800a61c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a620:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a624:	2b00      	cmp	r3, #0
 800a626:	d003      	beq.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a628:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a62c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a638:	2100      	movs	r1, #0
 800a63a:	6139      	str	r1, [r7, #16]
 800a63c:	f003 0308 	and.w	r3, r3, #8
 800a640:	617b      	str	r3, [r7, #20]
 800a642:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a646:	460b      	mov	r3, r1
 800a648:	4313      	orrs	r3, r2
 800a64a:	d011      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a650:	3328      	adds	r3, #40	@ 0x28
 800a652:	2100      	movs	r1, #0
 800a654:	4618      	mov	r0, r3
 800a656:	f001 f9ef 	bl	800ba38 <RCCEx_PLL3_Config>
 800a65a:	4603      	mov	r3, r0
 800a65c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800a660:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a664:	2b00      	cmp	r3, #0
 800a666:	d003      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a668:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a66c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	2100      	movs	r1, #0
 800a67a:	60b9      	str	r1, [r7, #8]
 800a67c:	f003 0310 	and.w	r3, r3, #16
 800a680:	60fb      	str	r3, [r7, #12]
 800a682:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a686:	460b      	mov	r3, r1
 800a688:	4313      	orrs	r3, r2
 800a68a:	d011      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a690:	3328      	adds	r3, #40	@ 0x28
 800a692:	2101      	movs	r1, #1
 800a694:	4618      	mov	r0, r3
 800a696:	f001 f9cf 	bl	800ba38 <RCCEx_PLL3_Config>
 800a69a:	4603      	mov	r3, r0
 800a69c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a6a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d003      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b8:	2100      	movs	r1, #0
 800a6ba:	6039      	str	r1, [r7, #0]
 800a6bc:	f003 0320 	and.w	r3, r3, #32
 800a6c0:	607b      	str	r3, [r7, #4]
 800a6c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	d011      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6d0:	3328      	adds	r3, #40	@ 0x28
 800a6d2:	2102      	movs	r1, #2
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f001 f9af 	bl	800ba38 <RCCEx_PLL3_Config>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a6e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d003      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a6f0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d101      	bne.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	e000      	b.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a704:	46bd      	mov	sp, r7
 800a706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a70a:	bf00      	nop
 800a70c:	58024400 	.word	0x58024400

0800a710 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b090      	sub	sp, #64	@ 0x40
 800a714:	af00      	add	r7, sp, #0
 800a716:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a71a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a71e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a722:	430b      	orrs	r3, r1
 800a724:	f040 8094 	bne.w	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a728:	4b9b      	ldr	r3, [pc, #620]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a72a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a72c:	f003 0307 	and.w	r3, r3, #7
 800a730:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a734:	2b04      	cmp	r3, #4
 800a736:	f200 8087 	bhi.w	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a73a:	a201      	add	r2, pc, #4	@ (adr r2, 800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a740:	0800a755 	.word	0x0800a755
 800a744:	0800a77d 	.word	0x0800a77d
 800a748:	0800a7a5 	.word	0x0800a7a5
 800a74c:	0800a841 	.word	0x0800a841
 800a750:	0800a7cd 	.word	0x0800a7cd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a754:	4b90      	ldr	r3, [pc, #576]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a75c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a760:	d108      	bne.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a766:	4618      	mov	r0, r3
 800a768:	f000 ff62 	bl	800b630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a770:	f000 bc93 	b.w	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a774:	2300      	movs	r3, #0
 800a776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a778:	f000 bc8f 	b.w	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a77c:	4b86      	ldr	r3, [pc, #536]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a784:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a788:	d108      	bne.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a78a:	f107 0318 	add.w	r3, r7, #24
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 fca6 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a798:	f000 bc7f 	b.w	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a79c:	2300      	movs	r3, #0
 800a79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7a0:	f000 bc7b 	b.w	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7a4:	4b7c      	ldr	r3, [pc, #496]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7b0:	d108      	bne.n	800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7b2:	f107 030c 	add.w	r3, r7, #12
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f000 fde6 	bl	800b388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7c0:	f000 bc6b 	b.w	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7c8:	f000 bc67 	b.w	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7cc:	4b72      	ldr	r3, [pc, #456]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a7ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7d4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7d6:	4b70      	ldr	r3, [pc, #448]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 0304 	and.w	r3, r3, #4
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	d10c      	bne.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a7e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d109      	bne.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7e8:	4b6b      	ldr	r3, [pc, #428]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	08db      	lsrs	r3, r3, #3
 800a7ee:	f003 0303 	and.w	r3, r3, #3
 800a7f2:	4a6a      	ldr	r2, [pc, #424]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a7f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a7f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7fa:	e01f      	b.n	800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7fc:	4b66      	ldr	r3, [pc, #408]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a804:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a808:	d106      	bne.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a80a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a80c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a810:	d102      	bne.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a812:	4b63      	ldr	r3, [pc, #396]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a814:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a816:	e011      	b.n	800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a818:	4b5f      	ldr	r3, [pc, #380]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a820:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a824:	d106      	bne.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a82c:	d102      	bne.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a82e:	4b5d      	ldr	r3, [pc, #372]	@ (800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a830:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a832:	e003      	b.n	800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a834:	2300      	movs	r3, #0
 800a836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a838:	f000 bc2f 	b.w	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a83c:	f000 bc2d 	b.w	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a840:	4b59      	ldr	r3, [pc, #356]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a844:	f000 bc29 	b.w	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a848:	2300      	movs	r3, #0
 800a84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a84c:	f000 bc25 	b.w	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a850:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a854:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a858:	430b      	orrs	r3, r1
 800a85a:	f040 80a7 	bne.w	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a85e:	4b4e      	ldr	r3, [pc, #312]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a862:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a866:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a86a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a86e:	d054      	beq.n	800a91a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a872:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a876:	f200 808b 	bhi.w	800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a880:	f000 8083 	beq.w	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a886:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a88a:	f200 8081 	bhi.w	800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a890:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a894:	d02f      	beq.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a898:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a89c:	d878      	bhi.n	800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d004      	beq.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a8aa:	d012      	beq.n	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a8ac:	e070      	b.n	800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8ae:	4b3a      	ldr	r3, [pc, #232]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8ba:	d107      	bne.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f000 feb5 	bl	800b630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8ca:	e3e6      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8d0:	e3e3      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8d2:	4b31      	ldr	r3, [pc, #196]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8de:	d107      	bne.n	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8e0:	f107 0318 	add.w	r3, r7, #24
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f000 fbfb 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8ea:	69bb      	ldr	r3, [r7, #24]
 800a8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8ee:	e3d4      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8f4:	e3d1      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8f6:	4b28      	ldr	r3, [pc, #160]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a902:	d107      	bne.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a904:	f107 030c 	add.w	r3, r7, #12
 800a908:	4618      	mov	r0, r3
 800a90a:	f000 fd3d 	bl	800b388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a912:	e3c2      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a914:	2300      	movs	r3, #0
 800a916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a918:	e3bf      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a91a:	4b1f      	ldr	r3, [pc, #124]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a91c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a91e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a922:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a924:	4b1c      	ldr	r3, [pc, #112]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 0304 	and.w	r3, r3, #4
 800a92c:	2b04      	cmp	r3, #4
 800a92e:	d10c      	bne.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a932:	2b00      	cmp	r3, #0
 800a934:	d109      	bne.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a936:	4b18      	ldr	r3, [pc, #96]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	08db      	lsrs	r3, r3, #3
 800a93c:	f003 0303 	and.w	r3, r3, #3
 800a940:	4a16      	ldr	r2, [pc, #88]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a942:	fa22 f303 	lsr.w	r3, r2, r3
 800a946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a948:	e01e      	b.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a94a:	4b13      	ldr	r3, [pc, #76]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a952:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a956:	d106      	bne.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a95a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a95e:	d102      	bne.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a960:	4b0f      	ldr	r3, [pc, #60]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a964:	e010      	b.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a966:	4b0c      	ldr	r3, [pc, #48]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a96e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a972:	d106      	bne.n	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a976:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a97a:	d102      	bne.n	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a97c:	4b09      	ldr	r3, [pc, #36]	@ (800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a980:	e002      	b.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a982:	2300      	movs	r3, #0
 800a984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a986:	e388      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a988:	e387      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a98a:	4b07      	ldr	r3, [pc, #28]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a98c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a98e:	e384      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a990:	2300      	movs	r3, #0
 800a992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a994:	e381      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a996:	bf00      	nop
 800a998:	58024400 	.word	0x58024400
 800a99c:	03d09000 	.word	0x03d09000
 800a9a0:	003d0900 	.word	0x003d0900
 800a9a4:	007a1200 	.word	0x007a1200
 800a9a8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a9ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9b0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a9b4:	430b      	orrs	r3, r1
 800a9b6:	f040 809c 	bne.w	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a9ba:	4b9e      	ldr	r3, [pc, #632]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a9bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9be:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a9c2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a9ca:	d054      	beq.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a9d2:	f200 808b 	bhi.w	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a9dc:	f000 8083 	beq.w	800aae6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a9e6:	f200 8081 	bhi.w	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9f0:	d02f      	beq.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9f8:	d878      	bhi.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d004      	beq.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800aa00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aa06:	d012      	beq.n	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800aa08:	e070      	b.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa0a:	4b8a      	ldr	r3, [pc, #552]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa16:	d107      	bne.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f000 fe07 	bl	800b630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa26:	e338      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa2c:	e335      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa2e:	4b81      	ldr	r3, [pc, #516]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa3a:	d107      	bne.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa3c:	f107 0318 	add.w	r3, r7, #24
 800aa40:	4618      	mov	r0, r3
 800aa42:	f000 fb4d 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa4a:	e326      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa50:	e323      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa52:	4b78      	ldr	r3, [pc, #480]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa5e:	d107      	bne.n	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa60:	f107 030c 	add.w	r3, r7, #12
 800aa64:	4618      	mov	r0, r3
 800aa66:	f000 fc8f 	bl	800b388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa6e:	e314      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa70:	2300      	movs	r3, #0
 800aa72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa74:	e311      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa76:	4b6f      	ldr	r3, [pc, #444]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa7e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa80:	4b6c      	ldr	r3, [pc, #432]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 0304 	and.w	r3, r3, #4
 800aa88:	2b04      	cmp	r3, #4
 800aa8a:	d10c      	bne.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800aa8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d109      	bne.n	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa92:	4b68      	ldr	r3, [pc, #416]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	08db      	lsrs	r3, r3, #3
 800aa98:	f003 0303 	and.w	r3, r3, #3
 800aa9c:	4a66      	ldr	r2, [pc, #408]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800aa9e:	fa22 f303 	lsr.w	r3, r2, r3
 800aaa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaa4:	e01e      	b.n	800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aaa6:	4b63      	ldr	r3, [pc, #396]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aab2:	d106      	bne.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800aab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aaba:	d102      	bne.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aabc:	4b5f      	ldr	r3, [pc, #380]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800aabe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aac0:	e010      	b.n	800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aac2:	4b5c      	ldr	r3, [pc, #368]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aace:	d106      	bne.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800aad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aad2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aad6:	d102      	bne.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aad8:	4b59      	ldr	r3, [pc, #356]	@ (800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aadc:	e002      	b.n	800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aade:	2300      	movs	r3, #0
 800aae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aae2:	e2da      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aae4:	e2d9      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aae6:	4b57      	ldr	r3, [pc, #348]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaea:	e2d6      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaf0:	e2d3      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aaf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaf6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800aafa:	430b      	orrs	r3, r1
 800aafc:	f040 80a7 	bne.w	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ab00:	4b4c      	ldr	r3, [pc, #304]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab04:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ab08:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab10:	d055      	beq.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800ab12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab18:	f200 8096 	bhi.w	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ab1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab22:	f000 8084 	beq.w	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800ab26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab2c:	f200 808c 	bhi.w	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ab30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab36:	d030      	beq.n	800ab9a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800ab38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab3e:	f200 8083 	bhi.w	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ab42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d004      	beq.n	800ab52 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800ab48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab4e:	d012      	beq.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800ab50:	e07a      	b.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab52:	4b38      	ldr	r3, [pc, #224]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab5e:	d107      	bne.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab64:	4618      	mov	r0, r3
 800ab66:	f000 fd63 	bl	800b630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab6e:	e294      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab70:	2300      	movs	r3, #0
 800ab72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab74:	e291      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab76:	4b2f      	ldr	r3, [pc, #188]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab82:	d107      	bne.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab84:	f107 0318 	add.w	r3, r7, #24
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f000 faa9 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab92:	e282      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab94:	2300      	movs	r3, #0
 800ab96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab98:	e27f      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab9a:	4b26      	ldr	r3, [pc, #152]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aba2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aba6:	d107      	bne.n	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aba8:	f107 030c 	add.w	r3, r7, #12
 800abac:	4618      	mov	r0, r3
 800abae:	f000 fbeb 	bl	800b388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abb6:	e270      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800abb8:	2300      	movs	r3, #0
 800abba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abbc:	e26d      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abbe:	4b1d      	ldr	r3, [pc, #116]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800abc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800abc6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abc8:	4b1a      	ldr	r3, [pc, #104]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0304 	and.w	r3, r3, #4
 800abd0:	2b04      	cmp	r3, #4
 800abd2:	d10c      	bne.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800abd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d109      	bne.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abda:	4b16      	ldr	r3, [pc, #88]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	08db      	lsrs	r3, r3, #3
 800abe0:	f003 0303 	and.w	r3, r3, #3
 800abe4:	4a14      	ldr	r2, [pc, #80]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800abe6:	fa22 f303 	lsr.w	r3, r2, r3
 800abea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abec:	e01e      	b.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abee:	4b11      	ldr	r3, [pc, #68]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abfa:	d106      	bne.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800abfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac02:	d102      	bne.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac04:	4b0d      	ldr	r3, [pc, #52]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ac06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac08:	e010      	b.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac0a:	4b0a      	ldr	r3, [pc, #40]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac16:	d106      	bne.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ac18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac1e:	d102      	bne.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac20:	4b07      	ldr	r3, [pc, #28]	@ (800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac24:	e002      	b.n	800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac26:	2300      	movs	r3, #0
 800ac28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ac2a:	e236      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ac2c:	e235      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac2e:	4b05      	ldr	r3, [pc, #20]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ac30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac32:	e232      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ac34:	58024400 	.word	0x58024400
 800ac38:	03d09000 	.word	0x03d09000
 800ac3c:	003d0900 	.word	0x003d0900
 800ac40:	007a1200 	.word	0x007a1200
 800ac44:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac4c:	e225      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ac4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac52:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ac56:	430b      	orrs	r3, r1
 800ac58:	f040 8085 	bne.w	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ac5c:	4b9c      	ldr	r3, [pc, #624]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ac5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac60:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ac64:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ac66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ac6c:	d06b      	beq.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800ac6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ac74:	d874      	bhi.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ac76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ac7c:	d056      	beq.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ac84:	d86c      	bhi.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ac86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ac8c:	d03b      	beq.n	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800ac8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ac94:	d864      	bhi.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ac96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac9c:	d021      	beq.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ac9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aca4:	d85c      	bhi.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d004      	beq.n	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800acac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acb2:	d004      	beq.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800acb4:	e054      	b.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800acb6:	f7fe fb75 	bl	80093a4 <HAL_RCC_GetPCLK1Freq>
 800acba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800acbc:	e1ed      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acbe:	4b84      	ldr	r3, [pc, #528]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800acca:	d107      	bne.n	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800accc:	f107 0318 	add.w	r3, r7, #24
 800acd0:	4618      	mov	r0, r3
 800acd2:	f000 fa05 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acda:	e1de      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acdc:	2300      	movs	r3, #0
 800acde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ace0:	e1db      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ace2:	4b7b      	ldr	r3, [pc, #492]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800acea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acee:	d107      	bne.n	800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acf0:	f107 030c 	add.w	r3, r7, #12
 800acf4:	4618      	mov	r0, r3
 800acf6:	f000 fb47 	bl	800b388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acfe:	e1cc      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad00:	2300      	movs	r3, #0
 800ad02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad04:	e1c9      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad06:	4b72      	ldr	r3, [pc, #456]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f003 0304 	and.w	r3, r3, #4
 800ad0e:	2b04      	cmp	r3, #4
 800ad10:	d109      	bne.n	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad12:	4b6f      	ldr	r3, [pc, #444]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	08db      	lsrs	r3, r3, #3
 800ad18:	f003 0303 	and.w	r3, r3, #3
 800ad1c:	4a6d      	ldr	r2, [pc, #436]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ad1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad24:	e1b9      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad26:	2300      	movs	r3, #0
 800ad28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad2a:	e1b6      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ad2c:	4b68      	ldr	r3, [pc, #416]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad38:	d102      	bne.n	800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800ad3a:	4b67      	ldr	r3, [pc, #412]	@ (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ad3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad3e:	e1ac      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad44:	e1a9      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad46:	4b62      	ldr	r3, [pc, #392]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad52:	d102      	bne.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800ad54:	4b61      	ldr	r3, [pc, #388]	@ (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ad56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad58:	e19f      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad5e:	e19c      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad64:	e199      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ad66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad6a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ad6e:	430b      	orrs	r3, r1
 800ad70:	d173      	bne.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ad72:	4b57      	ldr	r3, [pc, #348]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ad7a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad82:	d02f      	beq.n	800ade4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800ad84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad8a:	d863      	bhi.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d004      	beq.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800ad92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad98:	d012      	beq.n	800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800ad9a:	e05b      	b.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad9c:	4b4c      	ldr	r3, [pc, #304]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ada4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ada8:	d107      	bne.n	800adba <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adaa:	f107 0318 	add.w	r3, r7, #24
 800adae:	4618      	mov	r0, r3
 800adb0:	f000 f996 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adb8:	e16f      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adba:	2300      	movs	r3, #0
 800adbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adbe:	e16c      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800adc0:	4b43      	ldr	r3, [pc, #268]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800adc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adcc:	d107      	bne.n	800adde <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adce:	f107 030c 	add.w	r3, r7, #12
 800add2:	4618      	mov	r0, r3
 800add4:	f000 fad8 	bl	800b388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800addc:	e15d      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adde:	2300      	movs	r3, #0
 800ade0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ade2:	e15a      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ade4:	4b3a      	ldr	r3, [pc, #232]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ade6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ade8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800adec:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800adee:	4b38      	ldr	r3, [pc, #224]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 0304 	and.w	r3, r3, #4
 800adf6:	2b04      	cmp	r3, #4
 800adf8:	d10c      	bne.n	800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800adfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d109      	bne.n	800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae00:	4b33      	ldr	r3, [pc, #204]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	08db      	lsrs	r3, r3, #3
 800ae06:	f003 0303 	and.w	r3, r3, #3
 800ae0a:	4a32      	ldr	r2, [pc, #200]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ae0c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae12:	e01e      	b.n	800ae52 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae14:	4b2e      	ldr	r3, [pc, #184]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae20:	d106      	bne.n	800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800ae22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae28:	d102      	bne.n	800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae2a:	4b2b      	ldr	r3, [pc, #172]	@ (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ae2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae2e:	e010      	b.n	800ae52 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae30:	4b27      	ldr	r3, [pc, #156]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae3c:	d106      	bne.n	800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800ae3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae44:	d102      	bne.n	800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae46:	4b25      	ldr	r3, [pc, #148]	@ (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ae48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae4a:	e002      	b.n	800ae52 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ae50:	e123      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ae52:	e122      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ae54:	2300      	movs	r3, #0
 800ae56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae58:	e11f      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ae5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae5e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ae62:	430b      	orrs	r3, r1
 800ae64:	d13c      	bne.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ae66:	4b1a      	ldr	r3, [pc, #104]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae6e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ae70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d004      	beq.n	800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800ae76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae7c:	d012      	beq.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800ae7e:	e023      	b.n	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae80:	4b13      	ldr	r3, [pc, #76]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae8c:	d107      	bne.n	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae92:	4618      	mov	r0, r3
 800ae94:	f000 fbcc 	bl	800b630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae9c:	e0fd      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aea2:	e0fa      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aea4:	4b0a      	ldr	r3, [pc, #40]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aeac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aeb0:	d107      	bne.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeb2:	f107 0318 	add.w	r3, r7, #24
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f000 f912 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aebc:	6a3b      	ldr	r3, [r7, #32]
 800aebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aec0:	e0eb      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aec6:	e0e8      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aecc:	e0e5      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aece:	bf00      	nop
 800aed0:	58024400 	.word	0x58024400
 800aed4:	03d09000 	.word	0x03d09000
 800aed8:	003d0900 	.word	0x003d0900
 800aedc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800aee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aee4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800aee8:	430b      	orrs	r3, r1
 800aeea:	f040 8085 	bne.w	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800aeee:	4b6d      	ldr	r3, [pc, #436]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aef2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800aef6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aefa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aefe:	d06b      	beq.n	800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800af00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af06:	d874      	bhi.n	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800af08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af0e:	d056      	beq.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800af10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af16:	d86c      	bhi.n	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800af18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af1e:	d03b      	beq.n	800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800af20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af26:	d864      	bhi.n	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800af28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af2e:	d021      	beq.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800af30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af36:	d85c      	bhi.n	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800af38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d004      	beq.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800af3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af44:	d004      	beq.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800af46:	e054      	b.n	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800af48:	f000 f8b4 	bl	800b0b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800af4c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800af4e:	e0a4      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af50:	4b54      	ldr	r3, [pc, #336]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af5c:	d107      	bne.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af5e:	f107 0318 	add.w	r3, r7, #24
 800af62:	4618      	mov	r0, r3
 800af64:	f000 f8bc 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af6c:	e095      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af6e:	2300      	movs	r3, #0
 800af70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af72:	e092      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af74:	4b4b      	ldr	r3, [pc, #300]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af80:	d107      	bne.n	800af92 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af82:	f107 030c 	add.w	r3, r7, #12
 800af86:	4618      	mov	r0, r3
 800af88:	f000 f9fe 	bl	800b388 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af90:	e083      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af92:	2300      	movs	r3, #0
 800af94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af96:	e080      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af98:	4b42      	ldr	r3, [pc, #264]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 0304 	and.w	r3, r3, #4
 800afa0:	2b04      	cmp	r3, #4
 800afa2:	d109      	bne.n	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afa4:	4b3f      	ldr	r3, [pc, #252]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	08db      	lsrs	r3, r3, #3
 800afaa:	f003 0303 	and.w	r3, r3, #3
 800afae:	4a3e      	ldr	r2, [pc, #248]	@ (800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800afb0:	fa22 f303 	lsr.w	r3, r2, r3
 800afb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afb6:	e070      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afb8:	2300      	movs	r3, #0
 800afba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afbc:	e06d      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800afbe:	4b39      	ldr	r3, [pc, #228]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afca:	d102      	bne.n	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800afcc:	4b37      	ldr	r3, [pc, #220]	@ (800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800afce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afd0:	e063      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afd2:	2300      	movs	r3, #0
 800afd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afd6:	e060      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800afd8:	4b32      	ldr	r3, [pc, #200]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afe0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afe4:	d102      	bne.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800afe6:	4b32      	ldr	r3, [pc, #200]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800afe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afea:	e056      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800afec:	2300      	movs	r3, #0
 800afee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aff0:	e053      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800aff2:	2300      	movs	r3, #0
 800aff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aff6:	e050      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800affc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b000:	430b      	orrs	r3, r1
 800b002:	d148      	bne.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b004:	4b27      	ldr	r3, [pc, #156]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b008:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b00c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b010:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b014:	d02a      	beq.n	800b06c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b01c:	d838      	bhi.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b020:	2b00      	cmp	r3, #0
 800b022:	d004      	beq.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b026:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b02a:	d00d      	beq.n	800b048 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b02c:	e030      	b.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b02e:	4b1d      	ldr	r3, [pc, #116]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b036:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b03a:	d102      	bne.n	800b042 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b03c:	4b1c      	ldr	r3, [pc, #112]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b040:	e02b      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b042:	2300      	movs	r3, #0
 800b044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b046:	e028      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b048:	4b16      	ldr	r3, [pc, #88]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b050:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b054:	d107      	bne.n	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b05a:	4618      	mov	r0, r3
 800b05c:	f000 fae8 	bl	800b630 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b064:	e019      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b066:	2300      	movs	r3, #0
 800b068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b06a:	e016      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b06c:	4b0d      	ldr	r3, [pc, #52]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b074:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b078:	d107      	bne.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b07a:	f107 0318 	add.w	r3, r7, #24
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 f82e 	bl	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b088:	e007      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b08a:	2300      	movs	r3, #0
 800b08c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b08e:	e004      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b090:	2300      	movs	r3, #0
 800b092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b094:	e001      	b.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b096:	2300      	movs	r3, #0
 800b098:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b09a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3740      	adds	r7, #64	@ 0x40
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	58024400 	.word	0x58024400
 800b0a8:	03d09000 	.word	0x03d09000
 800b0ac:	003d0900 	.word	0x003d0900
 800b0b0:	007a1200 	.word	0x007a1200

0800b0b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b0b8:	f7fe f944 	bl	8009344 <HAL_RCC_GetHCLKFreq>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	4b06      	ldr	r3, [pc, #24]	@ (800b0d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b0c0:	6a1b      	ldr	r3, [r3, #32]
 800b0c2:	091b      	lsrs	r3, r3, #4
 800b0c4:	f003 0307 	and.w	r3, r3, #7
 800b0c8:	4904      	ldr	r1, [pc, #16]	@ (800b0dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b0ca:	5ccb      	ldrb	r3, [r1, r3]
 800b0cc:	f003 031f 	and.w	r3, r3, #31
 800b0d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	58024400 	.word	0x58024400
 800b0dc:	080104a0 	.word	0x080104a0

0800b0e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b089      	sub	sp, #36	@ 0x24
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0e8:	4ba1      	ldr	r3, [pc, #644]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ec:	f003 0303 	and.w	r3, r3, #3
 800b0f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b0f2:	4b9f      	ldr	r3, [pc, #636]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f6:	0b1b      	lsrs	r3, r3, #12
 800b0f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b0fe:	4b9c      	ldr	r3, [pc, #624]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b102:	091b      	lsrs	r3, r3, #4
 800b104:	f003 0301 	and.w	r3, r3, #1
 800b108:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b10a:	4b99      	ldr	r3, [pc, #612]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b10c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b10e:	08db      	lsrs	r3, r3, #3
 800b110:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b114:	693a      	ldr	r2, [r7, #16]
 800b116:	fb02 f303 	mul.w	r3, r2, r3
 800b11a:	ee07 3a90 	vmov	s15, r3
 800b11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b122:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f000 8111 	beq.w	800b350 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	2b02      	cmp	r3, #2
 800b132:	f000 8083 	beq.w	800b23c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	2b02      	cmp	r3, #2
 800b13a:	f200 80a1 	bhi.w	800b280 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d003      	beq.n	800b14c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	2b01      	cmp	r3, #1
 800b148:	d056      	beq.n	800b1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b14a:	e099      	b.n	800b280 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b14c:	4b88      	ldr	r3, [pc, #544]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f003 0320 	and.w	r3, r3, #32
 800b154:	2b00      	cmp	r3, #0
 800b156:	d02d      	beq.n	800b1b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b158:	4b85      	ldr	r3, [pc, #532]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	08db      	lsrs	r3, r3, #3
 800b15e:	f003 0303 	and.w	r3, r3, #3
 800b162:	4a84      	ldr	r2, [pc, #528]	@ (800b374 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b164:	fa22 f303 	lsr.w	r3, r2, r3
 800b168:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	ee07 3a90 	vmov	s15, r3
 800b170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	ee07 3a90 	vmov	s15, r3
 800b17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b182:	4b7b      	ldr	r3, [pc, #492]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b18a:	ee07 3a90 	vmov	s15, r3
 800b18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b192:	ed97 6a03 	vldr	s12, [r7, #12]
 800b196:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b1b2:	e087      	b.n	800b2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	ee07 3a90 	vmov	s15, r3
 800b1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b37c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b1c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1c6:	4b6a      	ldr	r3, [pc, #424]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ce:	ee07 3a90 	vmov	s15, r3
 800b1d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1f6:	e065      	b.n	800b2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	ee07 3a90 	vmov	s15, r3
 800b1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b202:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b380 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b20a:	4b59      	ldr	r3, [pc, #356]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b20c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b20e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b212:	ee07 3a90 	vmov	s15, r3
 800b216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b21a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b21e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b22a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b22e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b232:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b23a:	e043      	b.n	800b2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	ee07 3a90 	vmov	s15, r3
 800b242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b246:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b384 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b24a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b24e:	4b48      	ldr	r3, [pc, #288]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b256:	ee07 3a90 	vmov	s15, r3
 800b25a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b25e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b262:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b26a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b26e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b27a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b27e:	e021      	b.n	800b2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	ee07 3a90 	vmov	s15, r3
 800b286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b380 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b28e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b292:	4b37      	ldr	r3, [pc, #220]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b29a:	ee07 3a90 	vmov	s15, r3
 800b29e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b378 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b2c4:	4b2a      	ldr	r3, [pc, #168]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2c8:	0a5b      	lsrs	r3, r3, #9
 800b2ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2ce:	ee07 3a90 	vmov	s15, r3
 800b2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2de:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2ea:	ee17 2a90 	vmov	r2, s15
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b2f2:	4b1f      	ldr	r3, [pc, #124]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2f6:	0c1b      	lsrs	r3, r3, #16
 800b2f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2fc:	ee07 3a90 	vmov	s15, r3
 800b300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b304:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b308:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b30c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b318:	ee17 2a90 	vmov	r2, s15
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b320:	4b13      	ldr	r3, [pc, #76]	@ (800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b324:	0e1b      	lsrs	r3, r3, #24
 800b326:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b32a:	ee07 3a90 	vmov	s15, r3
 800b32e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b332:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b336:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b33a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b33e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b346:	ee17 2a90 	vmov	r2, s15
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b34e:	e008      	b.n	800b362 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	609a      	str	r2, [r3, #8]
}
 800b362:	bf00      	nop
 800b364:	3724      	adds	r7, #36	@ 0x24
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	58024400 	.word	0x58024400
 800b374:	03d09000 	.word	0x03d09000
 800b378:	46000000 	.word	0x46000000
 800b37c:	4c742400 	.word	0x4c742400
 800b380:	4a742400 	.word	0x4a742400
 800b384:	4af42400 	.word	0x4af42400

0800b388 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b388:	b480      	push	{r7}
 800b38a:	b089      	sub	sp, #36	@ 0x24
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b390:	4ba1      	ldr	r3, [pc, #644]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b394:	f003 0303 	and.w	r3, r3, #3
 800b398:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b39a:	4b9f      	ldr	r3, [pc, #636]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b39e:	0d1b      	lsrs	r3, r3, #20
 800b3a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b3a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b3a6:	4b9c      	ldr	r3, [pc, #624]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3aa:	0a1b      	lsrs	r3, r3, #8
 800b3ac:	f003 0301 	and.w	r3, r3, #1
 800b3b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b3b2:	4b99      	ldr	r3, [pc, #612]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3b6:	08db      	lsrs	r3, r3, #3
 800b3b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b3bc:	693a      	ldr	r2, [r7, #16]
 800b3be:	fb02 f303 	mul.w	r3, r2, r3
 800b3c2:	ee07 3a90 	vmov	s15, r3
 800b3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f000 8111 	beq.w	800b5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	2b02      	cmp	r3, #2
 800b3da:	f000 8083 	beq.w	800b4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b3de:	69bb      	ldr	r3, [r7, #24]
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	f200 80a1 	bhi.w	800b528 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d003      	beq.n	800b3f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d056      	beq.n	800b4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b3f2:	e099      	b.n	800b528 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3f4:	4b88      	ldr	r3, [pc, #544]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f003 0320 	and.w	r3, r3, #32
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d02d      	beq.n	800b45c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b400:	4b85      	ldr	r3, [pc, #532]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	08db      	lsrs	r3, r3, #3
 800b406:	f003 0303 	and.w	r3, r3, #3
 800b40a:	4a84      	ldr	r2, [pc, #528]	@ (800b61c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b40c:	fa22 f303 	lsr.w	r3, r2, r3
 800b410:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	ee07 3a90 	vmov	s15, r3
 800b418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	ee07 3a90 	vmov	s15, r3
 800b422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b42a:	4b7b      	ldr	r3, [pc, #492]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b42c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b42e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b432:	ee07 3a90 	vmov	s15, r3
 800b436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b43a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b43e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b44a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b44e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b452:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b456:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b45a:	e087      	b.n	800b56c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	ee07 3a90 	vmov	s15, r3
 800b462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b466:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b624 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b46a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b46e:	4b6a      	ldr	r3, [pc, #424]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b476:	ee07 3a90 	vmov	s15, r3
 800b47a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b47e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b482:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b48a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b48e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b49a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b49e:	e065      	b.n	800b56c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	ee07 3a90 	vmov	s15, r3
 800b4a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b628 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b4ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4b2:	4b59      	ldr	r3, [pc, #356]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ba:	ee07 3a90 	vmov	s15, r3
 800b4be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4e2:	e043      	b.n	800b56c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	ee07 3a90 	vmov	s15, r3
 800b4ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b62c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b4f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4f6:	4b48      	ldr	r3, [pc, #288]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4fe:	ee07 3a90 	vmov	s15, r3
 800b502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b506:	ed97 6a03 	vldr	s12, [r7, #12]
 800b50a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b50e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b51a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b51e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b526:	e021      	b.n	800b56c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	ee07 3a90 	vmov	s15, r3
 800b52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b532:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b628 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b53a:	4b37      	ldr	r3, [pc, #220]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b53c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b53e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b542:	ee07 3a90 	vmov	s15, r3
 800b546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b54a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b54e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b620 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b55a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b55e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b562:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b56a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b56c:	4b2a      	ldr	r3, [pc, #168]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b56e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b570:	0a5b      	lsrs	r3, r3, #9
 800b572:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b576:	ee07 3a90 	vmov	s15, r3
 800b57a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b57e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b582:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b586:	edd7 6a07 	vldr	s13, [r7, #28]
 800b58a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b58e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b592:	ee17 2a90 	vmov	r2, s15
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b59a:	4b1f      	ldr	r3, [pc, #124]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b59c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b59e:	0c1b      	lsrs	r3, r3, #16
 800b5a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5a4:	ee07 3a90 	vmov	s15, r3
 800b5a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5c0:	ee17 2a90 	vmov	r2, s15
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b5c8:	4b13      	ldr	r3, [pc, #76]	@ (800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5cc:	0e1b      	lsrs	r3, r3, #24
 800b5ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5d2:	ee07 3a90 	vmov	s15, r3
 800b5d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5ee:	ee17 2a90 	vmov	r2, s15
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b5f6:	e008      	b.n	800b60a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	609a      	str	r2, [r3, #8]
}
 800b60a:	bf00      	nop
 800b60c:	3724      	adds	r7, #36	@ 0x24
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	58024400 	.word	0x58024400
 800b61c:	03d09000 	.word	0x03d09000
 800b620:	46000000 	.word	0x46000000
 800b624:	4c742400 	.word	0x4c742400
 800b628:	4a742400 	.word	0x4a742400
 800b62c:	4af42400 	.word	0x4af42400

0800b630 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b630:	b480      	push	{r7}
 800b632:	b089      	sub	sp, #36	@ 0x24
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b638:	4ba0      	ldr	r3, [pc, #640]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b63c:	f003 0303 	and.w	r3, r3, #3
 800b640:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b642:	4b9e      	ldr	r3, [pc, #632]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b646:	091b      	lsrs	r3, r3, #4
 800b648:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b64c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b64e:	4b9b      	ldr	r3, [pc, #620]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b652:	f003 0301 	and.w	r3, r3, #1
 800b656:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b658:	4b98      	ldr	r3, [pc, #608]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b65a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b65c:	08db      	lsrs	r3, r3, #3
 800b65e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b662:	693a      	ldr	r2, [r7, #16]
 800b664:	fb02 f303 	mul.w	r3, r2, r3
 800b668:	ee07 3a90 	vmov	s15, r3
 800b66c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b670:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2b00      	cmp	r3, #0
 800b678:	f000 8111 	beq.w	800b89e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	2b02      	cmp	r3, #2
 800b680:	f000 8083 	beq.w	800b78a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	2b02      	cmp	r3, #2
 800b688:	f200 80a1 	bhi.w	800b7ce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d003      	beq.n	800b69a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d056      	beq.n	800b746 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b698:	e099      	b.n	800b7ce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b69a:	4b88      	ldr	r3, [pc, #544]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f003 0320 	and.w	r3, r3, #32
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d02d      	beq.n	800b702 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6a6:	4b85      	ldr	r3, [pc, #532]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	08db      	lsrs	r3, r3, #3
 800b6ac:	f003 0303 	and.w	r3, r3, #3
 800b6b0:	4a83      	ldr	r2, [pc, #524]	@ (800b8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b6b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b6b6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	ee07 3a90 	vmov	s15, r3
 800b6be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	ee07 3a90 	vmov	s15, r3
 800b6c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6d0:	4b7a      	ldr	r3, [pc, #488]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6d8:	ee07 3a90 	vmov	s15, r3
 800b6dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6e4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b8c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b6e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6fc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b700:	e087      	b.n	800b812 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	ee07 3a90 	vmov	s15, r3
 800b708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b70c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b710:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b714:	4b69      	ldr	r3, [pc, #420]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b71c:	ee07 3a90 	vmov	s15, r3
 800b720:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b724:	ed97 6a03 	vldr	s12, [r7, #12]
 800b728:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b8c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b72c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b730:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b734:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b738:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b73c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b740:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b744:	e065      	b.n	800b812 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	ee07 3a90 	vmov	s15, r3
 800b74c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b750:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b8cc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b754:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b758:	4b58      	ldr	r3, [pc, #352]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b75a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b75c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b760:	ee07 3a90 	vmov	s15, r3
 800b764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b768:	ed97 6a03 	vldr	s12, [r7, #12]
 800b76c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b8c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b774:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b778:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b77c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b780:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b784:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b788:	e043      	b.n	800b812 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	ee07 3a90 	vmov	s15, r3
 800b790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b794:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b8d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b79c:	4b47      	ldr	r3, [pc, #284]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b79e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7a4:	ee07 3a90 	vmov	s15, r3
 800b7a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7b0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b8c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7cc:	e021      	b.n	800b812 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	ee07 3a90 	vmov	s15, r3
 800b7d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b8c8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b7dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7e0:	4b36      	ldr	r3, [pc, #216]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7e8:	ee07 3a90 	vmov	s15, r3
 800b7ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7f4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b8c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b800:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b80c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b810:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b812:	4b2a      	ldr	r3, [pc, #168]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b816:	0a5b      	lsrs	r3, r3, #9
 800b818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b81c:	ee07 3a90 	vmov	s15, r3
 800b820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b824:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b828:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b82c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b838:	ee17 2a90 	vmov	r2, s15
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b840:	4b1e      	ldr	r3, [pc, #120]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b844:	0c1b      	lsrs	r3, r3, #16
 800b846:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b84a:	ee07 3a90 	vmov	s15, r3
 800b84e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b852:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b856:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b85a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b85e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b866:	ee17 2a90 	vmov	r2, s15
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b86e:	4b13      	ldr	r3, [pc, #76]	@ (800b8bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b872:	0e1b      	lsrs	r3, r3, #24
 800b874:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b878:	ee07 3a90 	vmov	s15, r3
 800b87c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b880:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b884:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b888:	edd7 6a07 	vldr	s13, [r7, #28]
 800b88c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b894:	ee17 2a90 	vmov	r2, s15
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b89c:	e008      	b.n	800b8b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	609a      	str	r2, [r3, #8]
}
 800b8b0:	bf00      	nop
 800b8b2:	3724      	adds	r7, #36	@ 0x24
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr
 800b8bc:	58024400 	.word	0x58024400
 800b8c0:	03d09000 	.word	0x03d09000
 800b8c4:	46000000 	.word	0x46000000
 800b8c8:	4c742400 	.word	0x4c742400
 800b8cc:	4a742400 	.word	0x4a742400
 800b8d0:	4af42400 	.word	0x4af42400

0800b8d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8e2:	4b53      	ldr	r3, [pc, #332]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b8e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8e6:	f003 0303 	and.w	r3, r3, #3
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	d101      	bne.n	800b8f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e099      	b.n	800ba26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b8f2:	4b4f      	ldr	r3, [pc, #316]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a4e      	ldr	r2, [pc, #312]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b8f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b8fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8fe:	f7f7 f85b 	bl	80029b8 <HAL_GetTick>
 800b902:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b904:	e008      	b.n	800b918 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b906:	f7f7 f857 	bl	80029b8 <HAL_GetTick>
 800b90a:	4602      	mov	r2, r0
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	2b02      	cmp	r3, #2
 800b912:	d901      	bls.n	800b918 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b914:	2303      	movs	r3, #3
 800b916:	e086      	b.n	800ba26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b918:	4b45      	ldr	r3, [pc, #276]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1f0      	bne.n	800b906 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b924:	4b42      	ldr	r3, [pc, #264]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b928:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	031b      	lsls	r3, r3, #12
 800b932:	493f      	ldr	r1, [pc, #252]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b934:	4313      	orrs	r3, r2
 800b936:	628b      	str	r3, [r1, #40]	@ 0x28
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	3b01      	subs	r3, #1
 800b93e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	3b01      	subs	r3, #1
 800b948:	025b      	lsls	r3, r3, #9
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	431a      	orrs	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	3b01      	subs	r3, #1
 800b954:	041b      	lsls	r3, r3, #16
 800b956:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b95a:	431a      	orrs	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	691b      	ldr	r3, [r3, #16]
 800b960:	3b01      	subs	r3, #1
 800b962:	061b      	lsls	r3, r3, #24
 800b964:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b968:	4931      	ldr	r1, [pc, #196]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b96a:	4313      	orrs	r3, r2
 800b96c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b96e:	4b30      	ldr	r3, [pc, #192]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b972:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	492d      	ldr	r1, [pc, #180]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b97c:	4313      	orrs	r3, r2
 800b97e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b980:	4b2b      	ldr	r3, [pc, #172]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b984:	f023 0220 	bic.w	r2, r3, #32
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	699b      	ldr	r3, [r3, #24]
 800b98c:	4928      	ldr	r1, [pc, #160]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b98e:	4313      	orrs	r3, r2
 800b990:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b992:	4b27      	ldr	r3, [pc, #156]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b996:	4a26      	ldr	r2, [pc, #152]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b998:	f023 0310 	bic.w	r3, r3, #16
 800b99c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b99e:	4b24      	ldr	r3, [pc, #144]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b9a2:	4b24      	ldr	r3, [pc, #144]	@ (800ba34 <RCCEx_PLL2_Config+0x160>)
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	69d2      	ldr	r2, [r2, #28]
 800b9aa:	00d2      	lsls	r2, r2, #3
 800b9ac:	4920      	ldr	r1, [pc, #128]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b9b2:	4b1f      	ldr	r3, [pc, #124]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9b6:	4a1e      	ldr	r2, [pc, #120]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9b8:	f043 0310 	orr.w	r3, r3, #16
 800b9bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d106      	bne.n	800b9d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b9c4:	4b1a      	ldr	r3, [pc, #104]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c8:	4a19      	ldr	r2, [pc, #100]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b9ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b9d0:	e00f      	b.n	800b9f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d106      	bne.n	800b9e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b9d8:	4b15      	ldr	r3, [pc, #84]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9dc:	4a14      	ldr	r2, [pc, #80]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b9e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b9e4:	e005      	b.n	800b9f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b9e6:	4b12      	ldr	r3, [pc, #72]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ea:	4a11      	ldr	r2, [pc, #68]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b9f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b9f2:	4b0f      	ldr	r3, [pc, #60]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a0e      	ldr	r2, [pc, #56]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800b9f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b9fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9fe:	f7f6 ffdb 	bl	80029b8 <HAL_GetTick>
 800ba02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba04:	e008      	b.n	800ba18 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ba06:	f7f6 ffd7 	bl	80029b8 <HAL_GetTick>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	1ad3      	subs	r3, r2, r3
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d901      	bls.n	800ba18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba14:	2303      	movs	r3, #3
 800ba16:	e006      	b.n	800ba26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba18:	4b05      	ldr	r3, [pc, #20]	@ (800ba30 <RCCEx_PLL2_Config+0x15c>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d0f0      	beq.n	800ba06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ba24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	58024400 	.word	0x58024400
 800ba34:	ffff0007 	.word	0xffff0007

0800ba38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba42:	2300      	movs	r3, #0
 800ba44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ba46:	4b53      	ldr	r3, [pc, #332]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800ba48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba4a:	f003 0303 	and.w	r3, r3, #3
 800ba4e:	2b03      	cmp	r3, #3
 800ba50:	d101      	bne.n	800ba56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	e099      	b.n	800bb8a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ba56:	4b4f      	ldr	r3, [pc, #316]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a4e      	ldr	r2, [pc, #312]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800ba5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba62:	f7f6 ffa9 	bl	80029b8 <HAL_GetTick>
 800ba66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba68:	e008      	b.n	800ba7c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba6a:	f7f6 ffa5 	bl	80029b8 <HAL_GetTick>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	1ad3      	subs	r3, r2, r3
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	d901      	bls.n	800ba7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ba78:	2303      	movs	r3, #3
 800ba7a:	e086      	b.n	800bb8a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba7c:	4b45      	ldr	r3, [pc, #276]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1f0      	bne.n	800ba6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ba88:	4b42      	ldr	r3, [pc, #264]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800ba8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba8c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	051b      	lsls	r3, r3, #20
 800ba96:	493f      	ldr	r1, [pc, #252]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	628b      	str	r3, [r1, #40]	@ 0x28
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	3b01      	subs	r3, #1
 800baa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	3b01      	subs	r3, #1
 800baac:	025b      	lsls	r3, r3, #9
 800baae:	b29b      	uxth	r3, r3
 800bab0:	431a      	orrs	r2, r3
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	3b01      	subs	r3, #1
 800bab8:	041b      	lsls	r3, r3, #16
 800baba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800babe:	431a      	orrs	r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	691b      	ldr	r3, [r3, #16]
 800bac4:	3b01      	subs	r3, #1
 800bac6:	061b      	lsls	r3, r3, #24
 800bac8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bacc:	4931      	ldr	r1, [pc, #196]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bace:	4313      	orrs	r3, r2
 800bad0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bad2:	4b30      	ldr	r3, [pc, #192]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	695b      	ldr	r3, [r3, #20]
 800bade:	492d      	ldr	r1, [pc, #180]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bae0:	4313      	orrs	r3, r2
 800bae2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bae4:	4b2b      	ldr	r3, [pc, #172]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bae8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	699b      	ldr	r3, [r3, #24]
 800baf0:	4928      	ldr	r1, [pc, #160]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800baf2:	4313      	orrs	r3, r2
 800baf4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800baf6:	4b27      	ldr	r3, [pc, #156]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800baf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bafa:	4a26      	ldr	r2, [pc, #152]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bafc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bb02:	4b24      	ldr	r3, [pc, #144]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb06:	4b24      	ldr	r3, [pc, #144]	@ (800bb98 <RCCEx_PLL3_Config+0x160>)
 800bb08:	4013      	ands	r3, r2
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	69d2      	ldr	r2, [r2, #28]
 800bb0e:	00d2      	lsls	r2, r2, #3
 800bb10:	4920      	ldr	r1, [pc, #128]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb12:	4313      	orrs	r3, r2
 800bb14:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bb16:	4b1f      	ldr	r3, [pc, #124]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb1a:	4a1e      	ldr	r2, [pc, #120]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d106      	bne.n	800bb36 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bb28:	4b1a      	ldr	r3, [pc, #104]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb2c:	4a19      	ldr	r2, [pc, #100]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bb32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bb34:	e00f      	b.n	800bb56 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d106      	bne.n	800bb4a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bb3c:	4b15      	ldr	r3, [pc, #84]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb40:	4a14      	ldr	r2, [pc, #80]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bb46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bb48:	e005      	b.n	800bb56 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bb4a:	4b12      	ldr	r3, [pc, #72]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb4e:	4a11      	ldr	r2, [pc, #68]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bb54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bb56:	4b0f      	ldr	r3, [pc, #60]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a0e      	ldr	r2, [pc, #56]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb62:	f7f6 ff29 	bl	80029b8 <HAL_GetTick>
 800bb66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bb68:	e008      	b.n	800bb7c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bb6a:	f7f6 ff25 	bl	80029b8 <HAL_GetTick>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	d901      	bls.n	800bb7c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	e006      	b.n	800bb8a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bb7c:	4b05      	ldr	r3, [pc, #20]	@ (800bb94 <RCCEx_PLL3_Config+0x15c>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d0f0      	beq.n	800bb6a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	58024400 	.word	0x58024400
 800bb98:	ffff0007 	.word	0xffff0007

0800bb9c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d101      	bne.n	800bbae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e10f      	b.n	800bdce <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a87      	ldr	r2, [pc, #540]	@ (800bdd8 <HAL_SPI_Init+0x23c>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d00f      	beq.n	800bbde <HAL_SPI_Init+0x42>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a86      	ldr	r2, [pc, #536]	@ (800bddc <HAL_SPI_Init+0x240>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d00a      	beq.n	800bbde <HAL_SPI_Init+0x42>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a84      	ldr	r2, [pc, #528]	@ (800bde0 <HAL_SPI_Init+0x244>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d005      	beq.n	800bbde <HAL_SPI_Init+0x42>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	2b0f      	cmp	r3, #15
 800bbd8:	d901      	bls.n	800bbde <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e0f7      	b.n	800bdce <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fbbc 	bl	800c35c <SPI_GetPacketSize>
 800bbe4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a7b      	ldr	r2, [pc, #492]	@ (800bdd8 <HAL_SPI_Init+0x23c>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d00c      	beq.n	800bc0a <HAL_SPI_Init+0x6e>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a79      	ldr	r2, [pc, #484]	@ (800bddc <HAL_SPI_Init+0x240>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d007      	beq.n	800bc0a <HAL_SPI_Init+0x6e>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a78      	ldr	r2, [pc, #480]	@ (800bde0 <HAL_SPI_Init+0x244>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d002      	beq.n	800bc0a <HAL_SPI_Init+0x6e>
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2b08      	cmp	r3, #8
 800bc08:	d811      	bhi.n	800bc2e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bc0e:	4a72      	ldr	r2, [pc, #456]	@ (800bdd8 <HAL_SPI_Init+0x23c>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d009      	beq.n	800bc28 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a70      	ldr	r2, [pc, #448]	@ (800bddc <HAL_SPI_Init+0x240>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d004      	beq.n	800bc28 <HAL_SPI_Init+0x8c>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	4a6f      	ldr	r2, [pc, #444]	@ (800bde0 <HAL_SPI_Init+0x244>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d104      	bne.n	800bc32 <HAL_SPI_Init+0x96>
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2b10      	cmp	r3, #16
 800bc2c:	d901      	bls.n	800bc32 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e0cd      	b.n	800bdce <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d106      	bne.n	800bc4c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f7f6 fb26 	bl	8002298 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2202      	movs	r2, #2
 800bc50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f022 0201 	bic.w	r2, r2, #1
 800bc62:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bc6e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	699b      	ldr	r3, [r3, #24]
 800bc74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bc78:	d119      	bne.n	800bcae <HAL_SPI_Init+0x112>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc82:	d103      	bne.n	800bc8c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d008      	beq.n	800bc9e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10c      	bne.n	800bcae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bc98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc9c:	d107      	bne.n	800bcae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bcac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00f      	beq.n	800bcda <HAL_SPI_Init+0x13e>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	2b06      	cmp	r3, #6
 800bcc0:	d90b      	bls.n	800bcda <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	430a      	orrs	r2, r1
 800bcd6:	601a      	str	r2, [r3, #0]
 800bcd8:	e007      	b.n	800bcea <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bce8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	69da      	ldr	r2, [r3, #28]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcf2:	431a      	orrs	r2, r3
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	431a      	orrs	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcfc:	ea42 0103 	orr.w	r1, r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	68da      	ldr	r2, [r3, #12]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	430a      	orrs	r2, r1
 800bd0a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd14:	431a      	orrs	r2, r3
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd1a:	431a      	orrs	r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	699b      	ldr	r3, [r3, #24]
 800bd20:	431a      	orrs	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	431a      	orrs	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	695b      	ldr	r3, [r3, #20]
 800bd2c:	431a      	orrs	r2, r3
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a1b      	ldr	r3, [r3, #32]
 800bd32:	431a      	orrs	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	431a      	orrs	r2, r3
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd3e:	431a      	orrs	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	431a      	orrs	r2, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd4a:	ea42 0103 	orr.w	r1, r2, r3
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	430a      	orrs	r2, r1
 800bd58:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d113      	bne.n	800bd8a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bd74:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bd88:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f022 0201 	bic.w	r2, r2, #1
 800bd98:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00a      	beq.n	800bdbc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	430a      	orrs	r2, r1
 800bdba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	40013000 	.word	0x40013000
 800bddc:	40003800 	.word	0x40003800
 800bde0:	40003c00 	.word	0x40003c00

0800bde4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b088      	sub	sp, #32
 800bde8:	af02      	add	r7, sp, #8
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	603b      	str	r3, [r7, #0]
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	3320      	adds	r3, #32
 800bdfa:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bdfc:	f7f6 fddc 	bl	80029b8 <HAL_GetTick>
 800be00:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d001      	beq.n	800be12 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800be0e:	2302      	movs	r3, #2
 800be10:	e1d1      	b.n	800c1b6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d002      	beq.n	800be1e <HAL_SPI_Transmit+0x3a>
 800be18:	88fb      	ldrh	r3, [r7, #6]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d101      	bne.n	800be22 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800be1e:	2301      	movs	r3, #1
 800be20:	e1c9      	b.n	800c1b6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d101      	bne.n	800be30 <HAL_SPI_Transmit+0x4c>
 800be2c:	2302      	movs	r3, #2
 800be2e:	e1c2      	b.n	800c1b6 <HAL_SPI_Transmit+0x3d2>
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2201      	movs	r2, #1
 800be34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2203      	movs	r2, #3
 800be3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2200      	movs	r2, #0
 800be44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	88fa      	ldrh	r2, [r7, #6]
 800be52:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	88fa      	ldrh	r2, [r7, #6]
 800be5a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2200      	movs	r2, #0
 800be62:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2200      	movs	r2, #0
 800be68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2200      	movs	r2, #0
 800be78:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2200      	movs	r2, #0
 800be7e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800be88:	d108      	bne.n	800be9c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800be98:	601a      	str	r2, [r3, #0]
 800be9a:	e009      	b.n	800beb0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800beae:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	685a      	ldr	r2, [r3, #4]
 800beb6:	4b96      	ldr	r3, [pc, #600]	@ (800c110 <HAL_SPI_Transmit+0x32c>)
 800beb8:	4013      	ands	r3, r2
 800beba:	88f9      	ldrh	r1, [r7, #6]
 800bebc:	68fa      	ldr	r2, [r7, #12]
 800bebe:	6812      	ldr	r2, [r2, #0]
 800bec0:	430b      	orrs	r3, r1
 800bec2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f042 0201 	orr.w	r2, r2, #1
 800bed2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bedc:	d107      	bne.n	800beee <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800beec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	2b0f      	cmp	r3, #15
 800bef4:	d947      	bls.n	800bf86 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bef6:	e03f      	b.n	800bf78 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	695b      	ldr	r3, [r3, #20]
 800befe:	f003 0302 	and.w	r3, r3, #2
 800bf02:	2b02      	cmp	r3, #2
 800bf04:	d114      	bne.n	800bf30 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	6812      	ldr	r2, [r2, #0]
 800bf10:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf16:	1d1a      	adds	r2, r3, #4
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	3b01      	subs	r3, #1
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bf2e:	e023      	b.n	800bf78 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf30:	f7f6 fd42 	bl	80029b8 <HAL_GetTick>
 800bf34:	4602      	mov	r2, r0
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	1ad3      	subs	r3, r2, r3
 800bf3a:	683a      	ldr	r2, [r7, #0]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d803      	bhi.n	800bf48 <HAL_SPI_Transmit+0x164>
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf46:	d102      	bne.n	800bf4e <HAL_SPI_Transmit+0x16a>
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d114      	bne.n	800bf78 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bf4e:	68f8      	ldr	r0, [r7, #12]
 800bf50:	f000 f936 	bl	800c1c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf5a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bf74:	2303      	movs	r3, #3
 800bf76:	e11e      	b.n	800c1b6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1b9      	bne.n	800bef8 <HAL_SPI_Transmit+0x114>
 800bf84:	e0f1      	b.n	800c16a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	2b07      	cmp	r3, #7
 800bf8c:	f240 80e6 	bls.w	800c15c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bf90:	e05d      	b.n	800c04e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	695b      	ldr	r3, [r3, #20]
 800bf98:	f003 0302 	and.w	r3, r3, #2
 800bf9c:	2b02      	cmp	r3, #2
 800bf9e:	d132      	bne.n	800c006 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d918      	bls.n	800bfde <HAL_SPI_Transmit+0x1fa>
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d014      	beq.n	800bfde <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	6812      	ldr	r2, [r2, #0]
 800bfbe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfc4:	1d1a      	adds	r2, r3, #4
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	3b02      	subs	r3, #2
 800bfd4:	b29a      	uxth	r2, r3
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bfdc:	e037      	b.n	800c04e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfe2:	881a      	ldrh	r2, [r3, #0]
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfec:	1c9a      	adds	r2, r3, #2
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	3b01      	subs	r3, #1
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c004:	e023      	b.n	800c04e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c006:	f7f6 fcd7 	bl	80029b8 <HAL_GetTick>
 800c00a:	4602      	mov	r2, r0
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	1ad3      	subs	r3, r2, r3
 800c010:	683a      	ldr	r2, [r7, #0]
 800c012:	429a      	cmp	r2, r3
 800c014:	d803      	bhi.n	800c01e <HAL_SPI_Transmit+0x23a>
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c01c:	d102      	bne.n	800c024 <HAL_SPI_Transmit+0x240>
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d114      	bne.n	800c04e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f000 f8cb 	bl	800c1c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c030:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2201      	movs	r2, #1
 800c03e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c04a:	2303      	movs	r3, #3
 800c04c:	e0b3      	b.n	800c1b6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c054:	b29b      	uxth	r3, r3
 800c056:	2b00      	cmp	r3, #0
 800c058:	d19b      	bne.n	800bf92 <HAL_SPI_Transmit+0x1ae>
 800c05a:	e086      	b.n	800c16a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	695b      	ldr	r3, [r3, #20]
 800c062:	f003 0302 	and.w	r3, r3, #2
 800c066:	2b02      	cmp	r3, #2
 800c068:	d154      	bne.n	800c114 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c070:	b29b      	uxth	r3, r3
 800c072:	2b03      	cmp	r3, #3
 800c074:	d918      	bls.n	800c0a8 <HAL_SPI_Transmit+0x2c4>
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c07a:	2b40      	cmp	r3, #64	@ 0x40
 800c07c:	d914      	bls.n	800c0a8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	6812      	ldr	r2, [r2, #0]
 800c088:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c08e:	1d1a      	adds	r2, r3, #4
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	3b04      	subs	r3, #4
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c0a6:	e059      	b.n	800c15c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d917      	bls.n	800c0e4 <HAL_SPI_Transmit+0x300>
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d013      	beq.n	800c0e4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0c0:	881a      	ldrh	r2, [r3, #0]
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0ca:	1c9a      	adds	r2, r3, #2
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c0d6:	b29b      	uxth	r3, r3
 800c0d8:	3b02      	subs	r3, #2
 800c0da:	b29a      	uxth	r2, r3
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c0e2:	e03b      	b.n	800c15c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	3320      	adds	r3, #32
 800c0ee:	7812      	ldrb	r2, [r2, #0]
 800c0f0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0f6:	1c5a      	adds	r2, r3, #1
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c102:	b29b      	uxth	r3, r3
 800c104:	3b01      	subs	r3, #1
 800c106:	b29a      	uxth	r2, r3
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c10e:	e025      	b.n	800c15c <HAL_SPI_Transmit+0x378>
 800c110:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c114:	f7f6 fc50 	bl	80029b8 <HAL_GetTick>
 800c118:	4602      	mov	r2, r0
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	1ad3      	subs	r3, r2, r3
 800c11e:	683a      	ldr	r2, [r7, #0]
 800c120:	429a      	cmp	r2, r3
 800c122:	d803      	bhi.n	800c12c <HAL_SPI_Transmit+0x348>
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c12a:	d102      	bne.n	800c132 <HAL_SPI_Transmit+0x34e>
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d114      	bne.n	800c15c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f000 f844 	bl	800c1c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c13e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2201      	movs	r2, #1
 800c14c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2200      	movs	r2, #0
 800c154:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c158:	2303      	movs	r3, #3
 800c15a:	e02c      	b.n	800c1b6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c162:	b29b      	uxth	r3, r3
 800c164:	2b00      	cmp	r3, #0
 800c166:	f47f af79 	bne.w	800c05c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	9300      	str	r3, [sp, #0]
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	2200      	movs	r2, #0
 800c172:	2108      	movs	r1, #8
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	f000 f8c3 	bl	800c300 <SPI_WaitOnFlagUntilTimeout>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d007      	beq.n	800c190 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c186:	f043 0220 	orr.w	r2, r3, #32
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c190:	68f8      	ldr	r0, [r7, #12]
 800c192:	f000 f815 	bl	800c1c0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2201      	movs	r2, #1
 800c19a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d001      	beq.n	800c1b4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e000      	b.n	800c1b6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800c1b4:	2300      	movs	r3, #0
  }
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3718      	adds	r7, #24
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop

0800c1c0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b085      	sub	sp, #20
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	695b      	ldr	r3, [r3, #20]
 800c1ce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	699a      	ldr	r2, [r3, #24]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f042 0208 	orr.w	r2, r2, #8
 800c1de:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	699a      	ldr	r2, [r3, #24]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f042 0210 	orr.w	r2, r2, #16
 800c1ee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f022 0201 	bic.w	r2, r2, #1
 800c1fe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	6919      	ldr	r1, [r3, #16]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	4b3c      	ldr	r3, [pc, #240]	@ (800c2fc <SPI_CloseTransfer+0x13c>)
 800c20c:	400b      	ands	r3, r1
 800c20e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	689a      	ldr	r2, [r3, #8]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c21e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c226:	b2db      	uxtb	r3, r3
 800c228:	2b04      	cmp	r3, #4
 800c22a:	d014      	beq.n	800c256 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f003 0320 	and.w	r3, r3, #32
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00f      	beq.n	800c256 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c23c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	699a      	ldr	r2, [r3, #24]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f042 0220 	orr.w	r2, r2, #32
 800c254:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	2b03      	cmp	r3, #3
 800c260:	d014      	beq.n	800c28c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d00f      	beq.n	800c28c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c272:	f043 0204 	orr.w	r2, r3, #4
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	699a      	ldr	r2, [r3, #24]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c28a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00f      	beq.n	800c2b6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c29c:	f043 0201 	orr.w	r2, r3, #1
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	699a      	ldr	r2, [r3, #24]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c2b4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00f      	beq.n	800c2e0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2c6:	f043 0208 	orr.w	r2, r3, #8
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	699a      	ldr	r2, [r3, #24]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c2de:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c2f0:	bf00      	nop
 800c2f2:	3714      	adds	r7, #20
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr
 800c2fc:	fffffc90 	.word	0xfffffc90

0800c300 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	603b      	str	r3, [r7, #0]
 800c30c:	4613      	mov	r3, r2
 800c30e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c310:	e010      	b.n	800c334 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c312:	f7f6 fb51 	bl	80029b8 <HAL_GetTick>
 800c316:	4602      	mov	r2, r0
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	1ad3      	subs	r3, r2, r3
 800c31c:	683a      	ldr	r2, [r7, #0]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d803      	bhi.n	800c32a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c328:	d102      	bne.n	800c330 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d101      	bne.n	800c334 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c330:	2303      	movs	r3, #3
 800c332:	e00f      	b.n	800c354 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	695a      	ldr	r2, [r3, #20]
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	4013      	ands	r3, r2
 800c33e:	68ba      	ldr	r2, [r7, #8]
 800c340:	429a      	cmp	r2, r3
 800c342:	bf0c      	ite	eq
 800c344:	2301      	moveq	r3, #1
 800c346:	2300      	movne	r3, #0
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	461a      	mov	r2, r3
 800c34c:	79fb      	ldrb	r3, [r7, #7]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d0df      	beq.n	800c312 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	3710      	adds	r7, #16
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c368:	095b      	lsrs	r3, r3, #5
 800c36a:	3301      	adds	r3, #1
 800c36c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	3301      	adds	r3, #1
 800c374:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	3307      	adds	r3, #7
 800c37a:	08db      	lsrs	r3, r3, #3
 800c37c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	68fa      	ldr	r2, [r7, #12]
 800c382:	fb02 f303 	mul.w	r3, r2, r3
}
 800c386:	4618      	mov	r0, r3
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr

0800c392 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b082      	sub	sp, #8
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d101      	bne.n	800c3a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e049      	b.n	800c438 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d106      	bne.n	800c3be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f7f5 fffb 	bl	80023b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2202      	movs	r2, #2
 800c3c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	3304      	adds	r3, #4
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	f000 fe4f 	bl	800d074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2201      	movs	r2, #1
 800c3da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2201      	movs	r2, #1
 800c402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2201      	movs	r2, #1
 800c40a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2201      	movs	r2, #1
 800c412:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2201      	movs	r2, #1
 800c41a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2201      	movs	r2, #1
 800c42a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2201      	movs	r2, #1
 800c432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c436:	2300      	movs	r3, #0
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3708      	adds	r7, #8
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c440:	b480      	push	{r7}
 800c442:	b085      	sub	sp, #20
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	2b01      	cmp	r3, #1
 800c452:	d001      	beq.n	800c458 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c454:	2301      	movs	r3, #1
 800c456:	e05e      	b.n	800c516 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2202      	movs	r2, #2
 800c45c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68da      	ldr	r2, [r3, #12]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f042 0201 	orr.w	r2, r2, #1
 800c46e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a2b      	ldr	r2, [pc, #172]	@ (800c524 <HAL_TIM_Base_Start_IT+0xe4>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d02c      	beq.n	800c4d4 <HAL_TIM_Base_Start_IT+0x94>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c482:	d027      	beq.n	800c4d4 <HAL_TIM_Base_Start_IT+0x94>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a27      	ldr	r2, [pc, #156]	@ (800c528 <HAL_TIM_Base_Start_IT+0xe8>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d022      	beq.n	800c4d4 <HAL_TIM_Base_Start_IT+0x94>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4a26      	ldr	r2, [pc, #152]	@ (800c52c <HAL_TIM_Base_Start_IT+0xec>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d01d      	beq.n	800c4d4 <HAL_TIM_Base_Start_IT+0x94>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a24      	ldr	r2, [pc, #144]	@ (800c530 <HAL_TIM_Base_Start_IT+0xf0>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d018      	beq.n	800c4d4 <HAL_TIM_Base_Start_IT+0x94>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a23      	ldr	r2, [pc, #140]	@ (800c534 <HAL_TIM_Base_Start_IT+0xf4>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d013      	beq.n	800c4d4 <HAL_TIM_Base_Start_IT+0x94>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a21      	ldr	r2, [pc, #132]	@ (800c538 <HAL_TIM_Base_Start_IT+0xf8>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d00e      	beq.n	800c4d4 <HAL_TIM_Base_Start_IT+0x94>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a20      	ldr	r2, [pc, #128]	@ (800c53c <HAL_TIM_Base_Start_IT+0xfc>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d009      	beq.n	800c4d4 <HAL_TIM_Base_Start_IT+0x94>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a1e      	ldr	r2, [pc, #120]	@ (800c540 <HAL_TIM_Base_Start_IT+0x100>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d004      	beq.n	800c4d4 <HAL_TIM_Base_Start_IT+0x94>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a1d      	ldr	r2, [pc, #116]	@ (800c544 <HAL_TIM_Base_Start_IT+0x104>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d115      	bne.n	800c500 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	689a      	ldr	r2, [r3, #8]
 800c4da:	4b1b      	ldr	r3, [pc, #108]	@ (800c548 <HAL_TIM_Base_Start_IT+0x108>)
 800c4dc:	4013      	ands	r3, r2
 800c4de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2b06      	cmp	r3, #6
 800c4e4:	d015      	beq.n	800c512 <HAL_TIM_Base_Start_IT+0xd2>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4ec:	d011      	beq.n	800c512 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f042 0201 	orr.w	r2, r2, #1
 800c4fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4fe:	e008      	b.n	800c512 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f042 0201 	orr.w	r2, r2, #1
 800c50e:	601a      	str	r2, [r3, #0]
 800c510:	e000      	b.n	800c514 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c512:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3714      	adds	r7, #20
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr
 800c522:	bf00      	nop
 800c524:	40010000 	.word	0x40010000
 800c528:	40000400 	.word	0x40000400
 800c52c:	40000800 	.word	0x40000800
 800c530:	40000c00 	.word	0x40000c00
 800c534:	40010400 	.word	0x40010400
 800c538:	40001800 	.word	0x40001800
 800c53c:	40014000 	.word	0x40014000
 800c540:	4000e000 	.word	0x4000e000
 800c544:	4000e400 	.word	0x4000e400
 800c548:	00010007 	.word	0x00010007

0800c54c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d101      	bne.n	800c55e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800c55a:	2301      	movs	r3, #1
 800c55c:	e049      	b.n	800c5f2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c564:	b2db      	uxtb	r3, r3
 800c566:	2b00      	cmp	r3, #0
 800c568:	d106      	bne.n	800c578 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2200      	movs	r2, #0
 800c56e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 f841 	bl	800c5fa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2202      	movs	r2, #2
 800c57c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681a      	ldr	r2, [r3, #0]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	3304      	adds	r3, #4
 800c588:	4619      	mov	r1, r3
 800c58a:	4610      	mov	r0, r2
 800c58c:	f000 fd72 	bl	800d074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2201      	movs	r2, #1
 800c594:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2201      	movs	r2, #1
 800c59c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800c5fa:	b480      	push	{r7}
 800c5fc:	b083      	sub	sp, #12
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800c602:	bf00      	nop
 800c604:	370c      	adds	r7, #12
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr

0800c60e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c60e:	b580      	push	{r7, lr}
 800c610:	b082      	sub	sp, #8
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d101      	bne.n	800c620 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	e049      	b.n	800c6b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c626:	b2db      	uxtb	r3, r3
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d106      	bne.n	800c63a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 f841 	bl	800c6bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2202      	movs	r2, #2
 800c63e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	3304      	adds	r3, #4
 800c64a:	4619      	mov	r1, r3
 800c64c:	4610      	mov	r0, r2
 800c64e:	f000 fd11 	bl	800d074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2201      	movs	r2, #1
 800c656:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2201      	movs	r2, #1
 800c65e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2201      	movs	r2, #1
 800c666:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2201      	movs	r2, #1
 800c66e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2201      	movs	r2, #1
 800c676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2201      	movs	r2, #1
 800c67e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2201      	movs	r2, #1
 800c686:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2201      	movs	r2, #1
 800c68e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2201      	movs	r2, #1
 800c696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2201      	movs	r2, #1
 800c69e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c6b2:	2300      	movs	r3, #0
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c6c4:	bf00      	nop
 800c6c6:	370c      	adds	r7, #12
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr

0800c6d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d109      	bne.n	800c6f4 <HAL_TIM_PWM_Start+0x24>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	bf14      	ite	ne
 800c6ec:	2301      	movne	r3, #1
 800c6ee:	2300      	moveq	r3, #0
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	e03c      	b.n	800c76e <HAL_TIM_PWM_Start+0x9e>
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	2b04      	cmp	r3, #4
 800c6f8:	d109      	bne.n	800c70e <HAL_TIM_PWM_Start+0x3e>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c700:	b2db      	uxtb	r3, r3
 800c702:	2b01      	cmp	r3, #1
 800c704:	bf14      	ite	ne
 800c706:	2301      	movne	r3, #1
 800c708:	2300      	moveq	r3, #0
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	e02f      	b.n	800c76e <HAL_TIM_PWM_Start+0x9e>
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	2b08      	cmp	r3, #8
 800c712:	d109      	bne.n	800c728 <HAL_TIM_PWM_Start+0x58>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	bf14      	ite	ne
 800c720:	2301      	movne	r3, #1
 800c722:	2300      	moveq	r3, #0
 800c724:	b2db      	uxtb	r3, r3
 800c726:	e022      	b.n	800c76e <HAL_TIM_PWM_Start+0x9e>
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	2b0c      	cmp	r3, #12
 800c72c:	d109      	bne.n	800c742 <HAL_TIM_PWM_Start+0x72>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c734:	b2db      	uxtb	r3, r3
 800c736:	2b01      	cmp	r3, #1
 800c738:	bf14      	ite	ne
 800c73a:	2301      	movne	r3, #1
 800c73c:	2300      	moveq	r3, #0
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	e015      	b.n	800c76e <HAL_TIM_PWM_Start+0x9e>
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	2b10      	cmp	r3, #16
 800c746:	d109      	bne.n	800c75c <HAL_TIM_PWM_Start+0x8c>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	2b01      	cmp	r3, #1
 800c752:	bf14      	ite	ne
 800c754:	2301      	movne	r3, #1
 800c756:	2300      	moveq	r3, #0
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	e008      	b.n	800c76e <HAL_TIM_PWM_Start+0x9e>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c762:	b2db      	uxtb	r3, r3
 800c764:	2b01      	cmp	r3, #1
 800c766:	bf14      	ite	ne
 800c768:	2301      	movne	r3, #1
 800c76a:	2300      	moveq	r3, #0
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d001      	beq.n	800c776 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c772:	2301      	movs	r3, #1
 800c774:	e0ab      	b.n	800c8ce <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d104      	bne.n	800c786 <HAL_TIM_PWM_Start+0xb6>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2202      	movs	r2, #2
 800c780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c784:	e023      	b.n	800c7ce <HAL_TIM_PWM_Start+0xfe>
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	2b04      	cmp	r3, #4
 800c78a:	d104      	bne.n	800c796 <HAL_TIM_PWM_Start+0xc6>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2202      	movs	r2, #2
 800c790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c794:	e01b      	b.n	800c7ce <HAL_TIM_PWM_Start+0xfe>
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	2b08      	cmp	r3, #8
 800c79a:	d104      	bne.n	800c7a6 <HAL_TIM_PWM_Start+0xd6>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2202      	movs	r2, #2
 800c7a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c7a4:	e013      	b.n	800c7ce <HAL_TIM_PWM_Start+0xfe>
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	2b0c      	cmp	r3, #12
 800c7aa:	d104      	bne.n	800c7b6 <HAL_TIM_PWM_Start+0xe6>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2202      	movs	r2, #2
 800c7b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c7b4:	e00b      	b.n	800c7ce <HAL_TIM_PWM_Start+0xfe>
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	2b10      	cmp	r3, #16
 800c7ba:	d104      	bne.n	800c7c6 <HAL_TIM_PWM_Start+0xf6>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2202      	movs	r2, #2
 800c7c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c7c4:	e003      	b.n	800c7ce <HAL_TIM_PWM_Start+0xfe>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2202      	movs	r2, #2
 800c7ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	6839      	ldr	r1, [r7, #0]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f001 f86c 	bl	800d8b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a3d      	ldr	r2, [pc, #244]	@ (800c8d8 <HAL_TIM_PWM_Start+0x208>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d013      	beq.n	800c80e <HAL_TIM_PWM_Start+0x13e>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4a3c      	ldr	r2, [pc, #240]	@ (800c8dc <HAL_TIM_PWM_Start+0x20c>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d00e      	beq.n	800c80e <HAL_TIM_PWM_Start+0x13e>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a3a      	ldr	r2, [pc, #232]	@ (800c8e0 <HAL_TIM_PWM_Start+0x210>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d009      	beq.n	800c80e <HAL_TIM_PWM_Start+0x13e>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4a39      	ldr	r2, [pc, #228]	@ (800c8e4 <HAL_TIM_PWM_Start+0x214>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d004      	beq.n	800c80e <HAL_TIM_PWM_Start+0x13e>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a37      	ldr	r2, [pc, #220]	@ (800c8e8 <HAL_TIM_PWM_Start+0x218>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d101      	bne.n	800c812 <HAL_TIM_PWM_Start+0x142>
 800c80e:	2301      	movs	r3, #1
 800c810:	e000      	b.n	800c814 <HAL_TIM_PWM_Start+0x144>
 800c812:	2300      	movs	r3, #0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d007      	beq.n	800c828 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c826:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a2a      	ldr	r2, [pc, #168]	@ (800c8d8 <HAL_TIM_PWM_Start+0x208>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d02c      	beq.n	800c88c <HAL_TIM_PWM_Start+0x1bc>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c83a:	d027      	beq.n	800c88c <HAL_TIM_PWM_Start+0x1bc>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a2a      	ldr	r2, [pc, #168]	@ (800c8ec <HAL_TIM_PWM_Start+0x21c>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d022      	beq.n	800c88c <HAL_TIM_PWM_Start+0x1bc>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4a29      	ldr	r2, [pc, #164]	@ (800c8f0 <HAL_TIM_PWM_Start+0x220>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d01d      	beq.n	800c88c <HAL_TIM_PWM_Start+0x1bc>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a27      	ldr	r2, [pc, #156]	@ (800c8f4 <HAL_TIM_PWM_Start+0x224>)
 800c856:	4293      	cmp	r3, r2
 800c858:	d018      	beq.n	800c88c <HAL_TIM_PWM_Start+0x1bc>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a1f      	ldr	r2, [pc, #124]	@ (800c8dc <HAL_TIM_PWM_Start+0x20c>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d013      	beq.n	800c88c <HAL_TIM_PWM_Start+0x1bc>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4a23      	ldr	r2, [pc, #140]	@ (800c8f8 <HAL_TIM_PWM_Start+0x228>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d00e      	beq.n	800c88c <HAL_TIM_PWM_Start+0x1bc>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4a1b      	ldr	r2, [pc, #108]	@ (800c8e0 <HAL_TIM_PWM_Start+0x210>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d009      	beq.n	800c88c <HAL_TIM_PWM_Start+0x1bc>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a1f      	ldr	r2, [pc, #124]	@ (800c8fc <HAL_TIM_PWM_Start+0x22c>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d004      	beq.n	800c88c <HAL_TIM_PWM_Start+0x1bc>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a1e      	ldr	r2, [pc, #120]	@ (800c900 <HAL_TIM_PWM_Start+0x230>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d115      	bne.n	800c8b8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	689a      	ldr	r2, [r3, #8]
 800c892:	4b1c      	ldr	r3, [pc, #112]	@ (800c904 <HAL_TIM_PWM_Start+0x234>)
 800c894:	4013      	ands	r3, r2
 800c896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2b06      	cmp	r3, #6
 800c89c:	d015      	beq.n	800c8ca <HAL_TIM_PWM_Start+0x1fa>
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8a4:	d011      	beq.n	800c8ca <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f042 0201 	orr.w	r2, r2, #1
 800c8b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8b6:	e008      	b.n	800c8ca <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f042 0201 	orr.w	r2, r2, #1
 800c8c6:	601a      	str	r2, [r3, #0]
 800c8c8:	e000      	b.n	800c8cc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3710      	adds	r7, #16
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	40010000 	.word	0x40010000
 800c8dc:	40010400 	.word	0x40010400
 800c8e0:	40014000 	.word	0x40014000
 800c8e4:	40014400 	.word	0x40014400
 800c8e8:	40014800 	.word	0x40014800
 800c8ec:	40000400 	.word	0x40000400
 800c8f0:	40000800 	.word	0x40000800
 800c8f4:	40000c00 	.word	0x40000c00
 800c8f8:	40001800 	.word	0x40001800
 800c8fc:	4000e000 	.word	0x4000e000
 800c900:	4000e400 	.word	0x4000e400
 800c904:	00010007 	.word	0x00010007

0800c908 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	68db      	ldr	r3, [r3, #12]
 800c916:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	691b      	ldr	r3, [r3, #16]
 800c91e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	f003 0302 	and.w	r3, r3, #2
 800c926:	2b00      	cmp	r3, #0
 800c928:	d020      	beq.n	800c96c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f003 0302 	and.w	r3, r3, #2
 800c930:	2b00      	cmp	r3, #0
 800c932:	d01b      	beq.n	800c96c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f06f 0202 	mvn.w	r2, #2
 800c93c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2201      	movs	r2, #1
 800c942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	699b      	ldr	r3, [r3, #24]
 800c94a:	f003 0303 	and.w	r3, r3, #3
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d003      	beq.n	800c95a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 fb70 	bl	800d038 <HAL_TIM_IC_CaptureCallback>
 800c958:	e005      	b.n	800c966 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 fb62 	bl	800d024 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fb73 	bl	800d04c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2200      	movs	r2, #0
 800c96a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	f003 0304 	and.w	r3, r3, #4
 800c972:	2b00      	cmp	r3, #0
 800c974:	d020      	beq.n	800c9b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	f003 0304 	and.w	r3, r3, #4
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d01b      	beq.n	800c9b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f06f 0204 	mvn.w	r2, #4
 800c988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2202      	movs	r2, #2
 800c98e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	699b      	ldr	r3, [r3, #24]
 800c996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d003      	beq.n	800c9a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 fb4a 	bl	800d038 <HAL_TIM_IC_CaptureCallback>
 800c9a4:	e005      	b.n	800c9b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 fb3c 	bl	800d024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 fb4d 	bl	800d04c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	f003 0308 	and.w	r3, r3, #8
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d020      	beq.n	800ca04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f003 0308 	and.w	r3, r3, #8
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d01b      	beq.n	800ca04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f06f 0208 	mvn.w	r2, #8
 800c9d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2204      	movs	r2, #4
 800c9da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	69db      	ldr	r3, [r3, #28]
 800c9e2:	f003 0303 	and.w	r3, r3, #3
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d003      	beq.n	800c9f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 fb24 	bl	800d038 <HAL_TIM_IC_CaptureCallback>
 800c9f0:	e005      	b.n	800c9fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 fb16 	bl	800d024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f000 fb27 	bl	800d04c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	f003 0310 	and.w	r3, r3, #16
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d020      	beq.n	800ca50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f003 0310 	and.w	r3, r3, #16
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d01b      	beq.n	800ca50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f06f 0210 	mvn.w	r2, #16
 800ca20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2208      	movs	r2, #8
 800ca26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	69db      	ldr	r3, [r3, #28]
 800ca2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d003      	beq.n	800ca3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f000 fafe 	bl	800d038 <HAL_TIM_IC_CaptureCallback>
 800ca3c:	e005      	b.n	800ca4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 faf0 	bl	800d024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 fb01 	bl	800d04c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	f003 0301 	and.w	r3, r3, #1
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d00c      	beq.n	800ca74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f003 0301 	and.w	r3, r3, #1
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d007      	beq.n	800ca74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f06f 0201 	mvn.w	r2, #1
 800ca6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7f4 ff86 	bl	8001980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d104      	bne.n	800ca88 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d00c      	beq.n	800caa2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d007      	beq.n	800caa2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ca9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f000 ffd5 	bl	800da4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d00c      	beq.n	800cac6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d007      	beq.n	800cac6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800cabe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f000 ffcd 	bl	800da60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d00c      	beq.n	800caea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d007      	beq.n	800caea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 fabb 	bl	800d060 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	f003 0320 	and.w	r3, r3, #32
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d00c      	beq.n	800cb0e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f003 0320 	and.w	r3, r3, #32
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d007      	beq.n	800cb0e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f06f 0220 	mvn.w	r2, #32
 800cb06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 ff95 	bl	800da38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cb0e:	bf00      	nop
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
	...

0800cb18 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b086      	sub	sp, #24
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	60b9      	str	r1, [r7, #8]
 800cb22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cb24:	2300      	movs	r3, #0
 800cb26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d101      	bne.n	800cb36 <HAL_TIM_OC_ConfigChannel+0x1e>
 800cb32:	2302      	movs	r3, #2
 800cb34:	e066      	b.n	800cc04 <HAL_TIM_OC_ConfigChannel+0xec>
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2201      	movs	r2, #1
 800cb3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2b14      	cmp	r3, #20
 800cb42:	d857      	bhi.n	800cbf4 <HAL_TIM_OC_ConfigChannel+0xdc>
 800cb44:	a201      	add	r2, pc, #4	@ (adr r2, 800cb4c <HAL_TIM_OC_ConfigChannel+0x34>)
 800cb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb4a:	bf00      	nop
 800cb4c:	0800cba1 	.word	0x0800cba1
 800cb50:	0800cbf5 	.word	0x0800cbf5
 800cb54:	0800cbf5 	.word	0x0800cbf5
 800cb58:	0800cbf5 	.word	0x0800cbf5
 800cb5c:	0800cbaf 	.word	0x0800cbaf
 800cb60:	0800cbf5 	.word	0x0800cbf5
 800cb64:	0800cbf5 	.word	0x0800cbf5
 800cb68:	0800cbf5 	.word	0x0800cbf5
 800cb6c:	0800cbbd 	.word	0x0800cbbd
 800cb70:	0800cbf5 	.word	0x0800cbf5
 800cb74:	0800cbf5 	.word	0x0800cbf5
 800cb78:	0800cbf5 	.word	0x0800cbf5
 800cb7c:	0800cbcb 	.word	0x0800cbcb
 800cb80:	0800cbf5 	.word	0x0800cbf5
 800cb84:	0800cbf5 	.word	0x0800cbf5
 800cb88:	0800cbf5 	.word	0x0800cbf5
 800cb8c:	0800cbd9 	.word	0x0800cbd9
 800cb90:	0800cbf5 	.word	0x0800cbf5
 800cb94:	0800cbf5 	.word	0x0800cbf5
 800cb98:	0800cbf5 	.word	0x0800cbf5
 800cb9c:	0800cbe7 	.word	0x0800cbe7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	68b9      	ldr	r1, [r7, #8]
 800cba6:	4618      	mov	r0, r3
 800cba8:	f000 fb10 	bl	800d1cc <TIM_OC1_SetConfig>
      break;
 800cbac:	e025      	b.n	800cbfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	68b9      	ldr	r1, [r7, #8]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f000 fb99 	bl	800d2ec <TIM_OC2_SetConfig>
      break;
 800cbba:	e01e      	b.n	800cbfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	68b9      	ldr	r1, [r7, #8]
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f000 fc1c 	bl	800d400 <TIM_OC3_SetConfig>
      break;
 800cbc8:	e017      	b.n	800cbfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	68b9      	ldr	r1, [r7, #8]
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f000 fc9d 	bl	800d510 <TIM_OC4_SetConfig>
      break;
 800cbd6:	e010      	b.n	800cbfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	68b9      	ldr	r1, [r7, #8]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f000 fd00 	bl	800d5e4 <TIM_OC5_SetConfig>
      break;
 800cbe4:	e009      	b.n	800cbfa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	68b9      	ldr	r1, [r7, #8]
 800cbec:	4618      	mov	r0, r3
 800cbee:	f000 fd5d 	bl	800d6ac <TIM_OC6_SetConfig>
      break;
 800cbf2:	e002      	b.n	800cbfa <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	75fb      	strb	r3, [r7, #23]
      break;
 800cbf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cc02:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3718      	adds	r7, #24
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b086      	sub	sp, #24
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d101      	bne.n	800cc2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cc26:	2302      	movs	r3, #2
 800cc28:	e0ff      	b.n	800ce2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2b14      	cmp	r3, #20
 800cc36:	f200 80f0 	bhi.w	800ce1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cc3a:	a201      	add	r2, pc, #4	@ (adr r2, 800cc40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc40:	0800cc95 	.word	0x0800cc95
 800cc44:	0800ce1b 	.word	0x0800ce1b
 800cc48:	0800ce1b 	.word	0x0800ce1b
 800cc4c:	0800ce1b 	.word	0x0800ce1b
 800cc50:	0800ccd5 	.word	0x0800ccd5
 800cc54:	0800ce1b 	.word	0x0800ce1b
 800cc58:	0800ce1b 	.word	0x0800ce1b
 800cc5c:	0800ce1b 	.word	0x0800ce1b
 800cc60:	0800cd17 	.word	0x0800cd17
 800cc64:	0800ce1b 	.word	0x0800ce1b
 800cc68:	0800ce1b 	.word	0x0800ce1b
 800cc6c:	0800ce1b 	.word	0x0800ce1b
 800cc70:	0800cd57 	.word	0x0800cd57
 800cc74:	0800ce1b 	.word	0x0800ce1b
 800cc78:	0800ce1b 	.word	0x0800ce1b
 800cc7c:	0800ce1b 	.word	0x0800ce1b
 800cc80:	0800cd99 	.word	0x0800cd99
 800cc84:	0800ce1b 	.word	0x0800ce1b
 800cc88:	0800ce1b 	.word	0x0800ce1b
 800cc8c:	0800ce1b 	.word	0x0800ce1b
 800cc90:	0800cdd9 	.word	0x0800cdd9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	68b9      	ldr	r1, [r7, #8]
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f000 fa96 	bl	800d1cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	699a      	ldr	r2, [r3, #24]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f042 0208 	orr.w	r2, r2, #8
 800ccae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	699a      	ldr	r2, [r3, #24]
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f022 0204 	bic.w	r2, r2, #4
 800ccbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	6999      	ldr	r1, [r3, #24]
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	691a      	ldr	r2, [r3, #16]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	430a      	orrs	r2, r1
 800ccd0:	619a      	str	r2, [r3, #24]
      break;
 800ccd2:	e0a5      	b.n	800ce20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	68b9      	ldr	r1, [r7, #8]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f000 fb06 	bl	800d2ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	699a      	ldr	r2, [r3, #24]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ccee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	699a      	ldr	r2, [r3, #24]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ccfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	6999      	ldr	r1, [r3, #24]
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	691b      	ldr	r3, [r3, #16]
 800cd0a:	021a      	lsls	r2, r3, #8
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	430a      	orrs	r2, r1
 800cd12:	619a      	str	r2, [r3, #24]
      break;
 800cd14:	e084      	b.n	800ce20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	68b9      	ldr	r1, [r7, #8]
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f000 fb6f 	bl	800d400 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	69da      	ldr	r2, [r3, #28]
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f042 0208 	orr.w	r2, r2, #8
 800cd30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	69da      	ldr	r2, [r3, #28]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f022 0204 	bic.w	r2, r2, #4
 800cd40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	69d9      	ldr	r1, [r3, #28]
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	691a      	ldr	r2, [r3, #16]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	430a      	orrs	r2, r1
 800cd52:	61da      	str	r2, [r3, #28]
      break;
 800cd54:	e064      	b.n	800ce20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	68b9      	ldr	r1, [r7, #8]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f000 fbd7 	bl	800d510 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	69da      	ldr	r2, [r3, #28]
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cd70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	69da      	ldr	r2, [r3, #28]
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cd80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	69d9      	ldr	r1, [r3, #28]
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	691b      	ldr	r3, [r3, #16]
 800cd8c:	021a      	lsls	r2, r3, #8
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	430a      	orrs	r2, r1
 800cd94:	61da      	str	r2, [r3, #28]
      break;
 800cd96:	e043      	b.n	800ce20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	68b9      	ldr	r1, [r7, #8]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f000 fc20 	bl	800d5e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f042 0208 	orr.w	r2, r2, #8
 800cdb2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f022 0204 	bic.w	r2, r2, #4
 800cdc2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	691a      	ldr	r2, [r3, #16]
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	430a      	orrs	r2, r1
 800cdd4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cdd6:	e023      	b.n	800ce20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68b9      	ldr	r1, [r7, #8]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f000 fc64 	bl	800d6ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cdf2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ce02:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	691b      	ldr	r3, [r3, #16]
 800ce0e:	021a      	lsls	r2, r3, #8
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	430a      	orrs	r2, r1
 800ce16:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ce18:	e002      	b.n	800ce20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	75fb      	strb	r3, [r7, #23]
      break;
 800ce1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ce28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3718      	adds	r7, #24
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop

0800ce34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d101      	bne.n	800ce50 <HAL_TIM_ConfigClockSource+0x1c>
 800ce4c:	2302      	movs	r3, #2
 800ce4e:	e0dc      	b.n	800d00a <HAL_TIM_ConfigClockSource+0x1d6>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2201      	movs	r2, #1
 800ce54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2202      	movs	r2, #2
 800ce5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	689b      	ldr	r3, [r3, #8]
 800ce66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ce68:	68ba      	ldr	r2, [r7, #8]
 800ce6a:	4b6a      	ldr	r3, [pc, #424]	@ (800d014 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ce6c:	4013      	ands	r3, r2
 800ce6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ce76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	68ba      	ldr	r2, [r7, #8]
 800ce7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a64      	ldr	r2, [pc, #400]	@ (800d018 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	f000 80a9 	beq.w	800cfde <HAL_TIM_ConfigClockSource+0x1aa>
 800ce8c:	4a62      	ldr	r2, [pc, #392]	@ (800d018 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	f200 80ae 	bhi.w	800cff0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce94:	4a61      	ldr	r2, [pc, #388]	@ (800d01c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	f000 80a1 	beq.w	800cfde <HAL_TIM_ConfigClockSource+0x1aa>
 800ce9c:	4a5f      	ldr	r2, [pc, #380]	@ (800d01c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	f200 80a6 	bhi.w	800cff0 <HAL_TIM_ConfigClockSource+0x1bc>
 800cea4:	4a5e      	ldr	r2, [pc, #376]	@ (800d020 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	f000 8099 	beq.w	800cfde <HAL_TIM_ConfigClockSource+0x1aa>
 800ceac:	4a5c      	ldr	r2, [pc, #368]	@ (800d020 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	f200 809e 	bhi.w	800cff0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ceb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ceb8:	f000 8091 	beq.w	800cfde <HAL_TIM_ConfigClockSource+0x1aa>
 800cebc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cec0:	f200 8096 	bhi.w	800cff0 <HAL_TIM_ConfigClockSource+0x1bc>
 800cec4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cec8:	f000 8089 	beq.w	800cfde <HAL_TIM_ConfigClockSource+0x1aa>
 800cecc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ced0:	f200 808e 	bhi.w	800cff0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ced4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ced8:	d03e      	beq.n	800cf58 <HAL_TIM_ConfigClockSource+0x124>
 800ceda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cede:	f200 8087 	bhi.w	800cff0 <HAL_TIM_ConfigClockSource+0x1bc>
 800cee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cee6:	f000 8086 	beq.w	800cff6 <HAL_TIM_ConfigClockSource+0x1c2>
 800ceea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ceee:	d87f      	bhi.n	800cff0 <HAL_TIM_ConfigClockSource+0x1bc>
 800cef0:	2b70      	cmp	r3, #112	@ 0x70
 800cef2:	d01a      	beq.n	800cf2a <HAL_TIM_ConfigClockSource+0xf6>
 800cef4:	2b70      	cmp	r3, #112	@ 0x70
 800cef6:	d87b      	bhi.n	800cff0 <HAL_TIM_ConfigClockSource+0x1bc>
 800cef8:	2b60      	cmp	r3, #96	@ 0x60
 800cefa:	d050      	beq.n	800cf9e <HAL_TIM_ConfigClockSource+0x16a>
 800cefc:	2b60      	cmp	r3, #96	@ 0x60
 800cefe:	d877      	bhi.n	800cff0 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf00:	2b50      	cmp	r3, #80	@ 0x50
 800cf02:	d03c      	beq.n	800cf7e <HAL_TIM_ConfigClockSource+0x14a>
 800cf04:	2b50      	cmp	r3, #80	@ 0x50
 800cf06:	d873      	bhi.n	800cff0 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf08:	2b40      	cmp	r3, #64	@ 0x40
 800cf0a:	d058      	beq.n	800cfbe <HAL_TIM_ConfigClockSource+0x18a>
 800cf0c:	2b40      	cmp	r3, #64	@ 0x40
 800cf0e:	d86f      	bhi.n	800cff0 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf10:	2b30      	cmp	r3, #48	@ 0x30
 800cf12:	d064      	beq.n	800cfde <HAL_TIM_ConfigClockSource+0x1aa>
 800cf14:	2b30      	cmp	r3, #48	@ 0x30
 800cf16:	d86b      	bhi.n	800cff0 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf18:	2b20      	cmp	r3, #32
 800cf1a:	d060      	beq.n	800cfde <HAL_TIM_ConfigClockSource+0x1aa>
 800cf1c:	2b20      	cmp	r3, #32
 800cf1e:	d867      	bhi.n	800cff0 <HAL_TIM_ConfigClockSource+0x1bc>
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d05c      	beq.n	800cfde <HAL_TIM_ConfigClockSource+0x1aa>
 800cf24:	2b10      	cmp	r3, #16
 800cf26:	d05a      	beq.n	800cfde <HAL_TIM_ConfigClockSource+0x1aa>
 800cf28:	e062      	b.n	800cff0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cf3a:	f000 fc9b 	bl	800d874 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cf4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	68ba      	ldr	r2, [r7, #8]
 800cf54:	609a      	str	r2, [r3, #8]
      break;
 800cf56:	e04f      	b.n	800cff8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cf68:	f000 fc84 	bl	800d874 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	689a      	ldr	r2, [r3, #8]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cf7a:	609a      	str	r2, [r3, #8]
      break;
 800cf7c:	e03c      	b.n	800cff8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	f000 fbf4 	bl	800d778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2150      	movs	r1, #80	@ 0x50
 800cf96:	4618      	mov	r0, r3
 800cf98:	f000 fc4e 	bl	800d838 <TIM_ITRx_SetConfig>
      break;
 800cf9c:	e02c      	b.n	800cff8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cfaa:	461a      	mov	r2, r3
 800cfac:	f000 fc13 	bl	800d7d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2160      	movs	r1, #96	@ 0x60
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f000 fc3e 	bl	800d838 <TIM_ITRx_SetConfig>
      break;
 800cfbc:	e01c      	b.n	800cff8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cfca:	461a      	mov	r2, r3
 800cfcc:	f000 fbd4 	bl	800d778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2140      	movs	r1, #64	@ 0x40
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f000 fc2e 	bl	800d838 <TIM_ITRx_SetConfig>
      break;
 800cfdc:	e00c      	b.n	800cff8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	4610      	mov	r0, r2
 800cfea:	f000 fc25 	bl	800d838 <TIM_ITRx_SetConfig>
      break;
 800cfee:	e003      	b.n	800cff8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cff0:	2301      	movs	r3, #1
 800cff2:	73fb      	strb	r3, [r7, #15]
      break;
 800cff4:	e000      	b.n	800cff8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d008:	7bfb      	ldrb	r3, [r7, #15]
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	ffceff88 	.word	0xffceff88
 800d018:	00100040 	.word	0x00100040
 800d01c:	00100030 	.word	0x00100030
 800d020:	00100020 	.word	0x00100020

0800d024 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d02c:	bf00      	nop
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr

0800d038 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d040:	bf00      	nop
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d054:	bf00      	nop
 800d056:	370c      	adds	r7, #12
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d068:	bf00      	nop
 800d06a:	370c      	adds	r7, #12
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr

0800d074 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d074:	b480      	push	{r7}
 800d076:	b085      	sub	sp, #20
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	4a47      	ldr	r2, [pc, #284]	@ (800d1a4 <TIM_Base_SetConfig+0x130>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d013      	beq.n	800d0b4 <TIM_Base_SetConfig+0x40>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d092:	d00f      	beq.n	800d0b4 <TIM_Base_SetConfig+0x40>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	4a44      	ldr	r2, [pc, #272]	@ (800d1a8 <TIM_Base_SetConfig+0x134>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d00b      	beq.n	800d0b4 <TIM_Base_SetConfig+0x40>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	4a43      	ldr	r2, [pc, #268]	@ (800d1ac <TIM_Base_SetConfig+0x138>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d007      	beq.n	800d0b4 <TIM_Base_SetConfig+0x40>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	4a42      	ldr	r2, [pc, #264]	@ (800d1b0 <TIM_Base_SetConfig+0x13c>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d003      	beq.n	800d0b4 <TIM_Base_SetConfig+0x40>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	4a41      	ldr	r2, [pc, #260]	@ (800d1b4 <TIM_Base_SetConfig+0x140>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d108      	bne.n	800d0c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	68fa      	ldr	r2, [r7, #12]
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	4a36      	ldr	r2, [pc, #216]	@ (800d1a4 <TIM_Base_SetConfig+0x130>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d027      	beq.n	800d11e <TIM_Base_SetConfig+0xaa>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0d4:	d023      	beq.n	800d11e <TIM_Base_SetConfig+0xaa>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	4a33      	ldr	r2, [pc, #204]	@ (800d1a8 <TIM_Base_SetConfig+0x134>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d01f      	beq.n	800d11e <TIM_Base_SetConfig+0xaa>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4a32      	ldr	r2, [pc, #200]	@ (800d1ac <TIM_Base_SetConfig+0x138>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d01b      	beq.n	800d11e <TIM_Base_SetConfig+0xaa>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4a31      	ldr	r2, [pc, #196]	@ (800d1b0 <TIM_Base_SetConfig+0x13c>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d017      	beq.n	800d11e <TIM_Base_SetConfig+0xaa>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4a30      	ldr	r2, [pc, #192]	@ (800d1b4 <TIM_Base_SetConfig+0x140>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d013      	beq.n	800d11e <TIM_Base_SetConfig+0xaa>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	4a2f      	ldr	r2, [pc, #188]	@ (800d1b8 <TIM_Base_SetConfig+0x144>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d00f      	beq.n	800d11e <TIM_Base_SetConfig+0xaa>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	4a2e      	ldr	r2, [pc, #184]	@ (800d1bc <TIM_Base_SetConfig+0x148>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d00b      	beq.n	800d11e <TIM_Base_SetConfig+0xaa>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	4a2d      	ldr	r2, [pc, #180]	@ (800d1c0 <TIM_Base_SetConfig+0x14c>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d007      	beq.n	800d11e <TIM_Base_SetConfig+0xaa>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	4a2c      	ldr	r2, [pc, #176]	@ (800d1c4 <TIM_Base_SetConfig+0x150>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d003      	beq.n	800d11e <TIM_Base_SetConfig+0xaa>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	4a2b      	ldr	r2, [pc, #172]	@ (800d1c8 <TIM_Base_SetConfig+0x154>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d108      	bne.n	800d130 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	68fa      	ldr	r2, [r7, #12]
 800d12c:	4313      	orrs	r3, r2
 800d12e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	695b      	ldr	r3, [r3, #20]
 800d13a:	4313      	orrs	r3, r2
 800d13c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	689a      	ldr	r2, [r3, #8]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	4a14      	ldr	r2, [pc, #80]	@ (800d1a4 <TIM_Base_SetConfig+0x130>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d00f      	beq.n	800d176 <TIM_Base_SetConfig+0x102>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	4a16      	ldr	r2, [pc, #88]	@ (800d1b4 <TIM_Base_SetConfig+0x140>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d00b      	beq.n	800d176 <TIM_Base_SetConfig+0x102>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	4a15      	ldr	r2, [pc, #84]	@ (800d1b8 <TIM_Base_SetConfig+0x144>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d007      	beq.n	800d176 <TIM_Base_SetConfig+0x102>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	4a14      	ldr	r2, [pc, #80]	@ (800d1bc <TIM_Base_SetConfig+0x148>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d003      	beq.n	800d176 <TIM_Base_SetConfig+0x102>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	4a13      	ldr	r2, [pc, #76]	@ (800d1c0 <TIM_Base_SetConfig+0x14c>)
 800d172:	4293      	cmp	r3, r2
 800d174:	d103      	bne.n	800d17e <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	691a      	ldr	r2, [r3, #16]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f043 0204 	orr.w	r2, r3, #4
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2201      	movs	r2, #1
 800d18e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	601a      	str	r2, [r3, #0]
}
 800d196:	bf00      	nop
 800d198:	3714      	adds	r7, #20
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr
 800d1a2:	bf00      	nop
 800d1a4:	40010000 	.word	0x40010000
 800d1a8:	40000400 	.word	0x40000400
 800d1ac:	40000800 	.word	0x40000800
 800d1b0:	40000c00 	.word	0x40000c00
 800d1b4:	40010400 	.word	0x40010400
 800d1b8:	40014000 	.word	0x40014000
 800d1bc:	40014400 	.word	0x40014400
 800d1c0:	40014800 	.word	0x40014800
 800d1c4:	4000e000 	.word	0x4000e000
 800d1c8:	4000e400 	.word	0x4000e400

0800d1cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b087      	sub	sp, #28
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6a1b      	ldr	r3, [r3, #32]
 800d1da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6a1b      	ldr	r3, [r3, #32]
 800d1e0:	f023 0201 	bic.w	r2, r3, #1
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	699b      	ldr	r3, [r3, #24]
 800d1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	4b37      	ldr	r3, [pc, #220]	@ (800d2d4 <TIM_OC1_SetConfig+0x108>)
 800d1f8:	4013      	ands	r3, r2
 800d1fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f023 0303 	bic.w	r3, r3, #3
 800d202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	4313      	orrs	r3, r2
 800d20c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	f023 0302 	bic.w	r3, r3, #2
 800d214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	4313      	orrs	r3, r2
 800d21e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	4a2d      	ldr	r2, [pc, #180]	@ (800d2d8 <TIM_OC1_SetConfig+0x10c>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d00f      	beq.n	800d248 <TIM_OC1_SetConfig+0x7c>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	4a2c      	ldr	r2, [pc, #176]	@ (800d2dc <TIM_OC1_SetConfig+0x110>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d00b      	beq.n	800d248 <TIM_OC1_SetConfig+0x7c>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	4a2b      	ldr	r2, [pc, #172]	@ (800d2e0 <TIM_OC1_SetConfig+0x114>)
 800d234:	4293      	cmp	r3, r2
 800d236:	d007      	beq.n	800d248 <TIM_OC1_SetConfig+0x7c>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	4a2a      	ldr	r2, [pc, #168]	@ (800d2e4 <TIM_OC1_SetConfig+0x118>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d003      	beq.n	800d248 <TIM_OC1_SetConfig+0x7c>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	4a29      	ldr	r2, [pc, #164]	@ (800d2e8 <TIM_OC1_SetConfig+0x11c>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d10c      	bne.n	800d262 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	f023 0308 	bic.w	r3, r3, #8
 800d24e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	697a      	ldr	r2, [r7, #20]
 800d256:	4313      	orrs	r3, r2
 800d258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	f023 0304 	bic.w	r3, r3, #4
 800d260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	4a1c      	ldr	r2, [pc, #112]	@ (800d2d8 <TIM_OC1_SetConfig+0x10c>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d00f      	beq.n	800d28a <TIM_OC1_SetConfig+0xbe>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	4a1b      	ldr	r2, [pc, #108]	@ (800d2dc <TIM_OC1_SetConfig+0x110>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d00b      	beq.n	800d28a <TIM_OC1_SetConfig+0xbe>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	4a1a      	ldr	r2, [pc, #104]	@ (800d2e0 <TIM_OC1_SetConfig+0x114>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d007      	beq.n	800d28a <TIM_OC1_SetConfig+0xbe>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	4a19      	ldr	r2, [pc, #100]	@ (800d2e4 <TIM_OC1_SetConfig+0x118>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d003      	beq.n	800d28a <TIM_OC1_SetConfig+0xbe>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	4a18      	ldr	r2, [pc, #96]	@ (800d2e8 <TIM_OC1_SetConfig+0x11c>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d111      	bne.n	800d2ae <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	695b      	ldr	r3, [r3, #20]
 800d29e:	693a      	ldr	r2, [r7, #16]
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	699b      	ldr	r3, [r3, #24]
 800d2a8:	693a      	ldr	r2, [r7, #16]
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	693a      	ldr	r2, [r7, #16]
 800d2b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	685a      	ldr	r2, [r3, #4]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	697a      	ldr	r2, [r7, #20]
 800d2c6:	621a      	str	r2, [r3, #32]
}
 800d2c8:	bf00      	nop
 800d2ca:	371c      	adds	r7, #28
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	fffeff8f 	.word	0xfffeff8f
 800d2d8:	40010000 	.word	0x40010000
 800d2dc:	40010400 	.word	0x40010400
 800d2e0:	40014000 	.word	0x40014000
 800d2e4:	40014400 	.word	0x40014400
 800d2e8:	40014800 	.word	0x40014800

0800d2ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b087      	sub	sp, #28
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6a1b      	ldr	r3, [r3, #32]
 800d2fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6a1b      	ldr	r3, [r3, #32]
 800d300:	f023 0210 	bic.w	r2, r3, #16
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	699b      	ldr	r3, [r3, #24]
 800d312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	4b34      	ldr	r3, [pc, #208]	@ (800d3e8 <TIM_OC2_SetConfig+0xfc>)
 800d318:	4013      	ands	r3, r2
 800d31a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	021b      	lsls	r3, r3, #8
 800d32a:	68fa      	ldr	r2, [r7, #12]
 800d32c:	4313      	orrs	r3, r2
 800d32e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	f023 0320 	bic.w	r3, r3, #32
 800d336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	011b      	lsls	r3, r3, #4
 800d33e:	697a      	ldr	r2, [r7, #20]
 800d340:	4313      	orrs	r3, r2
 800d342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	4a29      	ldr	r2, [pc, #164]	@ (800d3ec <TIM_OC2_SetConfig+0x100>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d003      	beq.n	800d354 <TIM_OC2_SetConfig+0x68>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	4a28      	ldr	r2, [pc, #160]	@ (800d3f0 <TIM_OC2_SetConfig+0x104>)
 800d350:	4293      	cmp	r3, r2
 800d352:	d10d      	bne.n	800d370 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d35a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	011b      	lsls	r3, r3, #4
 800d362:	697a      	ldr	r2, [r7, #20]
 800d364:	4313      	orrs	r3, r2
 800d366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d36e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	4a1e      	ldr	r2, [pc, #120]	@ (800d3ec <TIM_OC2_SetConfig+0x100>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d00f      	beq.n	800d398 <TIM_OC2_SetConfig+0xac>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	4a1d      	ldr	r2, [pc, #116]	@ (800d3f0 <TIM_OC2_SetConfig+0x104>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d00b      	beq.n	800d398 <TIM_OC2_SetConfig+0xac>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	4a1c      	ldr	r2, [pc, #112]	@ (800d3f4 <TIM_OC2_SetConfig+0x108>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d007      	beq.n	800d398 <TIM_OC2_SetConfig+0xac>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	4a1b      	ldr	r2, [pc, #108]	@ (800d3f8 <TIM_OC2_SetConfig+0x10c>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d003      	beq.n	800d398 <TIM_OC2_SetConfig+0xac>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	4a1a      	ldr	r2, [pc, #104]	@ (800d3fc <TIM_OC2_SetConfig+0x110>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d113      	bne.n	800d3c0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d39e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d3a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	695b      	ldr	r3, [r3, #20]
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	693a      	ldr	r2, [r7, #16]
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	699b      	ldr	r3, [r3, #24]
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	693a      	ldr	r2, [r7, #16]
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	693a      	ldr	r2, [r7, #16]
 800d3c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	685a      	ldr	r2, [r3, #4]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	697a      	ldr	r2, [r7, #20]
 800d3d8:	621a      	str	r2, [r3, #32]
}
 800d3da:	bf00      	nop
 800d3dc:	371c      	adds	r7, #28
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop
 800d3e8:	feff8fff 	.word	0xfeff8fff
 800d3ec:	40010000 	.word	0x40010000
 800d3f0:	40010400 	.word	0x40010400
 800d3f4:	40014000 	.word	0x40014000
 800d3f8:	40014400 	.word	0x40014400
 800d3fc:	40014800 	.word	0x40014800

0800d400 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d400:	b480      	push	{r7}
 800d402:	b087      	sub	sp, #28
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6a1b      	ldr	r3, [r3, #32]
 800d40e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6a1b      	ldr	r3, [r3, #32]
 800d414:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	69db      	ldr	r3, [r3, #28]
 800d426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	4b33      	ldr	r3, [pc, #204]	@ (800d4f8 <TIM_OC3_SetConfig+0xf8>)
 800d42c:	4013      	ands	r3, r2
 800d42e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f023 0303 	bic.w	r3, r3, #3
 800d436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	68fa      	ldr	r2, [r7, #12]
 800d43e:	4313      	orrs	r3, r2
 800d440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	689b      	ldr	r3, [r3, #8]
 800d44e:	021b      	lsls	r3, r3, #8
 800d450:	697a      	ldr	r2, [r7, #20]
 800d452:	4313      	orrs	r3, r2
 800d454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4a28      	ldr	r2, [pc, #160]	@ (800d4fc <TIM_OC3_SetConfig+0xfc>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d003      	beq.n	800d466 <TIM_OC3_SetConfig+0x66>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4a27      	ldr	r2, [pc, #156]	@ (800d500 <TIM_OC3_SetConfig+0x100>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d10d      	bne.n	800d482 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d46c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	021b      	lsls	r3, r3, #8
 800d474:	697a      	ldr	r2, [r7, #20]
 800d476:	4313      	orrs	r3, r2
 800d478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	4a1d      	ldr	r2, [pc, #116]	@ (800d4fc <TIM_OC3_SetConfig+0xfc>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d00f      	beq.n	800d4aa <TIM_OC3_SetConfig+0xaa>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	4a1c      	ldr	r2, [pc, #112]	@ (800d500 <TIM_OC3_SetConfig+0x100>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d00b      	beq.n	800d4aa <TIM_OC3_SetConfig+0xaa>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	4a1b      	ldr	r2, [pc, #108]	@ (800d504 <TIM_OC3_SetConfig+0x104>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d007      	beq.n	800d4aa <TIM_OC3_SetConfig+0xaa>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4a1a      	ldr	r2, [pc, #104]	@ (800d508 <TIM_OC3_SetConfig+0x108>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d003      	beq.n	800d4aa <TIM_OC3_SetConfig+0xaa>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	4a19      	ldr	r2, [pc, #100]	@ (800d50c <TIM_OC3_SetConfig+0x10c>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d113      	bne.n	800d4d2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d4b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d4b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	695b      	ldr	r3, [r3, #20]
 800d4be:	011b      	lsls	r3, r3, #4
 800d4c0:	693a      	ldr	r2, [r7, #16]
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	699b      	ldr	r3, [r3, #24]
 800d4ca:	011b      	lsls	r3, r3, #4
 800d4cc:	693a      	ldr	r2, [r7, #16]
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	693a      	ldr	r2, [r7, #16]
 800d4d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	68fa      	ldr	r2, [r7, #12]
 800d4dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	685a      	ldr	r2, [r3, #4]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	697a      	ldr	r2, [r7, #20]
 800d4ea:	621a      	str	r2, [r3, #32]
}
 800d4ec:	bf00      	nop
 800d4ee:	371c      	adds	r7, #28
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr
 800d4f8:	fffeff8f 	.word	0xfffeff8f
 800d4fc:	40010000 	.word	0x40010000
 800d500:	40010400 	.word	0x40010400
 800d504:	40014000 	.word	0x40014000
 800d508:	40014400 	.word	0x40014400
 800d50c:	40014800 	.word	0x40014800

0800d510 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d510:	b480      	push	{r7}
 800d512:	b087      	sub	sp, #28
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a1b      	ldr	r3, [r3, #32]
 800d51e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6a1b      	ldr	r3, [r3, #32]
 800d524:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	69db      	ldr	r3, [r3, #28]
 800d536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d538:	68fa      	ldr	r2, [r7, #12]
 800d53a:	4b24      	ldr	r3, [pc, #144]	@ (800d5cc <TIM_OC4_SetConfig+0xbc>)
 800d53c:	4013      	ands	r3, r2
 800d53e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	021b      	lsls	r3, r3, #8
 800d54e:	68fa      	ldr	r2, [r7, #12]
 800d550:	4313      	orrs	r3, r2
 800d552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d55a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	031b      	lsls	r3, r3, #12
 800d562:	693a      	ldr	r2, [r7, #16]
 800d564:	4313      	orrs	r3, r2
 800d566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	4a19      	ldr	r2, [pc, #100]	@ (800d5d0 <TIM_OC4_SetConfig+0xc0>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d00f      	beq.n	800d590 <TIM_OC4_SetConfig+0x80>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	4a18      	ldr	r2, [pc, #96]	@ (800d5d4 <TIM_OC4_SetConfig+0xc4>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d00b      	beq.n	800d590 <TIM_OC4_SetConfig+0x80>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	4a17      	ldr	r2, [pc, #92]	@ (800d5d8 <TIM_OC4_SetConfig+0xc8>)
 800d57c:	4293      	cmp	r3, r2
 800d57e:	d007      	beq.n	800d590 <TIM_OC4_SetConfig+0x80>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	4a16      	ldr	r2, [pc, #88]	@ (800d5dc <TIM_OC4_SetConfig+0xcc>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d003      	beq.n	800d590 <TIM_OC4_SetConfig+0x80>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	4a15      	ldr	r2, [pc, #84]	@ (800d5e0 <TIM_OC4_SetConfig+0xd0>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d109      	bne.n	800d5a4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	695b      	ldr	r3, [r3, #20]
 800d59c:	019b      	lsls	r3, r3, #6
 800d59e:	697a      	ldr	r2, [r7, #20]
 800d5a0:	4313      	orrs	r3, r2
 800d5a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	697a      	ldr	r2, [r7, #20]
 800d5a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	68fa      	ldr	r2, [r7, #12]
 800d5ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	685a      	ldr	r2, [r3, #4]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	693a      	ldr	r2, [r7, #16]
 800d5bc:	621a      	str	r2, [r3, #32]
}
 800d5be:	bf00      	nop
 800d5c0:	371c      	adds	r7, #28
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop
 800d5cc:	feff8fff 	.word	0xfeff8fff
 800d5d0:	40010000 	.word	0x40010000
 800d5d4:	40010400 	.word	0x40010400
 800d5d8:	40014000 	.word	0x40014000
 800d5dc:	40014400 	.word	0x40014400
 800d5e0:	40014800 	.word	0x40014800

0800d5e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b087      	sub	sp, #28
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6a1b      	ldr	r3, [r3, #32]
 800d5f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6a1b      	ldr	r3, [r3, #32]
 800d5f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d60a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d60c:	68fa      	ldr	r2, [r7, #12]
 800d60e:	4b21      	ldr	r3, [pc, #132]	@ (800d694 <TIM_OC5_SetConfig+0xb0>)
 800d610:	4013      	ands	r3, r2
 800d612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	68fa      	ldr	r2, [r7, #12]
 800d61a:	4313      	orrs	r3, r2
 800d61c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d624:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	689b      	ldr	r3, [r3, #8]
 800d62a:	041b      	lsls	r3, r3, #16
 800d62c:	693a      	ldr	r2, [r7, #16]
 800d62e:	4313      	orrs	r3, r2
 800d630:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	4a18      	ldr	r2, [pc, #96]	@ (800d698 <TIM_OC5_SetConfig+0xb4>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d00f      	beq.n	800d65a <TIM_OC5_SetConfig+0x76>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4a17      	ldr	r2, [pc, #92]	@ (800d69c <TIM_OC5_SetConfig+0xb8>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d00b      	beq.n	800d65a <TIM_OC5_SetConfig+0x76>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	4a16      	ldr	r2, [pc, #88]	@ (800d6a0 <TIM_OC5_SetConfig+0xbc>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d007      	beq.n	800d65a <TIM_OC5_SetConfig+0x76>
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4a15      	ldr	r2, [pc, #84]	@ (800d6a4 <TIM_OC5_SetConfig+0xc0>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d003      	beq.n	800d65a <TIM_OC5_SetConfig+0x76>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	4a14      	ldr	r2, [pc, #80]	@ (800d6a8 <TIM_OC5_SetConfig+0xc4>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d109      	bne.n	800d66e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d660:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	695b      	ldr	r3, [r3, #20]
 800d666:	021b      	lsls	r3, r3, #8
 800d668:	697a      	ldr	r2, [r7, #20]
 800d66a:	4313      	orrs	r3, r2
 800d66c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	697a      	ldr	r2, [r7, #20]
 800d672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	68fa      	ldr	r2, [r7, #12]
 800d678:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	685a      	ldr	r2, [r3, #4]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	693a      	ldr	r2, [r7, #16]
 800d686:	621a      	str	r2, [r3, #32]
}
 800d688:	bf00      	nop
 800d68a:	371c      	adds	r7, #28
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr
 800d694:	fffeff8f 	.word	0xfffeff8f
 800d698:	40010000 	.word	0x40010000
 800d69c:	40010400 	.word	0x40010400
 800d6a0:	40014000 	.word	0x40014000
 800d6a4:	40014400 	.word	0x40014400
 800d6a8:	40014800 	.word	0x40014800

0800d6ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b087      	sub	sp, #28
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6a1b      	ldr	r3, [r3, #32]
 800d6ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6a1b      	ldr	r3, [r3, #32]
 800d6c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	4b22      	ldr	r3, [pc, #136]	@ (800d760 <TIM_OC6_SetConfig+0xb4>)
 800d6d8:	4013      	ands	r3, r2
 800d6da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	021b      	lsls	r3, r3, #8
 800d6e2:	68fa      	ldr	r2, [r7, #12]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d6ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	689b      	ldr	r3, [r3, #8]
 800d6f4:	051b      	lsls	r3, r3, #20
 800d6f6:	693a      	ldr	r2, [r7, #16]
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	4a19      	ldr	r2, [pc, #100]	@ (800d764 <TIM_OC6_SetConfig+0xb8>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d00f      	beq.n	800d724 <TIM_OC6_SetConfig+0x78>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	4a18      	ldr	r2, [pc, #96]	@ (800d768 <TIM_OC6_SetConfig+0xbc>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d00b      	beq.n	800d724 <TIM_OC6_SetConfig+0x78>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	4a17      	ldr	r2, [pc, #92]	@ (800d76c <TIM_OC6_SetConfig+0xc0>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d007      	beq.n	800d724 <TIM_OC6_SetConfig+0x78>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	4a16      	ldr	r2, [pc, #88]	@ (800d770 <TIM_OC6_SetConfig+0xc4>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d003      	beq.n	800d724 <TIM_OC6_SetConfig+0x78>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	4a15      	ldr	r2, [pc, #84]	@ (800d774 <TIM_OC6_SetConfig+0xc8>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d109      	bne.n	800d738 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d72a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	695b      	ldr	r3, [r3, #20]
 800d730:	029b      	lsls	r3, r3, #10
 800d732:	697a      	ldr	r2, [r7, #20]
 800d734:	4313      	orrs	r3, r2
 800d736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	697a      	ldr	r2, [r7, #20]
 800d73c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	68fa      	ldr	r2, [r7, #12]
 800d742:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	685a      	ldr	r2, [r3, #4]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	693a      	ldr	r2, [r7, #16]
 800d750:	621a      	str	r2, [r3, #32]
}
 800d752:	bf00      	nop
 800d754:	371c      	adds	r7, #28
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr
 800d75e:	bf00      	nop
 800d760:	feff8fff 	.word	0xfeff8fff
 800d764:	40010000 	.word	0x40010000
 800d768:	40010400 	.word	0x40010400
 800d76c:	40014000 	.word	0x40014000
 800d770:	40014400 	.word	0x40014400
 800d774:	40014800 	.word	0x40014800

0800d778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d778:	b480      	push	{r7}
 800d77a:	b087      	sub	sp, #28
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	6a1b      	ldr	r3, [r3, #32]
 800d788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	6a1b      	ldr	r3, [r3, #32]
 800d78e:	f023 0201 	bic.w	r2, r3, #1
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	699b      	ldr	r3, [r3, #24]
 800d79a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d7a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	011b      	lsls	r3, r3, #4
 800d7a8:	693a      	ldr	r2, [r7, #16]
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	f023 030a 	bic.w	r3, r3, #10
 800d7b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d7b6:	697a      	ldr	r2, [r7, #20]
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	693a      	ldr	r2, [r7, #16]
 800d7c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	697a      	ldr	r2, [r7, #20]
 800d7c8:	621a      	str	r2, [r3, #32]
}
 800d7ca:	bf00      	nop
 800d7cc:	371c      	adds	r7, #28
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr

0800d7d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d7d6:	b480      	push	{r7}
 800d7d8:	b087      	sub	sp, #28
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	60f8      	str	r0, [r7, #12]
 800d7de:	60b9      	str	r1, [r7, #8]
 800d7e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	6a1b      	ldr	r3, [r3, #32]
 800d7e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	6a1b      	ldr	r3, [r3, #32]
 800d7ec:	f023 0210 	bic.w	r2, r3, #16
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	699b      	ldr	r3, [r3, #24]
 800d7f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d800:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	031b      	lsls	r3, r3, #12
 800d806:	693a      	ldr	r2, [r7, #16]
 800d808:	4313      	orrs	r3, r2
 800d80a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d812:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	011b      	lsls	r3, r3, #4
 800d818:	697a      	ldr	r2, [r7, #20]
 800d81a:	4313      	orrs	r3, r2
 800d81c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	693a      	ldr	r2, [r7, #16]
 800d822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	697a      	ldr	r2, [r7, #20]
 800d828:	621a      	str	r2, [r3, #32]
}
 800d82a:	bf00      	nop
 800d82c:	371c      	adds	r7, #28
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr
	...

0800d838 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d838:	b480      	push	{r7}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	4b09      	ldr	r3, [pc, #36]	@ (800d870 <TIM_ITRx_SetConfig+0x38>)
 800d84c:	4013      	ands	r3, r2
 800d84e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d850:	683a      	ldr	r2, [r7, #0]
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	4313      	orrs	r3, r2
 800d856:	f043 0307 	orr.w	r3, r3, #7
 800d85a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	68fa      	ldr	r2, [r7, #12]
 800d860:	609a      	str	r2, [r3, #8]
}
 800d862:	bf00      	nop
 800d864:	3714      	adds	r7, #20
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop
 800d870:	ffcfff8f 	.word	0xffcfff8f

0800d874 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d874:	b480      	push	{r7}
 800d876:	b087      	sub	sp, #28
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	60b9      	str	r1, [r7, #8]
 800d87e:	607a      	str	r2, [r7, #4]
 800d880:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d88e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	021a      	lsls	r2, r3, #8
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	431a      	orrs	r2, r3
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	4313      	orrs	r3, r2
 800d89c:	697a      	ldr	r2, [r7, #20]
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	697a      	ldr	r2, [r7, #20]
 800d8a6:	609a      	str	r2, [r3, #8]
}
 800d8a8:	bf00      	nop
 800d8aa:	371c      	adds	r7, #28
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b087      	sub	sp, #28
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	f003 031f 	and.w	r3, r3, #31
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d8cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	6a1a      	ldr	r2, [r3, #32]
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	43db      	mvns	r3, r3
 800d8d6:	401a      	ands	r2, r3
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	6a1a      	ldr	r2, [r3, #32]
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	f003 031f 	and.w	r3, r3, #31
 800d8e6:	6879      	ldr	r1, [r7, #4]
 800d8e8:	fa01 f303 	lsl.w	r3, r1, r3
 800d8ec:	431a      	orrs	r2, r3
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	621a      	str	r2, [r3, #32]
}
 800d8f2:	bf00      	nop
 800d8f4:	371c      	adds	r7, #28
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr
	...

0800d900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d900:	b480      	push	{r7}
 800d902:	b085      	sub	sp, #20
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d910:	2b01      	cmp	r3, #1
 800d912:	d101      	bne.n	800d918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d914:	2302      	movs	r3, #2
 800d916:	e077      	b.n	800da08 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2201      	movs	r2, #1
 800d91c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2202      	movs	r2, #2
 800d924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	689b      	ldr	r3, [r3, #8]
 800d936:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a35      	ldr	r2, [pc, #212]	@ (800da14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d004      	beq.n	800d94c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a34      	ldr	r2, [pc, #208]	@ (800da18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d108      	bne.n	800d95e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d952:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	4313      	orrs	r3, r2
 800d95c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d964:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	68fa      	ldr	r2, [r7, #12]
 800d96c:	4313      	orrs	r3, r2
 800d96e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	68fa      	ldr	r2, [r7, #12]
 800d976:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4a25      	ldr	r2, [pc, #148]	@ (800da14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d02c      	beq.n	800d9dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d98a:	d027      	beq.n	800d9dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a22      	ldr	r2, [pc, #136]	@ (800da1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d022      	beq.n	800d9dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4a21      	ldr	r2, [pc, #132]	@ (800da20 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d01d      	beq.n	800d9dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a1f      	ldr	r2, [pc, #124]	@ (800da24 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d018      	beq.n	800d9dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4a1a      	ldr	r2, [pc, #104]	@ (800da18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d013      	beq.n	800d9dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a1b      	ldr	r2, [pc, #108]	@ (800da28 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d00e      	beq.n	800d9dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4a1a      	ldr	r2, [pc, #104]	@ (800da2c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d009      	beq.n	800d9dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a18      	ldr	r2, [pc, #96]	@ (800da30 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d004      	beq.n	800d9dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	4a17      	ldr	r2, [pc, #92]	@ (800da34 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d10c      	bne.n	800d9f6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d9e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	689b      	ldr	r3, [r3, #8]
 800d9e8:	68ba      	ldr	r2, [r7, #8]
 800d9ea:	4313      	orrs	r3, r2
 800d9ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	68ba      	ldr	r2, [r7, #8]
 800d9f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2201      	movs	r2, #1
 800d9fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800da06:	2300      	movs	r3, #0
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3714      	adds	r7, #20
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr
 800da14:	40010000 	.word	0x40010000
 800da18:	40010400 	.word	0x40010400
 800da1c:	40000400 	.word	0x40000400
 800da20:	40000800 	.word	0x40000800
 800da24:	40000c00 	.word	0x40000c00
 800da28:	40001800 	.word	0x40001800
 800da2c:	40014000 	.word	0x40014000
 800da30:	4000e000 	.word	0x4000e000
 800da34:	4000e400 	.word	0x4000e400

0800da38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800da38:	b480      	push	{r7}
 800da3a:	b083      	sub	sp, #12
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800da40:	bf00      	nop
 800da42:	370c      	adds	r7, #12
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr

0800da4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b083      	sub	sp, #12
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800da54:	bf00      	nop
 800da56:	370c      	adds	r7, #12
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr

0800da60 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800da60:	b480      	push	{r7}
 800da62:	b083      	sub	sp, #12
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800da68:	bf00      	nop
 800da6a:	370c      	adds	r7, #12
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr

0800da74 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
    {
 800da7c:	4a04      	ldr	r2, [pc, #16]	@ (800da90 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	601a      	str	r2, [r3, #0]
    }
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4618      	mov	r0, r3
 800da86:	370c      	adds	r7, #12
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr
 800da90:	08010520 	.word	0x08010520

0800da94 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800da94:	b580      	push	{r7, lr}
 800da96:	b082      	sub	sp, #8
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
    }
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f7ff ffe9 	bl	800da74 <_ZN8touchgfx4FontD1Ev>
 800daa2:	2114      	movs	r1, #20
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f001 fb6c 	bl	800f182 <_ZdlPvj>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	4618      	mov	r0, r3
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800dab4:	b590      	push	{r4, r7, lr}
 800dab6:	b087      	sub	sp, #28
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	460b      	mov	r3, r1
 800dabe:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800dac0:	887b      	ldrh	r3, [r7, #2]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d101      	bne.n	800daca <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800dac6:	2300      	movs	r3, #0
 800dac8:	e010      	b.n	800daec <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800daca:	2300      	movs	r3, #0
 800dacc:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800dace:	2300      	movs	r3, #0
 800dad0:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	3308      	adds	r3, #8
 800dad8:	681c      	ldr	r4, [r3, #0]
 800dada:	f107 030f 	add.w	r3, r7, #15
 800dade:	f107 0210 	add.w	r2, r7, #16
 800dae2:	8879      	ldrh	r1, [r7, #2]
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	47a0      	blx	r4
 800dae8:	6178      	str	r0, [r7, #20]
        return glyph;
 800daea:	697b      	ldr	r3, [r7, #20]
    }
 800daec:	4618      	mov	r0, r3
 800daee:	371c      	adds	r7, #28
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd90      	pop	{r4, r7, pc}

0800daf4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	89db      	ldrh	r3, [r3, #14]
    }
 800db00:	4618      	mov	r0, r3
 800db02:	370c      	adds	r7, #12
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr

0800db0c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800db0c:	b480      	push	{r7}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	8a1b      	ldrh	r3, [r3, #16]
    }
 800db18:	4618      	mov	r0, r3
 800db1a:	370c      	adds	r7, #12
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	88db      	ldrh	r3, [r3, #6]
    }
 800db30:	4618      	mov	r0, r3
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800db3c:	b480      	push	{r7}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	889b      	ldrh	r3, [r3, #4]
    }
 800db48:	4618      	mov	r0, r3
 800db4a:	370c      	adds	r7, #12
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr

0800db54 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800db54:	b480      	push	{r7}
 800db56:	b083      	sub	sp, #12
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	7a9b      	ldrb	r3, [r3, #10]
 800db60:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800db64:	b2db      	uxtb	r3, r3
    }
 800db66:	4618      	mov	r0, r3
 800db68:	370c      	adds	r7, #12
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr

0800db72 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800db72:	b480      	push	{r7}
 800db74:	b083      	sub	sp, #12
 800db76:	af00      	add	r7, sp, #0
 800db78:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	7a9b      	ldrb	r3, [r3, #10]
 800db7e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800db82:	b2db      	uxtb	r3, r3
    }
 800db84:	4618      	mov	r0, r3
 800db86:	370c      	adds	r7, #12
 800db88:	46bd      	mov	sp, r7
 800db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8e:	4770      	bx	lr

0800db90 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800db90:	b480      	push	{r7}
 800db92:	b083      	sub	sp, #12
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
    {
        return false;
 800db98:	2300      	movs	r3, #0
    }
 800db9a:	4618      	mov	r0, r3
 800db9c:	370c      	adds	r7, #12
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr

0800dba6 <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800dba6:	b480      	push	{r7}
 800dba8:	b083      	sub	sp, #12
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800dbae:	f04f 0300 	mov.w	r3, #0
 800dbb2:	ee07 3a90 	vmov	s15, r3
    }
 800dbb6:	eeb0 0a67 	vmov.f32	s0, s15
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	4a05      	ldr	r2, [pc, #20]	@ (800dbe4 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	601a      	str	r2, [r3, #0]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7ff ff4d 	bl	800da74 <_ZN8touchgfx4FontD1Ev>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3708      	adds	r7, #8
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	08010584 	.word	0x08010584

0800dbe8 <_ZN8touchgfx9ConstFontD0Ev>:
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f7ff ffe7 	bl	800dbc4 <_ZN8touchgfx9ConstFontD1Ev>
 800dbf6:	211c      	movs	r1, #28
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f001 fac2 	bl	800f182 <_ZdlPvj>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	4618      	mov	r0, r3
 800dc02:	3708      	adds	r7, #8
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	4a05      	ldr	r2, [pc, #20]	@ (800dc28 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	601a      	str	r2, [r3, #0]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7ff ffd3 	bl	800dbc4 <_ZN8touchgfx9ConstFontD1Ev>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4618      	mov	r0, r3
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	080104b8 	.word	0x080104b8

0800dc2c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f7ff ffe7 	bl	800dc08 <_ZN8touchgfx13GeneratedFontD1Ev>
 800dc3a:	212c      	movs	r1, #44	@ 0x2c
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f001 faa0 	bl	800f182 <_ZdlPvj>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	4618      	mov	r0, r3
 800dc46:	3708      	adds	r7, #8
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800dc4c:	b480      	push	{r7}
 800dc4e:	b083      	sub	sp, #12
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800dc58:	4618      	mov	r0, r3
 800dc5a:	370c      	adds	r7, #12
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr

0800dc64 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800dc64:	b480      	push	{r7}
 800dc66:	b083      	sub	sp, #12
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800dc70:	4618      	mov	r0, r3
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <math.h>
#include <stddef.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b08e      	sub	sp, #56	@ 0x38
 800dc80:	af0a      	add	r7, sp, #40	@ 0x28
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	4611      	mov	r1, r2
 800dc88:	461a      	mov	r2, r3
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	80fb      	strh	r3, [r7, #6]
 800dc8e:	4613      	mov	r3, r2
 800dc90:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800dc92:	68f8      	ldr	r0, [r7, #12]
 800dc94:	88b9      	ldrh	r1, [r7, #4]
 800dc96:	88fa      	ldrh	r2, [r7, #6]
 800dc98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dc9c:	9308      	str	r3, [sp, #32]
 800dc9e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800dca0:	9307      	str	r3, [sp, #28]
 800dca2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800dca6:	9306      	str	r3, [sp, #24]
 800dca8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dcac:	9305      	str	r3, [sp, #20]
 800dcae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dcb2:	9304      	str	r3, [sp, #16]
 800dcb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dcb8:	9303      	str	r3, [sp, #12]
 800dcba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dcbe:	9302      	str	r3, [sp, #8]
 800dcc0:	7f3b      	ldrb	r3, [r7, #28]
 800dcc2:	9301      	str	r3, [sp, #4]
 800dcc4:	8b3b      	ldrh	r3, [r7, #24]
 800dcc6:	9300      	str	r3, [sp, #0]
 800dcc8:	460b      	mov	r3, r1
 800dcca:	68b9      	ldr	r1, [r7, #8]
 800dccc:	f000 fcb4 	bl	800e638 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800dcd0:	4a09      	ldr	r2, [pc, #36]	@ (800dcf8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dcda:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dce0:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dce6:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dcec:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3710      	adds	r7, #16
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	080104b8 	.word	0x080104b8

0800dcfc <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b087      	sub	sp, #28
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	617b      	str	r3, [r7, #20]
    uint32_t offset = dataOffset[0];
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	881b      	ldrh	r3, [r3, #0]
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	613b      	str	r3, [r7, #16]
    offset |= dataOffset[1] << 16;
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	3302      	adds	r3, #2
 800dd16:	881b      	ldrh	r3, [r3, #0]
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	041b      	lsls	r3, r3, #16
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	4313      	orrs	r3, r2
 800dd22:	613b      	str	r3, [r7, #16]

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	69db      	ldr	r3, [r3, #28]
 800dd28:	60fb      	str	r3, [r7, #12]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	889b      	ldrh	r3, [r3, #4]
 800dd2e:	0adb      	lsrs	r3, r3, #11
 800dd30:	b29b      	uxth	r3, r3
 800dd32:	009b      	lsls	r3, r3, #2
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	4413      	add	r3, r2
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	60bb      	str	r3, [r7, #8]
    return pixels + offset;
 800dd3c:	68ba      	ldr	r2, [r7, #8]
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	4413      	add	r3, r2
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	371c      	adds	r7, #28
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr

0800dd4e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800dd4e:	b480      	push	{r7}
 800dd50:	b089      	sub	sp, #36	@ 0x24
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	60f8      	str	r0, [r7, #12]
 800dd56:	460b      	mov	r3, r1
 800dd58:	607a      	str	r2, [r7, #4]
 800dd5a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d003      	beq.n	800dd6a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	7b1b      	ldrb	r3, [r3, #12]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d101      	bne.n	800dd6e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	e032      	b.n	800ddd4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	6a1a      	ldr	r2, [r3, #32]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	7b5b      	ldrb	r3, [r3, #13]
 800dd7a:	b21b      	sxth	r3, r3
 800dd7c:	021b      	lsls	r3, r3, #8
 800dd7e:	b21b      	sxth	r3, r3
 800dd80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dd84:	b219      	sxth	r1, r3
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	7adb      	ldrb	r3, [r3, #11]
 800dd8a:	b21b      	sxth	r3, r3
 800dd8c:	430b      	orrs	r3, r1
 800dd8e:	b21b      	sxth	r3, r3
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	4413      	add	r3, r2
 800dd96:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	7b1b      	ldrb	r3, [r3, #12]
 800dd9c:	837b      	strh	r3, [r7, #26]
 800dd9e:	e013      	b.n	800ddc8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7a>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	881b      	ldrh	r3, [r3, #0]
 800dda4:	897a      	ldrh	r2, [r7, #10]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d103      	bne.n	800ddb2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x64>
        {
            return kerndata->distance;
 800ddaa:	69fb      	ldr	r3, [r7, #28]
 800ddac:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800ddb0:	e010      	b.n	800ddd4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	881b      	ldrh	r3, [r3, #0]
 800ddb6:	897a      	ldrh	r2, [r7, #10]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d309      	bcc.n	800ddd0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800ddbc:	8b7b      	ldrh	r3, [r7, #26]
 800ddbe:	3b01      	subs	r3, #1
 800ddc0:	837b      	strh	r3, [r7, #26]
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	3304      	adds	r3, #4
 800ddc6:	61fb      	str	r3, [r7, #28]
 800ddc8:	8b7b      	ldrh	r3, [r7, #26]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d1e8      	bne.n	800dda0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
 800ddce:	e000      	b.n	800ddd2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        {
            break;
 800ddd0:	bf00      	nop
        }
    }
    return 0;
 800ddd2:	2300      	movs	r3, #0
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3724      	adds	r7, #36	@ 0x24
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr

0800dde0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_consola_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_consola_20_4bpp();

touchgfx::GeneratedFont& getFont_consola_20_4bpp()
{
    static touchgfx::GeneratedFont consola_20_4bpp(glyphs_consola_20_4bpp, 12, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_consola_20_4bpp, kerning_consola_20_4bpp, 63, 0, 0, 0);
 800dde0:	b580      	push	{r7, lr}
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	4801      	ldr	r0, [pc, #4]	@ (800ddec <__tcf_0+0xc>)
 800dde6:	f7ff ff0f 	bl	800dc08 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	24000694 	.word	0x24000694

0800ddf0 <_Z23getFont_consola_20_4bppv>:
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b08e      	sub	sp, #56	@ 0x38
 800ddf4:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont consola_20_4bpp(glyphs_consola_20_4bpp, 12, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_consola_20_4bpp, kerning_consola_20_4bpp, 63, 0, 0, 0);
 800ddf6:	4b21      	ldr	r3, [pc, #132]	@ (800de7c <_Z23getFont_consola_20_4bppv+0x8c>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f3bf 8f5b 	dmb	ish
 800ddfe:	f003 0301 	and.w	r3, r3, #1
 800de02:	2b00      	cmp	r3, #0
 800de04:	bf0c      	ite	eq
 800de06:	2301      	moveq	r3, #1
 800de08:	2300      	movne	r3, #0
 800de0a:	b2db      	uxtb	r3, r3
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d030      	beq.n	800de72 <_Z23getFont_consola_20_4bppv+0x82>
 800de10:	481a      	ldr	r0, [pc, #104]	@ (800de7c <_Z23getFont_consola_20_4bppv+0x8c>)
 800de12:	f001 f9b8 	bl	800f186 <__cxa_guard_acquire>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	bf14      	ite	ne
 800de1c:	2301      	movne	r3, #1
 800de1e:	2300      	moveq	r3, #0
 800de20:	b2db      	uxtb	r3, r3
 800de22:	2b00      	cmp	r3, #0
 800de24:	d025      	beq.n	800de72 <_Z23getFont_consola_20_4bppv+0x82>
 800de26:	2300      	movs	r3, #0
 800de28:	930c      	str	r3, [sp, #48]	@ 0x30
 800de2a:	2300      	movs	r3, #0
 800de2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de2e:	2300      	movs	r3, #0
 800de30:	930a      	str	r3, [sp, #40]	@ 0x28
 800de32:	233f      	movs	r3, #63	@ 0x3f
 800de34:	9309      	str	r3, [sp, #36]	@ 0x24
 800de36:	4b12      	ldr	r3, [pc, #72]	@ (800de80 <_Z23getFont_consola_20_4bppv+0x90>)
 800de38:	9308      	str	r3, [sp, #32]
 800de3a:	4b12      	ldr	r3, [pc, #72]	@ (800de84 <_Z23getFont_consola_20_4bppv+0x94>)
 800de3c:	9307      	str	r3, [sp, #28]
 800de3e:	2300      	movs	r3, #0
 800de40:	9306      	str	r3, [sp, #24]
 800de42:	2300      	movs	r3, #0
 800de44:	9305      	str	r3, [sp, #20]
 800de46:	2301      	movs	r3, #1
 800de48:	9304      	str	r3, [sp, #16]
 800de4a:	2304      	movs	r3, #4
 800de4c:	9303      	str	r3, [sp, #12]
 800de4e:	2300      	movs	r3, #0
 800de50:	9302      	str	r3, [sp, #8]
 800de52:	2300      	movs	r3, #0
 800de54:	9301      	str	r3, [sp, #4]
 800de56:	2314      	movs	r3, #20
 800de58:	9300      	str	r3, [sp, #0]
 800de5a:	2314      	movs	r3, #20
 800de5c:	220c      	movs	r2, #12
 800de5e:	490a      	ldr	r1, [pc, #40]	@ (800de88 <_Z23getFont_consola_20_4bppv+0x98>)
 800de60:	480a      	ldr	r0, [pc, #40]	@ (800de8c <_Z23getFont_consola_20_4bppv+0x9c>)
 800de62:	f7ff ff0b 	bl	800dc7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800de66:	480a      	ldr	r0, [pc, #40]	@ (800de90 <_Z23getFont_consola_20_4bppv+0xa0>)
 800de68:	f001 f9d8 	bl	800f21c <atexit>
 800de6c:	4803      	ldr	r0, [pc, #12]	@ (800de7c <_Z23getFont_consola_20_4bppv+0x8c>)
 800de6e:	f001 f996 	bl	800f19e <__cxa_guard_release>
    return consola_20_4bpp;
 800de72:	4b06      	ldr	r3, [pc, #24]	@ (800de8c <_Z23getFont_consola_20_4bppv+0x9c>)
}
 800de74:	4618      	mov	r0, r3
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	240006c0 	.word	0x240006c0
 800de80:	0801191c 	.word	0x0801191c
 800de84:	08011930 	.word	0x08011930
 800de88:	08011658 	.word	0x08011658
 800de8c:	24000694 	.word	0x24000694
 800de90:	0800dde1 	.word	0x0800dde1

0800de94 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_consolab_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_consolab_20_4bpp();

touchgfx::GeneratedFont& getFont_consolab_20_4bpp()
{
    static touchgfx::GeneratedFont consolab_20_4bpp(glyphs_consolab_20_4bpp, 25, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_consolab_20_4bpp, kerning_consolab_20_4bpp, 63, 0, 0, 0);
 800de94:	b580      	push	{r7, lr}
 800de96:	af00      	add	r7, sp, #0
 800de98:	4801      	ldr	r0, [pc, #4]	@ (800dea0 <__tcf_0+0xc>)
 800de9a:	f7ff feb5 	bl	800dc08 <_ZN8touchgfx13GeneratedFontD1Ev>
 800de9e:	bd80      	pop	{r7, pc}
 800dea0:	240006c4 	.word	0x240006c4

0800dea4 <_Z24getFont_consolab_20_4bppv>:
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b08e      	sub	sp, #56	@ 0x38
 800dea8:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont consolab_20_4bpp(glyphs_consolab_20_4bpp, 25, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_consolab_20_4bpp, kerning_consolab_20_4bpp, 63, 0, 0, 0);
 800deaa:	4b21      	ldr	r3, [pc, #132]	@ (800df30 <_Z24getFont_consolab_20_4bppv+0x8c>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f3bf 8f5b 	dmb	ish
 800deb2:	f003 0301 	and.w	r3, r3, #1
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	bf0c      	ite	eq
 800deba:	2301      	moveq	r3, #1
 800debc:	2300      	movne	r3, #0
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d030      	beq.n	800df26 <_Z24getFont_consolab_20_4bppv+0x82>
 800dec4:	481a      	ldr	r0, [pc, #104]	@ (800df30 <_Z24getFont_consolab_20_4bppv+0x8c>)
 800dec6:	f001 f95e 	bl	800f186 <__cxa_guard_acquire>
 800deca:	4603      	mov	r3, r0
 800decc:	2b00      	cmp	r3, #0
 800dece:	bf14      	ite	ne
 800ded0:	2301      	movne	r3, #1
 800ded2:	2300      	moveq	r3, #0
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d025      	beq.n	800df26 <_Z24getFont_consolab_20_4bppv+0x82>
 800deda:	2300      	movs	r3, #0
 800dedc:	930c      	str	r3, [sp, #48]	@ 0x30
 800dede:	2300      	movs	r3, #0
 800dee0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dee2:	2300      	movs	r3, #0
 800dee4:	930a      	str	r3, [sp, #40]	@ 0x28
 800dee6:	233f      	movs	r3, #63	@ 0x3f
 800dee8:	9309      	str	r3, [sp, #36]	@ 0x24
 800deea:	4b12      	ldr	r3, [pc, #72]	@ (800df34 <_Z24getFont_consolab_20_4bppv+0x90>)
 800deec:	9308      	str	r3, [sp, #32]
 800deee:	4b12      	ldr	r3, [pc, #72]	@ (800df38 <_Z24getFont_consolab_20_4bppv+0x94>)
 800def0:	9307      	str	r3, [sp, #28]
 800def2:	2300      	movs	r3, #0
 800def4:	9306      	str	r3, [sp, #24]
 800def6:	2300      	movs	r3, #0
 800def8:	9305      	str	r3, [sp, #20]
 800defa:	2301      	movs	r3, #1
 800defc:	9304      	str	r3, [sp, #16]
 800defe:	2304      	movs	r3, #4
 800df00:	9303      	str	r3, [sp, #12]
 800df02:	2300      	movs	r3, #0
 800df04:	9302      	str	r3, [sp, #8]
 800df06:	2300      	movs	r3, #0
 800df08:	9301      	str	r3, [sp, #4]
 800df0a:	2314      	movs	r3, #20
 800df0c:	9300      	str	r3, [sp, #0]
 800df0e:	2314      	movs	r3, #20
 800df10:	2219      	movs	r2, #25
 800df12:	490a      	ldr	r1, [pc, #40]	@ (800df3c <_Z24getFont_consolab_20_4bppv+0x98>)
 800df14:	480a      	ldr	r0, [pc, #40]	@ (800df40 <_Z24getFont_consolab_20_4bppv+0x9c>)
 800df16:	f7ff feb1 	bl	800dc7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800df1a:	480a      	ldr	r0, [pc, #40]	@ (800df44 <_Z24getFont_consolab_20_4bppv+0xa0>)
 800df1c:	f001 f97e 	bl	800f21c <atexit>
 800df20:	4803      	ldr	r0, [pc, #12]	@ (800df30 <_Z24getFont_consolab_20_4bppv+0x8c>)
 800df22:	f001 f93c 	bl	800f19e <__cxa_guard_release>
    return consolab_20_4bpp;
 800df26:	4b06      	ldr	r3, [pc, #24]	@ (800df40 <_Z24getFont_consolab_20_4bppv+0x9c>)
}
 800df28:	4618      	mov	r0, r3
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	240006f0 	.word	0x240006f0
 800df34:	08011920 	.word	0x08011920
 800df38:	08011934 	.word	0x08011934
 800df3c:	08011700 	.word	0x08011700
 800df40:	240006c4 	.word	0x240006c4
 800df44:	0800de95 	.word	0x0800de95

0800df48 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_consolab_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_consolab_30_4bpp();

touchgfx::GeneratedFont& getFont_consolab_30_4bpp()
{
    static touchgfx::GeneratedFont consolab_30_4bpp(glyphs_consolab_30_4bpp, 11, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_consolab_30_4bpp, kerning_consolab_30_4bpp, 63, 0, 0, 0);
 800df48:	b580      	push	{r7, lr}
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	4801      	ldr	r0, [pc, #4]	@ (800df54 <__tcf_0+0xc>)
 800df4e:	f7ff fe5b 	bl	800dc08 <_ZN8touchgfx13GeneratedFontD1Ev>
 800df52:	bd80      	pop	{r7, pc}
 800df54:	240006f4 	.word	0x240006f4

0800df58 <_Z24getFont_consolab_30_4bppv>:
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b08e      	sub	sp, #56	@ 0x38
 800df5c:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont consolab_30_4bpp(glyphs_consolab_30_4bpp, 11, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_consolab_30_4bpp, kerning_consolab_30_4bpp, 63, 0, 0, 0);
 800df5e:	4b21      	ldr	r3, [pc, #132]	@ (800dfe4 <_Z24getFont_consolab_30_4bppv+0x8c>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f3bf 8f5b 	dmb	ish
 800df66:	f003 0301 	and.w	r3, r3, #1
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	bf0c      	ite	eq
 800df6e:	2301      	moveq	r3, #1
 800df70:	2300      	movne	r3, #0
 800df72:	b2db      	uxtb	r3, r3
 800df74:	2b00      	cmp	r3, #0
 800df76:	d030      	beq.n	800dfda <_Z24getFont_consolab_30_4bppv+0x82>
 800df78:	481a      	ldr	r0, [pc, #104]	@ (800dfe4 <_Z24getFont_consolab_30_4bppv+0x8c>)
 800df7a:	f001 f904 	bl	800f186 <__cxa_guard_acquire>
 800df7e:	4603      	mov	r3, r0
 800df80:	2b00      	cmp	r3, #0
 800df82:	bf14      	ite	ne
 800df84:	2301      	movne	r3, #1
 800df86:	2300      	moveq	r3, #0
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d025      	beq.n	800dfda <_Z24getFont_consolab_30_4bppv+0x82>
 800df8e:	2300      	movs	r3, #0
 800df90:	930c      	str	r3, [sp, #48]	@ 0x30
 800df92:	2300      	movs	r3, #0
 800df94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df96:	2300      	movs	r3, #0
 800df98:	930a      	str	r3, [sp, #40]	@ 0x28
 800df9a:	233f      	movs	r3, #63	@ 0x3f
 800df9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800df9e:	4b12      	ldr	r3, [pc, #72]	@ (800dfe8 <_Z24getFont_consolab_30_4bppv+0x90>)
 800dfa0:	9308      	str	r3, [sp, #32]
 800dfa2:	4b12      	ldr	r3, [pc, #72]	@ (800dfec <_Z24getFont_consolab_30_4bppv+0x94>)
 800dfa4:	9307      	str	r3, [sp, #28]
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	9306      	str	r3, [sp, #24]
 800dfaa:	2300      	movs	r3, #0
 800dfac:	9305      	str	r3, [sp, #20]
 800dfae:	2301      	movs	r3, #1
 800dfb0:	9304      	str	r3, [sp, #16]
 800dfb2:	2304      	movs	r3, #4
 800dfb4:	9303      	str	r3, [sp, #12]
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	9302      	str	r3, [sp, #8]
 800dfba:	2300      	movs	r3, #0
 800dfbc:	9301      	str	r3, [sp, #4]
 800dfbe:	231e      	movs	r3, #30
 800dfc0:	9300      	str	r3, [sp, #0]
 800dfc2:	231e      	movs	r3, #30
 800dfc4:	220b      	movs	r2, #11
 800dfc6:	490a      	ldr	r1, [pc, #40]	@ (800dff0 <_Z24getFont_consolab_30_4bppv+0x98>)
 800dfc8:	480a      	ldr	r0, [pc, #40]	@ (800dff4 <_Z24getFont_consolab_30_4bppv+0x9c>)
 800dfca:	f7ff fe57 	bl	800dc7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800dfce:	480a      	ldr	r0, [pc, #40]	@ (800dff8 <_Z24getFont_consolab_30_4bppv+0xa0>)
 800dfd0:	f001 f924 	bl	800f21c <atexit>
 800dfd4:	4803      	ldr	r0, [pc, #12]	@ (800dfe4 <_Z24getFont_consolab_30_4bppv+0x8c>)
 800dfd6:	f001 f8e2 	bl	800f19e <__cxa_guard_release>
    return consolab_30_4bpp;
 800dfda:	4b06      	ldr	r3, [pc, #24]	@ (800dff4 <_Z24getFont_consolab_30_4bppv+0x9c>)
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	24000720 	.word	0x24000720
 800dfe8:	08011924 	.word	0x08011924
 800dfec:	08011938 	.word	0x08011938
 800dff0:	08011860 	.word	0x08011860
 800dff4:	240006f4 	.word	0x240006f4
 800dff8:	0800df49 	.word	0x0800df49

0800dffc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800dffc:	b580      	push	{r7, lr}
 800dffe:	af00      	add	r7, sp, #0
 800e000:	4801      	ldr	r0, [pc, #4]	@ (800e008 <__tcf_0+0xc>)
 800e002:	f7ff fe01 	bl	800dc08 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e006:	bd80      	pop	{r7, pc}
 800e008:	24000724 	.word	0x24000724

0800e00c <_Z23getFont_verdana_10_4bppv>:
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b08e      	sub	sp, #56	@ 0x38
 800e010:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800e012:	4b21      	ldr	r3, [pc, #132]	@ (800e098 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f3bf 8f5b 	dmb	ish
 800e01a:	f003 0301 	and.w	r3, r3, #1
 800e01e:	2b00      	cmp	r3, #0
 800e020:	bf0c      	ite	eq
 800e022:	2301      	moveq	r3, #1
 800e024:	2300      	movne	r3, #0
 800e026:	b2db      	uxtb	r3, r3
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d030      	beq.n	800e08e <_Z23getFont_verdana_10_4bppv+0x82>
 800e02c:	481a      	ldr	r0, [pc, #104]	@ (800e098 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800e02e:	f001 f8aa 	bl	800f186 <__cxa_guard_acquire>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	bf14      	ite	ne
 800e038:	2301      	movne	r3, #1
 800e03a:	2300      	moveq	r3, #0
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d025      	beq.n	800e08e <_Z23getFont_verdana_10_4bppv+0x82>
 800e042:	2300      	movs	r3, #0
 800e044:	930c      	str	r3, [sp, #48]	@ 0x30
 800e046:	2300      	movs	r3, #0
 800e048:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e04a:	2300      	movs	r3, #0
 800e04c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e04e:	233f      	movs	r3, #63	@ 0x3f
 800e050:	9309      	str	r3, [sp, #36]	@ 0x24
 800e052:	4b12      	ldr	r3, [pc, #72]	@ (800e09c <_Z23getFont_verdana_10_4bppv+0x90>)
 800e054:	9308      	str	r3, [sp, #32]
 800e056:	4b12      	ldr	r3, [pc, #72]	@ (800e0a0 <_Z23getFont_verdana_10_4bppv+0x94>)
 800e058:	9307      	str	r3, [sp, #28]
 800e05a:	2300      	movs	r3, #0
 800e05c:	9306      	str	r3, [sp, #24]
 800e05e:	2300      	movs	r3, #0
 800e060:	9305      	str	r3, [sp, #20]
 800e062:	2301      	movs	r3, #1
 800e064:	9304      	str	r3, [sp, #16]
 800e066:	2304      	movs	r3, #4
 800e068:	9303      	str	r3, [sp, #12]
 800e06a:	2300      	movs	r3, #0
 800e06c:	9302      	str	r3, [sp, #8]
 800e06e:	2300      	movs	r3, #0
 800e070:	9301      	str	r3, [sp, #4]
 800e072:	230a      	movs	r3, #10
 800e074:	9300      	str	r3, [sp, #0]
 800e076:	230a      	movs	r3, #10
 800e078:	2201      	movs	r2, #1
 800e07a:	490a      	ldr	r1, [pc, #40]	@ (800e0a4 <_Z23getFont_verdana_10_4bppv+0x98>)
 800e07c:	480a      	ldr	r0, [pc, #40]	@ (800e0a8 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800e07e:	f7ff fdfd 	bl	800dc7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e082:	480a      	ldr	r0, [pc, #40]	@ (800e0ac <_Z23getFont_verdana_10_4bppv+0xa0>)
 800e084:	f001 f8ca 	bl	800f21c <atexit>
 800e088:	4803      	ldr	r0, [pc, #12]	@ (800e098 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800e08a:	f001 f888 	bl	800f19e <__cxa_guard_release>
    return verdana_10_4bpp;
 800e08e:	4b06      	ldr	r3, [pc, #24]	@ (800e0a8 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800e090:	4618      	mov	r0, r3
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}
 800e096:	bf00      	nop
 800e098:	24000750 	.word	0x24000750
 800e09c:	08011928 	.word	0x08011928
 800e0a0:	0801193c 	.word	0x0801193c
 800e0a4:	080118fc 	.word	0x080118fc
 800e0a8:	24000724 	.word	0x24000724
 800e0ac:	0800dffd 	.word	0x0800dffd

0800e0b0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	4801      	ldr	r0, [pc, #4]	@ (800e0bc <__tcf_0+0xc>)
 800e0b6:	f7ff fda7 	bl	800dc08 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	24000754 	.word	0x24000754

0800e0c0 <_Z23getFont_verdana_40_4bppv>:
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b08e      	sub	sp, #56	@ 0x38
 800e0c4:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800e0c6:	4b21      	ldr	r3, [pc, #132]	@ (800e14c <_Z23getFont_verdana_40_4bppv+0x8c>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f3bf 8f5b 	dmb	ish
 800e0ce:	f003 0301 	and.w	r3, r3, #1
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	bf0c      	ite	eq
 800e0d6:	2301      	moveq	r3, #1
 800e0d8:	2300      	movne	r3, #0
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d030      	beq.n	800e142 <_Z23getFont_verdana_40_4bppv+0x82>
 800e0e0:	481a      	ldr	r0, [pc, #104]	@ (800e14c <_Z23getFont_verdana_40_4bppv+0x8c>)
 800e0e2:	f001 f850 	bl	800f186 <__cxa_guard_acquire>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	bf14      	ite	ne
 800e0ec:	2301      	movne	r3, #1
 800e0ee:	2300      	moveq	r3, #0
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d025      	beq.n	800e142 <_Z23getFont_verdana_40_4bppv+0x82>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	930c      	str	r3, [sp, #48]	@ 0x30
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0fe:	2300      	movs	r3, #0
 800e100:	930a      	str	r3, [sp, #40]	@ 0x28
 800e102:	233f      	movs	r3, #63	@ 0x3f
 800e104:	9309      	str	r3, [sp, #36]	@ 0x24
 800e106:	4b12      	ldr	r3, [pc, #72]	@ (800e150 <_Z23getFont_verdana_40_4bppv+0x90>)
 800e108:	9308      	str	r3, [sp, #32]
 800e10a:	4b12      	ldr	r3, [pc, #72]	@ (800e154 <_Z23getFont_verdana_40_4bppv+0x94>)
 800e10c:	9307      	str	r3, [sp, #28]
 800e10e:	2300      	movs	r3, #0
 800e110:	9306      	str	r3, [sp, #24]
 800e112:	2300      	movs	r3, #0
 800e114:	9305      	str	r3, [sp, #20]
 800e116:	2301      	movs	r3, #1
 800e118:	9304      	str	r3, [sp, #16]
 800e11a:	2304      	movs	r3, #4
 800e11c:	9303      	str	r3, [sp, #12]
 800e11e:	2300      	movs	r3, #0
 800e120:	9302      	str	r3, [sp, #8]
 800e122:	2300      	movs	r3, #0
 800e124:	9301      	str	r3, [sp, #4]
 800e126:	2328      	movs	r3, #40	@ 0x28
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	2328      	movs	r3, #40	@ 0x28
 800e12c:	2201      	movs	r2, #1
 800e12e:	490a      	ldr	r1, [pc, #40]	@ (800e158 <_Z23getFont_verdana_40_4bppv+0x98>)
 800e130:	480a      	ldr	r0, [pc, #40]	@ (800e15c <_Z23getFont_verdana_40_4bppv+0x9c>)
 800e132:	f7ff fda3 	bl	800dc7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e136:	480a      	ldr	r0, [pc, #40]	@ (800e160 <_Z23getFont_verdana_40_4bppv+0xa0>)
 800e138:	f001 f870 	bl	800f21c <atexit>
 800e13c:	4803      	ldr	r0, [pc, #12]	@ (800e14c <_Z23getFont_verdana_40_4bppv+0x8c>)
 800e13e:	f001 f82e 	bl	800f19e <__cxa_guard_release>
    return verdana_40_4bpp;
 800e142:	4b06      	ldr	r3, [pc, #24]	@ (800e15c <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800e144:	4618      	mov	r0, r3
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	24000780 	.word	0x24000780
 800e150:	0801192c 	.word	0x0801192c
 800e154:	08011940 	.word	0x08011940
 800e158:	0801190c 	.word	0x0801190c
 800e15c:	24000754 	.word	0x24000754
 800e160:	0800e0b1 	.word	0x0800e0b1

0800e164 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800e164:	b480      	push	{r7}
 800e166:	b085      	sub	sp, #20
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	460b      	mov	r3, r1
 800e16e:	607a      	str	r2, [r7, #4]
 800e170:	817b      	strh	r3, [r7, #10]
        return 0;
 800e172:	2300      	movs	r3, #0
    }
 800e174:	4618      	mov	r0, r3
 800e176:	3714      	adds	r7, #20
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 800e180:	b480      	push	{r7}
 800e182:	b083      	sub	sp, #12
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
        return 0;
 800e188:	2300      	movs	r3, #0
    }
 800e18a:	4618      	mov	r0, r3
 800e18c:	370c      	adds	r7, #12
 800e18e:	46bd      	mov	sp, r7
 800e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e194:	4770      	bx	lr

0800e196 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800e196:	b480      	push	{r7}
 800e198:	b083      	sub	sp, #12
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
        return 0;
 800e19e:	2300      	movs	r3, #0
    }
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	370c      	adds	r7, #12
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e1ac:	b40e      	push	{r1, r2, r3}
 800e1ae:	b580      	push	{r7, lr}
 800e1b0:	b085      	sub	sp, #20
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800e1b6:	f107 0320 	add.w	r3, r7, #32
 800e1ba:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	69fa      	ldr	r2, [r7, #28]
 800e1c0:	2100      	movs	r1, #0
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f000 f90c 	bl	800e3e0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e1cc:	89fb      	ldrh	r3, [r7, #14]
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3714      	adds	r7, #20
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e1d8:	b003      	add	sp, #12
 800e1da:	4770      	bx	lr

0800e1dc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e1dc:	b40c      	push	{r2, r3}
 800e1de:	b580      	push	{r7, lr}
 800e1e0:	b084      	sub	sp, #16
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	6078      	str	r0, [r7, #4]
 800e1e6:	460b      	mov	r3, r1
 800e1e8:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800e1ea:	f107 031c 	add.w	r3, r7, #28
 800e1ee:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800e1f0:	78f9      	ldrb	r1, [r7, #3]
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	69ba      	ldr	r2, [r7, #24]
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f000 f8f2 	bl	800e3e0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e200:	89fb      	ldrh	r3, [r7, #14]
}
 800e202:	4618      	mov	r0, r3
 800e204:	3710      	adds	r7, #16
 800e206:	46bd      	mov	sp, r7
 800e208:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e20c:	b002      	add	sp, #8
 800e20e:	4770      	bx	lr

0800e210 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b08a      	sub	sp, #40	@ 0x28
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	460b      	mov	r3, r1
 800e21a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e220:	2b00      	cmp	r3, #0
 800e222:	d016      	beq.n	800e252 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	3322      	adds	r3, #34	@ 0x22
 800e228:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800e22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22c:	8adb      	ldrh	r3, [r3, #22]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d105      	bne.n	800e23e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800e232:	4b43      	ldr	r3, [pc, #268]	@ (800e340 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e234:	4a43      	ldr	r2, [pc, #268]	@ (800e344 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e236:	21c5      	movs	r1, #197	@ 0xc5
 800e238:	4843      	ldr	r0, [pc, #268]	@ (800e348 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e23a:	f000 ffd1 	bl	800f1e0 <__assert_func>
            return buffer[pos];
 800e23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e240:	8a9b      	ldrh	r3, [r3, #20]
 800e242:	461a      	mov	r2, r3
 800e244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e246:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d001      	beq.n	800e252 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e24e:	2301      	movs	r3, #1
 800e250:	e000      	b.n	800e254 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800e252:	2300      	movs	r3, #0
 800e254:	2b00      	cmp	r3, #0
 800e256:	d06a      	beq.n	800e32e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f000 ff73 	bl	800f144 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	3322      	adds	r3, #34	@ 0x22
 800e262:	623b      	str	r3, [r7, #32]
 800e264:	2301      	movs	r3, #1
 800e266:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800e268:	6a3b      	ldr	r3, [r7, #32]
 800e26a:	8adb      	ldrh	r3, [r3, #22]
 800e26c:	8bfa      	ldrh	r2, [r7, #30]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d305      	bcc.n	800e27e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800e272:	4b36      	ldr	r3, [pc, #216]	@ (800e34c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800e274:	4a36      	ldr	r2, [pc, #216]	@ (800e350 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800e276:	21cb      	movs	r1, #203	@ 0xcb
 800e278:	4833      	ldr	r0, [pc, #204]	@ (800e348 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e27a:	f000 ffb1 	bl	800f1e0 <__assert_func>
            const uint16_t index = pos + offset;
 800e27e:	6a3b      	ldr	r3, [r7, #32]
 800e280:	8a9a      	ldrh	r2, [r3, #20]
 800e282:	8bfb      	ldrh	r3, [r7, #30]
 800e284:	4413      	add	r3, r2
 800e286:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800e288:	8bbb      	ldrh	r3, [r7, #28]
 800e28a:	2b09      	cmp	r3, #9
 800e28c:	d801      	bhi.n	800e292 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800e28e:	8bbb      	ldrh	r3, [r7, #28]
 800e290:	e001      	b.n	800e296 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800e292:	8bbb      	ldrh	r3, [r7, #28]
 800e294:	3b0a      	subs	r3, #10
 800e296:	6a3a      	ldr	r2, [r7, #32]
 800e298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e29c:	f640 123f 	movw	r2, #2367	@ 0x93f
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	bf0c      	ite	eq
 800e2a4:	2301      	moveq	r3, #1
 800e2a6:	2300      	movne	r3, #0
 800e2a8:	b2db      	uxtb	r3, r3
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d03f      	beq.n	800e32e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	3322      	adds	r3, #34	@ 0x22
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	3222      	adds	r2, #34	@ 0x22
 800e2b6:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800e2b8:	68ba      	ldr	r2, [r7, #8]
 800e2ba:	8ad2      	ldrh	r2, [r2, #22]
 800e2bc:	2a00      	cmp	r2, #0
 800e2be:	d105      	bne.n	800e2cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800e2c0:	4b1f      	ldr	r3, [pc, #124]	@ (800e340 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e2c2:	4a20      	ldr	r2, [pc, #128]	@ (800e344 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e2c4:	21c5      	movs	r1, #197	@ 0xc5
 800e2c6:	4820      	ldr	r0, [pc, #128]	@ (800e348 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e2c8:	f000 ff8a 	bl	800f1e0 <__assert_func>
            return buffer[pos];
 800e2cc:	68ba      	ldr	r2, [r7, #8]
 800e2ce:	8a92      	ldrh	r2, [r2, #20]
 800e2d0:	4611      	mov	r1, r2
 800e2d2:	68ba      	ldr	r2, [r7, #8]
 800e2d4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800e2d8:	613b      	str	r3, [r7, #16]
 800e2da:	4613      	mov	r3, r2
 800e2dc:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	8adb      	ldrh	r3, [r3, #22]
 800e2e2:	2b01      	cmp	r3, #1
 800e2e4:	d806      	bhi.n	800e2f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800e2e6:	4b1b      	ldr	r3, [pc, #108]	@ (800e354 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800e2e8:	4a1b      	ldr	r2, [pc, #108]	@ (800e358 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800e2ea:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800e2ee:	4816      	ldr	r0, [pc, #88]	@ (800e348 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e2f0:	f000 ff76 	bl	800f1e0 <__assert_func>
            const uint16_t index = pos + 1;
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	8a9b      	ldrh	r3, [r3, #20]
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800e2fc:	89bb      	ldrh	r3, [r7, #12]
 800e2fe:	2b09      	cmp	r3, #9
 800e300:	d801      	bhi.n	800e306 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800e302:	89bb      	ldrh	r3, [r7, #12]
 800e304:	e000      	b.n	800e308 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800e306:	2300      	movs	r3, #0
 800e308:	693a      	ldr	r2, [r7, #16]
 800e30a:	89f9      	ldrh	r1, [r7, #14]
 800e30c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800e310:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	3322      	adds	r3, #34	@ 0x22
 800e316:	61bb      	str	r3, [r7, #24]
 800e318:	f640 133f 	movw	r3, #2367	@ 0x93f
 800e31c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800e31e:	69bb      	ldr	r3, [r7, #24]
 800e320:	8a9b      	ldrh	r3, [r3, #20]
 800e322:	4619      	mov	r1, r3
 800e324:	69bb      	ldr	r3, [r7, #24]
 800e326:	8afa      	ldrh	r2, [r7, #22]
 800e328:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800e32c:	bf00      	nop
        }
    }
    return getNextChar();
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f000 fe0a 	bl	800ef48 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e334:	4603      	mov	r3, r0
}
 800e336:	4618      	mov	r0, r3
 800e338:	3728      	adds	r7, #40	@ 0x28
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	080101fc 	.word	0x080101fc
 800e344:	08010208 	.word	0x08010208
 800e348:	080102b4 	.word	0x080102b4
 800e34c:	080102fc 	.word	0x080102fc
 800e350:	0801030c 	.word	0x0801030c
 800e354:	080103e0 	.word	0x080103e0
 800e358:	080103ec 	.word	0x080103ec

0800e35c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f000 fdb8 	bl	800eeda <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800e36a:	bf00      	nop
 800e36c:	3708      	adds	r7, #8
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
	...

0800e374 <_Z41__static_initialization_and_destruction_0v>:
    case 4:
        touchgfx_fonts[4] = &(getFont_consolab_30_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800e374:	b580      	push	{r7, lr}
 800e376:	af00      	add	r7, sp, #0
    &(getFont_consolab_20_4bpp()),
 800e378:	f7ff fd94 	bl	800dea4 <_Z24getFont_consolab_20_4bppv>
 800e37c:	4603      	mov	r3, r0
};
 800e37e:	4a0c      	ldr	r2, [pc, #48]	@ (800e3b0 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800e380:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800e382:	f7ff fe9d 	bl	800e0c0 <_Z23getFont_verdana_40_4bppv>
 800e386:	4603      	mov	r3, r0
};
 800e388:	4a09      	ldr	r2, [pc, #36]	@ (800e3b0 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800e38a:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 800e38c:	f7ff fe3e 	bl	800e00c <_Z23getFont_verdana_10_4bppv>
 800e390:	4603      	mov	r3, r0
};
 800e392:	4a07      	ldr	r2, [pc, #28]	@ (800e3b0 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800e394:	6093      	str	r3, [r2, #8]
    &(getFont_consola_20_4bpp()),
 800e396:	f7ff fd2b 	bl	800ddf0 <_Z23getFont_consola_20_4bppv>
 800e39a:	4603      	mov	r3, r0
};
 800e39c:	4a04      	ldr	r2, [pc, #16]	@ (800e3b0 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800e39e:	60d3      	str	r3, [r2, #12]
    &(getFont_consolab_30_4bpp())
 800e3a0:	f7ff fdda 	bl	800df58 <_Z24getFont_consolab_30_4bppv>
 800e3a4:	4603      	mov	r3, r0
};
 800e3a6:	4a02      	ldr	r2, [pc, #8]	@ (800e3b0 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800e3a8:	6113      	str	r3, [r2, #16]
} // namespace TypedTextDatabase
 800e3aa:	bf00      	nop
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	24000784 	.word	0x24000784

0800e3b4 <_GLOBAL__sub_I_touchgfx_fonts>:
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	f7ff ffdc 	bl	800e374 <_Z41__static_initialization_and_destruction_0v>
 800e3bc:	bd80      	pop	{r7, pc}
	...

0800e3c0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800e3c0:	4b01      	ldr	r3, [pc, #4]	@ (800e3c8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	601a      	str	r2, [r3, #0]
 800e3c6:	4770      	bx	lr
 800e3c8:	24000798 	.word	0x24000798

0800e3cc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800e3cc:	4b03      	ldr	r3, [pc, #12]	@ (800e3dc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	801a      	strh	r2, [r3, #0]
 800e3d2:	805a      	strh	r2, [r3, #2]
 800e3d4:	809a      	strh	r2, [r3, #4]
 800e3d6:	80da      	strh	r2, [r3, #6]
 800e3d8:	4770      	bx	lr
 800e3da:	bf00      	nop
 800e3dc:	2400079c 	.word	0x2400079c

0800e3e0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800e3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e4:	b09d      	sub	sp, #116	@ 0x74
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	4614      	mov	r4, r2
 800e3ea:	468a      	mov	sl, r1
 800e3ec:	a803      	add	r0, sp, #12
 800e3ee:	461d      	mov	r5, r3
 800e3f0:	f000 f9b4 	bl	800e75c <_ZN8touchgfx12TextProviderC1Ev>
 800e3f4:	6833      	ldr	r3, [r6, #0]
 800e3f6:	4630      	mov	r0, r6
 800e3f8:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 800e3fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3fe:	4798      	blx	r3
 800e400:	6833      	ldr	r3, [r6, #0]
 800e402:	4607      	mov	r7, r0
 800e404:	4630      	mov	r0, r6
 800e406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e408:	4798      	blx	r3
 800e40a:	462a      	mov	r2, r5
 800e40c:	2500      	movs	r5, #0
 800e40e:	4621      	mov	r1, r4
 800e410:	9000      	str	r0, [sp, #0]
 800e412:	463b      	mov	r3, r7
 800e414:	462c      	mov	r4, r5
 800e416:	46a9      	mov	r9, r5
 800e418:	46a8      	mov	r8, r5
 800e41a:	a803      	add	r0, sp, #12
 800e41c:	f000 f9f1 	bl	800e802 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e420:	2300      	movs	r3, #0
 800e422:	9302      	str	r3, [sp, #8]
 800e424:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800e428:	429c      	cmp	r4, r3
 800e42a:	d002      	beq.n	800e432 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800e42c:	455c      	cmp	r4, fp
 800e42e:	bf18      	it	ne
 800e430:	4625      	movne	r5, r4
 800e432:	ab02      	add	r3, sp, #8
 800e434:	4632      	mov	r2, r6
 800e436:	4651      	mov	r1, sl
 800e438:	a803      	add	r0, sp, #12
 800e43a:	f000 fd05 	bl	800ee48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e43e:	4604      	mov	r4, r0
 800e440:	b108      	cbz	r0, 800e446 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800e442:	280a      	cmp	r0, #10
 800e444:	d10a      	bne.n	800e45c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800e446:	45c1      	cmp	r9, r8
 800e448:	bf38      	it	cc
 800e44a:	46c1      	movcc	r9, r8
 800e44c:	f04f 0800 	mov.w	r8, #0
 800e450:	2c00      	cmp	r4, #0
 800e452:	d1e5      	bne.n	800e420 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800e454:	4648      	mov	r0, r9
 800e456:	b01d      	add	sp, #116	@ 0x74
 800e458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e45c:	9a02      	ldr	r2, [sp, #8]
 800e45e:	2a00      	cmp	r2, #0
 800e460:	d0de      	beq.n	800e420 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800e462:	7b57      	ldrb	r7, [r2, #13]
 800e464:	4629      	mov	r1, r5
 800e466:	6833      	ldr	r3, [r6, #0]
 800e468:	007f      	lsls	r7, r7, #1
 800e46a:	8894      	ldrh	r4, [r2, #4]
 800e46c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e46e:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 800e472:	7a97      	ldrb	r7, [r2, #10]
 800e474:	4307      	orrs	r7, r0
 800e476:	4630      	mov	r0, r6
 800e478:	4798      	blx	r3
 800e47a:	4438      	add	r0, r7
 800e47c:	4480      	add	r8, r0
 800e47e:	fa1f f888 	uxth.w	r8, r8
 800e482:	e7e5      	b.n	800e450 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800e484 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800e484:	b508      	push	{r3, lr}
 800e486:	6803      	ldr	r3, [r0, #0]
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	4798      	blx	r3
 800e48c:	b128      	cbz	r0, 800e49a <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800e48e:	7b43      	ldrb	r3, [r0, #13]
 800e490:	7a80      	ldrb	r0, [r0, #10]
 800e492:	005b      	lsls	r3, r3, #1
 800e494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e498:	4318      	orrs	r0, r3
 800e49a:	bd08      	pop	{r3, pc}

0800e49c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800e49c:	b40e      	push	{r1, r2, r3}
 800e49e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4a0:	b09e      	sub	sp, #120	@ 0x78
 800e4a2:	4605      	mov	r5, r0
 800e4a4:	ab23      	add	r3, sp, #140	@ 0x8c
 800e4a6:	a805      	add	r0, sp, #20
 800e4a8:	f853 4b04 	ldr.w	r4, [r3], #4
 800e4ac:	9303      	str	r3, [sp, #12]
 800e4ae:	f000 f955 	bl	800e75c <_ZN8touchgfx12TextProviderC1Ev>
 800e4b2:	682b      	ldr	r3, [r5, #0]
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4b8:	4798      	blx	r3
 800e4ba:	682b      	ldr	r3, [r5, #0]
 800e4bc:	4606      	mov	r6, r0
 800e4be:	4628      	mov	r0, r5
 800e4c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4c2:	4798      	blx	r3
 800e4c4:	4633      	mov	r3, r6
 800e4c6:	4621      	mov	r1, r4
 800e4c8:	ae1e      	add	r6, sp, #120	@ 0x78
 800e4ca:	2400      	movs	r4, #0
 800e4cc:	9000      	str	r0, [sp, #0]
 800e4ce:	9a03      	ldr	r2, [sp, #12]
 800e4d0:	a805      	add	r0, sp, #20
 800e4d2:	f000 f996 	bl	800e802 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e4d6:	f846 4d68 	str.w	r4, [r6, #-104]!
 800e4da:	462a      	mov	r2, r5
 800e4dc:	4633      	mov	r3, r6
 800e4de:	4621      	mov	r1, r4
 800e4e0:	a805      	add	r0, sp, #20
 800e4e2:	f000 fcb1 	bl	800ee48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e4e6:	b300      	cbz	r0, 800e52a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 800e4e8:	280a      	cmp	r0, #10
 800e4ea:	d01a      	beq.n	800e522 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800e4ec:	9f04      	ldr	r7, [sp, #16]
 800e4ee:	b1c7      	cbz	r7, 800e522 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800e4f0:	7b78      	ldrb	r0, [r7, #13]
 800e4f2:	7a3b      	ldrb	r3, [r7, #8]
 800e4f4:	00c1      	lsls	r1, r0, #3
 800e4f6:	88ea      	ldrh	r2, [r5, #6]
 800e4f8:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800e4fc:	4319      	orrs	r1, r3
 800e4fe:	0643      	lsls	r3, r0, #25
 800e500:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800e504:	bf48      	it	mi
 800e506:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 800e50a:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800e50e:	bf48      	it	mi
 800e510:	b219      	sxthmi	r1, r3
 800e512:	79fb      	ldrb	r3, [r7, #7]
 800e514:	4303      	orrs	r3, r0
 800e516:	4413      	add	r3, r2
 800e518:	1a5b      	subs	r3, r3, r1
 800e51a:	b21b      	sxth	r3, r3
 800e51c:	429c      	cmp	r4, r3
 800e51e:	bfb8      	it	lt
 800e520:	461c      	movlt	r4, r3
 800e522:	4633      	mov	r3, r6
 800e524:	462a      	mov	r2, r5
 800e526:	2100      	movs	r1, #0
 800e528:	e7da      	b.n	800e4e0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800e52a:	b2a0      	uxth	r0, r4
 800e52c:	b01e      	add	sp, #120	@ 0x78
 800e52e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e532:	b003      	add	sp, #12
 800e534:	4770      	bx	lr

0800e536 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800e536:	7a43      	ldrb	r3, [r0, #9]
 800e538:	8880      	ldrh	r0, [r0, #4]
 800e53a:	4418      	add	r0, r3
 800e53c:	b280      	uxth	r0, r0
 800e53e:	4770      	bx	lr

0800e540 <_ZNK8touchgfx4Font13getFontHeightEv>:
 800e540:	6803      	ldr	r3, [r0, #0]
 800e542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e544:	4718      	bx	r3

0800e546 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800e546:	b40e      	push	{r1, r2, r3}
 800e548:	b570      	push	{r4, r5, r6, lr}
 800e54a:	b09d      	sub	sp, #116	@ 0x74
 800e54c:	4604      	mov	r4, r0
 800e54e:	ab21      	add	r3, sp, #132	@ 0x84
 800e550:	a803      	add	r0, sp, #12
 800e552:	f853 5b04 	ldr.w	r5, [r3], #4
 800e556:	9302      	str	r3, [sp, #8]
 800e558:	f000 f900 	bl	800e75c <_ZN8touchgfx12TextProviderC1Ev>
 800e55c:	6823      	ldr	r3, [r4, #0]
 800e55e:	4620      	mov	r0, r4
 800e560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e562:	4798      	blx	r3
 800e564:	6823      	ldr	r3, [r4, #0]
 800e566:	4606      	mov	r6, r0
 800e568:	4620      	mov	r0, r4
 800e56a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e56c:	2401      	movs	r4, #1
 800e56e:	4798      	blx	r3
 800e570:	4633      	mov	r3, r6
 800e572:	9000      	str	r0, [sp, #0]
 800e574:	4629      	mov	r1, r5
 800e576:	9a02      	ldr	r2, [sp, #8]
 800e578:	a803      	add	r0, sp, #12
 800e57a:	f000 f942 	bl	800e802 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e57e:	a803      	add	r0, sp, #12
 800e580:	f000 fce2 	bl	800ef48 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e584:	b2a3      	uxth	r3, r4
 800e586:	b138      	cbz	r0, 800e598 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 800e588:	280a      	cmp	r0, #10
 800e58a:	a803      	add	r0, sp, #12
 800e58c:	bf04      	itt	eq
 800e58e:	3301      	addeq	r3, #1
 800e590:	b21c      	sxtheq	r4, r3
 800e592:	f000 fcd9 	bl	800ef48 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e596:	e7f5      	b.n	800e584 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800e598:	4618      	mov	r0, r3
 800e59a:	b01d      	add	sp, #116	@ 0x74
 800e59c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e5a0:	b003      	add	sp, #12
 800e5a2:	4770      	bx	lr

0800e5a4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800e5a4:	b40e      	push	{r1, r2, r3}
 800e5a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5a8:	b09e      	sub	sp, #120	@ 0x78
 800e5aa:	4604      	mov	r4, r0
 800e5ac:	ab23      	add	r3, sp, #140	@ 0x8c
 800e5ae:	a805      	add	r0, sp, #20
 800e5b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e5b4:	9303      	str	r3, [sp, #12]
 800e5b6:	f000 f8d1 	bl	800e75c <_ZN8touchgfx12TextProviderC1Ev>
 800e5ba:	6823      	ldr	r3, [r4, #0]
 800e5bc:	4620      	mov	r0, r4
 800e5be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5c0:	4798      	blx	r3
 800e5c2:	6823      	ldr	r3, [r4, #0]
 800e5c4:	4606      	mov	r6, r0
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5ca:	4798      	blx	r3
 800e5cc:	4633      	mov	r3, r6
 800e5ce:	4629      	mov	r1, r5
 800e5d0:	9000      	str	r0, [sp, #0]
 800e5d2:	9a03      	ldr	r2, [sp, #12]
 800e5d4:	a805      	add	r0, sp, #20
 800e5d6:	f000 f914 	bl	800e802 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e5da:	ad1e      	add	r5, sp, #120	@ 0x78
 800e5dc:	2100      	movs	r1, #0
 800e5de:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 800e5e2:	4622      	mov	r2, r4
 800e5e4:	a805      	add	r0, sp, #20
 800e5e6:	f845 1d68 	str.w	r1, [r5, #-104]!
 800e5ea:	462b      	mov	r3, r5
 800e5ec:	f000 fc2c 	bl	800ee48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e5f0:	b1d8      	cbz	r0, 800e62a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800e5f2:	280a      	cmp	r0, #10
 800e5f4:	d012      	beq.n	800e61c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800e5f6:	9804      	ldr	r0, [sp, #16]
 800e5f8:	b180      	cbz	r0, 800e61c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800e5fa:	7b47      	ldrb	r7, [r0, #13]
 800e5fc:	88e2      	ldrh	r2, [r4, #6]
 800e5fe:	00fb      	lsls	r3, r7, #3
 800e600:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800e604:	7a03      	ldrb	r3, [r0, #8]
 800e606:	430b      	orrs	r3, r1
 800e608:	0679      	lsls	r1, r7, #25
 800e60a:	bf44      	itt	mi
 800e60c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e610:	b21b      	sxthmi	r3, r3
 800e612:	1ad3      	subs	r3, r2, r3
 800e614:	b21b      	sxth	r3, r3
 800e616:	429e      	cmp	r6, r3
 800e618:	bfa8      	it	ge
 800e61a:	461e      	movge	r6, r3
 800e61c:	462b      	mov	r3, r5
 800e61e:	4622      	mov	r2, r4
 800e620:	2100      	movs	r1, #0
 800e622:	a805      	add	r0, sp, #20
 800e624:	f000 fc10 	bl	800ee48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e628:	e7e2      	b.n	800e5f0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800e62a:	4630      	mov	r0, r6
 800e62c:	b01e      	add	sp, #120	@ 0x78
 800e62e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e632:	b003      	add	sp, #12
 800e634:	4770      	bx	lr
	...

0800e638 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800e638:	b530      	push	{r4, r5, lr}
 800e63a:	8083      	strh	r3, [r0, #4]
 800e63c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e640:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800e644:	80c3      	strh	r3, [r0, #6]
 800e646:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e64a:	6141      	str	r1, [r0, #20]
 800e64c:	7203      	strb	r3, [r0, #8]
 800e64e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e652:	8302      	strh	r2, [r0, #24]
 800e654:	7243      	strb	r3, [r0, #9]
 800e656:	7a83      	ldrb	r3, [r0, #10]
 800e658:	f365 0306 	bfi	r3, r5, #0, #7
 800e65c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800e660:	f365 13c7 	bfi	r3, r5, #7, #1
 800e664:	7283      	strb	r3, [r0, #10]
 800e666:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800e66a:	72c3      	strb	r3, [r0, #11]
 800e66c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e670:	7303      	strb	r3, [r0, #12]
 800e672:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800e676:	81c3      	strh	r3, [r0, #14]
 800e678:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800e67c:	8203      	strh	r3, [r0, #16]
 800e67e:	4b01      	ldr	r3, [pc, #4]	@ (800e684 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800e680:	6003      	str	r3, [r0, #0]
 800e682:	bd30      	pop	{r4, r5, pc}
 800e684:	08010584 	.word	0x08010584

0800e688 <_ZNK8touchgfx9ConstFont4findEt>:
 800e688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e68a:	6944      	ldr	r4, [r0, #20]
 800e68c:	b3bc      	cbz	r4, 800e6fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e68e:	88a3      	ldrh	r3, [r4, #4]
 800e690:	8b02      	ldrh	r2, [r0, #24]
 800e692:	1acb      	subs	r3, r1, r3
 800e694:	f102 32ff 	add.w	r2, r2, #4294967295
 800e698:	d431      	bmi.n	800e6fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e69a:	4293      	cmp	r3, r2
 800e69c:	dd0c      	ble.n	800e6b8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800e69e:	230e      	movs	r3, #14
 800e6a0:	fb03 4302 	mla	r3, r3, r2, r4
 800e6a4:	889b      	ldrh	r3, [r3, #4]
 800e6a6:	1a5b      	subs	r3, r3, r1
 800e6a8:	1ad3      	subs	r3, r2, r3
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	db27      	blt.n	800e6fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	bfbc      	itt	lt
 800e6b2:	2302      	movlt	r3, #2
 800e6b4:	fb92 f3f3 	sdivlt	r3, r2, r3
 800e6b8:	2500      	movs	r5, #0
 800e6ba:	260e      	movs	r6, #14
 800e6bc:	4295      	cmp	r5, r2
 800e6be:	dc1e      	bgt.n	800e6fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e6c0:	fb06 4003 	mla	r0, r6, r3, r4
 800e6c4:	8887      	ldrh	r7, [r0, #4]
 800e6c6:	42b9      	cmp	r1, r7
 800e6c8:	d01a      	beq.n	800e700 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800e6ca:	d20d      	bcs.n	800e6e8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800e6cc:	1e5a      	subs	r2, r3, #1
 800e6ce:	4295      	cmp	r5, r2
 800e6d0:	dc15      	bgt.n	800e6fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e6d2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800e6d6:	1a5b      	subs	r3, r3, r1
 800e6d8:	1ad3      	subs	r3, r2, r3
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	db0f      	blt.n	800e6fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e6de:	429d      	cmp	r5, r3
 800e6e0:	ddec      	ble.n	800e6bc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e6e2:	1953      	adds	r3, r2, r5
 800e6e4:	105b      	asrs	r3, r3, #1
 800e6e6:	e7e9      	b.n	800e6bc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e6e8:	1c5d      	adds	r5, r3, #1
 800e6ea:	42aa      	cmp	r2, r5
 800e6ec:	db07      	blt.n	800e6fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e6ee:	8a43      	ldrh	r3, [r0, #18]
 800e6f0:	1acb      	subs	r3, r1, r3
 800e6f2:	442b      	add	r3, r5
 800e6f4:	429d      	cmp	r5, r3
 800e6f6:	dc02      	bgt.n	800e6fe <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	dadf      	bge.n	800e6bc <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e6fc:	e7f1      	b.n	800e6e2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800e6fe:	2000      	movs	r0, #0
 800e700:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e702 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800e702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e704:	4604      	mov	r4, r0
 800e706:	4617      	mov	r7, r2
 800e708:	461e      	mov	r6, r3
 800e70a:	b911      	cbnz	r1, 800e712 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800e70c:	2500      	movs	r5, #0
 800e70e:	4628      	mov	r0, r5
 800e710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e712:	290a      	cmp	r1, #10
 800e714:	d0fa      	beq.n	800e70c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e716:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800e71a:	4291      	cmp	r1, r2
 800e71c:	d0f6      	beq.n	800e70c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e71e:	f242 020b 	movw	r2, #8203	@ 0x200b
 800e722:	4291      	cmp	r1, r2
 800e724:	d0f2      	beq.n	800e70c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e726:	f7ff ffaf 	bl	800e688 <_ZNK8touchgfx9ConstFont4findEt>
 800e72a:	4605      	mov	r5, r0
 800e72c:	b950      	cbnz	r0, 800e744 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800e72e:	6823      	ldr	r3, [r4, #0]
 800e730:	4620      	mov	r0, r4
 800e732:	691b      	ldr	r3, [r3, #16]
 800e734:	4798      	blx	r3
 800e736:	4601      	mov	r1, r0
 800e738:	4620      	mov	r0, r4
 800e73a:	f7ff ffa5 	bl	800e688 <_ZNK8touchgfx9ConstFont4findEt>
 800e73e:	4605      	mov	r5, r0
 800e740:	2800      	cmp	r0, #0
 800e742:	d0e3      	beq.n	800e70c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e744:	6823      	ldr	r3, [r4, #0]
 800e746:	4629      	mov	r1, r5
 800e748:	4620      	mov	r0, r4
 800e74a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e74c:	4798      	blx	r3
 800e74e:	6038      	str	r0, [r7, #0]
 800e750:	6823      	ldr	r3, [r4, #0]
 800e752:	4620      	mov	r0, r4
 800e754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e756:	4798      	blx	r3
 800e758:	7030      	strb	r0, [r6, #0]
 800e75a:	e7d8      	b.n	800e70e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800e75c <_ZN8touchgfx12TextProviderC1Ev>:
 800e75c:	b538      	push	{r3, r4, r5, lr}
 800e75e:	2500      	movs	r5, #0
 800e760:	2302      	movs	r3, #2
 800e762:	4604      	mov	r4, r0
 800e764:	220e      	movs	r2, #14
 800e766:	7403      	strb	r3, [r0, #16]
 800e768:	4629      	mov	r1, r5
 800e76a:	6145      	str	r5, [r0, #20]
 800e76c:	7605      	strb	r5, [r0, #24]
 800e76e:	83c5      	strh	r5, [r0, #30]
 800e770:	8405      	strh	r5, [r0, #32]
 800e772:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800e774:	8705      	strh	r5, [r0, #56]	@ 0x38
 800e776:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 800e778:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 800e77c:	e9c0 5500 	strd	r5, r5, [r0]
 800e780:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 800e784:	304c      	adds	r0, #76	@ 0x4c
 800e786:	f000 ff24 	bl	800f5d2 <memset>
 800e78a:	2301      	movs	r3, #1
 800e78c:	4620      	mov	r0, r4
 800e78e:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800e792:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e796:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 800e79a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 800e79e:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800e7a2:	f7ff fddb 	bl	800e35c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	bd38      	pop	{r3, r4, r5, pc}

0800e7aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800e7aa:	b530      	push	{r4, r5, lr}
 800e7ac:	2500      	movs	r5, #0
 800e7ae:	2401      	movs	r4, #1
 800e7b0:	6843      	ldr	r3, [r0, #4]
 800e7b2:	b913      	cbnz	r3, 800e7ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800e7b4:	6803      	ldr	r3, [r0, #0]
 800e7b6:	b313      	cbz	r3, 800e7fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e7b8:	6043      	str	r3, [r0, #4]
 800e7ba:	7e03      	ldrb	r3, [r0, #24]
 800e7bc:	b143      	cbz	r3, 800e7d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800e7be:	6943      	ldr	r3, [r0, #20]
 800e7c0:	b12b      	cbz	r3, 800e7ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e7c2:	881a      	ldrh	r2, [r3, #0]
 800e7c4:	b11a      	cbz	r2, 800e7ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e7c6:	1c9a      	adds	r2, r3, #2
 800e7c8:	6142      	str	r2, [r0, #20]
 800e7ca:	8818      	ldrh	r0, [r3, #0]
 800e7cc:	bd30      	pop	{r4, r5, pc}
 800e7ce:	7605      	strb	r5, [r0, #24]
 800e7d0:	6843      	ldr	r3, [r0, #4]
 800e7d2:	8819      	ldrh	r1, [r3, #0]
 800e7d4:	b199      	cbz	r1, 800e7fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e7d6:	1c9a      	adds	r2, r3, #2
 800e7d8:	2902      	cmp	r1, #2
 800e7da:	6042      	str	r2, [r0, #4]
 800e7dc:	d1f5      	bne.n	800e7ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800e7de:	7c03      	ldrb	r3, [r0, #16]
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d8e5      	bhi.n	800e7b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e7e4:	1c5a      	adds	r2, r3, #1
 800e7e6:	3302      	adds	r3, #2
 800e7e8:	7402      	strb	r2, [r0, #16]
 800e7ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e7ee:	6143      	str	r3, [r0, #20]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d0dd      	beq.n	800e7b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e7f4:	881b      	ldrh	r3, [r3, #0]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d0da      	beq.n	800e7b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e7fa:	7604      	strb	r4, [r0, #24]
 800e7fc:	e7d8      	b.n	800e7b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e7fe:	2000      	movs	r0, #0
 800e800:	e7e4      	b.n	800e7cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800e802 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800e802:	6001      	str	r1, [r0, #0]
 800e804:	2100      	movs	r1, #0
 800e806:	b430      	push	{r4, r5}
 800e808:	6041      	str	r1, [r0, #4]
 800e80a:	6815      	ldr	r5, [r2, #0]
 800e80c:	6085      	str	r5, [r0, #8]
 800e80e:	6852      	ldr	r2, [r2, #4]
 800e810:	6443      	str	r3, [r0, #68]	@ 0x44
 800e812:	9b02      	ldr	r3, [sp, #8]
 800e814:	60c2      	str	r2, [r0, #12]
 800e816:	7401      	strb	r1, [r0, #16]
 800e818:	6141      	str	r1, [r0, #20]
 800e81a:	7601      	strb	r1, [r0, #24]
 800e81c:	8701      	strh	r1, [r0, #56]	@ 0x38
 800e81e:	8401      	strh	r1, [r0, #32]
 800e820:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 800e824:	6483      	str	r3, [r0, #72]	@ 0x48
 800e826:	bc30      	pop	{r4, r5}
 800e828:	f7ff bd98 	b.w	800e35c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800e82c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800e82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e82e:	4605      	mov	r5, r0
 800e830:	4608      	mov	r0, r1
 800e832:	b1f1      	cbz	r1, 800e872 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 800e834:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 800e838:	460b      	mov	r3, r1
 800e83a:	f101 0708 	add.w	r7, r1, #8
 800e83e:	4622      	mov	r2, r4
 800e840:	6818      	ldr	r0, [r3, #0]
 800e842:	3308      	adds	r3, #8
 800e844:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e848:	4626      	mov	r6, r4
 800e84a:	42bb      	cmp	r3, r7
 800e84c:	c603      	stmia	r6!, {r0, r1}
 800e84e:	4634      	mov	r4, r6
 800e850:	d1f6      	bne.n	800e840 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800e852:	6818      	ldr	r0, [r3, #0]
 800e854:	6030      	str	r0, [r6, #0]
 800e856:	4610      	mov	r0, r2
 800e858:	889b      	ldrh	r3, [r3, #4]
 800e85a:	80b3      	strh	r3, [r6, #4]
 800e85c:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800e860:	015b      	lsls	r3, r3, #5
 800e862:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800e866:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 800e86a:	430b      	orrs	r3, r1
 800e86c:	425b      	negs	r3, r3
 800e86e:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800e872:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e874 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800e874:	b538      	push	{r3, r4, r5, lr}
 800e876:	460c      	mov	r4, r1
 800e878:	6811      	ldr	r1, [r2, #0]
 800e87a:	4610      	mov	r0, r2
 800e87c:	68cd      	ldr	r5, [r1, #12]
 800e87e:	4619      	mov	r1, r3
 800e880:	47a8      	blx	r5
 800e882:	2800      	cmp	r0, #0
 800e884:	bf08      	it	eq
 800e886:	4620      	moveq	r0, r4
 800e888:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e88c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800e88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e890:	468c      	mov	ip, r1
 800e892:	4605      	mov	r5, r0
 800e894:	4614      	mov	r4, r2
 800e896:	b942      	cbnz	r2, 800e8aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 800e898:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800e89c:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 800e8a0:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8aa:	7b50      	ldrb	r0, [r2, #13]
 800e8ac:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 800e8b0:	8893      	ldrh	r3, [r2, #4]
 800e8b2:	0106      	lsls	r6, r0, #4
 800e8b4:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800e8b8:	79e6      	ldrb	r6, [r4, #7]
 800e8ba:	4316      	orrs	r6, r2
 800e8bc:	185a      	adds	r2, r3, r1
 800e8be:	b291      	uxth	r1, r2
 800e8c0:	b2b7      	uxth	r7, r6
 800e8c2:	291d      	cmp	r1, #29
 800e8c4:	d87f      	bhi.n	800e9c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	10f6      	asrs	r6, r6, #3
 800e8ca:	408a      	lsls	r2, r1
 800e8cc:	498b      	ldr	r1, [pc, #556]	@ (800eafc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 800e8ce:	420a      	tst	r2, r1
 800e8d0:	d12e      	bne.n	800e930 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800e8d2:	f412 7f60 	tst.w	r2, #896	@ 0x380
 800e8d6:	d076      	beq.n	800e9c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 800e8d8:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e8dc:	4623      	mov	r3, r4
 800e8de:	f104 0e08 	add.w	lr, r4, #8
 800e8e2:	4614      	mov	r4, r2
 800e8e4:	6818      	ldr	r0, [r3, #0]
 800e8e6:	3308      	adds	r3, #8
 800e8e8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e8ec:	4694      	mov	ip, r2
 800e8ee:	4573      	cmp	r3, lr
 800e8f0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800e8f4:	4662      	mov	r2, ip
 800e8f6:	d1f5      	bne.n	800e8e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 800e8f8:	6818      	ldr	r0, [r3, #0]
 800e8fa:	f8cc 0000 	str.w	r0, [ip]
 800e8fe:	889b      	ldrh	r3, [r3, #4]
 800e900:	f8ac 3004 	strh.w	r3, [ip, #4]
 800e904:	b2b3      	uxth	r3, r6
 800e906:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 800e90a:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 800e90e:	1aca      	subs	r2, r1, r3
 800e910:	1bcf      	subs	r7, r1, r7
 800e912:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 800e916:	b292      	uxth	r2, r2
 800e918:	1afb      	subs	r3, r7, r3
 800e91a:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 800e91e:	10d2      	asrs	r2, r2, #3
 800e920:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 800e924:	4302      	orrs	r2, r0
 800e926:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 800e92a:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 800e92e:	e7b9      	b.n	800e8a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800e930:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e934:	4623      	mov	r3, r4
 800e936:	f104 0808 	add.w	r8, r4, #8
 800e93a:	4614      	mov	r4, r2
 800e93c:	6818      	ldr	r0, [r3, #0]
 800e93e:	3308      	adds	r3, #8
 800e940:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e944:	4696      	mov	lr, r2
 800e946:	4543      	cmp	r3, r8
 800e948:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e94c:	4672      	mov	r2, lr
 800e94e:	d1f5      	bne.n	800e93c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 800e950:	6818      	ldr	r0, [r3, #0]
 800e952:	f8ce 0000 	str.w	r0, [lr]
 800e956:	889b      	ldrh	r3, [r3, #4]
 800e958:	f8ae 3004 	strh.w	r3, [lr, #4]
 800e95c:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 800e95e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800e962:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800e964:	f640 6333 	movw	r3, #3635	@ 0xe33
 800e968:	4299      	cmp	r1, r3
 800e96a:	d111      	bne.n	800e990 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 800e96c:	f8dc 3000 	ldr.w	r3, [ip]
 800e970:	4660      	mov	r0, ip
 800e972:	68db      	ldr	r3, [r3, #12]
 800e974:	4798      	blx	r3
 800e976:	7b41      	ldrb	r1, [r0, #13]
 800e978:	00cb      	lsls	r3, r1, #3
 800e97a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e97e:	7a03      	ldrb	r3, [r0, #8]
 800e980:	4313      	orrs	r3, r2
 800e982:	064a      	lsls	r2, r1, #25
 800e984:	bf44      	itt	mi
 800e986:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e98a:	b21b      	sxthmi	r3, r3
 800e98c:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e990:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 800e994:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 800e998:	443b      	add	r3, r7
 800e99a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800e99e:	4433      	add	r3, r6
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e9a6:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 800e9aa:	10db      	asrs	r3, r3, #3
 800e9ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 800e9b6:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 800e9ba:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 800e9be:	1a9b      	subs	r3, r3, r2
 800e9c0:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800e9c4:	e76e      	b.n	800e8a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800e9c6:	f023 0204 	bic.w	r2, r3, #4
 800e9ca:	f640 611b 	movw	r1, #3611	@ 0xe1b
 800e9ce:	428a      	cmp	r2, r1
 800e9d0:	d003      	beq.n	800e9da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 800e9d2:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d138      	bne.n	800ea4c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 800e9da:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 800e9de:	4622      	mov	r2, r4
 800e9e0:	f104 0808 	add.w	r8, r4, #8
 800e9e4:	4634      	mov	r4, r6
 800e9e6:	6810      	ldr	r0, [r2, #0]
 800e9e8:	3208      	adds	r2, #8
 800e9ea:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800e9ee:	46b6      	mov	lr, r6
 800e9f0:	4542      	cmp	r2, r8
 800e9f2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e9f6:	4676      	mov	r6, lr
 800e9f8:	d1f5      	bne.n	800e9e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 800e9fa:	6810      	ldr	r0, [r2, #0]
 800e9fc:	3b01      	subs	r3, #1
 800e9fe:	4621      	mov	r1, r4
 800ea00:	f8ce 0000 	str.w	r0, [lr]
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	8892      	ldrh	r2, [r2, #4]
 800ea08:	4628      	mov	r0, r5
 800ea0a:	f8ae 2004 	strh.w	r2, [lr, #4]
 800ea0e:	4662      	mov	r2, ip
 800ea10:	f7ff ff30 	bl	800e874 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800ea14:	7b41      	ldrb	r1, [r0, #13]
 800ea16:	00cb      	lsls	r3, r1, #3
 800ea18:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800ea1c:	7a03      	ldrb	r3, [r0, #8]
 800ea1e:	0648      	lsls	r0, r1, #25
 800ea20:	ea43 0302 	orr.w	r3, r3, r2
 800ea24:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 800ea28:	bf44      	itt	mi
 800ea2a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ea2e:	b21b      	sxthmi	r3, r3
 800ea30:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800ea34:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800ea38:	005b      	lsls	r3, r3, #1
 800ea3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea3e:	4313      	orrs	r3, r2
 800ea40:	115a      	asrs	r2, r3, #5
 800ea42:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800ea46:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 800ea4a:	e047      	b.n	800eadc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 800ea4c:	00c2      	lsls	r2, r0, #3
 800ea4e:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 800ea52:	7a22      	ldrb	r2, [r4, #8]
 800ea54:	430a      	orrs	r2, r1
 800ea56:	0641      	lsls	r1, r0, #25
 800ea58:	f640 6109 	movw	r1, #3593	@ 0xe09
 800ea5c:	bf44      	itt	mi
 800ea5e:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 800ea62:	b212      	sxthmi	r2, r2
 800ea64:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800ea68:	f023 0210 	bic.w	r2, r3, #16
 800ea6c:	428a      	cmp	r2, r1
 800ea6e:	d003      	beq.n	800ea78 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 800ea70:	f640 6213 	movw	r2, #3603	@ 0xe13
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d13e      	bne.n	800eaf6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 800ea78:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800ea7c:	f104 0808 	add.w	r8, r4, #8
 800ea80:	4696      	mov	lr, r2
 800ea82:	6820      	ldr	r0, [r4, #0]
 800ea84:	3408      	adds	r4, #8
 800ea86:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800ea8a:	4616      	mov	r6, r2
 800ea8c:	4544      	cmp	r4, r8
 800ea8e:	c603      	stmia	r6!, {r0, r1}
 800ea90:	4632      	mov	r2, r6
 800ea92:	d1f6      	bne.n	800ea82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 800ea94:	6820      	ldr	r0, [r4, #0]
 800ea96:	6030      	str	r0, [r6, #0]
 800ea98:	4628      	mov	r0, r5
 800ea9a:	88a1      	ldrh	r1, [r4, #4]
 800ea9c:	4674      	mov	r4, lr
 800ea9e:	80b1      	strh	r1, [r6, #4]
 800eaa0:	4671      	mov	r1, lr
 800eaa2:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 800eaa6:	0076      	lsls	r6, r6, #1
 800eaa8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800eaac:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800eab0:	4316      	orrs	r6, r2
 800eab2:	f640 6213 	movw	r2, #3603	@ 0xe13
 800eab6:	4293      	cmp	r3, r2
 800eab8:	4662      	mov	r2, ip
 800eaba:	bf16      	itet	ne
 800eabc:	f103 33ff 	addne.w	r3, r3, #4294967295
 800eac0:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 800eac4:	b29b      	uxthne	r3, r3
 800eac6:	f7ff fed5 	bl	800e874 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800eaca:	7b43      	ldrb	r3, [r0, #13]
 800eacc:	7a82      	ldrb	r2, [r0, #10]
 800eace:	005b      	lsls	r3, r3, #1
 800ead0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ead4:	4313      	orrs	r3, r2
 800ead6:	1af6      	subs	r6, r6, r3
 800ead8:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 800eadc:	7b61      	ldrb	r1, [r4, #13]
 800eade:	00cb      	lsls	r3, r1, #3
 800eae0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800eae4:	7a23      	ldrb	r3, [r4, #8]
 800eae6:	4313      	orrs	r3, r2
 800eae8:	064a      	lsls	r2, r1, #25
 800eaea:	bf44      	itt	mi
 800eaec:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800eaf0:	b21b      	sxthmi	r3, r3
 800eaf2:	1bdb      	subs	r3, r3, r7
 800eaf4:	e719      	b.n	800e92a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	e7a5      	b.n	800ea46 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 800eafa:	bf00      	nop
 800eafc:	3fc00079 	.word	0x3fc00079

0800eb00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800eb00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb04:	4604      	mov	r4, r0
 800eb06:	b942      	cbnz	r2, 800eb1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800eb08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eb0c:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 800eb10:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800eb14:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800eb18:	e047      	b.n	800ebaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800eb1a:	7b51      	ldrb	r1, [r2, #13]
 800eb1c:	8893      	ldrh	r3, [r2, #4]
 800eb1e:	010d      	lsls	r5, r1, #4
 800eb20:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 800eb24:	79d5      	ldrb	r5, [r2, #7]
 800eb26:	4305      	orrs	r5, r0
 800eb28:	2d04      	cmp	r5, #4
 800eb2a:	bfcc      	ite	gt
 800eb2c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800eb30:	f04f 0e01 	movle.w	lr, #1
 800eb34:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 800eb38:	f200 80ab 	bhi.w	800ec92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800eb3c:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 800eb40:	4283      	cmp	r3, r0
 800eb42:	d216      	bcs.n	800eb72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eb44:	f240 605b 	movw	r0, #1627	@ 0x65b
 800eb48:	4283      	cmp	r3, r0
 800eb4a:	d859      	bhi.n	800ec00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800eb4c:	f240 6057 	movw	r0, #1623	@ 0x657
 800eb50:	4283      	cmp	r3, r0
 800eb52:	d20e      	bcs.n	800eb72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eb54:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800eb58:	d24a      	bcs.n	800ebf0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800eb5a:	f240 604e 	movw	r0, #1614	@ 0x64e
 800eb5e:	4283      	cmp	r3, r0
 800eb60:	d207      	bcs.n	800eb72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eb62:	f240 601a 	movw	r0, #1562	@ 0x61a
 800eb66:	4283      	cmp	r3, r0
 800eb68:	d02a      	beq.n	800ebc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eb6a:	d821      	bhi.n	800ebb0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800eb6c:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 800eb70:	d35b      	bcc.n	800ec2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800eb72:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 800eb76:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800eb7a:	f040 80d0 	bne.w	800ed1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800eb7e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 800eb82:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800eb86:	f040 80ca 	bne.w	800ed1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800eb8a:	00cb      	lsls	r3, r1, #3
 800eb8c:	0649      	lsls	r1, r1, #25
 800eb8e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800eb92:	7a13      	ldrb	r3, [r2, #8]
 800eb94:	ea43 0300 	orr.w	r3, r3, r0
 800eb98:	bf44      	itt	mi
 800eb9a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800eb9e:	b21b      	sxthmi	r3, r3
 800eba0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800eba4:	1b5d      	subs	r5, r3, r5
 800eba6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800ebaa:	4610      	mov	r0, r2
 800ebac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebb0:	f240 604b 	movw	r0, #1611	@ 0x64b
 800ebb4:	4283      	cmp	r3, r0
 800ebb6:	d338      	bcc.n	800ec2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ebb8:	f240 604c 	movw	r0, #1612	@ 0x64c
 800ebbc:	4283      	cmp	r3, r0
 800ebbe:	d9d8      	bls.n	800eb72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ebc0:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 800ebc4:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 800ebc8:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ebcc:	f040 80f3 	bne.w	800edb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800ebd0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ebd4:	f040 80ef 	bne.w	800edb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800ebd8:	00cb      	lsls	r3, r1, #3
 800ebda:	064e      	lsls	r6, r1, #25
 800ebdc:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800ebe0:	7a13      	ldrb	r3, [r2, #8]
 800ebe2:	ea43 0300 	orr.w	r3, r3, r0
 800ebe6:	bf44      	itt	mi
 800ebe8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ebec:	b21b      	sxthmi	r3, r3
 800ebee:	e7d9      	b.n	800eba4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800ebf0:	f240 6054 	movw	r0, #1620	@ 0x654
 800ebf4:	4283      	cmp	r3, r0
 800ebf6:	d8e3      	bhi.n	800ebc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ebf8:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800ebfc:	d9e0      	bls.n	800ebc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ebfe:	e7b8      	b.n	800eb72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ec00:	f240 6074 	movw	r0, #1652	@ 0x674
 800ec04:	4283      	cmp	r3, r0
 800ec06:	d0b4      	beq.n	800eb72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ec08:	d82d      	bhi.n	800ec66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800ec0a:	f240 605e 	movw	r0, #1630	@ 0x65e
 800ec0e:	4283      	cmp	r3, r0
 800ec10:	d804      	bhi.n	800ec1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800ec12:	f240 605d 	movw	r0, #1629	@ 0x65d
 800ec16:	4283      	cmp	r3, r0
 800ec18:	d3d2      	bcc.n	800ebc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ec1a:	e7aa      	b.n	800eb72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ec1c:	f240 605f 	movw	r0, #1631	@ 0x65f
 800ec20:	4283      	cmp	r3, r0
 800ec22:	d0cd      	beq.n	800ebc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ec24:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 800ec28:	d0a3      	beq.n	800eb72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ec2a:	00cb      	lsls	r3, r1, #3
 800ec2c:	0649      	lsls	r1, r1, #25
 800ec2e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800ec32:	7a13      	ldrb	r3, [r2, #8]
 800ec34:	ea43 0300 	orr.w	r3, r3, r0
 800ec38:	bf44      	itt	mi
 800ec3a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ec3e:	b21b      	sxthmi	r3, r3
 800ec40:	1b5d      	subs	r5, r3, r5
 800ec42:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800ec46:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800ec4a:	7b53      	ldrb	r3, [r2, #13]
 800ec4c:	015b      	lsls	r3, r3, #5
 800ec4e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800ec52:	7993      	ldrb	r3, [r2, #6]
 800ec54:	430b      	orrs	r3, r1
 800ec56:	2105      	movs	r1, #5
 800ec58:	005b      	lsls	r3, r3, #1
 800ec5a:	fb93 f3f1 	sdiv	r3, r3, r1
 800ec5e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800ec62:	440b      	add	r3, r1
 800ec64:	e756      	b.n	800eb14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800ec66:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 800ec6a:	4283      	cmp	r3, r0
 800ec6c:	d809      	bhi.n	800ec82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800ec6e:	f240 60df 	movw	r0, #1759	@ 0x6df
 800ec72:	4283      	cmp	r3, r0
 800ec74:	f4bf af7d 	bcs.w	800eb72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ec78:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 800ec7c:	2b05      	cmp	r3, #5
 800ec7e:	d8d4      	bhi.n	800ec2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ec80:	e777      	b.n	800eb72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ec82:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 800ec86:	4283      	cmp	r3, r0
 800ec88:	d09a      	beq.n	800ebc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ec8a:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800ec8e:	4283      	cmp	r3, r0
 800ec90:	e7ca      	b.n	800ec28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800ec92:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 800ec96:	d22b      	bcs.n	800ecf0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800ec98:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 800ec9c:	4283      	cmp	r3, r0
 800ec9e:	d28f      	bcs.n	800ebc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eca0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800eca4:	4283      	cmp	r3, r0
 800eca6:	d816      	bhi.n	800ecd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800eca8:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 800ecac:	4283      	cmp	r3, r0
 800ecae:	f4bf af60 	bcs.w	800eb72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ecb2:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 800ecb6:	4283      	cmp	r3, r0
 800ecb8:	d80a      	bhi.n	800ecd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800ecba:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800ecbe:	4283      	cmp	r3, r0
 800ecc0:	f4bf af57 	bcs.w	800eb72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ecc4:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 800ecc8:	4283      	cmp	r3, r0
 800ecca:	f43f af79 	beq.w	800ebc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ecce:	e7ac      	b.n	800ec2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ecd0:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 800ecd4:	e7f8      	b.n	800ecc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800ecd6:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800ecda:	4283      	cmp	r3, r0
 800ecdc:	d802      	bhi.n	800ece4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800ecde:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800ece2:	e798      	b.n	800ec16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800ece4:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 800ece8:	4283      	cmp	r3, r0
 800ecea:	f47f af42 	bne.w	800eb72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ecee:	e767      	b.n	800ebc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ecf0:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 800ecf4:	4283      	cmp	r3, r0
 800ecf6:	f43f af63 	beq.w	800ebc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ecfa:	d802      	bhi.n	800ed02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800ecfc:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 800ed00:	e7f2      	b.n	800ece8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800ed02:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 800ed06:	4283      	cmp	r3, r0
 800ed08:	d805      	bhi.n	800ed16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800ed0a:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 800ed0e:	4283      	cmp	r3, r0
 800ed10:	f4ff af2f 	bcc.w	800eb72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ed14:	e754      	b.n	800ebc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ed16:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 800ed1a:	4283      	cmp	r3, r0
 800ed1c:	e7af      	b.n	800ec7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800ed1e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800ed22:	4617      	mov	r7, r2
 800ed24:	f102 0808 	add.w	r8, r2, #8
 800ed28:	4666      	mov	r6, ip
 800ed2a:	6838      	ldr	r0, [r7, #0]
 800ed2c:	3708      	adds	r7, #8
 800ed2e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800ed32:	46e6      	mov	lr, ip
 800ed34:	4547      	cmp	r7, r8
 800ed36:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800ed3a:	46f4      	mov	ip, lr
 800ed3c:	d1f5      	bne.n	800ed2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800ed3e:	6838      	ldr	r0, [r7, #0]
 800ed40:	f8ce 0000 	str.w	r0, [lr]
 800ed44:	88b9      	ldrh	r1, [r7, #4]
 800ed46:	f8ae 1004 	strh.w	r1, [lr, #4]
 800ed4a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800ed4e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ed52:	d009      	beq.n	800ed68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 800ed54:	7b51      	ldrb	r1, [r2, #13]
 800ed56:	7992      	ldrb	r2, [r2, #6]
 800ed58:	0149      	lsls	r1, r1, #5
 800ed5a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800ed5e:	4311      	orrs	r1, r2
 800ed60:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800ed64:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800ed68:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ed6c:	b2ad      	uxth	r5, r5
 800ed6e:	d00d      	beq.n	800ed8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 800ed70:	442b      	add	r3, r5
 800ed72:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800ed7c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800ed80:	10db      	asrs	r3, r3, #3
 800ed82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ed86:	4313      	orrs	r3, r2
 800ed88:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800ed8c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800ed90:	00cb      	lsls	r3, r1, #3
 800ed92:	064f      	lsls	r7, r1, #25
 800ed94:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800ed98:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800ed9c:	ea43 0302 	orr.w	r3, r3, r2
 800eda0:	bf44      	itt	mi
 800eda2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800eda6:	b21b      	sxthmi	r3, r3
 800eda8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800edac:	1b5b      	subs	r3, r3, r5
 800edae:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800edb2:	4632      	mov	r2, r6
 800edb4:	e6f9      	b.n	800ebaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800edb6:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800edba:	4617      	mov	r7, r2
 800edbc:	f102 0908 	add.w	r9, r2, #8
 800edc0:	4666      	mov	r6, ip
 800edc2:	6838      	ldr	r0, [r7, #0]
 800edc4:	3708      	adds	r7, #8
 800edc6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800edca:	46e0      	mov	r8, ip
 800edcc:	454f      	cmp	r7, r9
 800edce:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800edd2:	46c4      	mov	ip, r8
 800edd4:	d1f5      	bne.n	800edc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 800edd6:	6838      	ldr	r0, [r7, #0]
 800edd8:	f8c8 0000 	str.w	r0, [r8]
 800eddc:	88b9      	ldrh	r1, [r7, #4]
 800edde:	f8a8 1004 	strh.w	r1, [r8, #4]
 800ede2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800ede6:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800edea:	d009      	beq.n	800ee00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 800edec:	7b51      	ldrb	r1, [r2, #13]
 800edee:	7992      	ldrb	r2, [r2, #6]
 800edf0:	0149      	lsls	r1, r1, #5
 800edf2:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800edf6:	4311      	orrs	r1, r2
 800edf8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800edfc:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800ee00:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ee04:	d00e      	beq.n	800ee24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 800ee06:	eba3 030e 	sub.w	r3, r3, lr
 800ee0a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800ee0e:	b29b      	uxth	r3, r3
 800ee10:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800ee14:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800ee18:	10db      	asrs	r3, r3, #3
 800ee1a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ee1e:	4313      	orrs	r3, r2
 800ee20:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800ee24:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800ee28:	00cb      	lsls	r3, r1, #3
 800ee2a:	0648      	lsls	r0, r1, #25
 800ee2c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800ee30:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800ee34:	ea43 0302 	orr.w	r3, r3, r2
 800ee38:	bf44      	itt	mi
 800ee3a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ee3e:	b21b      	sxthmi	r3, r3
 800ee40:	1b5d      	subs	r5, r3, r5
 800ee42:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800ee46:	e7b4      	b.n	800edb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0800ee48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800ee48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee4c:	461e      	mov	r6, r3
 800ee4e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800ee50:	4604      	mov	r4, r0
 800ee52:	4617      	mov	r7, r2
 800ee54:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ee58:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800ee5c:	f7ff f9d8 	bl	800e210 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800ee60:	4605      	mov	r5, r0
 800ee62:	b918      	cbnz	r0, 800ee6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800ee64:	6030      	str	r0, [r6, #0]
 800ee66:	4628      	mov	r0, r5
 800ee68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	4601      	mov	r1, r0
 800ee70:	4638      	mov	r0, r7
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	4798      	blx	r3
 800ee76:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800ee7a:	4602      	mov	r2, r0
 800ee7c:	6030      	str	r0, [r6, #0]
 800ee7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ee82:	d213      	bcs.n	800eeac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800ee84:	4643      	mov	r3, r8
 800ee86:	4639      	mov	r1, r7
 800ee88:	4620      	mov	r0, r4
 800ee8a:	f7ff fe39 	bl	800eb00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800ee8e:	6030      	str	r0, [r6, #0]
 800ee90:	6833      	ldr	r3, [r6, #0]
 800ee92:	b143      	cbz	r3, 800eea6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800ee94:	7b5a      	ldrb	r2, [r3, #13]
 800ee96:	7a9b      	ldrb	r3, [r3, #10]
 800ee98:	0052      	lsls	r2, r2, #1
 800ee9a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800ee9e:	4313      	orrs	r3, r2
 800eea0:	bf0c      	ite	eq
 800eea2:	2301      	moveq	r3, #1
 800eea4:	2300      	movne	r3, #0
 800eea6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800eeaa:	e7dc      	b.n	800ee66 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800eeac:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800eeb0:	b29b      	uxth	r3, r3
 800eeb2:	2b7f      	cmp	r3, #127	@ 0x7f
 800eeb4:	d804      	bhi.n	800eec0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800eeb6:	4639      	mov	r1, r7
 800eeb8:	4620      	mov	r0, r4
 800eeba:	f7ff fce7 	bl	800e88c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800eebe:	e7e6      	b.n	800ee8e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800eec0:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d0e3      	beq.n	800ee90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800eec8:	f640 1302 	movw	r3, #2306	@ 0x902
 800eecc:	429d      	cmp	r5, r3
 800eece:	d1df      	bne.n	800ee90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800eed0:	4601      	mov	r1, r0
 800eed2:	4620      	mov	r0, r4
 800eed4:	f7ff fcaa 	bl	800e82c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800eed8:	e7d9      	b.n	800ee8e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800eeda <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800eeda:	b510      	push	{r4, lr}
 800eedc:	4604      	mov	r4, r0
 800eede:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800eee2:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800eee4:	b1e1      	cbz	r1, 800ef20 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800eee6:	2b0a      	cmp	r3, #10
 800eee8:	d02d      	beq.n	800ef46 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800eeea:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800eeec:	3901      	subs	r1, #1
 800eeee:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800eef2:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800eef4:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 800eef8:	1c51      	adds	r1, r2, #1
 800eefa:	b289      	uxth	r1, r1
 800eefc:	2901      	cmp	r1, #1
 800eefe:	bf8a      	itet	hi
 800ef00:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ef04:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 800ef06:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 800ef08:	1c5a      	adds	r2, r3, #1
 800ef0a:	8722      	strh	r2, [r4, #56]	@ 0x38
 800ef0c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800ef0e:	4413      	add	r3, r2
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	2b09      	cmp	r3, #9
 800ef14:	bf88      	it	hi
 800ef16:	3b0a      	subhi	r3, #10
 800ef18:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ef1c:	8458      	strh	r0, [r3, #34]	@ 0x22
 800ef1e:	e7de      	b.n	800eede <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800ef20:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800ef22:	2b0a      	cmp	r3, #10
 800ef24:	d00f      	beq.n	800ef46 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800ef26:	4620      	mov	r0, r4
 800ef28:	f7ff fc3f 	bl	800e7aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800ef2c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800ef2e:	1c5a      	adds	r2, r3, #1
 800ef30:	8722      	strh	r2, [r4, #56]	@ 0x38
 800ef32:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800ef34:	4413      	add	r3, r2
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	2b09      	cmp	r3, #9
 800ef3a:	bf88      	it	hi
 800ef3c:	3b0a      	subhi	r3, #10
 800ef3e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ef42:	8458      	strh	r0, [r3, #34]	@ 0x22
 800ef44:	e7ec      	b.n	800ef20 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800ef46:	bd10      	pop	{r4, pc}

0800ef48 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800ef48:	b538      	push	{r3, r4, r5, lr}
 800ef4a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800ef4c:	4604      	mov	r4, r0
 800ef4e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800ef52:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 800ef54:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 800ef56:	3a01      	subs	r2, #1
 800ef58:	8702      	strh	r2, [r0, #56]	@ 0x38
 800ef5a:	1c5a      	adds	r2, r3, #1
 800ef5c:	b292      	uxth	r2, r2
 800ef5e:	2a09      	cmp	r2, #9
 800ef60:	bf8a      	itet	hi
 800ef62:	3b09      	subhi	r3, #9
 800ef64:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 800ef66:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 800ef68:	f7ff ffb7 	bl	800eeda <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800ef6c:	8c23      	ldrh	r3, [r4, #32]
 800ef6e:	2b01      	cmp	r3, #1
 800ef70:	bf9c      	itt	ls
 800ef72:	3301      	addls	r3, #1
 800ef74:	8423      	strhls	r3, [r4, #32]
 800ef76:	8be3      	ldrh	r3, [r4, #30]
 800ef78:	b90b      	cbnz	r3, 800ef7e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800ef7a:	2302      	movs	r3, #2
 800ef7c:	83e3      	strh	r3, [r4, #30]
 800ef7e:	8be3      	ldrh	r3, [r4, #30]
 800ef80:	4628      	mov	r0, r5
 800ef82:	3b01      	subs	r3, #1
 800ef84:	b29b      	uxth	r3, r3
 800ef86:	83e3      	strh	r3, [r4, #30]
 800ef88:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800ef8c:	8365      	strh	r5, [r4, #26]
 800ef8e:	bd38      	pop	{r3, r4, r5, pc}

0800ef90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800ef90:	428a      	cmp	r2, r1
 800ef92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef96:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 800ef98:	d932      	bls.n	800f000 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 800ef9a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 800ef9c:	1a54      	subs	r4, r2, r1
 800ef9e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 800efa2:	19ee      	adds	r6, r5, r7
 800efa4:	fa1f fe84 	uxth.w	lr, r4
 800efa8:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 800efac:	3e01      	subs	r6, #1
 800efae:	b2b4      	uxth	r4, r6
 800efb0:	eba4 090e 	sub.w	r9, r4, lr
 800efb4:	fa1f f989 	uxth.w	r9, r9
 800efb8:	2c09      	cmp	r4, #9
 800efba:	4626      	mov	r6, r4
 800efbc:	bf88      	it	hi
 800efbe:	f1a4 060a 	subhi.w	r6, r4, #10
 800efc2:	f1bc 0f00 	cmp.w	ip, #0
 800efc6:	f104 34ff 	add.w	r4, r4, #4294967295
 800efca:	bf08      	it	eq
 800efcc:	f04f 0c02 	moveq.w	ip, #2
 800efd0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800efd4:	b2a4      	uxth	r4, r4
 800efd6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800efda:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800efde:	454c      	cmp	r4, r9
 800efe0:	fa1f fc8c 	uxth.w	ip, ip
 800efe4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800efe8:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 800efec:	d1e4      	bne.n	800efb8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800efee:	eba5 050e 	sub.w	r5, r5, lr
 800eff2:	eb0e 0408 	add.w	r4, lr, r8
 800eff6:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 800effa:	8705      	strh	r5, [r0, #56]	@ 0x38
 800effc:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 800f000:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800f002:	250a      	movs	r5, #10
 800f004:	1a64      	subs	r4, r4, r1
 800f006:	4439      	add	r1, r7
 800f008:	b289      	uxth	r1, r1
 800f00a:	8704      	strh	r4, [r0, #56]	@ 0x38
 800f00c:	2909      	cmp	r1, #9
 800f00e:	bf88      	it	hi
 800f010:	390a      	subhi	r1, #10
 800f012:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800f014:	b18a      	cbz	r2, 800f03a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 800f016:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 800f018:	3a01      	subs	r2, #1
 800f01a:	3101      	adds	r1, #1
 800f01c:	b292      	uxth	r2, r2
 800f01e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800f022:	8701      	strh	r1, [r0, #56]	@ 0x38
 800f024:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800f026:	b901      	cbnz	r1, 800f02a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 800f028:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800f02a:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800f02c:	3901      	subs	r1, #1
 800f02e:	b289      	uxth	r1, r1
 800f030:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800f032:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800f036:	844c      	strh	r4, [r1, #34]	@ 0x22
 800f038:	e7ec      	b.n	800f014 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 800f03a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f03e:	f7ff bf4c 	b.w	800eeda <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800f042 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800f042:	b570      	push	{r4, r5, r6, lr}
 800f044:	2500      	movs	r5, #0
 800f046:	4295      	cmp	r5, r2
 800f048:	d011      	beq.n	800f06e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800f04a:	8bc4      	ldrh	r4, [r0, #30]
 800f04c:	f831 6b02 	ldrh.w	r6, [r1], #2
 800f050:	4414      	add	r4, r2
 800f052:	3c01      	subs	r4, #1
 800f054:	1b64      	subs	r4, r4, r5
 800f056:	b2a4      	uxth	r4, r4
 800f058:	2c01      	cmp	r4, #1
 800f05a:	bf88      	it	hi
 800f05c:	3c02      	subhi	r4, #2
 800f05e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f062:	8b64      	ldrh	r4, [r4, #26]
 800f064:	42b4      	cmp	r4, r6
 800f066:	d117      	bne.n	800f098 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800f068:	3501      	adds	r5, #1
 800f06a:	b2ad      	uxth	r5, r5
 800f06c:	e7eb      	b.n	800f046 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800f06e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800f072:	2400      	movs	r4, #0
 800f074:	4413      	add	r3, r2
 800f076:	b2a2      	uxth	r2, r4
 800f078:	429a      	cmp	r2, r3
 800f07a:	da0f      	bge.n	800f09c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800f07c:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 800f07e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800f082:	3401      	adds	r4, #1
 800f084:	4432      	add	r2, r6
 800f086:	b292      	uxth	r2, r2
 800f088:	2a09      	cmp	r2, #9
 800f08a:	bf88      	it	hi
 800f08c:	3a0a      	subhi	r2, #10
 800f08e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800f092:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800f094:	42aa      	cmp	r2, r5
 800f096:	d0ee      	beq.n	800f076 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800f098:	2000      	movs	r0, #0
 800f09a:	bd70      	pop	{r4, r5, r6, pc}
 800f09c:	2001      	movs	r0, #1
 800f09e:	e7fc      	b.n	800f09a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800f0a0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800f0a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0a4:	4605      	mov	r5, r0
 800f0a6:	4616      	mov	r6, r2
 800f0a8:	1c8c      	adds	r4, r1, #2
 800f0aa:	8809      	ldrh	r1, [r1, #0]
 800f0ac:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800f0b0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800f0b4:	42b3      	cmp	r3, r6
 800f0b6:	d124      	bne.n	800f102 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800f0b8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800f0bc:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800f0c0:	f001 070f 	and.w	r7, r1, #15
 800f0c4:	4652      	mov	r2, sl
 800f0c6:	f8cd 8000 	str.w	r8, [sp]
 800f0ca:	464b      	mov	r3, r9
 800f0cc:	4621      	mov	r1, r4
 800f0ce:	4628      	mov	r0, r5
 800f0d0:	f7ff ffb7 	bl	800f042 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800f0d4:	4683      	mov	fp, r0
 800f0d6:	b168      	cbz	r0, 800f0f4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800f0d8:	eb0a 0109 	add.w	r1, sl, r9
 800f0dc:	463a      	mov	r2, r7
 800f0de:	4628      	mov	r0, r5
 800f0e0:	4441      	add	r1, r8
 800f0e2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800f0e6:	4649      	mov	r1, r9
 800f0e8:	f7ff ff52 	bl	800ef90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800f0ec:	4658      	mov	r0, fp
 800f0ee:	b003      	add	sp, #12
 800f0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f4:	eb07 010a 	add.w	r1, r7, sl
 800f0f8:	4449      	add	r1, r9
 800f0fa:	4441      	add	r1, r8
 800f0fc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800f100:	e7d2      	b.n	800f0a8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800f102:	f04f 0b00 	mov.w	fp, #0
 800f106:	e7f1      	b.n	800f0ec <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800f108 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800f108:	b570      	push	{r4, r5, r6, lr}
 800f10a:	8810      	ldrh	r0, [r2, #0]
 800f10c:	4298      	cmp	r0, r3
 800f10e:	d817      	bhi.n	800f140 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f110:	1e48      	subs	r0, r1, #1
 800f112:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800f116:	4298      	cmp	r0, r3
 800f118:	d312      	bcc.n	800f140 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f11a:	2400      	movs	r4, #0
 800f11c:	428c      	cmp	r4, r1
 800f11e:	d20f      	bcs.n	800f140 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f120:	1860      	adds	r0, r4, r1
 800f122:	1040      	asrs	r0, r0, #1
 800f124:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800f128:	0085      	lsls	r5, r0, #2
 800f12a:	42b3      	cmp	r3, r6
 800f12c:	d902      	bls.n	800f134 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800f12e:	3001      	adds	r0, #1
 800f130:	b284      	uxth	r4, r0
 800f132:	e7f3      	b.n	800f11c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f134:	d201      	bcs.n	800f13a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800f136:	b281      	uxth	r1, r0
 800f138:	e7f0      	b.n	800f11c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f13a:	442a      	add	r2, r5
 800f13c:	8850      	ldrh	r0, [r2, #2]
 800f13e:	bd70      	pop	{r4, r5, r6, pc}
 800f140:	2000      	movs	r0, #0
 800f142:	e7fc      	b.n	800f13e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800f144 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800f144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f148:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800f14a:	4604      	mov	r4, r0
 800f14c:	260b      	movs	r6, #11
 800f14e:	886f      	ldrh	r7, [r5, #2]
 800f150:	087f      	lsrs	r7, r7, #1
 800f152:	3e01      	subs	r6, #1
 800f154:	d013      	beq.n	800f17e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f156:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800f158:	462a      	mov	r2, r5
 800f15a:	4639      	mov	r1, r7
 800f15c:	4620      	mov	r0, r4
 800f15e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f162:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800f166:	4643      	mov	r3, r8
 800f168:	f7ff ffce 	bl	800f108 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800f16c:	b138      	cbz	r0, 800f17e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f16e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800f172:	4642      	mov	r2, r8
 800f174:	4620      	mov	r0, r4
 800f176:	f7ff ff93 	bl	800f0a0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800f17a:	2800      	cmp	r0, #0
 800f17c:	d1e9      	bne.n	800f152 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800f17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f182 <_ZdlPvj>:
 800f182:	f000 b812 	b.w	800f1aa <_ZdlPv>

0800f186 <__cxa_guard_acquire>:
 800f186:	6802      	ldr	r2, [r0, #0]
 800f188:	07d2      	lsls	r2, r2, #31
 800f18a:	4603      	mov	r3, r0
 800f18c:	d405      	bmi.n	800f19a <__cxa_guard_acquire+0x14>
 800f18e:	7842      	ldrb	r2, [r0, #1]
 800f190:	b102      	cbz	r2, 800f194 <__cxa_guard_acquire+0xe>
 800f192:	deff      	udf	#255	@ 0xff
 800f194:	2001      	movs	r0, #1
 800f196:	7058      	strb	r0, [r3, #1]
 800f198:	4770      	bx	lr
 800f19a:	2000      	movs	r0, #0
 800f19c:	4770      	bx	lr

0800f19e <__cxa_guard_release>:
 800f19e:	2301      	movs	r3, #1
 800f1a0:	6003      	str	r3, [r0, #0]
 800f1a2:	4770      	bx	lr

0800f1a4 <__cxa_pure_virtual>:
 800f1a4:	b508      	push	{r3, lr}
 800f1a6:	f000 f80f 	bl	800f1c8 <_ZSt9terminatev>

0800f1aa <_ZdlPv>:
 800f1aa:	f000 b845 	b.w	800f238 <free>

0800f1ae <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f1ae:	b508      	push	{r3, lr}
 800f1b0:	4780      	blx	r0
 800f1b2:	f000 f80e 	bl	800f1d2 <abort>
	...

0800f1b8 <_ZSt13get_terminatev>:
 800f1b8:	4b02      	ldr	r3, [pc, #8]	@ (800f1c4 <_ZSt13get_terminatev+0xc>)
 800f1ba:	6818      	ldr	r0, [r3, #0]
 800f1bc:	f3bf 8f5b 	dmb	ish
 800f1c0:	4770      	bx	lr
 800f1c2:	bf00      	nop
 800f1c4:	240001bc 	.word	0x240001bc

0800f1c8 <_ZSt9terminatev>:
 800f1c8:	b508      	push	{r3, lr}
 800f1ca:	f7ff fff5 	bl	800f1b8 <_ZSt13get_terminatev>
 800f1ce:	f7ff ffee 	bl	800f1ae <_ZN10__cxxabiv111__terminateEPFvvE>

0800f1d2 <abort>:
 800f1d2:	b508      	push	{r3, lr}
 800f1d4:	2006      	movs	r0, #6
 800f1d6:	f000 fa2d 	bl	800f634 <raise>
 800f1da:	2001      	movs	r0, #1
 800f1dc:	f7f3 f9e4 	bl	80025a8 <_exit>

0800f1e0 <__assert_func>:
 800f1e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1e2:	4614      	mov	r4, r2
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	4b09      	ldr	r3, [pc, #36]	@ (800f20c <__assert_func+0x2c>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	4605      	mov	r5, r0
 800f1ec:	68d8      	ldr	r0, [r3, #12]
 800f1ee:	b14c      	cbz	r4, 800f204 <__assert_func+0x24>
 800f1f0:	4b07      	ldr	r3, [pc, #28]	@ (800f210 <__assert_func+0x30>)
 800f1f2:	9100      	str	r1, [sp, #0]
 800f1f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f1f8:	4906      	ldr	r1, [pc, #24]	@ (800f214 <__assert_func+0x34>)
 800f1fa:	462b      	mov	r3, r5
 800f1fc:	f000 f976 	bl	800f4ec <fiprintf>
 800f200:	f7ff ffe7 	bl	800f1d2 <abort>
 800f204:	4b04      	ldr	r3, [pc, #16]	@ (800f218 <__assert_func+0x38>)
 800f206:	461c      	mov	r4, r3
 800f208:	e7f3      	b.n	800f1f2 <__assert_func+0x12>
 800f20a:	bf00      	nop
 800f20c:	240001cc 	.word	0x240001cc
 800f210:	080105e4 	.word	0x080105e4
 800f214:	080105f1 	.word	0x080105f1
 800f218:	0801061f 	.word	0x0801061f

0800f21c <atexit>:
 800f21c:	2300      	movs	r3, #0
 800f21e:	4601      	mov	r1, r0
 800f220:	461a      	mov	r2, r3
 800f222:	4618      	mov	r0, r3
 800f224:	f000 baa6 	b.w	800f774 <__register_exitproc>

0800f228 <malloc>:
 800f228:	4b02      	ldr	r3, [pc, #8]	@ (800f234 <malloc+0xc>)
 800f22a:	4601      	mov	r1, r0
 800f22c:	6818      	ldr	r0, [r3, #0]
 800f22e:	f000 b82d 	b.w	800f28c <_malloc_r>
 800f232:	bf00      	nop
 800f234:	240001cc 	.word	0x240001cc

0800f238 <free>:
 800f238:	4b02      	ldr	r3, [pc, #8]	@ (800f244 <free+0xc>)
 800f23a:	4601      	mov	r1, r0
 800f23c:	6818      	ldr	r0, [r3, #0]
 800f23e:	f000 baf5 	b.w	800f82c <_free_r>
 800f242:	bf00      	nop
 800f244:	240001cc 	.word	0x240001cc

0800f248 <sbrk_aligned>:
 800f248:	b570      	push	{r4, r5, r6, lr}
 800f24a:	4e0f      	ldr	r6, [pc, #60]	@ (800f288 <sbrk_aligned+0x40>)
 800f24c:	460c      	mov	r4, r1
 800f24e:	6831      	ldr	r1, [r6, #0]
 800f250:	4605      	mov	r5, r0
 800f252:	b911      	cbnz	r1, 800f25a <sbrk_aligned+0x12>
 800f254:	f000 fa3e 	bl	800f6d4 <_sbrk_r>
 800f258:	6030      	str	r0, [r6, #0]
 800f25a:	4621      	mov	r1, r4
 800f25c:	4628      	mov	r0, r5
 800f25e:	f000 fa39 	bl	800f6d4 <_sbrk_r>
 800f262:	1c43      	adds	r3, r0, #1
 800f264:	d103      	bne.n	800f26e <sbrk_aligned+0x26>
 800f266:	f04f 34ff 	mov.w	r4, #4294967295
 800f26a:	4620      	mov	r0, r4
 800f26c:	bd70      	pop	{r4, r5, r6, pc}
 800f26e:	1cc4      	adds	r4, r0, #3
 800f270:	f024 0403 	bic.w	r4, r4, #3
 800f274:	42a0      	cmp	r0, r4
 800f276:	d0f8      	beq.n	800f26a <sbrk_aligned+0x22>
 800f278:	1a21      	subs	r1, r4, r0
 800f27a:	4628      	mov	r0, r5
 800f27c:	f000 fa2a 	bl	800f6d4 <_sbrk_r>
 800f280:	3001      	adds	r0, #1
 800f282:	d1f2      	bne.n	800f26a <sbrk_aligned+0x22>
 800f284:	e7ef      	b.n	800f266 <sbrk_aligned+0x1e>
 800f286:	bf00      	nop
 800f288:	240007a4 	.word	0x240007a4

0800f28c <_malloc_r>:
 800f28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f290:	1ccd      	adds	r5, r1, #3
 800f292:	f025 0503 	bic.w	r5, r5, #3
 800f296:	3508      	adds	r5, #8
 800f298:	2d0c      	cmp	r5, #12
 800f29a:	bf38      	it	cc
 800f29c:	250c      	movcc	r5, #12
 800f29e:	2d00      	cmp	r5, #0
 800f2a0:	4606      	mov	r6, r0
 800f2a2:	db01      	blt.n	800f2a8 <_malloc_r+0x1c>
 800f2a4:	42a9      	cmp	r1, r5
 800f2a6:	d904      	bls.n	800f2b2 <_malloc_r+0x26>
 800f2a8:	230c      	movs	r3, #12
 800f2aa:	6033      	str	r3, [r6, #0]
 800f2ac:	2000      	movs	r0, #0
 800f2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f388 <_malloc_r+0xfc>
 800f2b6:	f000 f869 	bl	800f38c <__malloc_lock>
 800f2ba:	f8d8 3000 	ldr.w	r3, [r8]
 800f2be:	461c      	mov	r4, r3
 800f2c0:	bb44      	cbnz	r4, 800f314 <_malloc_r+0x88>
 800f2c2:	4629      	mov	r1, r5
 800f2c4:	4630      	mov	r0, r6
 800f2c6:	f7ff ffbf 	bl	800f248 <sbrk_aligned>
 800f2ca:	1c43      	adds	r3, r0, #1
 800f2cc:	4604      	mov	r4, r0
 800f2ce:	d158      	bne.n	800f382 <_malloc_r+0xf6>
 800f2d0:	f8d8 4000 	ldr.w	r4, [r8]
 800f2d4:	4627      	mov	r7, r4
 800f2d6:	2f00      	cmp	r7, #0
 800f2d8:	d143      	bne.n	800f362 <_malloc_r+0xd6>
 800f2da:	2c00      	cmp	r4, #0
 800f2dc:	d04b      	beq.n	800f376 <_malloc_r+0xea>
 800f2de:	6823      	ldr	r3, [r4, #0]
 800f2e0:	4639      	mov	r1, r7
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	eb04 0903 	add.w	r9, r4, r3
 800f2e8:	f000 f9f4 	bl	800f6d4 <_sbrk_r>
 800f2ec:	4581      	cmp	r9, r0
 800f2ee:	d142      	bne.n	800f376 <_malloc_r+0xea>
 800f2f0:	6821      	ldr	r1, [r4, #0]
 800f2f2:	1a6d      	subs	r5, r5, r1
 800f2f4:	4629      	mov	r1, r5
 800f2f6:	4630      	mov	r0, r6
 800f2f8:	f7ff ffa6 	bl	800f248 <sbrk_aligned>
 800f2fc:	3001      	adds	r0, #1
 800f2fe:	d03a      	beq.n	800f376 <_malloc_r+0xea>
 800f300:	6823      	ldr	r3, [r4, #0]
 800f302:	442b      	add	r3, r5
 800f304:	6023      	str	r3, [r4, #0]
 800f306:	f8d8 3000 	ldr.w	r3, [r8]
 800f30a:	685a      	ldr	r2, [r3, #4]
 800f30c:	bb62      	cbnz	r2, 800f368 <_malloc_r+0xdc>
 800f30e:	f8c8 7000 	str.w	r7, [r8]
 800f312:	e00f      	b.n	800f334 <_malloc_r+0xa8>
 800f314:	6822      	ldr	r2, [r4, #0]
 800f316:	1b52      	subs	r2, r2, r5
 800f318:	d420      	bmi.n	800f35c <_malloc_r+0xd0>
 800f31a:	2a0b      	cmp	r2, #11
 800f31c:	d917      	bls.n	800f34e <_malloc_r+0xc2>
 800f31e:	1961      	adds	r1, r4, r5
 800f320:	42a3      	cmp	r3, r4
 800f322:	6025      	str	r5, [r4, #0]
 800f324:	bf18      	it	ne
 800f326:	6059      	strne	r1, [r3, #4]
 800f328:	6863      	ldr	r3, [r4, #4]
 800f32a:	bf08      	it	eq
 800f32c:	f8c8 1000 	streq.w	r1, [r8]
 800f330:	5162      	str	r2, [r4, r5]
 800f332:	604b      	str	r3, [r1, #4]
 800f334:	4630      	mov	r0, r6
 800f336:	f000 f82f 	bl	800f398 <__malloc_unlock>
 800f33a:	f104 000b 	add.w	r0, r4, #11
 800f33e:	1d23      	adds	r3, r4, #4
 800f340:	f020 0007 	bic.w	r0, r0, #7
 800f344:	1ac2      	subs	r2, r0, r3
 800f346:	bf1c      	itt	ne
 800f348:	1a1b      	subne	r3, r3, r0
 800f34a:	50a3      	strne	r3, [r4, r2]
 800f34c:	e7af      	b.n	800f2ae <_malloc_r+0x22>
 800f34e:	6862      	ldr	r2, [r4, #4]
 800f350:	42a3      	cmp	r3, r4
 800f352:	bf0c      	ite	eq
 800f354:	f8c8 2000 	streq.w	r2, [r8]
 800f358:	605a      	strne	r2, [r3, #4]
 800f35a:	e7eb      	b.n	800f334 <_malloc_r+0xa8>
 800f35c:	4623      	mov	r3, r4
 800f35e:	6864      	ldr	r4, [r4, #4]
 800f360:	e7ae      	b.n	800f2c0 <_malloc_r+0x34>
 800f362:	463c      	mov	r4, r7
 800f364:	687f      	ldr	r7, [r7, #4]
 800f366:	e7b6      	b.n	800f2d6 <_malloc_r+0x4a>
 800f368:	461a      	mov	r2, r3
 800f36a:	685b      	ldr	r3, [r3, #4]
 800f36c:	42a3      	cmp	r3, r4
 800f36e:	d1fb      	bne.n	800f368 <_malloc_r+0xdc>
 800f370:	2300      	movs	r3, #0
 800f372:	6053      	str	r3, [r2, #4]
 800f374:	e7de      	b.n	800f334 <_malloc_r+0xa8>
 800f376:	230c      	movs	r3, #12
 800f378:	6033      	str	r3, [r6, #0]
 800f37a:	4630      	mov	r0, r6
 800f37c:	f000 f80c 	bl	800f398 <__malloc_unlock>
 800f380:	e794      	b.n	800f2ac <_malloc_r+0x20>
 800f382:	6005      	str	r5, [r0, #0]
 800f384:	e7d6      	b.n	800f334 <_malloc_r+0xa8>
 800f386:	bf00      	nop
 800f388:	240007a8 	.word	0x240007a8

0800f38c <__malloc_lock>:
 800f38c:	4801      	ldr	r0, [pc, #4]	@ (800f394 <__malloc_lock+0x8>)
 800f38e:	f000 b9ee 	b.w	800f76e <__retarget_lock_acquire_recursive>
 800f392:	bf00      	nop
 800f394:	240008ec 	.word	0x240008ec

0800f398 <__malloc_unlock>:
 800f398:	4801      	ldr	r0, [pc, #4]	@ (800f3a0 <__malloc_unlock+0x8>)
 800f39a:	f000 b9e9 	b.w	800f770 <__retarget_lock_release_recursive>
 800f39e:	bf00      	nop
 800f3a0:	240008ec 	.word	0x240008ec

0800f3a4 <std>:
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	b510      	push	{r4, lr}
 800f3a8:	4604      	mov	r4, r0
 800f3aa:	e9c0 3300 	strd	r3, r3, [r0]
 800f3ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f3b2:	6083      	str	r3, [r0, #8]
 800f3b4:	8181      	strh	r1, [r0, #12]
 800f3b6:	6643      	str	r3, [r0, #100]	@ 0x64
 800f3b8:	81c2      	strh	r2, [r0, #14]
 800f3ba:	6183      	str	r3, [r0, #24]
 800f3bc:	4619      	mov	r1, r3
 800f3be:	2208      	movs	r2, #8
 800f3c0:	305c      	adds	r0, #92	@ 0x5c
 800f3c2:	f000 f906 	bl	800f5d2 <memset>
 800f3c6:	4b0d      	ldr	r3, [pc, #52]	@ (800f3fc <std+0x58>)
 800f3c8:	6263      	str	r3, [r4, #36]	@ 0x24
 800f3ca:	4b0d      	ldr	r3, [pc, #52]	@ (800f400 <std+0x5c>)
 800f3cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f3ce:	4b0d      	ldr	r3, [pc, #52]	@ (800f404 <std+0x60>)
 800f3d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800f408 <std+0x64>)
 800f3d4:	6323      	str	r3, [r4, #48]	@ 0x30
 800f3d6:	4b0d      	ldr	r3, [pc, #52]	@ (800f40c <std+0x68>)
 800f3d8:	6224      	str	r4, [r4, #32]
 800f3da:	429c      	cmp	r4, r3
 800f3dc:	d006      	beq.n	800f3ec <std+0x48>
 800f3de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f3e2:	4294      	cmp	r4, r2
 800f3e4:	d002      	beq.n	800f3ec <std+0x48>
 800f3e6:	33d0      	adds	r3, #208	@ 0xd0
 800f3e8:	429c      	cmp	r4, r3
 800f3ea:	d105      	bne.n	800f3f8 <std+0x54>
 800f3ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3f4:	f000 b9ba 	b.w	800f76c <__retarget_lock_init_recursive>
 800f3f8:	bd10      	pop	{r4, pc}
 800f3fa:	bf00      	nop
 800f3fc:	0800f54d 	.word	0x0800f54d
 800f400:	0800f56f 	.word	0x0800f56f
 800f404:	0800f5a7 	.word	0x0800f5a7
 800f408:	0800f5cb 	.word	0x0800f5cb
 800f40c:	240007ac 	.word	0x240007ac

0800f410 <stdio_exit_handler>:
 800f410:	4a02      	ldr	r2, [pc, #8]	@ (800f41c <stdio_exit_handler+0xc>)
 800f412:	4903      	ldr	r1, [pc, #12]	@ (800f420 <stdio_exit_handler+0x10>)
 800f414:	4803      	ldr	r0, [pc, #12]	@ (800f424 <stdio_exit_handler+0x14>)
 800f416:	f000 b87b 	b.w	800f510 <_fwalk_sglue>
 800f41a:	bf00      	nop
 800f41c:	240001c0 	.word	0x240001c0
 800f420:	0800ff65 	.word	0x0800ff65
 800f424:	240001d0 	.word	0x240001d0

0800f428 <cleanup_stdio>:
 800f428:	6841      	ldr	r1, [r0, #4]
 800f42a:	4b0c      	ldr	r3, [pc, #48]	@ (800f45c <cleanup_stdio+0x34>)
 800f42c:	4299      	cmp	r1, r3
 800f42e:	b510      	push	{r4, lr}
 800f430:	4604      	mov	r4, r0
 800f432:	d001      	beq.n	800f438 <cleanup_stdio+0x10>
 800f434:	f000 fd96 	bl	800ff64 <_fflush_r>
 800f438:	68a1      	ldr	r1, [r4, #8]
 800f43a:	4b09      	ldr	r3, [pc, #36]	@ (800f460 <cleanup_stdio+0x38>)
 800f43c:	4299      	cmp	r1, r3
 800f43e:	d002      	beq.n	800f446 <cleanup_stdio+0x1e>
 800f440:	4620      	mov	r0, r4
 800f442:	f000 fd8f 	bl	800ff64 <_fflush_r>
 800f446:	68e1      	ldr	r1, [r4, #12]
 800f448:	4b06      	ldr	r3, [pc, #24]	@ (800f464 <cleanup_stdio+0x3c>)
 800f44a:	4299      	cmp	r1, r3
 800f44c:	d004      	beq.n	800f458 <cleanup_stdio+0x30>
 800f44e:	4620      	mov	r0, r4
 800f450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f454:	f000 bd86 	b.w	800ff64 <_fflush_r>
 800f458:	bd10      	pop	{r4, pc}
 800f45a:	bf00      	nop
 800f45c:	240007ac 	.word	0x240007ac
 800f460:	24000814 	.word	0x24000814
 800f464:	2400087c 	.word	0x2400087c

0800f468 <global_stdio_init.part.0>:
 800f468:	b510      	push	{r4, lr}
 800f46a:	4b0b      	ldr	r3, [pc, #44]	@ (800f498 <global_stdio_init.part.0+0x30>)
 800f46c:	4c0b      	ldr	r4, [pc, #44]	@ (800f49c <global_stdio_init.part.0+0x34>)
 800f46e:	4a0c      	ldr	r2, [pc, #48]	@ (800f4a0 <global_stdio_init.part.0+0x38>)
 800f470:	601a      	str	r2, [r3, #0]
 800f472:	4620      	mov	r0, r4
 800f474:	2200      	movs	r2, #0
 800f476:	2104      	movs	r1, #4
 800f478:	f7ff ff94 	bl	800f3a4 <std>
 800f47c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f480:	2201      	movs	r2, #1
 800f482:	2109      	movs	r1, #9
 800f484:	f7ff ff8e 	bl	800f3a4 <std>
 800f488:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f48c:	2202      	movs	r2, #2
 800f48e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f492:	2112      	movs	r1, #18
 800f494:	f7ff bf86 	b.w	800f3a4 <std>
 800f498:	240008e4 	.word	0x240008e4
 800f49c:	240007ac 	.word	0x240007ac
 800f4a0:	0800f411 	.word	0x0800f411

0800f4a4 <__sfp_lock_acquire>:
 800f4a4:	4801      	ldr	r0, [pc, #4]	@ (800f4ac <__sfp_lock_acquire+0x8>)
 800f4a6:	f000 b962 	b.w	800f76e <__retarget_lock_acquire_recursive>
 800f4aa:	bf00      	nop
 800f4ac:	240008ee 	.word	0x240008ee

0800f4b0 <__sfp_lock_release>:
 800f4b0:	4801      	ldr	r0, [pc, #4]	@ (800f4b8 <__sfp_lock_release+0x8>)
 800f4b2:	f000 b95d 	b.w	800f770 <__retarget_lock_release_recursive>
 800f4b6:	bf00      	nop
 800f4b8:	240008ee 	.word	0x240008ee

0800f4bc <__sinit>:
 800f4bc:	b510      	push	{r4, lr}
 800f4be:	4604      	mov	r4, r0
 800f4c0:	f7ff fff0 	bl	800f4a4 <__sfp_lock_acquire>
 800f4c4:	6a23      	ldr	r3, [r4, #32]
 800f4c6:	b11b      	cbz	r3, 800f4d0 <__sinit+0x14>
 800f4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4cc:	f7ff bff0 	b.w	800f4b0 <__sfp_lock_release>
 800f4d0:	4b04      	ldr	r3, [pc, #16]	@ (800f4e4 <__sinit+0x28>)
 800f4d2:	6223      	str	r3, [r4, #32]
 800f4d4:	4b04      	ldr	r3, [pc, #16]	@ (800f4e8 <__sinit+0x2c>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d1f5      	bne.n	800f4c8 <__sinit+0xc>
 800f4dc:	f7ff ffc4 	bl	800f468 <global_stdio_init.part.0>
 800f4e0:	e7f2      	b.n	800f4c8 <__sinit+0xc>
 800f4e2:	bf00      	nop
 800f4e4:	0800f429 	.word	0x0800f429
 800f4e8:	240008e4 	.word	0x240008e4

0800f4ec <fiprintf>:
 800f4ec:	b40e      	push	{r1, r2, r3}
 800f4ee:	b503      	push	{r0, r1, lr}
 800f4f0:	4601      	mov	r1, r0
 800f4f2:	ab03      	add	r3, sp, #12
 800f4f4:	4805      	ldr	r0, [pc, #20]	@ (800f50c <fiprintf+0x20>)
 800f4f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4fa:	6800      	ldr	r0, [r0, #0]
 800f4fc:	9301      	str	r3, [sp, #4]
 800f4fe:	f000 fa09 	bl	800f914 <_vfiprintf_r>
 800f502:	b002      	add	sp, #8
 800f504:	f85d eb04 	ldr.w	lr, [sp], #4
 800f508:	b003      	add	sp, #12
 800f50a:	4770      	bx	lr
 800f50c:	240001cc 	.word	0x240001cc

0800f510 <_fwalk_sglue>:
 800f510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f514:	4607      	mov	r7, r0
 800f516:	4688      	mov	r8, r1
 800f518:	4614      	mov	r4, r2
 800f51a:	2600      	movs	r6, #0
 800f51c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f520:	f1b9 0901 	subs.w	r9, r9, #1
 800f524:	d505      	bpl.n	800f532 <_fwalk_sglue+0x22>
 800f526:	6824      	ldr	r4, [r4, #0]
 800f528:	2c00      	cmp	r4, #0
 800f52a:	d1f7      	bne.n	800f51c <_fwalk_sglue+0xc>
 800f52c:	4630      	mov	r0, r6
 800f52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f532:	89ab      	ldrh	r3, [r5, #12]
 800f534:	2b01      	cmp	r3, #1
 800f536:	d907      	bls.n	800f548 <_fwalk_sglue+0x38>
 800f538:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f53c:	3301      	adds	r3, #1
 800f53e:	d003      	beq.n	800f548 <_fwalk_sglue+0x38>
 800f540:	4629      	mov	r1, r5
 800f542:	4638      	mov	r0, r7
 800f544:	47c0      	blx	r8
 800f546:	4306      	orrs	r6, r0
 800f548:	3568      	adds	r5, #104	@ 0x68
 800f54a:	e7e9      	b.n	800f520 <_fwalk_sglue+0x10>

0800f54c <__sread>:
 800f54c:	b510      	push	{r4, lr}
 800f54e:	460c      	mov	r4, r1
 800f550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f554:	f000 f898 	bl	800f688 <_read_r>
 800f558:	2800      	cmp	r0, #0
 800f55a:	bfab      	itete	ge
 800f55c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f55e:	89a3      	ldrhlt	r3, [r4, #12]
 800f560:	181b      	addge	r3, r3, r0
 800f562:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f566:	bfac      	ite	ge
 800f568:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f56a:	81a3      	strhlt	r3, [r4, #12]
 800f56c:	bd10      	pop	{r4, pc}

0800f56e <__swrite>:
 800f56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f572:	461f      	mov	r7, r3
 800f574:	898b      	ldrh	r3, [r1, #12]
 800f576:	05db      	lsls	r3, r3, #23
 800f578:	4605      	mov	r5, r0
 800f57a:	460c      	mov	r4, r1
 800f57c:	4616      	mov	r6, r2
 800f57e:	d505      	bpl.n	800f58c <__swrite+0x1e>
 800f580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f584:	2302      	movs	r3, #2
 800f586:	2200      	movs	r2, #0
 800f588:	f000 f86c 	bl	800f664 <_lseek_r>
 800f58c:	89a3      	ldrh	r3, [r4, #12]
 800f58e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f592:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f596:	81a3      	strh	r3, [r4, #12]
 800f598:	4632      	mov	r2, r6
 800f59a:	463b      	mov	r3, r7
 800f59c:	4628      	mov	r0, r5
 800f59e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5a2:	f000 b8a7 	b.w	800f6f4 <_write_r>

0800f5a6 <__sseek>:
 800f5a6:	b510      	push	{r4, lr}
 800f5a8:	460c      	mov	r4, r1
 800f5aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5ae:	f000 f859 	bl	800f664 <_lseek_r>
 800f5b2:	1c43      	adds	r3, r0, #1
 800f5b4:	89a3      	ldrh	r3, [r4, #12]
 800f5b6:	bf15      	itete	ne
 800f5b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f5ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f5be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f5c2:	81a3      	strheq	r3, [r4, #12]
 800f5c4:	bf18      	it	ne
 800f5c6:	81a3      	strhne	r3, [r4, #12]
 800f5c8:	bd10      	pop	{r4, pc}

0800f5ca <__sclose>:
 800f5ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5ce:	f000 b839 	b.w	800f644 <_close_r>

0800f5d2 <memset>:
 800f5d2:	4402      	add	r2, r0
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d100      	bne.n	800f5dc <memset+0xa>
 800f5da:	4770      	bx	lr
 800f5dc:	f803 1b01 	strb.w	r1, [r3], #1
 800f5e0:	e7f9      	b.n	800f5d6 <memset+0x4>

0800f5e2 <_raise_r>:
 800f5e2:	291f      	cmp	r1, #31
 800f5e4:	b538      	push	{r3, r4, r5, lr}
 800f5e6:	4605      	mov	r5, r0
 800f5e8:	460c      	mov	r4, r1
 800f5ea:	d904      	bls.n	800f5f6 <_raise_r+0x14>
 800f5ec:	2316      	movs	r3, #22
 800f5ee:	6003      	str	r3, [r0, #0]
 800f5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f5f4:	bd38      	pop	{r3, r4, r5, pc}
 800f5f6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f5f8:	b112      	cbz	r2, 800f600 <_raise_r+0x1e>
 800f5fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f5fe:	b94b      	cbnz	r3, 800f614 <_raise_r+0x32>
 800f600:	4628      	mov	r0, r5
 800f602:	f000 f865 	bl	800f6d0 <_getpid_r>
 800f606:	4622      	mov	r2, r4
 800f608:	4601      	mov	r1, r0
 800f60a:	4628      	mov	r0, r5
 800f60c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f610:	f000 b84c 	b.w	800f6ac <_kill_r>
 800f614:	2b01      	cmp	r3, #1
 800f616:	d00a      	beq.n	800f62e <_raise_r+0x4c>
 800f618:	1c59      	adds	r1, r3, #1
 800f61a:	d103      	bne.n	800f624 <_raise_r+0x42>
 800f61c:	2316      	movs	r3, #22
 800f61e:	6003      	str	r3, [r0, #0]
 800f620:	2001      	movs	r0, #1
 800f622:	e7e7      	b.n	800f5f4 <_raise_r+0x12>
 800f624:	2100      	movs	r1, #0
 800f626:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f62a:	4620      	mov	r0, r4
 800f62c:	4798      	blx	r3
 800f62e:	2000      	movs	r0, #0
 800f630:	e7e0      	b.n	800f5f4 <_raise_r+0x12>
	...

0800f634 <raise>:
 800f634:	4b02      	ldr	r3, [pc, #8]	@ (800f640 <raise+0xc>)
 800f636:	4601      	mov	r1, r0
 800f638:	6818      	ldr	r0, [r3, #0]
 800f63a:	f7ff bfd2 	b.w	800f5e2 <_raise_r>
 800f63e:	bf00      	nop
 800f640:	240001cc 	.word	0x240001cc

0800f644 <_close_r>:
 800f644:	b538      	push	{r3, r4, r5, lr}
 800f646:	4d06      	ldr	r5, [pc, #24]	@ (800f660 <_close_r+0x1c>)
 800f648:	2300      	movs	r3, #0
 800f64a:	4604      	mov	r4, r0
 800f64c:	4608      	mov	r0, r1
 800f64e:	602b      	str	r3, [r5, #0]
 800f650:	f7f2 ffee 	bl	8002630 <_close>
 800f654:	1c43      	adds	r3, r0, #1
 800f656:	d102      	bne.n	800f65e <_close_r+0x1a>
 800f658:	682b      	ldr	r3, [r5, #0]
 800f65a:	b103      	cbz	r3, 800f65e <_close_r+0x1a>
 800f65c:	6023      	str	r3, [r4, #0]
 800f65e:	bd38      	pop	{r3, r4, r5, pc}
 800f660:	240008e8 	.word	0x240008e8

0800f664 <_lseek_r>:
 800f664:	b538      	push	{r3, r4, r5, lr}
 800f666:	4d07      	ldr	r5, [pc, #28]	@ (800f684 <_lseek_r+0x20>)
 800f668:	4604      	mov	r4, r0
 800f66a:	4608      	mov	r0, r1
 800f66c:	4611      	mov	r1, r2
 800f66e:	2200      	movs	r2, #0
 800f670:	602a      	str	r2, [r5, #0]
 800f672:	461a      	mov	r2, r3
 800f674:	f7f3 f803 	bl	800267e <_lseek>
 800f678:	1c43      	adds	r3, r0, #1
 800f67a:	d102      	bne.n	800f682 <_lseek_r+0x1e>
 800f67c:	682b      	ldr	r3, [r5, #0]
 800f67e:	b103      	cbz	r3, 800f682 <_lseek_r+0x1e>
 800f680:	6023      	str	r3, [r4, #0]
 800f682:	bd38      	pop	{r3, r4, r5, pc}
 800f684:	240008e8 	.word	0x240008e8

0800f688 <_read_r>:
 800f688:	b538      	push	{r3, r4, r5, lr}
 800f68a:	4d07      	ldr	r5, [pc, #28]	@ (800f6a8 <_read_r+0x20>)
 800f68c:	4604      	mov	r4, r0
 800f68e:	4608      	mov	r0, r1
 800f690:	4611      	mov	r1, r2
 800f692:	2200      	movs	r2, #0
 800f694:	602a      	str	r2, [r5, #0]
 800f696:	461a      	mov	r2, r3
 800f698:	f7f2 ff91 	bl	80025be <_read>
 800f69c:	1c43      	adds	r3, r0, #1
 800f69e:	d102      	bne.n	800f6a6 <_read_r+0x1e>
 800f6a0:	682b      	ldr	r3, [r5, #0]
 800f6a2:	b103      	cbz	r3, 800f6a6 <_read_r+0x1e>
 800f6a4:	6023      	str	r3, [r4, #0]
 800f6a6:	bd38      	pop	{r3, r4, r5, pc}
 800f6a8:	240008e8 	.word	0x240008e8

0800f6ac <_kill_r>:
 800f6ac:	b538      	push	{r3, r4, r5, lr}
 800f6ae:	4d07      	ldr	r5, [pc, #28]	@ (800f6cc <_kill_r+0x20>)
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	4604      	mov	r4, r0
 800f6b4:	4608      	mov	r0, r1
 800f6b6:	4611      	mov	r1, r2
 800f6b8:	602b      	str	r3, [r5, #0]
 800f6ba:	f7f2 ff65 	bl	8002588 <_kill>
 800f6be:	1c43      	adds	r3, r0, #1
 800f6c0:	d102      	bne.n	800f6c8 <_kill_r+0x1c>
 800f6c2:	682b      	ldr	r3, [r5, #0]
 800f6c4:	b103      	cbz	r3, 800f6c8 <_kill_r+0x1c>
 800f6c6:	6023      	str	r3, [r4, #0]
 800f6c8:	bd38      	pop	{r3, r4, r5, pc}
 800f6ca:	bf00      	nop
 800f6cc:	240008e8 	.word	0x240008e8

0800f6d0 <_getpid_r>:
 800f6d0:	f7f2 bf52 	b.w	8002578 <_getpid>

0800f6d4 <_sbrk_r>:
 800f6d4:	b538      	push	{r3, r4, r5, lr}
 800f6d6:	4d06      	ldr	r5, [pc, #24]	@ (800f6f0 <_sbrk_r+0x1c>)
 800f6d8:	2300      	movs	r3, #0
 800f6da:	4604      	mov	r4, r0
 800f6dc:	4608      	mov	r0, r1
 800f6de:	602b      	str	r3, [r5, #0]
 800f6e0:	f7f2 ffda 	bl	8002698 <_sbrk>
 800f6e4:	1c43      	adds	r3, r0, #1
 800f6e6:	d102      	bne.n	800f6ee <_sbrk_r+0x1a>
 800f6e8:	682b      	ldr	r3, [r5, #0]
 800f6ea:	b103      	cbz	r3, 800f6ee <_sbrk_r+0x1a>
 800f6ec:	6023      	str	r3, [r4, #0]
 800f6ee:	bd38      	pop	{r3, r4, r5, pc}
 800f6f0:	240008e8 	.word	0x240008e8

0800f6f4 <_write_r>:
 800f6f4:	b538      	push	{r3, r4, r5, lr}
 800f6f6:	4d07      	ldr	r5, [pc, #28]	@ (800f714 <_write_r+0x20>)
 800f6f8:	4604      	mov	r4, r0
 800f6fa:	4608      	mov	r0, r1
 800f6fc:	4611      	mov	r1, r2
 800f6fe:	2200      	movs	r2, #0
 800f700:	602a      	str	r2, [r5, #0]
 800f702:	461a      	mov	r2, r3
 800f704:	f7f2 ff78 	bl	80025f8 <_write>
 800f708:	1c43      	adds	r3, r0, #1
 800f70a:	d102      	bne.n	800f712 <_write_r+0x1e>
 800f70c:	682b      	ldr	r3, [r5, #0]
 800f70e:	b103      	cbz	r3, 800f712 <_write_r+0x1e>
 800f710:	6023      	str	r3, [r4, #0]
 800f712:	bd38      	pop	{r3, r4, r5, pc}
 800f714:	240008e8 	.word	0x240008e8

0800f718 <__errno>:
 800f718:	4b01      	ldr	r3, [pc, #4]	@ (800f720 <__errno+0x8>)
 800f71a:	6818      	ldr	r0, [r3, #0]
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop
 800f720:	240001cc 	.word	0x240001cc

0800f724 <__libc_init_array>:
 800f724:	b570      	push	{r4, r5, r6, lr}
 800f726:	4d0d      	ldr	r5, [pc, #52]	@ (800f75c <__libc_init_array+0x38>)
 800f728:	4c0d      	ldr	r4, [pc, #52]	@ (800f760 <__libc_init_array+0x3c>)
 800f72a:	1b64      	subs	r4, r4, r5
 800f72c:	10a4      	asrs	r4, r4, #2
 800f72e:	2600      	movs	r6, #0
 800f730:	42a6      	cmp	r6, r4
 800f732:	d109      	bne.n	800f748 <__libc_init_array+0x24>
 800f734:	4d0b      	ldr	r5, [pc, #44]	@ (800f764 <__libc_init_array+0x40>)
 800f736:	4c0c      	ldr	r4, [pc, #48]	@ (800f768 <__libc_init_array+0x44>)
 800f738:	f000 fd54 	bl	80101e4 <_init>
 800f73c:	1b64      	subs	r4, r4, r5
 800f73e:	10a4      	asrs	r4, r4, #2
 800f740:	2600      	movs	r6, #0
 800f742:	42a6      	cmp	r6, r4
 800f744:	d105      	bne.n	800f752 <__libc_init_array+0x2e>
 800f746:	bd70      	pop	{r4, r5, r6, pc}
 800f748:	f855 3b04 	ldr.w	r3, [r5], #4
 800f74c:	4798      	blx	r3
 800f74e:	3601      	adds	r6, #1
 800f750:	e7ee      	b.n	800f730 <__libc_init_array+0xc>
 800f752:	f855 3b04 	ldr.w	r3, [r5], #4
 800f756:	4798      	blx	r3
 800f758:	3601      	adds	r6, #1
 800f75a:	e7f2      	b.n	800f742 <__libc_init_array+0x1e>
 800f75c:	0801194c 	.word	0x0801194c
 800f760:	0801194c 	.word	0x0801194c
 800f764:	0801194c 	.word	0x0801194c
 800f768:	0801195c 	.word	0x0801195c

0800f76c <__retarget_lock_init_recursive>:
 800f76c:	4770      	bx	lr

0800f76e <__retarget_lock_acquire_recursive>:
 800f76e:	4770      	bx	lr

0800f770 <__retarget_lock_release_recursive>:
 800f770:	4770      	bx	lr
	...

0800f774 <__register_exitproc>:
 800f774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f778:	4d27      	ldr	r5, [pc, #156]	@ (800f818 <__register_exitproc+0xa4>)
 800f77a:	4607      	mov	r7, r0
 800f77c:	6828      	ldr	r0, [r5, #0]
 800f77e:	4691      	mov	r9, r2
 800f780:	460e      	mov	r6, r1
 800f782:	4698      	mov	r8, r3
 800f784:	f7ff fff3 	bl	800f76e <__retarget_lock_acquire_recursive>
 800f788:	4a24      	ldr	r2, [pc, #144]	@ (800f81c <__register_exitproc+0xa8>)
 800f78a:	6814      	ldr	r4, [r2, #0]
 800f78c:	b93c      	cbnz	r4, 800f79e <__register_exitproc+0x2a>
 800f78e:	4b24      	ldr	r3, [pc, #144]	@ (800f820 <__register_exitproc+0xac>)
 800f790:	6013      	str	r3, [r2, #0]
 800f792:	4a24      	ldr	r2, [pc, #144]	@ (800f824 <__register_exitproc+0xb0>)
 800f794:	b112      	cbz	r2, 800f79c <__register_exitproc+0x28>
 800f796:	6812      	ldr	r2, [r2, #0]
 800f798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800f79c:	4c20      	ldr	r4, [pc, #128]	@ (800f820 <__register_exitproc+0xac>)
 800f79e:	6863      	ldr	r3, [r4, #4]
 800f7a0:	2b1f      	cmp	r3, #31
 800f7a2:	dd06      	ble.n	800f7b2 <__register_exitproc+0x3e>
 800f7a4:	6828      	ldr	r0, [r5, #0]
 800f7a6:	f7ff ffe3 	bl	800f770 <__retarget_lock_release_recursive>
 800f7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7b2:	b32f      	cbz	r7, 800f800 <__register_exitproc+0x8c>
 800f7b4:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800f7b8:	b968      	cbnz	r0, 800f7d6 <__register_exitproc+0x62>
 800f7ba:	4b1b      	ldr	r3, [pc, #108]	@ (800f828 <__register_exitproc+0xb4>)
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d0f1      	beq.n	800f7a4 <__register_exitproc+0x30>
 800f7c0:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800f7c4:	f7ff fd30 	bl	800f228 <malloc>
 800f7c8:	2800      	cmp	r0, #0
 800f7ca:	d0eb      	beq.n	800f7a4 <__register_exitproc+0x30>
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 800f7d2:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 800f7d6:	6863      	ldr	r3, [r4, #4]
 800f7d8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800f7dc:	2201      	movs	r2, #1
 800f7de:	409a      	lsls	r2, r3
 800f7e0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800f7e4:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 800f7e8:	4313      	orrs	r3, r2
 800f7ea:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 800f7ee:	2f02      	cmp	r7, #2
 800f7f0:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 800f7f4:	bf02      	ittt	eq
 800f7f6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 800f7fa:	4313      	orreq	r3, r2
 800f7fc:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 800f800:	6863      	ldr	r3, [r4, #4]
 800f802:	6828      	ldr	r0, [r5, #0]
 800f804:	1c5a      	adds	r2, r3, #1
 800f806:	3302      	adds	r3, #2
 800f808:	6062      	str	r2, [r4, #4]
 800f80a:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800f80e:	f7ff ffaf 	bl	800f770 <__retarget_lock_release_recursive>
 800f812:	2000      	movs	r0, #0
 800f814:	e7cb      	b.n	800f7ae <__register_exitproc+0x3a>
 800f816:	bf00      	nop
 800f818:	2400021c 	.word	0x2400021c
 800f81c:	2400097c 	.word	0x2400097c
 800f820:	240008f0 	.word	0x240008f0
 800f824:	08010654 	.word	0x08010654
 800f828:	0800f229 	.word	0x0800f229

0800f82c <_free_r>:
 800f82c:	b538      	push	{r3, r4, r5, lr}
 800f82e:	4605      	mov	r5, r0
 800f830:	2900      	cmp	r1, #0
 800f832:	d041      	beq.n	800f8b8 <_free_r+0x8c>
 800f834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f838:	1f0c      	subs	r4, r1, #4
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	bfb8      	it	lt
 800f83e:	18e4      	addlt	r4, r4, r3
 800f840:	f7ff fda4 	bl	800f38c <__malloc_lock>
 800f844:	4a1d      	ldr	r2, [pc, #116]	@ (800f8bc <_free_r+0x90>)
 800f846:	6813      	ldr	r3, [r2, #0]
 800f848:	b933      	cbnz	r3, 800f858 <_free_r+0x2c>
 800f84a:	6063      	str	r3, [r4, #4]
 800f84c:	6014      	str	r4, [r2, #0]
 800f84e:	4628      	mov	r0, r5
 800f850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f854:	f7ff bda0 	b.w	800f398 <__malloc_unlock>
 800f858:	42a3      	cmp	r3, r4
 800f85a:	d908      	bls.n	800f86e <_free_r+0x42>
 800f85c:	6820      	ldr	r0, [r4, #0]
 800f85e:	1821      	adds	r1, r4, r0
 800f860:	428b      	cmp	r3, r1
 800f862:	bf01      	itttt	eq
 800f864:	6819      	ldreq	r1, [r3, #0]
 800f866:	685b      	ldreq	r3, [r3, #4]
 800f868:	1809      	addeq	r1, r1, r0
 800f86a:	6021      	streq	r1, [r4, #0]
 800f86c:	e7ed      	b.n	800f84a <_free_r+0x1e>
 800f86e:	461a      	mov	r2, r3
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	b10b      	cbz	r3, 800f878 <_free_r+0x4c>
 800f874:	42a3      	cmp	r3, r4
 800f876:	d9fa      	bls.n	800f86e <_free_r+0x42>
 800f878:	6811      	ldr	r1, [r2, #0]
 800f87a:	1850      	adds	r0, r2, r1
 800f87c:	42a0      	cmp	r0, r4
 800f87e:	d10b      	bne.n	800f898 <_free_r+0x6c>
 800f880:	6820      	ldr	r0, [r4, #0]
 800f882:	4401      	add	r1, r0
 800f884:	1850      	adds	r0, r2, r1
 800f886:	4283      	cmp	r3, r0
 800f888:	6011      	str	r1, [r2, #0]
 800f88a:	d1e0      	bne.n	800f84e <_free_r+0x22>
 800f88c:	6818      	ldr	r0, [r3, #0]
 800f88e:	685b      	ldr	r3, [r3, #4]
 800f890:	6053      	str	r3, [r2, #4]
 800f892:	4408      	add	r0, r1
 800f894:	6010      	str	r0, [r2, #0]
 800f896:	e7da      	b.n	800f84e <_free_r+0x22>
 800f898:	d902      	bls.n	800f8a0 <_free_r+0x74>
 800f89a:	230c      	movs	r3, #12
 800f89c:	602b      	str	r3, [r5, #0]
 800f89e:	e7d6      	b.n	800f84e <_free_r+0x22>
 800f8a0:	6820      	ldr	r0, [r4, #0]
 800f8a2:	1821      	adds	r1, r4, r0
 800f8a4:	428b      	cmp	r3, r1
 800f8a6:	bf04      	itt	eq
 800f8a8:	6819      	ldreq	r1, [r3, #0]
 800f8aa:	685b      	ldreq	r3, [r3, #4]
 800f8ac:	6063      	str	r3, [r4, #4]
 800f8ae:	bf04      	itt	eq
 800f8b0:	1809      	addeq	r1, r1, r0
 800f8b2:	6021      	streq	r1, [r4, #0]
 800f8b4:	6054      	str	r4, [r2, #4]
 800f8b6:	e7ca      	b.n	800f84e <_free_r+0x22>
 800f8b8:	bd38      	pop	{r3, r4, r5, pc}
 800f8ba:	bf00      	nop
 800f8bc:	240007a8 	.word	0x240007a8

0800f8c0 <__sfputc_r>:
 800f8c0:	6893      	ldr	r3, [r2, #8]
 800f8c2:	3b01      	subs	r3, #1
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	b410      	push	{r4}
 800f8c8:	6093      	str	r3, [r2, #8]
 800f8ca:	da08      	bge.n	800f8de <__sfputc_r+0x1e>
 800f8cc:	6994      	ldr	r4, [r2, #24]
 800f8ce:	42a3      	cmp	r3, r4
 800f8d0:	db01      	blt.n	800f8d6 <__sfputc_r+0x16>
 800f8d2:	290a      	cmp	r1, #10
 800f8d4:	d103      	bne.n	800f8de <__sfputc_r+0x1e>
 800f8d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8da:	f000 bb6b 	b.w	800ffb4 <__swbuf_r>
 800f8de:	6813      	ldr	r3, [r2, #0]
 800f8e0:	1c58      	adds	r0, r3, #1
 800f8e2:	6010      	str	r0, [r2, #0]
 800f8e4:	7019      	strb	r1, [r3, #0]
 800f8e6:	4608      	mov	r0, r1
 800f8e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8ec:	4770      	bx	lr

0800f8ee <__sfputs_r>:
 800f8ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8f0:	4606      	mov	r6, r0
 800f8f2:	460f      	mov	r7, r1
 800f8f4:	4614      	mov	r4, r2
 800f8f6:	18d5      	adds	r5, r2, r3
 800f8f8:	42ac      	cmp	r4, r5
 800f8fa:	d101      	bne.n	800f900 <__sfputs_r+0x12>
 800f8fc:	2000      	movs	r0, #0
 800f8fe:	e007      	b.n	800f910 <__sfputs_r+0x22>
 800f900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f904:	463a      	mov	r2, r7
 800f906:	4630      	mov	r0, r6
 800f908:	f7ff ffda 	bl	800f8c0 <__sfputc_r>
 800f90c:	1c43      	adds	r3, r0, #1
 800f90e:	d1f3      	bne.n	800f8f8 <__sfputs_r+0xa>
 800f910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f914 <_vfiprintf_r>:
 800f914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f918:	460d      	mov	r5, r1
 800f91a:	b09d      	sub	sp, #116	@ 0x74
 800f91c:	4614      	mov	r4, r2
 800f91e:	4698      	mov	r8, r3
 800f920:	4606      	mov	r6, r0
 800f922:	b118      	cbz	r0, 800f92c <_vfiprintf_r+0x18>
 800f924:	6a03      	ldr	r3, [r0, #32]
 800f926:	b90b      	cbnz	r3, 800f92c <_vfiprintf_r+0x18>
 800f928:	f7ff fdc8 	bl	800f4bc <__sinit>
 800f92c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f92e:	07d9      	lsls	r1, r3, #31
 800f930:	d405      	bmi.n	800f93e <_vfiprintf_r+0x2a>
 800f932:	89ab      	ldrh	r3, [r5, #12]
 800f934:	059a      	lsls	r2, r3, #22
 800f936:	d402      	bmi.n	800f93e <_vfiprintf_r+0x2a>
 800f938:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f93a:	f7ff ff18 	bl	800f76e <__retarget_lock_acquire_recursive>
 800f93e:	89ab      	ldrh	r3, [r5, #12]
 800f940:	071b      	lsls	r3, r3, #28
 800f942:	d501      	bpl.n	800f948 <_vfiprintf_r+0x34>
 800f944:	692b      	ldr	r3, [r5, #16]
 800f946:	b99b      	cbnz	r3, 800f970 <_vfiprintf_r+0x5c>
 800f948:	4629      	mov	r1, r5
 800f94a:	4630      	mov	r0, r6
 800f94c:	f000 fb70 	bl	8010030 <__swsetup_r>
 800f950:	b170      	cbz	r0, 800f970 <_vfiprintf_r+0x5c>
 800f952:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f954:	07dc      	lsls	r4, r3, #31
 800f956:	d504      	bpl.n	800f962 <_vfiprintf_r+0x4e>
 800f958:	f04f 30ff 	mov.w	r0, #4294967295
 800f95c:	b01d      	add	sp, #116	@ 0x74
 800f95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f962:	89ab      	ldrh	r3, [r5, #12]
 800f964:	0598      	lsls	r0, r3, #22
 800f966:	d4f7      	bmi.n	800f958 <_vfiprintf_r+0x44>
 800f968:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f96a:	f7ff ff01 	bl	800f770 <__retarget_lock_release_recursive>
 800f96e:	e7f3      	b.n	800f958 <_vfiprintf_r+0x44>
 800f970:	2300      	movs	r3, #0
 800f972:	9309      	str	r3, [sp, #36]	@ 0x24
 800f974:	2320      	movs	r3, #32
 800f976:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f97a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f97e:	2330      	movs	r3, #48	@ 0x30
 800f980:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fb30 <_vfiprintf_r+0x21c>
 800f984:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f988:	f04f 0901 	mov.w	r9, #1
 800f98c:	4623      	mov	r3, r4
 800f98e:	469a      	mov	sl, r3
 800f990:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f994:	b10a      	cbz	r2, 800f99a <_vfiprintf_r+0x86>
 800f996:	2a25      	cmp	r2, #37	@ 0x25
 800f998:	d1f9      	bne.n	800f98e <_vfiprintf_r+0x7a>
 800f99a:	ebba 0b04 	subs.w	fp, sl, r4
 800f99e:	d00b      	beq.n	800f9b8 <_vfiprintf_r+0xa4>
 800f9a0:	465b      	mov	r3, fp
 800f9a2:	4622      	mov	r2, r4
 800f9a4:	4629      	mov	r1, r5
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	f7ff ffa1 	bl	800f8ee <__sfputs_r>
 800f9ac:	3001      	adds	r0, #1
 800f9ae:	f000 80a7 	beq.w	800fb00 <_vfiprintf_r+0x1ec>
 800f9b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f9b4:	445a      	add	r2, fp
 800f9b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800f9b8:	f89a 3000 	ldrb.w	r3, [sl]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	f000 809f 	beq.w	800fb00 <_vfiprintf_r+0x1ec>
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f9c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9cc:	f10a 0a01 	add.w	sl, sl, #1
 800f9d0:	9304      	str	r3, [sp, #16]
 800f9d2:	9307      	str	r3, [sp, #28]
 800f9d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f9d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800f9da:	4654      	mov	r4, sl
 800f9dc:	2205      	movs	r2, #5
 800f9de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9e2:	4853      	ldr	r0, [pc, #332]	@ (800fb30 <_vfiprintf_r+0x21c>)
 800f9e4:	f7f0 fc94 	bl	8000310 <memchr>
 800f9e8:	9a04      	ldr	r2, [sp, #16]
 800f9ea:	b9d8      	cbnz	r0, 800fa24 <_vfiprintf_r+0x110>
 800f9ec:	06d1      	lsls	r1, r2, #27
 800f9ee:	bf44      	itt	mi
 800f9f0:	2320      	movmi	r3, #32
 800f9f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9f6:	0713      	lsls	r3, r2, #28
 800f9f8:	bf44      	itt	mi
 800f9fa:	232b      	movmi	r3, #43	@ 0x2b
 800f9fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa00:	f89a 3000 	ldrb.w	r3, [sl]
 800fa04:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa06:	d015      	beq.n	800fa34 <_vfiprintf_r+0x120>
 800fa08:	9a07      	ldr	r2, [sp, #28]
 800fa0a:	4654      	mov	r4, sl
 800fa0c:	2000      	movs	r0, #0
 800fa0e:	f04f 0c0a 	mov.w	ip, #10
 800fa12:	4621      	mov	r1, r4
 800fa14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa18:	3b30      	subs	r3, #48	@ 0x30
 800fa1a:	2b09      	cmp	r3, #9
 800fa1c:	d94b      	bls.n	800fab6 <_vfiprintf_r+0x1a2>
 800fa1e:	b1b0      	cbz	r0, 800fa4e <_vfiprintf_r+0x13a>
 800fa20:	9207      	str	r2, [sp, #28]
 800fa22:	e014      	b.n	800fa4e <_vfiprintf_r+0x13a>
 800fa24:	eba0 0308 	sub.w	r3, r0, r8
 800fa28:	fa09 f303 	lsl.w	r3, r9, r3
 800fa2c:	4313      	orrs	r3, r2
 800fa2e:	9304      	str	r3, [sp, #16]
 800fa30:	46a2      	mov	sl, r4
 800fa32:	e7d2      	b.n	800f9da <_vfiprintf_r+0xc6>
 800fa34:	9b03      	ldr	r3, [sp, #12]
 800fa36:	1d19      	adds	r1, r3, #4
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	9103      	str	r1, [sp, #12]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	bfbb      	ittet	lt
 800fa40:	425b      	neglt	r3, r3
 800fa42:	f042 0202 	orrlt.w	r2, r2, #2
 800fa46:	9307      	strge	r3, [sp, #28]
 800fa48:	9307      	strlt	r3, [sp, #28]
 800fa4a:	bfb8      	it	lt
 800fa4c:	9204      	strlt	r2, [sp, #16]
 800fa4e:	7823      	ldrb	r3, [r4, #0]
 800fa50:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa52:	d10a      	bne.n	800fa6a <_vfiprintf_r+0x156>
 800fa54:	7863      	ldrb	r3, [r4, #1]
 800fa56:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa58:	d132      	bne.n	800fac0 <_vfiprintf_r+0x1ac>
 800fa5a:	9b03      	ldr	r3, [sp, #12]
 800fa5c:	1d1a      	adds	r2, r3, #4
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	9203      	str	r2, [sp, #12]
 800fa62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fa66:	3402      	adds	r4, #2
 800fa68:	9305      	str	r3, [sp, #20]
 800fa6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fb40 <_vfiprintf_r+0x22c>
 800fa6e:	7821      	ldrb	r1, [r4, #0]
 800fa70:	2203      	movs	r2, #3
 800fa72:	4650      	mov	r0, sl
 800fa74:	f7f0 fc4c 	bl	8000310 <memchr>
 800fa78:	b138      	cbz	r0, 800fa8a <_vfiprintf_r+0x176>
 800fa7a:	9b04      	ldr	r3, [sp, #16]
 800fa7c:	eba0 000a 	sub.w	r0, r0, sl
 800fa80:	2240      	movs	r2, #64	@ 0x40
 800fa82:	4082      	lsls	r2, r0
 800fa84:	4313      	orrs	r3, r2
 800fa86:	3401      	adds	r4, #1
 800fa88:	9304      	str	r3, [sp, #16]
 800fa8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa8e:	4829      	ldr	r0, [pc, #164]	@ (800fb34 <_vfiprintf_r+0x220>)
 800fa90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa94:	2206      	movs	r2, #6
 800fa96:	f7f0 fc3b 	bl	8000310 <memchr>
 800fa9a:	2800      	cmp	r0, #0
 800fa9c:	d03f      	beq.n	800fb1e <_vfiprintf_r+0x20a>
 800fa9e:	4b26      	ldr	r3, [pc, #152]	@ (800fb38 <_vfiprintf_r+0x224>)
 800faa0:	bb1b      	cbnz	r3, 800faea <_vfiprintf_r+0x1d6>
 800faa2:	9b03      	ldr	r3, [sp, #12]
 800faa4:	3307      	adds	r3, #7
 800faa6:	f023 0307 	bic.w	r3, r3, #7
 800faaa:	3308      	adds	r3, #8
 800faac:	9303      	str	r3, [sp, #12]
 800faae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fab0:	443b      	add	r3, r7
 800fab2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fab4:	e76a      	b.n	800f98c <_vfiprintf_r+0x78>
 800fab6:	fb0c 3202 	mla	r2, ip, r2, r3
 800faba:	460c      	mov	r4, r1
 800fabc:	2001      	movs	r0, #1
 800fabe:	e7a8      	b.n	800fa12 <_vfiprintf_r+0xfe>
 800fac0:	2300      	movs	r3, #0
 800fac2:	3401      	adds	r4, #1
 800fac4:	9305      	str	r3, [sp, #20]
 800fac6:	4619      	mov	r1, r3
 800fac8:	f04f 0c0a 	mov.w	ip, #10
 800facc:	4620      	mov	r0, r4
 800face:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fad2:	3a30      	subs	r2, #48	@ 0x30
 800fad4:	2a09      	cmp	r2, #9
 800fad6:	d903      	bls.n	800fae0 <_vfiprintf_r+0x1cc>
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d0c6      	beq.n	800fa6a <_vfiprintf_r+0x156>
 800fadc:	9105      	str	r1, [sp, #20]
 800fade:	e7c4      	b.n	800fa6a <_vfiprintf_r+0x156>
 800fae0:	fb0c 2101 	mla	r1, ip, r1, r2
 800fae4:	4604      	mov	r4, r0
 800fae6:	2301      	movs	r3, #1
 800fae8:	e7f0      	b.n	800facc <_vfiprintf_r+0x1b8>
 800faea:	ab03      	add	r3, sp, #12
 800faec:	9300      	str	r3, [sp, #0]
 800faee:	462a      	mov	r2, r5
 800faf0:	4b12      	ldr	r3, [pc, #72]	@ (800fb3c <_vfiprintf_r+0x228>)
 800faf2:	a904      	add	r1, sp, #16
 800faf4:	4630      	mov	r0, r6
 800faf6:	f3af 8000 	nop.w
 800fafa:	4607      	mov	r7, r0
 800fafc:	1c78      	adds	r0, r7, #1
 800fafe:	d1d6      	bne.n	800faae <_vfiprintf_r+0x19a>
 800fb00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb02:	07d9      	lsls	r1, r3, #31
 800fb04:	d405      	bmi.n	800fb12 <_vfiprintf_r+0x1fe>
 800fb06:	89ab      	ldrh	r3, [r5, #12]
 800fb08:	059a      	lsls	r2, r3, #22
 800fb0a:	d402      	bmi.n	800fb12 <_vfiprintf_r+0x1fe>
 800fb0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb0e:	f7ff fe2f 	bl	800f770 <__retarget_lock_release_recursive>
 800fb12:	89ab      	ldrh	r3, [r5, #12]
 800fb14:	065b      	lsls	r3, r3, #25
 800fb16:	f53f af1f 	bmi.w	800f958 <_vfiprintf_r+0x44>
 800fb1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb1c:	e71e      	b.n	800f95c <_vfiprintf_r+0x48>
 800fb1e:	ab03      	add	r3, sp, #12
 800fb20:	9300      	str	r3, [sp, #0]
 800fb22:	462a      	mov	r2, r5
 800fb24:	4b05      	ldr	r3, [pc, #20]	@ (800fb3c <_vfiprintf_r+0x228>)
 800fb26:	a904      	add	r1, sp, #16
 800fb28:	4630      	mov	r0, r6
 800fb2a:	f000 f879 	bl	800fc20 <_printf_i>
 800fb2e:	e7e4      	b.n	800fafa <_vfiprintf_r+0x1e6>
 800fb30:	08010620 	.word	0x08010620
 800fb34:	0801062a 	.word	0x0801062a
 800fb38:	00000000 	.word	0x00000000
 800fb3c:	0800f8ef 	.word	0x0800f8ef
 800fb40:	08010626 	.word	0x08010626

0800fb44 <_printf_common>:
 800fb44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb48:	4616      	mov	r6, r2
 800fb4a:	4698      	mov	r8, r3
 800fb4c:	688a      	ldr	r2, [r1, #8]
 800fb4e:	690b      	ldr	r3, [r1, #16]
 800fb50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fb54:	4293      	cmp	r3, r2
 800fb56:	bfb8      	it	lt
 800fb58:	4613      	movlt	r3, r2
 800fb5a:	6033      	str	r3, [r6, #0]
 800fb5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fb60:	4607      	mov	r7, r0
 800fb62:	460c      	mov	r4, r1
 800fb64:	b10a      	cbz	r2, 800fb6a <_printf_common+0x26>
 800fb66:	3301      	adds	r3, #1
 800fb68:	6033      	str	r3, [r6, #0]
 800fb6a:	6823      	ldr	r3, [r4, #0]
 800fb6c:	0699      	lsls	r1, r3, #26
 800fb6e:	bf42      	ittt	mi
 800fb70:	6833      	ldrmi	r3, [r6, #0]
 800fb72:	3302      	addmi	r3, #2
 800fb74:	6033      	strmi	r3, [r6, #0]
 800fb76:	6825      	ldr	r5, [r4, #0]
 800fb78:	f015 0506 	ands.w	r5, r5, #6
 800fb7c:	d106      	bne.n	800fb8c <_printf_common+0x48>
 800fb7e:	f104 0a19 	add.w	sl, r4, #25
 800fb82:	68e3      	ldr	r3, [r4, #12]
 800fb84:	6832      	ldr	r2, [r6, #0]
 800fb86:	1a9b      	subs	r3, r3, r2
 800fb88:	42ab      	cmp	r3, r5
 800fb8a:	dc26      	bgt.n	800fbda <_printf_common+0x96>
 800fb8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fb90:	6822      	ldr	r2, [r4, #0]
 800fb92:	3b00      	subs	r3, #0
 800fb94:	bf18      	it	ne
 800fb96:	2301      	movne	r3, #1
 800fb98:	0692      	lsls	r2, r2, #26
 800fb9a:	d42b      	bmi.n	800fbf4 <_printf_common+0xb0>
 800fb9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fba0:	4641      	mov	r1, r8
 800fba2:	4638      	mov	r0, r7
 800fba4:	47c8      	blx	r9
 800fba6:	3001      	adds	r0, #1
 800fba8:	d01e      	beq.n	800fbe8 <_printf_common+0xa4>
 800fbaa:	6823      	ldr	r3, [r4, #0]
 800fbac:	6922      	ldr	r2, [r4, #16]
 800fbae:	f003 0306 	and.w	r3, r3, #6
 800fbb2:	2b04      	cmp	r3, #4
 800fbb4:	bf02      	ittt	eq
 800fbb6:	68e5      	ldreq	r5, [r4, #12]
 800fbb8:	6833      	ldreq	r3, [r6, #0]
 800fbba:	1aed      	subeq	r5, r5, r3
 800fbbc:	68a3      	ldr	r3, [r4, #8]
 800fbbe:	bf0c      	ite	eq
 800fbc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbc4:	2500      	movne	r5, #0
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	bfc4      	itt	gt
 800fbca:	1a9b      	subgt	r3, r3, r2
 800fbcc:	18ed      	addgt	r5, r5, r3
 800fbce:	2600      	movs	r6, #0
 800fbd0:	341a      	adds	r4, #26
 800fbd2:	42b5      	cmp	r5, r6
 800fbd4:	d11a      	bne.n	800fc0c <_printf_common+0xc8>
 800fbd6:	2000      	movs	r0, #0
 800fbd8:	e008      	b.n	800fbec <_printf_common+0xa8>
 800fbda:	2301      	movs	r3, #1
 800fbdc:	4652      	mov	r2, sl
 800fbde:	4641      	mov	r1, r8
 800fbe0:	4638      	mov	r0, r7
 800fbe2:	47c8      	blx	r9
 800fbe4:	3001      	adds	r0, #1
 800fbe6:	d103      	bne.n	800fbf0 <_printf_common+0xac>
 800fbe8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbf0:	3501      	adds	r5, #1
 800fbf2:	e7c6      	b.n	800fb82 <_printf_common+0x3e>
 800fbf4:	18e1      	adds	r1, r4, r3
 800fbf6:	1c5a      	adds	r2, r3, #1
 800fbf8:	2030      	movs	r0, #48	@ 0x30
 800fbfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fbfe:	4422      	add	r2, r4
 800fc00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fc04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fc08:	3302      	adds	r3, #2
 800fc0a:	e7c7      	b.n	800fb9c <_printf_common+0x58>
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	4622      	mov	r2, r4
 800fc10:	4641      	mov	r1, r8
 800fc12:	4638      	mov	r0, r7
 800fc14:	47c8      	blx	r9
 800fc16:	3001      	adds	r0, #1
 800fc18:	d0e6      	beq.n	800fbe8 <_printf_common+0xa4>
 800fc1a:	3601      	adds	r6, #1
 800fc1c:	e7d9      	b.n	800fbd2 <_printf_common+0x8e>
	...

0800fc20 <_printf_i>:
 800fc20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc24:	7e0f      	ldrb	r7, [r1, #24]
 800fc26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fc28:	2f78      	cmp	r7, #120	@ 0x78
 800fc2a:	4691      	mov	r9, r2
 800fc2c:	4680      	mov	r8, r0
 800fc2e:	460c      	mov	r4, r1
 800fc30:	469a      	mov	sl, r3
 800fc32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fc36:	d807      	bhi.n	800fc48 <_printf_i+0x28>
 800fc38:	2f62      	cmp	r7, #98	@ 0x62
 800fc3a:	d80a      	bhi.n	800fc52 <_printf_i+0x32>
 800fc3c:	2f00      	cmp	r7, #0
 800fc3e:	f000 80d1 	beq.w	800fde4 <_printf_i+0x1c4>
 800fc42:	2f58      	cmp	r7, #88	@ 0x58
 800fc44:	f000 80b8 	beq.w	800fdb8 <_printf_i+0x198>
 800fc48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fc4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fc50:	e03a      	b.n	800fcc8 <_printf_i+0xa8>
 800fc52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fc56:	2b15      	cmp	r3, #21
 800fc58:	d8f6      	bhi.n	800fc48 <_printf_i+0x28>
 800fc5a:	a101      	add	r1, pc, #4	@ (adr r1, 800fc60 <_printf_i+0x40>)
 800fc5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc60:	0800fcb9 	.word	0x0800fcb9
 800fc64:	0800fccd 	.word	0x0800fccd
 800fc68:	0800fc49 	.word	0x0800fc49
 800fc6c:	0800fc49 	.word	0x0800fc49
 800fc70:	0800fc49 	.word	0x0800fc49
 800fc74:	0800fc49 	.word	0x0800fc49
 800fc78:	0800fccd 	.word	0x0800fccd
 800fc7c:	0800fc49 	.word	0x0800fc49
 800fc80:	0800fc49 	.word	0x0800fc49
 800fc84:	0800fc49 	.word	0x0800fc49
 800fc88:	0800fc49 	.word	0x0800fc49
 800fc8c:	0800fdcb 	.word	0x0800fdcb
 800fc90:	0800fcf7 	.word	0x0800fcf7
 800fc94:	0800fd85 	.word	0x0800fd85
 800fc98:	0800fc49 	.word	0x0800fc49
 800fc9c:	0800fc49 	.word	0x0800fc49
 800fca0:	0800fded 	.word	0x0800fded
 800fca4:	0800fc49 	.word	0x0800fc49
 800fca8:	0800fcf7 	.word	0x0800fcf7
 800fcac:	0800fc49 	.word	0x0800fc49
 800fcb0:	0800fc49 	.word	0x0800fc49
 800fcb4:	0800fd8d 	.word	0x0800fd8d
 800fcb8:	6833      	ldr	r3, [r6, #0]
 800fcba:	1d1a      	adds	r2, r3, #4
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	6032      	str	r2, [r6, #0]
 800fcc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fcc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fcc8:	2301      	movs	r3, #1
 800fcca:	e09c      	b.n	800fe06 <_printf_i+0x1e6>
 800fccc:	6833      	ldr	r3, [r6, #0]
 800fcce:	6820      	ldr	r0, [r4, #0]
 800fcd0:	1d19      	adds	r1, r3, #4
 800fcd2:	6031      	str	r1, [r6, #0]
 800fcd4:	0606      	lsls	r6, r0, #24
 800fcd6:	d501      	bpl.n	800fcdc <_printf_i+0xbc>
 800fcd8:	681d      	ldr	r5, [r3, #0]
 800fcda:	e003      	b.n	800fce4 <_printf_i+0xc4>
 800fcdc:	0645      	lsls	r5, r0, #25
 800fcde:	d5fb      	bpl.n	800fcd8 <_printf_i+0xb8>
 800fce0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fce4:	2d00      	cmp	r5, #0
 800fce6:	da03      	bge.n	800fcf0 <_printf_i+0xd0>
 800fce8:	232d      	movs	r3, #45	@ 0x2d
 800fcea:	426d      	negs	r5, r5
 800fcec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fcf0:	4858      	ldr	r0, [pc, #352]	@ (800fe54 <_printf_i+0x234>)
 800fcf2:	230a      	movs	r3, #10
 800fcf4:	e011      	b.n	800fd1a <_printf_i+0xfa>
 800fcf6:	6821      	ldr	r1, [r4, #0]
 800fcf8:	6833      	ldr	r3, [r6, #0]
 800fcfa:	0608      	lsls	r0, r1, #24
 800fcfc:	f853 5b04 	ldr.w	r5, [r3], #4
 800fd00:	d402      	bmi.n	800fd08 <_printf_i+0xe8>
 800fd02:	0649      	lsls	r1, r1, #25
 800fd04:	bf48      	it	mi
 800fd06:	b2ad      	uxthmi	r5, r5
 800fd08:	2f6f      	cmp	r7, #111	@ 0x6f
 800fd0a:	4852      	ldr	r0, [pc, #328]	@ (800fe54 <_printf_i+0x234>)
 800fd0c:	6033      	str	r3, [r6, #0]
 800fd0e:	bf14      	ite	ne
 800fd10:	230a      	movne	r3, #10
 800fd12:	2308      	moveq	r3, #8
 800fd14:	2100      	movs	r1, #0
 800fd16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fd1a:	6866      	ldr	r6, [r4, #4]
 800fd1c:	60a6      	str	r6, [r4, #8]
 800fd1e:	2e00      	cmp	r6, #0
 800fd20:	db05      	blt.n	800fd2e <_printf_i+0x10e>
 800fd22:	6821      	ldr	r1, [r4, #0]
 800fd24:	432e      	orrs	r6, r5
 800fd26:	f021 0104 	bic.w	r1, r1, #4
 800fd2a:	6021      	str	r1, [r4, #0]
 800fd2c:	d04b      	beq.n	800fdc6 <_printf_i+0x1a6>
 800fd2e:	4616      	mov	r6, r2
 800fd30:	fbb5 f1f3 	udiv	r1, r5, r3
 800fd34:	fb03 5711 	mls	r7, r3, r1, r5
 800fd38:	5dc7      	ldrb	r7, [r0, r7]
 800fd3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fd3e:	462f      	mov	r7, r5
 800fd40:	42bb      	cmp	r3, r7
 800fd42:	460d      	mov	r5, r1
 800fd44:	d9f4      	bls.n	800fd30 <_printf_i+0x110>
 800fd46:	2b08      	cmp	r3, #8
 800fd48:	d10b      	bne.n	800fd62 <_printf_i+0x142>
 800fd4a:	6823      	ldr	r3, [r4, #0]
 800fd4c:	07df      	lsls	r7, r3, #31
 800fd4e:	d508      	bpl.n	800fd62 <_printf_i+0x142>
 800fd50:	6923      	ldr	r3, [r4, #16]
 800fd52:	6861      	ldr	r1, [r4, #4]
 800fd54:	4299      	cmp	r1, r3
 800fd56:	bfde      	ittt	le
 800fd58:	2330      	movle	r3, #48	@ 0x30
 800fd5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fd5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fd62:	1b92      	subs	r2, r2, r6
 800fd64:	6122      	str	r2, [r4, #16]
 800fd66:	f8cd a000 	str.w	sl, [sp]
 800fd6a:	464b      	mov	r3, r9
 800fd6c:	aa03      	add	r2, sp, #12
 800fd6e:	4621      	mov	r1, r4
 800fd70:	4640      	mov	r0, r8
 800fd72:	f7ff fee7 	bl	800fb44 <_printf_common>
 800fd76:	3001      	adds	r0, #1
 800fd78:	d14a      	bne.n	800fe10 <_printf_i+0x1f0>
 800fd7a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd7e:	b004      	add	sp, #16
 800fd80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd84:	6823      	ldr	r3, [r4, #0]
 800fd86:	f043 0320 	orr.w	r3, r3, #32
 800fd8a:	6023      	str	r3, [r4, #0]
 800fd8c:	4832      	ldr	r0, [pc, #200]	@ (800fe58 <_printf_i+0x238>)
 800fd8e:	2778      	movs	r7, #120	@ 0x78
 800fd90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fd94:	6823      	ldr	r3, [r4, #0]
 800fd96:	6831      	ldr	r1, [r6, #0]
 800fd98:	061f      	lsls	r7, r3, #24
 800fd9a:	f851 5b04 	ldr.w	r5, [r1], #4
 800fd9e:	d402      	bmi.n	800fda6 <_printf_i+0x186>
 800fda0:	065f      	lsls	r7, r3, #25
 800fda2:	bf48      	it	mi
 800fda4:	b2ad      	uxthmi	r5, r5
 800fda6:	6031      	str	r1, [r6, #0]
 800fda8:	07d9      	lsls	r1, r3, #31
 800fdaa:	bf44      	itt	mi
 800fdac:	f043 0320 	orrmi.w	r3, r3, #32
 800fdb0:	6023      	strmi	r3, [r4, #0]
 800fdb2:	b11d      	cbz	r5, 800fdbc <_printf_i+0x19c>
 800fdb4:	2310      	movs	r3, #16
 800fdb6:	e7ad      	b.n	800fd14 <_printf_i+0xf4>
 800fdb8:	4826      	ldr	r0, [pc, #152]	@ (800fe54 <_printf_i+0x234>)
 800fdba:	e7e9      	b.n	800fd90 <_printf_i+0x170>
 800fdbc:	6823      	ldr	r3, [r4, #0]
 800fdbe:	f023 0320 	bic.w	r3, r3, #32
 800fdc2:	6023      	str	r3, [r4, #0]
 800fdc4:	e7f6      	b.n	800fdb4 <_printf_i+0x194>
 800fdc6:	4616      	mov	r6, r2
 800fdc8:	e7bd      	b.n	800fd46 <_printf_i+0x126>
 800fdca:	6833      	ldr	r3, [r6, #0]
 800fdcc:	6825      	ldr	r5, [r4, #0]
 800fdce:	6961      	ldr	r1, [r4, #20]
 800fdd0:	1d18      	adds	r0, r3, #4
 800fdd2:	6030      	str	r0, [r6, #0]
 800fdd4:	062e      	lsls	r6, r5, #24
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	d501      	bpl.n	800fdde <_printf_i+0x1be>
 800fdda:	6019      	str	r1, [r3, #0]
 800fddc:	e002      	b.n	800fde4 <_printf_i+0x1c4>
 800fdde:	0668      	lsls	r0, r5, #25
 800fde0:	d5fb      	bpl.n	800fdda <_printf_i+0x1ba>
 800fde2:	8019      	strh	r1, [r3, #0]
 800fde4:	2300      	movs	r3, #0
 800fde6:	6123      	str	r3, [r4, #16]
 800fde8:	4616      	mov	r6, r2
 800fdea:	e7bc      	b.n	800fd66 <_printf_i+0x146>
 800fdec:	6833      	ldr	r3, [r6, #0]
 800fdee:	1d1a      	adds	r2, r3, #4
 800fdf0:	6032      	str	r2, [r6, #0]
 800fdf2:	681e      	ldr	r6, [r3, #0]
 800fdf4:	6862      	ldr	r2, [r4, #4]
 800fdf6:	2100      	movs	r1, #0
 800fdf8:	4630      	mov	r0, r6
 800fdfa:	f7f0 fa89 	bl	8000310 <memchr>
 800fdfe:	b108      	cbz	r0, 800fe04 <_printf_i+0x1e4>
 800fe00:	1b80      	subs	r0, r0, r6
 800fe02:	6060      	str	r0, [r4, #4]
 800fe04:	6863      	ldr	r3, [r4, #4]
 800fe06:	6123      	str	r3, [r4, #16]
 800fe08:	2300      	movs	r3, #0
 800fe0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe0e:	e7aa      	b.n	800fd66 <_printf_i+0x146>
 800fe10:	6923      	ldr	r3, [r4, #16]
 800fe12:	4632      	mov	r2, r6
 800fe14:	4649      	mov	r1, r9
 800fe16:	4640      	mov	r0, r8
 800fe18:	47d0      	blx	sl
 800fe1a:	3001      	adds	r0, #1
 800fe1c:	d0ad      	beq.n	800fd7a <_printf_i+0x15a>
 800fe1e:	6823      	ldr	r3, [r4, #0]
 800fe20:	079b      	lsls	r3, r3, #30
 800fe22:	d413      	bmi.n	800fe4c <_printf_i+0x22c>
 800fe24:	68e0      	ldr	r0, [r4, #12]
 800fe26:	9b03      	ldr	r3, [sp, #12]
 800fe28:	4298      	cmp	r0, r3
 800fe2a:	bfb8      	it	lt
 800fe2c:	4618      	movlt	r0, r3
 800fe2e:	e7a6      	b.n	800fd7e <_printf_i+0x15e>
 800fe30:	2301      	movs	r3, #1
 800fe32:	4632      	mov	r2, r6
 800fe34:	4649      	mov	r1, r9
 800fe36:	4640      	mov	r0, r8
 800fe38:	47d0      	blx	sl
 800fe3a:	3001      	adds	r0, #1
 800fe3c:	d09d      	beq.n	800fd7a <_printf_i+0x15a>
 800fe3e:	3501      	adds	r5, #1
 800fe40:	68e3      	ldr	r3, [r4, #12]
 800fe42:	9903      	ldr	r1, [sp, #12]
 800fe44:	1a5b      	subs	r3, r3, r1
 800fe46:	42ab      	cmp	r3, r5
 800fe48:	dcf2      	bgt.n	800fe30 <_printf_i+0x210>
 800fe4a:	e7eb      	b.n	800fe24 <_printf_i+0x204>
 800fe4c:	2500      	movs	r5, #0
 800fe4e:	f104 0619 	add.w	r6, r4, #25
 800fe52:	e7f5      	b.n	800fe40 <_printf_i+0x220>
 800fe54:	08010631 	.word	0x08010631
 800fe58:	08010642 	.word	0x08010642

0800fe5c <__sflush_r>:
 800fe5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe64:	0716      	lsls	r6, r2, #28
 800fe66:	4605      	mov	r5, r0
 800fe68:	460c      	mov	r4, r1
 800fe6a:	d454      	bmi.n	800ff16 <__sflush_r+0xba>
 800fe6c:	684b      	ldr	r3, [r1, #4]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	dc02      	bgt.n	800fe78 <__sflush_r+0x1c>
 800fe72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	dd48      	ble.n	800ff0a <__sflush_r+0xae>
 800fe78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fe7a:	2e00      	cmp	r6, #0
 800fe7c:	d045      	beq.n	800ff0a <__sflush_r+0xae>
 800fe7e:	2300      	movs	r3, #0
 800fe80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fe84:	682f      	ldr	r7, [r5, #0]
 800fe86:	6a21      	ldr	r1, [r4, #32]
 800fe88:	602b      	str	r3, [r5, #0]
 800fe8a:	d030      	beq.n	800feee <__sflush_r+0x92>
 800fe8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fe8e:	89a3      	ldrh	r3, [r4, #12]
 800fe90:	0759      	lsls	r1, r3, #29
 800fe92:	d505      	bpl.n	800fea0 <__sflush_r+0x44>
 800fe94:	6863      	ldr	r3, [r4, #4]
 800fe96:	1ad2      	subs	r2, r2, r3
 800fe98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fe9a:	b10b      	cbz	r3, 800fea0 <__sflush_r+0x44>
 800fe9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fe9e:	1ad2      	subs	r2, r2, r3
 800fea0:	2300      	movs	r3, #0
 800fea2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fea4:	6a21      	ldr	r1, [r4, #32]
 800fea6:	4628      	mov	r0, r5
 800fea8:	47b0      	blx	r6
 800feaa:	1c43      	adds	r3, r0, #1
 800feac:	89a3      	ldrh	r3, [r4, #12]
 800feae:	d106      	bne.n	800febe <__sflush_r+0x62>
 800feb0:	6829      	ldr	r1, [r5, #0]
 800feb2:	291d      	cmp	r1, #29
 800feb4:	d82b      	bhi.n	800ff0e <__sflush_r+0xb2>
 800feb6:	4a2a      	ldr	r2, [pc, #168]	@ (800ff60 <__sflush_r+0x104>)
 800feb8:	40ca      	lsrs	r2, r1
 800feba:	07d6      	lsls	r6, r2, #31
 800febc:	d527      	bpl.n	800ff0e <__sflush_r+0xb2>
 800febe:	2200      	movs	r2, #0
 800fec0:	6062      	str	r2, [r4, #4]
 800fec2:	04d9      	lsls	r1, r3, #19
 800fec4:	6922      	ldr	r2, [r4, #16]
 800fec6:	6022      	str	r2, [r4, #0]
 800fec8:	d504      	bpl.n	800fed4 <__sflush_r+0x78>
 800feca:	1c42      	adds	r2, r0, #1
 800fecc:	d101      	bne.n	800fed2 <__sflush_r+0x76>
 800fece:	682b      	ldr	r3, [r5, #0]
 800fed0:	b903      	cbnz	r3, 800fed4 <__sflush_r+0x78>
 800fed2:	6560      	str	r0, [r4, #84]	@ 0x54
 800fed4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fed6:	602f      	str	r7, [r5, #0]
 800fed8:	b1b9      	cbz	r1, 800ff0a <__sflush_r+0xae>
 800feda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fede:	4299      	cmp	r1, r3
 800fee0:	d002      	beq.n	800fee8 <__sflush_r+0x8c>
 800fee2:	4628      	mov	r0, r5
 800fee4:	f7ff fca2 	bl	800f82c <_free_r>
 800fee8:	2300      	movs	r3, #0
 800feea:	6363      	str	r3, [r4, #52]	@ 0x34
 800feec:	e00d      	b.n	800ff0a <__sflush_r+0xae>
 800feee:	2301      	movs	r3, #1
 800fef0:	4628      	mov	r0, r5
 800fef2:	47b0      	blx	r6
 800fef4:	4602      	mov	r2, r0
 800fef6:	1c50      	adds	r0, r2, #1
 800fef8:	d1c9      	bne.n	800fe8e <__sflush_r+0x32>
 800fefa:	682b      	ldr	r3, [r5, #0]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d0c6      	beq.n	800fe8e <__sflush_r+0x32>
 800ff00:	2b1d      	cmp	r3, #29
 800ff02:	d001      	beq.n	800ff08 <__sflush_r+0xac>
 800ff04:	2b16      	cmp	r3, #22
 800ff06:	d11e      	bne.n	800ff46 <__sflush_r+0xea>
 800ff08:	602f      	str	r7, [r5, #0]
 800ff0a:	2000      	movs	r0, #0
 800ff0c:	e022      	b.n	800ff54 <__sflush_r+0xf8>
 800ff0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff12:	b21b      	sxth	r3, r3
 800ff14:	e01b      	b.n	800ff4e <__sflush_r+0xf2>
 800ff16:	690f      	ldr	r7, [r1, #16]
 800ff18:	2f00      	cmp	r7, #0
 800ff1a:	d0f6      	beq.n	800ff0a <__sflush_r+0xae>
 800ff1c:	0793      	lsls	r3, r2, #30
 800ff1e:	680e      	ldr	r6, [r1, #0]
 800ff20:	bf08      	it	eq
 800ff22:	694b      	ldreq	r3, [r1, #20]
 800ff24:	600f      	str	r7, [r1, #0]
 800ff26:	bf18      	it	ne
 800ff28:	2300      	movne	r3, #0
 800ff2a:	eba6 0807 	sub.w	r8, r6, r7
 800ff2e:	608b      	str	r3, [r1, #8]
 800ff30:	f1b8 0f00 	cmp.w	r8, #0
 800ff34:	dde9      	ble.n	800ff0a <__sflush_r+0xae>
 800ff36:	6a21      	ldr	r1, [r4, #32]
 800ff38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ff3a:	4643      	mov	r3, r8
 800ff3c:	463a      	mov	r2, r7
 800ff3e:	4628      	mov	r0, r5
 800ff40:	47b0      	blx	r6
 800ff42:	2800      	cmp	r0, #0
 800ff44:	dc08      	bgt.n	800ff58 <__sflush_r+0xfc>
 800ff46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff4e:	81a3      	strh	r3, [r4, #12]
 800ff50:	f04f 30ff 	mov.w	r0, #4294967295
 800ff54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff58:	4407      	add	r7, r0
 800ff5a:	eba8 0800 	sub.w	r8, r8, r0
 800ff5e:	e7e7      	b.n	800ff30 <__sflush_r+0xd4>
 800ff60:	20400001 	.word	0x20400001

0800ff64 <_fflush_r>:
 800ff64:	b538      	push	{r3, r4, r5, lr}
 800ff66:	690b      	ldr	r3, [r1, #16]
 800ff68:	4605      	mov	r5, r0
 800ff6a:	460c      	mov	r4, r1
 800ff6c:	b913      	cbnz	r3, 800ff74 <_fflush_r+0x10>
 800ff6e:	2500      	movs	r5, #0
 800ff70:	4628      	mov	r0, r5
 800ff72:	bd38      	pop	{r3, r4, r5, pc}
 800ff74:	b118      	cbz	r0, 800ff7e <_fflush_r+0x1a>
 800ff76:	6a03      	ldr	r3, [r0, #32]
 800ff78:	b90b      	cbnz	r3, 800ff7e <_fflush_r+0x1a>
 800ff7a:	f7ff fa9f 	bl	800f4bc <__sinit>
 800ff7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d0f3      	beq.n	800ff6e <_fflush_r+0xa>
 800ff86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ff88:	07d0      	lsls	r0, r2, #31
 800ff8a:	d404      	bmi.n	800ff96 <_fflush_r+0x32>
 800ff8c:	0599      	lsls	r1, r3, #22
 800ff8e:	d402      	bmi.n	800ff96 <_fflush_r+0x32>
 800ff90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ff92:	f7ff fbec 	bl	800f76e <__retarget_lock_acquire_recursive>
 800ff96:	4628      	mov	r0, r5
 800ff98:	4621      	mov	r1, r4
 800ff9a:	f7ff ff5f 	bl	800fe5c <__sflush_r>
 800ff9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ffa0:	07da      	lsls	r2, r3, #31
 800ffa2:	4605      	mov	r5, r0
 800ffa4:	d4e4      	bmi.n	800ff70 <_fflush_r+0xc>
 800ffa6:	89a3      	ldrh	r3, [r4, #12]
 800ffa8:	059b      	lsls	r3, r3, #22
 800ffaa:	d4e1      	bmi.n	800ff70 <_fflush_r+0xc>
 800ffac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ffae:	f7ff fbdf 	bl	800f770 <__retarget_lock_release_recursive>
 800ffb2:	e7dd      	b.n	800ff70 <_fflush_r+0xc>

0800ffb4 <__swbuf_r>:
 800ffb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffb6:	460e      	mov	r6, r1
 800ffb8:	4614      	mov	r4, r2
 800ffba:	4605      	mov	r5, r0
 800ffbc:	b118      	cbz	r0, 800ffc6 <__swbuf_r+0x12>
 800ffbe:	6a03      	ldr	r3, [r0, #32]
 800ffc0:	b90b      	cbnz	r3, 800ffc6 <__swbuf_r+0x12>
 800ffc2:	f7ff fa7b 	bl	800f4bc <__sinit>
 800ffc6:	69a3      	ldr	r3, [r4, #24]
 800ffc8:	60a3      	str	r3, [r4, #8]
 800ffca:	89a3      	ldrh	r3, [r4, #12]
 800ffcc:	071a      	lsls	r2, r3, #28
 800ffce:	d501      	bpl.n	800ffd4 <__swbuf_r+0x20>
 800ffd0:	6923      	ldr	r3, [r4, #16]
 800ffd2:	b943      	cbnz	r3, 800ffe6 <__swbuf_r+0x32>
 800ffd4:	4621      	mov	r1, r4
 800ffd6:	4628      	mov	r0, r5
 800ffd8:	f000 f82a 	bl	8010030 <__swsetup_r>
 800ffdc:	b118      	cbz	r0, 800ffe6 <__swbuf_r+0x32>
 800ffde:	f04f 37ff 	mov.w	r7, #4294967295
 800ffe2:	4638      	mov	r0, r7
 800ffe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffe6:	6823      	ldr	r3, [r4, #0]
 800ffe8:	6922      	ldr	r2, [r4, #16]
 800ffea:	1a98      	subs	r0, r3, r2
 800ffec:	6963      	ldr	r3, [r4, #20]
 800ffee:	b2f6      	uxtb	r6, r6
 800fff0:	4283      	cmp	r3, r0
 800fff2:	4637      	mov	r7, r6
 800fff4:	dc05      	bgt.n	8010002 <__swbuf_r+0x4e>
 800fff6:	4621      	mov	r1, r4
 800fff8:	4628      	mov	r0, r5
 800fffa:	f7ff ffb3 	bl	800ff64 <_fflush_r>
 800fffe:	2800      	cmp	r0, #0
 8010000:	d1ed      	bne.n	800ffde <__swbuf_r+0x2a>
 8010002:	68a3      	ldr	r3, [r4, #8]
 8010004:	3b01      	subs	r3, #1
 8010006:	60a3      	str	r3, [r4, #8]
 8010008:	6823      	ldr	r3, [r4, #0]
 801000a:	1c5a      	adds	r2, r3, #1
 801000c:	6022      	str	r2, [r4, #0]
 801000e:	701e      	strb	r6, [r3, #0]
 8010010:	6962      	ldr	r2, [r4, #20]
 8010012:	1c43      	adds	r3, r0, #1
 8010014:	429a      	cmp	r2, r3
 8010016:	d004      	beq.n	8010022 <__swbuf_r+0x6e>
 8010018:	89a3      	ldrh	r3, [r4, #12]
 801001a:	07db      	lsls	r3, r3, #31
 801001c:	d5e1      	bpl.n	800ffe2 <__swbuf_r+0x2e>
 801001e:	2e0a      	cmp	r6, #10
 8010020:	d1df      	bne.n	800ffe2 <__swbuf_r+0x2e>
 8010022:	4621      	mov	r1, r4
 8010024:	4628      	mov	r0, r5
 8010026:	f7ff ff9d 	bl	800ff64 <_fflush_r>
 801002a:	2800      	cmp	r0, #0
 801002c:	d0d9      	beq.n	800ffe2 <__swbuf_r+0x2e>
 801002e:	e7d6      	b.n	800ffde <__swbuf_r+0x2a>

08010030 <__swsetup_r>:
 8010030:	b538      	push	{r3, r4, r5, lr}
 8010032:	4b29      	ldr	r3, [pc, #164]	@ (80100d8 <__swsetup_r+0xa8>)
 8010034:	4605      	mov	r5, r0
 8010036:	6818      	ldr	r0, [r3, #0]
 8010038:	460c      	mov	r4, r1
 801003a:	b118      	cbz	r0, 8010044 <__swsetup_r+0x14>
 801003c:	6a03      	ldr	r3, [r0, #32]
 801003e:	b90b      	cbnz	r3, 8010044 <__swsetup_r+0x14>
 8010040:	f7ff fa3c 	bl	800f4bc <__sinit>
 8010044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010048:	0719      	lsls	r1, r3, #28
 801004a:	d422      	bmi.n	8010092 <__swsetup_r+0x62>
 801004c:	06da      	lsls	r2, r3, #27
 801004e:	d407      	bmi.n	8010060 <__swsetup_r+0x30>
 8010050:	2209      	movs	r2, #9
 8010052:	602a      	str	r2, [r5, #0]
 8010054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010058:	81a3      	strh	r3, [r4, #12]
 801005a:	f04f 30ff 	mov.w	r0, #4294967295
 801005e:	e033      	b.n	80100c8 <__swsetup_r+0x98>
 8010060:	0758      	lsls	r0, r3, #29
 8010062:	d512      	bpl.n	801008a <__swsetup_r+0x5a>
 8010064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010066:	b141      	cbz	r1, 801007a <__swsetup_r+0x4a>
 8010068:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801006c:	4299      	cmp	r1, r3
 801006e:	d002      	beq.n	8010076 <__swsetup_r+0x46>
 8010070:	4628      	mov	r0, r5
 8010072:	f7ff fbdb 	bl	800f82c <_free_r>
 8010076:	2300      	movs	r3, #0
 8010078:	6363      	str	r3, [r4, #52]	@ 0x34
 801007a:	89a3      	ldrh	r3, [r4, #12]
 801007c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010080:	81a3      	strh	r3, [r4, #12]
 8010082:	2300      	movs	r3, #0
 8010084:	6063      	str	r3, [r4, #4]
 8010086:	6923      	ldr	r3, [r4, #16]
 8010088:	6023      	str	r3, [r4, #0]
 801008a:	89a3      	ldrh	r3, [r4, #12]
 801008c:	f043 0308 	orr.w	r3, r3, #8
 8010090:	81a3      	strh	r3, [r4, #12]
 8010092:	6923      	ldr	r3, [r4, #16]
 8010094:	b94b      	cbnz	r3, 80100aa <__swsetup_r+0x7a>
 8010096:	89a3      	ldrh	r3, [r4, #12]
 8010098:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801009c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80100a0:	d003      	beq.n	80100aa <__swsetup_r+0x7a>
 80100a2:	4621      	mov	r1, r4
 80100a4:	4628      	mov	r0, r5
 80100a6:	f000 f83f 	bl	8010128 <__smakebuf_r>
 80100aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100ae:	f013 0201 	ands.w	r2, r3, #1
 80100b2:	d00a      	beq.n	80100ca <__swsetup_r+0x9a>
 80100b4:	2200      	movs	r2, #0
 80100b6:	60a2      	str	r2, [r4, #8]
 80100b8:	6962      	ldr	r2, [r4, #20]
 80100ba:	4252      	negs	r2, r2
 80100bc:	61a2      	str	r2, [r4, #24]
 80100be:	6922      	ldr	r2, [r4, #16]
 80100c0:	b942      	cbnz	r2, 80100d4 <__swsetup_r+0xa4>
 80100c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80100c6:	d1c5      	bne.n	8010054 <__swsetup_r+0x24>
 80100c8:	bd38      	pop	{r3, r4, r5, pc}
 80100ca:	0799      	lsls	r1, r3, #30
 80100cc:	bf58      	it	pl
 80100ce:	6962      	ldrpl	r2, [r4, #20]
 80100d0:	60a2      	str	r2, [r4, #8]
 80100d2:	e7f4      	b.n	80100be <__swsetup_r+0x8e>
 80100d4:	2000      	movs	r0, #0
 80100d6:	e7f7      	b.n	80100c8 <__swsetup_r+0x98>
 80100d8:	240001cc 	.word	0x240001cc

080100dc <__swhatbuf_r>:
 80100dc:	b570      	push	{r4, r5, r6, lr}
 80100de:	460c      	mov	r4, r1
 80100e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100e4:	2900      	cmp	r1, #0
 80100e6:	b096      	sub	sp, #88	@ 0x58
 80100e8:	4615      	mov	r5, r2
 80100ea:	461e      	mov	r6, r3
 80100ec:	da0d      	bge.n	801010a <__swhatbuf_r+0x2e>
 80100ee:	89a3      	ldrh	r3, [r4, #12]
 80100f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80100f4:	f04f 0100 	mov.w	r1, #0
 80100f8:	bf14      	ite	ne
 80100fa:	2340      	movne	r3, #64	@ 0x40
 80100fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010100:	2000      	movs	r0, #0
 8010102:	6031      	str	r1, [r6, #0]
 8010104:	602b      	str	r3, [r5, #0]
 8010106:	b016      	add	sp, #88	@ 0x58
 8010108:	bd70      	pop	{r4, r5, r6, pc}
 801010a:	466a      	mov	r2, sp
 801010c:	f000 f848 	bl	80101a0 <_fstat_r>
 8010110:	2800      	cmp	r0, #0
 8010112:	dbec      	blt.n	80100ee <__swhatbuf_r+0x12>
 8010114:	9901      	ldr	r1, [sp, #4]
 8010116:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801011a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801011e:	4259      	negs	r1, r3
 8010120:	4159      	adcs	r1, r3
 8010122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010126:	e7eb      	b.n	8010100 <__swhatbuf_r+0x24>

08010128 <__smakebuf_r>:
 8010128:	898b      	ldrh	r3, [r1, #12]
 801012a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801012c:	079d      	lsls	r5, r3, #30
 801012e:	4606      	mov	r6, r0
 8010130:	460c      	mov	r4, r1
 8010132:	d507      	bpl.n	8010144 <__smakebuf_r+0x1c>
 8010134:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010138:	6023      	str	r3, [r4, #0]
 801013a:	6123      	str	r3, [r4, #16]
 801013c:	2301      	movs	r3, #1
 801013e:	6163      	str	r3, [r4, #20]
 8010140:	b003      	add	sp, #12
 8010142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010144:	ab01      	add	r3, sp, #4
 8010146:	466a      	mov	r2, sp
 8010148:	f7ff ffc8 	bl	80100dc <__swhatbuf_r>
 801014c:	9f00      	ldr	r7, [sp, #0]
 801014e:	4605      	mov	r5, r0
 8010150:	4639      	mov	r1, r7
 8010152:	4630      	mov	r0, r6
 8010154:	f7ff f89a 	bl	800f28c <_malloc_r>
 8010158:	b948      	cbnz	r0, 801016e <__smakebuf_r+0x46>
 801015a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801015e:	059a      	lsls	r2, r3, #22
 8010160:	d4ee      	bmi.n	8010140 <__smakebuf_r+0x18>
 8010162:	f023 0303 	bic.w	r3, r3, #3
 8010166:	f043 0302 	orr.w	r3, r3, #2
 801016a:	81a3      	strh	r3, [r4, #12]
 801016c:	e7e2      	b.n	8010134 <__smakebuf_r+0xc>
 801016e:	89a3      	ldrh	r3, [r4, #12]
 8010170:	6020      	str	r0, [r4, #0]
 8010172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010176:	81a3      	strh	r3, [r4, #12]
 8010178:	9b01      	ldr	r3, [sp, #4]
 801017a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801017e:	b15b      	cbz	r3, 8010198 <__smakebuf_r+0x70>
 8010180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010184:	4630      	mov	r0, r6
 8010186:	f000 f81d 	bl	80101c4 <_isatty_r>
 801018a:	b128      	cbz	r0, 8010198 <__smakebuf_r+0x70>
 801018c:	89a3      	ldrh	r3, [r4, #12]
 801018e:	f023 0303 	bic.w	r3, r3, #3
 8010192:	f043 0301 	orr.w	r3, r3, #1
 8010196:	81a3      	strh	r3, [r4, #12]
 8010198:	89a3      	ldrh	r3, [r4, #12]
 801019a:	431d      	orrs	r5, r3
 801019c:	81a5      	strh	r5, [r4, #12]
 801019e:	e7cf      	b.n	8010140 <__smakebuf_r+0x18>

080101a0 <_fstat_r>:
 80101a0:	b538      	push	{r3, r4, r5, lr}
 80101a2:	4d07      	ldr	r5, [pc, #28]	@ (80101c0 <_fstat_r+0x20>)
 80101a4:	2300      	movs	r3, #0
 80101a6:	4604      	mov	r4, r0
 80101a8:	4608      	mov	r0, r1
 80101aa:	4611      	mov	r1, r2
 80101ac:	602b      	str	r3, [r5, #0]
 80101ae:	f7f2 fa4b 	bl	8002648 <_fstat>
 80101b2:	1c43      	adds	r3, r0, #1
 80101b4:	d102      	bne.n	80101bc <_fstat_r+0x1c>
 80101b6:	682b      	ldr	r3, [r5, #0]
 80101b8:	b103      	cbz	r3, 80101bc <_fstat_r+0x1c>
 80101ba:	6023      	str	r3, [r4, #0]
 80101bc:	bd38      	pop	{r3, r4, r5, pc}
 80101be:	bf00      	nop
 80101c0:	240008e8 	.word	0x240008e8

080101c4 <_isatty_r>:
 80101c4:	b538      	push	{r3, r4, r5, lr}
 80101c6:	4d06      	ldr	r5, [pc, #24]	@ (80101e0 <_isatty_r+0x1c>)
 80101c8:	2300      	movs	r3, #0
 80101ca:	4604      	mov	r4, r0
 80101cc:	4608      	mov	r0, r1
 80101ce:	602b      	str	r3, [r5, #0]
 80101d0:	f7f2 fa4a 	bl	8002668 <_isatty>
 80101d4:	1c43      	adds	r3, r0, #1
 80101d6:	d102      	bne.n	80101de <_isatty_r+0x1a>
 80101d8:	682b      	ldr	r3, [r5, #0]
 80101da:	b103      	cbz	r3, 80101de <_isatty_r+0x1a>
 80101dc:	6023      	str	r3, [r4, #0]
 80101de:	bd38      	pop	{r3, r4, r5, pc}
 80101e0:	240008e8 	.word	0x240008e8

080101e4 <_init>:
 80101e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101e6:	bf00      	nop
 80101e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101ea:	bc08      	pop	{r3}
 80101ec:	469e      	mov	lr, r3
 80101ee:	4770      	bx	lr

080101f0 <_fini>:
 80101f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101f2:	bf00      	nop
 80101f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101f6:	bc08      	pop	{r3}
 80101f8:	469e      	mov	lr, r3
 80101fa:	4770      	bx	lr
