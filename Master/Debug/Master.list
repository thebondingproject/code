
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe20  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  080100f0  080100f0  000110f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000012c2  0801054c  0801054c  0001154c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000028  08011810  08011810  00012810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  08011838  08011838  00012838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000010  08011840  08011840  00012840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011850  08011850  00012850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  24000000  08011854  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000860  24000224  08011a78  00013224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000a84  08011a78  00013a84  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00013224  2**0
                  CONTENTS, READONLY
 12 .debug_info   000325d0  00000000  00000000  00013252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007608  00000000  00000000  00045822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002058  00000000  00000000  0004ce30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000182b  00000000  00000000  0004ee88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039070  00000000  00000000  000506b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b692  00000000  00000000  00089723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001720b8  00000000  00000000  000b4db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c2  00000000  00000000  00226e6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009184  00000000  00000000  00226f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  002300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000224 	.word	0x24000224
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080100d8 	.word	0x080100d8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000228 	.word	0x24000228
 800030c:	080100d8 	.word	0x080100d8

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80003b6:	f001 fc81 	bl	8001cbc <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003ba:	f002 f9f1 	bl	80027a0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80003be:	f000 fa7f 	bl	80008c0 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80003c2:	f000 faeb 	bl	800099c <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003c6:	f000 fe4f 	bl	8001068 <MX_GPIO_Init>
	MX_CRC_Init();
 80003ca:	f000 fc6d 	bl	8000ca8 <MX_CRC_Init>
	MX_DMA2D_Init();
 80003ce:	f000 fc8d 	bl	8000cec <MX_DMA2D_Init>
	MX_ADC1_Init();
 80003d2:	f000 fb13 	bl	80009fc <MX_ADC1_Init>
	MX_I2C1_Init();
 80003d6:	f000 fcc3 	bl	8000d60 <MX_I2C1_Init>
	MX_SPI1_Init();
 80003da:	f000 fd01 	bl	8000de0 <MX_SPI1_Init>
	MX_TIM2_Init();
 80003de:	f000 fd57 	bl	8000e90 <MX_TIM2_Init>
	MX_TIM3_Init();
 80003e2:	f000 fdc9 	bl	8000f78 <MX_TIM3_Init>
	MX_ADC2_Init();
 80003e6:	f000 fb83 	bl	8000af0 <MX_ADC2_Init>
	MX_ADC3_Init();
 80003ea:	f000 fbe9 	bl	8000bc0 <MX_ADC3_Init>
	/* USER CODE BEGIN 2 */
	serial_communication_variable_init();
 80003ee:	f001 fc97 	bl	8001d20 <serial_communication_variable_init>
	speed_joystickX = 0;
 80003f2:	4bbd      	ldr	r3, [pc, #756]	@ (80006e8 <main+0x338>)
 80003f4:	f04f 0200 	mov.w	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
	speed_joystickY = 0;
 80003fa:	4bbc      	ldr	r3, [pc, #752]	@ (80006ec <main+0x33c>)
 80003fc:	f04f 0200 	mov.w	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
	speed_joystickZ = 0;
 8000402:	4bbb      	ldr	r3, [pc, #748]	@ (80006f0 <main+0x340>)
 8000404:	f04f 0200 	mov.w	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
	speed_joystickT = 0;
 800040a:	4bba      	ldr	r3, [pc, #744]	@ (80006f4 <main+0x344>)
 800040c:	f04f 0200 	mov.w	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
	solenoid_tear_1_status = 0;
 8000412:	4bb9      	ldr	r3, [pc, #740]	@ (80006f8 <main+0x348>)
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
	solenoid_tear_2_status = 0;
 8000418:	4bb8      	ldr	r3, [pc, #736]	@ (80006fc <main+0x34c>)
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
	solenoid_tear_clamp_status = 0;
 800041e:	4bb8      	ldr	r3, [pc, #736]	@ (8000700 <main+0x350>)
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
	solenoid_tear_lock_status = 0;
 8000424:	4bb7      	ldr	r3, [pc, #732]	@ (8000704 <main+0x354>)
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
	control_mode = 0;
 800042a:	4bb7      	ldr	r3, [pc, #732]	@ (8000708 <main+0x358>)
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
	bond_power_now = 0;
 8000430:	4bb6      	ldr	r3, [pc, #728]	@ (800070c <main+0x35c>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	bond_power_before = 0;
 8000436:	4bb6      	ldr	r3, [pc, #728]	@ (8000710 <main+0x360>)
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]
	search_height_adj_1 = 0;
 800043c:	4bb5      	ldr	r3, [pc, #724]	@ (8000714 <main+0x364>)
 800043e:	f04f 0200 	mov.w	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
	search_height_adj_2 = 0;
 8000444:	4bb4      	ldr	r3, [pc, #720]	@ (8000718 <main+0x368>)
 8000446:	f04f 0200 	mov.w	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
	measured_temperature_gauge = 0;
 800044c:	4bb3      	ldr	r3, [pc, #716]	@ (800071c <main+0x36c>)
 800044e:	f04f 0200 	mov.w	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
	debug_head_touched = 0;
 8000454:	4bb2      	ldr	r3, [pc, #712]	@ (8000720 <main+0x370>)
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
	fine_adjustment = 1;
 800045a:	4bb2      	ldr	r3, [pc, #712]	@ (8000724 <main+0x374>)
 800045c:	2201      	movs	r2, #1
 800045e:	601a      	str	r2, [r3, #0]

	if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8000460:	48b1      	ldr	r0, [pc, #708]	@ (8000728 <main+0x378>)
 8000462:	f00b ff67 	bl	800c334 <HAL_TIM_Base_Start_IT>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <main+0xc0>
	{
		/* Starting Error */
		Error_Handler();
 800046c:	f001 fc52 	bl	8001d14 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000470:	2108      	movs	r1, #8
 8000472:	48ae      	ldr	r0, [pc, #696]	@ (800072c <main+0x37c>)
 8000474:	f00c f8a6 	bl	800c5c4 <HAL_TIM_PWM_Start>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	position_joystick = 0;
 8000478:	4bad      	ldr	r3, [pc, #692]	@ (8000730 <main+0x380>)
 800047a:	f04f 0200 	mov.w	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
	ui32_to_f conv;
	//https://deepbluembedded.com/stm32-potentiometer-read-examples-single-multiple-potentiometers/
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 8000480:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000484:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000488:	48aa      	ldr	r0, [pc, #680]	@ (8000734 <main+0x384>)
 800048a:	f004 fba7 	bl	8004bdc <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 800048e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000492:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000496:	48a8      	ldr	r0, [pc, #672]	@ (8000738 <main+0x388>)
 8000498:	f004 fba0 	bl	8004bdc <HAL_ADCEx_Calibration_Start>

	//Disable the ultrasonic driver
	HAL_GPIO_WritePin(ULTRASONIC_ENABLE_GPIO_Port, ULTRASONIC_ENABLE_Pin, GPIO_PIN_SET);
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004a2:	48a6      	ldr	r0, [pc, #664]	@ (800073c <main+0x38c>)
 80004a4:	f005 fcb2 	bl	8005e0c <HAL_GPIO_WritePin>

	//Reset position at startup
	write_uint32_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_MODE, POS_MODE);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2105      	movs	r1, #5
 80004ac:	202c      	movs	r0, #44	@ 0x2c
 80004ae:	f001 fb15 	bl	8001adc <write_uint32_to_slave>
	HAL_Delay(10);
 80004b2:	200a      	movs	r0, #10
 80004b4:	f002 fa06 	bl	80028c4 <HAL_Delay>
	write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, 0);
 80004b8:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8000740 <main+0x390>
 80004bc:	2100      	movs	r1, #0
 80004be:	202c      	movs	r0, #44	@ 0x2c
 80004c0:	f001 fae8 	bl	8001a94 <write_float_to_slave>
	HAL_Delay(10);
 80004c4:	200a      	movs	r0, #10
 80004c6:	f002 f9fd 	bl	80028c4 <HAL_Delay>

	write_uint32_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_MODE, SPD_MODE);
 80004ca:	2201      	movs	r2, #1
 80004cc:	2105      	movs	r1, #5
 80004ce:	2028      	movs	r0, #40	@ 0x28
 80004d0:	f001 fb04 	bl	8001adc <write_uint32_to_slave>
	HAL_Delay(10);
 80004d4:	200a      	movs	r0, #10
 80004d6:	f002 f9f5 	bl	80028c4 <HAL_Delay>
	write_float_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_SPEED, 0);
 80004da:	ed9f 0a99 	vldr	s0, [pc, #612]	@ 8000740 <main+0x390>
 80004de:	2101      	movs	r1, #1
 80004e0:	2028      	movs	r0, #40	@ 0x28
 80004e2:	f001 fad7 	bl	8001a94 <write_float_to_slave>
	HAL_Delay(10);
 80004e6:	200a      	movs	r0, #10
 80004e8:	f002 f9ec 	bl	80028c4 <HAL_Delay>

	write_uint32_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_MODE, SPD_MODE);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2105      	movs	r1, #5
 80004f0:	202a      	movs	r0, #42	@ 0x2a
 80004f2:	f001 faf3 	bl	8001adc <write_uint32_to_slave>
	HAL_Delay(10);
 80004f6:	200a      	movs	r0, #10
 80004f8:	f002 f9e4 	bl	80028c4 <HAL_Delay>
	write_float_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_SPEED, 0);
 80004fc:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8000740 <main+0x390>
 8000500:	2101      	movs	r1, #1
 8000502:	202a      	movs	r0, #42	@ 0x2a
 8000504:	f001 fac6 	bl	8001a94 <write_float_to_slave>
	HAL_Delay(10);
 8000508:	200a      	movs	r0, #10
 800050a:	f002 f9db 	bl	80028c4 <HAL_Delay>

	write_uint32_to_slave(ADDRESS_MOTOR_T, VIRTUAL_MEM_MODE, SPD_MODE);
 800050e:	2201      	movs	r2, #1
 8000510:	2105      	movs	r1, #5
 8000512:	202e      	movs	r0, #46	@ 0x2e
 8000514:	f001 fae2 	bl	8001adc <write_uint32_to_slave>
	HAL_Delay(10);
 8000518:	200a      	movs	r0, #10
 800051a:	f002 f9d3 	bl	80028c4 <HAL_Delay>
	write_float_to_slave(ADDRESS_MOTOR_T, VIRTUAL_MEM_SPEED, 0);
 800051e:	ed9f 0a88 	vldr	s0, [pc, #544]	@ 8000740 <main+0x390>
 8000522:	2101      	movs	r1, #1
 8000524:	202e      	movs	r0, #46	@ 0x2e
 8000526:	f001 fab5 	bl	8001a94 <write_float_to_slave>
	HAL_Delay(10);
 800052a:	200a      	movs	r0, #10
 800052c:	f002 f9ca 	bl	80028c4 <HAL_Delay>
		//				prepare_WRITE_packet(tx_buffer, VIRTUAL_MEM_POSITION, descent_position.ui32);
		//				HAL_I2C_Master_Transmit_IT(&hi2c1, ADDRESS_MOTOR_Z, tx_buffer, MAX_COMM_BUFFER_SIZE);
		//				HAL_Delay(6000);

		//Keep the head raised
		debug_head_touched = HAL_GPIO_ReadPin(PLATFORM_TOUCH_GPIO_Port, PLATFORM_TOUCH_Pin);
 8000530:	2108      	movs	r1, #8
 8000532:	4882      	ldr	r0, [pc, #520]	@ (800073c <main+0x38c>)
 8000534:	f005 fc52 	bl	8005ddc <HAL_GPIO_ReadPin>
 8000538:	4603      	mov	r3, r0
 800053a:	461a      	mov	r2, r3
 800053c:	4b78      	ldr	r3, [pc, #480]	@ (8000720 <main+0x370>)
 800053e:	601a      	str	r2, [r3, #0]
//		HAL_Delay(100);
		//


		HAL_ADC_Start(&hadc1);
 8000540:	487c      	ldr	r0, [pc, #496]	@ (8000734 <main+0x384>)
 8000542:	f002 ff3b 	bl	80033bc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8000546:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800054a:	487a      	ldr	r0, [pc, #488]	@ (8000734 <main+0x384>)
 800054c:	f003 f834 	bl	80035b8 <HAL_ADC_PollForConversion>
		ADC_raw[0] = HAL_ADC_GetValue(&hadc1);
 8000550:	4878      	ldr	r0, [pc, #480]	@ (8000734 <main+0x384>)
 8000552:	f003 f925 	bl	80037a0 <HAL_ADC_GetValue>
 8000556:	4603      	mov	r3, r0
 8000558:	4a7a      	ldr	r2, [pc, #488]	@ (8000744 <main+0x394>)
 800055a:	6013      	str	r3, [r2, #0]

		HAL_ADC_Start(&hadc3);
 800055c:	487a      	ldr	r0, [pc, #488]	@ (8000748 <main+0x398>)
 800055e:	f002 ff2d 	bl	80033bc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, 1000);
 8000562:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000566:	4878      	ldr	r0, [pc, #480]	@ (8000748 <main+0x398>)
 8000568:	f003 f826 	bl	80035b8 <HAL_ADC_PollForConversion>
		ADC_raw[1] = HAL_ADC_GetValue(&hadc3);
 800056c:	4876      	ldr	r0, [pc, #472]	@ (8000748 <main+0x398>)
 800056e:	f003 f917 	bl	80037a0 <HAL_ADC_GetValue>
 8000572:	4603      	mov	r3, r0
 8000574:	4a73      	ldr	r2, [pc, #460]	@ (8000744 <main+0x394>)
 8000576:	6053      	str	r3, [r2, #4]

		//Enable XY jog mode
		measure_joystick_and_send_to_slave();
 8000578:	f001 f846 	bl	8001608 <measure_joystick_and_send_to_slave>

		// Execute this code


#if 1
		if(HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_RESET)
 800057c:	2180      	movs	r1, #128	@ 0x80
 800057e:	486f      	ldr	r0, [pc, #444]	@ (800073c <main+0x38c>)
 8000580:	f005 fc2c 	bl	8005ddc <HAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	f040 817b 	bne.w	8000882 <main+0x4d2>
		{

			fine_adjustment = 1;
 800058c:	4b65      	ldr	r3, [pc, #404]	@ (8000724 <main+0x374>)
 800058e:	2201      	movs	r2, #1
 8000590:	601a      	str	r2, [r3, #0]

			stage = 0; //For debug; TODO: remove in the future
 8000592:	4b6e      	ldr	r3, [pc, #440]	@ (800074c <main+0x39c>)
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
			// Wait for the user to release the button
			wait_for_button_release();
 8000598:	f001 faea 	bl	8001b70 <wait_for_button_release>

			ui32_to_f descent_position;

			stage++; //For debug; TODO: remove
 800059c:	4b6b      	ldr	r3, [pc, #428]	@ (800074c <main+0x39c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	4a6a      	ldr	r2, [pc, #424]	@ (800074c <main+0x39c>)
 80005a4:	6013      	str	r3, [r2, #0]
			// First search descent
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, search_height_1);
 80005a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000750 <main+0x3a0>)
 80005a8:	edd3 7a00 	vldr	s15, [r3]
 80005ac:	eeb0 0a67 	vmov.f32	s0, s15
 80005b0:	2100      	movs	r1, #0
 80005b2:	202c      	movs	r0, #44	@ 0x2c
 80005b4:	f001 fa6e 	bl	8001a94 <write_float_to_slave>

			// Wait for the button to be pressed and released
			//wait_for_button_press();

#if 1
			stage++; //For debug; TODO: remove
 80005b8:	4b64      	ldr	r3, [pc, #400]	@ (800074c <main+0x39c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	4a63      	ldr	r2, [pc, #396]	@ (800074c <main+0x39c>)
 80005c0:	6013      	str	r3, [r2, #0]
			// Enter into jog mode (XY movement with joystick)
			enter_jog_mode();
 80005c2:	f001 f8eb 	bl	800179c <enter_jog_mode>
			// Wait for the user to release the button
			wait_for_button_release();
 80005c6:	f001 fad3 	bl	8001b70 <wait_for_button_release>
#else
			wait_for_button_press();
#endif

			stage++; //For debug; TODO: remove
 80005ca:	4b60      	ldr	r3, [pc, #384]	@ (800074c <main+0x39c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	3301      	adds	r3, #1
 80005d0:	4a5e      	ldr	r2, [pc, #376]	@ (800074c <main+0x39c>)
 80005d2:	6013      	str	r3, [r2, #0]
			//Start descending until touch with substrate
			head_touched = false;
 80005d4:	4b5f      	ldr	r3, [pc, #380]	@ (8000754 <main+0x3a4>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, -1);
 80005da:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80005de:	2100      	movs	r1, #0
 80005e0:	202c      	movs	r0, #44	@ 0x2c
 80005e2:	f001 fa57 	bl	8001a94 <write_float_to_slave>
			while(!head_touched){__NOP();};
 80005e6:	e000      	b.n	80005ea <main+0x23a>
 80005e8:	bf00      	nop
 80005ea:	4b5a      	ldr	r3, [pc, #360]	@ (8000754 <main+0x3a4>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	f083 0301 	eor.w	r3, r3, #1
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d1f7      	bne.n	80005e8 <main+0x238>

			stage++; //For debug; TODO: remove
 80005f8:	4b54      	ldr	r3, [pc, #336]	@ (800074c <main+0x39c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	4a53      	ldr	r2, [pc, #332]	@ (800074c <main+0x39c>)
 8000600:	6013      	str	r3, [r2, #0]
			//Lower the head a bit more
			data_ready = false;
 8000602:	4b55      	ldr	r3, [pc, #340]	@ (8000758 <main+0x3a8>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
			prepare_READ_packet(tx_buffer, VIRTUAL_MEM_POSITION_MEAS);
 8000608:	2103      	movs	r1, #3
 800060a:	4854      	ldr	r0, [pc, #336]	@ (800075c <main+0x3ac>)
 800060c:	f001 fbc8 	bl	8001da0 <prepare_READ_packet>
			HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_MOTOR_Z, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 8000610:	2364      	movs	r3, #100	@ 0x64
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2307      	movs	r3, #7
 8000616:	4a51      	ldr	r2, [pc, #324]	@ (800075c <main+0x3ac>)
 8000618:	212c      	movs	r1, #44	@ 0x2c
 800061a:	4851      	ldr	r0, [pc, #324]	@ (8000760 <main+0x3b0>)
 800061c:	f005 fcc6 	bl	8005fac <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive_IT(&hi2c1, ADDRESS_MOTOR_Z, rx_buffer, MAX_COMM_BUFFER_SIZE);
 8000620:	2307      	movs	r3, #7
 8000622:	4a50      	ldr	r2, [pc, #320]	@ (8000764 <main+0x3b4>)
 8000624:	212c      	movs	r1, #44	@ 0x2c
 8000626:	484e      	ldr	r0, [pc, #312]	@ (8000760 <main+0x3b0>)
 8000628:	f005 fdd8 	bl	80061dc <HAL_I2C_Master_Receive_IT>
			while(!data_ready){__NOP();};
 800062c:	e000      	b.n	8000630 <main+0x280>
 800062e:	bf00      	nop
 8000630:	4b49      	ldr	r3, [pc, #292]	@ (8000758 <main+0x3a8>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	f083 0301 	eor.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1f7      	bne.n	800062e <main+0x27e>
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, read_position - further_descent);
 800063e:	4b4a      	ldr	r3, [pc, #296]	@ (8000768 <main+0x3b8>)
 8000640:	ed93 7a00 	vldr	s14, [r3]
 8000644:	4b49      	ldr	r3, [pc, #292]	@ (800076c <main+0x3bc>)
 8000646:	edd3 7a00 	vldr	s15, [r3]
 800064a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800064e:	eeb0 0a67 	vmov.f32	s0, s15
 8000652:	2100      	movs	r1, #0
 8000654:	202c      	movs	r0, #44	@ 0x2c
 8000656:	f001 fa1d 	bl	8001a94 <write_float_to_slave>

			stage++; //For debug; TODO: remove
 800065a:	4b3c      	ldr	r3, [pc, #240]	@ (800074c <main+0x39c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	3301      	adds	r3, #1
 8000660:	4a3a      	ldr	r2, [pc, #232]	@ (800074c <main+0x39c>)
 8000662:	6013      	str	r3, [r2, #0]
			//Perform the bond
			perform_bond(bond_time_1);
 8000664:	4b42      	ldr	r3, [pc, #264]	@ (8000770 <main+0x3c0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fa57 	bl	8001b1c <perform_bond>

			// Open clamp solenoid
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2108      	movs	r1, #8
 8000672:	4840      	ldr	r0, [pc, #256]	@ (8000774 <main+0x3c4>)
 8000674:	f005 fbca 	bl	8005e0c <HAL_GPIO_WritePin>

			//Go to loop height
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, (read_position - further_descent) + loop_height);
 8000678:	4b3b      	ldr	r3, [pc, #236]	@ (8000768 <main+0x3b8>)
 800067a:	ed93 7a00 	vldr	s14, [r3]
 800067e:	4b3b      	ldr	r3, [pc, #236]	@ (800076c <main+0x3bc>)
 8000680:	edd3 7a00 	vldr	s15, [r3]
 8000684:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000688:	4b3b      	ldr	r3, [pc, #236]	@ (8000778 <main+0x3c8>)
 800068a:	edd3 7a00 	vldr	s15, [r3]
 800068e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000692:	eeb0 0a67 	vmov.f32	s0, s15
 8000696:	2100      	movs	r1, #0
 8000698:	202c      	movs	r0, #44	@ 0x2c
 800069a:	f001 f9fb 	bl	8001a94 <write_float_to_slave>

#if 1
			stage++; //For debug; TODO: remove
 800069e:	4b2b      	ldr	r3, [pc, #172]	@ (800074c <main+0x39c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3301      	adds	r3, #1
 80006a4:	4a29      	ldr	r2, [pc, #164]	@ (800074c <main+0x39c>)
 80006a6:	6013      	str	r3, [r2, #0]
			// Enter into jog mode (XY movement with joystick)
			enter_jog_mode();
 80006a8:	f001 f878 	bl	800179c <enter_jog_mode>
			// Wait for the user to release the button
			wait_for_button_release();
 80006ac:	f001 fa60 	bl	8001b70 <wait_for_button_release>
#else
			wait_for_button_press();
#endif
			//Go to search height 2
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, search_height_2);
 80006b0:	4b32      	ldr	r3, [pc, #200]	@ (800077c <main+0x3cc>)
 80006b2:	edd3 7a00 	vldr	s15, [r3]
 80006b6:	eeb0 0a67 	vmov.f32	s0, s15
 80006ba:	2100      	movs	r1, #0
 80006bc:	202c      	movs	r0, #44	@ 0x2c
 80006be:	f001 f9e9 	bl	8001a94 <write_float_to_slave>

			// Wait for the button to be pressed and released
			//wait_for_button_press();

#if 1
			stage++; //For debug; TODO: remove
 80006c2:	4b22      	ldr	r3, [pc, #136]	@ (800074c <main+0x39c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	3301      	adds	r3, #1
 80006c8:	4a20      	ldr	r2, [pc, #128]	@ (800074c <main+0x39c>)
 80006ca:	6013      	str	r3, [r2, #0]
			// Enter into jog mode (XY movement with joystick)
			enter_jog_mode();
 80006cc:	f001 f866 	bl	800179c <enter_jog_mode>
			// Wait for the user to release the button
			wait_for_button_release();
 80006d0:	f001 fa4e 	bl	8001b70 <wait_for_button_release>
			wait_for_button_press();
#endif


			//Start descending until touch with substrate
			head_touched = false;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <main+0x3a4>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, -1);
 80006da:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80006de:	2100      	movs	r1, #0
 80006e0:	202c      	movs	r0, #44	@ 0x2c
 80006e2:	f001 f9d7 	bl	8001a94 <write_float_to_slave>
			while(!head_touched){__NOP();};
 80006e6:	e04c      	b.n	8000782 <main+0x3d2>
 80006e8:	240005c4 	.word	0x240005c4
 80006ec:	240005c8 	.word	0x240005c8
 80006f0:	240005cc 	.word	0x240005cc
 80006f4:	240005d0 	.word	0x240005d0
 80006f8:	240005d4 	.word	0x240005d4
 80006fc:	240005d8 	.word	0x240005d8
 8000700:	240005dc 	.word	0x240005dc
 8000704:	240005e0 	.word	0x240005e0
 8000708:	240005f8 	.word	0x240005f8
 800070c:	240005e8 	.word	0x240005e8
 8000710:	240005e9 	.word	0x240005e9
 8000714:	24000590 	.word	0x24000590
 8000718:	24000594 	.word	0x24000594
 800071c:	24000598 	.word	0x24000598
 8000720:	2400059c 	.word	0x2400059c
 8000724:	240005e4 	.word	0x240005e4
 8000728:	240004f8 	.word	0x240004f8
 800072c:	24000544 	.word	0x24000544
 8000730:	240005c0 	.word	0x240005c0
 8000734:	24000240 	.word	0x24000240
 8000738:	240002b0 	.word	0x240002b0
 800073c:	58021400 	.word	0x58021400
 8000740:	00000000 	.word	0x00000000
 8000744:	240005ec 	.word	0x240005ec
 8000748:	24000320 	.word	0x24000320
 800074c:	240005a0 	.word	0x240005a0
 8000750:	24000000 	.word	0x24000000
 8000754:	240005b0 	.word	0x240005b0
 8000758:	240005b1 	.word	0x240005b1
 800075c:	24000674 	.word	0x24000674
 8000760:	2400041c 	.word	0x2400041c
 8000764:	2400067c 	.word	0x2400067c
 8000768:	240005ac 	.word	0x240005ac
 800076c:	24000008 	.word	0x24000008
 8000770:	24000014 	.word	0x24000014
 8000774:	58020400 	.word	0x58020400
 8000778:	2400000c 	.word	0x2400000c
 800077c:	24000004 	.word	0x24000004
 8000780:	bf00      	nop
 8000782:	4b42      	ldr	r3, [pc, #264]	@ (800088c <main+0x4dc>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	f083 0301 	eor.w	r3, r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d1f7      	bne.n	8000780 <main+0x3d0>

			stage++; //For debug; TODO: remove
 8000790:	4b3f      	ldr	r3, [pc, #252]	@ (8000890 <main+0x4e0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	4a3e      	ldr	r2, [pc, #248]	@ (8000890 <main+0x4e0>)
 8000798:	6013      	str	r3, [r2, #0]
			//Lower the head a bit more
			data_ready = false;
 800079a:	4b3e      	ldr	r3, [pc, #248]	@ (8000894 <main+0x4e4>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
			prepare_READ_packet(tx_buffer, VIRTUAL_MEM_POSITION_MEAS);
 80007a0:	2103      	movs	r1, #3
 80007a2:	483d      	ldr	r0, [pc, #244]	@ (8000898 <main+0x4e8>)
 80007a4:	f001 fafc 	bl	8001da0 <prepare_READ_packet>
			HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_MOTOR_Z, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 80007a8:	2364      	movs	r3, #100	@ 0x64
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2307      	movs	r3, #7
 80007ae:	4a3a      	ldr	r2, [pc, #232]	@ (8000898 <main+0x4e8>)
 80007b0:	212c      	movs	r1, #44	@ 0x2c
 80007b2:	483a      	ldr	r0, [pc, #232]	@ (800089c <main+0x4ec>)
 80007b4:	f005 fbfa 	bl	8005fac <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive_IT(&hi2c1, ADDRESS_MOTOR_Z, rx_buffer, MAX_COMM_BUFFER_SIZE);
 80007b8:	2307      	movs	r3, #7
 80007ba:	4a39      	ldr	r2, [pc, #228]	@ (80008a0 <main+0x4f0>)
 80007bc:	212c      	movs	r1, #44	@ 0x2c
 80007be:	4837      	ldr	r0, [pc, #220]	@ (800089c <main+0x4ec>)
 80007c0:	f005 fd0c 	bl	80061dc <HAL_I2C_Master_Receive_IT>
			while(!data_ready){__NOP();};
 80007c4:	e000      	b.n	80007c8 <main+0x418>
 80007c6:	bf00      	nop
 80007c8:	4b32      	ldr	r3, [pc, #200]	@ (8000894 <main+0x4e4>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	f083 0301 	eor.w	r3, r3, #1
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f7      	bne.n	80007c6 <main+0x416>
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, read_position - further_descent);
 80007d6:	4b33      	ldr	r3, [pc, #204]	@ (80008a4 <main+0x4f4>)
 80007d8:	ed93 7a00 	vldr	s14, [r3]
 80007dc:	4b32      	ldr	r3, [pc, #200]	@ (80008a8 <main+0x4f8>)
 80007de:	edd3 7a00 	vldr	s15, [r3]
 80007e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007e6:	eeb0 0a67 	vmov.f32	s0, s15
 80007ea:	2100      	movs	r1, #0
 80007ec:	202c      	movs	r0, #44	@ 0x2c
 80007ee:	f001 f951 	bl	8001a94 <write_float_to_slave>

			stage++; //For debug; TODO: remove
 80007f2:	4b27      	ldr	r3, [pc, #156]	@ (8000890 <main+0x4e0>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	3301      	adds	r3, #1
 80007f8:	4a25      	ldr	r2, [pc, #148]	@ (8000890 <main+0x4e0>)
 80007fa:	6013      	str	r3, [r2, #0]
			//Perform the bond
			perform_bond(bond_time_2);
 80007fc:	4b2b      	ldr	r3, [pc, #172]	@ (80008ac <main+0x4fc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f001 f98b 	bl	8001b1c <perform_bond>
			HAL_GPIO_WritePin(SOLENOID_TEAR_2_GPIO_Port, SOLENOID_TEAR_2_Pin, GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	2110      	movs	r1, #16
 800080a:	4829      	ldr	r0, [pc, #164]	@ (80008b0 <main+0x500>)
 800080c:	f005 fafe 	bl	8005e0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000816:	4827      	ldr	r0, [pc, #156]	@ (80008b4 <main+0x504>)
 8000818:	f005 faf8 	bl	8005e0c <HAL_GPIO_WritePin>

			HAL_Delay(1000);
 800081c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000820:	f002 f850 	bl	80028c4 <HAL_Delay>

			stage++; //For debug; TODO: remove
 8000824:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <main+0x4e0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	3301      	adds	r3, #1
 800082a:	4a19      	ldr	r2, [pc, #100]	@ (8000890 <main+0x4e0>)
 800082c:	6013      	str	r3, [r2, #0]
			// Close clamp solenoid
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2108      	movs	r1, #8
 8000832:	481f      	ldr	r0, [pc, #124]	@ (80008b0 <main+0x500>)
 8000834:	f005 faea 	bl	8005e0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SOLENOID_TEAR_2_GPIO_Port, SOLENOID_TEAR_2_Pin, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	2110      	movs	r1, #16
 800083c:	481c      	ldr	r0, [pc, #112]	@ (80008b0 <main+0x500>)
 800083e:	f005 fae5 	bl	8005e0c <HAL_GPIO_WritePin>

			stage++; //For debug; TODO: remove
 8000842:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <main+0x4e0>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	3301      	adds	r3, #1
 8000848:	4a11      	ldr	r2, [pc, #68]	@ (8000890 <main+0x4e0>)
 800084a:	6013      	str	r3, [r2, #0]
			// Go back up
			head_touched = false;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <main+0x4dc>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, 0);
 8000852:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 80008b8 <main+0x508>
 8000856:	2100      	movs	r1, #0
 8000858:	202c      	movs	r0, #44	@ 0x2c
 800085a:	f001 f91b 	bl	8001a94 <write_float_to_slave>

			HAL_Delay(1000);
 800085e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000862:	f002 f82f 	bl	80028c4 <HAL_Delay>

			HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800086c:	4811      	ldr	r0, [pc, #68]	@ (80008b4 <main+0x504>)
 800086e:	f005 facd 	bl	8005e0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2108      	movs	r1, #8
 8000876:	480e      	ldr	r0, [pc, #56]	@ (80008b0 <main+0x500>)
 8000878:	f005 fac8 	bl	8005e0c <HAL_GPIO_WritePin>

			fine_adjustment = 0;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <main+0x50c>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
		//HAL_I2C_Master_Seq_Receive_IT(&hi2c1, ADDRESS_MOTOR_X, rx_buffer, MAX_COMM_BUFFER_SIZE, I2C_FIRST_AND_LAST_FRAME);

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_Delay(100);
 8000882:	2064      	movs	r0, #100	@ 0x64
 8000884:	f002 f81e 	bl	80028c4 <HAL_Delay>
		debug_head_touched = HAL_GPIO_ReadPin(PLATFORM_TOUCH_GPIO_Port, PLATFORM_TOUCH_Pin);
 8000888:	e652      	b.n	8000530 <main+0x180>
 800088a:	bf00      	nop
 800088c:	240005b0 	.word	0x240005b0
 8000890:	240005a0 	.word	0x240005a0
 8000894:	240005b1 	.word	0x240005b1
 8000898:	24000674 	.word	0x24000674
 800089c:	2400041c 	.word	0x2400041c
 80008a0:	2400067c 	.word	0x2400067c
 80008a4:	240005ac 	.word	0x240005ac
 80008a8:	24000008 	.word	0x24000008
 80008ac:	24000018 	.word	0x24000018
 80008b0:	58020400 	.word	0x58020400
 80008b4:	58020800 	.word	0x58020800
 80008b8:	00000000 	.word	0x00000000
 80008bc:	240005e4 	.word	0x240005e4

080008c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b09c      	sub	sp, #112	@ 0x70
 80008c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ca:	224c      	movs	r2, #76	@ 0x4c
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f00e fdf9 	bl	800f4c6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2220      	movs	r2, #32
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f00e fdf3 	bl	800f4c6 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008e0:	2002      	movs	r0, #2
 80008e2:	f007 fd65 	bl	80083b0 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000998 <SystemClock_Config+0xd8>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4a2a      	ldr	r2, [pc, #168]	@ (8000998 <SystemClock_Config+0xd8>)
 80008f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008f4:	6193      	str	r3, [r2, #24]
 80008f6:	4b28      	ldr	r3, [pc, #160]	@ (8000998 <SystemClock_Config+0xd8>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000902:	bf00      	nop
 8000904:	4b24      	ldr	r3, [pc, #144]	@ (8000998 <SystemClock_Config+0xd8>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800090c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000910:	d1f8      	bne.n	8000904 <SystemClock_Config+0x44>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000912:	2302      	movs	r3, #2
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000916:	2301      	movs	r3, #1
 8000918:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 800091a:	2340      	movs	r3, #64	@ 0x40
 800091c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2302      	movs	r3, #2
 8000920:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000922:	2300      	movs	r3, #0
 8000924:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000926:	2304      	movs	r3, #4
 8000928:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 800092a:	230c      	movs	r3, #12
 800092c:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 800092e:	2301      	movs	r3, #1
 8000930:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000932:	2304      	movs	r3, #4
 8000934:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000936:	2302      	movs	r3, #2
 8000938:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800093a:	230c      	movs	r3, #12
 800093c:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800093e:	2300      	movs	r3, #0
 8000940:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800094a:	4618      	mov	r0, r3
 800094c:	f007 fd6a 	bl	8008424 <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000956:	f001 f9dd 	bl	8001d14 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	233f      	movs	r3, #63	@ 0x3f
 800095c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2303      	movs	r3, #3
 8000960:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800096a:	2340      	movs	r3, #64	@ 0x40
 800096c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800096e:	2340      	movs	r3, #64	@ 0x40
 8000970:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000976:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000978:	2340      	movs	r3, #64	@ 0x40
 800097a:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2102      	movs	r1, #2
 8000980:	4618      	mov	r0, r3
 8000982:	f008 f929 	bl	8008bd8 <HAL_RCC_ClockConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0xd0>
	{
		Error_Handler();
 800098c:	f001 f9c2 	bl	8001d14 <Error_Handler>
	}
}
 8000990:	bf00      	nop
 8000992:	3770      	adds	r7, #112	@ 0x70
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	58024800 	.word	0x58024800

0800099c <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b0ae      	sub	sp, #184	@ 0xb8
 80009a0:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a2:	463b      	mov	r3, r7
 80009a4:	22b8      	movs	r2, #184	@ 0xb8
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f00e fd8c 	bl	800f4c6 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009ae:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009b2:	f04f 0300 	mov.w	r3, #0
 80009b6:	e9c7 2300 	strd	r2, r3, [r7]
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 80009ba:	2304      	movs	r3, #4
 80009bc:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 80009be:	230c      	movs	r3, #12
 80009c0:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009ce:	23c0      	movs	r3, #192	@ 0xc0
 80009d0:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 80009d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e2:	463b      	mov	r3, r7
 80009e4:	4618      	mov	r0, r3
 80009e6:	f008 fc6d 	bl	80092c4 <HAL_RCCEx_PeriphCLKConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <PeriphCommonClock_Config+0x58>
	{
		Error_Handler();
 80009f0:	f001 f990 	bl	8001d14 <Error_Handler>
	}
}
 80009f4:	bf00      	nop
 80009f6:	37b8      	adds	r7, #184	@ 0xb8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	@ 0x30
 8000a00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8000a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2224      	movs	r2, #36	@ 0x24
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f00e fd56 	bl	800f4c6 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000a1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a1c:	4a32      	ldr	r2, [pc, #200]	@ (8000ae8 <MX_ADC1_Init+0xec>)
 8000a1e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a20:	4b30      	ldr	r3, [pc, #192]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000a26:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a28:	221c      	movs	r2, #28
 8000a2a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a32:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a34:	2204      	movs	r2, #4
 8000a36:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000a3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8000a44:	4b27      	ldr	r3, [pc, #156]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a52:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a58:	4b22      	ldr	r3, [pc, #136]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc1.Init.OversamplingMode = DISABLE;
 8000a70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	hadc1.Init.Oversampling.Ratio = 1;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a7e:	4819      	ldr	r0, [pc, #100]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a80:	f002 fa94 	bl	8002fac <HAL_ADC_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_ADC1_Init+0x92>
	{
		Error_Handler();
 8000a8a:	f001 f943 	bl	8001d14 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	4812      	ldr	r0, [pc, #72]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000a9a:	f004 f935 	bl	8004d08 <HAL_ADCEx_MultiModeConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 8000aa4:	f001 f936 	bl	8001d14 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <MX_ADC1_Init+0xf0>)
 8000aaa:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aac:	2306      	movs	r3, #6
 8000aae:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ab4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ab8:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aba:	2304      	movs	r3, #4
 8000abc:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_ADC1_Init+0xe8>)
 8000ace:	f003 f8c3 	bl	8003c58 <HAL_ADC_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_ADC1_Init+0xe0>
	{
		Error_Handler();
 8000ad8:	f001 f91c 	bl	8001d14 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3730      	adds	r7, #48	@ 0x30
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	24000240 	.word	0x24000240
 8000ae8:	40022000 	.word	0x40022000
 8000aec:	08600004 	.word	0x08600004

08000af0 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	@ 0x28
 8000af4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2224      	movs	r2, #36	@ 0x24
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f00e fce2 	bl	800f4c6 <memset>

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8000b02:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b04:	4a2c      	ldr	r2, [pc, #176]	@ (8000bb8 <MX_ADC2_Init+0xc8>)
 8000b06:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b08:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b0e:	4b29      	ldr	r3, [pc, #164]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b10:	2208      	movs	r2, #8
 8000b12:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b14:	4b27      	ldr	r3, [pc, #156]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b1a:	4b26      	ldr	r3, [pc, #152]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	615a      	str	r2, [r3, #20]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b20:	4b24      	ldr	r3, [pc, #144]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	761a      	strb	r2, [r3, #24]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000b26:	4b23      	ldr	r3, [pc, #140]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	765a      	strb	r2, [r3, #25]
	hadc2.Init.NbrOfConversion = 1;
 8000b2c:	4b21      	ldr	r3, [pc, #132]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	61da      	str	r2, [r3, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b32:	4b20      	ldr	r3, [pc, #128]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b40:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b46:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b4c:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b52:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc2.Init.OversamplingMode = DISABLE;
 8000b58:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	hadc2.Init.Oversampling.Ratio = 1;
 8000b60:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b66:	4813      	ldr	r0, [pc, #76]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b68:	f002 fa20 	bl	8002fac <HAL_ADC_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_ADC2_Init+0x86>
	{
		Error_Handler();
 8000b72:	f001 f8cf 	bl	8001d14 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000b76:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <MX_ADC2_Init+0xcc>)
 8000b78:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b7a:	2306      	movs	r3, #6
 8000b7c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b82:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b86:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4806      	ldr	r0, [pc, #24]	@ (8000bb4 <MX_ADC2_Init+0xc4>)
 8000b9c:	f003 f85c 	bl	8003c58 <HAL_ADC_ConfigChannel>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_ADC2_Init+0xba>
	{
		Error_Handler();
 8000ba6:	f001 f8b5 	bl	8001d14 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	@ 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	240002b0 	.word	0x240002b0
 8000bb8:	40022100 	.word	0x40022100
 8000bbc:	14f00020 	.word	0x14f00020

08000bc0 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	@ 0x28
 8000bc4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2224      	movs	r2, #36	@ 0x24
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00e fc7a 	bl	800f4c6 <memset>

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 8000bd2:	4b32      	ldr	r3, [pc, #200]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000bd4:	4a32      	ldr	r2, [pc, #200]	@ (8000ca0 <MX_ADC3_Init+0xe0>)
 8000bd6:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bd8:	4b30      	ldr	r3, [pc, #192]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_8B;
 8000bde:	4b2f      	ldr	r3, [pc, #188]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000be0:	221c      	movs	r2, #28
 8000be2:	609a      	str	r2, [r3, #8]
	hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000be4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bea:	4b2c      	ldr	r3, [pc, #176]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 8000bf6:	4b29      	ldr	r3, [pc, #164]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	761a      	strb	r2, [r3, #24]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8000bfc:	4b27      	ldr	r3, [pc, #156]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	765a      	strb	r2, [r3, #25]
	hadc3.Init.NbrOfConversion = 1;
 8000c02:	4b26      	ldr	r3, [pc, #152]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	61da      	str	r2, [r3, #28]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c08:	4b24      	ldr	r3, [pc, #144]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c10:	4b22      	ldr	r3, [pc, #136]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c16:	4b21      	ldr	r3, [pc, #132]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000c24:	4b1d      	ldr	r3, [pc, #116]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c36:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc3.Init.OversamplingMode = DISABLE;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 8000c44:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	649a      	str	r2, [r3, #72]	@ 0x48
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c4a:	4814      	ldr	r0, [pc, #80]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000c4c:	f002 f9ae 	bl	8002fac <HAL_ADC_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC3_Init+0x9a>
	{
		Error_Handler();
 8000c56:	f001 f85d 	bl	8001d14 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000c5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <MX_ADC3_Init+0xe4>)
 8000c5c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5e:	2306      	movs	r3, #6
 8000c60:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c66:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c6a:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4619      	mov	r1, r3
 8000c82:	4806      	ldr	r0, [pc, #24]	@ (8000c9c <MX_ADC3_Init+0xdc>)
 8000c84:	f002 ffe8 	bl	8003c58 <HAL_ADC_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_ADC3_Init+0xd2>
	{
		Error_Handler();
 8000c8e:	f001 f841 	bl	8001d14 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	@ 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	24000320 	.word	0x24000320
 8000ca0:	58026000 	.word	0x58026000
 8000ca4:	04300002 	.word	0x04300002

08000ca8 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000cac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <MX_CRC_Init+0x3c>)
 8000cae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce8 <MX_CRC_Init+0x40>)
 8000cb0:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <MX_CRC_Init+0x3c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <MX_CRC_Init+0x3c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <MX_CRC_Init+0x3c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <MX_CRC_Init+0x3c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <MX_CRC_Init+0x3c>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <MX_CRC_Init+0x3c>)
 8000cd2:	f004 fa83 	bl	80051dc <HAL_CRC_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 8000cdc:	f001 f81a 	bl	8001d14 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	24000390 	.word	0x24000390
 8000ce8:	58024c00 	.word	0x58024c00

08000cec <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8000cf0:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <MX_DMA2D_Init+0x6c>)
 8000cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8000d5c <MX_DMA2D_Init+0x70>)
 8000cf4:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8000cf6:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <MX_DMA2D_Init+0x6c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000cfc:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <MX_DMA2D_Init+0x6c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <MX_DMA2D_Init+0x6c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8000d08:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <MX_DMA2D_Init+0x6c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	645a      	str	r2, [r3, #68]	@ 0x44
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000d0e:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <MX_DMA2D_Init+0x6c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	649a      	str	r2, [r3, #72]	@ 0x48
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d14:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <MX_DMA2D_Init+0x6c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	64da      	str	r2, [r3, #76]	@ 0x4c
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <MX_DMA2D_Init+0x6c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	651a      	str	r2, [r3, #80]	@ 0x50
	hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000d20:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <MX_DMA2D_Init+0x6c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	655a      	str	r2, [r3, #84]	@ 0x54
	hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <MX_DMA2D_Init+0x6c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	659a      	str	r2, [r3, #88]	@ 0x58
	hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <MX_DMA2D_Init+0x6c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	65da      	str	r2, [r3, #92]	@ 0x5c
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d32:	4809      	ldr	r0, [pc, #36]	@ (8000d58 <MX_DMA2D_Init+0x6c>)
 8000d34:	f004 fd98 	bl	8005868 <HAL_DMA2D_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 8000d3e:	f000 ffe9 	bl	8001d14 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d42:	2101      	movs	r1, #1
 8000d44:	4804      	ldr	r0, [pc, #16]	@ (8000d58 <MX_DMA2D_Init+0x6c>)
 8000d46:	f004 fdf3 	bl	8005930 <HAL_DMA2D_ConfigLayer>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_DMA2D_Init+0x68>
	{
		Error_Handler();
 8000d50:	f000 ffe0 	bl	8001d14 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	240003b4 	.word	0x240003b4
 8000d5c:	52001000 	.word	0x52001000

08000d60 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd4 <MX_I2C1_Init+0x74>)
 8000d66:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd8 <MX_I2C1_Init+0x78>)
 8000d68:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10B0DCFB;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <MX_I2C1_Init+0x74>)
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ddc <MX_I2C1_Init+0x7c>)
 8000d6e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000d70:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <MX_I2C1_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d76:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <MX_I2C1_Init+0x74>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <MX_I2C1_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000d82:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <MX_I2C1_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <MX_I2C1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <MX_I2C1_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <MX_I2C1_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d9a:	480e      	ldr	r0, [pc, #56]	@ (8000dd4 <MX_I2C1_Init+0x74>)
 8000d9c:	f005 f86a 	bl	8005e74 <HAL_I2C_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8000da6:	f000 ffb5 	bl	8001d14 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4809      	ldr	r0, [pc, #36]	@ (8000dd4 <MX_I2C1_Init+0x74>)
 8000dae:	f007 fa67 	bl	8008280 <HAL_I2CEx_ConfigAnalogFilter>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8000db8:	f000 ffac 	bl	8001d14 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4805      	ldr	r0, [pc, #20]	@ (8000dd4 <MX_I2C1_Init+0x74>)
 8000dc0:	f007 faa9 	bl	8008316 <HAL_I2CEx_ConfigDigitalFilter>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8000dca:	f000 ffa3 	bl	8001d14 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2400041c 	.word	0x2400041c
 8000dd8:	40005400 	.word	0x40005400
 8000ddc:	10b0dcfb 	.word	0x10b0dcfb

08000de0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000de4:	4b28      	ldr	r3, [pc, #160]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000de6:	4a29      	ldr	r2, [pc, #164]	@ (8000e8c <MX_SPI1_Init+0xac>)
 8000de8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dea:	4b27      	ldr	r3, [pc, #156]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000dec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000df0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000df2:	4b25      	ldr	r3, [pc, #148]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000df4:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000df8:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dfa:	4b23      	ldr	r3, [pc, #140]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e00:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e06:	4b20      	ldr	r3, [pc, #128]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e0e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e12:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000e14:	4b1c      	ldr	r3, [pc, #112]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e16:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000e1a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e22:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e28:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e34:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e3a:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e42:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	645a      	str	r2, [r3, #68]	@ 0x44
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e60:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	659a      	str	r2, [r3, #88]	@ 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <MX_SPI1_Init+0xa8>)
 8000e74:	f00a fe0c 	bl	800ba90 <HAL_SPI_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_SPI1_Init+0xa2>
	{
		Error_Handler();
 8000e7e:	f000 ff49 	bl	8001d14 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	24000470 	.word	0x24000470
 8000e8c:	40013000 	.word	0x40013000

08000e90 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08e      	sub	sp, #56	@ 0x38
 8000e94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]
 8000ebe:	615a      	str	r2, [r3, #20]
 8000ec0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8000f74 <MX_TIM2_Init+0xe4>)
 8000ec4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ec8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 19200-1;
 8000eca:	4b2a      	ldr	r3, [pc, #168]	@ (8000f74 <MX_TIM2_Init+0xe4>)
 8000ecc:	f644 22ff 	movw	r2, #19199	@ 0x4aff
 8000ed0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed2:	4b28      	ldr	r3, [pc, #160]	@ (8000f74 <MX_TIM2_Init+0xe4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000-1;
 8000ed8:	4b26      	ldr	r3, [pc, #152]	@ (8000f74 <MX_TIM2_Init+0xe4>)
 8000eda:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000ede:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee0:	4b24      	ldr	r3, [pc, #144]	@ (8000f74 <MX_TIM2_Init+0xe4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee6:	4b23      	ldr	r3, [pc, #140]	@ (8000f74 <MX_TIM2_Init+0xe4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eec:	4821      	ldr	r0, [pc, #132]	@ (8000f74 <MX_TIM2_Init+0xe4>)
 8000eee:	f00b f9ca 	bl	800c286 <HAL_TIM_Base_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM2_Init+0x6c>
	{
		Error_Handler();
 8000ef8:	f000 ff0c 	bl	8001d14 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000efc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f00:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f06:	4619      	mov	r1, r3
 8000f08:	481a      	ldr	r0, [pc, #104]	@ (8000f74 <MX_TIM2_Init+0xe4>)
 8000f0a:	f00b ff0d 	bl	800cd28 <HAL_TIM_ConfigClockSource>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM2_Init+0x88>
	{
		Error_Handler();
 8000f14:	f000 fefe 	bl	8001d14 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000f18:	4816      	ldr	r0, [pc, #88]	@ (8000f74 <MX_TIM2_Init+0xe4>)
 8000f1a:	f00b fa91 	bl	800c440 <HAL_TIM_OC_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM2_Init+0x98>
	{
		Error_Handler();
 8000f24:	f000 fef6 	bl	8001d14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	480f      	ldr	r0, [pc, #60]	@ (8000f74 <MX_TIM2_Init+0xe4>)
 8000f38:	f00c fc5c 	bl	800d7f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM2_Init+0xb6>
	{
		Error_Handler();
 8000f42:	f000 fee7 	bl	8001d14 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f56:	463b      	mov	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_TIM2_Init+0xe4>)
 8000f5e:	f00b fd55 	bl	800ca0c <HAL_TIM_OC_ConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM2_Init+0xdc>
	{
		Error_Handler();
 8000f68:	f000 fed4 	bl	8001d14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	3738      	adds	r7, #56	@ 0x38
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	240004f8 	.word	0x240004f8

08000f78 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08e      	sub	sp, #56	@ 0x38
 8000f7c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]
 8000fa6:	615a      	str	r2, [r3, #20]
 8000fa8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000faa:	4b2d      	ldr	r3, [pc, #180]	@ (8001060 <MX_TIM3_Init+0xe8>)
 8000fac:	4a2d      	ldr	r2, [pc, #180]	@ (8001064 <MX_TIM3_Init+0xec>)
 8000fae:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 192-1;
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001060 <MX_TIM3_Init+0xe8>)
 8000fb2:	22bf      	movs	r2, #191	@ 0xbf
 8000fb4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001060 <MX_TIM3_Init+0xe8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000-1;
 8000fbc:	4b28      	ldr	r3, [pc, #160]	@ (8001060 <MX_TIM3_Init+0xe8>)
 8000fbe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fc2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc4:	4b26      	ldr	r3, [pc, #152]	@ (8001060 <MX_TIM3_Init+0xe8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fca:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <MX_TIM3_Init+0xe8>)
 8000fcc:	2280      	movs	r2, #128	@ 0x80
 8000fce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fd0:	4823      	ldr	r0, [pc, #140]	@ (8001060 <MX_TIM3_Init+0xe8>)
 8000fd2:	f00b f958 	bl	800c286 <HAL_TIM_Base_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 8000fdc:	f000 fe9a 	bl	8001d14 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fe6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fea:	4619      	mov	r1, r3
 8000fec:	481c      	ldr	r0, [pc, #112]	@ (8001060 <MX_TIM3_Init+0xe8>)
 8000fee:	f00b fe9b 	bl	800cd28 <HAL_TIM_ConfigClockSource>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 8000ff8:	f000 fe8c 	bl	8001d14 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ffc:	4818      	ldr	r0, [pc, #96]	@ (8001060 <MX_TIM3_Init+0xe8>)
 8000ffe:	f00b fa80 	bl	800c502 <HAL_TIM_PWM_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 8001008:	f000 fe84 	bl	8001d14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4619      	mov	r1, r3
 800101a:	4811      	ldr	r0, [pc, #68]	@ (8001060 <MX_TIM3_Init+0xe8>)
 800101c:	f00c fbea 	bl	800d7f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 8001026:	f000 fe75 	bl	8001d14 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102a:	2360      	movs	r3, #96	@ 0x60
 800102c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	2208      	movs	r2, #8
 800103e:	4619      	mov	r1, r3
 8001040:	4807      	ldr	r0, [pc, #28]	@ (8001060 <MX_TIM3_Init+0xe8>)
 8001042:	f00b fd5d 	bl	800cb00 <HAL_TIM_PWM_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 800104c:	f000 fe62 	bl	8001d14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001050:	4803      	ldr	r0, [pc, #12]	@ (8001060 <MX_TIM3_Init+0xe8>)
 8001052:	f001 f967 	bl	8002324 <HAL_TIM_MspPostInit>

}
 8001056:	bf00      	nop
 8001058:	3738      	adds	r7, #56	@ 0x38
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	24000544 	.word	0x24000544
 8001064:	40000400 	.word	0x40000400

08001068 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	@ 0x30
 800106c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800107e:	4bbe      	ldr	r3, [pc, #760]	@ (8001378 <MX_GPIO_Init+0x310>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001084:	4abc      	ldr	r2, [pc, #752]	@ (8001378 <MX_GPIO_Init+0x310>)
 8001086:	f043 0310 	orr.w	r3, r3, #16
 800108a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108e:	4bba      	ldr	r3, [pc, #744]	@ (8001378 <MX_GPIO_Init+0x310>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	61bb      	str	r3, [r7, #24]
 800109a:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800109c:	4bb6      	ldr	r3, [pc, #728]	@ (8001378 <MX_GPIO_Init+0x310>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a2:	4ab5      	ldr	r2, [pc, #724]	@ (8001378 <MX_GPIO_Init+0x310>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ac:	4bb2      	ldr	r3, [pc, #712]	@ (8001378 <MX_GPIO_Init+0x310>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80010ba:	4baf      	ldr	r3, [pc, #700]	@ (8001378 <MX_GPIO_Init+0x310>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c0:	4aad      	ldr	r2, [pc, #692]	@ (8001378 <MX_GPIO_Init+0x310>)
 80010c2:	f043 0320 	orr.w	r3, r3, #32
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ca:	4bab      	ldr	r3, [pc, #684]	@ (8001378 <MX_GPIO_Init+0x310>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4ba7      	ldr	r3, [pc, #668]	@ (8001378 <MX_GPIO_Init+0x310>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010de:	4aa6      	ldr	r2, [pc, #664]	@ (8001378 <MX_GPIO_Init+0x310>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e8:	4ba3      	ldr	r3, [pc, #652]	@ (8001378 <MX_GPIO_Init+0x310>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	4ba0      	ldr	r3, [pc, #640]	@ (8001378 <MX_GPIO_Init+0x310>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fc:	4a9e      	ldr	r2, [pc, #632]	@ (8001378 <MX_GPIO_Init+0x310>)
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001106:	4b9c      	ldr	r3, [pc, #624]	@ (8001378 <MX_GPIO_Init+0x310>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001114:	4b98      	ldr	r3, [pc, #608]	@ (8001378 <MX_GPIO_Init+0x310>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111a:	4a97      	ldr	r2, [pc, #604]	@ (8001378 <MX_GPIO_Init+0x310>)
 800111c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001124:	4b94      	ldr	r3, [pc, #592]	@ (8001378 <MX_GPIO_Init+0x310>)
 8001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	4b91      	ldr	r3, [pc, #580]	@ (8001378 <MX_GPIO_Init+0x310>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001138:	4a8f      	ldr	r2, [pc, #572]	@ (8001378 <MX_GPIO_Init+0x310>)
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001142:	4b8d      	ldr	r3, [pc, #564]	@ (8001378 <MX_GPIO_Init+0x310>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001156:	4889      	ldr	r0, [pc, #548]	@ (800137c <MX_GPIO_Init+0x314>)
 8001158:	f004 fe58 	bl	8005e0c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, SOLENOID_LOCK_Pin|LAMP_Pin|ULTRASONIC_ENABLE_Pin, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f241 0103 	movw	r1, #4099	@ 0x1003
 8001162:	4887      	ldr	r0, [pc, #540]	@ (8001380 <MX_GPIO_Init+0x318>)
 8001164:	f004 fe52 	bl	8005e0c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2108      	movs	r1, #8
 800116c:	4885      	ldr	r0, [pc, #532]	@ (8001384 <MX_GPIO_Init+0x31c>)
 800116e:	f004 fe4d 	bl	8005e0c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SOLENOID_CLAMP_Pin|SOLENOID_TEAR_2_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2118      	movs	r1, #24
 8001176:	4884      	ldr	r0, [pc, #528]	@ (8001388 <MX_GPIO_Init+0x320>)
 8001178:	f004 fe48 	bl	8005e0c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PE2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800117c:	2304      	movs	r3, #4
 800117e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800118c:	2309      	movs	r3, #9
 800118e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	487d      	ldr	r0, [pc, #500]	@ (800138c <MX_GPIO_Init+0x324>)
 8001198:	f004 fc78 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pins : HEATER_TEMP_Pin TOUCHSCREEN_Y_Pin TOUCHSCREEN_X_Pin */
	GPIO_InitStruct.Pin = HEATER_TEMP_Pin|TOUCHSCREEN_Y_Pin|TOUCHSCREEN_X_Pin;
 800119c:	230b      	movs	r3, #11
 800119e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a0:	2303      	movs	r3, #3
 80011a2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	4877      	ldr	r0, [pc, #476]	@ (800138c <MX_GPIO_Init+0x324>)
 80011b0:	f004 fc6c 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pins : PE4 PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80011b4:	2370      	movs	r3, #112	@ 0x70
 80011b6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80011c4:	230d      	movs	r3, #13
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	486f      	ldr	r0, [pc, #444]	@ (800138c <MX_GPIO_Init+0x324>)
 80011d0:	f004 fc5c 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : SOLENOID_TEAR_1_Pin */
	GPIO_InitStruct.Pin = SOLENOID_TEAR_1_Pin;
 80011d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011da:	2301      	movs	r3, #1
 80011dc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(SOLENOID_TEAR_1_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4619      	mov	r1, r3
 80011ec:	4863      	ldr	r0, [pc, #396]	@ (800137c <MX_GPIO_Init+0x314>)
 80011ee:	f004 fc4d 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pins : SOLENOID_LOCK_Pin LAMP_Pin ULTRASONIC_ENABLE_Pin */
	GPIO_InitStruct.Pin = SOLENOID_LOCK_Pin|LAMP_Pin|ULTRASONIC_ENABLE_Pin;
 80011f2:	f241 0303 	movw	r3, #4099	@ 0x1003
 80011f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	485d      	ldr	r0, [pc, #372]	@ (8001380 <MX_GPIO_Init+0x318>)
 800120c:	f004 fc3e 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : HEATER_Pin */
	GPIO_InitStruct.Pin = HEATER_Pin;
 8001210:	2304      	movs	r3, #4
 8001212:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001214:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001218:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	4856      	ldr	r0, [pc, #344]	@ (8001380 <MX_GPIO_Init+0x318>)
 8001226:	f004 fc31 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PLATFORM_TOUCH_Pin */
	GPIO_InitStruct.Pin = PLATFORM_TOUCH_Pin;
 800122a:	2308      	movs	r3, #8
 800122c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800122e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001232:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001234:	2301      	movs	r3, #1
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(PLATFORM_TOUCH_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	4850      	ldr	r0, [pc, #320]	@ (8001380 <MX_GPIO_Init+0x318>)
 8001240:	f004 fc24 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULTRASONIC_CURRENT_Pin ULTRASONIC_VOLTAGE_Pin */
	GPIO_InitStruct.Pin = ULTRASONIC_CURRENT_Pin|ULTRASONIC_VOLTAGE_Pin;
 8001244:	2330      	movs	r3, #48	@ 0x30
 8001246:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001248:	2303      	movs	r3, #3
 800124a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	484a      	ldr	r0, [pc, #296]	@ (8001380 <MX_GPIO_Init+0x318>)
 8001258:	f004 fc18 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pins : PF6 PF8 PF9 */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 800125c:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8001260:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800126e:	230a      	movs	r3, #10
 8001270:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	4841      	ldr	r0, [pc, #260]	@ (8001380 <MX_GPIO_Init+0x318>)
 800127a:	f004 fc07 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_START_BOND_Pin */
	GPIO_InitStruct.Pin = BUTTON_START_BOND_Pin;
 800127e:	2380      	movs	r3, #128	@ 0x80
 8001280:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001286:	2301      	movs	r3, #1
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(BUTTON_START_BOND_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4619      	mov	r1, r3
 8001290:	483b      	ldr	r0, [pc, #236]	@ (8001380 <MX_GPIO_Init+0x318>)
 8001292:	f004 fbfb 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PF10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800129a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80012a8:	2309      	movs	r3, #9
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4833      	ldr	r0, [pc, #204]	@ (8001380 <MX_GPIO_Init+0x318>)
 80012b4:	f004 fbea 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 80012c8:	230b      	movs	r3, #11
 80012ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	482a      	ldr	r0, [pc, #168]	@ (800137c <MX_GPIO_Init+0x314>)
 80012d4:	f004 fbda 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012d8:	2302      	movs	r3, #2
 80012da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80012e8:	230a      	movs	r3, #10
 80012ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	4822      	ldr	r0, [pc, #136]	@ (800137c <MX_GPIO_Init+0x314>)
 80012f4:	f004 fbca 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012f8:	2304      	movs	r3, #4
 80012fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 8001308:	2304      	movs	r3, #4
 800130a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	481a      	ldr	r0, [pc, #104]	@ (800137c <MX_GPIO_Init+0x314>)
 8001314:	f004 fbba 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001318:	2302      	movs	r3, #2
 800131a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF12_OCTOSPIM_P1;
 8001328:	230c      	movs	r3, #12
 800132a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4814      	ldr	r0, [pc, #80]	@ (8001384 <MX_GPIO_Init+0x31c>)
 8001334:	f004 fbaa 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_CS_Pin */
	GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001338:	2308      	movs	r3, #8
 800133a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	480d      	ldr	r0, [pc, #52]	@ (8001384 <MX_GPIO_Init+0x31c>)
 8001350:	f004 fb9c 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 PA6 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10;
 8001354:	f44f 63ca 	mov.w	r3, #1616	@ 0x650
 8001358:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001366:	230d      	movs	r3, #13
 8001368:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	4804      	ldr	r0, [pc, #16]	@ (8001384 <MX_GPIO_Init+0x31c>)
 8001372:	f004 fb8b 	bl	8005a8c <HAL_GPIO_Init>
 8001376:	e00b      	b.n	8001390 <MX_GPIO_Init+0x328>
 8001378:	58024400 	.word	0x58024400
 800137c:	58020800 	.word	0x58020800
 8001380:	58021400 	.word	0x58021400
 8001384:	58020000 	.word	0x58020000
 8001388:	58020400 	.word	0x58020400
 800138c:	58021000 	.word	0x58021000

	/*Configure GPIO pins : PA7 PA11 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12;
 8001390:	f44f 53c4 	mov.w	r3, #6272	@ 0x1880
 8001394:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013a2:	230e      	movs	r3, #14
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	488f      	ldr	r0, [pc, #572]	@ (80015ec <MX_GPIO_Init+0x584>)
 80013ae:	f004 fb6d 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 PC6 PC7 PC10
                           PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10
 80013b2:	f44f 53a7 	mov.w	r3, #5344	@ 0x14e0
 80013b6:	61fb      	str	r3, [r7, #28]
			|GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013c4:	230e      	movs	r3, #14
 80013c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	4888      	ldr	r0, [pc, #544]	@ (80015f0 <MX_GPIO_Init+0x588>)
 80013d0:	f004 fb5c 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PE10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80013e6:	230a      	movs	r3, #10
 80013e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4880      	ldr	r0, [pc, #512]	@ (80015f4 <MX_GPIO_Init+0x58c>)
 80013f2:	f004 fb4b 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PE11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8001408:	230b      	movs	r3, #11
 800140a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4878      	ldr	r0, [pc, #480]	@ (80015f4 <MX_GPIO_Init+0x58c>)
 8001414:	f004 fb3a 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PE12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001418:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800142a:	230e      	movs	r3, #14
 800142c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	486f      	ldr	r0, [pc, #444]	@ (80015f4 <MX_GPIO_Init+0x58c>)
 8001436:	f004 fb29 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB11 PB8 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8;
 800143a:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 800143e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800144c:	230e      	movs	r3, #14
 800144e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4619      	mov	r1, r3
 8001456:	4868      	ldr	r0, [pc, #416]	@ (80015f8 <MX_GPIO_Init+0x590>)
 8001458:	f004 fb18 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pins : PG6 PG7 PG8 */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800145c:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001460:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800146e:	230e      	movs	r3, #14
 8001470:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	4860      	ldr	r0, [pc, #384]	@ (80015fc <MX_GPIO_Init+0x594>)
 800147a:	f004 fb07 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800147e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001482:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001490:	230d      	movs	r3, #13
 8001492:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	4855      	ldr	r0, [pc, #340]	@ (80015f0 <MX_GPIO_Init+0x588>)
 800149c:	f004 faf6 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 80014b2:	230d      	movs	r3, #13
 80014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	4619      	mov	r1, r3
 80014bc:	484b      	ldr	r0, [pc, #300]	@ (80015ec <MX_GPIO_Init+0x584>)
 80014be:	f004 fae5 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80014d4:	2309      	movs	r3, #9
 80014d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4619      	mov	r1, r3
 80014de:	4843      	ldr	r0, [pc, #268]	@ (80015ec <MX_GPIO_Init+0x584>)
 80014e0:	f004 fad4 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PD2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014e4:	2304      	movs	r3, #4
 80014e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80014f4:	2309      	movs	r3, #9
 80014f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	4840      	ldr	r0, [pc, #256]	@ (8001600 <MX_GPIO_Init+0x598>)
 8001500:	f004 fac4 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001504:	2308      	movs	r3, #8
 8001506:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001514:	230d      	movs	r3, #13
 8001516:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	4838      	ldr	r0, [pc, #224]	@ (8001600 <MX_GPIO_Init+0x598>)
 8001520:	f004 fab4 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PD6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001524:	2340      	movs	r3, #64	@ 0x40
 8001526:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001534:	230e      	movs	r3, #14
 8001536:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4619      	mov	r1, r3
 800153e:	4830      	ldr	r0, [pc, #192]	@ (8001600 <MX_GPIO_Init+0x598>)
 8001540:	f004 faa4 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PG9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001544:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001548:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001556:	230d      	movs	r3, #13
 8001558:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	4619      	mov	r1, r3
 8001560:	4826      	ldr	r0, [pc, #152]	@ (80015fc <MX_GPIO_Init+0x594>)
 8001562:	f004 fa93 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PG10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001566:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800156a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001578:	2309      	movs	r3, #9
 800157a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	481e      	ldr	r0, [pc, #120]	@ (80015fc <MX_GPIO_Init+0x594>)
 8001584:	f004 fa82 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pins : SOLENOID_CLAMP_Pin SOLENOID_TEAR_2_Pin */
	GPIO_InitStruct.Pin = SOLENOID_CLAMP_Pin|SOLENOID_TEAR_2_Pin;
 8001588:	2318      	movs	r3, #24
 800158a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158c:	2301      	movs	r3, #1
 800158e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	4619      	mov	r1, r3
 800159e:	4816      	ldr	r0, [pc, #88]	@ (80015f8 <MX_GPIO_Init+0x590>)
 80015a0:	f004 fa74 	bl	8005a8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015a4:	2320      	movs	r3, #32
 80015a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF3_LTDC;
 80015b4:	2303      	movs	r3, #3
 80015b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	480e      	ldr	r0, [pc, #56]	@ (80015f8 <MX_GPIO_Init+0x590>)
 80015c0:	f004 fa64 	bl	8005a8c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(HEATER_EXTI_IRQn, 0, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	2008      	movs	r0, #8
 80015ca:	f003 fd5a 	bl	8005082 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(HEATER_EXTI_IRQn);
 80015ce:	2008      	movs	r0, #8
 80015d0:	f003 fd71 	bl	80050b6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(PLATFORM_TOUCH_EXTI_IRQn, 0, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2100      	movs	r1, #0
 80015d8:	2009      	movs	r0, #9
 80015da:	f003 fd52 	bl	8005082 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(PLATFORM_TOUCH_EXTI_IRQn);
 80015de:	2009      	movs	r0, #9
 80015e0:	f003 fd69 	bl	80050b6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80015e4:	bf00      	nop
 80015e6:	3730      	adds	r7, #48	@ 0x30
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	58020000 	.word	0x58020000
 80015f0:	58020800 	.word	0x58020800
 80015f4:	58021000 	.word	0x58021000
 80015f8:	58020400 	.word	0x58020400
 80015fc:	58021800 	.word	0x58021800
 8001600:	58020c00 	.word	0x58020c00
 8001604:	00000000 	.word	0x00000000

08001608 <measure_joystick_and_send_to_slave>:

/* USER CODE BEGIN 4 */
void measure_joystick_and_send_to_slave(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
	float divider;
	ADC_valX = ADC_raw[0] - 127.5;
 800160e:	4b58      	ldr	r3, [pc, #352]	@ (8001770 <measure_joystick_and_send_to_slave+0x168>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800161a:	ed9f 6b53 	vldr	d6, [pc, #332]	@ 8001768 <measure_joystick_and_send_to_slave+0x160>
 800161e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001622:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001626:	4b53      	ldr	r3, [pc, #332]	@ (8001774 <measure_joystick_and_send_to_slave+0x16c>)
 8001628:	edc3 7a00 	vstr	s15, [r3]
	ADC_valY = ADC_raw[1] - 127.5;         // Read The ADC Conversion Result
 800162c:	4b50      	ldr	r3, [pc, #320]	@ (8001770 <measure_joystick_and_send_to_slave+0x168>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	ee07 3a90 	vmov	s15, r3
 8001634:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001638:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8001768 <measure_joystick_and_send_to_slave+0x160>
 800163c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001640:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001644:	4b4c      	ldr	r3, [pc, #304]	@ (8001778 <measure_joystick_and_send_to_slave+0x170>)
 8001646:	edc3 7a00 	vstr	s15, [r3]
	/*
	 * Fine: /250.0
	 * Coarse: /50.0
	 */
	if (fine_adjustment)
 800164a:	4b4c      	ldr	r3, [pc, #304]	@ (800177c <measure_joystick_and_send_to_slave+0x174>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <measure_joystick_and_send_to_slave+0x50>
		divider = 100.0;
 8001652:	4b4b      	ldr	r3, [pc, #300]	@ (8001780 <measure_joystick_and_send_to_slave+0x178>)
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	e002      	b.n	800165e <measure_joystick_and_send_to_slave+0x56>
	else
		divider = 1.0;
 8001658:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800165c:	607b      	str	r3, [r7, #4]

	if (fabs(ADC_valX) > 40)
 800165e:	4b45      	ldr	r3, [pc, #276]	@ (8001774 <measure_joystick_and_send_to_slave+0x16c>)
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	eef0 7ae7 	vabs.f32	s15, s15
 8001668:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001784 <measure_joystick_and_send_to_slave+0x17c>
 800166c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001674:	dd04      	ble.n	8001680 <measure_joystick_and_send_to_slave+0x78>
				speed_joystickX = ADC_valX;
 8001676:	4b3f      	ldr	r3, [pc, #252]	@ (8001774 <measure_joystick_and_send_to_slave+0x16c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a43      	ldr	r2, [pc, #268]	@ (8001788 <measure_joystick_and_send_to_slave+0x180>)
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e003      	b.n	8001688 <measure_joystick_and_send_to_slave+0x80>
			else
				speed_joystickX = 0;
 8001680:	4b41      	ldr	r3, [pc, #260]	@ (8001788 <measure_joystick_and_send_to_slave+0x180>)
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

			if (fabs(ADC_valY) > 40)
 8001688:	4b3b      	ldr	r3, [pc, #236]	@ (8001778 <measure_joystick_and_send_to_slave+0x170>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	eef0 7ae7 	vabs.f32	s15, s15
 8001692:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001784 <measure_joystick_and_send_to_slave+0x17c>
 8001696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169e:	dd04      	ble.n	80016aa <measure_joystick_and_send_to_slave+0xa2>
				speed_joystickY = ADC_valY;
 80016a0:	4b35      	ldr	r3, [pc, #212]	@ (8001778 <measure_joystick_and_send_to_slave+0x170>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a39      	ldr	r2, [pc, #228]	@ (800178c <measure_joystick_and_send_to_slave+0x184>)
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	e003      	b.n	80016b2 <measure_joystick_and_send_to_slave+0xaa>
			else
				speed_joystickY = 0;
 80016aa:	4b38      	ldr	r3, [pc, #224]	@ (800178c <measure_joystick_and_send_to_slave+0x184>)
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]

			speed_joystickT = speed_joystickX;
 80016b2:	4b35      	ldr	r3, [pc, #212]	@ (8001788 <measure_joystick_and_send_to_slave+0x180>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a36      	ldr	r2, [pc, #216]	@ (8001790 <measure_joystick_and_send_to_slave+0x188>)
 80016b8:	6013      	str	r3, [r2, #0]
			speed_joystickZ = speed_joystickY;
 80016ba:	4b34      	ldr	r3, [pc, #208]	@ (800178c <measure_joystick_and_send_to_slave+0x184>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a35      	ldr	r2, [pc, #212]	@ (8001794 <measure_joystick_and_send_to_slave+0x18c>)
 80016c0:	6013      	str	r3, [r2, #0]

	switch (control_mode)
 80016c2:	4b35      	ldr	r3, [pc, #212]	@ (8001798 <measure_joystick_and_send_to_slave+0x190>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d038      	beq.n	800173c <measure_joystick_and_send_to_slave+0x134>
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d847      	bhi.n	800175e <measure_joystick_and_send_to_slave+0x156>
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <measure_joystick_and_send_to_slave+0xd0>
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d021      	beq.n	800171a <measure_joystick_and_send_to_slave+0x112>
	case 2:
		write_float_to_slave(ADDRESS_MOTOR_T, VIRTUAL_MEM_SPEED, speed_joystickT / divider);
		HAL_Delay(10);
		break;
	}
}
 80016d6:	e042      	b.n	800175e <measure_joystick_and_send_to_slave+0x156>
		write_float_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_SPEED, speed_joystickX / divider);
 80016d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001788 <measure_joystick_and_send_to_slave+0x180>)
 80016da:	ed93 7a00 	vldr	s14, [r3]
 80016de:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016e6:	eeb0 0a66 	vmov.f32	s0, s13
 80016ea:	2101      	movs	r1, #1
 80016ec:	2028      	movs	r0, #40	@ 0x28
 80016ee:	f000 f9d1 	bl	8001a94 <write_float_to_slave>
		HAL_Delay(10);
 80016f2:	200a      	movs	r0, #10
 80016f4:	f001 f8e6 	bl	80028c4 <HAL_Delay>
		write_float_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_SPEED, speed_joystickY / divider);
 80016f8:	4b24      	ldr	r3, [pc, #144]	@ (800178c <measure_joystick_and_send_to_slave+0x184>)
 80016fa:	ed93 7a00 	vldr	s14, [r3]
 80016fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001702:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001706:	eeb0 0a66 	vmov.f32	s0, s13
 800170a:	2101      	movs	r1, #1
 800170c:	202a      	movs	r0, #42	@ 0x2a
 800170e:	f000 f9c1 	bl	8001a94 <write_float_to_slave>
		HAL_Delay(10);
 8001712:	200a      	movs	r0, #10
 8001714:	f001 f8d6 	bl	80028c4 <HAL_Delay>
		break;
 8001718:	e021      	b.n	800175e <measure_joystick_and_send_to_slave+0x156>
		write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_SPEED, speed_joystickZ / divider);
 800171a:	4b1e      	ldr	r3, [pc, #120]	@ (8001794 <measure_joystick_and_send_to_slave+0x18c>)
 800171c:	ed93 7a00 	vldr	s14, [r3]
 8001720:	edd7 7a01 	vldr	s15, [r7, #4]
 8001724:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001728:	eeb0 0a66 	vmov.f32	s0, s13
 800172c:	2101      	movs	r1, #1
 800172e:	202c      	movs	r0, #44	@ 0x2c
 8001730:	f000 f9b0 	bl	8001a94 <write_float_to_slave>
		HAL_Delay(10);
 8001734:	200a      	movs	r0, #10
 8001736:	f001 f8c5 	bl	80028c4 <HAL_Delay>
		break;
 800173a:	e010      	b.n	800175e <measure_joystick_and_send_to_slave+0x156>
		write_float_to_slave(ADDRESS_MOTOR_T, VIRTUAL_MEM_SPEED, speed_joystickT / divider);
 800173c:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <measure_joystick_and_send_to_slave+0x188>)
 800173e:	ed93 7a00 	vldr	s14, [r3]
 8001742:	edd7 7a01 	vldr	s15, [r7, #4]
 8001746:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800174a:	eeb0 0a66 	vmov.f32	s0, s13
 800174e:	2101      	movs	r1, #1
 8001750:	202e      	movs	r0, #46	@ 0x2e
 8001752:	f000 f99f 	bl	8001a94 <write_float_to_slave>
		HAL_Delay(10);
 8001756:	200a      	movs	r0, #10
 8001758:	f001 f8b4 	bl	80028c4 <HAL_Delay>
		break;
 800175c:	bf00      	nop
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	00000000 	.word	0x00000000
 800176c:	405fe000 	.word	0x405fe000
 8001770:	240005ec 	.word	0x240005ec
 8001774:	240005b8 	.word	0x240005b8
 8001778:	240005bc 	.word	0x240005bc
 800177c:	240005e4 	.word	0x240005e4
 8001780:	42c80000 	.word	0x42c80000
 8001784:	42200000 	.word	0x42200000
 8001788:	240005c4 	.word	0x240005c4
 800178c:	240005c8 	.word	0x240005c8
 8001790:	240005d0 	.word	0x240005d0
 8001794:	240005cc 	.word	0x240005cc
 8001798:	240005f8 	.word	0x240005f8

0800179c <enter_jog_mode>:

// Enter into jog mode (XY movement with joystick)
void enter_jog_mode(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
//	write_uint32_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_MODE, SPD_MODE);
//	write_uint32_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_MODE, SPD_MODE);
	while (HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_SET)
 80017a0:	e01d      	b.n	80017de <enter_jog_mode+0x42>
	{
		HAL_ADC_Start(&hadc1);
 80017a2:	4814      	ldr	r0, [pc, #80]	@ (80017f4 <enter_jog_mode+0x58>)
 80017a4:	f001 fe0a 	bl	80033bc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 80017a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017ac:	4811      	ldr	r0, [pc, #68]	@ (80017f4 <enter_jog_mode+0x58>)
 80017ae:	f001 ff03 	bl	80035b8 <HAL_ADC_PollForConversion>
		ADC_raw[0] = HAL_ADC_GetValue(&hadc1);
 80017b2:	4810      	ldr	r0, [pc, #64]	@ (80017f4 <enter_jog_mode+0x58>)
 80017b4:	f001 fff4 	bl	80037a0 <HAL_ADC_GetValue>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4a0f      	ldr	r2, [pc, #60]	@ (80017f8 <enter_jog_mode+0x5c>)
 80017bc:	6013      	str	r3, [r2, #0]

		HAL_ADC_Start(&hadc3);
 80017be:	480f      	ldr	r0, [pc, #60]	@ (80017fc <enter_jog_mode+0x60>)
 80017c0:	f001 fdfc 	bl	80033bc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, 1000);
 80017c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017c8:	480c      	ldr	r0, [pc, #48]	@ (80017fc <enter_jog_mode+0x60>)
 80017ca:	f001 fef5 	bl	80035b8 <HAL_ADC_PollForConversion>
		ADC_raw[1] = HAL_ADC_GetValue(&hadc3);
 80017ce:	480b      	ldr	r0, [pc, #44]	@ (80017fc <enter_jog_mode+0x60>)
 80017d0:	f001 ffe6 	bl	80037a0 <HAL_ADC_GetValue>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4a08      	ldr	r2, [pc, #32]	@ (80017f8 <enter_jog_mode+0x5c>)
 80017d8:	6053      	str	r3, [r2, #4]

		//Enable XY jog mode
		measure_joystick_and_send_to_slave();
 80017da:	f7ff ff15 	bl	8001608 <measure_joystick_and_send_to_slave>
	while (HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_SET)
 80017de:	2180      	movs	r1, #128	@ 0x80
 80017e0:	4807      	ldr	r0, [pc, #28]	@ (8001800 <enter_jog_mode+0x64>)
 80017e2:	f004 fafb 	bl	8005ddc <HAL_GPIO_ReadPin>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d0da      	beq.n	80017a2 <enter_jog_mode+0x6>
		//measure_joystick_and_send_to_slave();
		//HAL_Delay(100);
	}
	//write_uint32_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_MODE, POS_MODE);
	//write_uint32_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_MODE, POS_MODE);
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	24000240 	.word	0x24000240
 80017f8:	240005ec 	.word	0x240005ec
 80017fc:	24000320 	.word	0x24000320
 8001800:	58021400 	.word	0x58021400

08001804 <read_temp_from_ADC>:
uint32_t index1=0, index2=1;
int32_t feedback_pred =0;


float read_temp_from_ADC(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
	uint32_t ADC_value;

	ADC_value = HAL_ADC_GetValue(&hadc2);
 800180a:	4823      	ldr	r0, [pc, #140]	@ (8001898 <read_temp_from_ADC+0x94>)
 800180c:	f001 ffc8 	bl	80037a0 <HAL_ADC_GetValue>
 8001810:	60f8      	str	r0, [r7, #12]

	if (ADC_value < ADC_MIN)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8001818:	d203      	bcs.n	8001822 <read_temp_from_ADC+0x1e>
	{
		ADC_value = ADC_MIN;
 800181a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e006      	b.n	8001830 <read_temp_from_ADC+0x2c>
	}
	else if (ADC_value > ADC_MAX)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f5b3 6f58 	cmp.w	r3, #3456	@ 0xd80
 8001828:	d902      	bls.n	8001830 <read_temp_from_ADC+0x2c>
	{
		ADC_value = ADC_MAX;
 800182a:	f44f 6358 	mov.w	r3, #3456	@ 0xd80
 800182e:	60fb      	str	r3, [r7, #12]

	//Read_temp = Tlook[ADC_value - 195];  //209

	// Interpolating...

	int16_t adc_index = (ADC_value >> DECIMATION) - (ADC_MIN >> DECIMATION);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	b29b      	uxth	r3, r3
 8001836:	3b09      	subs	r3, #9
 8001838:	b29b      	uxth	r3, r3
 800183a:	817b      	strh	r3, [r7, #10]

	int32_t delta_T = Tlook[adc_index + 1] - Tlook[adc_index];
 800183c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001840:	3301      	adds	r3, #1
 8001842:	4a16      	ldr	r2, [pc, #88]	@ (800189c <read_temp_from_ADC+0x98>)
 8001844:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001848:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800184c:	4913      	ldr	r1, [pc, #76]	@ (800189c <read_temp_from_ADC+0x98>)
 800184e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	607b      	str	r3, [r7, #4]

	int16_t delta_ADC = ADC_value - ((adc_index + (ADC_MIN >> DECIMATION)) << DECIMATION);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	b29a      	uxth	r2, r3
 800185a:	897b      	ldrh	r3, [r7, #10]
 800185c:	3309      	adds	r3, #9
 800185e:	b29b      	uxth	r3, r3
 8001860:	015b      	lsls	r3, r3, #5
 8001862:	b29b      	uxth	r3, r3
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	b29b      	uxth	r3, r3
 8001868:	807b      	strh	r3, [r7, #2]

	return ((delta_T * delta_ADC) + (Tlook[adc_index] << DECIMATION)) >> DECIMATION;
 800186a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	fb03 f202 	mul.w	r2, r3, r2
 8001874:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001878:	4908      	ldr	r1, [pc, #32]	@ (800189c <read_temp_from_ADC+0x98>)
 800187a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800187e:	015b      	lsls	r3, r3, #5
 8001880:	4413      	add	r3, r2
 8001882:	115b      	asrs	r3, r3, #5
 8001884:	ee07 3a90 	vmov	s15, r3
 8001888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800188c:	eeb0 0a67 	vmov.f32	s0, s15
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	240002b0 	.word	0x240002b0
 800189c:	24000020 	.word	0x24000020

080018a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	@ 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	int32_t Read_temp, PI_error, PI_output, integral = 0, proportional, PI_prev_error = 0, limMaxInt = 0, limMinInt = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

	if(htim == &htim2) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a66      	ldr	r2, [pc, #408]	@ (8001a54 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	f040 80c4 	bne.w	8001a4a <HAL_TIM_PeriodElapsedCallback+0x1aa>
		/* Read ADC */
		HAL_ADC_Start(&hadc2);
 80018c2:	4865      	ldr	r0, [pc, #404]	@ (8001a58 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80018c4:	f001 fd7a 	bl	80033bc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 1000);
 80018c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018cc:	4862      	ldr	r0, [pc, #392]	@ (8001a58 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80018ce:	f001 fe73 	bl	80035b8 <HAL_ADC_PollForConversion>
		Read_temp = read_temp_from_ADC();
 80018d2:	f7ff ff97 	bl	8001804 <read_temp_from_ADC>
 80018d6:	eef0 7a40 	vmov.f32	s15, s0
 80018da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018de:	ee17 3a90 	vmov	r3, s15
 80018e2:	613b      	str	r3, [r7, #16]
		HAL_ADC_Stop(&hadc2);
 80018e4:	485c      	ldr	r0, [pc, #368]	@ (8001a58 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80018e6:	f001 fe33 	bl	8003550 <HAL_ADC_Stop>

		measured_temperature_gauge = ((float)(Read_temp>>10)) - 273.5;
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	129b      	asrs	r3, r3, #10
 80018ee:	ee07 3a90 	vmov	s15, r3
 80018f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f6:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001a5c <HAL_TIM_PeriodElapsedCallback+0x1bc>
 80018fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018fe:	4b58      	ldr	r3, [pc, #352]	@ (8001a60 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001900:	edc3 7a00 	vstr	s15, [r3]
		temperature_testpoint = Read_temp;
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4a57      	ldr	r2, [pc, #348]	@ (8001a64 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001908:	6013      	str	r3, [r2, #0]

		/* PI Controller */
		//error = setpoint - feedback_pred;
		PI_error = setpoint - Read_temp;
 800190a:	4b57      	ldr	r3, [pc, #348]	@ (8001a68 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	60fb      	str	r3, [r7, #12]

		proportional = Kp * PI_error;
 8001914:	225a      	movs	r2, #90	@ 0x5a
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	60bb      	str	r3, [r7, #8]

		// Dynamic Anti-wind-up limits calculation
		if (PLMAX > proportional && proportional >= 0) {
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001924:	da07      	bge.n	8001936 <HAL_TIM_PeriodElapsedCallback+0x96>
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db04      	blt.n	8001936 <HAL_TIM_PeriodElapsedCallback+0x96>
			limMaxInt = PLMAX - proportional;
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	e001      	b.n	800193a <HAL_TIM_PeriodElapsedCallback+0x9a>
		}
		else {
			limMaxInt = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
		}

		integral = integral + Ki * Sample_time * (PI_prev_error + PI_error);
 800193a:	2300      	movs	r3, #0
 800193c:	2201      	movs	r2, #1
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	69b9      	ldr	r1, [r7, #24]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	440a      	add	r2, r1
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	6a3a      	ldr	r2, [r7, #32]
 800194e:	4413      	add	r3, r2
 8001950:	623b      	str	r3, [r7, #32]
		PI_prev_error = PI_error;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	61bb      	str	r3, [r7, #24]

		// Anti-wind-up integrator limits clamping
		if (integral > limMaxInt) {
 8001956:	6a3a      	ldr	r2, [r7, #32]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	429a      	cmp	r2, r3
 800195c:	dd02      	ble.n	8001964 <HAL_TIM_PeriodElapsedCallback+0xc4>
			integral = limMaxInt;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	623b      	str	r3, [r7, #32]
 8001962:	e005      	b.n	8001970 <HAL_TIM_PeriodElapsedCallback+0xd0>
		}
		else if (integral < limMinInt) {
 8001964:	6a3a      	ldr	r2, [r7, #32]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	429a      	cmp	r2, r3
 800196a:	da01      	bge.n	8001970 <HAL_TIM_PeriodElapsedCallback+0xd0>
			integral = limMinInt;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	623b      	str	r3, [r7, #32]
		}

		// output to PWM value conditioning
		PI_output = ((integral + proportional) >> 10) * 50;
 8001970:	6a3a      	ldr	r2, [r7, #32]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	4413      	add	r3, r2
 8001976:	129b      	asrs	r3, r3, #10
 8001978:	2232      	movs	r2, #50	@ 0x32
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24

		if (PI_output > OLMAX) {
 8001980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001982:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001986:	dd03      	ble.n	8001990 <HAL_TIM_PeriodElapsedCallback+0xf0>
			PI_output = 1000;
 8001988:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800198c:	627b      	str	r3, [r7, #36]	@ 0x24
 800198e:	e004      	b.n	800199a <HAL_TIM_PeriodElapsedCallback+0xfa>
		}
		else if (PI_output < 0) {
 8001990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001992:	2b00      	cmp	r3, #0
 8001994:	da01      	bge.n	800199a <HAL_TIM_PeriodElapsedCallback+0xfa>
			PI_output = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		/* End PI Controller */

		TIM3->CCR3 = PI_output;
 800199a:	4a34      	ldr	r2, [pc, #208]	@ (8001a6c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800199c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199e:	63d3      	str	r3, [r2, #60]	@ 0x3c

		// Output diventa 2^10
		output2 = PI_output * 20;
 80019a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b30      	ldr	r3, [pc, #192]	@ (8001a70 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80019ae:	601a      	str	r2, [r3, #0]

		// 2^20 -> 2^10
		in_model = (((output2 * output2) >> 10) * 82) >> 10;
 80019b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001a70 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001a70 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	fb02 f303 	mul.w	r3, r2, r3
 80019bc:	129b      	asrs	r3, r3, #10
 80019be:	2252      	movs	r2, #82	@ 0x52
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	129b      	asrs	r3, r3, #10
 80019c6:	4a2b      	ldr	r2, [pc, #172]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80019c8:	6013      	str	r3, [r2, #0]

		//L'uscita è 2^10
		out_model =  (out_model_prev * ad + bu * in_model + bd * in_model_prev) >> 16;
 80019ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f64f 72c5 	movw	r2, #65477	@ 0xffc5
 80019d2:	fb03 f202 	mul.w	r2, r3, r2
 80019d6:	21d1      	movs	r1, #209	@ 0xd1
 80019d8:	4b26      	ldr	r3, [pc, #152]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	fb01 f303 	mul.w	r3, r1, r3
 80019e0:	441a      	add	r2, r3
 80019e2:	21d1      	movs	r1, #209	@ 0xd1
 80019e4:	4b25      	ldr	r3, [pc, #148]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	141b      	asrs	r3, r3, #16
 80019f0:	4a23      	ldr	r2, [pc, #140]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80019f2:	6013      	str	r3, [r2, #0]

		in_model_prev = in_model;
 80019f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a20      	ldr	r2, [pc, #128]	@ (8001a7c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80019fa:	6013      	str	r3, [r2, #0]
		out_model_prev = out_model;
 80019fc:	4b20      	ldr	r3, [pc, #128]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1d      	ldr	r2, [pc, #116]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001a02:	6013      	str	r3, [r2, #0]

		// Prendo primo blocco
		out_delayed = delay_vect[index1];
 8001a04:	4b1f      	ldr	r3, [pc, #124]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1f      	ldr	r2, [pc, #124]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001a10:	6013      	str	r3, [r2, #0]

		delay_vect[index1] = out_model;
 8001a12:	4b1c      	ldr	r3, [pc, #112]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a1a      	ldr	r2, [pc, #104]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	491b      	ldr	r1, [pc, #108]	@ (8001a88 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		index1++;
 8001a20:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	4a17      	ldr	r2, [pc, #92]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a28:	6013      	str	r3, [r2, #0]

		if (index1 > 21)
 8001a2a:	4b16      	ldr	r3, [pc, #88]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b15      	cmp	r3, #21
 8001a30:	d902      	bls.n	8001a38 <HAL_TIM_PeriodElapsedCallback+0x198>
			index1 = 0;
 8001a32:	4b14      	ldr	r3, [pc, #80]	@ (8001a84 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]


		feedback_pred = Read_temp - out_delayed + out_model;
 8001a38:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	1ad2      	subs	r2, r2, r3
 8001a40:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4413      	add	r3, r2
 8001a46:	4a12      	ldr	r2, [pc, #72]	@ (8001a90 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001a48:	6013      	str	r3, [r2, #0]

	}
}
 8001a4a:	bf00      	nop
 8001a4c:	3728      	adds	r7, #40	@ 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	240004f8 	.word	0x240004f8
 8001a58:	240002b0 	.word	0x240002b0
 8001a5c:	4388c000 	.word	0x4388c000
 8001a60:	24000598 	.word	0x24000598
 8001a64:	240005b4 	.word	0x240005b4
 8001a68:	2400001c 	.word	0x2400001c
 8001a6c:	40000400 	.word	0x40000400
 8001a70:	2400060c 	.word	0x2400060c
 8001a74:	24000604 	.word	0x24000604
 8001a78:	24000600 	.word	0x24000600
 8001a7c:	240005fc 	.word	0x240005fc
 8001a80:	24000608 	.word	0x24000608
 8001a84:	2400066c 	.word	0x2400066c
 8001a88:	24000614 	.word	0x24000614
 8001a8c:	24000610 	.word	0x24000610
 8001a90:	24000670 	.word	0x24000670

08001a94 <write_float_to_slave>:


void write_float_to_slave(uint8_t slave_address, uint8_t virtual_memory_address, float value)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	460a      	mov	r2, r1
 8001a9e:	ed87 0a00 	vstr	s0, [r7]
 8001aa2:	71fb      	strb	r3, [r7, #7]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	71bb      	strb	r3, [r7, #6]
	ui32_to_f conv;
	conv.f = value;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	60fb      	str	r3, [r7, #12]
	prepare_WRITE_packet(tx_buffer, virtual_memory_address, conv.ui32);
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	79bb      	ldrb	r3, [r7, #6]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4808      	ldr	r0, [pc, #32]	@ (8001ad4 <write_float_to_slave+0x40>)
 8001ab4:	f000 f946 	bl	8001d44 <prepare_WRITE_packet>
	HAL_I2C_Master_Transmit(&hi2c1, slave_address, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	b299      	uxth	r1, r3
 8001abc:	2364      	movs	r3, #100	@ 0x64
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	4a04      	ldr	r2, [pc, #16]	@ (8001ad4 <write_float_to_slave+0x40>)
 8001ac4:	4804      	ldr	r0, [pc, #16]	@ (8001ad8 <write_float_to_slave+0x44>)
 8001ac6:	f004 fa71 	bl	8005fac <HAL_I2C_Master_Transmit>
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	24000674 	.word	0x24000674
 8001ad8:	2400041c 	.word	0x2400041c

08001adc <write_uint32_to_slave>:

void write_uint32_to_slave(uint8_t slave_address, uint8_t virtual_memory_address, uint32_t value)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af02      	add	r7, sp, #8
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	603a      	str	r2, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	71bb      	strb	r3, [r7, #6]
	prepare_WRITE_packet(tx_buffer, virtual_memory_address, value);
 8001aec:	79bb      	ldrb	r3, [r7, #6]
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	4808      	ldr	r0, [pc, #32]	@ (8001b14 <write_uint32_to_slave+0x38>)
 8001af4:	f000 f926 	bl	8001d44 <prepare_WRITE_packet>
	HAL_I2C_Master_Transmit(&hi2c1, slave_address, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	b299      	uxth	r1, r3
 8001afc:	2364      	movs	r3, #100	@ 0x64
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2307      	movs	r3, #7
 8001b02:	4a04      	ldr	r2, [pc, #16]	@ (8001b14 <write_uint32_to_slave+0x38>)
 8001b04:	4804      	ldr	r0, [pc, #16]	@ (8001b18 <write_uint32_to_slave+0x3c>)
 8001b06:	f004 fa51 	bl	8005fac <HAL_I2C_Master_Transmit>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	24000674 	.word	0x24000674
 8001b18:	2400041c 	.word	0x2400041c

08001b1c <perform_bond>:

void perform_bond(uint32_t bond_time)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	//Perform the bond

	//Enable the ultrasonic driver
	HAL_GPIO_WritePin(ULTRASONIC_ENABLE_GPIO_Port, ULTRASONIC_ENABLE_Pin, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b2a:	480f      	ldr	r0, [pc, #60]	@ (8001b68 <perform_bond+0x4c>)
 8001b2c:	f004 f96e 	bl	8005e0c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001b30:	2064      	movs	r0, #100	@ 0x64
 8001b32:	f000 fec7 	bl	80028c4 <HAL_Delay>
	write_bond_power_to_trimmer(bond_power);
 8001b36:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <perform_bond+0x50>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f82a 	bl	8001b94 <write_bond_power_to_trimmer>
	HAL_Delay(bond_time);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 febf 	bl	80028c4 <HAL_Delay>
	write_bond_power_to_trimmer(0);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f000 f824 	bl	8001b94 <write_bond_power_to_trimmer>
	HAL_Delay(100);
 8001b4c:	2064      	movs	r0, #100	@ 0x64
 8001b4e:	f000 feb9 	bl	80028c4 <HAL_Delay>
	//Disable the ultrasonic driver
	HAL_GPIO_WritePin(ULTRASONIC_ENABLE_GPIO_Port, ULTRASONIC_ENABLE_Pin, GPIO_PIN_SET);
 8001b52:	2201      	movs	r2, #1
 8001b54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b58:	4803      	ldr	r0, [pc, #12]	@ (8001b68 <perform_bond+0x4c>)
 8001b5a:	f004 f957 	bl	8005e0c <HAL_GPIO_WritePin>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	58021400 	.word	0x58021400
 8001b6c:	24000010 	.word	0x24000010

08001b70 <wait_for_button_release>:

void wait_for_button_release(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_RESET)
 8001b74:	e002      	b.n	8001b7c <wait_for_button_release+0xc>
		HAL_Delay(100);
 8001b76:	2064      	movs	r0, #100	@ 0x64
 8001b78:	f000 fea4 	bl	80028c4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_RESET)
 8001b7c:	2180      	movs	r1, #128	@ 0x80
 8001b7e:	4804      	ldr	r0, [pc, #16]	@ (8001b90 <wait_for_button_release+0x20>)
 8001b80:	f004 f92c 	bl	8005ddc <HAL_GPIO_ReadPin>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f5      	beq.n	8001b76 <wait_for_button_release+0x6>
}
 8001b8a:	bf00      	nop
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	58021400 	.word	0x58021400

08001b94 <write_bond_power_to_trimmer>:
	// Wait for the user to release the button
	wait_for_button_release();
}

void write_bond_power_to_trimmer(uint8_t bond_power)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
	uint8_t payload[2] = {0x11, bond_power};
 8001b9e:	2311      	movs	r3, #17
 8001ba0:	733b      	strb	r3, [r7, #12]
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2108      	movs	r1, #8
 8001baa:	4809      	ldr	r0, [pc, #36]	@ (8001bd0 <write_bond_power_to_trimmer+0x3c>)
 8001bac:	f004 f92e 	bl	8005e0c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, payload, 2, 100);
 8001bb0:	f107 010c 	add.w	r1, r7, #12
 8001bb4:	2364      	movs	r3, #100	@ 0x64
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	4806      	ldr	r0, [pc, #24]	@ (8001bd4 <write_bond_power_to_trimmer+0x40>)
 8001bba:	f00a f88d 	bl	800bcd8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2108      	movs	r1, #8
 8001bc2:	4803      	ldr	r0, [pc, #12]	@ (8001bd0 <write_bond_power_to_trimmer+0x3c>)
 8001bc4:	f004 f922 	bl	8005e0c <HAL_GPIO_WritePin>

	return;
 8001bc8:	bf00      	nop
}
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	58020000 	.word	0x58020000
 8001bd4:	24000470 	.word	0x24000470

08001bd8 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief Handles the GPIO callback
 * @param GPIO_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PLATFORM_TOUCH_Pin)
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d102      	bne.n	8001bee <HAL_GPIO_EXTI_Callback+0x16>
	{
		head_touched = true;
 8001be8:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <HAL_GPIO_EXTI_Callback+0x24>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
	}
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	240005b0 	.word	0x240005b0

08001c00 <execute_write_command>:

int execute_write_command(uint8_t write_address, uint32_t data)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	71fb      	strb	r3, [r7, #7]
	int ret_val = COMM_ERR;
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c10:	60fb      	str	r3, [r7, #12]
	ui32_to_f conv;
	conv.ui32 = data;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	60bb      	str	r3, [r7, #8]

	switch (write_address)
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d108      	bne.n	8001c2e <execute_write_command+0x2e>
	{
	case VIRTUAL_MEM_POSITION_MEAS:
		read_position = conv.f;
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4a09      	ldr	r2, [pc, #36]	@ (8001c44 <execute_write_command+0x44>)
 8001c20:	6013      	str	r3, [r2, #0]
		data_ready = true;
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <execute_write_command+0x48>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
		ret_val = COMM_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
		break;
 8001c2c:	e003      	b.n	8001c36 <execute_write_command+0x36>

	default:
		ret_val = COMM_ERR;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	60fb      	str	r3, [r7, #12]
		break;
 8001c34:	bf00      	nop
	}

	return ret_val;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	240005ac 	.word	0x240005ac
 8001c48:	240005b1 	.word	0x240005b1

08001c4c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c1)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	//Perform different actions based on the received command
	switch (rx_buffer[0])
 8001c54:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <HAL_I2C_MasterRxCpltCallback+0x38>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	d10e      	bne.n	8001c7a <HAL_I2C_MasterRxCpltCallback+0x2e>
	{
	case COMMAND_WRITE:
		read_data_from_WRITE_command(rx_buffer, &received_address, &received_data);
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <HAL_I2C_MasterRxCpltCallback+0x3c>)
 8001c5e:	490b      	ldr	r1, [pc, #44]	@ (8001c8c <HAL_I2C_MasterRxCpltCallback+0x40>)
 8001c60:	4808      	ldr	r0, [pc, #32]	@ (8001c84 <HAL_I2C_MasterRxCpltCallback+0x38>)
 8001c62:	f000 f8b8 	bl	8001dd6 <read_data_from_WRITE_command>
		execute_write_command(received_address, received_data);
 8001c66:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <HAL_I2C_MasterRxCpltCallback+0x40>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	4a07      	ldr	r2, [pc, #28]	@ (8001c88 <HAL_I2C_MasterRxCpltCallback+0x3c>)
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ffc5 	bl	8001c00 <execute_write_command>
		break;
 8001c76:	bf00      	nop
	}
	return;
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
}
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	2400067c 	.word	0x2400067c
 8001c88:	240005a4 	.word	0x240005a4
 8001c8c:	240005a8 	.word	0x240005a8

08001c90 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

	if(hadc == &hadc1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a06      	ldr	r2, [pc, #24]	@ (8001cb4 <HAL_ADC_ConvCpltCallback+0x24>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d102      	bne.n	8001ca6 <HAL_ADC_ConvCpltCallback+0x16>
		ADC_ready = 1;
 8001ca0:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <HAL_ADC_ConvCpltCallback+0x28>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	24000240 	.word	0x24000240
 8001cb8:	240005f4 	.word	0x240005f4

08001cbc <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8001cce:	f003 fa0d 	bl	80050ec <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001cde:	231f      	movs	r3, #31
 8001ce0:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8001ce2:	2387      	movs	r3, #135	@ 0x87
 8001ce4:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001cea:	2300      	movs	r3, #0
 8001cec:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001cfe:	463b      	mov	r3, r7
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 fa2b 	bl	800515c <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001d06:	2004      	movs	r0, #4
 8001d08:	f003 fa08 	bl	800511c <HAL_MPU_Enable>

}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d18:	b672      	cpsid	i
}
 8001d1a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <Error_Handler+0x8>

08001d20 <serial_communication_variable_init>:
 **********************************************************************************************/
/**
 * Zeroes the tx and rx buffers
 */
void serial_communication_variable_init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	memset(tx_buffer, 0x00, MAX_COMM_BUFFER_SIZE);
 8001d24:	2207      	movs	r2, #7
 8001d26:	2100      	movs	r1, #0
 8001d28:	4804      	ldr	r0, [pc, #16]	@ (8001d3c <serial_communication_variable_init+0x1c>)
 8001d2a:	f00d fbcc 	bl	800f4c6 <memset>
	memset(rx_buffer, 0x00, MAX_COMM_BUFFER_SIZE);
 8001d2e:	2207      	movs	r2, #7
 8001d30:	2100      	movs	r1, #0
 8001d32:	4803      	ldr	r0, [pc, #12]	@ (8001d40 <serial_communication_variable_init+0x20>)
 8001d34:	f00d fbc7 	bl	800f4c6 <memset>
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	24000674 	.word	0x24000674
 8001d40:	2400067c 	.word	0x2400067c

08001d44 <prepare_WRITE_packet>:
 *
 * @param buffer tx buffer pointer
 * @return total message length
 */
uint16_t prepare_WRITE_packet(uint8_t * buffer, uint8_t virtual_memory_address, uint32_t value)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	72fb      	strb	r3, [r7, #11]
	uint16_t packet_size = 7;
 8001d52:	2307      	movs	r3, #7
 8001d54:	82fb      	strh	r3, [r7, #22]
	ui32_to_ui8 conversion_union;

	conversion_union.ui32 = value;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	613b      	str	r3, [r7, #16]

	buffer[0] = COMMAND_WRITE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2205      	movs	r2, #5
 8001d5e:	701a      	strb	r2, [r3, #0]
	buffer[1] = packet_size;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3301      	adds	r3, #1
 8001d64:	8afa      	ldrh	r2, [r7, #22]
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]
	buffer[2] = virtual_memory_address;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	7afa      	ldrb	r2, [r7, #11]
 8001d70:	701a      	strb	r2, [r3, #0]
	buffer[3] = conversion_union.ui8[0];
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3303      	adds	r3, #3
 8001d76:	7c3a      	ldrb	r2, [r7, #16]
 8001d78:	701a      	strb	r2, [r3, #0]
	buffer[4] = conversion_union.ui8[1];
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	7c7a      	ldrb	r2, [r7, #17]
 8001d80:	701a      	strb	r2, [r3, #0]
	buffer[5] = conversion_union.ui8[2];
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3305      	adds	r3, #5
 8001d86:	7cba      	ldrb	r2, [r7, #18]
 8001d88:	701a      	strb	r2, [r3, #0]
	buffer[6] = conversion_union.ui8[3];
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3306      	adds	r3, #6
 8001d8e:	7cfa      	ldrb	r2, [r7, #19]
 8001d90:	701a      	strb	r2, [r3, #0]
	return packet_size;
 8001d92:	8afb      	ldrh	r3, [r7, #22]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <prepare_READ_packet>:
 *
 * @param buffer tx buffer pointer
 * @return total message length
 */
uint16_t prepare_READ_packet(uint8_t * buffer, uint8_t read_address)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70fb      	strb	r3, [r7, #3]
	uint16_t packet_size = 3;
 8001dac:	2303      	movs	r3, #3
 8001dae:	81fb      	strh	r3, [r7, #14]
	buffer[0] = COMMAND_READ;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2206      	movs	r2, #6
 8001db4:	701a      	strb	r2, [r3, #0]
	buffer[1] = packet_size;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3301      	adds	r3, #1
 8001dba:	89fa      	ldrh	r2, [r7, #14]
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	701a      	strb	r2, [r3, #0]
	buffer[2] = read_address;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	78fa      	ldrb	r2, [r7, #3]
 8001dc6:	701a      	strb	r2, [r3, #0]
	return packet_size;
 8001dc8:	89fb      	ldrh	r3, [r7, #14]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <read_data_from_WRITE_command>:
 * @param buffer pointer to the input buffer (it contains the received WRITE command)
 * @param read_address address at which the WRITE command is directed
 * @param data received uint32_t word
 */
void read_data_from_WRITE_command(uint8_t * buffer, uint8_t * read_address, uint32_t * data)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b087      	sub	sp, #28
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
	ui32_to_ui8 conversion_union;
	(*read_address) = buffer[2];
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	789a      	ldrb	r2, [r3, #2]
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	701a      	strb	r2, [r3, #0]
	conversion_union.ui8[0] = buffer[3];
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	78db      	ldrb	r3, [r3, #3]
 8001dee:	753b      	strb	r3, [r7, #20]
	conversion_union.ui8[1] = buffer[4];
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	791b      	ldrb	r3, [r3, #4]
 8001df4:	757b      	strb	r3, [r7, #21]
	conversion_union.ui8[2] = buffer[5];
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	795b      	ldrb	r3, [r3, #5]
 8001dfa:	75bb      	strb	r3, [r7, #22]
	conversion_union.ui8[3] = buffer[6];
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	799b      	ldrb	r3, [r3, #6]
 8001e00:	75fb      	strb	r3, [r7, #23]
	(*data) = conversion_union.ui32;
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	601a      	str	r2, [r3, #0]

	return;
 8001e08:	bf00      	nop
}
 8001e0a:	371c      	adds	r7, #28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <HAL_MspInit+0x30>)
 8001e1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e20:	4a08      	ldr	r2, [pc, #32]	@ (8001e44 <HAL_MspInit+0x30>)
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_MspInit+0x30>)
 8001e2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	58024400 	.word	0x58024400

08001e48 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08e      	sub	sp, #56	@ 0x38
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a64      	ldr	r2, [pc, #400]	@ (8001ff8 <HAL_ADC_MspInit+0x1b0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d157      	bne.n	8001f1a <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e6a:	4b64      	ldr	r3, [pc, #400]	@ (8001ffc <HAL_ADC_MspInit+0x1b4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	4a62      	ldr	r2, [pc, #392]	@ (8001ffc <HAL_ADC_MspInit+0x1b4>)
 8001e72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e74:	4b61      	ldr	r3, [pc, #388]	@ (8001ffc <HAL_ADC_MspInit+0x1b4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d10e      	bne.n	8001e9a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e7c:	4b60      	ldr	r3, [pc, #384]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001e7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e82:	4a5f      	ldr	r2, [pc, #380]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001e84:	f043 0320 	orr.w	r3, r3, #32
 8001e88:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e8c:	4b5c      	ldr	r3, [pc, #368]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001e8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	623b      	str	r3, [r7, #32]
 8001e98:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	4b59      	ldr	r3, [pc, #356]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea0:	4a57      	ldr	r2, [pc, #348]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001ea2:	f043 0302 	orr.w	r3, r3, #2
 8001ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eaa:	4b55      	ldr	r3, [pc, #340]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eb8:	4b51      	ldr	r3, [pc, #324]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ebe:	4a50      	ldr	r2, [pc, #320]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001ec0:	f043 0320 	orr.w	r3, r3, #32
 8001ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ec8:	4b4d      	ldr	r3, [pc, #308]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eda:	2303      	movs	r3, #3
 8001edc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4846      	ldr	r0, [pc, #280]	@ (8002004 <HAL_ADC_MspInit+0x1bc>)
 8001eea:	f003 fdcf 	bl	8005a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001eee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001efc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f00:	4619      	mov	r1, r3
 8001f02:	4841      	ldr	r0, [pc, #260]	@ (8002008 <HAL_ADC_MspInit+0x1c0>)
 8001f04:	f003 fdc2 	bl	8005a8c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	2012      	movs	r0, #18
 8001f0e:	f003 f8b8 	bl	8005082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f12:	2012      	movs	r0, #18
 8001f14:	f003 f8cf 	bl	80050b6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001f18:	e069      	b.n	8001fee <HAL_ADC_MspInit+0x1a6>
  else if(hadc->Instance==ADC2)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a3b      	ldr	r2, [pc, #236]	@ (800200c <HAL_ADC_MspInit+0x1c4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d13b      	bne.n	8001f9c <HAL_ADC_MspInit+0x154>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f24:	4b35      	ldr	r3, [pc, #212]	@ (8001ffc <HAL_ADC_MspInit+0x1b4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	4a34      	ldr	r2, [pc, #208]	@ (8001ffc <HAL_ADC_MspInit+0x1b4>)
 8001f2c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f2e:	4b33      	ldr	r3, [pc, #204]	@ (8001ffc <HAL_ADC_MspInit+0x1b4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d10e      	bne.n	8001f54 <HAL_ADC_MspInit+0x10c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f36:	4b32      	ldr	r3, [pc, #200]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001f38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f3c:	4a30      	ldr	r2, [pc, #192]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001f3e:	f043 0320 	orr.w	r3, r3, #32
 8001f42:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f46:	4b2e      	ldr	r3, [pc, #184]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001f48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f54:	4b2a      	ldr	r3, [pc, #168]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f5a:	4a29      	ldr	r2, [pc, #164]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f64:	4b26      	ldr	r3, [pc, #152]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f72:	2302      	movs	r3, #2
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f76:	2303      	movs	r3, #3
 8001f78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f82:	4619      	mov	r1, r3
 8001f84:	481f      	ldr	r0, [pc, #124]	@ (8002004 <HAL_ADC_MspInit+0x1bc>)
 8001f86:	f003 fd81 	bl	8005a8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	2012      	movs	r0, #18
 8001f90:	f003 f877 	bl	8005082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f94:	2012      	movs	r0, #18
 8001f96:	f003 f88e 	bl	80050b6 <HAL_NVIC_EnableIRQ>
}
 8001f9a:	e028      	b.n	8001fee <HAL_ADC_MspInit+0x1a6>
  else if(hadc->Instance==ADC3)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8002010 <HAL_ADC_MspInit+0x1c8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d123      	bne.n	8001fee <HAL_ADC_MspInit+0x1a6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001fa6:	4b16      	ldr	r3, [pc, #88]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fac:	4a14      	ldr	r2, [pc, #80]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001fae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fb6:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fca:	4a0d      	ldr	r2, [pc, #52]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001fcc:	f043 0304 	orr.w	r3, r3, #4
 8001fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002000 <HAL_ADC_MspInit+0x1b8>)
 8001fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001fe2:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8001fe6:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8001fea:	f000 fc8f 	bl	800290c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001fee:	bf00      	nop
 8001ff0:	3738      	adds	r7, #56	@ 0x38
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	24000684 	.word	0x24000684
 8002000:	58024400 	.word	0x58024400
 8002004:	58020400 	.word	0x58020400
 8002008:	58021400 	.word	0x58021400
 800200c:	40022100 	.word	0x40022100
 8002010:	58026000 	.word	0x58026000

08002014 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0b      	ldr	r2, [pc, #44]	@ (8002050 <HAL_CRC_MspInit+0x3c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d10e      	bne.n	8002044 <HAL_CRC_MspInit+0x30>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002026:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <HAL_CRC_MspInit+0x40>)
 8002028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800202c:	4a09      	ldr	r2, [pc, #36]	@ (8002054 <HAL_CRC_MspInit+0x40>)
 800202e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002032:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002036:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <HAL_CRC_MspInit+0x40>)
 8002038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800203c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	58024c00 	.word	0x58024c00
 8002054:	58024400 	.word	0x58024400

08002058 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0b      	ldr	r2, [pc, #44]	@ (8002094 <HAL_DMA2D_MspInit+0x3c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d10e      	bne.n	8002088 <HAL_DMA2D_MspInit+0x30>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800206a:	4b0b      	ldr	r3, [pc, #44]	@ (8002098 <HAL_DMA2D_MspInit+0x40>)
 800206c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002070:	4a09      	ldr	r2, [pc, #36]	@ (8002098 <HAL_DMA2D_MspInit+0x40>)
 8002072:	f043 0310 	orr.w	r3, r3, #16
 8002076:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800207a:	4b07      	ldr	r3, [pc, #28]	@ (8002098 <HAL_DMA2D_MspInit+0x40>)
 800207c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	52001000 	.word	0x52001000
 8002098:	58024400 	.word	0x58024400

0800209c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b0b8      	sub	sp, #224	@ 0xe0
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b4:	f107 0310 	add.w	r3, r7, #16
 80020b8:	22b8      	movs	r2, #184	@ 0xb8
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f00d fa02 	bl	800f4c6 <memset>
  if(hi2c->Instance==I2C1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a2e      	ldr	r2, [pc, #184]	@ (8002180 <HAL_I2C_MspInit+0xe4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d155      	bne.n	8002178 <HAL_I2C_MspInit+0xdc>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020cc:	f04f 0208 	mov.w	r2, #8
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020de:	f107 0310 	add.w	r3, r7, #16
 80020e2:	4618      	mov	r0, r3
 80020e4:	f007 f8ee 	bl	80092c4 <HAL_RCCEx_PeriphCLKConfig>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80020ee:	f7ff fe11 	bl	8001d14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f2:	4b24      	ldr	r3, [pc, #144]	@ (8002184 <HAL_I2C_MspInit+0xe8>)
 80020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f8:	4a22      	ldr	r2, [pc, #136]	@ (8002184 <HAL_I2C_MspInit+0xe8>)
 80020fa:	f043 0302 	orr.w	r3, r3, #2
 80020fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002102:	4b20      	ldr	r3, [pc, #128]	@ (8002184 <HAL_I2C_MspInit+0xe8>)
 8002104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002110:	23c0      	movs	r3, #192	@ 0xc0
 8002112:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002116:	2312      	movs	r3, #18
 8002118:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800211c:	2301      	movs	r3, #1
 800211e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002128:	2304      	movs	r3, #4
 800212a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002132:	4619      	mov	r1, r3
 8002134:	4814      	ldr	r0, [pc, #80]	@ (8002188 <HAL_I2C_MspInit+0xec>)
 8002136:	f003 fca9 	bl	8005a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800213a:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <HAL_I2C_MspInit+0xe8>)
 800213c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002140:	4a10      	ldr	r2, [pc, #64]	@ (8002184 <HAL_I2C_MspInit+0xe8>)
 8002142:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002146:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800214a:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <HAL_I2C_MspInit+0xe8>)
 800214c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002158:	2200      	movs	r2, #0
 800215a:	2100      	movs	r1, #0
 800215c:	201f      	movs	r0, #31
 800215e:	f002 ff90 	bl	8005082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002162:	201f      	movs	r0, #31
 8002164:	f002 ffa7 	bl	80050b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002168:	2200      	movs	r2, #0
 800216a:	2100      	movs	r1, #0
 800216c:	2020      	movs	r0, #32
 800216e:	f002 ff88 	bl	8005082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002172:	2020      	movs	r0, #32
 8002174:	f002 ff9f 	bl	80050b6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002178:	bf00      	nop
 800217a:	37e0      	adds	r7, #224	@ 0xe0
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40005400 	.word	0x40005400
 8002184:	58024400 	.word	0x58024400
 8002188:	58020400 	.word	0x58020400

0800218c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b0ba      	sub	sp, #232	@ 0xe8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021a4:	f107 0318 	add.w	r3, r7, #24
 80021a8:	22b8      	movs	r2, #184	@ 0xb8
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f00d f98a 	bl	800f4c6 <memset>
  if(hspi->Instance==SPI1)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a38      	ldr	r2, [pc, #224]	@ (8002298 <HAL_SPI_MspInit+0x10c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d168      	bne.n	800228e <HAL_SPI_MspInit+0x102>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80021bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021cc:	f107 0318 	add.w	r3, r7, #24
 80021d0:	4618      	mov	r0, r3
 80021d2:	f007 f877 	bl	80092c4 <HAL_RCCEx_PeriphCLKConfig>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80021dc:	f7ff fd9a 	bl	8001d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021e0:	4b2e      	ldr	r3, [pc, #184]	@ (800229c <HAL_SPI_MspInit+0x110>)
 80021e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021e6:	4a2d      	ldr	r2, [pc, #180]	@ (800229c <HAL_SPI_MspInit+0x110>)
 80021e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80021f0:	4b2a      	ldr	r3, [pc, #168]	@ (800229c <HAL_SPI_MspInit+0x110>)
 80021f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80021f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	4b27      	ldr	r3, [pc, #156]	@ (800229c <HAL_SPI_MspInit+0x110>)
 8002200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002204:	4a25      	ldr	r2, [pc, #148]	@ (800229c <HAL_SPI_MspInit+0x110>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800220e:	4b23      	ldr	r3, [pc, #140]	@ (800229c <HAL_SPI_MspInit+0x110>)
 8002210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800221c:	4b1f      	ldr	r3, [pc, #124]	@ (800229c <HAL_SPI_MspInit+0x110>)
 800221e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002222:	4a1e      	ldr	r2, [pc, #120]	@ (800229c <HAL_SPI_MspInit+0x110>)
 8002224:	f043 0308 	orr.w	r3, r3, #8
 8002228:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800222c:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <HAL_SPI_MspInit+0x110>)
 800222e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800223a:	2320      	movs	r3, #32
 800223c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002252:	2305      	movs	r3, #5
 8002254:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800225c:	4619      	mov	r1, r3
 800225e:	4810      	ldr	r0, [pc, #64]	@ (80022a0 <HAL_SPI_MspInit+0x114>)
 8002260:	f003 fc14 	bl	8005a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002264:	2380      	movs	r3, #128	@ 0x80
 8002266:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002276:	2300      	movs	r3, #0
 8002278:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800227c:	2305      	movs	r3, #5
 800227e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002282:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002286:	4619      	mov	r1, r3
 8002288:	4806      	ldr	r0, [pc, #24]	@ (80022a4 <HAL_SPI_MspInit+0x118>)
 800228a:	f003 fbff 	bl	8005a8c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800228e:	bf00      	nop
 8002290:	37e8      	adds	r7, #232	@ 0xe8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40013000 	.word	0x40013000
 800229c:	58024400 	.word	0x58024400
 80022a0:	58020000 	.word	0x58020000
 80022a4:	58020c00 	.word	0x58020c00

080022a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022b8:	d117      	bne.n	80022ea <HAL_TIM_Base_MspInit+0x42>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ba:	4b18      	ldr	r3, [pc, #96]	@ (800231c <HAL_TIM_Base_MspInit+0x74>)
 80022bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022c0:	4a16      	ldr	r2, [pc, #88]	@ (800231c <HAL_TIM_Base_MspInit+0x74>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022ca:	4b14      	ldr	r3, [pc, #80]	@ (800231c <HAL_TIM_Base_MspInit+0x74>)
 80022cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022d8:	2200      	movs	r2, #0
 80022da:	2100      	movs	r1, #0
 80022dc:	201c      	movs	r0, #28
 80022de:	f002 fed0 	bl	8005082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022e2:	201c      	movs	r0, #28
 80022e4:	f002 fee7 	bl	80050b6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022e8:	e013      	b.n	8002312 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM3)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002320 <HAL_TIM_Base_MspInit+0x78>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d10e      	bne.n	8002312 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022f4:	4b09      	ldr	r3, [pc, #36]	@ (800231c <HAL_TIM_Base_MspInit+0x74>)
 80022f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022fa:	4a08      	ldr	r2, [pc, #32]	@ (800231c <HAL_TIM_Base_MspInit+0x74>)
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002304:	4b05      	ldr	r3, [pc, #20]	@ (800231c <HAL_TIM_Base_MspInit+0x74>)
 8002306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	58024400 	.word	0x58024400
 8002320:	40000400 	.word	0x40000400

08002324 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 030c 	add.w	r3, r7, #12
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a12      	ldr	r2, [pc, #72]	@ (800238c <HAL_TIM_MspPostInit+0x68>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d11e      	bne.n	8002384 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	4b12      	ldr	r3, [pc, #72]	@ (8002390 <HAL_TIM_MspPostInit+0x6c>)
 8002348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800234c:	4a10      	ldr	r2, [pc, #64]	@ (8002390 <HAL_TIM_MspPostInit+0x6c>)
 800234e:	f043 0302 	orr.w	r3, r3, #2
 8002352:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002356:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <HAL_TIM_MspPostInit+0x6c>)
 8002358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002364:	2301      	movs	r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002374:	2302      	movs	r3, #2
 8002376:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	4619      	mov	r1, r3
 800237e:	4805      	ldr	r0, [pc, #20]	@ (8002394 <HAL_TIM_MspPostInit+0x70>)
 8002380:	f003 fb84 	bl	8005a8c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002384:	bf00      	nop
 8002386:	3720      	adds	r7, #32
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40000400 	.word	0x40000400
 8002390:	58024400 	.word	0x58024400
 8002394:	58020400 	.word	0x58020400

08002398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800239c:	bf00      	nop
 800239e:	e7fd      	b.n	800239c <NMI_Handler+0x4>

080023a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <HardFault_Handler+0x4>

080023a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <MemManage_Handler+0x4>

080023b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b4:	bf00      	nop
 80023b6:	e7fd      	b.n	80023b4 <BusFault_Handler+0x4>

080023b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <UsageFault_Handler+0x4>

080023c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ee:	f000 fa49 	bl	8002884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HEATER_Pin);
 80023fa:	2004      	movs	r0, #4
 80023fc:	f003 fd1f 	bl	8005e3e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}

08002404 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PLATFORM_TOUCH_Pin);
 8002408:	2008      	movs	r0, #8
 800240a:	f003 fd18 	bl	8005e3e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002418:	4803      	ldr	r0, [pc, #12]	@ (8002428 <ADC_IRQHandler+0x14>)
 800241a:	f001 f9cf 	bl	80037bc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800241e:	4803      	ldr	r0, [pc, #12]	@ (800242c <ADC_IRQHandler+0x18>)
 8002420:	f001 f9cc 	bl	80037bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	24000240 	.word	0x24000240
 800242c:	240002b0 	.word	0x240002b0

08002430 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002434:	4802      	ldr	r0, [pc, #8]	@ (8002440 <TIM2_IRQHandler+0x10>)
 8002436:	f00a f9e1 	bl	800c7fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	240004f8 	.word	0x240004f8

08002444 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002448:	4802      	ldr	r0, [pc, #8]	@ (8002454 <I2C1_EV_IRQHandler+0x10>)
 800244a:	f003 ff37 	bl	80062bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	2400041c 	.word	0x2400041c

08002458 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800245c:	4802      	ldr	r0, [pc, #8]	@ (8002468 <I2C1_ER_IRQHandler+0x10>)
 800245e:	f003 ff47 	bl	80062f0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	2400041c 	.word	0x2400041c

0800246c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return 1;
 8002470:	2301      	movs	r3, #1
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <_kill>:

int _kill(int pid, int sig)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002486:	f00d f8c1 	bl	800f60c <__errno>
 800248a:	4603      	mov	r3, r0
 800248c:	2216      	movs	r2, #22
 800248e:	601a      	str	r2, [r3, #0]
  return -1;
 8002490:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <_exit>:

void _exit (int status)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024a4:	f04f 31ff 	mov.w	r1, #4294967295
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ffe7 	bl	800247c <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ae:	bf00      	nop
 80024b0:	e7fd      	b.n	80024ae <_exit+0x12>

080024b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	e00a      	b.n	80024da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024c4:	f3af 8000 	nop.w
 80024c8:	4601      	mov	r1, r0
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	60ba      	str	r2, [r7, #8]
 80024d0:	b2ca      	uxtb	r2, r1
 80024d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3301      	adds	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	429a      	cmp	r2, r3
 80024e0:	dbf0      	blt.n	80024c4 <_read+0x12>
  }

  return len;
 80024e2:	687b      	ldr	r3, [r7, #4]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	e009      	b.n	8002512 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	60ba      	str	r2, [r7, #8]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	3301      	adds	r3, #1
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	429a      	cmp	r2, r3
 8002518:	dbf1      	blt.n	80024fe <_write+0x12>
  }
  return len;
 800251a:	687b      	ldr	r3, [r7, #4]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <_close>:

int _close(int file)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800252c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800254c:	605a      	str	r2, [r3, #4]
  return 0;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_isatty>:

int _isatty(int file)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002564:	2301      	movs	r3, #1
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002572:	b480      	push	{r7}
 8002574:	b085      	sub	sp, #20
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002594:	4a14      	ldr	r2, [pc, #80]	@ (80025e8 <_sbrk+0x5c>)
 8002596:	4b15      	ldr	r3, [pc, #84]	@ (80025ec <_sbrk+0x60>)
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a0:	4b13      	ldr	r3, [pc, #76]	@ (80025f0 <_sbrk+0x64>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d102      	bne.n	80025ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025a8:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <_sbrk+0x64>)
 80025aa:	4a12      	ldr	r2, [pc, #72]	@ (80025f4 <_sbrk+0x68>)
 80025ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ae:	4b10      	ldr	r3, [pc, #64]	@ (80025f0 <_sbrk+0x64>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d207      	bcs.n	80025cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025bc:	f00d f826 	bl	800f60c <__errno>
 80025c0:	4603      	mov	r3, r0
 80025c2:	220c      	movs	r2, #12
 80025c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ca:	e009      	b.n	80025e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025cc:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <_sbrk+0x64>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025d2:	4b07      	ldr	r3, [pc, #28]	@ (80025f0 <_sbrk+0x64>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	4a05      	ldr	r2, [pc, #20]	@ (80025f0 <_sbrk+0x64>)
 80025dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025de:	68fb      	ldr	r3, [r7, #12]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	24050000 	.word	0x24050000
 80025ec:	00000400 	.word	0x00000400
 80025f0:	24000688 	.word	0x24000688
 80025f4:	24000a88 	.word	0x24000a88

080025f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025fc:	4b3e      	ldr	r3, [pc, #248]	@ (80026f8 <SystemInit+0x100>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002602:	4a3d      	ldr	r2, [pc, #244]	@ (80026f8 <SystemInit+0x100>)
 8002604:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002608:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800260c:	4b3b      	ldr	r3, [pc, #236]	@ (80026fc <SystemInit+0x104>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	2b06      	cmp	r3, #6
 8002616:	d807      	bhi.n	8002628 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002618:	4b38      	ldr	r3, [pc, #224]	@ (80026fc <SystemInit+0x104>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f023 030f 	bic.w	r3, r3, #15
 8002620:	4a36      	ldr	r2, [pc, #216]	@ (80026fc <SystemInit+0x104>)
 8002622:	f043 0307 	orr.w	r3, r3, #7
 8002626:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002628:	4b35      	ldr	r3, [pc, #212]	@ (8002700 <SystemInit+0x108>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a34      	ldr	r2, [pc, #208]	@ (8002700 <SystemInit+0x108>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002634:	4b32      	ldr	r3, [pc, #200]	@ (8002700 <SystemInit+0x108>)
 8002636:	2200      	movs	r2, #0
 8002638:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800263a:	4b31      	ldr	r3, [pc, #196]	@ (8002700 <SystemInit+0x108>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4930      	ldr	r1, [pc, #192]	@ (8002700 <SystemInit+0x108>)
 8002640:	4b30      	ldr	r3, [pc, #192]	@ (8002704 <SystemInit+0x10c>)
 8002642:	4013      	ands	r3, r2
 8002644:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002646:	4b2d      	ldr	r3, [pc, #180]	@ (80026fc <SystemInit+0x104>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002652:	4b2a      	ldr	r3, [pc, #168]	@ (80026fc <SystemInit+0x104>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 030f 	bic.w	r3, r3, #15
 800265a:	4a28      	ldr	r2, [pc, #160]	@ (80026fc <SystemInit+0x104>)
 800265c:	f043 0307 	orr.w	r3, r3, #7
 8002660:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002662:	4b27      	ldr	r3, [pc, #156]	@ (8002700 <SystemInit+0x108>)
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002668:	4b25      	ldr	r3, [pc, #148]	@ (8002700 <SystemInit+0x108>)
 800266a:	2200      	movs	r2, #0
 800266c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800266e:	4b24      	ldr	r3, [pc, #144]	@ (8002700 <SystemInit+0x108>)
 8002670:	2200      	movs	r2, #0
 8002672:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002674:	4b22      	ldr	r3, [pc, #136]	@ (8002700 <SystemInit+0x108>)
 8002676:	4a24      	ldr	r2, [pc, #144]	@ (8002708 <SystemInit+0x110>)
 8002678:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800267a:	4b21      	ldr	r3, [pc, #132]	@ (8002700 <SystemInit+0x108>)
 800267c:	4a23      	ldr	r2, [pc, #140]	@ (800270c <SystemInit+0x114>)
 800267e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002680:	4b1f      	ldr	r3, [pc, #124]	@ (8002700 <SystemInit+0x108>)
 8002682:	4a23      	ldr	r2, [pc, #140]	@ (8002710 <SystemInit+0x118>)
 8002684:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002686:	4b1e      	ldr	r3, [pc, #120]	@ (8002700 <SystemInit+0x108>)
 8002688:	2200      	movs	r2, #0
 800268a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800268c:	4b1c      	ldr	r3, [pc, #112]	@ (8002700 <SystemInit+0x108>)
 800268e:	4a20      	ldr	r2, [pc, #128]	@ (8002710 <SystemInit+0x118>)
 8002690:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002692:	4b1b      	ldr	r3, [pc, #108]	@ (8002700 <SystemInit+0x108>)
 8002694:	2200      	movs	r2, #0
 8002696:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002698:	4b19      	ldr	r3, [pc, #100]	@ (8002700 <SystemInit+0x108>)
 800269a:	4a1d      	ldr	r2, [pc, #116]	@ (8002710 <SystemInit+0x118>)
 800269c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800269e:	4b18      	ldr	r3, [pc, #96]	@ (8002700 <SystemInit+0x108>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026a4:	4b16      	ldr	r3, [pc, #88]	@ (8002700 <SystemInit+0x108>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a15      	ldr	r2, [pc, #84]	@ (8002700 <SystemInit+0x108>)
 80026aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026b0:	4b13      	ldr	r3, [pc, #76]	@ (8002700 <SystemInit+0x108>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80026b6:	4b12      	ldr	r3, [pc, #72]	@ (8002700 <SystemInit+0x108>)
 80026b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80026bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d113      	bne.n	80026ec <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80026c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002700 <SystemInit+0x108>)
 80026c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80026ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002700 <SystemInit+0x108>)
 80026cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026d0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002714 <SystemInit+0x11c>)
 80026d6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80026da:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80026dc:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <SystemInit+0x108>)
 80026de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80026e2:	4a07      	ldr	r2, [pc, #28]	@ (8002700 <SystemInit+0x108>)
 80026e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026e8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000ed00 	.word	0xe000ed00
 80026fc:	52002000 	.word	0x52002000
 8002700:	58024400 	.word	0x58024400
 8002704:	eaf6ed7f 	.word	0xeaf6ed7f
 8002708:	02020200 	.word	0x02020200
 800270c:	01ff0000 	.word	0x01ff0000
 8002710:	01010280 	.word	0x01010280
 8002714:	52004000 	.word	0x52004000

08002718 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800271c:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <ExitRun0Mode+0x2c>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4a08      	ldr	r2, [pc, #32]	@ (8002744 <ExitRun0Mode+0x2c>)
 8002722:	f043 0302 	orr.w	r3, r3, #2
 8002726:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002728:	bf00      	nop
 800272a:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <ExitRun0Mode+0x2c>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f9      	beq.n	800272a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002736:	bf00      	nop
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	58024800 	.word	0x58024800

08002748 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack      /* set stack pointer */
 8002748:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002784 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800274c:	f7ff ffe4 	bl	8002718 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002750:	f7ff ff52 	bl	80025f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002754:	480c      	ldr	r0, [pc, #48]	@ (8002788 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002756:	490d      	ldr	r1, [pc, #52]	@ (800278c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002758:	4a0d      	ldr	r2, [pc, #52]	@ (8002790 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800275a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800275c:	e002      	b.n	8002764 <LoopCopyDataInit>

0800275e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800275e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002762:	3304      	adds	r3, #4

08002764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002768:	d3f9      	bcc.n	800275e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800276a:	4a0a      	ldr	r2, [pc, #40]	@ (8002794 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800276c:	4c0a      	ldr	r4, [pc, #40]	@ (8002798 <LoopFillZerobss+0x22>)
  movs r3, #0
 800276e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002770:	e001      	b.n	8002776 <LoopFillZerobss>

08002772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002774:	3204      	adds	r2, #4

08002776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002778:	d3fb      	bcc.n	8002772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800277a:	f00c ff4d 	bl	800f618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800277e:	f7fd fe17 	bl	80003b0 <main>
  bx  lr
 8002782:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002784:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002788:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800278c:	24000224 	.word	0x24000224
  ldr r2, =_sidata
 8002790:	08011854 	.word	0x08011854
  ldr r2, =_sbss
 8002794:	24000224 	.word	0x24000224
  ldr r4, =_ebss
 8002798:	24000a84 	.word	0x24000a84

0800279c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800279c:	e7fe      	b.n	800279c <ADC3_IRQHandler>
	...

080027a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a6:	2003      	movs	r0, #3
 80027a8:	f002 fc60 	bl	800506c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027ac:	f006 fbca 	bl	8008f44 <HAL_RCC_GetSysClockFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <HAL_Init+0x68>)
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	4913      	ldr	r1, [pc, #76]	@ (800280c <HAL_Init+0x6c>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	fa22 f303 	lsr.w	r3, r2, r3
 80027c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002808 <HAL_Init+0x68>)
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	4a0e      	ldr	r2, [pc, #56]	@ (800280c <HAL_Init+0x6c>)
 80027d4:	5cd3      	ldrb	r3, [r2, r3]
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
 80027e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002810 <HAL_Init+0x70>)
 80027e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002814 <HAL_Init+0x74>)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027ea:	2000      	movs	r0, #0
 80027ec:	f000 f814 	bl	8002818 <HAL_InitTick>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e002      	b.n	8002800 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027fa:	f7ff fb0b 	bl	8001e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	58024400 	.word	0x58024400
 800280c:	08010394 	.word	0x08010394
 8002810:	240001b4 	.word	0x240001b4
 8002814:	240001b0 	.word	0x240001b0

08002818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002820:	4b15      	ldr	r3, [pc, #84]	@ (8002878 <HAL_InitTick+0x60>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e021      	b.n	8002870 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800282c:	4b13      	ldr	r3, [pc, #76]	@ (800287c <HAL_InitTick+0x64>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <HAL_InitTick+0x60>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800283a:	fbb3 f3f1 	udiv	r3, r3, r1
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	4618      	mov	r0, r3
 8002844:	f002 fc45 	bl	80050d2 <HAL_SYSTICK_Config>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e00e      	b.n	8002870 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b0f      	cmp	r3, #15
 8002856:	d80a      	bhi.n	800286e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002858:	2200      	movs	r2, #0
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f002 fc0f 	bl	8005082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002864:	4a06      	ldr	r2, [pc, #24]	@ (8002880 <HAL_InitTick+0x68>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	240001bc 	.word	0x240001bc
 800287c:	240001b0 	.word	0x240001b0
 8002880:	240001b8 	.word	0x240001b8

08002884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <HAL_IncTick+0x20>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <HAL_IncTick+0x24>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4413      	add	r3, r2
 8002894:	4a04      	ldr	r2, [pc, #16]	@ (80028a8 <HAL_IncTick+0x24>)
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	240001bc 	.word	0x240001bc
 80028a8:	2400068c 	.word	0x2400068c

080028ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return uwTick;
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_GetTick+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	2400068c 	.word	0x2400068c

080028c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028cc:	f7ff ffee 	bl	80028ac <HAL_GetTick>
 80028d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d005      	beq.n	80028ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028de:	4b0a      	ldr	r3, [pc, #40]	@ (8002908 <HAL_Delay+0x44>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ea:	bf00      	nop
 80028ec:	f7ff ffde 	bl	80028ac <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d8f7      	bhi.n	80028ec <HAL_Delay+0x28>
  {
  }
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	240001bc 	.word	0x240001bc

0800290c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002916:	4b07      	ldr	r3, [pc, #28]	@ (8002934 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	43db      	mvns	r3, r3
 800291e:	401a      	ands	r2, r3
 8002920:	4904      	ldr	r1, [pc, #16]	@ (8002934 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	58000400 	.word	0x58000400

08002938 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	609a      	str	r2, [r3, #8]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	609a      	str	r2, [r3, #8]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a18      	ldr	r2, [pc, #96]	@ (8002a10 <LL_ADC_SetChannelPreselection+0x70>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d027      	beq.n	8002a02 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d107      	bne.n	80029cc <LL_ADC_SetChannelPreselection+0x2c>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	0e9b      	lsrs	r3, r3, #26
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	2201      	movs	r2, #1
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	e015      	b.n	80029f8 <LL_ADC_SetChannelPreselection+0x58>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 80029e2:	2320      	movs	r3, #32
 80029e4:	e003      	b.n	80029ee <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	fab3 f383 	clz	r3, r3
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	2201      	movs	r2, #1
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	69d2      	ldr	r2, [r2, #28]
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	58026000 	.word	0x58026000

08002a14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	3360      	adds	r3, #96	@ 0x60
 8002a26:	461a      	mov	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4a10      	ldr	r2, [pc, #64]	@ (8002a74 <LL_ADC_SetOffset+0x60>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d10b      	bne.n	8002a50 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a4e:	e00b      	b.n	8002a68 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	430b      	orrs	r3, r1
 8002a62:	431a      	orrs	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	601a      	str	r2, [r3, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	58026000 	.word	0x58026000

08002a78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3360      	adds	r3, #96	@ 0x60
 8002a86:	461a      	mov	r2, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f003 031f 	and.w	r3, r3, #31
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	611a      	str	r2, [r3, #16]
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8002b18 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00e      	beq.n	8002b0a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	3360      	adds	r3, #96	@ 0x60
 8002af0:	461a      	mov	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	601a      	str	r2, [r3, #0]
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	58026000 	.word	0x58026000

08002b1c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b5c <LL_ADC_SetOffsetSaturation+0x40>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d10e      	bne.n	8002b4e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3360      	adds	r3, #96	@ 0x60
 8002b34:	461a      	mov	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002b4e:	bf00      	nop
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	58026000 	.word	0x58026000

08002b60 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ba0 <LL_ADC_SetOffsetSign+0x40>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d10e      	bne.n	8002b92 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3360      	adds	r3, #96	@ 0x60
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	58026000 	.word	0x58026000

08002ba4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3360      	adds	r3, #96	@ 0x60
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf4 <LL_ADC_SetOffsetState+0x50>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d108      	bne.n	8002bd8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002bd6:	e007      	b.n	8002be8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	601a      	str	r2, [r3, #0]
}
 8002be8:	bf00      	nop
 8002bea:	371c      	adds	r7, #28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	58026000 	.word	0x58026000

08002bf8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b087      	sub	sp, #28
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3330      	adds	r3, #48	@ 0x30
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	0a1b      	lsrs	r3, r3, #8
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	4413      	add	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	211f      	movs	r1, #31
 8002c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	401a      	ands	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	0e9b      	lsrs	r3, r3, #26
 8002c56:	f003 011f 	and.w	r1, r3, #31
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	431a      	orrs	r2, r3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c82:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3314      	adds	r3, #20
 8002cac:	461a      	mov	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	0e5b      	lsrs	r3, r3, #25
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	4413      	add	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	0d1b      	lsrs	r3, r3, #20
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	2107      	movs	r1, #7
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	0d1b      	lsrs	r3, r3, #20
 8002cd6:	f003 031f 	and.w	r3, r3, #31
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ce6:	bf00      	nop
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4a1a      	ldr	r2, [pc, #104]	@ (8002d6c <LL_ADC_SetChannelSingleDiff+0x78>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d115      	bne.n	8002d34 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d14:	43db      	mvns	r3, r3
 8002d16:	401a      	ands	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f003 0318 	and.w	r3, r3, #24
 8002d1e:	4914      	ldr	r1, [pc, #80]	@ (8002d70 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002d20:	40d9      	lsrs	r1, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	400b      	ands	r3, r1
 8002d26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002d32:	e014      	b.n	8002d5e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d40:	43db      	mvns	r3, r3
 8002d42:	401a      	ands	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0318 	and.w	r3, r3, #24
 8002d4a:	4909      	ldr	r1, [pc, #36]	@ (8002d70 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002d4c:	40d9      	lsrs	r1, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	400b      	ands	r3, r1
 8002d52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d56:	431a      	orrs	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	58026000 	.word	0x58026000
 8002d70:	000fffff 	.word	0x000fffff

08002d74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 031f 	and.w	r3, r3, #31
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	4b04      	ldr	r3, [pc, #16]	@ (8002dcc <LL_ADC_DisableDeepPowerDown+0x20>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6093      	str	r3, [r2, #8]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	5fffffc0 	.word	0x5fffffc0

08002dd0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002de0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002de4:	d101      	bne.n	8002dea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <LL_ADC_EnableInternalRegulator+0x24>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	6fffffc0 	.word	0x6fffffc0

08002e20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e34:	d101      	bne.n	8002e3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <LL_ADC_Enable+0x24>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	f043 0201 	orr.w	r2, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	7fffffc0 	.word	0x7fffffc0

08002e70 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	4b05      	ldr	r3, [pc, #20]	@ (8002e94 <LL_ADC_Disable+0x24>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	f043 0202 	orr.w	r2, r3, #2
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	7fffffc0 	.word	0x7fffffc0

08002e98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <LL_ADC_IsEnabled+0x18>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <LL_ADC_IsEnabled+0x1a>
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d101      	bne.n	8002ed6 <LL_ADC_IsDisableOngoing+0x18>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <LL_ADC_IsDisableOngoing+0x1a>
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <LL_ADC_REG_StartConversion+0x24>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	f043 0204 	orr.w	r2, r3, #4
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	7fffffc0 	.word	0x7fffffc0

08002f0c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <LL_ADC_REG_StopConversion+0x24>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	f043 0210 	orr.w	r2, r3, #16
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	7fffffc0 	.word	0x7fffffc0

08002f34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d101      	bne.n	8002f4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <LL_ADC_INJ_StopConversion+0x24>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	f043 0220 	orr.w	r2, r3, #32
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	7fffffc0 	.word	0x7fffffc0

08002f84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d101      	bne.n	8002f9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fac:	b590      	push	{r4, r7, lr}
 8002fae:	b089      	sub	sp, #36	@ 0x24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e1ee      	b.n	80033a4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d109      	bne.n	8002fe8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7fe ff37 	bl	8001e48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff feef 	bl	8002dd0 <LL_ADC_IsDeepPowerDownEnabled>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d004      	beq.n	8003002 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fed5 	bl	8002dac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ff0a 	bl	8002e20 <LL_ADC_IsInternalRegulatorEnabled>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d114      	bne.n	800303c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff feee 	bl	8002df8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800301c:	4b8e      	ldr	r3, [pc, #568]	@ (8003258 <HAL_ADC_Init+0x2ac>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	099b      	lsrs	r3, r3, #6
 8003022:	4a8e      	ldr	r2, [pc, #568]	@ (800325c <HAL_ADC_Init+0x2b0>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	099b      	lsrs	r3, r3, #6
 800302a:	3301      	adds	r3, #1
 800302c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800302e:	e002      	b.n	8003036 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	3b01      	subs	r3, #1
 8003034:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f9      	bne.n	8003030 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff feed 	bl	8002e20 <LL_ADC_IsInternalRegulatorEnabled>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10d      	bne.n	8003068 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003050:	f043 0210 	orr.w	r2, r3, #16
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800305c:	f043 0201 	orr.w	r2, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff61 	bl	8002f34 <LL_ADC_REG_IsConversionOngoing>
 8003072:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003078:	f003 0310 	and.w	r3, r3, #16
 800307c:	2b00      	cmp	r3, #0
 800307e:	f040 8188 	bne.w	8003392 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b00      	cmp	r3, #0
 8003086:	f040 8184 	bne.w	8003392 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003092:	f043 0202 	orr.w	r2, r3, #2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fefa 	bl	8002e98 <LL_ADC_IsEnabled>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d136      	bne.n	8003118 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6c      	ldr	r2, [pc, #432]	@ (8003260 <HAL_ADC_Init+0x2b4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d004      	beq.n	80030be <HAL_ADC_Init+0x112>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003264 <HAL_ADC_Init+0x2b8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d10e      	bne.n	80030dc <HAL_ADC_Init+0x130>
 80030be:	4868      	ldr	r0, [pc, #416]	@ (8003260 <HAL_ADC_Init+0x2b4>)
 80030c0:	f7ff feea 	bl	8002e98 <LL_ADC_IsEnabled>
 80030c4:	4604      	mov	r4, r0
 80030c6:	4867      	ldr	r0, [pc, #412]	@ (8003264 <HAL_ADC_Init+0x2b8>)
 80030c8:	f7ff fee6 	bl	8002e98 <LL_ADC_IsEnabled>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4323      	orrs	r3, r4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf0c      	ite	eq
 80030d4:	2301      	moveq	r3, #1
 80030d6:	2300      	movne	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	e008      	b.n	80030ee <HAL_ADC_Init+0x142>
 80030dc:	4862      	ldr	r0, [pc, #392]	@ (8003268 <HAL_ADC_Init+0x2bc>)
 80030de:	f7ff fedb 	bl	8002e98 <LL_ADC_IsEnabled>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d012      	beq.n	8003118 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a5a      	ldr	r2, [pc, #360]	@ (8003260 <HAL_ADC_Init+0x2b4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d004      	beq.n	8003106 <HAL_ADC_Init+0x15a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a58      	ldr	r2, [pc, #352]	@ (8003264 <HAL_ADC_Init+0x2b8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d101      	bne.n	800310a <HAL_ADC_Init+0x15e>
 8003106:	4a59      	ldr	r2, [pc, #356]	@ (800326c <HAL_ADC_Init+0x2c0>)
 8003108:	e000      	b.n	800310c <HAL_ADC_Init+0x160>
 800310a:	4a59      	ldr	r2, [pc, #356]	@ (8003270 <HAL_ADC_Init+0x2c4>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f7ff fc10 	bl	8002938 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a52      	ldr	r2, [pc, #328]	@ (8003268 <HAL_ADC_Init+0x2bc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d129      	bne.n	8003176 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	7e5b      	ldrb	r3, [r3, #25]
 8003126:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800312c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003132:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d013      	beq.n	8003164 <HAL_ADC_Init+0x1b8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b0c      	cmp	r3, #12
 8003142:	d00d      	beq.n	8003160 <HAL_ADC_Init+0x1b4>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b1c      	cmp	r3, #28
 800314a:	d007      	beq.n	800315c <HAL_ADC_Init+0x1b0>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b18      	cmp	r3, #24
 8003152:	d101      	bne.n	8003158 <HAL_ADC_Init+0x1ac>
 8003154:	2318      	movs	r3, #24
 8003156:	e006      	b.n	8003166 <HAL_ADC_Init+0x1ba>
 8003158:	2300      	movs	r3, #0
 800315a:	e004      	b.n	8003166 <HAL_ADC_Init+0x1ba>
 800315c:	2310      	movs	r3, #16
 800315e:	e002      	b.n	8003166 <HAL_ADC_Init+0x1ba>
 8003160:	2308      	movs	r3, #8
 8003162:	e000      	b.n	8003166 <HAL_ADC_Init+0x1ba>
 8003164:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003166:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800316e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003170:	4313      	orrs	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
 8003174:	e00e      	b.n	8003194 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	7e5b      	ldrb	r3, [r3, #25]
 800317a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003180:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003186:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800318e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d106      	bne.n	80031ac <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	3b01      	subs	r3, #1
 80031a4:	045b      	lsls	r3, r3, #17
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d009      	beq.n	80031c8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a26      	ldr	r2, [pc, #152]	@ (8003268 <HAL_ADC_Init+0x2bc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d115      	bne.n	80031fe <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	4b26      	ldr	r3, [pc, #152]	@ (8003274 <HAL_ADC_Init+0x2c8>)
 80031da:	4013      	ands	r3, r2
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	69b9      	ldr	r1, [r7, #24]
 80031e2:	430b      	orrs	r3, r1
 80031e4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	611a      	str	r2, [r3, #16]
 80031fc:	e009      	b.n	8003212 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	4b1c      	ldr	r3, [pc, #112]	@ (8003278 <HAL_ADC_Init+0x2cc>)
 8003206:	4013      	ands	r3, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	69b9      	ldr	r1, [r7, #24]
 800320e:	430b      	orrs	r3, r1
 8003210:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fe8c 	bl	8002f34 <LL_ADC_REG_IsConversionOngoing>
 800321c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff feae 	bl	8002f84 <LL_ADC_INJ_IsConversionOngoing>
 8003228:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	f040 808e 	bne.w	800334e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	f040 808a 	bne.w	800334e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a0a      	ldr	r2, [pc, #40]	@ (8003268 <HAL_ADC_Init+0x2bc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d11b      	bne.n	800327c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7e1b      	ldrb	r3, [r3, #24]
 8003248:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003250:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	e018      	b.n	800328a <HAL_ADC_Init+0x2de>
 8003258:	240001b0 	.word	0x240001b0
 800325c:	053e2d63 	.word	0x053e2d63
 8003260:	40022000 	.word	0x40022000
 8003264:	40022100 	.word	0x40022100
 8003268:	58026000 	.word	0x58026000
 800326c:	40022300 	.word	0x40022300
 8003270:	58026300 	.word	0x58026300
 8003274:	fff04007 	.word	0xfff04007
 8003278:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7e1b      	ldrb	r3, [r3, #24]
 8003280:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	4b46      	ldr	r3, [pc, #280]	@ (80033ac <HAL_ADC_Init+0x400>)
 8003292:	4013      	ands	r3, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	69b9      	ldr	r1, [r7, #24]
 800329a:	430b      	orrs	r3, r1
 800329c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d137      	bne.n	8003318 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ac:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a3f      	ldr	r2, [pc, #252]	@ (80033b0 <HAL_ADC_Init+0x404>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d116      	bne.n	80032e6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	4b3d      	ldr	r3, [pc, #244]	@ (80033b4 <HAL_ADC_Init+0x408>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032ca:	4311      	orrs	r1, r2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032d0:	4311      	orrs	r1, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80032d6:	430a      	orrs	r2, r1
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	611a      	str	r2, [r3, #16]
 80032e4:	e020      	b.n	8003328 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	4b32      	ldr	r3, [pc, #200]	@ (80033b8 <HAL_ADC_Init+0x40c>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032f4:	3a01      	subs	r2, #1
 80032f6:	0411      	lsls	r1, r2, #16
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032fc:	4311      	orrs	r1, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003302:	4311      	orrs	r1, r2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003308:	430a      	orrs	r2, r1
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0201 	orr.w	r2, r2, #1
 8003314:	611a      	str	r2, [r3, #16]
 8003316:	e007      	b.n	8003328 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1b      	ldr	r2, [pc, #108]	@ (80033b0 <HAL_ADC_Init+0x404>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d002      	beq.n	800334e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f001 faff 	bl	800494c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d10c      	bne.n	8003370 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335c:	f023 010f 	bic.w	r1, r3, #15
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	1e5a      	subs	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	631a      	str	r2, [r3, #48]	@ 0x30
 800336e:	e007      	b.n	8003380 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 020f 	bic.w	r2, r2, #15
 800337e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003384:	f023 0303 	bic.w	r3, r3, #3
 8003388:	f043 0201 	orr.w	r2, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003390:	e007      	b.n	80033a2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003396:	f043 0210 	orr.w	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3724      	adds	r7, #36	@ 0x24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd90      	pop	{r4, r7, pc}
 80033ac:	ffffbffc 	.word	0xffffbffc
 80033b0:	58026000 	.word	0x58026000
 80033b4:	fc00f81f 	.word	0xfc00f81f
 80033b8:	fc00f81e 	.word	0xfc00f81e

080033bc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a5c      	ldr	r2, [pc, #368]	@ (800353c <HAL_ADC_Start+0x180>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_ADC_Start+0x1c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003540 <HAL_ADC_Start+0x184>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d101      	bne.n	80033dc <HAL_ADC_Start+0x20>
 80033d8:	4b5a      	ldr	r3, [pc, #360]	@ (8003544 <HAL_ADC_Start+0x188>)
 80033da:	e000      	b.n	80033de <HAL_ADC_Start+0x22>
 80033dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003548 <HAL_ADC_Start+0x18c>)
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fcc8 	bl	8002d74 <LL_ADC_GetMultimode>
 80033e4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fda2 	bl	8002f34 <LL_ADC_REG_IsConversionOngoing>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 809a 	bne.w	800352c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_ADC_Start+0x4a>
 8003402:	2302      	movs	r3, #2
 8003404:	e095      	b.n	8003532 <HAL_ADC_Start+0x176>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f001 f9b2 	bl	8004778 <ADC_Enable>
 8003414:	4603      	mov	r3, r0
 8003416:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 8081 	bne.w	8003522 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003424:	4b49      	ldr	r3, [pc, #292]	@ (800354c <HAL_ADC_Start+0x190>)
 8003426:	4013      	ands	r3, r2
 8003428:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a42      	ldr	r2, [pc, #264]	@ (8003540 <HAL_ADC_Start+0x184>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d002      	beq.n	8003440 <HAL_ADC_Start+0x84>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	e000      	b.n	8003442 <HAL_ADC_Start+0x86>
 8003440:	4b3e      	ldr	r3, [pc, #248]	@ (800353c <HAL_ADC_Start+0x180>)
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	4293      	cmp	r3, r2
 8003448:	d002      	beq.n	8003450 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d105      	bne.n	800345c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003454:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003460:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003468:	d106      	bne.n	8003478 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800346e:	f023 0206 	bic.w	r2, r3, #6
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	665a      	str	r2, [r3, #100]	@ 0x64
 8003476:	e002      	b.n	800347e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	221c      	movs	r2, #28
 8003484:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a2b      	ldr	r2, [pc, #172]	@ (8003540 <HAL_ADC_Start+0x184>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d002      	beq.n	800349e <HAL_ADC_Start+0xe2>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	e000      	b.n	80034a0 <HAL_ADC_Start+0xe4>
 800349e:	4b27      	ldr	r3, [pc, #156]	@ (800353c <HAL_ADC_Start+0x180>)
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d008      	beq.n	80034ba <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	2b05      	cmp	r3, #5
 80034b2:	d002      	beq.n	80034ba <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	2b09      	cmp	r3, #9
 80034b8:	d114      	bne.n	80034e4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d007      	beq.n	80034d8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034cc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80034d0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fd01 	bl	8002ee4 <LL_ADC_REG_StartConversion>
 80034e2:	e025      	b.n	8003530 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a12      	ldr	r2, [pc, #72]	@ (8003540 <HAL_ADC_Start+0x184>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d002      	beq.n	8003500 <HAL_ADC_Start+0x144>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	e000      	b.n	8003502 <HAL_ADC_Start+0x146>
 8003500:	4b0e      	ldr	r3, [pc, #56]	@ (800353c <HAL_ADC_Start+0x180>)
 8003502:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00f      	beq.n	8003530 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003514:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003518:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003520:	e006      	b.n	8003530 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800352a:	e001      	b.n	8003530 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800352c:	2302      	movs	r3, #2
 800352e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003530:	7dfb      	ldrb	r3, [r7, #23]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40022000 	.word	0x40022000
 8003540:	40022100 	.word	0x40022100
 8003544:	40022300 	.word	0x40022300
 8003548:	58026300 	.word	0x58026300
 800354c:	fffff0fe 	.word	0xfffff0fe

08003550 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_ADC_Stop+0x16>
 8003562:	2302      	movs	r3, #2
 8003564:	e021      	b.n	80035aa <HAL_ADC_Stop+0x5a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800356e:	2103      	movs	r1, #3
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f001 f845 	bl	8004600 <ADC_ConversionStop>
 8003576:	4603      	mov	r3, r0
 8003578:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10f      	bne.n	80035a0 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f001 f983 	bl	800488c <ADC_Disable>
 8003586:	4603      	mov	r3, r0
 8003588:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d107      	bne.n	80035a0 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003594:	4b07      	ldr	r3, [pc, #28]	@ (80035b4 <HAL_ADC_Stop+0x64>)
 8003596:	4013      	ands	r3, r2
 8003598:	f043 0201 	orr.w	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	ffffeefe 	.word	0xffffeefe

080035b8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a72      	ldr	r2, [pc, #456]	@ (8003790 <HAL_ADC_PollForConversion+0x1d8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_ADC_PollForConversion+0x1e>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a70      	ldr	r2, [pc, #448]	@ (8003794 <HAL_ADC_PollForConversion+0x1dc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d101      	bne.n	80035da <HAL_ADC_PollForConversion+0x22>
 80035d6:	4b70      	ldr	r3, [pc, #448]	@ (8003798 <HAL_ADC_PollForConversion+0x1e0>)
 80035d8:	e000      	b.n	80035dc <HAL_ADC_PollForConversion+0x24>
 80035da:	4b70      	ldr	r3, [pc, #448]	@ (800379c <HAL_ADC_PollForConversion+0x1e4>)
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fbc9 	bl	8002d74 <LL_ADC_GetMultimode>
 80035e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d102      	bne.n	80035f2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80035ec:	2308      	movs	r3, #8
 80035ee:	61fb      	str	r3, [r7, #28]
 80035f0:	e037      	b.n	8003662 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2b05      	cmp	r3, #5
 80035fc:	d002      	beq.n	8003604 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b09      	cmp	r3, #9
 8003602:	d111      	bne.n	8003628 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003616:	f043 0220 	orr.w	r2, r3, #32
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e0b1      	b.n	8003786 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003622:	2304      	movs	r3, #4
 8003624:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003626:	e01c      	b.n	8003662 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a58      	ldr	r2, [pc, #352]	@ (8003790 <HAL_ADC_PollForConversion+0x1d8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_ADC_PollForConversion+0x84>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a57      	ldr	r2, [pc, #348]	@ (8003794 <HAL_ADC_PollForConversion+0x1dc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d101      	bne.n	8003640 <HAL_ADC_PollForConversion+0x88>
 800363c:	4b56      	ldr	r3, [pc, #344]	@ (8003798 <HAL_ADC_PollForConversion+0x1e0>)
 800363e:	e000      	b.n	8003642 <HAL_ADC_PollForConversion+0x8a>
 8003640:	4b56      	ldr	r3, [pc, #344]	@ (800379c <HAL_ADC_PollForConversion+0x1e4>)
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fba4 	bl	8002d90 <LL_ADC_GetMultiDMATransfer>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003652:	f043 0220 	orr.w	r2, r3, #32
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e093      	b.n	8003786 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800365e:	2304      	movs	r3, #4
 8003660:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003662:	f7ff f923 	bl	80028ac <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003668:	e021      	b.n	80036ae <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003670:	d01d      	beq.n	80036ae <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003672:	f7ff f91b 	bl	80028ac <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d302      	bcc.n	8003688 <HAL_ADC_PollForConversion+0xd0>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d112      	bne.n	80036ae <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4013      	ands	r3, r2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10b      	bne.n	80036ae <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800369a:	f043 0204 	orr.w	r2, r3, #4
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e06b      	b.n	8003786 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0d6      	beq.n	800366a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff fa93 	bl	8002bf8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01c      	beq.n	8003712 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	7e5b      	ldrb	r3, [r3, #25]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d118      	bne.n	8003712 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d111      	bne.n	8003712 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d105      	bne.n	8003712 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800370a:	f043 0201 	orr.w	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1f      	ldr	r2, [pc, #124]	@ (8003794 <HAL_ADC_PollForConversion+0x1dc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d002      	beq.n	8003722 <HAL_ADC_PollForConversion+0x16a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	e000      	b.n	8003724 <HAL_ADC_PollForConversion+0x16c>
 8003722:	4b1b      	ldr	r3, [pc, #108]	@ (8003790 <HAL_ADC_PollForConversion+0x1d8>)
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	4293      	cmp	r3, r2
 800372a:	d008      	beq.n	800373e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2b05      	cmp	r3, #5
 8003736:	d002      	beq.n	800373e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2b09      	cmp	r3, #9
 800373c:	d104      	bne.n	8003748 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	e00c      	b.n	8003762 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a11      	ldr	r2, [pc, #68]	@ (8003794 <HAL_ADC_PollForConversion+0x1dc>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d002      	beq.n	8003758 <HAL_ADC_PollForConversion+0x1a0>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	e000      	b.n	800375a <HAL_ADC_PollForConversion+0x1a2>
 8003758:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <HAL_ADC_PollForConversion+0x1d8>)
 800375a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d104      	bne.n	8003772 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2208      	movs	r2, #8
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	e008      	b.n	8003784 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d103      	bne.n	8003784 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	220c      	movs	r2, #12
 8003782:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40022000 	.word	0x40022000
 8003794:	40022100 	.word	0x40022100
 8003798:	40022300 	.word	0x40022300
 800379c:	58026300 	.word	0x58026300

080037a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	@ 0x28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80037c4:	2300      	movs	r3, #0
 80037c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a87      	ldr	r2, [pc, #540]	@ (80039fc <HAL_ADC_IRQHandler+0x240>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d004      	beq.n	80037ec <HAL_ADC_IRQHandler+0x30>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a86      	ldr	r2, [pc, #536]	@ (8003a00 <HAL_ADC_IRQHandler+0x244>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d101      	bne.n	80037f0 <HAL_ADC_IRQHandler+0x34>
 80037ec:	4b85      	ldr	r3, [pc, #532]	@ (8003a04 <HAL_ADC_IRQHandler+0x248>)
 80037ee:	e000      	b.n	80037f2 <HAL_ADC_IRQHandler+0x36>
 80037f0:	4b85      	ldr	r3, [pc, #532]	@ (8003a08 <HAL_ADC_IRQHandler+0x24c>)
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fabe 	bl	8002d74 <LL_ADC_GetMultimode>
 80037f8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d017      	beq.n	8003834 <HAL_ADC_IRQHandler+0x78>
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d012      	beq.n	8003834 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b00      	cmp	r3, #0
 8003818:	d105      	bne.n	8003826 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800381e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f001 fa64 	bl	8004cf4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2202      	movs	r2, #2
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b00      	cmp	r3, #0
 800383c:	d004      	beq.n	8003848 <HAL_ADC_IRQHandler+0x8c>
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10a      	bne.n	800385e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 8083 	beq.w	800395a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d07d      	beq.n	800395a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b00      	cmp	r3, #0
 8003868:	d105      	bne.n	8003876 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff f9bc 	bl	8002bf8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d062      	beq.n	800394c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a5d      	ldr	r2, [pc, #372]	@ (8003a00 <HAL_ADC_IRQHandler+0x244>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d002      	beq.n	8003896 <HAL_ADC_IRQHandler+0xda>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	e000      	b.n	8003898 <HAL_ADC_IRQHandler+0xdc>
 8003896:	4b59      	ldr	r3, [pc, #356]	@ (80039fc <HAL_ADC_IRQHandler+0x240>)
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	4293      	cmp	r3, r2
 800389e:	d008      	beq.n	80038b2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b05      	cmp	r3, #5
 80038aa:	d002      	beq.n	80038b2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b09      	cmp	r3, #9
 80038b0:	d104      	bne.n	80038bc <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	623b      	str	r3, [r7, #32]
 80038ba:	e00c      	b.n	80038d6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a4f      	ldr	r2, [pc, #316]	@ (8003a00 <HAL_ADC_IRQHandler+0x244>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d002      	beq.n	80038cc <HAL_ADC_IRQHandler+0x110>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	e000      	b.n	80038ce <HAL_ADC_IRQHandler+0x112>
 80038cc:	4b4b      	ldr	r3, [pc, #300]	@ (80039fc <HAL_ADC_IRQHandler+0x240>)
 80038ce:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d135      	bne.n	800394c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d12e      	bne.n	800394c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fb1e 	bl	8002f34 <LL_ADC_REG_IsConversionOngoing>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d11a      	bne.n	8003934 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 020c 	bic.w	r2, r2, #12
 800390c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003912:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d112      	bne.n	800394c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392a:	f043 0201 	orr.w	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	661a      	str	r2, [r3, #96]	@ 0x60
 8003932:	e00b      	b.n	800394c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003938:	f043 0210 	orr.w	r2, r3, #16
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003944:	f043 0201 	orr.w	r2, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7fe f99f 	bl	8001c90 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	220c      	movs	r2, #12
 8003958:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b00      	cmp	r3, #0
 8003962:	d004      	beq.n	800396e <HAL_ADC_IRQHandler+0x1b2>
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10b      	bne.n	8003986 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80a0 	beq.w	8003aba <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 809a 	beq.w	8003aba <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b00      	cmp	r3, #0
 8003990:	d105      	bne.n	800399e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003996:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff f967 	bl	8002c76 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80039a8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff f922 	bl	8002bf8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039b4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a11      	ldr	r2, [pc, #68]	@ (8003a00 <HAL_ADC_IRQHandler+0x244>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d002      	beq.n	80039c6 <HAL_ADC_IRQHandler+0x20a>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	e000      	b.n	80039c8 <HAL_ADC_IRQHandler+0x20c>
 80039c6:	4b0d      	ldr	r3, [pc, #52]	@ (80039fc <HAL_ADC_IRQHandler+0x240>)
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d008      	beq.n	80039e2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b06      	cmp	r3, #6
 80039da:	d002      	beq.n	80039e2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2b07      	cmp	r3, #7
 80039e0:	d104      	bne.n	80039ec <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	623b      	str	r3, [r7, #32]
 80039ea:	e014      	b.n	8003a16 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a03      	ldr	r2, [pc, #12]	@ (8003a00 <HAL_ADC_IRQHandler+0x244>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00a      	beq.n	8003a0c <HAL_ADC_IRQHandler+0x250>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	e008      	b.n	8003a0e <HAL_ADC_IRQHandler+0x252>
 80039fc:	40022000 	.word	0x40022000
 8003a00:	40022100 	.word	0x40022100
 8003a04:	40022300 	.word	0x40022300
 8003a08:	58026300 	.word	0x58026300
 8003a0c:	4b84      	ldr	r3, [pc, #528]	@ (8003c20 <HAL_ADC_IRQHandler+0x464>)
 8003a0e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d047      	beq.n	8003aac <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <HAL_ADC_IRQHandler+0x27a>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d03f      	beq.n	8003aac <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d13a      	bne.n	8003aac <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a40:	2b40      	cmp	r3, #64	@ 0x40
 8003a42:	d133      	bne.n	8003aac <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d12e      	bne.n	8003aac <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff fa96 	bl	8002f84 <LL_ADC_INJ_IsConversionOngoing>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d11a      	bne.n	8003a94 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a6c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d112      	bne.n	8003aac <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a8a:	f043 0201 	orr.w	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	661a      	str	r2, [r3, #96]	@ 0x60
 8003a92:	e00b      	b.n	8003aac <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a98:	f043 0210 	orr.w	r2, r3, #16
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aa4:	f043 0201 	orr.w	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f001 f8f9 	bl	8004ca4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2260      	movs	r2, #96	@ 0x60
 8003ab8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d011      	beq.n	8003ae8 <HAL_ADC_IRQHandler+0x32c>
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00c      	beq.n	8003ae8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f8a8 	bl	8003c30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2280      	movs	r2, #128	@ 0x80
 8003ae6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d012      	beq.n	8003b18 <HAL_ADC_IRQHandler+0x35c>
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00d      	beq.n	8003b18 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b00:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f001 f8df 	bl	8004ccc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d012      	beq.n	8003b48 <HAL_ADC_IRQHandler+0x38c>
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00d      	beq.n	8003b48 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b30:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f001 f8d1 	bl	8004ce0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d043      	beq.n	8003bda <HAL_ADC_IRQHandler+0x41e>
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d03e      	beq.n	8003bda <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003b64:	2301      	movs	r3, #1
 8003b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b68:	e021      	b.n	8003bae <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a2a      	ldr	r2, [pc, #168]	@ (8003c20 <HAL_ADC_IRQHandler+0x464>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d004      	beq.n	8003b84 <HAL_ADC_IRQHandler+0x3c8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a29      	ldr	r2, [pc, #164]	@ (8003c24 <HAL_ADC_IRQHandler+0x468>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d101      	bne.n	8003b88 <HAL_ADC_IRQHandler+0x3cc>
 8003b84:	4b28      	ldr	r3, [pc, #160]	@ (8003c28 <HAL_ADC_IRQHandler+0x46c>)
 8003b86:	e000      	b.n	8003b8a <HAL_ADC_IRQHandler+0x3ce>
 8003b88:	4b28      	ldr	r3, [pc, #160]	@ (8003c2c <HAL_ADC_IRQHandler+0x470>)
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff f900 	bl	8002d90 <LL_ADC_GetMultiDMATransfer>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003b96:	2301      	movs	r3, #1
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b9a:	e008      	b.n	8003bae <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003baa:	2301      	movs	r3, #1
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d10e      	bne.n	8003bd2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bc4:	f043 0202 	orr.w	r2, r3, #2
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f839 	bl	8003c44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2210      	movs	r2, #16
 8003bd8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d018      	beq.n	8003c16 <HAL_ADC_IRQHandler+0x45a>
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d013      	beq.n	8003c16 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bfe:	f043 0208 	orr.w	r2, r3, #8
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c0e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f001 f851 	bl	8004cb8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003c16:	bf00      	nop
 8003c18:	3728      	adds	r7, #40	@ 0x28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40022000 	.word	0x40022000
 8003c24:	40022100 	.word	0x40022100
 8003c28:	40022300 	.word	0x40022300
 8003c2c:	58026300 	.word	0x58026300

08003c30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c58:	b590      	push	{r4, r7, lr}
 8003c5a:	b0a5      	sub	sp, #148	@ 0x94
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c72:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4aa4      	ldr	r2, [pc, #656]	@ (8003f0c <HAL_ADC_ConfigChannel+0x2b4>)
 8003c7a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d102      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0x34>
 8003c86:	2302      	movs	r3, #2
 8003c88:	f000 bca2 	b.w	80045d0 <HAL_ADC_ConfigChannel+0x978>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff f94b 	bl	8002f34 <LL_ADC_REG_IsConversionOngoing>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f040 8486 	bne.w	80045b2 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	db31      	blt.n	8003d12 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a97      	ldr	r2, [pc, #604]	@ (8003f10 <HAL_ADC_ConfigChannel+0x2b8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d02c      	beq.n	8003d12 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d108      	bne.n	8003cd6 <HAL_ADC_ConfigChannel+0x7e>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	0e9b      	lsrs	r3, r3, #26
 8003cca:	f003 031f 	and.w	r3, r3, #31
 8003cce:	2201      	movs	r2, #1
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	e016      	b.n	8003d04 <HAL_ADC_ConfigChannel+0xac>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cde:	fa93 f3a3 	rbit	r3, r3
 8003ce2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003ce4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ce6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003ce8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8003cee:	2320      	movs	r3, #32
 8003cf0:	e003      	b.n	8003cfa <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8003cf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cf4:	fab3 f383 	clz	r3, r3
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	2201      	movs	r2, #1
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	69d1      	ldr	r1, [r2, #28]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6812      	ldr	r2, [r2, #0]
 8003d0e:	430b      	orrs	r3, r1
 8003d10:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6859      	ldr	r1, [r3, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f7fe ff7d 	bl	8002c1e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff f903 	bl	8002f34 <LL_ADC_REG_IsConversionOngoing>
 8003d2e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff f924 	bl	8002f84 <LL_ADC_INJ_IsConversionOngoing>
 8003d3c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f040 824a 	bne.w	80041de <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f040 8245 	bne.w	80041de <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6818      	ldr	r0, [r3, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	6819      	ldr	r1, [r3, #0]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	461a      	mov	r2, r3
 8003d62:	f7fe ff9b 	bl	8002c9c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a69      	ldr	r2, [pc, #420]	@ (8003f10 <HAL_ADC_ConfigChannel+0x2b8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d10d      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	08db      	lsrs	r3, r3, #3
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d8a:	e032      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d8c:	4b61      	ldr	r3, [pc, #388]	@ (8003f14 <HAL_ADC_ConfigChannel+0x2bc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003d94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d98:	d10b      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x15a>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	089b      	lsrs	r3, r3, #2
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	e01d      	b.n	8003dee <HAL_ADC_ConfigChannel+0x196>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10b      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x180>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	695a      	ldr	r2, [r3, #20]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	e00a      	b.n	8003dee <HAL_ADC_ConfigChannel+0x196>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	089b      	lsrs	r3, r3, #2
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d048      	beq.n	8003e8c <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	6919      	ldr	r1, [r3, #16]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e0a:	f7fe fe03 	bl	8002a14 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a3f      	ldr	r2, [pc, #252]	@ (8003f10 <HAL_ADC_ConfigChannel+0x2b8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d119      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	6919      	ldr	r1, [r3, #16]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	461a      	mov	r2, r3
 8003e26:	f7fe fe9b 	bl	8002b60 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6919      	ldr	r1, [r3, #16]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d102      	bne.n	8003e42 <HAL_ADC_ConfigChannel+0x1ea>
 8003e3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e40:	e000      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x1ec>
 8003e42:	2300      	movs	r3, #0
 8003e44:	461a      	mov	r2, r3
 8003e46:	f7fe fe69 	bl	8002b1c <LL_ADC_SetOffsetSaturation>
 8003e4a:	e1c8      	b.n	80041de <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	6919      	ldr	r1, [r3, #16]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d102      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x20c>
 8003e5e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003e62:	e000      	b.n	8003e66 <HAL_ADC_ConfigChannel+0x20e>
 8003e64:	2300      	movs	r3, #0
 8003e66:	461a      	mov	r2, r3
 8003e68:	f7fe fe36 	bl	8002ad8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	6919      	ldr	r1, [r3, #16]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	7e1b      	ldrb	r3, [r3, #24]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d102      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x22a>
 8003e7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e80:	e000      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x22c>
 8003e82:	2300      	movs	r3, #0
 8003e84:	461a      	mov	r2, r3
 8003e86:	f7fe fe0d 	bl	8002aa4 <LL_ADC_SetDataRightShift>
 8003e8a:	e1a8      	b.n	80041de <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1f      	ldr	r2, [pc, #124]	@ (8003f10 <HAL_ADC_ConfigChannel+0x2b8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	f040 815b 	bne.w	800414e <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fe fdea 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x26c>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fe fddf 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	0e9b      	lsrs	r3, r3, #26
 8003ebe:	f003 021f 	and.w	r2, r3, #31
 8003ec2:	e017      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x29c>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe fdd4 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ed6:	fa93 f3a3 	rbit	r3, r3
 8003eda:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003edc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ede:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003ee6:	2320      	movs	r3, #32
 8003ee8:	e003      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8003eea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eec:	fab3 f383 	clz	r3, r3
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10b      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x2c0>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	0e9b      	lsrs	r3, r3, #26
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	e017      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x2e4>
 8003f0c:	47ff0000 	.word	0x47ff0000
 8003f10:	58026000 	.word	0x58026000
 8003f14:	5c001000 	.word	0x5c001000
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f20:	fa93 f3a3 	rbit	r3, r3
 8003f24:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003f26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f28:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003f2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8003f30:	2320      	movs	r3, #32
 8003f32:	e003      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003f34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f36:	fab3 f383 	clz	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d106      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2200      	movs	r2, #0
 8003f46:	2100      	movs	r1, #0
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fe fe2b 	bl	8002ba4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2101      	movs	r1, #1
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe fd8f 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x322>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2101      	movs	r1, #1
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe fd84 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 8003f70:	4603      	mov	r3, r0
 8003f72:	0e9b      	lsrs	r3, r3, #26
 8003f74:	f003 021f 	and.w	r2, r3, #31
 8003f78:	e017      	b.n	8003faa <HAL_ADC_ConfigChannel+0x352>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2101      	movs	r1, #1
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fe fd79 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 8003f86:	4603      	mov	r3, r0
 8003f88:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f8c:	fa93 f3a3 	rbit	r3, r3
 8003f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003f92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f94:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8003f9c:	2320      	movs	r3, #32
 8003f9e:	e003      	b.n	8003fa8 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8003fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa2:	fab3 f383 	clz	r3, r3
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	461a      	mov	r2, r3
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d105      	bne.n	8003fc2 <HAL_ADC_ConfigChannel+0x36a>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	0e9b      	lsrs	r3, r3, #26
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	e011      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x38e>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003fd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003fda:	2320      	movs	r3, #32
 8003fdc:	e003      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fe0:	fab3 f383 	clz	r3, r3
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d106      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fe fdd6 	bl	8002ba4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2102      	movs	r1, #2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fe fd3a 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 8004004:	4603      	mov	r3, r0
 8004006:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x3cc>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2102      	movs	r1, #2
 8004014:	4618      	mov	r0, r3
 8004016:	f7fe fd2f 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 800401a:	4603      	mov	r3, r0
 800401c:	0e9b      	lsrs	r3, r3, #26
 800401e:	f003 021f 	and.w	r2, r3, #31
 8004022:	e017      	b.n	8004054 <HAL_ADC_ConfigChannel+0x3fc>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2102      	movs	r1, #2
 800402a:	4618      	mov	r0, r3
 800402c:	f7fe fd24 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 8004030:	4603      	mov	r3, r0
 8004032:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004036:	fa93 f3a3 	rbit	r3, r3
 800403a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800403c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800403e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004046:	2320      	movs	r3, #32
 8004048:	e003      	b.n	8004052 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800404a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404c:	fab3 f383 	clz	r3, r3
 8004050:	b2db      	uxtb	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <HAL_ADC_ConfigChannel+0x414>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	0e9b      	lsrs	r3, r3, #26
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	e011      	b.n	8004090 <HAL_ADC_ConfigChannel+0x438>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004074:	fa93 f3a3 	rbit	r3, r3
 8004078:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800407a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800407e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004084:	2320      	movs	r3, #32
 8004086:	e003      	b.n	8004090 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408a:	fab3 f383 	clz	r3, r3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	429a      	cmp	r2, r3
 8004092:	d106      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2200      	movs	r2, #0
 800409a:	2102      	movs	r1, #2
 800409c:	4618      	mov	r0, r3
 800409e:	f7fe fd81 	bl	8002ba4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2103      	movs	r1, #3
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fe fce5 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10a      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x476>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2103      	movs	r1, #3
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fe fcda 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 80040c4:	4603      	mov	r3, r0
 80040c6:	0e9b      	lsrs	r3, r3, #26
 80040c8:	f003 021f 	and.w	r2, r3, #31
 80040cc:	e017      	b.n	80040fe <HAL_ADC_ConfigChannel+0x4a6>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2103      	movs	r1, #3
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe fccf 	bl	8002a78 <LL_ADC_GetOffsetChannel>
 80040da:	4603      	mov	r3, r0
 80040dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	fa93 f3a3 	rbit	r3, r3
 80040e4:	61fb      	str	r3, [r7, #28]
  return result;
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80040f0:	2320      	movs	r3, #32
 80040f2:	e003      	b.n	80040fc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	fab3 f383 	clz	r3, r3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004106:	2b00      	cmp	r3, #0
 8004108:	d105      	bne.n	8004116 <HAL_ADC_ConfigChannel+0x4be>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	0e9b      	lsrs	r3, r3, #26
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	e011      	b.n	800413a <HAL_ADC_ConfigChannel+0x4e2>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	fa93 f3a3 	rbit	r3, r3
 8004122:	613b      	str	r3, [r7, #16]
  return result;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800412e:	2320      	movs	r3, #32
 8004130:	e003      	b.n	800413a <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	fab3 f383 	clz	r3, r3
 8004138:	b2db      	uxtb	r3, r3
 800413a:	429a      	cmp	r2, r3
 800413c:	d14f      	bne.n	80041de <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2200      	movs	r2, #0
 8004144:	2103      	movs	r1, #3
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe fd2c 	bl	8002ba4 <LL_ADC_SetOffsetState>
 800414c:	e047      	b.n	80041de <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004154:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	069b      	lsls	r3, r3, #26
 800415e:	429a      	cmp	r2, r3
 8004160:	d107      	bne.n	8004172 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004170:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004178:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	069b      	lsls	r3, r3, #26
 8004182:	429a      	cmp	r2, r3
 8004184:	d107      	bne.n	8004196 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004194:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800419c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	069b      	lsls	r3, r3, #26
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d107      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80041b8:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	069b      	lsls	r3, r3, #26
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d107      	bne.n	80041de <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80041dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe fe58 	bl	8002e98 <LL_ADC_IsEnabled>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f040 81ea 	bne.w	80045c4 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	6819      	ldr	r1, [r3, #0]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	461a      	mov	r2, r3
 80041fe:	f7fe fd79 	bl	8002cf4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	4a7a      	ldr	r2, [pc, #488]	@ (80043f0 <HAL_ADC_ConfigChannel+0x798>)
 8004208:	4293      	cmp	r3, r2
 800420a:	f040 80e0 	bne.w	80043ce <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4977      	ldr	r1, [pc, #476]	@ (80043f4 <HAL_ADC_ConfigChannel+0x79c>)
 8004218:	428b      	cmp	r3, r1
 800421a:	d147      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x654>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4975      	ldr	r1, [pc, #468]	@ (80043f8 <HAL_ADC_ConfigChannel+0x7a0>)
 8004222:	428b      	cmp	r3, r1
 8004224:	d040      	beq.n	80042a8 <HAL_ADC_ConfigChannel+0x650>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4974      	ldr	r1, [pc, #464]	@ (80043fc <HAL_ADC_ConfigChannel+0x7a4>)
 800422c:	428b      	cmp	r3, r1
 800422e:	d039      	beq.n	80042a4 <HAL_ADC_ConfigChannel+0x64c>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4972      	ldr	r1, [pc, #456]	@ (8004400 <HAL_ADC_ConfigChannel+0x7a8>)
 8004236:	428b      	cmp	r3, r1
 8004238:	d032      	beq.n	80042a0 <HAL_ADC_ConfigChannel+0x648>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4971      	ldr	r1, [pc, #452]	@ (8004404 <HAL_ADC_ConfigChannel+0x7ac>)
 8004240:	428b      	cmp	r3, r1
 8004242:	d02b      	beq.n	800429c <HAL_ADC_ConfigChannel+0x644>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	496f      	ldr	r1, [pc, #444]	@ (8004408 <HAL_ADC_ConfigChannel+0x7b0>)
 800424a:	428b      	cmp	r3, r1
 800424c:	d024      	beq.n	8004298 <HAL_ADC_ConfigChannel+0x640>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	496e      	ldr	r1, [pc, #440]	@ (800440c <HAL_ADC_ConfigChannel+0x7b4>)
 8004254:	428b      	cmp	r3, r1
 8004256:	d01d      	beq.n	8004294 <HAL_ADC_ConfigChannel+0x63c>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	496c      	ldr	r1, [pc, #432]	@ (8004410 <HAL_ADC_ConfigChannel+0x7b8>)
 800425e:	428b      	cmp	r3, r1
 8004260:	d016      	beq.n	8004290 <HAL_ADC_ConfigChannel+0x638>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	496b      	ldr	r1, [pc, #428]	@ (8004414 <HAL_ADC_ConfigChannel+0x7bc>)
 8004268:	428b      	cmp	r3, r1
 800426a:	d00f      	beq.n	800428c <HAL_ADC_ConfigChannel+0x634>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4969      	ldr	r1, [pc, #420]	@ (8004418 <HAL_ADC_ConfigChannel+0x7c0>)
 8004272:	428b      	cmp	r3, r1
 8004274:	d008      	beq.n	8004288 <HAL_ADC_ConfigChannel+0x630>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4968      	ldr	r1, [pc, #416]	@ (800441c <HAL_ADC_ConfigChannel+0x7c4>)
 800427c:	428b      	cmp	r3, r1
 800427e:	d101      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x62c>
 8004280:	4b67      	ldr	r3, [pc, #412]	@ (8004420 <HAL_ADC_ConfigChannel+0x7c8>)
 8004282:	e0a0      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 8004284:	2300      	movs	r3, #0
 8004286:	e09e      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 8004288:	4b66      	ldr	r3, [pc, #408]	@ (8004424 <HAL_ADC_ConfigChannel+0x7cc>)
 800428a:	e09c      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 800428c:	4b66      	ldr	r3, [pc, #408]	@ (8004428 <HAL_ADC_ConfigChannel+0x7d0>)
 800428e:	e09a      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 8004290:	4b60      	ldr	r3, [pc, #384]	@ (8004414 <HAL_ADC_ConfigChannel+0x7bc>)
 8004292:	e098      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 8004294:	4b5e      	ldr	r3, [pc, #376]	@ (8004410 <HAL_ADC_ConfigChannel+0x7b8>)
 8004296:	e096      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 8004298:	4b64      	ldr	r3, [pc, #400]	@ (800442c <HAL_ADC_ConfigChannel+0x7d4>)
 800429a:	e094      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 800429c:	4b64      	ldr	r3, [pc, #400]	@ (8004430 <HAL_ADC_ConfigChannel+0x7d8>)
 800429e:	e092      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 80042a0:	4b64      	ldr	r3, [pc, #400]	@ (8004434 <HAL_ADC_ConfigChannel+0x7dc>)
 80042a2:	e090      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 80042a4:	4b64      	ldr	r3, [pc, #400]	@ (8004438 <HAL_ADC_ConfigChannel+0x7e0>)
 80042a6:	e08e      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e08c      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4962      	ldr	r1, [pc, #392]	@ (800443c <HAL_ADC_ConfigChannel+0x7e4>)
 80042b2:	428b      	cmp	r3, r1
 80042b4:	d140      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x6e0>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	494f      	ldr	r1, [pc, #316]	@ (80043f8 <HAL_ADC_ConfigChannel+0x7a0>)
 80042bc:	428b      	cmp	r3, r1
 80042be:	d039      	beq.n	8004334 <HAL_ADC_ConfigChannel+0x6dc>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	494d      	ldr	r1, [pc, #308]	@ (80043fc <HAL_ADC_ConfigChannel+0x7a4>)
 80042c6:	428b      	cmp	r3, r1
 80042c8:	d032      	beq.n	8004330 <HAL_ADC_ConfigChannel+0x6d8>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	494c      	ldr	r1, [pc, #304]	@ (8004400 <HAL_ADC_ConfigChannel+0x7a8>)
 80042d0:	428b      	cmp	r3, r1
 80042d2:	d02b      	beq.n	800432c <HAL_ADC_ConfigChannel+0x6d4>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	494a      	ldr	r1, [pc, #296]	@ (8004404 <HAL_ADC_ConfigChannel+0x7ac>)
 80042da:	428b      	cmp	r3, r1
 80042dc:	d024      	beq.n	8004328 <HAL_ADC_ConfigChannel+0x6d0>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4949      	ldr	r1, [pc, #292]	@ (8004408 <HAL_ADC_ConfigChannel+0x7b0>)
 80042e4:	428b      	cmp	r3, r1
 80042e6:	d01d      	beq.n	8004324 <HAL_ADC_ConfigChannel+0x6cc>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4947      	ldr	r1, [pc, #284]	@ (800440c <HAL_ADC_ConfigChannel+0x7b4>)
 80042ee:	428b      	cmp	r3, r1
 80042f0:	d016      	beq.n	8004320 <HAL_ADC_ConfigChannel+0x6c8>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4946      	ldr	r1, [pc, #280]	@ (8004410 <HAL_ADC_ConfigChannel+0x7b8>)
 80042f8:	428b      	cmp	r3, r1
 80042fa:	d00f      	beq.n	800431c <HAL_ADC_ConfigChannel+0x6c4>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4944      	ldr	r1, [pc, #272]	@ (8004414 <HAL_ADC_ConfigChannel+0x7bc>)
 8004302:	428b      	cmp	r3, r1
 8004304:	d008      	beq.n	8004318 <HAL_ADC_ConfigChannel+0x6c0>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4944      	ldr	r1, [pc, #272]	@ (800441c <HAL_ADC_ConfigChannel+0x7c4>)
 800430c:	428b      	cmp	r3, r1
 800430e:	d101      	bne.n	8004314 <HAL_ADC_ConfigChannel+0x6bc>
 8004310:	4b43      	ldr	r3, [pc, #268]	@ (8004420 <HAL_ADC_ConfigChannel+0x7c8>)
 8004312:	e058      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 8004314:	2300      	movs	r3, #0
 8004316:	e056      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 8004318:	4b43      	ldr	r3, [pc, #268]	@ (8004428 <HAL_ADC_ConfigChannel+0x7d0>)
 800431a:	e054      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 800431c:	4b3d      	ldr	r3, [pc, #244]	@ (8004414 <HAL_ADC_ConfigChannel+0x7bc>)
 800431e:	e052      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 8004320:	4b3b      	ldr	r3, [pc, #236]	@ (8004410 <HAL_ADC_ConfigChannel+0x7b8>)
 8004322:	e050      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 8004324:	4b41      	ldr	r3, [pc, #260]	@ (800442c <HAL_ADC_ConfigChannel+0x7d4>)
 8004326:	e04e      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 8004328:	4b41      	ldr	r3, [pc, #260]	@ (8004430 <HAL_ADC_ConfigChannel+0x7d8>)
 800432a:	e04c      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 800432c:	4b41      	ldr	r3, [pc, #260]	@ (8004434 <HAL_ADC_ConfigChannel+0x7dc>)
 800432e:	e04a      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 8004330:	4b41      	ldr	r3, [pc, #260]	@ (8004438 <HAL_ADC_ConfigChannel+0x7e0>)
 8004332:	e048      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 8004334:	2301      	movs	r3, #1
 8004336:	e046      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4940      	ldr	r1, [pc, #256]	@ (8004440 <HAL_ADC_ConfigChannel+0x7e8>)
 800433e:	428b      	cmp	r3, r1
 8004340:	d140      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x76c>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	492c      	ldr	r1, [pc, #176]	@ (80043f8 <HAL_ADC_ConfigChannel+0x7a0>)
 8004348:	428b      	cmp	r3, r1
 800434a:	d039      	beq.n	80043c0 <HAL_ADC_ConfigChannel+0x768>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	492a      	ldr	r1, [pc, #168]	@ (80043fc <HAL_ADC_ConfigChannel+0x7a4>)
 8004352:	428b      	cmp	r3, r1
 8004354:	d032      	beq.n	80043bc <HAL_ADC_ConfigChannel+0x764>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4929      	ldr	r1, [pc, #164]	@ (8004400 <HAL_ADC_ConfigChannel+0x7a8>)
 800435c:	428b      	cmp	r3, r1
 800435e:	d02b      	beq.n	80043b8 <HAL_ADC_ConfigChannel+0x760>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4927      	ldr	r1, [pc, #156]	@ (8004404 <HAL_ADC_ConfigChannel+0x7ac>)
 8004366:	428b      	cmp	r3, r1
 8004368:	d024      	beq.n	80043b4 <HAL_ADC_ConfigChannel+0x75c>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4926      	ldr	r1, [pc, #152]	@ (8004408 <HAL_ADC_ConfigChannel+0x7b0>)
 8004370:	428b      	cmp	r3, r1
 8004372:	d01d      	beq.n	80043b0 <HAL_ADC_ConfigChannel+0x758>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4924      	ldr	r1, [pc, #144]	@ (800440c <HAL_ADC_ConfigChannel+0x7b4>)
 800437a:	428b      	cmp	r3, r1
 800437c:	d016      	beq.n	80043ac <HAL_ADC_ConfigChannel+0x754>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4923      	ldr	r1, [pc, #140]	@ (8004410 <HAL_ADC_ConfigChannel+0x7b8>)
 8004384:	428b      	cmp	r3, r1
 8004386:	d00f      	beq.n	80043a8 <HAL_ADC_ConfigChannel+0x750>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4926      	ldr	r1, [pc, #152]	@ (8004428 <HAL_ADC_ConfigChannel+0x7d0>)
 800438e:	428b      	cmp	r3, r1
 8004390:	d008      	beq.n	80043a4 <HAL_ADC_ConfigChannel+0x74c>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	492b      	ldr	r1, [pc, #172]	@ (8004444 <HAL_ADC_ConfigChannel+0x7ec>)
 8004398:	428b      	cmp	r3, r1
 800439a:	d101      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x748>
 800439c:	4b2a      	ldr	r3, [pc, #168]	@ (8004448 <HAL_ADC_ConfigChannel+0x7f0>)
 800439e:	e012      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 80043a0:	2300      	movs	r3, #0
 80043a2:	e010      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 80043a4:	4b27      	ldr	r3, [pc, #156]	@ (8004444 <HAL_ADC_ConfigChannel+0x7ec>)
 80043a6:	e00e      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 80043a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004414 <HAL_ADC_ConfigChannel+0x7bc>)
 80043aa:	e00c      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 80043ac:	4b18      	ldr	r3, [pc, #96]	@ (8004410 <HAL_ADC_ConfigChannel+0x7b8>)
 80043ae:	e00a      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 80043b0:	4b1e      	ldr	r3, [pc, #120]	@ (800442c <HAL_ADC_ConfigChannel+0x7d4>)
 80043b2:	e008      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 80043b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004430 <HAL_ADC_ConfigChannel+0x7d8>)
 80043b6:	e006      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 80043b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004434 <HAL_ADC_ConfigChannel+0x7dc>)
 80043ba:	e004      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 80043bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004438 <HAL_ADC_ConfigChannel+0x7e0>)
 80043be:	e002      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x76e>
 80043c4:	2300      	movs	r3, #0
 80043c6:	4619      	mov	r1, r3
 80043c8:	4610      	mov	r0, r2
 80043ca:	f7fe fae9 	bl	80029a0 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f280 80f6 	bge.w	80045c4 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a05      	ldr	r2, [pc, #20]	@ (80043f4 <HAL_ADC_ConfigChannel+0x79c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <HAL_ADC_ConfigChannel+0x794>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a15      	ldr	r2, [pc, #84]	@ (800443c <HAL_ADC_ConfigChannel+0x7e4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d131      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x7f8>
 80043ec:	4b17      	ldr	r3, [pc, #92]	@ (800444c <HAL_ADC_ConfigChannel+0x7f4>)
 80043ee:	e030      	b.n	8004452 <HAL_ADC_ConfigChannel+0x7fa>
 80043f0:	47ff0000 	.word	0x47ff0000
 80043f4:	40022000 	.word	0x40022000
 80043f8:	04300002 	.word	0x04300002
 80043fc:	08600004 	.word	0x08600004
 8004400:	0c900008 	.word	0x0c900008
 8004404:	10c00010 	.word	0x10c00010
 8004408:	14f00020 	.word	0x14f00020
 800440c:	2a000400 	.word	0x2a000400
 8004410:	2e300800 	.word	0x2e300800
 8004414:	32601000 	.word	0x32601000
 8004418:	43210000 	.word	0x43210000
 800441c:	4b840000 	.word	0x4b840000
 8004420:	4fb80000 	.word	0x4fb80000
 8004424:	47520000 	.word	0x47520000
 8004428:	36902000 	.word	0x36902000
 800442c:	25b00200 	.word	0x25b00200
 8004430:	21800100 	.word	0x21800100
 8004434:	1d500080 	.word	0x1d500080
 8004438:	19200040 	.word	0x19200040
 800443c:	40022100 	.word	0x40022100
 8004440:	58026000 	.word	0x58026000
 8004444:	3ac04000 	.word	0x3ac04000
 8004448:	3ef08000 	.word	0x3ef08000
 800444c:	40022300 	.word	0x40022300
 8004450:	4b61      	ldr	r3, [pc, #388]	@ (80045d8 <HAL_ADC_ConfigChannel+0x980>)
 8004452:	4618      	mov	r0, r3
 8004454:	f7fe fa96 	bl	8002984 <LL_ADC_GetCommonPathInternalCh>
 8004458:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a5f      	ldr	r2, [pc, #380]	@ (80045dc <HAL_ADC_ConfigChannel+0x984>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d004      	beq.n	800446e <HAL_ADC_ConfigChannel+0x816>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a5d      	ldr	r2, [pc, #372]	@ (80045e0 <HAL_ADC_ConfigChannel+0x988>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d10e      	bne.n	800448c <HAL_ADC_ConfigChannel+0x834>
 800446e:	485b      	ldr	r0, [pc, #364]	@ (80045dc <HAL_ADC_ConfigChannel+0x984>)
 8004470:	f7fe fd12 	bl	8002e98 <LL_ADC_IsEnabled>
 8004474:	4604      	mov	r4, r0
 8004476:	485a      	ldr	r0, [pc, #360]	@ (80045e0 <HAL_ADC_ConfigChannel+0x988>)
 8004478:	f7fe fd0e 	bl	8002e98 <LL_ADC_IsEnabled>
 800447c:	4603      	mov	r3, r0
 800447e:	4323      	orrs	r3, r4
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	e008      	b.n	800449e <HAL_ADC_ConfigChannel+0x846>
 800448c:	4855      	ldr	r0, [pc, #340]	@ (80045e4 <HAL_ADC_ConfigChannel+0x98c>)
 800448e:	f7fe fd03 	bl	8002e98 <LL_ADC_IsEnabled>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	bf0c      	ite	eq
 8004498:	2301      	moveq	r3, #1
 800449a:	2300      	movne	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d07d      	beq.n	800459e <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a50      	ldr	r2, [pc, #320]	@ (80045e8 <HAL_ADC_ConfigChannel+0x990>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d130      	bne.n	800450e <HAL_ADC_ConfigChannel+0x8b6>
 80044ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d12b      	bne.n	800450e <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a4a      	ldr	r2, [pc, #296]	@ (80045e4 <HAL_ADC_ConfigChannel+0x98c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	f040 8081 	bne.w	80045c4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a45      	ldr	r2, [pc, #276]	@ (80045dc <HAL_ADC_ConfigChannel+0x984>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <HAL_ADC_ConfigChannel+0x87e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a43      	ldr	r2, [pc, #268]	@ (80045e0 <HAL_ADC_ConfigChannel+0x988>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <HAL_ADC_ConfigChannel+0x882>
 80044d6:	4a45      	ldr	r2, [pc, #276]	@ (80045ec <HAL_ADC_ConfigChannel+0x994>)
 80044d8:	e000      	b.n	80044dc <HAL_ADC_ConfigChannel+0x884>
 80044da:	4a3f      	ldr	r2, [pc, #252]	@ (80045d8 <HAL_ADC_ConfigChannel+0x980>)
 80044dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044e2:	4619      	mov	r1, r3
 80044e4:	4610      	mov	r0, r2
 80044e6:	f7fe fa3a 	bl	800295e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044ea:	4b41      	ldr	r3, [pc, #260]	@ (80045f0 <HAL_ADC_ConfigChannel+0x998>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	099b      	lsrs	r3, r3, #6
 80044f0:	4a40      	ldr	r2, [pc, #256]	@ (80045f4 <HAL_ADC_ConfigChannel+0x99c>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	3301      	adds	r3, #1
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80044fe:	e002      	b.n	8004506 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3b01      	subs	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1f9      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800450c:	e05a      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a39      	ldr	r2, [pc, #228]	@ (80045f8 <HAL_ADC_ConfigChannel+0x9a0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d11e      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x8fe>
 8004518:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800451a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d119      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2f      	ldr	r2, [pc, #188]	@ (80045e4 <HAL_ADC_ConfigChannel+0x98c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d14b      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a2a      	ldr	r2, [pc, #168]	@ (80045dc <HAL_ADC_ConfigChannel+0x984>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d004      	beq.n	8004540 <HAL_ADC_ConfigChannel+0x8e8>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a29      	ldr	r2, [pc, #164]	@ (80045e0 <HAL_ADC_ConfigChannel+0x988>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d101      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x8ec>
 8004540:	4a2a      	ldr	r2, [pc, #168]	@ (80045ec <HAL_ADC_ConfigChannel+0x994>)
 8004542:	e000      	b.n	8004546 <HAL_ADC_ConfigChannel+0x8ee>
 8004544:	4a24      	ldr	r2, [pc, #144]	@ (80045d8 <HAL_ADC_ConfigChannel+0x980>)
 8004546:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004548:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800454c:	4619      	mov	r1, r3
 800454e:	4610      	mov	r0, r2
 8004550:	f7fe fa05 	bl	800295e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004554:	e036      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a28      	ldr	r2, [pc, #160]	@ (80045fc <HAL_ADC_ConfigChannel+0x9a4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d131      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x96c>
 8004560:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d12c      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1d      	ldr	r2, [pc, #116]	@ (80045e4 <HAL_ADC_ConfigChannel+0x98c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d127      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a18      	ldr	r2, [pc, #96]	@ (80045dc <HAL_ADC_ConfigChannel+0x984>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_ADC_ConfigChannel+0x930>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a17      	ldr	r2, [pc, #92]	@ (80045e0 <HAL_ADC_ConfigChannel+0x988>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d101      	bne.n	800458c <HAL_ADC_ConfigChannel+0x934>
 8004588:	4a18      	ldr	r2, [pc, #96]	@ (80045ec <HAL_ADC_ConfigChannel+0x994>)
 800458a:	e000      	b.n	800458e <HAL_ADC_ConfigChannel+0x936>
 800458c:	4a12      	ldr	r2, [pc, #72]	@ (80045d8 <HAL_ADC_ConfigChannel+0x980>)
 800458e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004590:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f7fe f9e1 	bl	800295e <LL_ADC_SetCommonPathInternalCh>
 800459c:	e012      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a2:	f043 0220 	orr.w	r2, r3, #32
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80045b0:	e008      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b6:	f043 0220 	orr.w	r2, r3, #32
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80045cc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3794      	adds	r7, #148	@ 0x94
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd90      	pop	{r4, r7, pc}
 80045d8:	58026300 	.word	0x58026300
 80045dc:	40022000 	.word	0x40022000
 80045e0:	40022100 	.word	0x40022100
 80045e4:	58026000 	.word	0x58026000
 80045e8:	c7520000 	.word	0xc7520000
 80045ec:	40022300 	.word	0x40022300
 80045f0:	240001b0 	.word	0x240001b0
 80045f4:	053e2d63 	.word	0x053e2d63
 80045f8:	c3210000 	.word	0xc3210000
 80045fc:	cb840000 	.word	0xcb840000

08004600 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800460a:	2300      	movs	r3, #0
 800460c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f7fe fc8c 	bl	8002f34 <LL_ADC_REG_IsConversionOngoing>
 800461c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f7fe fcae 	bl	8002f84 <LL_ADC_INJ_IsConversionOngoing>
 8004628:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d103      	bne.n	8004638 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 8098 	beq.w	8004768 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d02a      	beq.n	800469c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	7e5b      	ldrb	r3, [r3, #25]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d126      	bne.n	800469c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	7e1b      	ldrb	r3, [r3, #24]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d122      	bne.n	800469c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004656:	2301      	movs	r3, #1
 8004658:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800465a:	e014      	b.n	8004686 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	4a45      	ldr	r2, [pc, #276]	@ (8004774 <ADC_ConversionStop+0x174>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d90d      	bls.n	8004680 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004668:	f043 0210 	orr.w	r2, r3, #16
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004674:	f043 0201 	orr.w	r2, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e074      	b.n	800476a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	3301      	adds	r3, #1
 8004684:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004690:	2b40      	cmp	r3, #64	@ 0x40
 8004692:	d1e3      	bne.n	800465c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2240      	movs	r2, #64	@ 0x40
 800469a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d014      	beq.n	80046cc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fe fc44 	bl	8002f34 <LL_ADC_REG_IsConversionOngoing>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00c      	beq.n	80046cc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fe fc01 	bl	8002ebe <LL_ADC_IsDisableOngoing>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d104      	bne.n	80046cc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fe fc20 	bl	8002f0c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d014      	beq.n	80046fc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe fc54 	bl	8002f84 <LL_ADC_INJ_IsConversionOngoing>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00c      	beq.n	80046fc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fbe9 	bl	8002ebe <LL_ADC_IsDisableOngoing>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d104      	bne.n	80046fc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fe fc30 	bl	8002f5c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d005      	beq.n	800470e <ADC_ConversionStop+0x10e>
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b03      	cmp	r3, #3
 8004706:	d105      	bne.n	8004714 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004708:	230c      	movs	r3, #12
 800470a:	617b      	str	r3, [r7, #20]
        break;
 800470c:	e005      	b.n	800471a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800470e:	2308      	movs	r3, #8
 8004710:	617b      	str	r3, [r7, #20]
        break;
 8004712:	e002      	b.n	800471a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004714:	2304      	movs	r3, #4
 8004716:	617b      	str	r3, [r7, #20]
        break;
 8004718:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800471a:	f7fe f8c7 	bl	80028ac <HAL_GetTick>
 800471e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004720:	e01b      	b.n	800475a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004722:	f7fe f8c3 	bl	80028ac <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b05      	cmp	r3, #5
 800472e:	d914      	bls.n	800475a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	4013      	ands	r3, r2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00d      	beq.n	800475a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004742:	f043 0210 	orr.w	r2, r3, #16
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800474e:	f043 0201 	orr.w	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e007      	b.n	800476a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	4013      	ands	r3, r2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1dc      	bne.n	8004722 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3720      	adds	r7, #32
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	000cdbff 	.word	0x000cdbff

08004778 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f7fe fb87 	bl	8002e98 <LL_ADC_IsEnabled>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d16e      	bne.n	800486e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	4b38      	ldr	r3, [pc, #224]	@ (8004878 <ADC_Enable+0x100>)
 8004798:	4013      	ands	r3, r2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00d      	beq.n	80047ba <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a2:	f043 0210 	orr.w	r2, r3, #16
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047ae:	f043 0201 	orr.w	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e05a      	b.n	8004870 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fe fb42 	bl	8002e48 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80047c4:	f7fe f872 	bl	80028ac <HAL_GetTick>
 80047c8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a2b      	ldr	r2, [pc, #172]	@ (800487c <ADC_Enable+0x104>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d004      	beq.n	80047de <ADC_Enable+0x66>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a29      	ldr	r2, [pc, #164]	@ (8004880 <ADC_Enable+0x108>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d101      	bne.n	80047e2 <ADC_Enable+0x6a>
 80047de:	4b29      	ldr	r3, [pc, #164]	@ (8004884 <ADC_Enable+0x10c>)
 80047e0:	e000      	b.n	80047e4 <ADC_Enable+0x6c>
 80047e2:	4b29      	ldr	r3, [pc, #164]	@ (8004888 <ADC_Enable+0x110>)
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fe fac5 	bl	8002d74 <LL_ADC_GetMultimode>
 80047ea:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a23      	ldr	r2, [pc, #140]	@ (8004880 <ADC_Enable+0x108>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d002      	beq.n	80047fc <ADC_Enable+0x84>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	e000      	b.n	80047fe <ADC_Enable+0x86>
 80047fc:	4b1f      	ldr	r3, [pc, #124]	@ (800487c <ADC_Enable+0x104>)
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6812      	ldr	r2, [r2, #0]
 8004802:	4293      	cmp	r3, r2
 8004804:	d02c      	beq.n	8004860 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d130      	bne.n	800486e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800480c:	e028      	b.n	8004860 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe fb40 	bl	8002e98 <LL_ADC_IsEnabled>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d104      	bne.n	8004828 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f7fe fb10 	bl	8002e48 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004828:	f7fe f840 	bl	80028ac <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d914      	bls.n	8004860 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b01      	cmp	r3, #1
 8004842:	d00d      	beq.n	8004860 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004848:	f043 0210 	orr.w	r2, r3, #16
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004854:	f043 0201 	orr.w	r2, r3, #1
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e007      	b.n	8004870 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b01      	cmp	r3, #1
 800486c:	d1cf      	bne.n	800480e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	8000003f 	.word	0x8000003f
 800487c:	40022000 	.word	0x40022000
 8004880:	40022100 	.word	0x40022100
 8004884:	40022300 	.word	0x40022300
 8004888:	58026300 	.word	0x58026300

0800488c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f7fe fb10 	bl	8002ebe <LL_ADC_IsDisableOngoing>
 800489e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe faf7 	bl	8002e98 <LL_ADC_IsEnabled>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d047      	beq.n	8004940 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d144      	bne.n	8004940 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 030d 	and.w	r3, r3, #13
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d10c      	bne.n	80048de <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fe fad1 	bl	8002e70 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2203      	movs	r2, #3
 80048d4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80048d6:	f7fd ffe9 	bl	80028ac <HAL_GetTick>
 80048da:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048dc:	e029      	b.n	8004932 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e2:	f043 0210 	orr.w	r2, r3, #16
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048ee:	f043 0201 	orr.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e023      	b.n	8004942 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80048fa:	f7fd ffd7 	bl	80028ac <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d914      	bls.n	8004932 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00d      	beq.n	8004932 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800491a:	f043 0210 	orr.w	r2, r3, #16
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004926:	f043 0201 	orr.w	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e007      	b.n	8004942 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1dc      	bne.n	80048fa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a6c      	ldr	r2, [pc, #432]	@ (8004b0c <ADC_ConfigureBoostMode+0x1c0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d004      	beq.n	8004968 <ADC_ConfigureBoostMode+0x1c>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a6b      	ldr	r2, [pc, #428]	@ (8004b10 <ADC_ConfigureBoostMode+0x1c4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d109      	bne.n	800497c <ADC_ConfigureBoostMode+0x30>
 8004968:	4b6a      	ldr	r3, [pc, #424]	@ (8004b14 <ADC_ConfigureBoostMode+0x1c8>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004970:	2b00      	cmp	r3, #0
 8004972:	bf14      	ite	ne
 8004974:	2301      	movne	r3, #1
 8004976:	2300      	moveq	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	e008      	b.n	800498e <ADC_ConfigureBoostMode+0x42>
 800497c:	4b66      	ldr	r3, [pc, #408]	@ (8004b18 <ADC_ConfigureBoostMode+0x1cc>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004984:	2b00      	cmp	r3, #0
 8004986:	bf14      	ite	ne
 8004988:	2301      	movne	r3, #1
 800498a:	2300      	moveq	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d01c      	beq.n	80049cc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004992:	f004 fc51 	bl	8009238 <HAL_RCC_GetHCLKFreq>
 8004996:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049a0:	d010      	beq.n	80049c4 <ADC_ConfigureBoostMode+0x78>
 80049a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049a6:	d873      	bhi.n	8004a90 <ADC_ConfigureBoostMode+0x144>
 80049a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ac:	d002      	beq.n	80049b4 <ADC_ConfigureBoostMode+0x68>
 80049ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80049b2:	d16d      	bne.n	8004a90 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	0c1b      	lsrs	r3, r3, #16
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	60fb      	str	r3, [r7, #12]
        break;
 80049c2:	e068      	b.n	8004a96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	089b      	lsrs	r3, r3, #2
 80049c8:	60fb      	str	r3, [r7, #12]
        break;
 80049ca:	e064      	b.n	8004a96 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80049cc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80049d0:	f04f 0100 	mov.w	r1, #0
 80049d4:	f005 fe16 	bl	800a604 <HAL_RCCEx_GetPeriphCLKFreq>
 80049d8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80049e2:	d051      	beq.n	8004a88 <ADC_ConfigureBoostMode+0x13c>
 80049e4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80049e8:	d854      	bhi.n	8004a94 <ADC_ConfigureBoostMode+0x148>
 80049ea:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80049ee:	d047      	beq.n	8004a80 <ADC_ConfigureBoostMode+0x134>
 80049f0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80049f4:	d84e      	bhi.n	8004a94 <ADC_ConfigureBoostMode+0x148>
 80049f6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80049fa:	d03d      	beq.n	8004a78 <ADC_ConfigureBoostMode+0x12c>
 80049fc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004a00:	d848      	bhi.n	8004a94 <ADC_ConfigureBoostMode+0x148>
 8004a02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a06:	d033      	beq.n	8004a70 <ADC_ConfigureBoostMode+0x124>
 8004a08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a0c:	d842      	bhi.n	8004a94 <ADC_ConfigureBoostMode+0x148>
 8004a0e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004a12:	d029      	beq.n	8004a68 <ADC_ConfigureBoostMode+0x11c>
 8004a14:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004a18:	d83c      	bhi.n	8004a94 <ADC_ConfigureBoostMode+0x148>
 8004a1a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004a1e:	d01a      	beq.n	8004a56 <ADC_ConfigureBoostMode+0x10a>
 8004a20:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004a24:	d836      	bhi.n	8004a94 <ADC_ConfigureBoostMode+0x148>
 8004a26:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004a2a:	d014      	beq.n	8004a56 <ADC_ConfigureBoostMode+0x10a>
 8004a2c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004a30:	d830      	bhi.n	8004a94 <ADC_ConfigureBoostMode+0x148>
 8004a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a36:	d00e      	beq.n	8004a56 <ADC_ConfigureBoostMode+0x10a>
 8004a38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a3c:	d82a      	bhi.n	8004a94 <ADC_ConfigureBoostMode+0x148>
 8004a3e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a42:	d008      	beq.n	8004a56 <ADC_ConfigureBoostMode+0x10a>
 8004a44:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a48:	d824      	bhi.n	8004a94 <ADC_ConfigureBoostMode+0x148>
 8004a4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a4e:	d002      	beq.n	8004a56 <ADC_ConfigureBoostMode+0x10a>
 8004a50:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004a54:	d11e      	bne.n	8004a94 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	0c9b      	lsrs	r3, r3, #18
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a64:	60fb      	str	r3, [r7, #12]
        break;
 8004a66:	e016      	b.n	8004a96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	091b      	lsrs	r3, r3, #4
 8004a6c:	60fb      	str	r3, [r7, #12]
        break;
 8004a6e:	e012      	b.n	8004a96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	60fb      	str	r3, [r7, #12]
        break;
 8004a76:	e00e      	b.n	8004a96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	099b      	lsrs	r3, r3, #6
 8004a7c:	60fb      	str	r3, [r7, #12]
        break;
 8004a7e:	e00a      	b.n	8004a96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	09db      	lsrs	r3, r3, #7
 8004a84:	60fb      	str	r3, [r7, #12]
        break;
 8004a86:	e006      	b.n	8004a96 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	0a1b      	lsrs	r3, r3, #8
 8004a8c:	60fb      	str	r3, [r7, #12]
        break;
 8004a8e:	e002      	b.n	8004a96 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004a90:	bf00      	nop
 8004a92:	e000      	b.n	8004a96 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004a94:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	085b      	lsrs	r3, r3, #1
 8004a9a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8004b1c <ADC_ConfigureBoostMode+0x1d0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d808      	bhi.n	8004ab6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004ab2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004ab4:	e025      	b.n	8004b02 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4a19      	ldr	r2, [pc, #100]	@ (8004b20 <ADC_ConfigureBoostMode+0x1d4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d80a      	bhi.n	8004ad4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ad0:	609a      	str	r2, [r3, #8]
}
 8004ad2:	e016      	b.n	8004b02 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4a13      	ldr	r2, [pc, #76]	@ (8004b24 <ADC_ConfigureBoostMode+0x1d8>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d80a      	bhi.n	8004af2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aee:	609a      	str	r2, [r3, #8]
}
 8004af0:	e007      	b.n	8004b02 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004b00:	609a      	str	r2, [r3, #8]
}
 8004b02:	bf00      	nop
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40022000 	.word	0x40022000
 8004b10:	40022100 	.word	0x40022100
 8004b14:	40022300 	.word	0x40022300
 8004b18:	58026300 	.word	0x58026300
 8004b1c:	005f5e10 	.word	0x005f5e10
 8004b20:	00bebc20 	.word	0x00bebc20
 8004b24:	017d7840 	.word	0x017d7840

08004b28 <LL_ADC_IsEnabled>:
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d101      	bne.n	8004b40 <LL_ADC_IsEnabled+0x18>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <LL_ADC_IsEnabled+0x1a>
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <LL_ADC_StartCalibration>:
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	4b09      	ldr	r3, [pc, #36]	@ (8004b88 <LL_ADC_StartCalibration+0x38>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004b70:	430a      	orrs	r2, r1
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	609a      	str	r2, [r3, #8]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	3ffeffc0 	.word	0x3ffeffc0

08004b8c <LL_ADC_IsCalibrationOnGoing>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ba0:	d101      	bne.n	8004ba6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <LL_ADC_REG_IsConversionOngoing>:
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d101      	bne.n	8004bcc <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
	...

08004bdc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_ADCEx_Calibration_Start+0x1e>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e04c      	b.n	8004c94 <HAL_ADCEx_Calibration_Start+0xb8>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f7ff fe42 	bl	800488c <ADC_Disable>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004c0c:	7dfb      	ldrb	r3, [r7, #23]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d135      	bne.n	8004c7e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004c16:	4b21      	ldr	r3, [pc, #132]	@ (8004c9c <HAL_ADCEx_Calibration_Start+0xc0>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	f043 0202 	orr.w	r2, r3, #2
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff ff90 	bl	8004b50 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c30:	e014      	b.n	8004c5c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	3301      	adds	r3, #1
 8004c36:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4a19      	ldr	r2, [pc, #100]	@ (8004ca0 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d30d      	bcc.n	8004c5c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c44:	f023 0312 	bic.w	r3, r3, #18
 8004c48:	f043 0210 	orr.w	r2, r3, #16
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e01b      	b.n	8004c94 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff ff93 	bl	8004b8c <LL_ADC_IsCalibrationOnGoing>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e2      	bne.n	8004c32 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c70:	f023 0303 	bic.w	r3, r3, #3
 8004c74:	f043 0201 	orr.w	r2, r3, #1
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	661a      	str	r2, [r3, #96]	@ 0x60
 8004c7c:	e005      	b.n	8004c8a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c82:	f043 0210 	orr.w	r2, r3, #16
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	ffffeefd 	.word	0xffffeefd
 8004ca0:	25c3f800 	.word	0x25c3f800

08004ca4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004d08:	b590      	push	{r4, r7, lr}
 8004d0a:	b0a3      	sub	sp, #140	@ 0x8c
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e0c1      	b.n	8004eaa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004d32:	2300      	movs	r3, #0
 8004d34:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a5e      	ldr	r2, [pc, #376]	@ (8004eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d102      	bne.n	8004d46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004d40:	4b5d      	ldr	r3, [pc, #372]	@ (8004eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	e001      	b.n	8004d4a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10b      	bne.n	8004d68 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0a0      	b.n	8004eaa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff ff22 	bl	8004bb4 <LL_ADC_REG_IsConversionOngoing>
 8004d70:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff ff1b 	bl	8004bb4 <LL_ADC_REG_IsConversionOngoing>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f040 8081 	bne.w	8004e88 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004d86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d17c      	bne.n	8004e88 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a48      	ldr	r2, [pc, #288]	@ (8004eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d004      	beq.n	8004da2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a46      	ldr	r2, [pc, #280]	@ (8004eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d101      	bne.n	8004da6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004da2:	4b46      	ldr	r3, [pc, #280]	@ (8004ebc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004da4:	e000      	b.n	8004da8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004da6:	4b46      	ldr	r3, [pc, #280]	@ (8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004da8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d039      	beq.n	8004e26 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004db2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004dc2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a3a      	ldr	r2, [pc, #232]	@ (8004eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d004      	beq.n	8004dd8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a39      	ldr	r2, [pc, #228]	@ (8004eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d10e      	bne.n	8004df6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004dd8:	4836      	ldr	r0, [pc, #216]	@ (8004eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004dda:	f7ff fea5 	bl	8004b28 <LL_ADC_IsEnabled>
 8004dde:	4604      	mov	r4, r0
 8004de0:	4835      	ldr	r0, [pc, #212]	@ (8004eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004de2:	f7ff fea1 	bl	8004b28 <LL_ADC_IsEnabled>
 8004de6:	4603      	mov	r3, r0
 8004de8:	4323      	orrs	r3, r4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bf0c      	ite	eq
 8004dee:	2301      	moveq	r3, #1
 8004df0:	2300      	movne	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	e008      	b.n	8004e08 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004df6:	4833      	ldr	r0, [pc, #204]	@ (8004ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004df8:	f7ff fe96 	bl	8004b28 <LL_ADC_IsEnabled>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bf0c      	ite	eq
 8004e02:	2301      	moveq	r3, #1
 8004e04:	2300      	movne	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d047      	beq.n	8004e9c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004e0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	4b2d      	ldr	r3, [pc, #180]	@ (8004ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004e12:	4013      	ands	r3, r2
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	6811      	ldr	r1, [r2, #0]
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	6892      	ldr	r2, [r2, #8]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e22:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e24:	e03a      	b.n	8004e9c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004e26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e30:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d004      	beq.n	8004e46 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d10e      	bne.n	8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004e46:	481b      	ldr	r0, [pc, #108]	@ (8004eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004e48:	f7ff fe6e 	bl	8004b28 <LL_ADC_IsEnabled>
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	481a      	ldr	r0, [pc, #104]	@ (8004eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e50:	f7ff fe6a 	bl	8004b28 <LL_ADC_IsEnabled>
 8004e54:	4603      	mov	r3, r0
 8004e56:	4323      	orrs	r3, r4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf0c      	ite	eq
 8004e5c:	2301      	moveq	r3, #1
 8004e5e:	2300      	movne	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	e008      	b.n	8004e76 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004e64:	4817      	ldr	r0, [pc, #92]	@ (8004ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004e66:	f7ff fe5f 	bl	8004b28 <LL_ADC_IsEnabled>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	bf0c      	ite	eq
 8004e70:	2301      	moveq	r3, #1
 8004e72:	2300      	movne	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d010      	beq.n	8004e9c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	4b12      	ldr	r3, [pc, #72]	@ (8004ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004e84:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e86:	e009      	b.n	8004e9c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e8c:	f043 0220 	orr.w	r2, r3, #32
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004e9a:	e000      	b.n	8004e9e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004ea6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	378c      	adds	r7, #140	@ 0x8c
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd90      	pop	{r4, r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40022000 	.word	0x40022000
 8004eb8:	40022100 	.word	0x40022100
 8004ebc:	40022300 	.word	0x40022300
 8004ec0:	58026300 	.word	0x58026300
 8004ec4:	58026000 	.word	0x58026000
 8004ec8:	fffff0e0 	.word	0xfffff0e0

08004ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004edc:	4b0b      	ldr	r3, [pc, #44]	@ (8004f0c <__NVIC_SetPriorityGrouping+0x40>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ee8:	4013      	ands	r3, r2
 8004eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ef4:	4b06      	ldr	r3, [pc, #24]	@ (8004f10 <__NVIC_SetPriorityGrouping+0x44>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004efa:	4a04      	ldr	r2, [pc, #16]	@ (8004f0c <__NVIC_SetPriorityGrouping+0x40>)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	60d3      	str	r3, [r2, #12]
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	e000ed00 	.word	0xe000ed00
 8004f10:	05fa0000 	.word	0x05fa0000

08004f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f18:	4b04      	ldr	r3, [pc, #16]	@ (8004f2c <__NVIC_GetPriorityGrouping+0x18>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	0a1b      	lsrs	r3, r3, #8
 8004f1e:	f003 0307 	and.w	r3, r3, #7
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	e000ed00 	.word	0xe000ed00

08004f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	db0b      	blt.n	8004f5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	f003 021f 	and.w	r2, r3, #31
 8004f48:	4907      	ldr	r1, [pc, #28]	@ (8004f68 <__NVIC_EnableIRQ+0x38>)
 8004f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	2001      	movs	r0, #1
 8004f52:	fa00 f202 	lsl.w	r2, r0, r2
 8004f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	e000e100 	.word	0xe000e100

08004f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	6039      	str	r1, [r7, #0]
 8004f76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	db0a      	blt.n	8004f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	490c      	ldr	r1, [pc, #48]	@ (8004fb8 <__NVIC_SetPriority+0x4c>)
 8004f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f8a:	0112      	lsls	r2, r2, #4
 8004f8c:	b2d2      	uxtb	r2, r2
 8004f8e:	440b      	add	r3, r1
 8004f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f94:	e00a      	b.n	8004fac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	4908      	ldr	r1, [pc, #32]	@ (8004fbc <__NVIC_SetPriority+0x50>)
 8004f9c:	88fb      	ldrh	r3, [r7, #6]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	3b04      	subs	r3, #4
 8004fa4:	0112      	lsls	r2, r2, #4
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	440b      	add	r3, r1
 8004faa:	761a      	strb	r2, [r3, #24]
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	e000e100 	.word	0xe000e100
 8004fbc:	e000ed00 	.word	0xe000ed00

08004fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b089      	sub	sp, #36	@ 0x24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f1c3 0307 	rsb	r3, r3, #7
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	bf28      	it	cs
 8004fde:	2304      	movcs	r3, #4
 8004fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	2b06      	cmp	r3, #6
 8004fe8:	d902      	bls.n	8004ff0 <NVIC_EncodePriority+0x30>
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	3b03      	subs	r3, #3
 8004fee:	e000      	b.n	8004ff2 <NVIC_EncodePriority+0x32>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	43da      	mvns	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	401a      	ands	r2, r3
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005008:	f04f 31ff 	mov.w	r1, #4294967295
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	fa01 f303 	lsl.w	r3, r1, r3
 8005012:	43d9      	mvns	r1, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005018:	4313      	orrs	r3, r2
         );
}
 800501a:	4618      	mov	r0, r3
 800501c:	3724      	adds	r7, #36	@ 0x24
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
	...

08005028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3b01      	subs	r3, #1
 8005034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005038:	d301      	bcc.n	800503e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800503a:	2301      	movs	r3, #1
 800503c:	e00f      	b.n	800505e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800503e:	4a0a      	ldr	r2, [pc, #40]	@ (8005068 <SysTick_Config+0x40>)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3b01      	subs	r3, #1
 8005044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005046:	210f      	movs	r1, #15
 8005048:	f04f 30ff 	mov.w	r0, #4294967295
 800504c:	f7ff ff8e 	bl	8004f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005050:	4b05      	ldr	r3, [pc, #20]	@ (8005068 <SysTick_Config+0x40>)
 8005052:	2200      	movs	r2, #0
 8005054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005056:	4b04      	ldr	r3, [pc, #16]	@ (8005068 <SysTick_Config+0x40>)
 8005058:	2207      	movs	r2, #7
 800505a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	e000e010 	.word	0xe000e010

0800506c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff ff29 	bl	8004ecc <__NVIC_SetPriorityGrouping>
}
 800507a:	bf00      	nop
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b086      	sub	sp, #24
 8005086:	af00      	add	r7, sp, #0
 8005088:	4603      	mov	r3, r0
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
 800508e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005090:	f7ff ff40 	bl	8004f14 <__NVIC_GetPriorityGrouping>
 8005094:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	6978      	ldr	r0, [r7, #20]
 800509c:	f7ff ff90 	bl	8004fc0 <NVIC_EncodePriority>
 80050a0:	4602      	mov	r2, r0
 80050a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050a6:	4611      	mov	r1, r2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff ff5f 	bl	8004f6c <__NVIC_SetPriority>
}
 80050ae:	bf00      	nop
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	4603      	mov	r3, r0
 80050be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff ff33 	bl	8004f30 <__NVIC_EnableIRQ>
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff ffa4 	bl	8005028 <SysTick_Config>
 80050e0:	4603      	mov	r3, r0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80050f0:	f3bf 8f5f 	dmb	sy
}
 80050f4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80050f6:	4b07      	ldr	r3, [pc, #28]	@ (8005114 <HAL_MPU_Disable+0x28>)
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	4a06      	ldr	r2, [pc, #24]	@ (8005114 <HAL_MPU_Disable+0x28>)
 80050fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005100:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005102:	4b05      	ldr	r3, [pc, #20]	@ (8005118 <HAL_MPU_Disable+0x2c>)
 8005104:	2200      	movs	r2, #0
 8005106:	605a      	str	r2, [r3, #4]
}
 8005108:	bf00      	nop
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	e000ed00 	.word	0xe000ed00
 8005118:	e000ed90 	.word	0xe000ed90

0800511c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005124:	4a0b      	ldr	r2, [pc, #44]	@ (8005154 <HAL_MPU_Enable+0x38>)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f043 0301 	orr.w	r3, r3, #1
 800512c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800512e:	4b0a      	ldr	r3, [pc, #40]	@ (8005158 <HAL_MPU_Enable+0x3c>)
 8005130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005132:	4a09      	ldr	r2, [pc, #36]	@ (8005158 <HAL_MPU_Enable+0x3c>)
 8005134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005138:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800513a:	f3bf 8f4f 	dsb	sy
}
 800513e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005140:	f3bf 8f6f 	isb	sy
}
 8005144:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	e000ed90 	.word	0xe000ed90
 8005158:	e000ed00 	.word	0xe000ed00

0800515c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	785a      	ldrb	r2, [r3, #1]
 8005168:	4b1b      	ldr	r3, [pc, #108]	@ (80051d8 <HAL_MPU_ConfigRegion+0x7c>)
 800516a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800516c:	4b1a      	ldr	r3, [pc, #104]	@ (80051d8 <HAL_MPU_ConfigRegion+0x7c>)
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	4a19      	ldr	r2, [pc, #100]	@ (80051d8 <HAL_MPU_ConfigRegion+0x7c>)
 8005172:	f023 0301 	bic.w	r3, r3, #1
 8005176:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005178:	4a17      	ldr	r2, [pc, #92]	@ (80051d8 <HAL_MPU_ConfigRegion+0x7c>)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	7b1b      	ldrb	r3, [r3, #12]
 8005184:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	7adb      	ldrb	r3, [r3, #11]
 800518a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800518c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	7a9b      	ldrb	r3, [r3, #10]
 8005192:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005194:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	7b5b      	ldrb	r3, [r3, #13]
 800519a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800519c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	7b9b      	ldrb	r3, [r3, #14]
 80051a2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80051a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	7bdb      	ldrb	r3, [r3, #15]
 80051aa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80051ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	7a5b      	ldrb	r3, [r3, #9]
 80051b2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80051b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	7a1b      	ldrb	r3, [r3, #8]
 80051ba:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80051bc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	7812      	ldrb	r2, [r2, #0]
 80051c2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80051c4:	4a04      	ldr	r2, [pc, #16]	@ (80051d8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80051c6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80051c8:	6113      	str	r3, [r2, #16]
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	e000ed90 	.word	0xe000ed90

080051dc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e054      	b.n	8005298 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	7f5b      	ldrb	r3, [r3, #29]
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d105      	bne.n	8005204 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fc ff08 	bl	8002014 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	791b      	ldrb	r3, [r3, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10c      	bne.n	800522c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a22      	ldr	r2, [pc, #136]	@ (80052a0 <HAL_CRC_Init+0xc4>)
 8005218:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0218 	bic.w	r2, r2, #24
 8005228:	609a      	str	r2, [r3, #8]
 800522a:	e00c      	b.n	8005246 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6899      	ldr	r1, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	461a      	mov	r2, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f834 	bl	80052a4 <HAL_CRCEx_Polynomial_Set>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e028      	b.n	8005298 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	795b      	ldrb	r3, [r3, #5]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d105      	bne.n	800525a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f04f 32ff 	mov.w	r2, #4294967295
 8005256:	611a      	str	r2, [r3, #16]
 8005258:	e004      	b.n	8005264 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6912      	ldr	r2, [r2, #16]
 8005262:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695a      	ldr	r2, [r3, #20]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699a      	ldr	r2, [r3, #24]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	04c11db7 	.word	0x04c11db7

080052a4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80052b4:	231f      	movs	r3, #31
 80052b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d102      	bne.n	80052c8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	75fb      	strb	r3, [r7, #23]
 80052c6:	e063      	b.n	8005390 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80052c8:	bf00      	nop
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1e5a      	subs	r2, r3, #1
 80052ce:	613a      	str	r2, [r7, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d009      	beq.n	80052e8 <HAL_CRCEx_Polynomial_Set+0x44>
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	fa22 f303 	lsr.w	r3, r2, r3
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0f0      	beq.n	80052ca <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b18      	cmp	r3, #24
 80052ec:	d846      	bhi.n	800537c <HAL_CRCEx_Polynomial_Set+0xd8>
 80052ee:	a201      	add	r2, pc, #4	@ (adr r2, 80052f4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80052f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f4:	08005383 	.word	0x08005383
 80052f8:	0800537d 	.word	0x0800537d
 80052fc:	0800537d 	.word	0x0800537d
 8005300:	0800537d 	.word	0x0800537d
 8005304:	0800537d 	.word	0x0800537d
 8005308:	0800537d 	.word	0x0800537d
 800530c:	0800537d 	.word	0x0800537d
 8005310:	0800537d 	.word	0x0800537d
 8005314:	08005371 	.word	0x08005371
 8005318:	0800537d 	.word	0x0800537d
 800531c:	0800537d 	.word	0x0800537d
 8005320:	0800537d 	.word	0x0800537d
 8005324:	0800537d 	.word	0x0800537d
 8005328:	0800537d 	.word	0x0800537d
 800532c:	0800537d 	.word	0x0800537d
 8005330:	0800537d 	.word	0x0800537d
 8005334:	08005365 	.word	0x08005365
 8005338:	0800537d 	.word	0x0800537d
 800533c:	0800537d 	.word	0x0800537d
 8005340:	0800537d 	.word	0x0800537d
 8005344:	0800537d 	.word	0x0800537d
 8005348:	0800537d 	.word	0x0800537d
 800534c:	0800537d 	.word	0x0800537d
 8005350:	0800537d 	.word	0x0800537d
 8005354:	08005359 	.word	0x08005359
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	2b06      	cmp	r3, #6
 800535c:	d913      	bls.n	8005386 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005362:	e010      	b.n	8005386 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	2b07      	cmp	r3, #7
 8005368:	d90f      	bls.n	800538a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800536e:	e00c      	b.n	800538a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b0f      	cmp	r3, #15
 8005374:	d90b      	bls.n	800538e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800537a:	e008      	b.n	800538e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	75fb      	strb	r3, [r7, #23]
        break;
 8005380:	e006      	b.n	8005390 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005382:	bf00      	nop
 8005384:	e004      	b.n	8005390 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005386:	bf00      	nop
 8005388:	e002      	b.n	8005390 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800538a:	bf00      	nop
 800538c:	e000      	b.n	8005390 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800538e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005390:	7dfb      	ldrb	r3, [r7, #23]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10d      	bne.n	80053b2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f023 0118 	bic.w	r1, r3, #24
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80053b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	371c      	adds	r7, #28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e237      	b.n	8005842 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d004      	beq.n	80053e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2280      	movs	r2, #128	@ 0x80
 80053e2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e22c      	b.n	8005842 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a5c      	ldr	r2, [pc, #368]	@ (8005560 <HAL_DMA_Abort_IT+0x1a0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d04a      	beq.n	8005488 <HAL_DMA_Abort_IT+0xc8>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a5b      	ldr	r2, [pc, #364]	@ (8005564 <HAL_DMA_Abort_IT+0x1a4>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d045      	beq.n	8005488 <HAL_DMA_Abort_IT+0xc8>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a59      	ldr	r2, [pc, #356]	@ (8005568 <HAL_DMA_Abort_IT+0x1a8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d040      	beq.n	8005488 <HAL_DMA_Abort_IT+0xc8>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a58      	ldr	r2, [pc, #352]	@ (800556c <HAL_DMA_Abort_IT+0x1ac>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d03b      	beq.n	8005488 <HAL_DMA_Abort_IT+0xc8>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a56      	ldr	r2, [pc, #344]	@ (8005570 <HAL_DMA_Abort_IT+0x1b0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d036      	beq.n	8005488 <HAL_DMA_Abort_IT+0xc8>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a55      	ldr	r2, [pc, #340]	@ (8005574 <HAL_DMA_Abort_IT+0x1b4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d031      	beq.n	8005488 <HAL_DMA_Abort_IT+0xc8>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a53      	ldr	r2, [pc, #332]	@ (8005578 <HAL_DMA_Abort_IT+0x1b8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d02c      	beq.n	8005488 <HAL_DMA_Abort_IT+0xc8>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a52      	ldr	r2, [pc, #328]	@ (800557c <HAL_DMA_Abort_IT+0x1bc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d027      	beq.n	8005488 <HAL_DMA_Abort_IT+0xc8>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a50      	ldr	r2, [pc, #320]	@ (8005580 <HAL_DMA_Abort_IT+0x1c0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d022      	beq.n	8005488 <HAL_DMA_Abort_IT+0xc8>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a4f      	ldr	r2, [pc, #316]	@ (8005584 <HAL_DMA_Abort_IT+0x1c4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d01d      	beq.n	8005488 <HAL_DMA_Abort_IT+0xc8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a4d      	ldr	r2, [pc, #308]	@ (8005588 <HAL_DMA_Abort_IT+0x1c8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d018      	beq.n	8005488 <HAL_DMA_Abort_IT+0xc8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a4c      	ldr	r2, [pc, #304]	@ (800558c <HAL_DMA_Abort_IT+0x1cc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d013      	beq.n	8005488 <HAL_DMA_Abort_IT+0xc8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a4a      	ldr	r2, [pc, #296]	@ (8005590 <HAL_DMA_Abort_IT+0x1d0>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00e      	beq.n	8005488 <HAL_DMA_Abort_IT+0xc8>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a49      	ldr	r2, [pc, #292]	@ (8005594 <HAL_DMA_Abort_IT+0x1d4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d009      	beq.n	8005488 <HAL_DMA_Abort_IT+0xc8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a47      	ldr	r2, [pc, #284]	@ (8005598 <HAL_DMA_Abort_IT+0x1d8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <HAL_DMA_Abort_IT+0xc8>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a46      	ldr	r2, [pc, #280]	@ (800559c <HAL_DMA_Abort_IT+0x1dc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d101      	bne.n	800548c <HAL_DMA_Abort_IT+0xcc>
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <HAL_DMA_Abort_IT+0xce>
 800548c:	2300      	movs	r3, #0
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 8086 	beq.w	80055a0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2204      	movs	r2, #4
 8005498:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a2f      	ldr	r2, [pc, #188]	@ (8005560 <HAL_DMA_Abort_IT+0x1a0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d04a      	beq.n	800553c <HAL_DMA_Abort_IT+0x17c>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a2e      	ldr	r2, [pc, #184]	@ (8005564 <HAL_DMA_Abort_IT+0x1a4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d045      	beq.n	800553c <HAL_DMA_Abort_IT+0x17c>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005568 <HAL_DMA_Abort_IT+0x1a8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d040      	beq.n	800553c <HAL_DMA_Abort_IT+0x17c>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a2b      	ldr	r2, [pc, #172]	@ (800556c <HAL_DMA_Abort_IT+0x1ac>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d03b      	beq.n	800553c <HAL_DMA_Abort_IT+0x17c>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a29      	ldr	r2, [pc, #164]	@ (8005570 <HAL_DMA_Abort_IT+0x1b0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d036      	beq.n	800553c <HAL_DMA_Abort_IT+0x17c>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a28      	ldr	r2, [pc, #160]	@ (8005574 <HAL_DMA_Abort_IT+0x1b4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d031      	beq.n	800553c <HAL_DMA_Abort_IT+0x17c>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a26      	ldr	r2, [pc, #152]	@ (8005578 <HAL_DMA_Abort_IT+0x1b8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d02c      	beq.n	800553c <HAL_DMA_Abort_IT+0x17c>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a25      	ldr	r2, [pc, #148]	@ (800557c <HAL_DMA_Abort_IT+0x1bc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d027      	beq.n	800553c <HAL_DMA_Abort_IT+0x17c>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a23      	ldr	r2, [pc, #140]	@ (8005580 <HAL_DMA_Abort_IT+0x1c0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d022      	beq.n	800553c <HAL_DMA_Abort_IT+0x17c>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a22      	ldr	r2, [pc, #136]	@ (8005584 <HAL_DMA_Abort_IT+0x1c4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d01d      	beq.n	800553c <HAL_DMA_Abort_IT+0x17c>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a20      	ldr	r2, [pc, #128]	@ (8005588 <HAL_DMA_Abort_IT+0x1c8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d018      	beq.n	800553c <HAL_DMA_Abort_IT+0x17c>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1f      	ldr	r2, [pc, #124]	@ (800558c <HAL_DMA_Abort_IT+0x1cc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d013      	beq.n	800553c <HAL_DMA_Abort_IT+0x17c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1d      	ldr	r2, [pc, #116]	@ (8005590 <HAL_DMA_Abort_IT+0x1d0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00e      	beq.n	800553c <HAL_DMA_Abort_IT+0x17c>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1c      	ldr	r2, [pc, #112]	@ (8005594 <HAL_DMA_Abort_IT+0x1d4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d009      	beq.n	800553c <HAL_DMA_Abort_IT+0x17c>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a1a      	ldr	r2, [pc, #104]	@ (8005598 <HAL_DMA_Abort_IT+0x1d8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <HAL_DMA_Abort_IT+0x17c>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a19      	ldr	r2, [pc, #100]	@ (800559c <HAL_DMA_Abort_IT+0x1dc>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d108      	bne.n	800554e <HAL_DMA_Abort_IT+0x18e>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0201 	bic.w	r2, r2, #1
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	e178      	b.n	8005840 <HAL_DMA_Abort_IT+0x480>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0201 	bic.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e16f      	b.n	8005840 <HAL_DMA_Abort_IT+0x480>
 8005560:	40020010 	.word	0x40020010
 8005564:	40020028 	.word	0x40020028
 8005568:	40020040 	.word	0x40020040
 800556c:	40020058 	.word	0x40020058
 8005570:	40020070 	.word	0x40020070
 8005574:	40020088 	.word	0x40020088
 8005578:	400200a0 	.word	0x400200a0
 800557c:	400200b8 	.word	0x400200b8
 8005580:	40020410 	.word	0x40020410
 8005584:	40020428 	.word	0x40020428
 8005588:	40020440 	.word	0x40020440
 800558c:	40020458 	.word	0x40020458
 8005590:	40020470 	.word	0x40020470
 8005594:	40020488 	.word	0x40020488
 8005598:	400204a0 	.word	0x400204a0
 800559c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 020e 	bic.w	r2, r2, #14
 80055ae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a6c      	ldr	r2, [pc, #432]	@ (8005768 <HAL_DMA_Abort_IT+0x3a8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d04a      	beq.n	8005650 <HAL_DMA_Abort_IT+0x290>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a6b      	ldr	r2, [pc, #428]	@ (800576c <HAL_DMA_Abort_IT+0x3ac>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d045      	beq.n	8005650 <HAL_DMA_Abort_IT+0x290>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a69      	ldr	r2, [pc, #420]	@ (8005770 <HAL_DMA_Abort_IT+0x3b0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d040      	beq.n	8005650 <HAL_DMA_Abort_IT+0x290>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a68      	ldr	r2, [pc, #416]	@ (8005774 <HAL_DMA_Abort_IT+0x3b4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d03b      	beq.n	8005650 <HAL_DMA_Abort_IT+0x290>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a66      	ldr	r2, [pc, #408]	@ (8005778 <HAL_DMA_Abort_IT+0x3b8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d036      	beq.n	8005650 <HAL_DMA_Abort_IT+0x290>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a65      	ldr	r2, [pc, #404]	@ (800577c <HAL_DMA_Abort_IT+0x3bc>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d031      	beq.n	8005650 <HAL_DMA_Abort_IT+0x290>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a63      	ldr	r2, [pc, #396]	@ (8005780 <HAL_DMA_Abort_IT+0x3c0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d02c      	beq.n	8005650 <HAL_DMA_Abort_IT+0x290>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a62      	ldr	r2, [pc, #392]	@ (8005784 <HAL_DMA_Abort_IT+0x3c4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d027      	beq.n	8005650 <HAL_DMA_Abort_IT+0x290>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a60      	ldr	r2, [pc, #384]	@ (8005788 <HAL_DMA_Abort_IT+0x3c8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d022      	beq.n	8005650 <HAL_DMA_Abort_IT+0x290>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a5f      	ldr	r2, [pc, #380]	@ (800578c <HAL_DMA_Abort_IT+0x3cc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d01d      	beq.n	8005650 <HAL_DMA_Abort_IT+0x290>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a5d      	ldr	r2, [pc, #372]	@ (8005790 <HAL_DMA_Abort_IT+0x3d0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d018      	beq.n	8005650 <HAL_DMA_Abort_IT+0x290>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a5c      	ldr	r2, [pc, #368]	@ (8005794 <HAL_DMA_Abort_IT+0x3d4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d013      	beq.n	8005650 <HAL_DMA_Abort_IT+0x290>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a5a      	ldr	r2, [pc, #360]	@ (8005798 <HAL_DMA_Abort_IT+0x3d8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d00e      	beq.n	8005650 <HAL_DMA_Abort_IT+0x290>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a59      	ldr	r2, [pc, #356]	@ (800579c <HAL_DMA_Abort_IT+0x3dc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d009      	beq.n	8005650 <HAL_DMA_Abort_IT+0x290>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a57      	ldr	r2, [pc, #348]	@ (80057a0 <HAL_DMA_Abort_IT+0x3e0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d004      	beq.n	8005650 <HAL_DMA_Abort_IT+0x290>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a56      	ldr	r2, [pc, #344]	@ (80057a4 <HAL_DMA_Abort_IT+0x3e4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d108      	bne.n	8005662 <HAL_DMA_Abort_IT+0x2a2>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0201 	bic.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	e007      	b.n	8005672 <HAL_DMA_Abort_IT+0x2b2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0201 	bic.w	r2, r2, #1
 8005670:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a3c      	ldr	r2, [pc, #240]	@ (8005768 <HAL_DMA_Abort_IT+0x3a8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d072      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a3a      	ldr	r2, [pc, #232]	@ (800576c <HAL_DMA_Abort_IT+0x3ac>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d06d      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a39      	ldr	r2, [pc, #228]	@ (8005770 <HAL_DMA_Abort_IT+0x3b0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d068      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a37      	ldr	r2, [pc, #220]	@ (8005774 <HAL_DMA_Abort_IT+0x3b4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d063      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a36      	ldr	r2, [pc, #216]	@ (8005778 <HAL_DMA_Abort_IT+0x3b8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d05e      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a34      	ldr	r2, [pc, #208]	@ (800577c <HAL_DMA_Abort_IT+0x3bc>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d059      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a33      	ldr	r2, [pc, #204]	@ (8005780 <HAL_DMA_Abort_IT+0x3c0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d054      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a31      	ldr	r2, [pc, #196]	@ (8005784 <HAL_DMA_Abort_IT+0x3c4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d04f      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a30      	ldr	r2, [pc, #192]	@ (8005788 <HAL_DMA_Abort_IT+0x3c8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d04a      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a2e      	ldr	r2, [pc, #184]	@ (800578c <HAL_DMA_Abort_IT+0x3cc>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d045      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a2d      	ldr	r2, [pc, #180]	@ (8005790 <HAL_DMA_Abort_IT+0x3d0>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d040      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a2b      	ldr	r2, [pc, #172]	@ (8005794 <HAL_DMA_Abort_IT+0x3d4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d03b      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005798 <HAL_DMA_Abort_IT+0x3d8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d036      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a28      	ldr	r2, [pc, #160]	@ (800579c <HAL_DMA_Abort_IT+0x3dc>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d031      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a27      	ldr	r2, [pc, #156]	@ (80057a0 <HAL_DMA_Abort_IT+0x3e0>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d02c      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a25      	ldr	r2, [pc, #148]	@ (80057a4 <HAL_DMA_Abort_IT+0x3e4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d027      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a24      	ldr	r2, [pc, #144]	@ (80057a8 <HAL_DMA_Abort_IT+0x3e8>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d022      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a22      	ldr	r2, [pc, #136]	@ (80057ac <HAL_DMA_Abort_IT+0x3ec>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d01d      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a21      	ldr	r2, [pc, #132]	@ (80057b0 <HAL_DMA_Abort_IT+0x3f0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d018      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a1f      	ldr	r2, [pc, #124]	@ (80057b4 <HAL_DMA_Abort_IT+0x3f4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d013      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a1e      	ldr	r2, [pc, #120]	@ (80057b8 <HAL_DMA_Abort_IT+0x3f8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00e      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1c      	ldr	r2, [pc, #112]	@ (80057bc <HAL_DMA_Abort_IT+0x3fc>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d009      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a1b      	ldr	r2, [pc, #108]	@ (80057c0 <HAL_DMA_Abort_IT+0x400>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d004      	beq.n	8005762 <HAL_DMA_Abort_IT+0x3a2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a19      	ldr	r2, [pc, #100]	@ (80057c4 <HAL_DMA_Abort_IT+0x404>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d132      	bne.n	80057c8 <HAL_DMA_Abort_IT+0x408>
 8005762:	2301      	movs	r3, #1
 8005764:	e031      	b.n	80057ca <HAL_DMA_Abort_IT+0x40a>
 8005766:	bf00      	nop
 8005768:	40020010 	.word	0x40020010
 800576c:	40020028 	.word	0x40020028
 8005770:	40020040 	.word	0x40020040
 8005774:	40020058 	.word	0x40020058
 8005778:	40020070 	.word	0x40020070
 800577c:	40020088 	.word	0x40020088
 8005780:	400200a0 	.word	0x400200a0
 8005784:	400200b8 	.word	0x400200b8
 8005788:	40020410 	.word	0x40020410
 800578c:	40020428 	.word	0x40020428
 8005790:	40020440 	.word	0x40020440
 8005794:	40020458 	.word	0x40020458
 8005798:	40020470 	.word	0x40020470
 800579c:	40020488 	.word	0x40020488
 80057a0:	400204a0 	.word	0x400204a0
 80057a4:	400204b8 	.word	0x400204b8
 80057a8:	58025408 	.word	0x58025408
 80057ac:	5802541c 	.word	0x5802541c
 80057b0:	58025430 	.word	0x58025430
 80057b4:	58025444 	.word	0x58025444
 80057b8:	58025458 	.word	0x58025458
 80057bc:	5802546c 	.word	0x5802546c
 80057c0:	58025480 	.word	0x58025480
 80057c4:	58025494 	.word	0x58025494
 80057c8:	2300      	movs	r3, #0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d028      	beq.n	8005820 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057dc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	2201      	movs	r2, #1
 80057ee:	409a      	lsls	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80057fc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00c      	beq.n	8005820 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005810:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005814:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800581e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop

0800584c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800585a:	b2db      	uxtb	r3, r3
}
 800585c:	4618      	mov	r0, r3
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e04f      	b.n	800591a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fc fbe2 	bl	8002058 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	4b20      	ldr	r3, [pc, #128]	@ (8005924 <HAL_DMA2D_Init+0xbc>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6851      	ldr	r1, [r2, #4]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	69d2      	ldr	r2, [r2, #28]
 80058ae:	4311      	orrs	r1, r2
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058be:	4b1a      	ldr	r3, [pc, #104]	@ (8005928 <HAL_DMA2D_Init+0xc0>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6891      	ldr	r1, [r2, #8]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6992      	ldr	r2, [r2, #24]
 80058ca:	4311      	orrs	r1, r2
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6812      	ldr	r2, [r2, #0]
 80058d0:	430b      	orrs	r3, r1
 80058d2:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058da:	4b14      	ldr	r3, [pc, #80]	@ (800592c <HAL_DMA2D_Init+0xc4>)
 80058dc:	4013      	ands	r3, r2
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	68d1      	ldr	r1, [r2, #12]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	430b      	orrs	r3, r1
 80058e8:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	051a      	lsls	r2, r3, #20
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	055b      	lsls	r3, r3, #21
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	fff8ffbf 	.word	0xfff8ffbf
 8005928:	fffffef8 	.word	0xfffffef8
 800592c:	ffff0000 	.word	0xffff0000

08005930 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_DMA2D_ConfigLayer+0x24>
 8005950:	2302      	movs	r3, #2
 8005952:	e092      	b.n	8005a7a <HAL_DMA2D_ConfigLayer+0x14a>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	4613      	mov	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	1a9b      	subs	r3, r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	3328      	adds	r3, #40	@ 0x28
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	4413      	add	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	041b      	lsls	r3, r3, #16
 8005980:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005988:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005990:	4313      	orrs	r3, r2
 8005992:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005994:	4b3c      	ldr	r3, [pc, #240]	@ (8005a88 <HAL_DMA2D_ConfigLayer+0x158>)
 8005996:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b0a      	cmp	r3, #10
 800599e:	d003      	beq.n	80059a8 <HAL_DMA2D_ConfigLayer+0x78>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b09      	cmp	r3, #9
 80059a6:	d107      	bne.n	80059b8 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	e005      	b.n	80059c4 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	061b      	lsls	r3, r3, #24
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d120      	bne.n	8005a0c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	43db      	mvns	r3, r3
 80059d4:	ea02 0103 	and.w	r1, r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	430a      	orrs	r2, r1
 80059e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	6812      	ldr	r2, [r2, #0]
 80059ea:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b0a      	cmp	r3, #10
 80059f2:	d003      	beq.n	80059fc <HAL_DMA2D_ConfigLayer+0xcc>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2b09      	cmp	r3, #9
 80059fa:	d135      	bne.n	8005a68 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	68da      	ldr	r2, [r3, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005a08:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a0a:	e02d      	b.n	8005a68 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	2b0b      	cmp	r3, #11
 8005a12:	d109      	bne.n	8005a28 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	049b      	lsls	r3, r3, #18
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8005a26:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	69da      	ldr	r2, [r3, #28]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	43db      	mvns	r3, r3
 8005a32:	ea02 0103 	and.w	r1, r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	6812      	ldr	r2, [r2, #0]
 8005a48:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b0a      	cmp	r3, #10
 8005a50:	d003      	beq.n	8005a5a <HAL_DMA2D_ConfigLayer+0x12a>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b09      	cmp	r3, #9
 8005a58:	d106      	bne.n	8005a68 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005a66:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	ff33000f 	.word	0xff33000f

08005a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b089      	sub	sp, #36	@ 0x24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005a9a:	4b86      	ldr	r3, [pc, #536]	@ (8005cb4 <HAL_GPIO_Init+0x228>)
 8005a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a9e:	e18c      	b.n	8005dba <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8005aac:	4013      	ands	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 817e 	beq.w	8005db4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d005      	beq.n	8005ad0 <HAL_GPIO_Init+0x44>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f003 0303 	and.w	r3, r3, #3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d130      	bne.n	8005b32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	2203      	movs	r2, #3
 8005adc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b06:	2201      	movs	r2, #1
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4013      	ands	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	091b      	lsrs	r3, r3, #4
 8005b1c:	f003 0201 	and.w	r2, r3, #1
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	fa02 f303 	lsl.w	r3, r2, r3
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f003 0303 	and.w	r3, r3, #3
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d017      	beq.n	8005b6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	2203      	movs	r2, #3
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	4013      	ands	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d123      	bne.n	8005bc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	08da      	lsrs	r2, r3, #3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3208      	adds	r2, #8
 8005b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	220f      	movs	r2, #15
 8005b92:	fa02 f303 	lsl.w	r3, r2, r3
 8005b96:	43db      	mvns	r3, r3
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	691a      	ldr	r2, [r3, #16]
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	08da      	lsrs	r2, r3, #3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3208      	adds	r2, #8
 8005bbc:	69b9      	ldr	r1, [r7, #24]
 8005bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	2203      	movs	r2, #3
 8005bce:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd2:	43db      	mvns	r3, r3
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f003 0203 	and.w	r2, r3, #3
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 80d8 	beq.w	8005db4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c04:	4b2c      	ldr	r3, [pc, #176]	@ (8005cb8 <HAL_GPIO_Init+0x22c>)
 8005c06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c0a:	4a2b      	ldr	r2, [pc, #172]	@ (8005cb8 <HAL_GPIO_Init+0x22c>)
 8005c0c:	f043 0302 	orr.w	r3, r3, #2
 8005c10:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005c14:	4b28      	ldr	r3, [pc, #160]	@ (8005cb8 <HAL_GPIO_Init+0x22c>)
 8005c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c22:	4a26      	ldr	r2, [pc, #152]	@ (8005cbc <HAL_GPIO_Init+0x230>)
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	089b      	lsrs	r3, r3, #2
 8005c28:	3302      	adds	r3, #2
 8005c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	f003 0303 	and.w	r3, r3, #3
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	220f      	movs	r2, #15
 8005c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3e:	43db      	mvns	r3, r3
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	4013      	ands	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a1d      	ldr	r2, [pc, #116]	@ (8005cc0 <HAL_GPIO_Init+0x234>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d04a      	beq.n	8005ce4 <HAL_GPIO_Init+0x258>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a1c      	ldr	r2, [pc, #112]	@ (8005cc4 <HAL_GPIO_Init+0x238>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d02b      	beq.n	8005cae <HAL_GPIO_Init+0x222>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a1b      	ldr	r2, [pc, #108]	@ (8005cc8 <HAL_GPIO_Init+0x23c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d025      	beq.n	8005caa <HAL_GPIO_Init+0x21e>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a1a      	ldr	r2, [pc, #104]	@ (8005ccc <HAL_GPIO_Init+0x240>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d01f      	beq.n	8005ca6 <HAL_GPIO_Init+0x21a>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a19      	ldr	r2, [pc, #100]	@ (8005cd0 <HAL_GPIO_Init+0x244>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d019      	beq.n	8005ca2 <HAL_GPIO_Init+0x216>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a18      	ldr	r2, [pc, #96]	@ (8005cd4 <HAL_GPIO_Init+0x248>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d013      	beq.n	8005c9e <HAL_GPIO_Init+0x212>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a17      	ldr	r2, [pc, #92]	@ (8005cd8 <HAL_GPIO_Init+0x24c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00d      	beq.n	8005c9a <HAL_GPIO_Init+0x20e>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a16      	ldr	r2, [pc, #88]	@ (8005cdc <HAL_GPIO_Init+0x250>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d007      	beq.n	8005c96 <HAL_GPIO_Init+0x20a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a15      	ldr	r2, [pc, #84]	@ (8005ce0 <HAL_GPIO_Init+0x254>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d101      	bne.n	8005c92 <HAL_GPIO_Init+0x206>
 8005c8e:	2309      	movs	r3, #9
 8005c90:	e029      	b.n	8005ce6 <HAL_GPIO_Init+0x25a>
 8005c92:	230a      	movs	r3, #10
 8005c94:	e027      	b.n	8005ce6 <HAL_GPIO_Init+0x25a>
 8005c96:	2307      	movs	r3, #7
 8005c98:	e025      	b.n	8005ce6 <HAL_GPIO_Init+0x25a>
 8005c9a:	2306      	movs	r3, #6
 8005c9c:	e023      	b.n	8005ce6 <HAL_GPIO_Init+0x25a>
 8005c9e:	2305      	movs	r3, #5
 8005ca0:	e021      	b.n	8005ce6 <HAL_GPIO_Init+0x25a>
 8005ca2:	2304      	movs	r3, #4
 8005ca4:	e01f      	b.n	8005ce6 <HAL_GPIO_Init+0x25a>
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e01d      	b.n	8005ce6 <HAL_GPIO_Init+0x25a>
 8005caa:	2302      	movs	r3, #2
 8005cac:	e01b      	b.n	8005ce6 <HAL_GPIO_Init+0x25a>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e019      	b.n	8005ce6 <HAL_GPIO_Init+0x25a>
 8005cb2:	bf00      	nop
 8005cb4:	58000080 	.word	0x58000080
 8005cb8:	58024400 	.word	0x58024400
 8005cbc:	58000400 	.word	0x58000400
 8005cc0:	58020000 	.word	0x58020000
 8005cc4:	58020400 	.word	0x58020400
 8005cc8:	58020800 	.word	0x58020800
 8005ccc:	58020c00 	.word	0x58020c00
 8005cd0:	58021000 	.word	0x58021000
 8005cd4:	58021400 	.word	0x58021400
 8005cd8:	58021800 	.word	0x58021800
 8005cdc:	58021c00 	.word	0x58021c00
 8005ce0:	58022400 	.word	0x58022400
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	69fa      	ldr	r2, [r7, #28]
 8005ce8:	f002 0203 	and.w	r2, r2, #3
 8005cec:	0092      	lsls	r2, r2, #2
 8005cee:	4093      	lsls	r3, r2
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cf6:	4938      	ldr	r1, [pc, #224]	@ (8005dd8 <HAL_GPIO_Init+0x34c>)
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	089b      	lsrs	r3, r3, #2
 8005cfc:	3302      	adds	r3, #2
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	4013      	ands	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	4013      	ands	r3, r2
 8005d42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	43db      	mvns	r3, r3
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	4013      	ands	r3, r2
 8005d98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	3301      	adds	r3, #1
 8005db8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f47f ae6b 	bne.w	8005aa0 <HAL_GPIO_Init+0x14>
  }
}
 8005dca:	bf00      	nop
 8005dcc:	bf00      	nop
 8005dce:	3724      	adds	r7, #36	@ 0x24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	58000400 	.word	0x58000400

08005ddc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691a      	ldr	r2, [r3, #16]
 8005dec:	887b      	ldrh	r3, [r7, #2]
 8005dee:	4013      	ands	r3, r2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005df4:	2301      	movs	r3, #1
 8005df6:	73fb      	strb	r3, [r7, #15]
 8005df8:	e001      	b.n	8005dfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	807b      	strh	r3, [r7, #2]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e1c:	787b      	ldrb	r3, [r7, #1]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e22:	887a      	ldrh	r2, [r7, #2]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005e28:	e003      	b.n	8005e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e2a:	887b      	ldrh	r3, [r7, #2]
 8005e2c:	041a      	lsls	r2, r3, #16
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	619a      	str	r2, [r3, #24]
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	4603      	mov	r3, r0
 8005e46:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005e48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005e50:	88fb      	ldrh	r3, [r7, #6]
 8005e52:	4013      	ands	r3, r2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d008      	beq.n	8005e6a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e5c:	88fb      	ldrh	r3, [r7, #6]
 8005e5e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e62:	88fb      	ldrh	r3, [r7, #6]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fb feb7 	bl	8001bd8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005e6a:	bf00      	nop
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e08b      	b.n	8005f9e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d106      	bne.n	8005ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fc f8fe 	bl	800209c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2224      	movs	r2, #36	@ 0x24
 8005ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0201 	bic.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ec4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ed4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d107      	bne.n	8005eee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005eea:	609a      	str	r2, [r3, #8]
 8005eec:	e006      	b.n	8005efc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005efa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d108      	bne.n	8005f16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f12:	605a      	str	r2, [r3, #4]
 8005f14:	e007      	b.n	8005f26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6859      	ldr	r1, [r3, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa8 <HAL_I2C_Init+0x134>)
 8005f32:	430b      	orrs	r3, r1
 8005f34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	69d9      	ldr	r1, [r3, #28]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1a      	ldr	r2, [r3, #32]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0201 	orr.w	r2, r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	02008000 	.word	0x02008000

08005fac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	607a      	str	r2, [r7, #4]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	460b      	mov	r3, r1
 8005fba:	817b      	strh	r3, [r7, #10]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	f040 80fd 	bne.w	80061c8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_I2C_Master_Transmit+0x30>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e0f6      	b.n	80061ca <HAL_I2C_Master_Transmit+0x21e>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fe4:	f7fc fc62 	bl	80028ac <HAL_GetTick>
 8005fe8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	2319      	movs	r3, #25
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f001 fe6b 	bl	8007cd2 <I2C_WaitOnFlagUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e0e1      	b.n	80061ca <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2221      	movs	r2, #33	@ 0x21
 800600a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2210      	movs	r2, #16
 8006012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	893a      	ldrh	r2, [r7, #8]
 8006026:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006032:	b29b      	uxth	r3, r3
 8006034:	2bff      	cmp	r3, #255	@ 0xff
 8006036:	d906      	bls.n	8006046 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	22ff      	movs	r2, #255	@ 0xff
 800603c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800603e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	e007      	b.n	8006056 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800604a:	b29a      	uxth	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006050:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006054:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800605a:	2b00      	cmp	r3, #0
 800605c:	d024      	beq.n	80060a8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006062:	781a      	ldrb	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b01      	subs	r3, #1
 800607c:	b29a      	uxth	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006092:	b2db      	uxtb	r3, r3
 8006094:	3301      	adds	r3, #1
 8006096:	b2da      	uxtb	r2, r3
 8006098:	8979      	ldrh	r1, [r7, #10]
 800609a:	4b4e      	ldr	r3, [pc, #312]	@ (80061d4 <HAL_I2C_Master_Transmit+0x228>)
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f001 ffd9 	bl	8008058 <I2C_TransferConfig>
 80060a6:	e066      	b.n	8006176 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	8979      	ldrh	r1, [r7, #10]
 80060b0:	4b48      	ldr	r3, [pc, #288]	@ (80061d4 <HAL_I2C_Master_Transmit+0x228>)
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f001 ffce 	bl	8008058 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80060bc:	e05b      	b.n	8006176 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	6a39      	ldr	r1, [r7, #32]
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f001 fe5e 	bl	8007d84 <I2C_WaitOnTXISFlagUntilTimeout>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e07b      	b.n	80061ca <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d6:	781a      	ldrb	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d034      	beq.n	8006176 <HAL_I2C_Master_Transmit+0x1ca>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006110:	2b00      	cmp	r3, #0
 8006112:	d130      	bne.n	8006176 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	2200      	movs	r2, #0
 800611c:	2180      	movs	r1, #128	@ 0x80
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f001 fdd7 	bl	8007cd2 <I2C_WaitOnFlagUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e04d      	b.n	80061ca <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006132:	b29b      	uxth	r3, r3
 8006134:	2bff      	cmp	r3, #255	@ 0xff
 8006136:	d90e      	bls.n	8006156 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	22ff      	movs	r2, #255	@ 0xff
 800613c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006142:	b2da      	uxtb	r2, r3
 8006144:	8979      	ldrh	r1, [r7, #10]
 8006146:	2300      	movs	r3, #0
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f001 ff82 	bl	8008058 <I2C_TransferConfig>
 8006154:	e00f      	b.n	8006176 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006164:	b2da      	uxtb	r2, r3
 8006166:	8979      	ldrh	r1, [r7, #10]
 8006168:	2300      	movs	r3, #0
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f001 ff71 	bl	8008058 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800617a:	b29b      	uxth	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	d19e      	bne.n	80060be <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	6a39      	ldr	r1, [r7, #32]
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f001 fe44 	bl	8007e12 <I2C_WaitOnSTOPFlagUntilTimeout>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e01a      	b.n	80061ca <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2220      	movs	r2, #32
 800619a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6859      	ldr	r1, [r3, #4]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	4b0c      	ldr	r3, [pc, #48]	@ (80061d8 <HAL_I2C_Master_Transmit+0x22c>)
 80061a8:	400b      	ands	r3, r1
 80061aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80061c4:	2300      	movs	r3, #0
 80061c6:	e000      	b.n	80061ca <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80061c8:	2302      	movs	r3, #2
  }
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	80002000 	.word	0x80002000
 80061d8:	fe00e800 	.word	0xfe00e800

080061dc <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af02      	add	r7, sp, #8
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	607a      	str	r2, [r7, #4]
 80061e6:	461a      	mov	r2, r3
 80061e8:	460b      	mov	r3, r1
 80061ea:	817b      	strh	r3, [r7, #10]
 80061ec:	4613      	mov	r3, r2
 80061ee:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	d153      	bne.n	80062a4 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006206:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800620a:	d101      	bne.n	8006210 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 800620c:	2302      	movs	r3, #2
 800620e:	e04a      	b.n	80062a6 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <HAL_I2C_Master_Receive_IT+0x42>
 800621a:	2302      	movs	r3, #2
 800621c:	e043      	b.n	80062a6 <HAL_I2C_Master_Receive_IT+0xca>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2222      	movs	r2, #34	@ 0x22
 800622a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2210      	movs	r2, #16
 8006232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	893a      	ldrh	r2, [r7, #8]
 8006246:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4a19      	ldr	r2, [pc, #100]	@ (80062b0 <HAL_I2C_Master_Receive_IT+0xd4>)
 800624c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4a18      	ldr	r2, [pc, #96]	@ (80062b4 <HAL_I2C_Master_Receive_IT+0xd8>)
 8006252:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006258:	b29b      	uxth	r3, r3
 800625a:	2bff      	cmp	r3, #255	@ 0xff
 800625c:	d906      	bls.n	800626c <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	22ff      	movs	r2, #255	@ 0xff
 8006262:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006264:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006268:	617b      	str	r3, [r7, #20]
 800626a:	e007      	b.n	800627c <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006276:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800627a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006280:	b2da      	uxtb	r2, r3
 8006282:	8979      	ldrh	r1, [r7, #10]
 8006284:	4b0c      	ldr	r3, [pc, #48]	@ (80062b8 <HAL_I2C_Master_Receive_IT+0xdc>)
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f001 fee4 	bl	8008058 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006298:	2102      	movs	r1, #2
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f001 ff0e 	bl	80080bc <I2C_Enable_IRQ>

    return HAL_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	e000      	b.n	80062a6 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80062a4:	2302      	movs	r3, #2
  }
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	ffff0000 	.word	0xffff0000
 80062b4:	0800646f 	.word	0x0800646f
 80062b8:	80002400 	.word	0x80002400

080062bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d005      	beq.n	80062e8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	68f9      	ldr	r1, [r7, #12]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	4798      	blx	r3
  }
}
 80062e8:	bf00      	nop
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	d010      	beq.n	8006336 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	09db      	lsrs	r3, r3, #7
 8006318:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00a      	beq.n	8006336 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006324:	f043 0201 	orr.w	r2, r3, #1
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006334:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	0a9b      	lsrs	r3, r3, #10
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d010      	beq.n	8006364 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	09db      	lsrs	r3, r3, #7
 8006346:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006352:	f043 0208 	orr.w	r2, r3, #8
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006362:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	0a5b      	lsrs	r3, r3, #9
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	d010      	beq.n	8006392 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	09db      	lsrs	r3, r3, #7
 8006374:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00a      	beq.n	8006392 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006380:	f043 0202 	orr.w	r2, r3, #2
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006390:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006396:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f003 030b 	and.w	r3, r3, #11
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80063a2:	68f9      	ldr	r1, [r7, #12]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 fb3b 	bl	8007a20 <I2C_ITError>
  }
}
 80063aa:	bf00      	nop
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	460b      	mov	r3, r1
 80063f8:	70fb      	strb	r3, [r7, #3]
 80063fa:	4613      	mov	r3, r2
 80063fc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b088      	sub	sp, #32
 8006472:	af02      	add	r7, sp, #8
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <I2C_Master_ISR_IT+0x1e>
 8006488:	2302      	movs	r3, #2
 800648a:	e120      	b.n	80066ce <I2C_Master_ISR_IT+0x260>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	091b      	lsrs	r3, r3, #4
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d013      	beq.n	80064c8 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	091b      	lsrs	r3, r3, #4
 80064a4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00d      	beq.n	80064c8 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2210      	movs	r2, #16
 80064b2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b8:	f043 0204 	orr.w	r2, r3, #4
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f001 fbc4 	bl	8007c4e <I2C_Flush_TXDR>
 80064c6:	e0ed      	b.n	80066a4 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	089b      	lsrs	r3, r3, #2
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d023      	beq.n	800651c <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	089b      	lsrs	r3, r3, #2
 80064d8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01d      	beq.n	800651c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f023 0304 	bic.w	r3, r3, #4
 80064e6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800651a:	e0c3      	b.n	80066a4 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	099b      	lsrs	r3, r3, #6
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d12a      	bne.n	800657e <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	085b      	lsrs	r3, r3, #1
 800652c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006530:	2b00      	cmp	r3, #0
 8006532:	d024      	beq.n	800657e <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	085b      	lsrs	r3, r3, #1
 8006538:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01e      	beq.n	800657e <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006544:	b29b      	uxth	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	f000 80ac 	beq.w	80066a4 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006550:	781a      	ldrb	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006566:	3b01      	subs	r3, #1
 8006568:	b29a      	uxth	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006572:	b29b      	uxth	r3, r3
 8006574:	3b01      	subs	r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 800657c:	e092      	b.n	80066a4 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	09db      	lsrs	r3, r3, #7
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	d05d      	beq.n	8006646 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	099b      	lsrs	r3, r3, #6
 800658e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006592:	2b00      	cmp	r3, #0
 8006594:	d057      	beq.n	8006646 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800659a:	b29b      	uxth	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d040      	beq.n	8006622 <I2C_Master_ISR_IT+0x1b4>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d13c      	bne.n	8006622 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065b4:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	2bff      	cmp	r3, #255	@ 0xff
 80065be:	d90e      	bls.n	80065de <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	22ff      	movs	r2, #255	@ 0xff
 80065c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	8a79      	ldrh	r1, [r7, #18]
 80065ce:	2300      	movs	r3, #0
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f001 fd3e 	bl	8008058 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065dc:	e032      	b.n	8006644 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065f0:	d00b      	beq.n	800660a <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065f6:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80065fc:	8a79      	ldrh	r1, [r7, #18]
 80065fe:	2000      	movs	r0, #0
 8006600:	9000      	str	r0, [sp, #0]
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f001 fd28 	bl	8008058 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006608:	e01c      	b.n	8006644 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800660e:	b2da      	uxtb	r2, r3
 8006610:	8a79      	ldrh	r1, [r7, #18]
 8006612:	2300      	movs	r3, #0
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f001 fd1c 	bl	8008058 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006620:	e010      	b.n	8006644 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800662c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006630:	d003      	beq.n	800663a <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 fdde 	bl	80071f4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006638:	e034      	b.n	80066a4 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800663a:	2140      	movs	r1, #64	@ 0x40
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f001 f9ef 	bl	8007a20 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006642:	e02f      	b.n	80066a4 <I2C_Master_ISR_IT+0x236>
 8006644:	e02e      	b.n	80066a4 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	099b      	lsrs	r3, r3, #6
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d028      	beq.n	80066a4 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	099b      	lsrs	r3, r3, #6
 8006656:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800665a:	2b00      	cmp	r3, #0
 800665c:	d022      	beq.n	80066a4 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006662:	b29b      	uxth	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d119      	bne.n	800669c <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006672:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006676:	d015      	beq.n	80066a4 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006680:	d108      	bne.n	8006694 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006690:	605a      	str	r2, [r3, #4]
 8006692:	e007      	b.n	80066a4 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 fdad 	bl	80071f4 <I2C_ITMasterSeqCplt>
 800669a:	e003      	b.n	80066a4 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800669c:	2140      	movs	r1, #64	@ 0x40
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f001 f9be 	bl	8007a20 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d009      	beq.n	80066c4 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	095b      	lsrs	r3, r3, #5
 80066b4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80066bc:	6979      	ldr	r1, [r7, #20]
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 fe34 	bl	800732c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b086      	sub	sp, #24
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d101      	bne.n	80066fa <I2C_Slave_ISR_IT+0x24>
 80066f6:	2302      	movs	r3, #2
 80066f8:	e0ed      	b.n	80068d6 <I2C_Slave_ISR_IT+0x200>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	095b      	lsrs	r3, r3, #5
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	095b      	lsrs	r3, r3, #5
 8006712:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006716:	2b00      	cmp	r3, #0
 8006718:	d004      	beq.n	8006724 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800671a:	6939      	ldr	r1, [r7, #16]
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 fecf 	bl	80074c0 <I2C_ITSlaveCplt>
 8006722:	e0d3      	b.n	80068cc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	091b      	lsrs	r3, r3, #4
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d04d      	beq.n	80067cc <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	091b      	lsrs	r3, r3, #4
 8006734:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006738:	2b00      	cmp	r3, #0
 800673a:	d047      	beq.n	80067cc <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006740:	b29b      	uxth	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d128      	bne.n	8006798 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b28      	cmp	r3, #40	@ 0x28
 8006750:	d108      	bne.n	8006764 <I2C_Slave_ISR_IT+0x8e>
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006758:	d104      	bne.n	8006764 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800675a:	6939      	ldr	r1, [r7, #16]
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f001 f909 	bl	8007974 <I2C_ITListenCplt>
 8006762:	e032      	b.n	80067ca <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b29      	cmp	r3, #41	@ 0x29
 800676e:	d10e      	bne.n	800678e <I2C_Slave_ISR_IT+0xb8>
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006776:	d00a      	beq.n	800678e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2210      	movs	r2, #16
 800677e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f001 fa64 	bl	8007c4e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 fd71 	bl	800726e <I2C_ITSlaveSeqCplt>
 800678c:	e01d      	b.n	80067ca <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2210      	movs	r2, #16
 8006794:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006796:	e096      	b.n	80068c6 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2210      	movs	r2, #16
 800679e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a4:	f043 0204 	orr.w	r2, r3, #4
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d004      	beq.n	80067bc <I2C_Slave_ISR_IT+0xe6>
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067b8:	f040 8085 	bne.w	80068c6 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c0:	4619      	mov	r1, r3
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f001 f92c 	bl	8007a20 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80067c8:	e07d      	b.n	80068c6 <I2C_Slave_ISR_IT+0x1f0>
 80067ca:	e07c      	b.n	80068c6 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	089b      	lsrs	r3, r3, #2
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d030      	beq.n	800683a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	089b      	lsrs	r3, r3, #2
 80067dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d02a      	beq.n	800683a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d018      	beq.n	8006820 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006800:	1c5a      	adds	r2, r3, #1
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800680a:	3b01      	subs	r3, #1
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006816:	b29b      	uxth	r3, r3
 8006818:	3b01      	subs	r3, #1
 800681a:	b29a      	uxth	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006824:	b29b      	uxth	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d14f      	bne.n	80068ca <I2C_Slave_ISR_IT+0x1f4>
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006830:	d04b      	beq.n	80068ca <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 fd1b 	bl	800726e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006838:	e047      	b.n	80068ca <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	08db      	lsrs	r3, r3, #3
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00a      	beq.n	800685c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	08db      	lsrs	r3, r3, #3
 800684a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800684e:	2b00      	cmp	r3, #0
 8006850:	d004      	beq.n	800685c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006852:	6939      	ldr	r1, [r7, #16]
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 fc49 	bl	80070ec <I2C_ITAddrCplt>
 800685a:	e037      	b.n	80068cc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	085b      	lsrs	r3, r3, #1
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d031      	beq.n	80068cc <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006870:	2b00      	cmp	r3, #0
 8006872:	d02b      	beq.n	80068cc <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006878:	b29b      	uxth	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d018      	beq.n	80068b0 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006882:	781a      	ldrb	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006898:	b29b      	uxth	r3, r3
 800689a:	3b01      	subs	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068a6:	3b01      	subs	r3, #1
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	851a      	strh	r2, [r3, #40]	@ 0x28
 80068ae:	e00d      	b.n	80068cc <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068b6:	d002      	beq.n	80068be <I2C_Slave_ISR_IT+0x1e8>
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d106      	bne.n	80068cc <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 fcd5 	bl	800726e <I2C_ITSlaveSeqCplt>
 80068c4:	e002      	b.n	80068cc <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80068c6:	bf00      	nop
 80068c8:	e000      	b.n	80068cc <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80068ca:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b088      	sub	sp, #32
 80068e2:	af02      	add	r7, sp, #8
 80068e4:	60f8      	str	r0, [r7, #12]
 80068e6:	60b9      	str	r1, [r7, #8]
 80068e8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <I2C_Master_ISR_DMA+0x1a>
 80068f4:	2302      	movs	r3, #2
 80068f6:	e0e1      	b.n	8006abc <I2C_Master_ISR_DMA+0x1de>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	091b      	lsrs	r3, r3, #4
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d017      	beq.n	800693c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	091b      	lsrs	r3, r3, #4
 8006910:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006914:	2b00      	cmp	r3, #0
 8006916:	d011      	beq.n	800693c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2210      	movs	r2, #16
 800691e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006924:	f043 0204 	orr.w	r2, r3, #4
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800692c:	2120      	movs	r1, #32
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f001 fbc4 	bl	80080bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f001 f98a 	bl	8007c4e <I2C_Flush_TXDR>
 800693a:	e0ba      	b.n	8006ab2 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	09db      	lsrs	r3, r3, #7
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	d072      	beq.n	8006a2e <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	099b      	lsrs	r3, r3, #6
 800694c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006950:	2b00      	cmp	r3, #0
 8006952:	d06c      	beq.n	8006a2e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006962:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d04e      	beq.n	8006a0c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	b29b      	uxth	r3, r3
 8006976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800697a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006980:	b29b      	uxth	r3, r3
 8006982:	2bff      	cmp	r3, #255	@ 0xff
 8006984:	d906      	bls.n	8006994 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	22ff      	movs	r2, #255	@ 0xff
 800698a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800698c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006990:	617b      	str	r3, [r7, #20]
 8006992:	e010      	b.n	80069b6 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80069a6:	d003      	beq.n	80069b0 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	e002      	b.n	80069b6 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80069b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069b4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	8a79      	ldrh	r1, [r7, #18]
 80069be:	2300      	movs	r3, #0
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f001 fb47 	bl	8008058 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b22      	cmp	r3, #34	@ 0x22
 80069e6:	d108      	bne.n	80069fa <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069f6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80069f8:	e05b      	b.n	8006ab2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a08:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006a0a:	e052      	b.n	8006ab2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a1a:	d003      	beq.n	8006a24 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 fbe9 	bl	80071f4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006a22:	e046      	b.n	8006ab2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a24:	2140      	movs	r1, #64	@ 0x40
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 fffa 	bl	8007a20 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006a2c:	e041      	b.n	8006ab2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	099b      	lsrs	r3, r3, #6
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d029      	beq.n	8006a8e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	099b      	lsrs	r3, r3, #6
 8006a3e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d023      	beq.n	8006a8e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d119      	bne.n	8006a84 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a5e:	d027      	beq.n	8006ab0 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a68:	d108      	bne.n	8006a7c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a78:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006a7a:	e019      	b.n	8006ab0 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 fbb9 	bl	80071f4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006a82:	e015      	b.n	8006ab0 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a84:	2140      	movs	r1, #64	@ 0x40
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 ffca 	bl	8007a20 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006a8c:	e010      	b.n	8006ab0 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	095b      	lsrs	r3, r3, #5
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00b      	beq.n	8006ab2 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	095b      	lsrs	r3, r3, #5
 8006a9e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d005      	beq.n	8006ab2 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fc3f 	bl	800732c <I2C_ITMasterCplt>
 8006aae:	e000      	b.n	8006ab2 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8006ab0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b088      	sub	sp, #32
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006ad0:	4b92      	ldr	r3, [pc, #584]	@ (8006d1c <I2C_Mem_ISR_DMA+0x258>)
 8006ad2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <I2C_Mem_ISR_DMA+0x1e>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e118      	b.n	8006d14 <I2C_Mem_ISR_DMA+0x250>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	091b      	lsrs	r3, r3, #4
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d017      	beq.n	8006b26 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	091b      	lsrs	r3, r3, #4
 8006afa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d011      	beq.n	8006b26 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2210      	movs	r2, #16
 8006b08:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b0e:	f043 0204 	orr.w	r2, r3, #4
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006b16:	2120      	movs	r1, #32
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f001 facf 	bl	80080bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f001 f895 	bl	8007c4e <I2C_Flush_TXDR>
 8006b24:	e0f1      	b.n	8006d0a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	085b      	lsrs	r3, r3, #1
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00f      	beq.n	8006b52 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	085b      	lsrs	r3, r3, #1
 8006b36:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d009      	beq.n	8006b52 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b46:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b4e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b50:	e0db      	b.n	8006d0a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	09db      	lsrs	r3, r3, #7
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d060      	beq.n	8006c20 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	099b      	lsrs	r3, r3, #6
 8006b62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d05a      	beq.n	8006c20 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f001 fb29 	bl	80081c4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006b72:	2110      	movs	r1, #16
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f001 faa1 	bl	80080bc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d048      	beq.n	8006c16 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2bff      	cmp	r3, #255	@ 0xff
 8006b8c:	d910      	bls.n	8006bb0 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	22ff      	movs	r2, #255	@ 0xff
 8006b92:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b98:	b299      	uxth	r1, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f001 fa55 	bl	8008058 <I2C_TransferConfig>
 8006bae:	e011      	b.n	8006bd4 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bbe:	b299      	uxth	r1, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f001 fa42 	bl	8008058 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b22      	cmp	r3, #34	@ 0x22
 8006bf0:	d108      	bne.n	8006c04 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c00:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006c02:	e082      	b.n	8006d0a <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c12:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006c14:	e079      	b.n	8006d0a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006c16:	2140      	movs	r1, #64	@ 0x40
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 ff01 	bl	8007a20 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006c1e:	e074      	b.n	8006d0a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	099b      	lsrs	r3, r3, #6
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d05e      	beq.n	8006cea <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	099b      	lsrs	r3, r3, #6
 8006c30:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d058      	beq.n	8006cea <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c38:	2101      	movs	r1, #1
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f001 fac2 	bl	80081c4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006c40:	2110      	movs	r1, #16
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f001 fa3a 	bl	80080bc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b22      	cmp	r3, #34	@ 0x22
 8006c52:	d101      	bne.n	8006c58 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8006c54:	4b32      	ldr	r3, [pc, #200]	@ (8006d20 <I2C_Mem_ISR_DMA+0x25c>)
 8006c56:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	2bff      	cmp	r3, #255	@ 0xff
 8006c60:	d910      	bls.n	8006c84 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	22ff      	movs	r2, #255	@ 0xff
 8006c66:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c6c:	b299      	uxth	r1, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f001 f9eb 	bl	8008058 <I2C_TransferConfig>
 8006c82:	e011      	b.n	8006ca8 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c92:	b299      	uxth	r1, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f001 f9d8 	bl	8008058 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b22      	cmp	r3, #34	@ 0x22
 8006cc4:	d108      	bne.n	8006cd8 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cd4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cd6:	e018      	b.n	8006d0a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ce6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ce8:	e00f      	b.n	8006d0a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	095b      	lsrs	r3, r3, #5
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d009      	beq.n	8006d0a <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	095b      	lsrs	r3, r3, #5
 8006cfa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d003      	beq.n	8006d0a <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006d02:	68b9      	ldr	r1, [r7, #8]
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f000 fb11 	bl	800732c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	80002000 	.word	0x80002000
 8006d20:	80002400 	.word	0x80002400

08006d24 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b088      	sub	sp, #32
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d34:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <I2C_Slave_ISR_DMA+0x24>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e1cc      	b.n	80070e2 <I2C_Slave_ISR_DMA+0x3be>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	095b      	lsrs	r3, r3, #5
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00a      	beq.n	8006d72 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	095b      	lsrs	r3, r3, #5
 8006d60:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d004      	beq.n	8006d72 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006d68:	68b9      	ldr	r1, [r7, #8]
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 fba8 	bl	80074c0 <I2C_ITSlaveCplt>
 8006d70:	e1b2      	b.n	80070d8 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	091b      	lsrs	r3, r3, #4
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 819c 	beq.w	80070b8 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	091b      	lsrs	r3, r3, #4
 8006d84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 8195 	beq.w	80070b8 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	0b9b      	lsrs	r3, r3, #14
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d106      	bne.n	8006da8 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	0bdb      	lsrs	r3, r3, #15
 8006d9e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 8181 	beq.w	80070aa <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d07c      	beq.n	8006eaa <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	0bdb      	lsrs	r3, r3, #15
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d076      	beq.n	8006eaa <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a75      	ldr	r2, [pc, #468]	@ (8006f98 <I2C_Slave_ISR_DMA+0x274>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d059      	beq.n	8006e7c <I2C_Slave_ISR_DMA+0x158>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a73      	ldr	r2, [pc, #460]	@ (8006f9c <I2C_Slave_ISR_DMA+0x278>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d053      	beq.n	8006e7c <I2C_Slave_ISR_DMA+0x158>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a71      	ldr	r2, [pc, #452]	@ (8006fa0 <I2C_Slave_ISR_DMA+0x27c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d04d      	beq.n	8006e7c <I2C_Slave_ISR_DMA+0x158>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a6f      	ldr	r2, [pc, #444]	@ (8006fa4 <I2C_Slave_ISR_DMA+0x280>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d047      	beq.n	8006e7c <I2C_Slave_ISR_DMA+0x158>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a6d      	ldr	r2, [pc, #436]	@ (8006fa8 <I2C_Slave_ISR_DMA+0x284>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d041      	beq.n	8006e7c <I2C_Slave_ISR_DMA+0x158>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a6b      	ldr	r2, [pc, #428]	@ (8006fac <I2C_Slave_ISR_DMA+0x288>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d03b      	beq.n	8006e7c <I2C_Slave_ISR_DMA+0x158>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a69      	ldr	r2, [pc, #420]	@ (8006fb0 <I2C_Slave_ISR_DMA+0x28c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d035      	beq.n	8006e7c <I2C_Slave_ISR_DMA+0x158>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a67      	ldr	r2, [pc, #412]	@ (8006fb4 <I2C_Slave_ISR_DMA+0x290>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d02f      	beq.n	8006e7c <I2C_Slave_ISR_DMA+0x158>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a65      	ldr	r2, [pc, #404]	@ (8006fb8 <I2C_Slave_ISR_DMA+0x294>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d029      	beq.n	8006e7c <I2C_Slave_ISR_DMA+0x158>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a63      	ldr	r2, [pc, #396]	@ (8006fbc <I2C_Slave_ISR_DMA+0x298>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d023      	beq.n	8006e7c <I2C_Slave_ISR_DMA+0x158>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a61      	ldr	r2, [pc, #388]	@ (8006fc0 <I2C_Slave_ISR_DMA+0x29c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d01d      	beq.n	8006e7c <I2C_Slave_ISR_DMA+0x158>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a5f      	ldr	r2, [pc, #380]	@ (8006fc4 <I2C_Slave_ISR_DMA+0x2a0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d017      	beq.n	8006e7c <I2C_Slave_ISR_DMA+0x158>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a5d      	ldr	r2, [pc, #372]	@ (8006fc8 <I2C_Slave_ISR_DMA+0x2a4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d011      	beq.n	8006e7c <I2C_Slave_ISR_DMA+0x158>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a5b      	ldr	r2, [pc, #364]	@ (8006fcc <I2C_Slave_ISR_DMA+0x2a8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00b      	beq.n	8006e7c <I2C_Slave_ISR_DMA+0x158>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a59      	ldr	r2, [pc, #356]	@ (8006fd0 <I2C_Slave_ISR_DMA+0x2ac>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d005      	beq.n	8006e7c <I2C_Slave_ISR_DMA+0x158>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a57      	ldr	r2, [pc, #348]	@ (8006fd4 <I2C_Slave_ISR_DMA+0x2b0>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d109      	bne.n	8006e90 <I2C_Slave_ISR_DMA+0x16c>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	bf0c      	ite	eq
 8006e88:	2301      	moveq	r3, #1
 8006e8a:	2300      	movne	r3, #0
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	e008      	b.n	8006ea2 <I2C_Slave_ISR_DMA+0x17e>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	bf0c      	ite	eq
 8006e9c:	2301      	moveq	r3, #1
 8006e9e:	2300      	movne	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 809f 	beq.w	8006ff2 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	0b9b      	lsrs	r3, r3, #14
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 8098 	beq.w	8006ff2 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a33      	ldr	r2, [pc, #204]	@ (8006f98 <I2C_Slave_ISR_DMA+0x274>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d059      	beq.n	8006f82 <I2C_Slave_ISR_DMA+0x25e>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a31      	ldr	r2, [pc, #196]	@ (8006f9c <I2C_Slave_ISR_DMA+0x278>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d053      	beq.n	8006f82 <I2C_Slave_ISR_DMA+0x25e>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a2f      	ldr	r2, [pc, #188]	@ (8006fa0 <I2C_Slave_ISR_DMA+0x27c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d04d      	beq.n	8006f82 <I2C_Slave_ISR_DMA+0x25e>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a2d      	ldr	r2, [pc, #180]	@ (8006fa4 <I2C_Slave_ISR_DMA+0x280>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d047      	beq.n	8006f82 <I2C_Slave_ISR_DMA+0x25e>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8006fa8 <I2C_Slave_ISR_DMA+0x284>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d041      	beq.n	8006f82 <I2C_Slave_ISR_DMA+0x25e>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a29      	ldr	r2, [pc, #164]	@ (8006fac <I2C_Slave_ISR_DMA+0x288>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d03b      	beq.n	8006f82 <I2C_Slave_ISR_DMA+0x25e>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a27      	ldr	r2, [pc, #156]	@ (8006fb0 <I2C_Slave_ISR_DMA+0x28c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d035      	beq.n	8006f82 <I2C_Slave_ISR_DMA+0x25e>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a25      	ldr	r2, [pc, #148]	@ (8006fb4 <I2C_Slave_ISR_DMA+0x290>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d02f      	beq.n	8006f82 <I2C_Slave_ISR_DMA+0x25e>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a23      	ldr	r2, [pc, #140]	@ (8006fb8 <I2C_Slave_ISR_DMA+0x294>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d029      	beq.n	8006f82 <I2C_Slave_ISR_DMA+0x25e>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a21      	ldr	r2, [pc, #132]	@ (8006fbc <I2C_Slave_ISR_DMA+0x298>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d023      	beq.n	8006f82 <I2C_Slave_ISR_DMA+0x25e>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a1f      	ldr	r2, [pc, #124]	@ (8006fc0 <I2C_Slave_ISR_DMA+0x29c>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d01d      	beq.n	8006f82 <I2C_Slave_ISR_DMA+0x25e>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc4 <I2C_Slave_ISR_DMA+0x2a0>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d017      	beq.n	8006f82 <I2C_Slave_ISR_DMA+0x25e>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a1b      	ldr	r2, [pc, #108]	@ (8006fc8 <I2C_Slave_ISR_DMA+0x2a4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d011      	beq.n	8006f82 <I2C_Slave_ISR_DMA+0x25e>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a19      	ldr	r2, [pc, #100]	@ (8006fcc <I2C_Slave_ISR_DMA+0x2a8>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00b      	beq.n	8006f82 <I2C_Slave_ISR_DMA+0x25e>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a17      	ldr	r2, [pc, #92]	@ (8006fd0 <I2C_Slave_ISR_DMA+0x2ac>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d005      	beq.n	8006f82 <I2C_Slave_ISR_DMA+0x25e>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a15      	ldr	r2, [pc, #84]	@ (8006fd4 <I2C_Slave_ISR_DMA+0x2b0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d12a      	bne.n	8006fd8 <I2C_Slave_ISR_DMA+0x2b4>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	bf0c      	ite	eq
 8006f8e:	2301      	moveq	r3, #1
 8006f90:	2300      	movne	r3, #0
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	e029      	b.n	8006fea <I2C_Slave_ISR_DMA+0x2c6>
 8006f96:	bf00      	nop
 8006f98:	40020010 	.word	0x40020010
 8006f9c:	40020028 	.word	0x40020028
 8006fa0:	40020040 	.word	0x40020040
 8006fa4:	40020058 	.word	0x40020058
 8006fa8:	40020070 	.word	0x40020070
 8006fac:	40020088 	.word	0x40020088
 8006fb0:	400200a0 	.word	0x400200a0
 8006fb4:	400200b8 	.word	0x400200b8
 8006fb8:	40020410 	.word	0x40020410
 8006fbc:	40020428 	.word	0x40020428
 8006fc0:	40020440 	.word	0x40020440
 8006fc4:	40020458 	.word	0x40020458
 8006fc8:	40020470 	.word	0x40020470
 8006fcc:	40020488 	.word	0x40020488
 8006fd0:	400204a0 	.word	0x400204a0
 8006fd4:	400204b8 	.word	0x400204b8
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bf0c      	ite	eq
 8006fe4:	2301      	moveq	r3, #1
 8006fe6:	2300      	movne	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d128      	bne.n	800704a <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b28      	cmp	r3, #40	@ 0x28
 8007002:	d108      	bne.n	8007016 <I2C_Slave_ISR_DMA+0x2f2>
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800700a:	d104      	bne.n	8007016 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800700c:	68b9      	ldr	r1, [r7, #8]
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 fcb0 	bl	8007974 <I2C_ITListenCplt>
 8007014:	e048      	b.n	80070a8 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b29      	cmp	r3, #41	@ 0x29
 8007020:	d10e      	bne.n	8007040 <I2C_Slave_ISR_DMA+0x31c>
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007028:	d00a      	beq.n	8007040 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2210      	movs	r2, #16
 8007030:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 fe0b 	bl	8007c4e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 f918 	bl	800726e <I2C_ITSlaveSeqCplt>
 800703e:	e033      	b.n	80070a8 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2210      	movs	r2, #16
 8007046:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007048:	e034      	b.n	80070b4 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2210      	movs	r2, #16
 8007050:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007056:	f043 0204 	orr.w	r2, r3, #4
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007064:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <I2C_Slave_ISR_DMA+0x350>
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007072:	d11f      	bne.n	80070b4 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007074:	7dfb      	ldrb	r3, [r7, #23]
 8007076:	2b21      	cmp	r3, #33	@ 0x21
 8007078:	d002      	beq.n	8007080 <I2C_Slave_ISR_DMA+0x35c>
 800707a:	7dfb      	ldrb	r3, [r7, #23]
 800707c:	2b29      	cmp	r3, #41	@ 0x29
 800707e:	d103      	bne.n	8007088 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2221      	movs	r2, #33	@ 0x21
 8007084:	631a      	str	r2, [r3, #48]	@ 0x30
 8007086:	e008      	b.n	800709a <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007088:	7dfb      	ldrb	r3, [r7, #23]
 800708a:	2b22      	cmp	r3, #34	@ 0x22
 800708c:	d002      	beq.n	8007094 <I2C_Slave_ISR_DMA+0x370>
 800708e:	7dfb      	ldrb	r3, [r7, #23]
 8007090:	2b2a      	cmp	r3, #42	@ 0x2a
 8007092:	d102      	bne.n	800709a <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2222      	movs	r2, #34	@ 0x22
 8007098:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800709e:	4619      	mov	r1, r3
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 fcbd 	bl	8007a20 <I2C_ITError>
      if (treatdmanack == 1U)
 80070a6:	e005      	b.n	80070b4 <I2C_Slave_ISR_DMA+0x390>
 80070a8:	e004      	b.n	80070b4 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2210      	movs	r2, #16
 80070b0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80070b2:	e011      	b.n	80070d8 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 80070b4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80070b6:	e00f      	b.n	80070d8 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	08db      	lsrs	r3, r3, #3
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d009      	beq.n	80070d8 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	08db      	lsrs	r3, r3, #3
 80070c8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d003      	beq.n	80070d8 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80070d0:	68b9      	ldr	r1, [r7, #8]
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 f80a 	bl	80070ec <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3720      	adds	r7, #32
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop

080070ec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007102:	2b28      	cmp	r3, #40	@ 0x28
 8007104:	d16a      	bne.n	80071dc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	0c1b      	lsrs	r3, r3, #16
 800710e:	b2db      	uxtb	r3, r3
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	0c1b      	lsrs	r3, r3, #16
 800711e:	b29b      	uxth	r3, r3
 8007120:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007124:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	b29b      	uxth	r3, r3
 800712e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007132:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	b29b      	uxth	r3, r3
 800713c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007140:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	2b02      	cmp	r3, #2
 8007148:	d138      	bne.n	80071bc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800714a:	897b      	ldrh	r3, [r7, #10]
 800714c:	09db      	lsrs	r3, r3, #7
 800714e:	b29a      	uxth	r2, r3
 8007150:	89bb      	ldrh	r3, [r7, #12]
 8007152:	4053      	eors	r3, r2
 8007154:	b29b      	uxth	r3, r3
 8007156:	f003 0306 	and.w	r3, r3, #6
 800715a:	2b00      	cmp	r3, #0
 800715c:	d11c      	bne.n	8007198 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800715e:	897b      	ldrh	r3, [r7, #10]
 8007160:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007170:	2b02      	cmp	r3, #2
 8007172:	d13b      	bne.n	80071ec <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2208      	movs	r2, #8
 8007180:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800718a:	89ba      	ldrh	r2, [r7, #12]
 800718c:	7bfb      	ldrb	r3, [r7, #15]
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff f92c 	bl	80063ee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007196:	e029      	b.n	80071ec <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007198:	893b      	ldrh	r3, [r7, #8]
 800719a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800719c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 f80f 	bl	80081c4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80071ae:	89ba      	ldrh	r2, [r7, #12]
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff f91a 	bl	80063ee <HAL_I2C_AddrCallback>
}
 80071ba:	e017      	b.n	80071ec <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80071bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 ffff 	bl	80081c4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80071ce:	89ba      	ldrh	r2, [r7, #12]
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7ff f90a 	bl	80063ee <HAL_I2C_AddrCallback>
}
 80071da:	e007      	b.n	80071ec <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2208      	movs	r2, #8
 80071e2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80071ec:	bf00      	nop
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b21      	cmp	r3, #33	@ 0x21
 800720e:	d115      	bne.n	800723c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2211      	movs	r2, #17
 800721c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007224:	2101      	movs	r1, #1
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 ffcc 	bl	80081c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff f8bc 	bl	80063b2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800723a:	e014      	b.n	8007266 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2220      	movs	r2, #32
 8007240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2212      	movs	r2, #18
 8007248:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007250:	2102      	movs	r1, #2
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 ffb6 	bl	80081c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7fa fcf3 	bl	8001c4c <HAL_I2C_MasterRxCpltCallback>
}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	0b9b      	lsrs	r3, r3, #14
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d008      	beq.n	80072a4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80072a0:	601a      	str	r2, [r3, #0]
 80072a2:	e00d      	b.n	80072c0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	0bdb      	lsrs	r3, r3, #15
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d007      	beq.n	80072c0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80072be:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b29      	cmp	r3, #41	@ 0x29
 80072ca:	d112      	bne.n	80072f2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2228      	movs	r2, #40	@ 0x28
 80072d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2221      	movs	r2, #33	@ 0x21
 80072d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80072da:	2101      	movs	r1, #1
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 ff71 	bl	80081c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff f86b 	bl	80063c6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80072f0:	e017      	b.n	8007322 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80072fc:	d111      	bne.n	8007322 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2228      	movs	r2, #40	@ 0x28
 8007302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2222      	movs	r2, #34	@ 0x22
 800730a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800730c:	2102      	movs	r1, #2
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 ff58 	bl	80081c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f7ff f85c 	bl	80063da <HAL_I2C_SlaveRxCpltCallback>
}
 8007322:	bf00      	nop
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2220      	movs	r2, #32
 8007340:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b21      	cmp	r3, #33	@ 0x21
 800734c:	d107      	bne.n	800735e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800734e:	2101      	movs	r1, #1
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 ff37 	bl	80081c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2211      	movs	r2, #17
 800735a:	631a      	str	r2, [r3, #48]	@ 0x30
 800735c:	e00c      	b.n	8007378 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b22      	cmp	r3, #34	@ 0x22
 8007368:	d106      	bne.n	8007378 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800736a:	2102      	movs	r1, #2
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 ff29 	bl	80081c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2212      	movs	r2, #18
 8007376:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6859      	ldr	r1, [r3, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	4b4d      	ldr	r3, [pc, #308]	@ (80074b8 <I2C_ITMasterCplt+0x18c>)
 8007384:	400b      	ands	r3, r1
 8007386:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a4a      	ldr	r2, [pc, #296]	@ (80074bc <I2C_ITMasterCplt+0x190>)
 8007392:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	091b      	lsrs	r3, r3, #4
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b00      	cmp	r3, #0
 800739e:	d009      	beq.n	80073b4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2210      	movs	r2, #16
 80073a6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ac:	f043 0204 	orr.w	r2, r3, #4
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b60      	cmp	r3, #96	@ 0x60
 80073be:	d10b      	bne.n	80073d8 <I2C_ITMasterCplt+0xac>
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	089b      	lsrs	r3, r3, #2
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d005      	beq.n	80073d8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80073d6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fc38 	bl	8007c4e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b60      	cmp	r3, #96	@ 0x60
 80073ee:	d002      	beq.n	80073f6 <I2C_ITMasterCplt+0xca>
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d006      	beq.n	8007404 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fb0f 	bl	8007a20 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007402:	e054      	b.n	80074ae <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b21      	cmp	r3, #33	@ 0x21
 800740e:	d124      	bne.n	800745a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2220      	movs	r2, #32
 8007414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b40      	cmp	r3, #64	@ 0x40
 8007428:	d10b      	bne.n	8007442 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7fe ffef 	bl	800641e <HAL_I2C_MemTxCpltCallback>
}
 8007440:	e035      	b.n	80074ae <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7fe ffad 	bl	80063b2 <HAL_I2C_MasterTxCpltCallback>
}
 8007458:	e029      	b.n	80074ae <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b22      	cmp	r3, #34	@ 0x22
 8007464:	d123      	bne.n	80074ae <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2220      	movs	r2, #32
 800746a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b40      	cmp	r3, #64	@ 0x40
 800747e:	d10b      	bne.n	8007498 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7fe ffce 	bl	8006432 <HAL_I2C_MemRxCpltCallback>
}
 8007496:	e00a      	b.n	80074ae <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7fa fbcf 	bl	8001c4c <HAL_I2C_MasterRxCpltCallback>
}
 80074ae:	bf00      	nop
 80074b0:	3718      	adds	r7, #24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	fe00e800 	.word	0xfe00e800
 80074bc:	ffff0000 	.word	0xffff0000

080074c0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074da:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074e2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2220      	movs	r2, #32
 80074ea:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80074ec:	7afb      	ldrb	r3, [r7, #11]
 80074ee:	2b21      	cmp	r3, #33	@ 0x21
 80074f0:	d002      	beq.n	80074f8 <I2C_ITSlaveCplt+0x38>
 80074f2:	7afb      	ldrb	r3, [r7, #11]
 80074f4:	2b29      	cmp	r3, #41	@ 0x29
 80074f6:	d108      	bne.n	800750a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80074f8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fe61 	bl	80081c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2221      	movs	r2, #33	@ 0x21
 8007506:	631a      	str	r2, [r3, #48]	@ 0x30
 8007508:	e019      	b.n	800753e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800750a:	7afb      	ldrb	r3, [r7, #11]
 800750c:	2b22      	cmp	r3, #34	@ 0x22
 800750e:	d002      	beq.n	8007516 <I2C_ITSlaveCplt+0x56>
 8007510:	7afb      	ldrb	r3, [r7, #11]
 8007512:	2b2a      	cmp	r3, #42	@ 0x2a
 8007514:	d108      	bne.n	8007528 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007516:	f248 0102 	movw	r1, #32770	@ 0x8002
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fe52 	bl	80081c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2222      	movs	r2, #34	@ 0x22
 8007524:	631a      	str	r2, [r3, #48]	@ 0x30
 8007526:	e00a      	b.n	800753e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007528:	7afb      	ldrb	r3, [r7, #11]
 800752a:	2b28      	cmp	r3, #40	@ 0x28
 800752c:	d107      	bne.n	800753e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800752e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fe46 	bl	80081c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800754c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6859      	ldr	r1, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	4b80      	ldr	r3, [pc, #512]	@ (800775c <I2C_ITSlaveCplt+0x29c>)
 800755a:	400b      	ands	r3, r1
 800755c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fb75 	bl	8007c4e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	0b9b      	lsrs	r3, r3, #14
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d07a      	beq.n	8007666 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800757e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 8112 	beq.w	80077ae <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a73      	ldr	r2, [pc, #460]	@ (8007760 <I2C_ITSlaveCplt+0x2a0>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d059      	beq.n	800764a <I2C_ITSlaveCplt+0x18a>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a71      	ldr	r2, [pc, #452]	@ (8007764 <I2C_ITSlaveCplt+0x2a4>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d053      	beq.n	800764a <I2C_ITSlaveCplt+0x18a>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a6f      	ldr	r2, [pc, #444]	@ (8007768 <I2C_ITSlaveCplt+0x2a8>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d04d      	beq.n	800764a <I2C_ITSlaveCplt+0x18a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a6d      	ldr	r2, [pc, #436]	@ (800776c <I2C_ITSlaveCplt+0x2ac>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d047      	beq.n	800764a <I2C_ITSlaveCplt+0x18a>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a6b      	ldr	r2, [pc, #428]	@ (8007770 <I2C_ITSlaveCplt+0x2b0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d041      	beq.n	800764a <I2C_ITSlaveCplt+0x18a>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a69      	ldr	r2, [pc, #420]	@ (8007774 <I2C_ITSlaveCplt+0x2b4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d03b      	beq.n	800764a <I2C_ITSlaveCplt+0x18a>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a67      	ldr	r2, [pc, #412]	@ (8007778 <I2C_ITSlaveCplt+0x2b8>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d035      	beq.n	800764a <I2C_ITSlaveCplt+0x18a>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a65      	ldr	r2, [pc, #404]	@ (800777c <I2C_ITSlaveCplt+0x2bc>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d02f      	beq.n	800764a <I2C_ITSlaveCplt+0x18a>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a63      	ldr	r2, [pc, #396]	@ (8007780 <I2C_ITSlaveCplt+0x2c0>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d029      	beq.n	800764a <I2C_ITSlaveCplt+0x18a>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a61      	ldr	r2, [pc, #388]	@ (8007784 <I2C_ITSlaveCplt+0x2c4>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d023      	beq.n	800764a <I2C_ITSlaveCplt+0x18a>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a5f      	ldr	r2, [pc, #380]	@ (8007788 <I2C_ITSlaveCplt+0x2c8>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d01d      	beq.n	800764a <I2C_ITSlaveCplt+0x18a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a5d      	ldr	r2, [pc, #372]	@ (800778c <I2C_ITSlaveCplt+0x2cc>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d017      	beq.n	800764a <I2C_ITSlaveCplt+0x18a>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a5b      	ldr	r2, [pc, #364]	@ (8007790 <I2C_ITSlaveCplt+0x2d0>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d011      	beq.n	800764a <I2C_ITSlaveCplt+0x18a>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a59      	ldr	r2, [pc, #356]	@ (8007794 <I2C_ITSlaveCplt+0x2d4>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d00b      	beq.n	800764a <I2C_ITSlaveCplt+0x18a>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a57      	ldr	r2, [pc, #348]	@ (8007798 <I2C_ITSlaveCplt+0x2d8>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d005      	beq.n	800764a <I2C_ITSlaveCplt+0x18a>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a55      	ldr	r2, [pc, #340]	@ (800779c <I2C_ITSlaveCplt+0x2dc>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d105      	bne.n	8007656 <I2C_ITSlaveCplt+0x196>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	b29b      	uxth	r3, r3
 8007654:	e004      	b.n	8007660 <I2C_ITSlaveCplt+0x1a0>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	b29b      	uxth	r3, r3
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8007664:	e0a3      	b.n	80077ae <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	0bdb      	lsrs	r3, r3, #15
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 809d 	beq.w	80077ae <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007682:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 8090 	beq.w	80077ae <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a32      	ldr	r2, [pc, #200]	@ (8007760 <I2C_ITSlaveCplt+0x2a0>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d059      	beq.n	800774e <I2C_ITSlaveCplt+0x28e>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a30      	ldr	r2, [pc, #192]	@ (8007764 <I2C_ITSlaveCplt+0x2a4>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d053      	beq.n	800774e <I2C_ITSlaveCplt+0x28e>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a2e      	ldr	r2, [pc, #184]	@ (8007768 <I2C_ITSlaveCplt+0x2a8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d04d      	beq.n	800774e <I2C_ITSlaveCplt+0x28e>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a2c      	ldr	r2, [pc, #176]	@ (800776c <I2C_ITSlaveCplt+0x2ac>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d047      	beq.n	800774e <I2C_ITSlaveCplt+0x28e>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a2a      	ldr	r2, [pc, #168]	@ (8007770 <I2C_ITSlaveCplt+0x2b0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d041      	beq.n	800774e <I2C_ITSlaveCplt+0x28e>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a28      	ldr	r2, [pc, #160]	@ (8007774 <I2C_ITSlaveCplt+0x2b4>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d03b      	beq.n	800774e <I2C_ITSlaveCplt+0x28e>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a26      	ldr	r2, [pc, #152]	@ (8007778 <I2C_ITSlaveCplt+0x2b8>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d035      	beq.n	800774e <I2C_ITSlaveCplt+0x28e>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a24      	ldr	r2, [pc, #144]	@ (800777c <I2C_ITSlaveCplt+0x2bc>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d02f      	beq.n	800774e <I2C_ITSlaveCplt+0x28e>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a22      	ldr	r2, [pc, #136]	@ (8007780 <I2C_ITSlaveCplt+0x2c0>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d029      	beq.n	800774e <I2C_ITSlaveCplt+0x28e>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a20      	ldr	r2, [pc, #128]	@ (8007784 <I2C_ITSlaveCplt+0x2c4>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d023      	beq.n	800774e <I2C_ITSlaveCplt+0x28e>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a1e      	ldr	r2, [pc, #120]	@ (8007788 <I2C_ITSlaveCplt+0x2c8>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d01d      	beq.n	800774e <I2C_ITSlaveCplt+0x28e>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a1c      	ldr	r2, [pc, #112]	@ (800778c <I2C_ITSlaveCplt+0x2cc>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d017      	beq.n	800774e <I2C_ITSlaveCplt+0x28e>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a1a      	ldr	r2, [pc, #104]	@ (8007790 <I2C_ITSlaveCplt+0x2d0>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d011      	beq.n	800774e <I2C_ITSlaveCplt+0x28e>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a18      	ldr	r2, [pc, #96]	@ (8007794 <I2C_ITSlaveCplt+0x2d4>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d00b      	beq.n	800774e <I2C_ITSlaveCplt+0x28e>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a16      	ldr	r2, [pc, #88]	@ (8007798 <I2C_ITSlaveCplt+0x2d8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d005      	beq.n	800774e <I2C_ITSlaveCplt+0x28e>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a14      	ldr	r2, [pc, #80]	@ (800779c <I2C_ITSlaveCplt+0x2dc>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d128      	bne.n	80077a0 <I2C_ITSlaveCplt+0x2e0>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	b29b      	uxth	r3, r3
 8007758:	e027      	b.n	80077aa <I2C_ITSlaveCplt+0x2ea>
 800775a:	bf00      	nop
 800775c:	fe00e800 	.word	0xfe00e800
 8007760:	40020010 	.word	0x40020010
 8007764:	40020028 	.word	0x40020028
 8007768:	40020040 	.word	0x40020040
 800776c:	40020058 	.word	0x40020058
 8007770:	40020070 	.word	0x40020070
 8007774:	40020088 	.word	0x40020088
 8007778:	400200a0 	.word	0x400200a0
 800777c:	400200b8 	.word	0x400200b8
 8007780:	40020410 	.word	0x40020410
 8007784:	40020428 	.word	0x40020428
 8007788:	40020440 	.word	0x40020440
 800778c:	40020458 	.word	0x40020458
 8007790:	40020470 	.word	0x40020470
 8007794:	40020488 	.word	0x40020488
 8007798:	400204a0 	.word	0x400204a0
 800779c:	400204b8 	.word	0x400204b8
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	089b      	lsrs	r3, r3, #2
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d020      	beq.n	80077fc <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f023 0304 	bic.w	r3, r3, #4
 80077c0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077cc:	b2d2      	uxtb	r2, r2
 80077ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00c      	beq.n	80077fc <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	3b01      	subs	r3, #1
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007800:	b29b      	uxth	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d005      	beq.n	8007812 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800780a:	f043 0204 	orr.w	r2, r3, #4
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	091b      	lsrs	r3, r3, #4
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b00      	cmp	r3, #0
 800781c:	d04a      	beq.n	80078b4 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	091b      	lsrs	r3, r3, #4
 8007822:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007826:	2b00      	cmp	r3, #0
 8007828:	d044      	beq.n	80078b4 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800782e:	b29b      	uxth	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d128      	bne.n	8007886 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b28      	cmp	r3, #40	@ 0x28
 800783e:	d108      	bne.n	8007852 <I2C_ITSlaveCplt+0x392>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007846:	d104      	bne.n	8007852 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007848:	6979      	ldr	r1, [r7, #20]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f892 	bl	8007974 <I2C_ITListenCplt>
 8007850:	e030      	b.n	80078b4 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b29      	cmp	r3, #41	@ 0x29
 800785c:	d10e      	bne.n	800787c <I2C_ITSlaveCplt+0x3bc>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007864:	d00a      	beq.n	800787c <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2210      	movs	r2, #16
 800786c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f9ed 	bl	8007c4e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff fcfa 	bl	800726e <I2C_ITSlaveSeqCplt>
 800787a:	e01b      	b.n	80078b4 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2210      	movs	r2, #16
 8007882:	61da      	str	r2, [r3, #28]
 8007884:	e016      	b.n	80078b4 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2210      	movs	r2, #16
 800788c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007892:	f043 0204 	orr.w	r2, r3, #4
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <I2C_ITSlaveCplt+0x3e8>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078a6:	d105      	bne.n	80078b4 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f8b6 	bl	8007a20 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d010      	beq.n	80078ec <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f8a5 	bl	8007a20 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b28      	cmp	r3, #40	@ 0x28
 80078e0:	d141      	bne.n	8007966 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80078e2:	6979      	ldr	r1, [r7, #20]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f845 	bl	8007974 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80078ea:	e03c      	b.n	8007966 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80078f4:	d014      	beq.n	8007920 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff fcb9 	bl	800726e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a1c      	ldr	r2, [pc, #112]	@ (8007970 <I2C_ITSlaveCplt+0x4b0>)
 8007900:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2220      	movs	r2, #32
 8007906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7fe fd76 	bl	800640a <HAL_I2C_ListenCpltCallback>
}
 800791e:	e022      	b.n	8007966 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b22      	cmp	r3, #34	@ 0x22
 800792a:	d10e      	bne.n	800794a <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2220      	movs	r2, #32
 8007930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7fe fd49 	bl	80063da <HAL_I2C_SlaveRxCpltCallback>
}
 8007948:	e00d      	b.n	8007966 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7fe fd30 	bl	80063c6 <HAL_I2C_SlaveTxCpltCallback>
}
 8007966:	bf00      	nop
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	ffff0000 	.word	0xffff0000

08007974 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a26      	ldr	r2, [pc, #152]	@ (8007a1c <I2C_ITListenCplt+0xa8>)
 8007982:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2220      	movs	r2, #32
 800798e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	089b      	lsrs	r3, r3, #2
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d022      	beq.n	80079f2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b6:	b2d2      	uxtb	r2, r2
 80079b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d012      	beq.n	80079f2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079d0:	3b01      	subs	r3, #1
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079dc:	b29b      	uxth	r3, r3
 80079de:	3b01      	subs	r3, #1
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ea:	f043 0204 	orr.w	r2, r3, #4
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80079f2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fbe4 	bl	80081c4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2210      	movs	r2, #16
 8007a02:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7fe fcfc 	bl	800640a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007a12:	bf00      	nop
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	ffff0000 	.word	0xffff0000

08007a20 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a30:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a6d      	ldr	r2, [pc, #436]	@ (8007bf4 <I2C_ITError+0x1d4>)
 8007a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	431a      	orrs	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
 8007a54:	2b28      	cmp	r3, #40	@ 0x28
 8007a56:	d005      	beq.n	8007a64 <I2C_ITError+0x44>
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
 8007a5a:	2b29      	cmp	r3, #41	@ 0x29
 8007a5c:	d002      	beq.n	8007a64 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a62:	d10b      	bne.n	8007a7c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007a64:	2103      	movs	r1, #3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fbac 	bl	80081c4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2228      	movs	r2, #40	@ 0x28
 8007a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a60      	ldr	r2, [pc, #384]	@ (8007bf8 <I2C_ITError+0x1d8>)
 8007a78:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a7a:	e030      	b.n	8007ade <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007a7c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fb9f 	bl	80081c4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f8e1 	bl	8007c4e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b60      	cmp	r3, #96	@ 0x60
 8007a96:	d01f      	beq.n	8007ad8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	f003 0320 	and.w	r3, r3, #32
 8007aaa:	2b20      	cmp	r3, #32
 8007aac:	d114      	bne.n	8007ad8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	f003 0310 	and.w	r3, r3, #16
 8007ab8:	2b10      	cmp	r3, #16
 8007aba:	d109      	bne.n	8007ad0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2210      	movs	r2, #16
 8007ac2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ac8:	f043 0204 	orr.w	r2, r3, #4
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d039      	beq.n	8007b60 <I2C_ITError+0x140>
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2b11      	cmp	r3, #17
 8007af0:	d002      	beq.n	8007af8 <I2C_ITError+0xd8>
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	2b21      	cmp	r3, #33	@ 0x21
 8007af6:	d133      	bne.n	8007b60 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b06:	d107      	bne.n	8007b18 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007b16:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fd fe95 	bl	800584c <HAL_DMA_GetState>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d017      	beq.n	8007b58 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2c:	4a33      	ldr	r2, [pc, #204]	@ (8007bfc <I2C_ITError+0x1dc>)
 8007b2e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fd fc3f 	bl	80053c0 <HAL_DMA_Abort_IT>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d04d      	beq.n	8007be4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007b52:	4610      	mov	r0, r2
 8007b54:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b56:	e045      	b.n	8007be4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f851 	bl	8007c00 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b5e:	e041      	b.n	8007be4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d039      	beq.n	8007bdc <I2C_ITError+0x1bc>
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b12      	cmp	r3, #18
 8007b6c:	d002      	beq.n	8007b74 <I2C_ITError+0x154>
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2b22      	cmp	r3, #34	@ 0x22
 8007b72:	d133      	bne.n	8007bdc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b82:	d107      	bne.n	8007b94 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b92:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fd fe57 	bl	800584c <HAL_DMA_GetState>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d017      	beq.n	8007bd4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba8:	4a14      	ldr	r2, [pc, #80]	@ (8007bfc <I2C_ITError+0x1dc>)
 8007baa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fd fc01 	bl	80053c0 <HAL_DMA_Abort_IT>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d011      	beq.n	8007be8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007bce:	4610      	mov	r0, r2
 8007bd0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bd2:	e009      	b.n	8007be8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f813 	bl	8007c00 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bda:	e005      	b.n	8007be8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f80f 	bl	8007c00 <I2C_TreatErrorCallback>
  }
}
 8007be2:	e002      	b.n	8007bea <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007be4:	bf00      	nop
 8007be6:	e000      	b.n	8007bea <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007be8:	bf00      	nop
}
 8007bea:	bf00      	nop
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	ffff0000 	.word	0xffff0000
 8007bf8:	080066d7 	.word	0x080066d7
 8007bfc:	08007c97 	.word	0x08007c97

08007c00 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b60      	cmp	r3, #96	@ 0x60
 8007c12:	d10e      	bne.n	8007c32 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7fe fc15 	bl	800645a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007c30:	e009      	b.n	8007c46 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7fe fc00 	bl	8006446 <HAL_I2C_ErrorCallback>
}
 8007c46:	bf00      	nop
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	f003 0302 	and.w	r3, r3, #2
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d103      	bne.n	8007c6c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d007      	beq.n	8007c8a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	699a      	ldr	r2, [r3, #24]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f042 0201 	orr.w	r2, r2, #1
 8007c88:	619a      	str	r2, [r3, #24]
  }
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d003      	beq.n	8007cb4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d003      	beq.n	8007cc4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f7ff ff9b 	bl	8007c00 <I2C_TreatErrorCallback>
}
 8007cca:	bf00      	nop
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	60f8      	str	r0, [r7, #12]
 8007cda:	60b9      	str	r1, [r7, #8]
 8007cdc:	603b      	str	r3, [r7, #0]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ce2:	e03b      	b.n	8007d5c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 f8d5 	bl	8007e98 <I2C_IsErrorOccurred>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e041      	b.n	8007d7c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfe:	d02d      	beq.n	8007d5c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d00:	f7fa fdd4 	bl	80028ac <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d302      	bcc.n	8007d16 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d122      	bne.n	8007d5c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	699a      	ldr	r2, [r3, #24]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	bf0c      	ite	eq
 8007d26:	2301      	moveq	r3, #1
 8007d28:	2300      	movne	r3, #0
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	79fb      	ldrb	r3, [r7, #7]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d113      	bne.n	8007d5c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d38:	f043 0220 	orr.w	r2, r3, #32
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2220      	movs	r2, #32
 8007d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e00f      	b.n	8007d7c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699a      	ldr	r2, [r3, #24]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	4013      	ands	r3, r2
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	bf0c      	ite	eq
 8007d6c:	2301      	moveq	r3, #1
 8007d6e:	2300      	movne	r3, #0
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	461a      	mov	r2, r3
 8007d74:	79fb      	ldrb	r3, [r7, #7]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d0b4      	beq.n	8007ce4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d90:	e033      	b.n	8007dfa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	68b9      	ldr	r1, [r7, #8]
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f000 f87e 	bl	8007e98 <I2C_IsErrorOccurred>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d001      	beq.n	8007da6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e031      	b.n	8007e0a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dac:	d025      	beq.n	8007dfa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dae:	f7fa fd7d 	bl	80028ac <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d302      	bcc.n	8007dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d11a      	bne.n	8007dfa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d013      	beq.n	8007dfa <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dd6:	f043 0220 	orr.w	r2, r3, #32
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2220      	movs	r2, #32
 8007de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e007      	b.n	8007e0a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	f003 0302 	and.w	r3, r3, #2
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d1c4      	bne.n	8007d92 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e1e:	e02f      	b.n	8007e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	68b9      	ldr	r1, [r7, #8]
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 f837 	bl	8007e98 <I2C_IsErrorOccurred>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e02d      	b.n	8007e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e34:	f7fa fd3a 	bl	80028ac <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d302      	bcc.n	8007e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d11a      	bne.n	8007e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	f003 0320 	and.w	r3, r3, #32
 8007e54:	2b20      	cmp	r3, #32
 8007e56:	d013      	beq.n	8007e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e5c:	f043 0220 	orr.w	r2, r3, #32
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2220      	movs	r2, #32
 8007e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e007      	b.n	8007e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	f003 0320 	and.w	r3, r3, #32
 8007e8a:	2b20      	cmp	r3, #32
 8007e8c:	d1c8      	bne.n	8007e20 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08a      	sub	sp, #40	@ 0x28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	f003 0310 	and.w	r3, r3, #16
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d068      	beq.n	8007f96 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2210      	movs	r2, #16
 8007eca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ecc:	e049      	b.n	8007f62 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed4:	d045      	beq.n	8007f62 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007ed6:	f7fa fce9 	bl	80028ac <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d302      	bcc.n	8007eec <I2C_IsErrorOccurred+0x54>
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d13a      	bne.n	8007f62 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ef6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007efe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f0e:	d121      	bne.n	8007f54 <I2C_IsErrorOccurred+0xbc>
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f16:	d01d      	beq.n	8007f54 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007f18:	7cfb      	ldrb	r3, [r7, #19]
 8007f1a:	2b20      	cmp	r3, #32
 8007f1c:	d01a      	beq.n	8007f54 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f2c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007f2e:	f7fa fcbd 	bl	80028ac <HAL_GetTick>
 8007f32:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f34:	e00e      	b.n	8007f54 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007f36:	f7fa fcb9 	bl	80028ac <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	2b19      	cmp	r3, #25
 8007f42:	d907      	bls.n	8007f54 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	f043 0320 	orr.w	r3, r3, #32
 8007f4a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007f52:	e006      	b.n	8007f62 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	f003 0320 	and.w	r3, r3, #32
 8007f5e:	2b20      	cmp	r3, #32
 8007f60:	d1e9      	bne.n	8007f36 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b20      	cmp	r3, #32
 8007f6e:	d003      	beq.n	8007f78 <I2C_IsErrorOccurred+0xe0>
 8007f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d0aa      	beq.n	8007ece <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007f78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d103      	bne.n	8007f88 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2220      	movs	r2, #32
 8007f86:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	f043 0304 	orr.w	r3, r3, #4
 8007f8e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00b      	beq.n	8007fc0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007fa8:	6a3b      	ldr	r3, [r7, #32]
 8007faa:	f043 0301 	orr.w	r3, r3, #1
 8007fae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007fb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00b      	beq.n	8007fe2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	f043 0308 	orr.w	r3, r3, #8
 8007fd0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007fda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00b      	beq.n	8008004 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	f043 0302 	orr.w	r3, r3, #2
 8007ff2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ffc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008004:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008008:	2b00      	cmp	r3, #0
 800800a:	d01c      	beq.n	8008046 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f7ff fe1e 	bl	8007c4e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6859      	ldr	r1, [r3, #4]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	4b0d      	ldr	r3, [pc, #52]	@ (8008054 <I2C_IsErrorOccurred+0x1bc>)
 800801e:	400b      	ands	r3, r1
 8008020:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	431a      	orrs	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2220      	movs	r2, #32
 8008032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008046:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800804a:	4618      	mov	r0, r3
 800804c:	3728      	adds	r7, #40	@ 0x28
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	fe00e800 	.word	0xfe00e800

08008058 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	607b      	str	r3, [r7, #4]
 8008062:	460b      	mov	r3, r1
 8008064:	817b      	strh	r3, [r7, #10]
 8008066:	4613      	mov	r3, r2
 8008068:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800806a:	897b      	ldrh	r3, [r7, #10]
 800806c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008070:	7a7b      	ldrb	r3, [r7, #9]
 8008072:	041b      	lsls	r3, r3, #16
 8008074:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008078:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	4313      	orrs	r3, r2
 8008082:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008086:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	0d5b      	lsrs	r3, r3, #21
 8008092:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008096:	4b08      	ldr	r3, [pc, #32]	@ (80080b8 <I2C_TransferConfig+0x60>)
 8008098:	430b      	orrs	r3, r1
 800809a:	43db      	mvns	r3, r3
 800809c:	ea02 0103 	and.w	r1, r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80080aa:	bf00      	nop
 80080ac:	371c      	adds	r7, #28
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	03ff63ff 	.word	0x03ff63ff

080080bc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	460b      	mov	r3, r1
 80080c6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080d0:	4a39      	ldr	r2, [pc, #228]	@ (80081b8 <I2C_Enable_IRQ+0xfc>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d032      	beq.n	800813c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80080da:	4a38      	ldr	r2, [pc, #224]	@ (80081bc <I2C_Enable_IRQ+0x100>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d02d      	beq.n	800813c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80080e4:	4a36      	ldr	r2, [pc, #216]	@ (80081c0 <I2C_Enable_IRQ+0x104>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d028      	beq.n	800813c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80080ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	da03      	bge.n	80080fa <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80080f8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80080fa:	887b      	ldrh	r3, [r7, #2]
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	2b00      	cmp	r3, #0
 8008102:	d003      	beq.n	800810c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800810a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800810c:	887b      	ldrh	r3, [r7, #2]
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800811c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800811e:	887b      	ldrh	r3, [r7, #2]
 8008120:	2b10      	cmp	r3, #16
 8008122:	d103      	bne.n	800812c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800812a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800812c:	887b      	ldrh	r3, [r7, #2]
 800812e:	2b20      	cmp	r3, #32
 8008130:	d133      	bne.n	800819a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f043 0320 	orr.w	r3, r3, #32
 8008138:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800813a:	e02e      	b.n	800819a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800813c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008140:	2b00      	cmp	r3, #0
 8008142:	da03      	bge.n	800814c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800814a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800814c:	887b      	ldrh	r3, [r7, #2]
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800815c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800815e:	887b      	ldrh	r3, [r7, #2]
 8008160:	f003 0302 	and.w	r3, r3, #2
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800816e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008170:	887b      	ldrh	r3, [r7, #2]
 8008172:	2b10      	cmp	r3, #16
 8008174:	d103      	bne.n	800817e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800817c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800817e:	887b      	ldrh	r3, [r7, #2]
 8008180:	2b20      	cmp	r3, #32
 8008182:	d103      	bne.n	800818c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800818a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800818c:	887b      	ldrh	r3, [r7, #2]
 800818e:	2b40      	cmp	r3, #64	@ 0x40
 8008190:	d103      	bne.n	800819a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008198:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6819      	ldr	r1, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	601a      	str	r2, [r3, #0]
}
 80081aa:	bf00      	nop
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	080068df 	.word	0x080068df
 80081bc:	08006d25 	.word	0x08006d25
 80081c0:	08006ac5 	.word	0x08006ac5

080081c4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80081d4:	887b      	ldrh	r3, [r7, #2]
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00f      	beq.n	80081fe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80081e4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80081f2:	2b28      	cmp	r3, #40	@ 0x28
 80081f4:	d003      	beq.n	80081fe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80081fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80081fe:	887b      	ldrh	r3, [r7, #2]
 8008200:	f003 0302 	and.w	r3, r3, #2
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00f      	beq.n	8008228 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800820e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008216:	b2db      	uxtb	r3, r3
 8008218:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800821c:	2b28      	cmp	r3, #40	@ 0x28
 800821e:	d003      	beq.n	8008228 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008226:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008228:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800822c:	2b00      	cmp	r3, #0
 800822e:	da03      	bge.n	8008238 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008236:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008238:	887b      	ldrh	r3, [r7, #2]
 800823a:	2b10      	cmp	r3, #16
 800823c:	d103      	bne.n	8008246 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008244:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008246:	887b      	ldrh	r3, [r7, #2]
 8008248:	2b20      	cmp	r3, #32
 800824a:	d103      	bne.n	8008254 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f043 0320 	orr.w	r3, r3, #32
 8008252:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008254:	887b      	ldrh	r3, [r7, #2]
 8008256:	2b40      	cmp	r3, #64	@ 0x40
 8008258:	d103      	bne.n	8008262 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008260:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6819      	ldr	r1, [r3, #0]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	43da      	mvns	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	400a      	ands	r2, r1
 8008272:	601a      	str	r2, [r3, #0]
}
 8008274:	bf00      	nop
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b20      	cmp	r3, #32
 8008294:	d138      	bne.n	8008308 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800829c:	2b01      	cmp	r3, #1
 800829e:	d101      	bne.n	80082a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80082a0:	2302      	movs	r3, #2
 80082a2:	e032      	b.n	800830a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2224      	movs	r2, #36	@ 0x24
 80082b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 0201 	bic.w	r2, r2, #1
 80082c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80082d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6819      	ldr	r1, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	430a      	orrs	r2, r1
 80082e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f042 0201 	orr.w	r2, r2, #1
 80082f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2220      	movs	r2, #32
 80082f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	e000      	b.n	800830a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008308:	2302      	movs	r3, #2
  }
}
 800830a:	4618      	mov	r0, r3
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008316:	b480      	push	{r7}
 8008318:	b085      	sub	sp, #20
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b20      	cmp	r3, #32
 800832a:	d139      	bne.n	80083a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008332:	2b01      	cmp	r3, #1
 8008334:	d101      	bne.n	800833a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008336:	2302      	movs	r3, #2
 8008338:	e033      	b.n	80083a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2224      	movs	r2, #36	@ 0x24
 8008346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0201 	bic.w	r2, r2, #1
 8008358:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008368:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	021b      	lsls	r3, r3, #8
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	4313      	orrs	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0201 	orr.w	r2, r2, #1
 800838a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2220      	movs	r2, #32
 8008390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	e000      	b.n	80083a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80083a0:	2302      	movs	r3, #2
  }
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
	...

080083b0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80083b8:	4b19      	ldr	r3, [pc, #100]	@ (8008420 <HAL_PWREx_ConfigSupply+0x70>)
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	2b04      	cmp	r3, #4
 80083c2:	d00a      	beq.n	80083da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80083c4:	4b16      	ldr	r3, [pc, #88]	@ (8008420 <HAL_PWREx_ConfigSupply+0x70>)
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f003 0307 	and.w	r3, r3, #7
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d001      	beq.n	80083d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e01f      	b.n	8008416 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	e01d      	b.n	8008416 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80083da:	4b11      	ldr	r3, [pc, #68]	@ (8008420 <HAL_PWREx_ConfigSupply+0x70>)
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f023 0207 	bic.w	r2, r3, #7
 80083e2:	490f      	ldr	r1, [pc, #60]	@ (8008420 <HAL_PWREx_ConfigSupply+0x70>)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80083ea:	f7fa fa5f 	bl	80028ac <HAL_GetTick>
 80083ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80083f0:	e009      	b.n	8008406 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80083f2:	f7fa fa5b 	bl	80028ac <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008400:	d901      	bls.n	8008406 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e007      	b.n	8008416 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008406:	4b06      	ldr	r3, [pc, #24]	@ (8008420 <HAL_PWREx_ConfigSupply+0x70>)
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800840e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008412:	d1ee      	bne.n	80083f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	58024800 	.word	0x58024800

08008424 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b08c      	sub	sp, #48	@ 0x30
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e3c8      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 8087 	beq.w	8008552 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008444:	4b88      	ldr	r3, [pc, #544]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800844c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800844e:	4b86      	ldr	r3, [pc, #536]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 8008450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008452:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008456:	2b10      	cmp	r3, #16
 8008458:	d007      	beq.n	800846a <HAL_RCC_OscConfig+0x46>
 800845a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800845c:	2b18      	cmp	r3, #24
 800845e:	d110      	bne.n	8008482 <HAL_RCC_OscConfig+0x5e>
 8008460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008462:	f003 0303 	and.w	r3, r3, #3
 8008466:	2b02      	cmp	r3, #2
 8008468:	d10b      	bne.n	8008482 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800846a:	4b7f      	ldr	r3, [pc, #508]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d06c      	beq.n	8008550 <HAL_RCC_OscConfig+0x12c>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d168      	bne.n	8008550 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e3a2      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800848a:	d106      	bne.n	800849a <HAL_RCC_OscConfig+0x76>
 800848c:	4b76      	ldr	r3, [pc, #472]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a75      	ldr	r2, [pc, #468]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 8008492:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008496:	6013      	str	r3, [r2, #0]
 8008498:	e02e      	b.n	80084f8 <HAL_RCC_OscConfig+0xd4>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10c      	bne.n	80084bc <HAL_RCC_OscConfig+0x98>
 80084a2:	4b71      	ldr	r3, [pc, #452]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a70      	ldr	r2, [pc, #448]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 80084a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084ac:	6013      	str	r3, [r2, #0]
 80084ae:	4b6e      	ldr	r3, [pc, #440]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a6d      	ldr	r2, [pc, #436]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 80084b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	e01d      	b.n	80084f8 <HAL_RCC_OscConfig+0xd4>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80084c4:	d10c      	bne.n	80084e0 <HAL_RCC_OscConfig+0xbc>
 80084c6:	4b68      	ldr	r3, [pc, #416]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a67      	ldr	r2, [pc, #412]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 80084cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80084d0:	6013      	str	r3, [r2, #0]
 80084d2:	4b65      	ldr	r3, [pc, #404]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a64      	ldr	r2, [pc, #400]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 80084d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084dc:	6013      	str	r3, [r2, #0]
 80084de:	e00b      	b.n	80084f8 <HAL_RCC_OscConfig+0xd4>
 80084e0:	4b61      	ldr	r3, [pc, #388]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a60      	ldr	r2, [pc, #384]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 80084e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	4b5e      	ldr	r3, [pc, #376]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a5d      	ldr	r2, [pc, #372]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 80084f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d013      	beq.n	8008528 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008500:	f7fa f9d4 	bl	80028ac <HAL_GetTick>
 8008504:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008506:	e008      	b.n	800851a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008508:	f7fa f9d0 	bl	80028ac <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b64      	cmp	r3, #100	@ 0x64
 8008514:	d901      	bls.n	800851a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e356      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800851a:	4b53      	ldr	r3, [pc, #332]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0f0      	beq.n	8008508 <HAL_RCC_OscConfig+0xe4>
 8008526:	e014      	b.n	8008552 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008528:	f7fa f9c0 	bl	80028ac <HAL_GetTick>
 800852c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800852e:	e008      	b.n	8008542 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008530:	f7fa f9bc 	bl	80028ac <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	2b64      	cmp	r3, #100	@ 0x64
 800853c:	d901      	bls.n	8008542 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e342      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008542:	4b49      	ldr	r3, [pc, #292]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1f0      	bne.n	8008530 <HAL_RCC_OscConfig+0x10c>
 800854e:	e000      	b.n	8008552 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0302 	and.w	r3, r3, #2
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 808c 	beq.w	8008678 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008560:	4b41      	ldr	r3, [pc, #260]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008568:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800856a:	4b3f      	ldr	r3, [pc, #252]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 800856c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800856e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d007      	beq.n	8008586 <HAL_RCC_OscConfig+0x162>
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	2b18      	cmp	r3, #24
 800857a:	d137      	bne.n	80085ec <HAL_RCC_OscConfig+0x1c8>
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	f003 0303 	and.w	r3, r3, #3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d132      	bne.n	80085ec <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008586:	4b38      	ldr	r3, [pc, #224]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0304 	and.w	r3, r3, #4
 800858e:	2b00      	cmp	r3, #0
 8008590:	d005      	beq.n	800859e <HAL_RCC_OscConfig+0x17a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e314      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800859e:	4b32      	ldr	r3, [pc, #200]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f023 0219 	bic.w	r2, r3, #25
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	492f      	ldr	r1, [pc, #188]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085b0:	f7fa f97c 	bl	80028ac <HAL_GetTick>
 80085b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085b6:	e008      	b.n	80085ca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085b8:	f7fa f978 	bl	80028ac <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d901      	bls.n	80085ca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e2fe      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085ca:	4b27      	ldr	r3, [pc, #156]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0304 	and.w	r3, r3, #4
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0f0      	beq.n	80085b8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085d6:	4b24      	ldr	r3, [pc, #144]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	061b      	lsls	r3, r3, #24
 80085e4:	4920      	ldr	r1, [pc, #128]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 80085e6:	4313      	orrs	r3, r2
 80085e8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085ea:	e045      	b.n	8008678 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d026      	beq.n	8008642 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80085f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f023 0219 	bic.w	r2, r3, #25
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	4919      	ldr	r1, [pc, #100]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 8008602:	4313      	orrs	r3, r2
 8008604:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008606:	f7fa f951 	bl	80028ac <HAL_GetTick>
 800860a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800860c:	e008      	b.n	8008620 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800860e:	f7fa f94d 	bl	80028ac <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	2b02      	cmp	r3, #2
 800861a:	d901      	bls.n	8008620 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e2d3      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008620:	4b11      	ldr	r3, [pc, #68]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	2b00      	cmp	r3, #0
 800862a:	d0f0      	beq.n	800860e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800862c:	4b0e      	ldr	r3, [pc, #56]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	061b      	lsls	r3, r3, #24
 800863a:	490b      	ldr	r1, [pc, #44]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 800863c:	4313      	orrs	r3, r2
 800863e:	604b      	str	r3, [r1, #4]
 8008640:	e01a      	b.n	8008678 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008642:	4b09      	ldr	r3, [pc, #36]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a08      	ldr	r2, [pc, #32]	@ (8008668 <HAL_RCC_OscConfig+0x244>)
 8008648:	f023 0301 	bic.w	r3, r3, #1
 800864c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800864e:	f7fa f92d 	bl	80028ac <HAL_GetTick>
 8008652:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008654:	e00a      	b.n	800866c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008656:	f7fa f929 	bl	80028ac <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	2b02      	cmp	r3, #2
 8008662:	d903      	bls.n	800866c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e2af      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
 8008668:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800866c:	4b96      	ldr	r3, [pc, #600]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0304 	and.w	r3, r3, #4
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1ee      	bne.n	8008656 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0310 	and.w	r3, r3, #16
 8008680:	2b00      	cmp	r3, #0
 8008682:	d06a      	beq.n	800875a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008684:	4b90      	ldr	r3, [pc, #576]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800868c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800868e:	4b8e      	ldr	r3, [pc, #568]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 8008690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008692:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	2b08      	cmp	r3, #8
 8008698:	d007      	beq.n	80086aa <HAL_RCC_OscConfig+0x286>
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	2b18      	cmp	r3, #24
 800869e:	d11b      	bne.n	80086d8 <HAL_RCC_OscConfig+0x2b4>
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	f003 0303 	and.w	r3, r3, #3
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d116      	bne.n	80086d8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086aa:	4b87      	ldr	r3, [pc, #540]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d005      	beq.n	80086c2 <HAL_RCC_OscConfig+0x29e>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	2b80      	cmp	r3, #128	@ 0x80
 80086bc:	d001      	beq.n	80086c2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e282      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086c2:	4b81      	ldr	r3, [pc, #516]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a1b      	ldr	r3, [r3, #32]
 80086ce:	061b      	lsls	r3, r3, #24
 80086d0:	497d      	ldr	r1, [pc, #500]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086d6:	e040      	b.n	800875a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	69db      	ldr	r3, [r3, #28]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d023      	beq.n	8008728 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80086e0:	4b79      	ldr	r3, [pc, #484]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a78      	ldr	r2, [pc, #480]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 80086e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ec:	f7fa f8de 	bl	80028ac <HAL_GetTick>
 80086f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086f2:	e008      	b.n	8008706 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80086f4:	f7fa f8da 	bl	80028ac <HAL_GetTick>
 80086f8:	4602      	mov	r2, r0
 80086fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d901      	bls.n	8008706 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	e260      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008706:	4b70      	ldr	r3, [pc, #448]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800870e:	2b00      	cmp	r3, #0
 8008710:	d0f0      	beq.n	80086f4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008712:	4b6d      	ldr	r3, [pc, #436]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	061b      	lsls	r3, r3, #24
 8008720:	4969      	ldr	r1, [pc, #420]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 8008722:	4313      	orrs	r3, r2
 8008724:	60cb      	str	r3, [r1, #12]
 8008726:	e018      	b.n	800875a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008728:	4b67      	ldr	r3, [pc, #412]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a66      	ldr	r2, [pc, #408]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 800872e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008734:	f7fa f8ba 	bl	80028ac <HAL_GetTick>
 8008738:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800873a:	e008      	b.n	800874e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800873c:	f7fa f8b6 	bl	80028ac <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b02      	cmp	r3, #2
 8008748:	d901      	bls.n	800874e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e23c      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800874e:	4b5e      	ldr	r3, [pc, #376]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1f0      	bne.n	800873c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0308 	and.w	r3, r3, #8
 8008762:	2b00      	cmp	r3, #0
 8008764:	d036      	beq.n	80087d4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d019      	beq.n	80087a2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800876e:	4b56      	ldr	r3, [pc, #344]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 8008770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008772:	4a55      	ldr	r2, [pc, #340]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 8008774:	f043 0301 	orr.w	r3, r3, #1
 8008778:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800877a:	f7fa f897 	bl	80028ac <HAL_GetTick>
 800877e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008780:	e008      	b.n	8008794 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008782:	f7fa f893 	bl	80028ac <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	2b02      	cmp	r3, #2
 800878e:	d901      	bls.n	8008794 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e219      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008794:	4b4c      	ldr	r3, [pc, #304]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 8008796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008798:	f003 0302 	and.w	r3, r3, #2
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0f0      	beq.n	8008782 <HAL_RCC_OscConfig+0x35e>
 80087a0:	e018      	b.n	80087d4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087a2:	4b49      	ldr	r3, [pc, #292]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 80087a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087a6:	4a48      	ldr	r2, [pc, #288]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 80087a8:	f023 0301 	bic.w	r3, r3, #1
 80087ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ae:	f7fa f87d 	bl	80028ac <HAL_GetTick>
 80087b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087b4:	e008      	b.n	80087c8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087b6:	f7fa f879 	bl	80028ac <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d901      	bls.n	80087c8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e1ff      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087c8:	4b3f      	ldr	r3, [pc, #252]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 80087ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087cc:	f003 0302 	and.w	r3, r3, #2
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1f0      	bne.n	80087b6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0320 	and.w	r3, r3, #32
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d036      	beq.n	800884e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d019      	beq.n	800881c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80087e8:	4b37      	ldr	r3, [pc, #220]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a36      	ldr	r2, [pc, #216]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 80087ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80087f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80087f4:	f7fa f85a 	bl	80028ac <HAL_GetTick>
 80087f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80087fa:	e008      	b.n	800880e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80087fc:	f7fa f856 	bl	80028ac <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	2b02      	cmp	r3, #2
 8008808:	d901      	bls.n	800880e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e1dc      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800880e:	4b2e      	ldr	r3, [pc, #184]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d0f0      	beq.n	80087fc <HAL_RCC_OscConfig+0x3d8>
 800881a:	e018      	b.n	800884e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800881c:	4b2a      	ldr	r3, [pc, #168]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a29      	ldr	r2, [pc, #164]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 8008822:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008826:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008828:	f7fa f840 	bl	80028ac <HAL_GetTick>
 800882c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800882e:	e008      	b.n	8008842 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008830:	f7fa f83c 	bl	80028ac <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	2b02      	cmp	r3, #2
 800883c:	d901      	bls.n	8008842 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e1c2      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008842:	4b21      	ldr	r3, [pc, #132]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1f0      	bne.n	8008830 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0304 	and.w	r3, r3, #4
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 8086 	beq.w	8008968 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800885c:	4b1b      	ldr	r3, [pc, #108]	@ (80088cc <HAL_RCC_OscConfig+0x4a8>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a1a      	ldr	r2, [pc, #104]	@ (80088cc <HAL_RCC_OscConfig+0x4a8>)
 8008862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008866:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008868:	f7fa f820 	bl	80028ac <HAL_GetTick>
 800886c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800886e:	e008      	b.n	8008882 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008870:	f7fa f81c 	bl	80028ac <HAL_GetTick>
 8008874:	4602      	mov	r2, r0
 8008876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	2b64      	cmp	r3, #100	@ 0x64
 800887c:	d901      	bls.n	8008882 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e1a2      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008882:	4b12      	ldr	r3, [pc, #72]	@ (80088cc <HAL_RCC_OscConfig+0x4a8>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800888a:	2b00      	cmp	r3, #0
 800888c:	d0f0      	beq.n	8008870 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d106      	bne.n	80088a4 <HAL_RCC_OscConfig+0x480>
 8008896:	4b0c      	ldr	r3, [pc, #48]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 8008898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800889a:	4a0b      	ldr	r2, [pc, #44]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 800889c:	f043 0301 	orr.w	r3, r3, #1
 80088a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80088a2:	e032      	b.n	800890a <HAL_RCC_OscConfig+0x4e6>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d111      	bne.n	80088d0 <HAL_RCC_OscConfig+0x4ac>
 80088ac:	4b06      	ldr	r3, [pc, #24]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 80088ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088b0:	4a05      	ldr	r2, [pc, #20]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 80088b2:	f023 0301 	bic.w	r3, r3, #1
 80088b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80088b8:	4b03      	ldr	r3, [pc, #12]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 80088ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088bc:	4a02      	ldr	r2, [pc, #8]	@ (80088c8 <HAL_RCC_OscConfig+0x4a4>)
 80088be:	f023 0304 	bic.w	r3, r3, #4
 80088c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80088c4:	e021      	b.n	800890a <HAL_RCC_OscConfig+0x4e6>
 80088c6:	bf00      	nop
 80088c8:	58024400 	.word	0x58024400
 80088cc:	58024800 	.word	0x58024800
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	2b05      	cmp	r3, #5
 80088d6:	d10c      	bne.n	80088f2 <HAL_RCC_OscConfig+0x4ce>
 80088d8:	4b83      	ldr	r3, [pc, #524]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 80088da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088dc:	4a82      	ldr	r2, [pc, #520]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 80088de:	f043 0304 	orr.w	r3, r3, #4
 80088e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80088e4:	4b80      	ldr	r3, [pc, #512]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 80088e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088e8:	4a7f      	ldr	r2, [pc, #508]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 80088ea:	f043 0301 	orr.w	r3, r3, #1
 80088ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80088f0:	e00b      	b.n	800890a <HAL_RCC_OscConfig+0x4e6>
 80088f2:	4b7d      	ldr	r3, [pc, #500]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 80088f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088f6:	4a7c      	ldr	r2, [pc, #496]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 80088f8:	f023 0301 	bic.w	r3, r3, #1
 80088fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80088fe:	4b7a      	ldr	r3, [pc, #488]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008902:	4a79      	ldr	r2, [pc, #484]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008904:	f023 0304 	bic.w	r3, r3, #4
 8008908:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d015      	beq.n	800893e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008912:	f7f9 ffcb 	bl	80028ac <HAL_GetTick>
 8008916:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008918:	e00a      	b.n	8008930 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800891a:	f7f9 ffc7 	bl	80028ac <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008928:	4293      	cmp	r3, r2
 800892a:	d901      	bls.n	8008930 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e14b      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008930:	4b6d      	ldr	r3, [pc, #436]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d0ee      	beq.n	800891a <HAL_RCC_OscConfig+0x4f6>
 800893c:	e014      	b.n	8008968 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800893e:	f7f9 ffb5 	bl	80028ac <HAL_GetTick>
 8008942:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008944:	e00a      	b.n	800895c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008946:	f7f9 ffb1 	bl	80028ac <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008954:	4293      	cmp	r3, r2
 8008956:	d901      	bls.n	800895c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e135      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800895c:	4b62      	ldr	r3, [pc, #392]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 800895e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1ee      	bne.n	8008946 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 812a 	beq.w	8008bc6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008972:	4b5d      	ldr	r3, [pc, #372]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800897a:	2b18      	cmp	r3, #24
 800897c:	f000 80ba 	beq.w	8008af4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008984:	2b02      	cmp	r3, #2
 8008986:	f040 8095 	bne.w	8008ab4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800898a:	4b57      	ldr	r3, [pc, #348]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a56      	ldr	r2, [pc, #344]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008990:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008996:	f7f9 ff89 	bl	80028ac <HAL_GetTick>
 800899a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800899c:	e008      	b.n	80089b0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800899e:	f7f9 ff85 	bl	80028ac <HAL_GetTick>
 80089a2:	4602      	mov	r2, r0
 80089a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d901      	bls.n	80089b0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e10b      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089b0:	4b4d      	ldr	r3, [pc, #308]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1f0      	bne.n	800899e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089bc:	4b4a      	ldr	r3, [pc, #296]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 80089be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089c0:	4b4a      	ldr	r3, [pc, #296]	@ (8008aec <HAL_RCC_OscConfig+0x6c8>)
 80089c2:	4013      	ands	r3, r2
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80089cc:	0112      	lsls	r2, r2, #4
 80089ce:	430a      	orrs	r2, r1
 80089d0:	4945      	ldr	r1, [pc, #276]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	628b      	str	r3, [r1, #40]	@ 0x28
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089da:	3b01      	subs	r3, #1
 80089dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089e4:	3b01      	subs	r3, #1
 80089e6:	025b      	lsls	r3, r3, #9
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	431a      	orrs	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f0:	3b01      	subs	r3, #1
 80089f2:	041b      	lsls	r3, r3, #16
 80089f4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80089f8:	431a      	orrs	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089fe:	3b01      	subs	r3, #1
 8008a00:	061b      	lsls	r3, r3, #24
 8008a02:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a06:	4938      	ldr	r1, [pc, #224]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008a0c:	4b36      	ldr	r3, [pc, #216]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a10:	4a35      	ldr	r2, [pc, #212]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a12:	f023 0301 	bic.w	r3, r3, #1
 8008a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a18:	4b33      	ldr	r3, [pc, #204]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a1c:	4b34      	ldr	r3, [pc, #208]	@ (8008af0 <HAL_RCC_OscConfig+0x6cc>)
 8008a1e:	4013      	ands	r3, r2
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008a24:	00d2      	lsls	r2, r2, #3
 8008a26:	4930      	ldr	r1, [pc, #192]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a30:	f023 020c 	bic.w	r2, r3, #12
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a38:	492b      	ldr	r1, [pc, #172]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a42:	f023 0202 	bic.w	r2, r3, #2
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a4a:	4927      	ldr	r1, [pc, #156]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a50:	4b25      	ldr	r3, [pc, #148]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a54:	4a24      	ldr	r2, [pc, #144]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a5c:	4b22      	ldr	r3, [pc, #136]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a60:	4a21      	ldr	r2, [pc, #132]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008a68:	4b1f      	ldr	r3, [pc, #124]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008a74:	4b1c      	ldr	r3, [pc, #112]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a78:	4a1b      	ldr	r2, [pc, #108]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a7a:	f043 0301 	orr.w	r3, r3, #1
 8008a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a80:	4b19      	ldr	r3, [pc, #100]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a18      	ldr	r2, [pc, #96]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008a86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a8c:	f7f9 ff0e 	bl	80028ac <HAL_GetTick>
 8008a90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a92:	e008      	b.n	8008aa6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a94:	f7f9 ff0a 	bl	80028ac <HAL_GetTick>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d901      	bls.n	8008aa6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e090      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008aa6:	4b10      	ldr	r3, [pc, #64]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0f0      	beq.n	8008a94 <HAL_RCC_OscConfig+0x670>
 8008ab2:	e088      	b.n	8008bc6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008aba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac0:	f7f9 fef4 	bl	80028ac <HAL_GetTick>
 8008ac4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ac6:	e008      	b.n	8008ada <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ac8:	f7f9 fef0 	bl	80028ac <HAL_GetTick>
 8008acc:	4602      	mov	r2, r0
 8008ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d901      	bls.n	8008ada <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e076      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ada:	4b03      	ldr	r3, [pc, #12]	@ (8008ae8 <HAL_RCC_OscConfig+0x6c4>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1f0      	bne.n	8008ac8 <HAL_RCC_OscConfig+0x6a4>
 8008ae6:	e06e      	b.n	8008bc6 <HAL_RCC_OscConfig+0x7a2>
 8008ae8:	58024400 	.word	0x58024400
 8008aec:	fffffc0c 	.word	0xfffffc0c
 8008af0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008af4:	4b36      	ldr	r3, [pc, #216]	@ (8008bd0 <HAL_RCC_OscConfig+0x7ac>)
 8008af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008afa:	4b35      	ldr	r3, [pc, #212]	@ (8008bd0 <HAL_RCC_OscConfig+0x7ac>)
 8008afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008afe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d031      	beq.n	8008b6c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f003 0203 	and.w	r2, r3, #3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d12a      	bne.n	8008b6c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	091b      	lsrs	r3, r3, #4
 8008b1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d122      	bne.n	8008b6c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b30:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d11a      	bne.n	8008b6c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	0a5b      	lsrs	r3, r3, #9
 8008b3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b42:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d111      	bne.n	8008b6c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	0c1b      	lsrs	r3, r3, #16
 8008b4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b54:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d108      	bne.n	8008b6c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	0e1b      	lsrs	r3, r3, #24
 8008b5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b66:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d001      	beq.n	8008b70 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e02b      	b.n	8008bc8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008b70:	4b17      	ldr	r3, [pc, #92]	@ (8008bd0 <HAL_RCC_OscConfig+0x7ac>)
 8008b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b74:	08db      	lsrs	r3, r3, #3
 8008b76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b7a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d01f      	beq.n	8008bc6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008b86:	4b12      	ldr	r3, [pc, #72]	@ (8008bd0 <HAL_RCC_OscConfig+0x7ac>)
 8008b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8a:	4a11      	ldr	r2, [pc, #68]	@ (8008bd0 <HAL_RCC_OscConfig+0x7ac>)
 8008b8c:	f023 0301 	bic.w	r3, r3, #1
 8008b90:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b92:	f7f9 fe8b 	bl	80028ac <HAL_GetTick>
 8008b96:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008b98:	bf00      	nop
 8008b9a:	f7f9 fe87 	bl	80028ac <HAL_GetTick>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d0f9      	beq.n	8008b9a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8008bd0 <HAL_RCC_OscConfig+0x7ac>)
 8008ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008baa:	4b0a      	ldr	r3, [pc, #40]	@ (8008bd4 <HAL_RCC_OscConfig+0x7b0>)
 8008bac:	4013      	ands	r3, r2
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008bb2:	00d2      	lsls	r2, r2, #3
 8008bb4:	4906      	ldr	r1, [pc, #24]	@ (8008bd0 <HAL_RCC_OscConfig+0x7ac>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008bba:	4b05      	ldr	r3, [pc, #20]	@ (8008bd0 <HAL_RCC_OscConfig+0x7ac>)
 8008bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bbe:	4a04      	ldr	r2, [pc, #16]	@ (8008bd0 <HAL_RCC_OscConfig+0x7ac>)
 8008bc0:	f043 0301 	orr.w	r3, r3, #1
 8008bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3730      	adds	r7, #48	@ 0x30
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	58024400 	.word	0x58024400
 8008bd4:	ffff0007 	.word	0xffff0007

08008bd8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d101      	bne.n	8008bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e19c      	b.n	8008f26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008bec:	4b8a      	ldr	r3, [pc, #552]	@ (8008e18 <HAL_RCC_ClockConfig+0x240>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 030f 	and.w	r3, r3, #15
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d910      	bls.n	8008c1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bfa:	4b87      	ldr	r3, [pc, #540]	@ (8008e18 <HAL_RCC_ClockConfig+0x240>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f023 020f 	bic.w	r2, r3, #15
 8008c02:	4985      	ldr	r1, [pc, #532]	@ (8008e18 <HAL_RCC_ClockConfig+0x240>)
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c0a:	4b83      	ldr	r3, [pc, #524]	@ (8008e18 <HAL_RCC_ClockConfig+0x240>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 030f 	and.w	r3, r3, #15
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d001      	beq.n	8008c1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e184      	b.n	8008f26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0304 	and.w	r3, r3, #4
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d010      	beq.n	8008c4a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	691a      	ldr	r2, [r3, #16]
 8008c2c:	4b7b      	ldr	r3, [pc, #492]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d908      	bls.n	8008c4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c38:	4b78      	ldr	r3, [pc, #480]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	4975      	ldr	r1, [pc, #468]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008c46:	4313      	orrs	r3, r2
 8008c48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0308 	and.w	r3, r3, #8
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d010      	beq.n	8008c78 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	695a      	ldr	r2, [r3, #20]
 8008c5a:	4b70      	ldr	r3, [pc, #448]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d908      	bls.n	8008c78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c66:	4b6d      	ldr	r3, [pc, #436]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008c68:	69db      	ldr	r3, [r3, #28]
 8008c6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	496a      	ldr	r1, [pc, #424]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008c74:	4313      	orrs	r3, r2
 8008c76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0310 	and.w	r3, r3, #16
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d010      	beq.n	8008ca6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	699a      	ldr	r2, [r3, #24]
 8008c88:	4b64      	ldr	r3, [pc, #400]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008c8a:	69db      	ldr	r3, [r3, #28]
 8008c8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d908      	bls.n	8008ca6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c94:	4b61      	ldr	r3, [pc, #388]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008c96:	69db      	ldr	r3, [r3, #28]
 8008c98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	495e      	ldr	r1, [pc, #376]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 0320 	and.w	r3, r3, #32
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d010      	beq.n	8008cd4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	69da      	ldr	r2, [r3, #28]
 8008cb6:	4b59      	ldr	r3, [pc, #356]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d908      	bls.n	8008cd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008cc2:	4b56      	ldr	r3, [pc, #344]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	4953      	ldr	r1, [pc, #332]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0302 	and.w	r3, r3, #2
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d010      	beq.n	8008d02 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	68da      	ldr	r2, [r3, #12]
 8008ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	f003 030f 	and.w	r3, r3, #15
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d908      	bls.n	8008d02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cf0:	4b4a      	ldr	r3, [pc, #296]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	f023 020f 	bic.w	r2, r3, #15
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	4947      	ldr	r1, [pc, #284]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d055      	beq.n	8008dba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d0e:	4b43      	ldr	r3, [pc, #268]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	4940      	ldr	r1, [pc, #256]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d107      	bne.n	8008d38 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d28:	4b3c      	ldr	r3, [pc, #240]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d121      	bne.n	8008d78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e0f6      	b.n	8008f26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	d107      	bne.n	8008d50 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d40:	4b36      	ldr	r3, [pc, #216]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d115      	bne.n	8008d78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e0ea      	b.n	8008f26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d107      	bne.n	8008d68 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d58:	4b30      	ldr	r3, [pc, #192]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d109      	bne.n	8008d78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d64:	2301      	movs	r3, #1
 8008d66:	e0de      	b.n	8008f26 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d68:	4b2c      	ldr	r3, [pc, #176]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0304 	and.w	r3, r3, #4
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d101      	bne.n	8008d78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e0d6      	b.n	8008f26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d78:	4b28      	ldr	r3, [pc, #160]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	f023 0207 	bic.w	r2, r3, #7
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	4925      	ldr	r1, [pc, #148]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d8a:	f7f9 fd8f 	bl	80028ac <HAL_GetTick>
 8008d8e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d90:	e00a      	b.n	8008da8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d92:	f7f9 fd8b 	bl	80028ac <HAL_GetTick>
 8008d96:	4602      	mov	r2, r0
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d901      	bls.n	8008da8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e0be      	b.n	8008f26 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008da8:	4b1c      	ldr	r3, [pc, #112]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	00db      	lsls	r3, r3, #3
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d1eb      	bne.n	8008d92 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0302 	and.w	r3, r3, #2
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d010      	beq.n	8008de8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68da      	ldr	r2, [r3, #12]
 8008dca:	4b14      	ldr	r3, [pc, #80]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008dcc:	699b      	ldr	r3, [r3, #24]
 8008dce:	f003 030f 	and.w	r3, r3, #15
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d208      	bcs.n	8008de8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dd6:	4b11      	ldr	r3, [pc, #68]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	f023 020f 	bic.w	r2, r3, #15
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	490e      	ldr	r1, [pc, #56]	@ (8008e1c <HAL_RCC_ClockConfig+0x244>)
 8008de4:	4313      	orrs	r3, r2
 8008de6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008de8:	4b0b      	ldr	r3, [pc, #44]	@ (8008e18 <HAL_RCC_ClockConfig+0x240>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 030f 	and.w	r3, r3, #15
 8008df0:	683a      	ldr	r2, [r7, #0]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d214      	bcs.n	8008e20 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008df6:	4b08      	ldr	r3, [pc, #32]	@ (8008e18 <HAL_RCC_ClockConfig+0x240>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f023 020f 	bic.w	r2, r3, #15
 8008dfe:	4906      	ldr	r1, [pc, #24]	@ (8008e18 <HAL_RCC_ClockConfig+0x240>)
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e06:	4b04      	ldr	r3, [pc, #16]	@ (8008e18 <HAL_RCC_ClockConfig+0x240>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 030f 	and.w	r3, r3, #15
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d005      	beq.n	8008e20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e086      	b.n	8008f26 <HAL_RCC_ClockConfig+0x34e>
 8008e18:	52002000 	.word	0x52002000
 8008e1c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d010      	beq.n	8008e4e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	691a      	ldr	r2, [r3, #16]
 8008e30:	4b3f      	ldr	r3, [pc, #252]	@ (8008f30 <HAL_RCC_ClockConfig+0x358>)
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d208      	bcs.n	8008e4e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e3c:	4b3c      	ldr	r3, [pc, #240]	@ (8008f30 <HAL_RCC_ClockConfig+0x358>)
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	4939      	ldr	r1, [pc, #228]	@ (8008f30 <HAL_RCC_ClockConfig+0x358>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0308 	and.w	r3, r3, #8
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d010      	beq.n	8008e7c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	695a      	ldr	r2, [r3, #20]
 8008e5e:	4b34      	ldr	r3, [pc, #208]	@ (8008f30 <HAL_RCC_ClockConfig+0x358>)
 8008e60:	69db      	ldr	r3, [r3, #28]
 8008e62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d208      	bcs.n	8008e7c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e6a:	4b31      	ldr	r3, [pc, #196]	@ (8008f30 <HAL_RCC_ClockConfig+0x358>)
 8008e6c:	69db      	ldr	r3, [r3, #28]
 8008e6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	492e      	ldr	r1, [pc, #184]	@ (8008f30 <HAL_RCC_ClockConfig+0x358>)
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0310 	and.w	r3, r3, #16
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d010      	beq.n	8008eaa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	699a      	ldr	r2, [r3, #24]
 8008e8c:	4b28      	ldr	r3, [pc, #160]	@ (8008f30 <HAL_RCC_ClockConfig+0x358>)
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d208      	bcs.n	8008eaa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e98:	4b25      	ldr	r3, [pc, #148]	@ (8008f30 <HAL_RCC_ClockConfig+0x358>)
 8008e9a:	69db      	ldr	r3, [r3, #28]
 8008e9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	4922      	ldr	r1, [pc, #136]	@ (8008f30 <HAL_RCC_ClockConfig+0x358>)
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 0320 	and.w	r3, r3, #32
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d010      	beq.n	8008ed8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	69da      	ldr	r2, [r3, #28]
 8008eba:	4b1d      	ldr	r3, [pc, #116]	@ (8008f30 <HAL_RCC_ClockConfig+0x358>)
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d208      	bcs.n	8008ed8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8008f30 <HAL_RCC_ClockConfig+0x358>)
 8008ec8:	6a1b      	ldr	r3, [r3, #32]
 8008eca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	69db      	ldr	r3, [r3, #28]
 8008ed2:	4917      	ldr	r1, [pc, #92]	@ (8008f30 <HAL_RCC_ClockConfig+0x358>)
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008ed8:	f000 f834 	bl	8008f44 <HAL_RCC_GetSysClockFreq>
 8008edc:	4602      	mov	r2, r0
 8008ede:	4b14      	ldr	r3, [pc, #80]	@ (8008f30 <HAL_RCC_ClockConfig+0x358>)
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	0a1b      	lsrs	r3, r3, #8
 8008ee4:	f003 030f 	and.w	r3, r3, #15
 8008ee8:	4912      	ldr	r1, [pc, #72]	@ (8008f34 <HAL_RCC_ClockConfig+0x35c>)
 8008eea:	5ccb      	ldrb	r3, [r1, r3]
 8008eec:	f003 031f 	and.w	r3, r3, #31
 8008ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8008f30 <HAL_RCC_ClockConfig+0x358>)
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	f003 030f 	and.w	r3, r3, #15
 8008efe:	4a0d      	ldr	r2, [pc, #52]	@ (8008f34 <HAL_RCC_ClockConfig+0x35c>)
 8008f00:	5cd3      	ldrb	r3, [r2, r3]
 8008f02:	f003 031f 	and.w	r3, r3, #31
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	fa22 f303 	lsr.w	r3, r2, r3
 8008f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8008f38 <HAL_RCC_ClockConfig+0x360>)
 8008f0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f10:	4a0a      	ldr	r2, [pc, #40]	@ (8008f3c <HAL_RCC_ClockConfig+0x364>)
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008f16:	4b0a      	ldr	r3, [pc, #40]	@ (8008f40 <HAL_RCC_ClockConfig+0x368>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7f9 fc7c 	bl	8002818 <HAL_InitTick>
 8008f20:	4603      	mov	r3, r0
 8008f22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3718      	adds	r7, #24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	58024400 	.word	0x58024400
 8008f34:	08010394 	.word	0x08010394
 8008f38:	240001b4 	.word	0x240001b4
 8008f3c:	240001b0 	.word	0x240001b0
 8008f40:	240001b8 	.word	0x240001b8

08008f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b089      	sub	sp, #36	@ 0x24
 8008f48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f4a:	4bb3      	ldr	r3, [pc, #716]	@ (8009218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f52:	2b18      	cmp	r3, #24
 8008f54:	f200 8155 	bhi.w	8009202 <HAL_RCC_GetSysClockFreq+0x2be>
 8008f58:	a201      	add	r2, pc, #4	@ (adr r2, 8008f60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5e:	bf00      	nop
 8008f60:	08008fc5 	.word	0x08008fc5
 8008f64:	08009203 	.word	0x08009203
 8008f68:	08009203 	.word	0x08009203
 8008f6c:	08009203 	.word	0x08009203
 8008f70:	08009203 	.word	0x08009203
 8008f74:	08009203 	.word	0x08009203
 8008f78:	08009203 	.word	0x08009203
 8008f7c:	08009203 	.word	0x08009203
 8008f80:	08008feb 	.word	0x08008feb
 8008f84:	08009203 	.word	0x08009203
 8008f88:	08009203 	.word	0x08009203
 8008f8c:	08009203 	.word	0x08009203
 8008f90:	08009203 	.word	0x08009203
 8008f94:	08009203 	.word	0x08009203
 8008f98:	08009203 	.word	0x08009203
 8008f9c:	08009203 	.word	0x08009203
 8008fa0:	08008ff1 	.word	0x08008ff1
 8008fa4:	08009203 	.word	0x08009203
 8008fa8:	08009203 	.word	0x08009203
 8008fac:	08009203 	.word	0x08009203
 8008fb0:	08009203 	.word	0x08009203
 8008fb4:	08009203 	.word	0x08009203
 8008fb8:	08009203 	.word	0x08009203
 8008fbc:	08009203 	.word	0x08009203
 8008fc0:	08008ff7 	.word	0x08008ff7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fc4:	4b94      	ldr	r3, [pc, #592]	@ (8009218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0320 	and.w	r3, r3, #32
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d009      	beq.n	8008fe4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fd0:	4b91      	ldr	r3, [pc, #580]	@ (8009218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	08db      	lsrs	r3, r3, #3
 8008fd6:	f003 0303 	and.w	r3, r3, #3
 8008fda:	4a90      	ldr	r2, [pc, #576]	@ (800921c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8008fe0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008fe2:	e111      	b.n	8009208 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008fe4:	4b8d      	ldr	r3, [pc, #564]	@ (800921c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fe6:	61bb      	str	r3, [r7, #24]
      break;
 8008fe8:	e10e      	b.n	8009208 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008fea:	4b8d      	ldr	r3, [pc, #564]	@ (8009220 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008fec:	61bb      	str	r3, [r7, #24]
      break;
 8008fee:	e10b      	b.n	8009208 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008ff0:	4b8c      	ldr	r3, [pc, #560]	@ (8009224 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008ff2:	61bb      	str	r3, [r7, #24]
      break;
 8008ff4:	e108      	b.n	8009208 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ff6:	4b88      	ldr	r3, [pc, #544]	@ (8009218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffa:	f003 0303 	and.w	r3, r3, #3
 8008ffe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009000:	4b85      	ldr	r3, [pc, #532]	@ (8009218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009004:	091b      	lsrs	r3, r3, #4
 8009006:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800900a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800900c:	4b82      	ldr	r3, [pc, #520]	@ (8009218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800900e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009010:	f003 0301 	and.w	r3, r3, #1
 8009014:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009016:	4b80      	ldr	r3, [pc, #512]	@ (8009218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800901a:	08db      	lsrs	r3, r3, #3
 800901c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	fb02 f303 	mul.w	r3, r2, r3
 8009026:	ee07 3a90 	vmov	s15, r3
 800902a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800902e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 80e1 	beq.w	80091fc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	2b02      	cmp	r3, #2
 800903e:	f000 8083 	beq.w	8009148 <HAL_RCC_GetSysClockFreq+0x204>
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b02      	cmp	r3, #2
 8009046:	f200 80a1 	bhi.w	800918c <HAL_RCC_GetSysClockFreq+0x248>
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d003      	beq.n	8009058 <HAL_RCC_GetSysClockFreq+0x114>
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	2b01      	cmp	r3, #1
 8009054:	d056      	beq.n	8009104 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009056:	e099      	b.n	800918c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009058:	4b6f      	ldr	r3, [pc, #444]	@ (8009218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0320 	and.w	r3, r3, #32
 8009060:	2b00      	cmp	r3, #0
 8009062:	d02d      	beq.n	80090c0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009064:	4b6c      	ldr	r3, [pc, #432]	@ (8009218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	08db      	lsrs	r3, r3, #3
 800906a:	f003 0303 	and.w	r3, r3, #3
 800906e:	4a6b      	ldr	r2, [pc, #428]	@ (800921c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009070:	fa22 f303 	lsr.w	r3, r2, r3
 8009074:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	ee07 3a90 	vmov	s15, r3
 800907c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	ee07 3a90 	vmov	s15, r3
 8009086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800908e:	4b62      	ldr	r3, [pc, #392]	@ (8009218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009096:	ee07 3a90 	vmov	s15, r3
 800909a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800909e:	ed97 6a02 	vldr	s12, [r7, #8]
 80090a2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009228 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80090be:	e087      	b.n	80091d0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	ee07 3a90 	vmov	s15, r3
 80090c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800922c <HAL_RCC_GetSysClockFreq+0x2e8>
 80090ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090d2:	4b51      	ldr	r3, [pc, #324]	@ (8009218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090da:	ee07 3a90 	vmov	s15, r3
 80090de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80090e6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009228 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009102:	e065      	b.n	80091d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	ee07 3a90 	vmov	s15, r3
 800910a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800910e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009230 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009116:	4b40      	ldr	r3, [pc, #256]	@ (8009218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800911a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800911e:	ee07 3a90 	vmov	s15, r3
 8009122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009126:	ed97 6a02 	vldr	s12, [r7, #8]
 800912a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009228 <HAL_RCC_GetSysClockFreq+0x2e4>
 800912e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800913a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800913e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009142:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009146:	e043      	b.n	80091d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	ee07 3a90 	vmov	s15, r3
 800914e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009152:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009234 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800915a:	4b2f      	ldr	r3, [pc, #188]	@ (8009218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800915c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800915e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009162:	ee07 3a90 	vmov	s15, r3
 8009166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800916a:	ed97 6a02 	vldr	s12, [r7, #8]
 800916e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009228 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800917a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800917e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009186:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800918a:	e021      	b.n	80091d0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	ee07 3a90 	vmov	s15, r3
 8009192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009196:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009230 <HAL_RCC_GetSysClockFreq+0x2ec>
 800919a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800919e:	4b1e      	ldr	r3, [pc, #120]	@ (8009218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091a6:	ee07 3a90 	vmov	s15, r3
 80091aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80091b2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009228 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091ce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80091d0:	4b11      	ldr	r3, [pc, #68]	@ (8009218 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091d4:	0a5b      	lsrs	r3, r3, #9
 80091d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091da:	3301      	adds	r3, #1
 80091dc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	ee07 3a90 	vmov	s15, r3
 80091e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80091e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80091ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091f4:	ee17 3a90 	vmov	r3, s15
 80091f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80091fa:	e005      	b.n	8009208 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80091fc:	2300      	movs	r3, #0
 80091fe:	61bb      	str	r3, [r7, #24]
      break;
 8009200:	e002      	b.n	8009208 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009202:	4b07      	ldr	r3, [pc, #28]	@ (8009220 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009204:	61bb      	str	r3, [r7, #24]
      break;
 8009206:	bf00      	nop
  }

  return sysclockfreq;
 8009208:	69bb      	ldr	r3, [r7, #24]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3724      	adds	r7, #36	@ 0x24
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	58024400 	.word	0x58024400
 800921c:	03d09000 	.word	0x03d09000
 8009220:	003d0900 	.word	0x003d0900
 8009224:	007a1200 	.word	0x007a1200
 8009228:	46000000 	.word	0x46000000
 800922c:	4c742400 	.word	0x4c742400
 8009230:	4a742400 	.word	0x4a742400
 8009234:	4af42400 	.word	0x4af42400

08009238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800923e:	f7ff fe81 	bl	8008f44 <HAL_RCC_GetSysClockFreq>
 8009242:	4602      	mov	r2, r0
 8009244:	4b10      	ldr	r3, [pc, #64]	@ (8009288 <HAL_RCC_GetHCLKFreq+0x50>)
 8009246:	699b      	ldr	r3, [r3, #24]
 8009248:	0a1b      	lsrs	r3, r3, #8
 800924a:	f003 030f 	and.w	r3, r3, #15
 800924e:	490f      	ldr	r1, [pc, #60]	@ (800928c <HAL_RCC_GetHCLKFreq+0x54>)
 8009250:	5ccb      	ldrb	r3, [r1, r3]
 8009252:	f003 031f 	and.w	r3, r3, #31
 8009256:	fa22 f303 	lsr.w	r3, r2, r3
 800925a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800925c:	4b0a      	ldr	r3, [pc, #40]	@ (8009288 <HAL_RCC_GetHCLKFreq+0x50>)
 800925e:	699b      	ldr	r3, [r3, #24]
 8009260:	f003 030f 	and.w	r3, r3, #15
 8009264:	4a09      	ldr	r2, [pc, #36]	@ (800928c <HAL_RCC_GetHCLKFreq+0x54>)
 8009266:	5cd3      	ldrb	r3, [r2, r3]
 8009268:	f003 031f 	and.w	r3, r3, #31
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	fa22 f303 	lsr.w	r3, r2, r3
 8009272:	4a07      	ldr	r2, [pc, #28]	@ (8009290 <HAL_RCC_GetHCLKFreq+0x58>)
 8009274:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009276:	4a07      	ldr	r2, [pc, #28]	@ (8009294 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800927c:	4b04      	ldr	r3, [pc, #16]	@ (8009290 <HAL_RCC_GetHCLKFreq+0x58>)
 800927e:	681b      	ldr	r3, [r3, #0]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	58024400 	.word	0x58024400
 800928c:	08010394 	.word	0x08010394
 8009290:	240001b4 	.word	0x240001b4
 8009294:	240001b0 	.word	0x240001b0

08009298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800929c:	f7ff ffcc 	bl	8009238 <HAL_RCC_GetHCLKFreq>
 80092a0:	4602      	mov	r2, r0
 80092a2:	4b06      	ldr	r3, [pc, #24]	@ (80092bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80092a4:	69db      	ldr	r3, [r3, #28]
 80092a6:	091b      	lsrs	r3, r3, #4
 80092a8:	f003 0307 	and.w	r3, r3, #7
 80092ac:	4904      	ldr	r1, [pc, #16]	@ (80092c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80092ae:	5ccb      	ldrb	r3, [r1, r3]
 80092b0:	f003 031f 	and.w	r3, r3, #31
 80092b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	58024400 	.word	0x58024400
 80092c0:	08010394 	.word	0x08010394

080092c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092c8:	b0c6      	sub	sp, #280	@ 0x118
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092d0:	2300      	movs	r3, #0
 80092d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092d6:	2300      	movs	r3, #0
 80092d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80092e8:	2500      	movs	r5, #0
 80092ea:	ea54 0305 	orrs.w	r3, r4, r5
 80092ee:	d049      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80092f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80092fa:	d02f      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80092fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009300:	d828      	bhi.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009302:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009306:	d01a      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009308:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800930c:	d822      	bhi.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009316:	d007      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009318:	e01c      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800931a:	4bab      	ldr	r3, [pc, #684]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800931c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931e:	4aaa      	ldr	r2, [pc, #680]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009324:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009326:	e01a      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800932c:	3308      	adds	r3, #8
 800932e:	2102      	movs	r1, #2
 8009330:	4618      	mov	r0, r3
 8009332:	f002 fa49 	bl	800b7c8 <RCCEx_PLL2_Config>
 8009336:	4603      	mov	r3, r0
 8009338:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800933c:	e00f      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800933e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009342:	3328      	adds	r3, #40	@ 0x28
 8009344:	2102      	movs	r1, #2
 8009346:	4618      	mov	r0, r3
 8009348:	f002 faf0 	bl	800b92c <RCCEx_PLL3_Config>
 800934c:	4603      	mov	r3, r0
 800934e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009352:	e004      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800935a:	e000      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800935c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800935e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10a      	bne.n	800937c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009366:	4b98      	ldr	r3, [pc, #608]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800936a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800936e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009374:	4a94      	ldr	r2, [pc, #592]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009376:	430b      	orrs	r3, r1
 8009378:	6513      	str	r3, [r2, #80]	@ 0x50
 800937a:	e003      	b.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800937c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009380:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009390:	f04f 0900 	mov.w	r9, #0
 8009394:	ea58 0309 	orrs.w	r3, r8, r9
 8009398:	d047      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800939a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800939e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093a0:	2b04      	cmp	r3, #4
 80093a2:	d82a      	bhi.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80093a4:	a201      	add	r2, pc, #4	@ (adr r2, 80093ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80093a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093aa:	bf00      	nop
 80093ac:	080093c1 	.word	0x080093c1
 80093b0:	080093cf 	.word	0x080093cf
 80093b4:	080093e5 	.word	0x080093e5
 80093b8:	08009403 	.word	0x08009403
 80093bc:	08009403 	.word	0x08009403
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093c0:	4b81      	ldr	r3, [pc, #516]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80093c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c4:	4a80      	ldr	r2, [pc, #512]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80093c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093cc:	e01a      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093d2:	3308      	adds	r3, #8
 80093d4:	2100      	movs	r1, #0
 80093d6:	4618      	mov	r0, r3
 80093d8:	f002 f9f6 	bl	800b7c8 <RCCEx_PLL2_Config>
 80093dc:	4603      	mov	r3, r0
 80093de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093e2:	e00f      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093e8:	3328      	adds	r3, #40	@ 0x28
 80093ea:	2100      	movs	r1, #0
 80093ec:	4618      	mov	r0, r3
 80093ee:	f002 fa9d 	bl	800b92c <RCCEx_PLL3_Config>
 80093f2:	4603      	mov	r3, r0
 80093f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093f8:	e004      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009400:	e000      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10a      	bne.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800940c:	4b6e      	ldr	r3, [pc, #440]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800940e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009410:	f023 0107 	bic.w	r1, r3, #7
 8009414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800941a:	4a6b      	ldr	r2, [pc, #428]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800941c:	430b      	orrs	r3, r1
 800941e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009420:	e003      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009422:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009426:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800942a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009432:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8009436:	f04f 0b00 	mov.w	fp, #0
 800943a:	ea5a 030b 	orrs.w	r3, sl, fp
 800943e:	d05b      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009444:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009448:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800944c:	d03b      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800944e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009452:	d834      	bhi.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009454:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009458:	d037      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x206>
 800945a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800945e:	d82e      	bhi.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009460:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009464:	d033      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009466:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800946a:	d828      	bhi.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800946c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009470:	d01a      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009472:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009476:	d822      	bhi.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009478:	2b00      	cmp	r3, #0
 800947a:	d003      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800947c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009480:	d007      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009482:	e01c      	b.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009484:	4b50      	ldr	r3, [pc, #320]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009488:	4a4f      	ldr	r2, [pc, #316]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800948a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800948e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009490:	e01e      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009496:	3308      	adds	r3, #8
 8009498:	2100      	movs	r1, #0
 800949a:	4618      	mov	r0, r3
 800949c:	f002 f994 	bl	800b7c8 <RCCEx_PLL2_Config>
 80094a0:	4603      	mov	r3, r0
 80094a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80094a6:	e013      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ac:	3328      	adds	r3, #40	@ 0x28
 80094ae:	2100      	movs	r1, #0
 80094b0:	4618      	mov	r0, r3
 80094b2:	f002 fa3b 	bl	800b92c <RCCEx_PLL3_Config>
 80094b6:	4603      	mov	r3, r0
 80094b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094bc:	e008      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80094c4:	e004      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80094c6:	bf00      	nop
 80094c8:	e002      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80094ca:	bf00      	nop
 80094cc:	e000      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80094ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10b      	bne.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80094d8:	4b3b      	ldr	r3, [pc, #236]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80094da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094dc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80094e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80094e8:	4a37      	ldr	r2, [pc, #220]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80094ea:	430b      	orrs	r3, r1
 80094ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80094ee:	e003      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80094f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009504:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009508:	2300      	movs	r3, #0
 800950a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800950e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009512:	460b      	mov	r3, r1
 8009514:	4313      	orrs	r3, r2
 8009516:	d05d      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800951c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009520:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009524:	d03b      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009526:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800952a:	d834      	bhi.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800952c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009530:	d037      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009532:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009536:	d82e      	bhi.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009538:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800953c:	d033      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800953e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009542:	d828      	bhi.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009544:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009548:	d01a      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800954a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800954e:	d822      	bhi.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009550:	2b00      	cmp	r3, #0
 8009552:	d003      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009554:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009558:	d007      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800955a:	e01c      	b.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800955c:	4b1a      	ldr	r3, [pc, #104]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800955e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009560:	4a19      	ldr	r2, [pc, #100]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009568:	e01e      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800956a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800956e:	3308      	adds	r3, #8
 8009570:	2100      	movs	r1, #0
 8009572:	4618      	mov	r0, r3
 8009574:	f002 f928 	bl	800b7c8 <RCCEx_PLL2_Config>
 8009578:	4603      	mov	r3, r0
 800957a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800957e:	e013      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009584:	3328      	adds	r3, #40	@ 0x28
 8009586:	2100      	movs	r1, #0
 8009588:	4618      	mov	r0, r3
 800958a:	f002 f9cf 	bl	800b92c <RCCEx_PLL3_Config>
 800958e:	4603      	mov	r3, r0
 8009590:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009594:	e008      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800959c:	e004      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800959e:	bf00      	nop
 80095a0:	e002      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80095a2:	bf00      	nop
 80095a4:	e000      	b.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80095a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10d      	bne.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80095b0:	4b05      	ldr	r3, [pc, #20]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80095b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095b4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80095b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80095c0:	4a01      	ldr	r2, [pc, #4]	@ (80095c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80095c2:	430b      	orrs	r3, r1
 80095c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80095c6:	e005      	b.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80095c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80095d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80095e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80095e4:	2300      	movs	r3, #0
 80095e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80095ea:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80095ee:	460b      	mov	r3, r1
 80095f0:	4313      	orrs	r3, r2
 80095f2:	d03a      	beq.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80095f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095fa:	2b30      	cmp	r3, #48	@ 0x30
 80095fc:	d01f      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80095fe:	2b30      	cmp	r3, #48	@ 0x30
 8009600:	d819      	bhi.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009602:	2b20      	cmp	r3, #32
 8009604:	d00c      	beq.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009606:	2b20      	cmp	r3, #32
 8009608:	d815      	bhi.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800960a:	2b00      	cmp	r3, #0
 800960c:	d019      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800960e:	2b10      	cmp	r3, #16
 8009610:	d111      	bne.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009612:	4baa      	ldr	r3, [pc, #680]	@ (80098bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009616:	4aa9      	ldr	r2, [pc, #676]	@ (80098bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800961c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800961e:	e011      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009624:	3308      	adds	r3, #8
 8009626:	2102      	movs	r1, #2
 8009628:	4618      	mov	r0, r3
 800962a:	f002 f8cd 	bl	800b7c8 <RCCEx_PLL2_Config>
 800962e:	4603      	mov	r3, r0
 8009630:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009634:	e006      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800963c:	e002      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800963e:	bf00      	nop
 8009640:	e000      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009644:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10a      	bne.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800964c:	4b9b      	ldr	r3, [pc, #620]	@ (80098bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800964e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009650:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800965a:	4a98      	ldr	r2, [pc, #608]	@ (80098bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800965c:	430b      	orrs	r3, r1
 800965e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009660:	e003      	b.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009662:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009666:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800966a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800966e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009672:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009676:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800967a:	2300      	movs	r3, #0
 800967c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009680:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009684:	460b      	mov	r3, r1
 8009686:	4313      	orrs	r3, r2
 8009688:	d051      	beq.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800968a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800968e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009690:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009694:	d035      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009696:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800969a:	d82e      	bhi.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x436>
 800969c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80096a0:	d031      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80096a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80096a6:	d828      	bhi.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x436>
 80096a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096ac:	d01a      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80096ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096b2:	d822      	bhi.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x436>
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d003      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80096b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096bc:	d007      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80096be:	e01c      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096c0:	4b7e      	ldr	r3, [pc, #504]	@ (80098bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80096c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c4:	4a7d      	ldr	r2, [pc, #500]	@ (80098bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80096c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80096cc:	e01c      	b.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096d2:	3308      	adds	r3, #8
 80096d4:	2100      	movs	r1, #0
 80096d6:	4618      	mov	r0, r3
 80096d8:	f002 f876 	bl	800b7c8 <RCCEx_PLL2_Config>
 80096dc:	4603      	mov	r3, r0
 80096de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80096e2:	e011      	b.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80096e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e8:	3328      	adds	r3, #40	@ 0x28
 80096ea:	2100      	movs	r1, #0
 80096ec:	4618      	mov	r0, r3
 80096ee:	f002 f91d 	bl	800b92c <RCCEx_PLL3_Config>
 80096f2:	4603      	mov	r3, r0
 80096f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80096f8:	e006      	b.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009700:	e002      	b.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009702:	bf00      	nop
 8009704:	e000      	b.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009708:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10a      	bne.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009710:	4b6a      	ldr	r3, [pc, #424]	@ (80098bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009714:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800971c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800971e:	4a67      	ldr	r2, [pc, #412]	@ (80098bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009720:	430b      	orrs	r3, r1
 8009722:	6513      	str	r3, [r2, #80]	@ 0x50
 8009724:	e003      	b.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009726:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800972a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800972e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009736:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800973a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800973e:	2300      	movs	r3, #0
 8009740:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009744:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009748:	460b      	mov	r3, r1
 800974a:	4313      	orrs	r3, r2
 800974c:	d053      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800974e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009754:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009758:	d033      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800975a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800975e:	d82c      	bhi.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009760:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009764:	d02f      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009766:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800976a:	d826      	bhi.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800976c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009770:	d02b      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009772:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009776:	d820      	bhi.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009778:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800977c:	d012      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800977e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009782:	d81a      	bhi.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009784:	2b00      	cmp	r3, #0
 8009786:	d022      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800978c:	d115      	bne.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800978e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009792:	3308      	adds	r3, #8
 8009794:	2101      	movs	r1, #1
 8009796:	4618      	mov	r0, r3
 8009798:	f002 f816 	bl	800b7c8 <RCCEx_PLL2_Config>
 800979c:	4603      	mov	r3, r0
 800979e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80097a2:	e015      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097a8:	3328      	adds	r3, #40	@ 0x28
 80097aa:	2101      	movs	r1, #1
 80097ac:	4618      	mov	r0, r3
 80097ae:	f002 f8bd 	bl	800b92c <RCCEx_PLL3_Config>
 80097b2:	4603      	mov	r3, r0
 80097b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80097b8:	e00a      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80097c0:	e006      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80097c2:	bf00      	nop
 80097c4:	e004      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80097c6:	bf00      	nop
 80097c8:	e002      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80097ca:	bf00      	nop
 80097cc:	e000      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80097ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d10a      	bne.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80097d8:	4b38      	ldr	r3, [pc, #224]	@ (80098bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80097e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097e6:	4a35      	ldr	r2, [pc, #212]	@ (80098bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80097e8:	430b      	orrs	r3, r1
 80097ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80097ec:	e003      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80097f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fe:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009802:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009806:	2300      	movs	r3, #0
 8009808:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800980c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009810:	460b      	mov	r3, r1
 8009812:	4313      	orrs	r3, r2
 8009814:	d058      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800981a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800981e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009822:	d033      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009824:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009828:	d82c      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800982a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800982e:	d02f      	beq.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009834:	d826      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009836:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800983a:	d02b      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800983c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009840:	d820      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009842:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009846:	d012      	beq.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800984c:	d81a      	bhi.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800984e:	2b00      	cmp	r3, #0
 8009850:	d022      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009852:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009856:	d115      	bne.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800985c:	3308      	adds	r3, #8
 800985e:	2101      	movs	r1, #1
 8009860:	4618      	mov	r0, r3
 8009862:	f001 ffb1 	bl	800b7c8 <RCCEx_PLL2_Config>
 8009866:	4603      	mov	r3, r0
 8009868:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800986c:	e015      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800986e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009872:	3328      	adds	r3, #40	@ 0x28
 8009874:	2101      	movs	r1, #1
 8009876:	4618      	mov	r0, r3
 8009878:	f002 f858 	bl	800b92c <RCCEx_PLL3_Config>
 800987c:	4603      	mov	r3, r0
 800987e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009882:	e00a      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800988a:	e006      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800988c:	bf00      	nop
 800988e:	e004      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009890:	bf00      	nop
 8009892:	e002      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009894:	bf00      	nop
 8009896:	e000      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800989a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10e      	bne.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80098a2:	4b06      	ldr	r3, [pc, #24]	@ (80098bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80098aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80098b2:	4a02      	ldr	r2, [pc, #8]	@ (80098bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80098b4:	430b      	orrs	r3, r1
 80098b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80098b8:	e006      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80098ba:	bf00      	nop
 80098bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80098c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80098d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098d8:	2300      	movs	r3, #0
 80098da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80098de:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80098e2:	460b      	mov	r3, r1
 80098e4:	4313      	orrs	r3, r2
 80098e6:	d037      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80098e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098f2:	d00e      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80098f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098f8:	d816      	bhi.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d018      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80098fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009902:	d111      	bne.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009904:	4bc4      	ldr	r3, [pc, #784]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009908:	4ac3      	ldr	r2, [pc, #780]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800990a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800990e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009910:	e00f      	b.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009916:	3308      	adds	r3, #8
 8009918:	2101      	movs	r1, #1
 800991a:	4618      	mov	r0, r3
 800991c:	f001 ff54 	bl	800b7c8 <RCCEx_PLL2_Config>
 8009920:	4603      	mov	r3, r0
 8009922:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009926:	e004      	b.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800992e:	e000      	b.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009932:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10a      	bne.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800993a:	4bb7      	ldr	r3, [pc, #732]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800993c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800993e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009948:	4ab3      	ldr	r2, [pc, #716]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800994a:	430b      	orrs	r3, r1
 800994c:	6513      	str	r3, [r2, #80]	@ 0x50
 800994e:	e003      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009950:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009954:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800995c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009960:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009964:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009968:	2300      	movs	r3, #0
 800996a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800996e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009972:	460b      	mov	r3, r1
 8009974:	4313      	orrs	r3, r2
 8009976:	d039      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800997c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800997e:	2b03      	cmp	r3, #3
 8009980:	d81c      	bhi.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009982:	a201      	add	r2, pc, #4	@ (adr r2, 8009988 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009988:	080099c5 	.word	0x080099c5
 800998c:	08009999 	.word	0x08009999
 8009990:	080099a7 	.word	0x080099a7
 8009994:	080099c5 	.word	0x080099c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009998:	4b9f      	ldr	r3, [pc, #636]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800999a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800999c:	4a9e      	ldr	r2, [pc, #632]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800999e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80099a4:	e00f      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099aa:	3308      	adds	r3, #8
 80099ac:	2102      	movs	r1, #2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f001 ff0a 	bl	800b7c8 <RCCEx_PLL2_Config>
 80099b4:	4603      	mov	r3, r0
 80099b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80099ba:	e004      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80099c2:	e000      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80099c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10a      	bne.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80099ce:	4b92      	ldr	r3, [pc, #584]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099d2:	f023 0103 	bic.w	r1, r3, #3
 80099d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099dc:	4a8e      	ldr	r2, [pc, #568]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099de:	430b      	orrs	r3, r1
 80099e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80099e2:	e003      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80099ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80099f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80099fc:	2300      	movs	r3, #0
 80099fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a02:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009a06:	460b      	mov	r3, r1
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	f000 8099 	beq.w	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a0e:	4b83      	ldr	r3, [pc, #524]	@ (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a82      	ldr	r2, [pc, #520]	@ (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a1a:	f7f8 ff47 	bl	80028ac <HAL_GetTick>
 8009a1e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a22:	e00b      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a24:	f7f8 ff42 	bl	80028ac <HAL_GetTick>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009a2e:	1ad3      	subs	r3, r2, r3
 8009a30:	2b64      	cmp	r3, #100	@ 0x64
 8009a32:	d903      	bls.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009a34:	2303      	movs	r3, #3
 8009a36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a3a:	e005      	b.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a3c:	4b77      	ldr	r3, [pc, #476]	@ (8009c1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d0ed      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009a48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d173      	bne.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009a50:	4b71      	ldr	r3, [pc, #452]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009a5c:	4053      	eors	r3, r2
 8009a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d015      	beq.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009a66:	4b6c      	ldr	r3, [pc, #432]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a6e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a72:	4b69      	ldr	r3, [pc, #420]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a76:	4a68      	ldr	r2, [pc, #416]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a7c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a7e:	4b66      	ldr	r3, [pc, #408]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a82:	4a65      	ldr	r2, [pc, #404]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a88:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009a8a:	4a63      	ldr	r2, [pc, #396]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a90:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a9e:	d118      	bne.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aa0:	f7f8 ff04 	bl	80028ac <HAL_GetTick>
 8009aa4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009aa8:	e00d      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009aaa:	f7f8 feff 	bl	80028ac <HAL_GetTick>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009ab4:	1ad2      	subs	r2, r2, r3
 8009ab6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d903      	bls.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009ac4:	e005      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ac6:	4b54      	ldr	r3, [pc, #336]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aca:	f003 0302 	and.w	r3, r3, #2
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d0eb      	beq.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009ad2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d129      	bne.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ade:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009ae2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ae6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009aea:	d10e      	bne.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009aec:	4b4a      	ldr	r3, [pc, #296]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009afc:	091a      	lsrs	r2, r3, #4
 8009afe:	4b48      	ldr	r3, [pc, #288]	@ (8009c20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009b00:	4013      	ands	r3, r2
 8009b02:	4a45      	ldr	r2, [pc, #276]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b04:	430b      	orrs	r3, r1
 8009b06:	6113      	str	r3, [r2, #16]
 8009b08:	e005      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009b0a:	4b43      	ldr	r3, [pc, #268]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	4a42      	ldr	r2, [pc, #264]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009b14:	6113      	str	r3, [r2, #16]
 8009b16:	4b40      	ldr	r3, [pc, #256]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b18:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b26:	4a3c      	ldr	r2, [pc, #240]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009b28:	430b      	orrs	r3, r1
 8009b2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b2c:	e008      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8009b36:	e003      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	f002 0301 	and.w	r3, r2, #1
 8009b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b50:	2300      	movs	r3, #0
 8009b52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009b56:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	f000 808f 	beq.w	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b68:	2b28      	cmp	r3, #40	@ 0x28
 8009b6a:	d871      	bhi.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8009b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b72:	bf00      	nop
 8009b74:	08009c59 	.word	0x08009c59
 8009b78:	08009c51 	.word	0x08009c51
 8009b7c:	08009c51 	.word	0x08009c51
 8009b80:	08009c51 	.word	0x08009c51
 8009b84:	08009c51 	.word	0x08009c51
 8009b88:	08009c51 	.word	0x08009c51
 8009b8c:	08009c51 	.word	0x08009c51
 8009b90:	08009c51 	.word	0x08009c51
 8009b94:	08009c25 	.word	0x08009c25
 8009b98:	08009c51 	.word	0x08009c51
 8009b9c:	08009c51 	.word	0x08009c51
 8009ba0:	08009c51 	.word	0x08009c51
 8009ba4:	08009c51 	.word	0x08009c51
 8009ba8:	08009c51 	.word	0x08009c51
 8009bac:	08009c51 	.word	0x08009c51
 8009bb0:	08009c51 	.word	0x08009c51
 8009bb4:	08009c3b 	.word	0x08009c3b
 8009bb8:	08009c51 	.word	0x08009c51
 8009bbc:	08009c51 	.word	0x08009c51
 8009bc0:	08009c51 	.word	0x08009c51
 8009bc4:	08009c51 	.word	0x08009c51
 8009bc8:	08009c51 	.word	0x08009c51
 8009bcc:	08009c51 	.word	0x08009c51
 8009bd0:	08009c51 	.word	0x08009c51
 8009bd4:	08009c59 	.word	0x08009c59
 8009bd8:	08009c51 	.word	0x08009c51
 8009bdc:	08009c51 	.word	0x08009c51
 8009be0:	08009c51 	.word	0x08009c51
 8009be4:	08009c51 	.word	0x08009c51
 8009be8:	08009c51 	.word	0x08009c51
 8009bec:	08009c51 	.word	0x08009c51
 8009bf0:	08009c51 	.word	0x08009c51
 8009bf4:	08009c59 	.word	0x08009c59
 8009bf8:	08009c51 	.word	0x08009c51
 8009bfc:	08009c51 	.word	0x08009c51
 8009c00:	08009c51 	.word	0x08009c51
 8009c04:	08009c51 	.word	0x08009c51
 8009c08:	08009c51 	.word	0x08009c51
 8009c0c:	08009c51 	.word	0x08009c51
 8009c10:	08009c51 	.word	0x08009c51
 8009c14:	08009c59 	.word	0x08009c59
 8009c18:	58024400 	.word	0x58024400
 8009c1c:	58024800 	.word	0x58024800
 8009c20:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c28:	3308      	adds	r3, #8
 8009c2a:	2101      	movs	r1, #1
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f001 fdcb 	bl	800b7c8 <RCCEx_PLL2_Config>
 8009c32:	4603      	mov	r3, r0
 8009c34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009c38:	e00f      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c3e:	3328      	adds	r3, #40	@ 0x28
 8009c40:	2101      	movs	r1, #1
 8009c42:	4618      	mov	r0, r3
 8009c44:	f001 fe72 	bl	800b92c <RCCEx_PLL3_Config>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009c4e:	e004      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c56:	e000      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10a      	bne.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009c62:	4bbf      	ldr	r3, [pc, #764]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c66:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c70:	4abb      	ldr	r2, [pc, #748]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009c72:	430b      	orrs	r3, r1
 8009c74:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c76:	e003      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c88:	f002 0302 	and.w	r3, r2, #2
 8009c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c90:	2300      	movs	r3, #0
 8009c92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	d041      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ca6:	2b05      	cmp	r3, #5
 8009ca8:	d824      	bhi.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009caa:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb0:	08009cfd 	.word	0x08009cfd
 8009cb4:	08009cc9 	.word	0x08009cc9
 8009cb8:	08009cdf 	.word	0x08009cdf
 8009cbc:	08009cfd 	.word	0x08009cfd
 8009cc0:	08009cfd 	.word	0x08009cfd
 8009cc4:	08009cfd 	.word	0x08009cfd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ccc:	3308      	adds	r3, #8
 8009cce:	2101      	movs	r1, #1
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f001 fd79 	bl	800b7c8 <RCCEx_PLL2_Config>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009cdc:	e00f      	b.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ce2:	3328      	adds	r3, #40	@ 0x28
 8009ce4:	2101      	movs	r1, #1
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f001 fe20 	bl	800b92c <RCCEx_PLL3_Config>
 8009cec:	4603      	mov	r3, r0
 8009cee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009cf2:	e004      	b.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009cfa:	e000      	b.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10a      	bne.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009d06:	4b96      	ldr	r3, [pc, #600]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d0a:	f023 0107 	bic.w	r1, r3, #7
 8009d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d14:	4a92      	ldr	r2, [pc, #584]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009d16:	430b      	orrs	r3, r1
 8009d18:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d1a:	e003      	b.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2c:	f002 0304 	and.w	r3, r2, #4
 8009d30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009d34:	2300      	movs	r3, #0
 8009d36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009d3a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009d3e:	460b      	mov	r3, r1
 8009d40:	4313      	orrs	r3, r2
 8009d42:	d044      	beq.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d4c:	2b05      	cmp	r3, #5
 8009d4e:	d825      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009d50:	a201      	add	r2, pc, #4	@ (adr r2, 8009d58 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d56:	bf00      	nop
 8009d58:	08009da5 	.word	0x08009da5
 8009d5c:	08009d71 	.word	0x08009d71
 8009d60:	08009d87 	.word	0x08009d87
 8009d64:	08009da5 	.word	0x08009da5
 8009d68:	08009da5 	.word	0x08009da5
 8009d6c:	08009da5 	.word	0x08009da5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d74:	3308      	adds	r3, #8
 8009d76:	2101      	movs	r1, #1
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f001 fd25 	bl	800b7c8 <RCCEx_PLL2_Config>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009d84:	e00f      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d8a:	3328      	adds	r3, #40	@ 0x28
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f001 fdcc 	bl	800b92c <RCCEx_PLL3_Config>
 8009d94:	4603      	mov	r3, r0
 8009d96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009d9a:	e004      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009da2:	e000      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009da6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10b      	bne.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009dae:	4b6c      	ldr	r3, [pc, #432]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009db2:	f023 0107 	bic.w	r1, r3, #7
 8009db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dbe:	4a68      	ldr	r2, [pc, #416]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009dc0:	430b      	orrs	r3, r1
 8009dc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009dc4:	e003      	b.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd6:	f002 0320 	and.w	r3, r2, #32
 8009dda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009dde:	2300      	movs	r3, #0
 8009de0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009de4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009de8:	460b      	mov	r3, r1
 8009dea:	4313      	orrs	r3, r2
 8009dec:	d055      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009dfa:	d033      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e00:	d82c      	bhi.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e06:	d02f      	beq.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e0c:	d826      	bhi.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009e0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009e12:	d02b      	beq.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009e14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009e18:	d820      	bhi.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009e1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e1e:	d012      	beq.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009e20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e24:	d81a      	bhi.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d022      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009e2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e2e:	d115      	bne.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e34:	3308      	adds	r3, #8
 8009e36:	2100      	movs	r1, #0
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f001 fcc5 	bl	800b7c8 <RCCEx_PLL2_Config>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009e44:	e015      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e4a:	3328      	adds	r3, #40	@ 0x28
 8009e4c:	2102      	movs	r1, #2
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f001 fd6c 	bl	800b92c <RCCEx_PLL3_Config>
 8009e54:	4603      	mov	r3, r0
 8009e56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009e5a:	e00a      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e62:	e006      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009e64:	bf00      	nop
 8009e66:	e004      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009e68:	bf00      	nop
 8009e6a:	e002      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009e6c:	bf00      	nop
 8009e6e:	e000      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d10b      	bne.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009e7a:	4b39      	ldr	r3, [pc, #228]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e8a:	4a35      	ldr	r2, [pc, #212]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009e8c:	430b      	orrs	r3, r1
 8009e8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e90:	e003      	b.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009ea6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009eaa:	2300      	movs	r3, #0
 8009eac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009eb0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	d058      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ebe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009ec2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009ec6:	d033      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009ec8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009ecc:	d82c      	bhi.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ed2:	d02f      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ed8:	d826      	bhi.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009eda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ede:	d02b      	beq.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009ee0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ee4:	d820      	bhi.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009ee6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009eea:	d012      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009eec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ef0:	d81a      	bhi.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d022      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009efa:	d115      	bne.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f00:	3308      	adds	r3, #8
 8009f02:	2100      	movs	r1, #0
 8009f04:	4618      	mov	r0, r3
 8009f06:	f001 fc5f 	bl	800b7c8 <RCCEx_PLL2_Config>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009f10:	e015      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f16:	3328      	adds	r3, #40	@ 0x28
 8009f18:	2102      	movs	r1, #2
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f001 fd06 	bl	800b92c <RCCEx_PLL3_Config>
 8009f20:	4603      	mov	r3, r0
 8009f22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009f26:	e00a      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f2e:	e006      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009f30:	bf00      	nop
 8009f32:	e004      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009f34:	bf00      	nop
 8009f36:	e002      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009f38:	bf00      	nop
 8009f3a:	e000      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10e      	bne.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009f46:	4b06      	ldr	r3, [pc, #24]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f4a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f56:	4a02      	ldr	r2, [pc, #8]	@ (8009f60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009f58:	430b      	orrs	r3, r1
 8009f5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f5c:	e006      	b.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009f5e:	bf00      	nop
 8009f60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009f78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f82:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009f86:	460b      	mov	r3, r1
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	d055      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f94:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009f98:	d033      	beq.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009f9a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009f9e:	d82c      	bhi.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009fa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fa4:	d02f      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009fa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009faa:	d826      	bhi.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009fac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009fb0:	d02b      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009fb2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009fb6:	d820      	bhi.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009fb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009fbc:	d012      	beq.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009fbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009fc2:	d81a      	bhi.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d022      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009fc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fcc:	d115      	bne.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd2:	3308      	adds	r3, #8
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f001 fbf6 	bl	800b7c8 <RCCEx_PLL2_Config>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009fe2:	e015      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fe8:	3328      	adds	r3, #40	@ 0x28
 8009fea:	2102      	movs	r1, #2
 8009fec:	4618      	mov	r0, r3
 8009fee:	f001 fc9d 	bl	800b92c <RCCEx_PLL3_Config>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009ff8:	e00a      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a000:	e006      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a002:	bf00      	nop
 800a004:	e004      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a006:	bf00      	nop
 800a008:	e002      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a00a:	bf00      	nop
 800a00c:	e000      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a00e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a010:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10b      	bne.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a018:	4ba0      	ldr	r3, [pc, #640]	@ (800a29c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a01a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a01c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a024:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a028:	4a9c      	ldr	r2, [pc, #624]	@ (800a29c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a02a:	430b      	orrs	r3, r1
 800a02c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a02e:	e003      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a030:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a034:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a040:	f002 0308 	and.w	r3, r2, #8
 800a044:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a048:	2300      	movs	r3, #0
 800a04a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a04e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a052:	460b      	mov	r3, r1
 800a054:	4313      	orrs	r3, r2
 800a056:	d01e      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a05c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a060:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a064:	d10c      	bne.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a06a:	3328      	adds	r3, #40	@ 0x28
 800a06c:	2102      	movs	r1, #2
 800a06e:	4618      	mov	r0, r3
 800a070:	f001 fc5c 	bl	800b92c <RCCEx_PLL3_Config>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d002      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a080:	4b86      	ldr	r3, [pc, #536]	@ (800a29c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a084:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a08c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a090:	4a82      	ldr	r2, [pc, #520]	@ (800a29c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a092:	430b      	orrs	r3, r1
 800a094:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	f002 0310 	and.w	r3, r2, #16
 800a0a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a0ac:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	d01e      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a0be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0c2:	d10c      	bne.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0c8:	3328      	adds	r3, #40	@ 0x28
 800a0ca:	2102      	movs	r1, #2
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f001 fc2d 	bl	800b92c <RCCEx_PLL3_Config>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d002      	beq.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a0de:	4b6f      	ldr	r3, [pc, #444]	@ (800a29c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a0e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a0ee:	4a6b      	ldr	r2, [pc, #428]	@ (800a29c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a0f0:	430b      	orrs	r3, r1
 800a0f2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a0f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a100:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a102:	2300      	movs	r3, #0
 800a104:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a106:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a10a:	460b      	mov	r3, r1
 800a10c:	4313      	orrs	r3, r2
 800a10e:	d03e      	beq.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a114:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a118:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a11c:	d022      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a11e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a122:	d81b      	bhi.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a124:	2b00      	cmp	r3, #0
 800a126:	d003      	beq.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a12c:	d00b      	beq.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a12e:	e015      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a134:	3308      	adds	r3, #8
 800a136:	2100      	movs	r1, #0
 800a138:	4618      	mov	r0, r3
 800a13a:	f001 fb45 	bl	800b7c8 <RCCEx_PLL2_Config>
 800a13e:	4603      	mov	r3, r0
 800a140:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a144:	e00f      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a14a:	3328      	adds	r3, #40	@ 0x28
 800a14c:	2102      	movs	r1, #2
 800a14e:	4618      	mov	r0, r3
 800a150:	f001 fbec 	bl	800b92c <RCCEx_PLL3_Config>
 800a154:	4603      	mov	r3, r0
 800a156:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a15a:	e004      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a162:	e000      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a164:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a166:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d10b      	bne.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a16e:	4b4b      	ldr	r3, [pc, #300]	@ (800a29c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a172:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a17a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a17e:	4a47      	ldr	r2, [pc, #284]	@ (800a29c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a180:	430b      	orrs	r3, r1
 800a182:	6593      	str	r3, [r2, #88]	@ 0x58
 800a184:	e003      	b.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a186:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a18a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a196:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a19a:	673b      	str	r3, [r7, #112]	@ 0x70
 800a19c:	2300      	movs	r3, #0
 800a19e:	677b      	str	r3, [r7, #116]	@ 0x74
 800a1a0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	d03b      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a1b6:	d01f      	beq.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a1b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a1bc:	d818      	bhi.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a1be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1c2:	d003      	beq.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a1c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1c8:	d007      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a1ca:	e011      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1cc:	4b33      	ldr	r3, [pc, #204]	@ (800a29c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a1ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1d0:	4a32      	ldr	r2, [pc, #200]	@ (800a29c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a1d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a1d8:	e00f      	b.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1de:	3328      	adds	r3, #40	@ 0x28
 800a1e0:	2101      	movs	r1, #1
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f001 fba2 	bl	800b92c <RCCEx_PLL3_Config>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a1ee:	e004      	b.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a1f6:	e000      	b.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a1f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10b      	bne.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a202:	4b26      	ldr	r3, [pc, #152]	@ (800a29c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a206:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a20a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a20e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a212:	4a22      	ldr	r2, [pc, #136]	@ (800a29c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a214:	430b      	orrs	r3, r1
 800a216:	6553      	str	r3, [r2, #84]	@ 0x54
 800a218:	e003      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a21a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a21e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a22e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a230:	2300      	movs	r3, #0
 800a232:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a234:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a238:	460b      	mov	r3, r1
 800a23a:	4313      	orrs	r3, r2
 800a23c:	d034      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a23e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a244:	2b00      	cmp	r3, #0
 800a246:	d003      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a24c:	d007      	beq.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a24e:	e011      	b.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a250:	4b12      	ldr	r3, [pc, #72]	@ (800a29c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a254:	4a11      	ldr	r2, [pc, #68]	@ (800a29c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a25a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a25c:	e00e      	b.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a25e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a262:	3308      	adds	r3, #8
 800a264:	2102      	movs	r1, #2
 800a266:	4618      	mov	r0, r3
 800a268:	f001 faae 	bl	800b7c8 <RCCEx_PLL2_Config>
 800a26c:	4603      	mov	r3, r0
 800a26e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a272:	e003      	b.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a274:	2301      	movs	r3, #1
 800a276:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a27a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a27c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a280:	2b00      	cmp	r3, #0
 800a282:	d10d      	bne.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a284:	4b05      	ldr	r3, [pc, #20]	@ (800a29c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a288:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a292:	4a02      	ldr	r2, [pc, #8]	@ (800a29c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a294:	430b      	orrs	r3, r1
 800a296:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a298:	e006      	b.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a29a:	bf00      	nop
 800a29c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a2a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a2b4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a2ba:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a2be:	460b      	mov	r3, r1
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	d00c      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a2c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2c8:	3328      	adds	r3, #40	@ 0x28
 800a2ca:	2102      	movs	r1, #2
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f001 fb2d 	bl	800b92c <RCCEx_PLL3_Config>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d002      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a2de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a2ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2f0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	d036      	beq.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a2fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a300:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a304:	d018      	beq.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a306:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a30a:	d811      	bhi.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a30c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a310:	d014      	beq.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a316:	d80b      	bhi.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d011      	beq.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a31c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a320:	d106      	bne.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a322:	4bb7      	ldr	r3, [pc, #732]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a326:	4ab6      	ldr	r2, [pc, #728]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a32c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a32e:	e008      	b.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a336:	e004      	b.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a338:	bf00      	nop
 800a33a:	e002      	b.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a33c:	bf00      	nop
 800a33e:	e000      	b.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a340:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a342:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10a      	bne.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a34a:	4bad      	ldr	r3, [pc, #692]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a34c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a34e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a356:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a358:	4aa9      	ldr	r2, [pc, #676]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a35a:	430b      	orrs	r3, r1
 800a35c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a35e:	e003      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a360:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a364:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a370:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a374:	653b      	str	r3, [r7, #80]	@ 0x50
 800a376:	2300      	movs	r3, #0
 800a378:	657b      	str	r3, [r7, #84]	@ 0x54
 800a37a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a37e:	460b      	mov	r3, r1
 800a380:	4313      	orrs	r3, r2
 800a382:	d009      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a384:	4b9e      	ldr	r3, [pc, #632]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a388:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a392:	4a9b      	ldr	r2, [pc, #620]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a394:	430b      	orrs	r3, r1
 800a396:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a3a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a3aa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	d009      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a3b4:	4b92      	ldr	r3, [pc, #584]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a3b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3b8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a3bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3c2:	4a8f      	ldr	r2, [pc, #572]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a3c4:	430b      	orrs	r3, r1
 800a3c6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a3d4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3da:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	d00e      	beq.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a3e4:	4b86      	ldr	r3, [pc, #536]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	4a85      	ldr	r2, [pc, #532]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a3ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a3ee:	6113      	str	r3, [r2, #16]
 800a3f0:	4b83      	ldr	r3, [pc, #524]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a3f2:	6919      	ldr	r1, [r3, #16]
 800a3f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a3fc:	4a80      	ldr	r2, [pc, #512]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a3fe:	430b      	orrs	r3, r1
 800a400:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a40e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a410:	2300      	movs	r3, #0
 800a412:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a414:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a418:	460b      	mov	r3, r1
 800a41a:	4313      	orrs	r3, r2
 800a41c:	d009      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a41e:	4b78      	ldr	r3, [pc, #480]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a422:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a42a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a42c:	4a74      	ldr	r2, [pc, #464]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a42e:	430b      	orrs	r3, r1
 800a430:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a43e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a440:	2300      	movs	r3, #0
 800a442:	637b      	str	r3, [r7, #52]	@ 0x34
 800a444:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a448:	460b      	mov	r3, r1
 800a44a:	4313      	orrs	r3, r2
 800a44c:	d00a      	beq.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a44e:	4b6c      	ldr	r3, [pc, #432]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a452:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a45a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a45e:	4a68      	ldr	r2, [pc, #416]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a460:	430b      	orrs	r3, r1
 800a462:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46c:	2100      	movs	r1, #0
 800a46e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a470:	f003 0301 	and.w	r3, r3, #1
 800a474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a476:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a47a:	460b      	mov	r3, r1
 800a47c:	4313      	orrs	r3, r2
 800a47e:	d011      	beq.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a484:	3308      	adds	r3, #8
 800a486:	2100      	movs	r1, #0
 800a488:	4618      	mov	r0, r3
 800a48a:	f001 f99d 	bl	800b7c8 <RCCEx_PLL2_Config>
 800a48e:	4603      	mov	r3, r0
 800a490:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a494:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d003      	beq.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a49c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	6239      	str	r1, [r7, #32]
 800a4b0:	f003 0302 	and.w	r3, r3, #2
 800a4b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4b6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	d011      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4c4:	3308      	adds	r3, #8
 800a4c6:	2101      	movs	r1, #1
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f001 f97d 	bl	800b7c8 <RCCEx_PLL2_Config>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a4d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d003      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a4e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	61b9      	str	r1, [r7, #24]
 800a4f0:	f003 0304 	and.w	r3, r3, #4
 800a4f4:	61fb      	str	r3, [r7, #28]
 800a4f6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	d011      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a504:	3308      	adds	r3, #8
 800a506:	2102      	movs	r1, #2
 800a508:	4618      	mov	r0, r3
 800a50a:	f001 f95d 	bl	800b7c8 <RCCEx_PLL2_Config>
 800a50e:	4603      	mov	r3, r0
 800a510:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a514:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d003      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a51c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a520:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52c:	2100      	movs	r1, #0
 800a52e:	6139      	str	r1, [r7, #16]
 800a530:	f003 0308 	and.w	r3, r3, #8
 800a534:	617b      	str	r3, [r7, #20]
 800a536:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a53a:	460b      	mov	r3, r1
 800a53c:	4313      	orrs	r3, r2
 800a53e:	d011      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a544:	3328      	adds	r3, #40	@ 0x28
 800a546:	2100      	movs	r1, #0
 800a548:	4618      	mov	r0, r3
 800a54a:	f001 f9ef 	bl	800b92c <RCCEx_PLL3_Config>
 800a54e:	4603      	mov	r3, r0
 800a550:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800a554:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d003      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a55c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a560:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	2100      	movs	r1, #0
 800a56e:	60b9      	str	r1, [r7, #8]
 800a570:	f003 0310 	and.w	r3, r3, #16
 800a574:	60fb      	str	r3, [r7, #12]
 800a576:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a57a:	460b      	mov	r3, r1
 800a57c:	4313      	orrs	r3, r2
 800a57e:	d011      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a584:	3328      	adds	r3, #40	@ 0x28
 800a586:	2101      	movs	r1, #1
 800a588:	4618      	mov	r0, r3
 800a58a:	f001 f9cf 	bl	800b92c <RCCEx_PLL3_Config>
 800a58e:	4603      	mov	r3, r0
 800a590:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a594:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d003      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a59c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	6039      	str	r1, [r7, #0]
 800a5b0:	f003 0320 	and.w	r3, r3, #32
 800a5b4:	607b      	str	r3, [r7, #4]
 800a5b6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	d011      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5c4:	3328      	adds	r3, #40	@ 0x28
 800a5c6:	2102      	movs	r1, #2
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f001 f9af 	bl	800b92c <RCCEx_PLL3_Config>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a5d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d003      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a5e4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	e000      	b.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5fe:	bf00      	nop
 800a600:	58024400 	.word	0x58024400

0800a604 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b090      	sub	sp, #64	@ 0x40
 800a608:	af00      	add	r7, sp, #0
 800a60a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a60e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a612:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a616:	430b      	orrs	r3, r1
 800a618:	f040 8094 	bne.w	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a61c:	4b9b      	ldr	r3, [pc, #620]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a61e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a620:	f003 0307 	and.w	r3, r3, #7
 800a624:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a628:	2b04      	cmp	r3, #4
 800a62a:	f200 8087 	bhi.w	800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a62e:	a201      	add	r2, pc, #4	@ (adr r2, 800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a634:	0800a649 	.word	0x0800a649
 800a638:	0800a671 	.word	0x0800a671
 800a63c:	0800a699 	.word	0x0800a699
 800a640:	0800a735 	.word	0x0800a735
 800a644:	0800a6c1 	.word	0x0800a6c1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a648:	4b90      	ldr	r3, [pc, #576]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a650:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a654:	d108      	bne.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a65a:	4618      	mov	r0, r3
 800a65c:	f000 ff62 	bl	800b524 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a664:	f000 bc93 	b.w	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a668:	2300      	movs	r3, #0
 800a66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a66c:	f000 bc8f 	b.w	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a670:	4b86      	ldr	r3, [pc, #536]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a678:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a67c:	d108      	bne.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a67e:	f107 0318 	add.w	r3, r7, #24
 800a682:	4618      	mov	r0, r3
 800a684:	f000 fca6 	bl	800afd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a68c:	f000 bc7f 	b.w	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a690:	2300      	movs	r3, #0
 800a692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a694:	f000 bc7b 	b.w	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a698:	4b7c      	ldr	r3, [pc, #496]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6a4:	d108      	bne.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6a6:	f107 030c 	add.w	r3, r7, #12
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f000 fde6 	bl	800b27c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6b4:	f000 bc6b 	b.w	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6bc:	f000 bc67 	b.w	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6c0:	4b72      	ldr	r3, [pc, #456]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a6c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a6c8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6ca:	4b70      	ldr	r3, [pc, #448]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f003 0304 	and.w	r3, r3, #4
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	d10c      	bne.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a6d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d109      	bne.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6dc:	4b6b      	ldr	r3, [pc, #428]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	08db      	lsrs	r3, r3, #3
 800a6e2:	f003 0303 	and.w	r3, r3, #3
 800a6e6:	4a6a      	ldr	r2, [pc, #424]	@ (800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a6e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6ee:	e01f      	b.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6f0:	4b66      	ldr	r3, [pc, #408]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6fc:	d106      	bne.n	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a6fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a700:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a704:	d102      	bne.n	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a706:	4b63      	ldr	r3, [pc, #396]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a708:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a70a:	e011      	b.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a70c:	4b5f      	ldr	r3, [pc, #380]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a718:	d106      	bne.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a71c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a720:	d102      	bne.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a722:	4b5d      	ldr	r3, [pc, #372]	@ (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a724:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a726:	e003      	b.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a728:	2300      	movs	r3, #0
 800a72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a72c:	f000 bc2f 	b.w	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a730:	f000 bc2d 	b.w	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a734:	4b59      	ldr	r3, [pc, #356]	@ (800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a738:	f000 bc29 	b.w	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a740:	f000 bc25 	b.w	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a744:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a748:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a74c:	430b      	orrs	r3, r1
 800a74e:	f040 80a7 	bne.w	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a752:	4b4e      	ldr	r3, [pc, #312]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a756:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a75a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a762:	d054      	beq.n	800a80e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a766:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a76a:	f200 808b 	bhi.w	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a770:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a774:	f000 8083 	beq.w	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a77a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a77e:	f200 8081 	bhi.w	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a784:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a788:	d02f      	beq.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a790:	d878      	bhi.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a794:	2b00      	cmp	r3, #0
 800a796:	d004      	beq.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a79e:	d012      	beq.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a7a0:	e070      	b.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7a2:	4b3a      	ldr	r3, [pc, #232]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7ae:	d107      	bne.n	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f000 feb5 	bl	800b524 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7be:	e3e6      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7c4:	e3e3      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7c6:	4b31      	ldr	r3, [pc, #196]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7d2:	d107      	bne.n	800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7d4:	f107 0318 	add.w	r3, r7, #24
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f000 fbfb 	bl	800afd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7e2:	e3d4      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e8:	e3d1      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7ea:	4b28      	ldr	r3, [pc, #160]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7f6:	d107      	bne.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7f8:	f107 030c 	add.w	r3, r7, #12
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f000 fd3d 	bl	800b27c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a806:	e3c2      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a808:	2300      	movs	r3, #0
 800a80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a80c:	e3bf      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a80e:	4b1f      	ldr	r3, [pc, #124]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a812:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a816:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a818:	4b1c      	ldr	r3, [pc, #112]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f003 0304 	and.w	r3, r3, #4
 800a820:	2b04      	cmp	r3, #4
 800a822:	d10c      	bne.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a826:	2b00      	cmp	r3, #0
 800a828:	d109      	bne.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a82a:	4b18      	ldr	r3, [pc, #96]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	08db      	lsrs	r3, r3, #3
 800a830:	f003 0303 	and.w	r3, r3, #3
 800a834:	4a16      	ldr	r2, [pc, #88]	@ (800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a836:	fa22 f303 	lsr.w	r3, r2, r3
 800a83a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a83c:	e01e      	b.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a83e:	4b13      	ldr	r3, [pc, #76]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a84a:	d106      	bne.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a84c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a84e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a852:	d102      	bne.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a854:	4b0f      	ldr	r3, [pc, #60]	@ (800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a856:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a858:	e010      	b.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a85a:	4b0c      	ldr	r3, [pc, #48]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a862:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a866:	d106      	bne.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a86a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a86e:	d102      	bne.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a870:	4b09      	ldr	r3, [pc, #36]	@ (800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a874:	e002      	b.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a876:	2300      	movs	r3, #0
 800a878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a87a:	e388      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a87c:	e387      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a87e:	4b07      	ldr	r3, [pc, #28]	@ (800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a882:	e384      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a884:	2300      	movs	r3, #0
 800a886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a888:	e381      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a88a:	bf00      	nop
 800a88c:	58024400 	.word	0x58024400
 800a890:	03d09000 	.word	0x03d09000
 800a894:	003d0900 	.word	0x003d0900
 800a898:	007a1200 	.word	0x007a1200
 800a89c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a8a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8a4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a8a8:	430b      	orrs	r3, r1
 800a8aa:	f040 809c 	bne.w	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a8ae:	4b9e      	ldr	r3, [pc, #632]	@ (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a8b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8b2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a8b6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a8be:	d054      	beq.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a8c6:	f200 808b 	bhi.w	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a8d0:	f000 8083 	beq.w	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a8da:	f200 8081 	bhi.w	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8e4:	d02f      	beq.n	800a946 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8ec:	d878      	bhi.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d004      	beq.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8fa:	d012      	beq.n	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a8fc:	e070      	b.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8fe:	4b8a      	ldr	r3, [pc, #552]	@ (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a906:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a90a:	d107      	bne.n	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a90c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a910:	4618      	mov	r0, r3
 800a912:	f000 fe07 	bl	800b524 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a91a:	e338      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a91c:	2300      	movs	r3, #0
 800a91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a920:	e335      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a922:	4b81      	ldr	r3, [pc, #516]	@ (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a92a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a92e:	d107      	bne.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a930:	f107 0318 	add.w	r3, r7, #24
 800a934:	4618      	mov	r0, r3
 800a936:	f000 fb4d 	bl	800afd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a93e:	e326      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a940:	2300      	movs	r3, #0
 800a942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a944:	e323      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a946:	4b78      	ldr	r3, [pc, #480]	@ (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a94e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a952:	d107      	bne.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a954:	f107 030c 	add.w	r3, r7, #12
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 fc8f 	bl	800b27c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a962:	e314      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a964:	2300      	movs	r3, #0
 800a966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a968:	e311      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a96a:	4b6f      	ldr	r3, [pc, #444]	@ (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a96c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a96e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a972:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a974:	4b6c      	ldr	r3, [pc, #432]	@ (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 0304 	and.w	r3, r3, #4
 800a97c:	2b04      	cmp	r3, #4
 800a97e:	d10c      	bne.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a982:	2b00      	cmp	r3, #0
 800a984:	d109      	bne.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a986:	4b68      	ldr	r3, [pc, #416]	@ (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	08db      	lsrs	r3, r3, #3
 800a98c:	f003 0303 	and.w	r3, r3, #3
 800a990:	4a66      	ldr	r2, [pc, #408]	@ (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a992:	fa22 f303 	lsr.w	r3, r2, r3
 800a996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a998:	e01e      	b.n	800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a99a:	4b63      	ldr	r3, [pc, #396]	@ (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9a6:	d106      	bne.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a9a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9ae:	d102      	bne.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a9b0:	4b5f      	ldr	r3, [pc, #380]	@ (800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9b4:	e010      	b.n	800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9b6:	4b5c      	ldr	r3, [pc, #368]	@ (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9c2:	d106      	bne.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a9c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9ca:	d102      	bne.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a9cc:	4b59      	ldr	r3, [pc, #356]	@ (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9d0:	e002      	b.n	800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a9d6:	e2da      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a9d8:	e2d9      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a9da:	4b57      	ldr	r3, [pc, #348]	@ (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a9dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9de:	e2d6      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9e4:	e2d3      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a9e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9ea:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a9ee:	430b      	orrs	r3, r1
 800a9f0:	f040 80a7 	bne.w	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a9f4:	4b4c      	ldr	r3, [pc, #304]	@ (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a9f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9f8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a9fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa04:	d055      	beq.n	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800aa06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa0c:	f200 8096 	bhi.w	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800aa10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa16:	f000 8084 	beq.w	800ab22 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800aa1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa20:	f200 808c 	bhi.w	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800aa24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa2a:	d030      	beq.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800aa2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa32:	f200 8083 	bhi.w	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800aa36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d004      	beq.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800aa3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa42:	d012      	beq.n	800aa6a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800aa44:	e07a      	b.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa46:	4b38      	ldr	r3, [pc, #224]	@ (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa52:	d107      	bne.n	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f000 fd63 	bl	800b524 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa62:	e294      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa64:	2300      	movs	r3, #0
 800aa66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa68:	e291      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa6a:	4b2f      	ldr	r3, [pc, #188]	@ (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa76:	d107      	bne.n	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa78:	f107 0318 	add.w	r3, r7, #24
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f000 faa9 	bl	800afd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa86:	e282      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa8c:	e27f      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa8e:	4b26      	ldr	r3, [pc, #152]	@ (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa9a:	d107      	bne.n	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa9c:	f107 030c 	add.w	r3, r7, #12
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 fbeb 	bl	800b27c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaaa:	e270      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aaac:	2300      	movs	r3, #0
 800aaae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aab0:	e26d      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aab2:	4b1d      	ldr	r3, [pc, #116]	@ (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aab6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aaba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aabc:	4b1a      	ldr	r3, [pc, #104]	@ (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f003 0304 	and.w	r3, r3, #4
 800aac4:	2b04      	cmp	r3, #4
 800aac6:	d10c      	bne.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800aac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d109      	bne.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aace:	4b16      	ldr	r3, [pc, #88]	@ (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	08db      	lsrs	r3, r3, #3
 800aad4:	f003 0303 	and.w	r3, r3, #3
 800aad8:	4a14      	ldr	r2, [pc, #80]	@ (800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800aada:	fa22 f303 	lsr.w	r3, r2, r3
 800aade:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aae0:	e01e      	b.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aae2:	4b11      	ldr	r3, [pc, #68]	@ (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aaee:	d106      	bne.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800aaf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aaf6:	d102      	bne.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aaf8:	4b0d      	ldr	r3, [pc, #52]	@ (800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800aafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aafc:	e010      	b.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aafe:	4b0a      	ldr	r3, [pc, #40]	@ (800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab0a:	d106      	bne.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ab0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab12:	d102      	bne.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab14:	4b07      	ldr	r3, [pc, #28]	@ (800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab18:	e002      	b.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ab1e:	e236      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ab20:	e235      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab22:	4b05      	ldr	r3, [pc, #20]	@ (800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ab24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab26:	e232      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ab28:	58024400 	.word	0x58024400
 800ab2c:	03d09000 	.word	0x03d09000
 800ab30:	003d0900 	.word	0x003d0900
 800ab34:	007a1200 	.word	0x007a1200
 800ab38:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab40:	e225      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ab42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab46:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ab4a:	430b      	orrs	r3, r1
 800ab4c:	f040 8085 	bne.w	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ab50:	4b9c      	ldr	r3, [pc, #624]	@ (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ab52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab54:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ab58:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ab5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab60:	d06b      	beq.n	800ac3a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800ab62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab68:	d874      	bhi.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ab6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab70:	d056      	beq.n	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800ab72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab78:	d86c      	bhi.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ab7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab80:	d03b      	beq.n	800abfa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800ab82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab88:	d864      	bhi.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ab8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab90:	d021      	beq.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ab92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab98:	d85c      	bhi.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ab9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d004      	beq.n	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800aba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aba6:	d004      	beq.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800aba8:	e054      	b.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800abaa:	f7fe fb75 	bl	8009298 <HAL_RCC_GetPCLK1Freq>
 800abae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abb0:	e1ed      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abb2:	4b84      	ldr	r3, [pc, #528]	@ (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abbe:	d107      	bne.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abc0:	f107 0318 	add.w	r3, r7, #24
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 fa05 	bl	800afd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abce:	e1de      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800abd0:	2300      	movs	r3, #0
 800abd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd4:	e1db      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abd6:	4b7b      	ldr	r3, [pc, #492]	@ (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abe2:	d107      	bne.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abe4:	f107 030c 	add.w	r3, r7, #12
 800abe8:	4618      	mov	r0, r3
 800abea:	f000 fb47 	bl	800b27c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abf2:	e1cc      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abf8:	e1c9      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800abfa:	4b72      	ldr	r3, [pc, #456]	@ (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f003 0304 	and.w	r3, r3, #4
 800ac02:	2b04      	cmp	r3, #4
 800ac04:	d109      	bne.n	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac06:	4b6f      	ldr	r3, [pc, #444]	@ (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	08db      	lsrs	r3, r3, #3
 800ac0c:	f003 0303 	and.w	r3, r3, #3
 800ac10:	4a6d      	ldr	r2, [pc, #436]	@ (800adc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ac12:	fa22 f303 	lsr.w	r3, r2, r3
 800ac16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac18:	e1b9      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac1e:	e1b6      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ac20:	4b68      	ldr	r3, [pc, #416]	@ (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac2c:	d102      	bne.n	800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800ac2e:	4b67      	ldr	r3, [pc, #412]	@ (800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ac30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac32:	e1ac      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac34:	2300      	movs	r3, #0
 800ac36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac38:	e1a9      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac3a:	4b62      	ldr	r3, [pc, #392]	@ (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac46:	d102      	bne.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800ac48:	4b61      	ldr	r3, [pc, #388]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ac4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac4c:	e19f      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac52:	e19c      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ac54:	2300      	movs	r3, #0
 800ac56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac58:	e199      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ac5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac5e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ac62:	430b      	orrs	r3, r1
 800ac64:	d173      	bne.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ac66:	4b57      	ldr	r3, [pc, #348]	@ (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ac68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ac6e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac76:	d02f      	beq.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800ac78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac7e:	d863      	bhi.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800ac80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d004      	beq.n	800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800ac86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac8c:	d012      	beq.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800ac8e:	e05b      	b.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac90:	4b4c      	ldr	r3, [pc, #304]	@ (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac9c:	d107      	bne.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac9e:	f107 0318 	add.w	r3, r7, #24
 800aca2:	4618      	mov	r0, r3
 800aca4:	f000 f996 	bl	800afd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acac:	e16f      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acae:	2300      	movs	r3, #0
 800acb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acb2:	e16c      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acb4:	4b43      	ldr	r3, [pc, #268]	@ (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800acbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acc0:	d107      	bne.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acc2:	f107 030c 	add.w	r3, r7, #12
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 fad8 	bl	800b27c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acd0:	e15d      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acd2:	2300      	movs	r3, #0
 800acd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acd6:	e15a      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acd8:	4b3a      	ldr	r3, [pc, #232]	@ (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800acda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acdc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ace0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ace2:	4b38      	ldr	r3, [pc, #224]	@ (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 0304 	and.w	r3, r3, #4
 800acea:	2b04      	cmp	r3, #4
 800acec:	d10c      	bne.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800acee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d109      	bne.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acf4:	4b33      	ldr	r3, [pc, #204]	@ (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	08db      	lsrs	r3, r3, #3
 800acfa:	f003 0303 	and.w	r3, r3, #3
 800acfe:	4a32      	ldr	r2, [pc, #200]	@ (800adc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ad00:	fa22 f303 	lsr.w	r3, r2, r3
 800ad04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad06:	e01e      	b.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad08:	4b2e      	ldr	r3, [pc, #184]	@ (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad14:	d106      	bne.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800ad16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad1c:	d102      	bne.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad1e:	4b2b      	ldr	r3, [pc, #172]	@ (800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ad20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad22:	e010      	b.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad24:	4b27      	ldr	r3, [pc, #156]	@ (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad30:	d106      	bne.n	800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800ad32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad38:	d102      	bne.n	800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad3a:	4b25      	ldr	r3, [pc, #148]	@ (800add0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ad3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad3e:	e002      	b.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ad44:	e123      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad46:	e122      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad4c:	e11f      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ad4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad52:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ad56:	430b      	orrs	r3, r1
 800ad58:	d13c      	bne.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ad5a:	4b1a      	ldr	r3, [pc, #104]	@ (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad62:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d004      	beq.n	800ad74 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800ad6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad70:	d012      	beq.n	800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800ad72:	e023      	b.n	800adbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad74:	4b13      	ldr	r3, [pc, #76]	@ (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad80:	d107      	bne.n	800ad92 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad86:	4618      	mov	r0, r3
 800ad88:	f000 fbcc 	bl	800b524 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad90:	e0fd      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad92:	2300      	movs	r3, #0
 800ad94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad96:	e0fa      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad98:	4b0a      	ldr	r3, [pc, #40]	@ (800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ada0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ada4:	d107      	bne.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ada6:	f107 0318 	add.w	r3, r7, #24
 800adaa:	4618      	mov	r0, r3
 800adac:	f000 f912 	bl	800afd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800adb0:	6a3b      	ldr	r3, [r7, #32]
 800adb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adb4:	e0eb      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adb6:	2300      	movs	r3, #0
 800adb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adba:	e0e8      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800adbc:	2300      	movs	r3, #0
 800adbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adc0:	e0e5      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800adc2:	bf00      	nop
 800adc4:	58024400 	.word	0x58024400
 800adc8:	03d09000 	.word	0x03d09000
 800adcc:	003d0900 	.word	0x003d0900
 800add0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800add4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800add8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800addc:	430b      	orrs	r3, r1
 800adde:	f040 8085 	bne.w	800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ade2:	4b6d      	ldr	r3, [pc, #436]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ade4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ade6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800adea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800adec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800adf2:	d06b      	beq.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800adf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800adfa:	d874      	bhi.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800adfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae02:	d056      	beq.n	800aeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800ae04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae0a:	d86c      	bhi.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ae0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae12:	d03b      	beq.n	800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800ae14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ae1a:	d864      	bhi.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae22:	d021      	beq.n	800ae68 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800ae24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae2a:	d85c      	bhi.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ae2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d004      	beq.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800ae32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae38:	d004      	beq.n	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800ae3a:	e054      	b.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ae3c:	f000 f8b4 	bl	800afa8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ae40:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae42:	e0a4      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae44:	4b54      	ldr	r3, [pc, #336]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae50:	d107      	bne.n	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae52:	f107 0318 	add.w	r3, r7, #24
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 f8bc 	bl	800afd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae60:	e095      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae62:	2300      	movs	r3, #0
 800ae64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae66:	e092      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae68:	4b4b      	ldr	r3, [pc, #300]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae74:	d107      	bne.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae76:	f107 030c 	add.w	r3, r7, #12
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f000 f9fe 	bl	800b27c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae84:	e083      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae86:	2300      	movs	r3, #0
 800ae88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae8a:	e080      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae8c:	4b42      	ldr	r3, [pc, #264]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 0304 	and.w	r3, r3, #4
 800ae94:	2b04      	cmp	r3, #4
 800ae96:	d109      	bne.n	800aeac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae98:	4b3f      	ldr	r3, [pc, #252]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	08db      	lsrs	r3, r3, #3
 800ae9e:	f003 0303 	and.w	r3, r3, #3
 800aea2:	4a3e      	ldr	r2, [pc, #248]	@ (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800aea4:	fa22 f303 	lsr.w	r3, r2, r3
 800aea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeaa:	e070      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeb0:	e06d      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aeb2:	4b39      	ldr	r3, [pc, #228]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aebe:	d102      	bne.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800aec0:	4b37      	ldr	r3, [pc, #220]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800aec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aec4:	e063      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aec6:	2300      	movs	r3, #0
 800aec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeca:	e060      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aecc:	4b32      	ldr	r3, [pc, #200]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aed4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aed8:	d102      	bne.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800aeda:	4b32      	ldr	r3, [pc, #200]	@ (800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800aedc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aede:	e056      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aee0:	2300      	movs	r3, #0
 800aee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aee4:	e053      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800aee6:	2300      	movs	r3, #0
 800aee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeea:	e050      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aeec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aef0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800aef4:	430b      	orrs	r3, r1
 800aef6:	d148      	bne.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800aef8:	4b27      	ldr	r3, [pc, #156]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aefa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aefc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800af00:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800af02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af08:	d02a      	beq.n	800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800af0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af10:	d838      	bhi.n	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800af12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af14:	2b00      	cmp	r3, #0
 800af16:	d004      	beq.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800af18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af1e:	d00d      	beq.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800af20:	e030      	b.n	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800af22:	4b1d      	ldr	r3, [pc, #116]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af2e:	d102      	bne.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800af30:	4b1c      	ldr	r3, [pc, #112]	@ (800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800af32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af34:	e02b      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af3a:	e028      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af3c:	4b16      	ldr	r3, [pc, #88]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af48:	d107      	bne.n	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 fae8 	bl	800b524 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af58:	e019      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af5a:	2300      	movs	r3, #0
 800af5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af5e:	e016      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af60:	4b0d      	ldr	r3, [pc, #52]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af6c:	d107      	bne.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af6e:	f107 0318 	add.w	r3, r7, #24
 800af72:	4618      	mov	r0, r3
 800af74:	f000 f82e 	bl	800afd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af7c:	e007      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af7e:	2300      	movs	r3, #0
 800af80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af82:	e004      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800af84:	2300      	movs	r3, #0
 800af86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af88:	e001      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800af8a:	2300      	movs	r3, #0
 800af8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800af8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800af90:	4618      	mov	r0, r3
 800af92:	3740      	adds	r7, #64	@ 0x40
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	58024400 	.word	0x58024400
 800af9c:	03d09000 	.word	0x03d09000
 800afa0:	003d0900 	.word	0x003d0900
 800afa4:	007a1200 	.word	0x007a1200

0800afa8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800afac:	f7fe f944 	bl	8009238 <HAL_RCC_GetHCLKFreq>
 800afb0:	4602      	mov	r2, r0
 800afb2:	4b06      	ldr	r3, [pc, #24]	@ (800afcc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	091b      	lsrs	r3, r3, #4
 800afb8:	f003 0307 	and.w	r3, r3, #7
 800afbc:	4904      	ldr	r1, [pc, #16]	@ (800afd0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800afbe:	5ccb      	ldrb	r3, [r1, r3]
 800afc0:	f003 031f 	and.w	r3, r3, #31
 800afc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800afc8:	4618      	mov	r0, r3
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	58024400 	.word	0x58024400
 800afd0:	08010394 	.word	0x08010394

0800afd4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b089      	sub	sp, #36	@ 0x24
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800afdc:	4ba1      	ldr	r3, [pc, #644]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afe0:	f003 0303 	and.w	r3, r3, #3
 800afe4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800afe6:	4b9f      	ldr	r3, [pc, #636]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afea:	0b1b      	lsrs	r3, r3, #12
 800afec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aff0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aff2:	4b9c      	ldr	r3, [pc, #624]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff6:	091b      	lsrs	r3, r3, #4
 800aff8:	f003 0301 	and.w	r3, r3, #1
 800affc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800affe:	4b99      	ldr	r3, [pc, #612]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b002:	08db      	lsrs	r3, r3, #3
 800b004:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b008:	693a      	ldr	r2, [r7, #16]
 800b00a:	fb02 f303 	mul.w	r3, r2, r3
 800b00e:	ee07 3a90 	vmov	s15, r3
 800b012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b016:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f000 8111 	beq.w	800b244 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	2b02      	cmp	r3, #2
 800b026:	f000 8083 	beq.w	800b130 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b02a:	69bb      	ldr	r3, [r7, #24]
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	f200 80a1 	bhi.w	800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d003      	beq.n	800b040 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d056      	beq.n	800b0ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b03e:	e099      	b.n	800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b040:	4b88      	ldr	r3, [pc, #544]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f003 0320 	and.w	r3, r3, #32
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d02d      	beq.n	800b0a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b04c:	4b85      	ldr	r3, [pc, #532]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	08db      	lsrs	r3, r3, #3
 800b052:	f003 0303 	and.w	r3, r3, #3
 800b056:	4a84      	ldr	r2, [pc, #528]	@ (800b268 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b058:	fa22 f303 	lsr.w	r3, r2, r3
 800b05c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	ee07 3a90 	vmov	s15, r3
 800b064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	ee07 3a90 	vmov	s15, r3
 800b06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b076:	4b7b      	ldr	r3, [pc, #492]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b07e:	ee07 3a90 	vmov	s15, r3
 800b082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b086:	ed97 6a03 	vldr	s12, [r7, #12]
 800b08a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b26c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b08e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b09a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b0a6:	e087      	b.n	800b1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	ee07 3a90 	vmov	s15, r3
 800b0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b270 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b0b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ba:	4b6a      	ldr	r3, [pc, #424]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0c2:	ee07 3a90 	vmov	s15, r3
 800b0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b26c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ea:	e065      	b.n	800b1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	ee07 3a90 	vmov	s15, r3
 800b0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0fe:	4b59      	ldr	r3, [pc, #356]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b106:	ee07 3a90 	vmov	s15, r3
 800b10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b10e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b112:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b26c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b11e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b12a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b12e:	e043      	b.n	800b1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	ee07 3a90 	vmov	s15, r3
 800b136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b13a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b142:	4b48      	ldr	r3, [pc, #288]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b14a:	ee07 3a90 	vmov	s15, r3
 800b14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b152:	ed97 6a03 	vldr	s12, [r7, #12]
 800b156:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b26c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b16e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b172:	e021      	b.n	800b1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	ee07 3a90 	vmov	s15, r3
 800b17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b17e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b186:	4b37      	ldr	r3, [pc, #220]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b18e:	ee07 3a90 	vmov	s15, r3
 800b192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b196:	ed97 6a03 	vldr	s12, [r7, #12]
 800b19a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b26c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b19e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b1b8:	4b2a      	ldr	r3, [pc, #168]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1bc:	0a5b      	lsrs	r3, r3, #9
 800b1be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1c2:	ee07 3a90 	vmov	s15, r3
 800b1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1de:	ee17 2a90 	vmov	r2, s15
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b1e6:	4b1f      	ldr	r3, [pc, #124]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ea:	0c1b      	lsrs	r3, r3, #16
 800b1ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1f0:	ee07 3a90 	vmov	s15, r3
 800b1f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b200:	edd7 6a07 	vldr	s13, [r7, #28]
 800b204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b20c:	ee17 2a90 	vmov	r2, s15
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b214:	4b13      	ldr	r3, [pc, #76]	@ (800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b218:	0e1b      	lsrs	r3, r3, #24
 800b21a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b21e:	ee07 3a90 	vmov	s15, r3
 800b222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b226:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b22a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b22e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b23a:	ee17 2a90 	vmov	r2, s15
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b242:	e008      	b.n	800b256 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	609a      	str	r2, [r3, #8]
}
 800b256:	bf00      	nop
 800b258:	3724      	adds	r7, #36	@ 0x24
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	58024400 	.word	0x58024400
 800b268:	03d09000 	.word	0x03d09000
 800b26c:	46000000 	.word	0x46000000
 800b270:	4c742400 	.word	0x4c742400
 800b274:	4a742400 	.word	0x4a742400
 800b278:	4af42400 	.word	0x4af42400

0800b27c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b089      	sub	sp, #36	@ 0x24
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b284:	4ba1      	ldr	r3, [pc, #644]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b288:	f003 0303 	and.w	r3, r3, #3
 800b28c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b28e:	4b9f      	ldr	r3, [pc, #636]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b292:	0d1b      	lsrs	r3, r3, #20
 800b294:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b298:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b29a:	4b9c      	ldr	r3, [pc, #624]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b29e:	0a1b      	lsrs	r3, r3, #8
 800b2a0:	f003 0301 	and.w	r3, r3, #1
 800b2a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b2a6:	4b99      	ldr	r3, [pc, #612]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2aa:	08db      	lsrs	r3, r3, #3
 800b2ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	fb02 f303 	mul.w	r3, r2, r3
 800b2b6:	ee07 3a90 	vmov	s15, r3
 800b2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f000 8111 	beq.w	800b4ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	f000 8083 	beq.w	800b3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	2b02      	cmp	r3, #2
 800b2d6:	f200 80a1 	bhi.w	800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d003      	beq.n	800b2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d056      	beq.n	800b394 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b2e6:	e099      	b.n	800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2e8:	4b88      	ldr	r3, [pc, #544]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f003 0320 	and.w	r3, r3, #32
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d02d      	beq.n	800b350 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2f4:	4b85      	ldr	r3, [pc, #532]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	08db      	lsrs	r3, r3, #3
 800b2fa:	f003 0303 	and.w	r3, r3, #3
 800b2fe:	4a84      	ldr	r2, [pc, #528]	@ (800b510 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b300:	fa22 f303 	lsr.w	r3, r2, r3
 800b304:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	ee07 3a90 	vmov	s15, r3
 800b30c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	ee07 3a90 	vmov	s15, r3
 800b316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b31a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b31e:	4b7b      	ldr	r3, [pc, #492]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b326:	ee07 3a90 	vmov	s15, r3
 800b32a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b32e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b332:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b514 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b33a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b33e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b34a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b34e:	e087      	b.n	800b460 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	ee07 3a90 	vmov	s15, r3
 800b356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b518 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b35e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b362:	4b6a      	ldr	r3, [pc, #424]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b36a:	ee07 3a90 	vmov	s15, r3
 800b36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b372:	ed97 6a03 	vldr	s12, [r7, #12]
 800b376:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b514 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b37a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b37e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b392:	e065      	b.n	800b460 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	ee07 3a90 	vmov	s15, r3
 800b39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b39e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b3a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3a6:	4b59      	ldr	r3, [pc, #356]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ae:	ee07 3a90 	vmov	s15, r3
 800b3b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b514 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3d6:	e043      	b.n	800b460 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	ee07 3a90 	vmov	s15, r3
 800b3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b520 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b3e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ea:	4b48      	ldr	r3, [pc, #288]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3f2:	ee07 3a90 	vmov	s15, r3
 800b3f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b514 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b40a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b40e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b412:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b41a:	e021      	b.n	800b460 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	ee07 3a90 	vmov	s15, r3
 800b422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b426:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b51c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b42a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b42e:	4b37      	ldr	r3, [pc, #220]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b436:	ee07 3a90 	vmov	s15, r3
 800b43a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b43e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b442:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b514 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b44a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b44e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b45a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b45e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b460:	4b2a      	ldr	r3, [pc, #168]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b464:	0a5b      	lsrs	r3, r3, #9
 800b466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b46a:	ee07 3a90 	vmov	s15, r3
 800b46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b472:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b476:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b47a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b47e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b486:	ee17 2a90 	vmov	r2, s15
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b48e:	4b1f      	ldr	r3, [pc, #124]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b492:	0c1b      	lsrs	r3, r3, #16
 800b494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b498:	ee07 3a90 	vmov	s15, r3
 800b49c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4b4:	ee17 2a90 	vmov	r2, s15
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b4bc:	4b13      	ldr	r3, [pc, #76]	@ (800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4c0:	0e1b      	lsrs	r3, r3, #24
 800b4c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4c6:	ee07 3a90 	vmov	s15, r3
 800b4ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4e2:	ee17 2a90 	vmov	r2, s15
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b4ea:	e008      	b.n	800b4fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	609a      	str	r2, [r3, #8]
}
 800b4fe:	bf00      	nop
 800b500:	3724      	adds	r7, #36	@ 0x24
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	58024400 	.word	0x58024400
 800b510:	03d09000 	.word	0x03d09000
 800b514:	46000000 	.word	0x46000000
 800b518:	4c742400 	.word	0x4c742400
 800b51c:	4a742400 	.word	0x4a742400
 800b520:	4af42400 	.word	0x4af42400

0800b524 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b524:	b480      	push	{r7}
 800b526:	b089      	sub	sp, #36	@ 0x24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b52c:	4ba0      	ldr	r3, [pc, #640]	@ (800b7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b530:	f003 0303 	and.w	r3, r3, #3
 800b534:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b536:	4b9e      	ldr	r3, [pc, #632]	@ (800b7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b53a:	091b      	lsrs	r3, r3, #4
 800b53c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b540:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b542:	4b9b      	ldr	r3, [pc, #620]	@ (800b7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b546:	f003 0301 	and.w	r3, r3, #1
 800b54a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b54c:	4b98      	ldr	r3, [pc, #608]	@ (800b7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b54e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b550:	08db      	lsrs	r3, r3, #3
 800b552:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b556:	693a      	ldr	r2, [r7, #16]
 800b558:	fb02 f303 	mul.w	r3, r2, r3
 800b55c:	ee07 3a90 	vmov	s15, r3
 800b560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b564:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	f000 8111 	beq.w	800b792 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	2b02      	cmp	r3, #2
 800b574:	f000 8083 	beq.w	800b67e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	f200 80a1 	bhi.w	800b6c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d003      	beq.n	800b58e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d056      	beq.n	800b63a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b58c:	e099      	b.n	800b6c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b58e:	4b88      	ldr	r3, [pc, #544]	@ (800b7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f003 0320 	and.w	r3, r3, #32
 800b596:	2b00      	cmp	r3, #0
 800b598:	d02d      	beq.n	800b5f6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b59a:	4b85      	ldr	r3, [pc, #532]	@ (800b7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	08db      	lsrs	r3, r3, #3
 800b5a0:	f003 0303 	and.w	r3, r3, #3
 800b5a4:	4a83      	ldr	r2, [pc, #524]	@ (800b7b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b5a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b5aa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	ee07 3a90 	vmov	s15, r3
 800b5b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	ee07 3a90 	vmov	s15, r3
 800b5bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5c4:	4b7a      	ldr	r3, [pc, #488]	@ (800b7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5cc:	ee07 3a90 	vmov	s15, r3
 800b5d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5d8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5f0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b5f4:	e087      	b.n	800b706 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	ee07 3a90 	vmov	s15, r3
 800b5fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b600:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b7bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b608:	4b69      	ldr	r3, [pc, #420]	@ (800b7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b60a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b60c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b610:	ee07 3a90 	vmov	s15, r3
 800b614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b618:	ed97 6a03 	vldr	s12, [r7, #12]
 800b61c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b620:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b624:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b628:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b62c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b630:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b634:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b638:	e065      	b.n	800b706 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	ee07 3a90 	vmov	s15, r3
 800b640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b644:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b64c:	4b58      	ldr	r3, [pc, #352]	@ (800b7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b64e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b654:	ee07 3a90 	vmov	s15, r3
 800b658:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b65c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b660:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b664:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b668:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b66c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b674:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b678:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b67c:	e043      	b.n	800b706 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	ee07 3a90 	vmov	s15, r3
 800b684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b688:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b7c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b68c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b690:	4b47      	ldr	r3, [pc, #284]	@ (800b7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b698:	ee07 3a90 	vmov	s15, r3
 800b69c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6a4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b6a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6c0:	e021      	b.n	800b706 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	ee07 3a90 	vmov	s15, r3
 800b6c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6cc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b7bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b6d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6d4:	4b36      	ldr	r3, [pc, #216]	@ (800b7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6dc:	ee07 3a90 	vmov	s15, r3
 800b6e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6e8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b6ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b700:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b704:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b706:	4b2a      	ldr	r3, [pc, #168]	@ (800b7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b70a:	0a5b      	lsrs	r3, r3, #9
 800b70c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b710:	ee07 3a90 	vmov	s15, r3
 800b714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b718:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b71c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b720:	edd7 6a07 	vldr	s13, [r7, #28]
 800b724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b72c:	ee17 2a90 	vmov	r2, s15
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b734:	4b1e      	ldr	r3, [pc, #120]	@ (800b7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b738:	0c1b      	lsrs	r3, r3, #16
 800b73a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b73e:	ee07 3a90 	vmov	s15, r3
 800b742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b746:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b74a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b74e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b75a:	ee17 2a90 	vmov	r2, s15
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b762:	4b13      	ldr	r3, [pc, #76]	@ (800b7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b766:	0e1b      	lsrs	r3, r3, #24
 800b768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b76c:	ee07 3a90 	vmov	s15, r3
 800b770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b774:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b778:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b77c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b788:	ee17 2a90 	vmov	r2, s15
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b790:	e008      	b.n	800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	609a      	str	r2, [r3, #8]
}
 800b7a4:	bf00      	nop
 800b7a6:	3724      	adds	r7, #36	@ 0x24
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr
 800b7b0:	58024400 	.word	0x58024400
 800b7b4:	03d09000 	.word	0x03d09000
 800b7b8:	46000000 	.word	0x46000000
 800b7bc:	4c742400 	.word	0x4c742400
 800b7c0:	4a742400 	.word	0x4a742400
 800b7c4:	4af42400 	.word	0x4af42400

0800b7c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b7d6:	4b53      	ldr	r3, [pc, #332]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b7d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7da:	f003 0303 	and.w	r3, r3, #3
 800b7de:	2b03      	cmp	r3, #3
 800b7e0:	d101      	bne.n	800b7e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e099      	b.n	800b91a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b7e6:	4b4f      	ldr	r3, [pc, #316]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a4e      	ldr	r2, [pc, #312]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b7ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b7f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7f2:	f7f7 f85b 	bl	80028ac <HAL_GetTick>
 800b7f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b7f8:	e008      	b.n	800b80c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b7fa:	f7f7 f857 	bl	80028ac <HAL_GetTick>
 800b7fe:	4602      	mov	r2, r0
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	1ad3      	subs	r3, r2, r3
 800b804:	2b02      	cmp	r3, #2
 800b806:	d901      	bls.n	800b80c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b808:	2303      	movs	r3, #3
 800b80a:	e086      	b.n	800b91a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b80c:	4b45      	ldr	r3, [pc, #276]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b814:	2b00      	cmp	r3, #0
 800b816:	d1f0      	bne.n	800b7fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b818:	4b42      	ldr	r3, [pc, #264]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b81a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b81c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	031b      	lsls	r3, r3, #12
 800b826:	493f      	ldr	r1, [pc, #252]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b828:	4313      	orrs	r3, r2
 800b82a:	628b      	str	r3, [r1, #40]	@ 0x28
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	3b01      	subs	r3, #1
 800b832:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	3b01      	subs	r3, #1
 800b83c:	025b      	lsls	r3, r3, #9
 800b83e:	b29b      	uxth	r3, r3
 800b840:	431a      	orrs	r2, r3
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	3b01      	subs	r3, #1
 800b848:	041b      	lsls	r3, r3, #16
 800b84a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b84e:	431a      	orrs	r2, r3
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	3b01      	subs	r3, #1
 800b856:	061b      	lsls	r3, r3, #24
 800b858:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b85c:	4931      	ldr	r1, [pc, #196]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b85e:	4313      	orrs	r3, r2
 800b860:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b862:	4b30      	ldr	r3, [pc, #192]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b866:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	695b      	ldr	r3, [r3, #20]
 800b86e:	492d      	ldr	r1, [pc, #180]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b870:	4313      	orrs	r3, r2
 800b872:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b874:	4b2b      	ldr	r3, [pc, #172]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b878:	f023 0220 	bic.w	r2, r3, #32
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	699b      	ldr	r3, [r3, #24]
 800b880:	4928      	ldr	r1, [pc, #160]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b882:	4313      	orrs	r3, r2
 800b884:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b886:	4b27      	ldr	r3, [pc, #156]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b88a:	4a26      	ldr	r2, [pc, #152]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b88c:	f023 0310 	bic.w	r3, r3, #16
 800b890:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b892:	4b24      	ldr	r3, [pc, #144]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b894:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b896:	4b24      	ldr	r3, [pc, #144]	@ (800b928 <RCCEx_PLL2_Config+0x160>)
 800b898:	4013      	ands	r3, r2
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	69d2      	ldr	r2, [r2, #28]
 800b89e:	00d2      	lsls	r2, r2, #3
 800b8a0:	4920      	ldr	r1, [pc, #128]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b8a6:	4b1f      	ldr	r3, [pc, #124]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b8a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8aa:	4a1e      	ldr	r2, [pc, #120]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b8ac:	f043 0310 	orr.w	r3, r3, #16
 800b8b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d106      	bne.n	800b8c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b8b8:	4b1a      	ldr	r3, [pc, #104]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b8ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8bc:	4a19      	ldr	r2, [pc, #100]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b8be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b8c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b8c4:	e00f      	b.n	800b8e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d106      	bne.n	800b8da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b8cc:	4b15      	ldr	r3, [pc, #84]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b8ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8d0:	4a14      	ldr	r2, [pc, #80]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b8d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b8d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b8d8:	e005      	b.n	800b8e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b8da:	4b12      	ldr	r3, [pc, #72]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b8dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8de:	4a11      	ldr	r2, [pc, #68]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b8e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b8e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b8e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4a0e      	ldr	r2, [pc, #56]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b8ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b8f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8f2:	f7f6 ffdb 	bl	80028ac <HAL_GetTick>
 800b8f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b8f8:	e008      	b.n	800b90c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b8fa:	f7f6 ffd7 	bl	80028ac <HAL_GetTick>
 800b8fe:	4602      	mov	r2, r0
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	2b02      	cmp	r3, #2
 800b906:	d901      	bls.n	800b90c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b908:	2303      	movs	r3, #3
 800b90a:	e006      	b.n	800b91a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b90c:	4b05      	ldr	r3, [pc, #20]	@ (800b924 <RCCEx_PLL2_Config+0x15c>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b914:	2b00      	cmp	r3, #0
 800b916:	d0f0      	beq.n	800b8fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b918:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	58024400 	.word	0x58024400
 800b928:	ffff0007 	.word	0xffff0007

0800b92c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b936:	2300      	movs	r3, #0
 800b938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b93a:	4b53      	ldr	r3, [pc, #332]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800b93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b93e:	f003 0303 	and.w	r3, r3, #3
 800b942:	2b03      	cmp	r3, #3
 800b944:	d101      	bne.n	800b94a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e099      	b.n	800ba7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b94a:	4b4f      	ldr	r3, [pc, #316]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4a4e      	ldr	r2, [pc, #312]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800b950:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b956:	f7f6 ffa9 	bl	80028ac <HAL_GetTick>
 800b95a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b95c:	e008      	b.n	800b970 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b95e:	f7f6 ffa5 	bl	80028ac <HAL_GetTick>
 800b962:	4602      	mov	r2, r0
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d901      	bls.n	800b970 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b96c:	2303      	movs	r3, #3
 800b96e:	e086      	b.n	800ba7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b970:	4b45      	ldr	r3, [pc, #276]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d1f0      	bne.n	800b95e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b97c:	4b42      	ldr	r3, [pc, #264]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800b97e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b980:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	051b      	lsls	r3, r3, #20
 800b98a:	493f      	ldr	r1, [pc, #252]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800b98c:	4313      	orrs	r3, r2
 800b98e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	3b01      	subs	r3, #1
 800b996:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	3b01      	subs	r3, #1
 800b9a0:	025b      	lsls	r3, r3, #9
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	431a      	orrs	r2, r3
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	041b      	lsls	r3, r3, #16
 800b9ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b9b2:	431a      	orrs	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	691b      	ldr	r3, [r3, #16]
 800b9b8:	3b01      	subs	r3, #1
 800b9ba:	061b      	lsls	r3, r3, #24
 800b9bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b9c0:	4931      	ldr	r1, [pc, #196]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b9c6:	4b30      	ldr	r3, [pc, #192]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800b9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	695b      	ldr	r3, [r3, #20]
 800b9d2:	492d      	ldr	r1, [pc, #180]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b9d8:	4b2b      	ldr	r3, [pc, #172]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800b9da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	699b      	ldr	r3, [r3, #24]
 800b9e4:	4928      	ldr	r1, [pc, #160]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b9ea:	4b27      	ldr	r3, [pc, #156]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800b9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ee:	4a26      	ldr	r2, [pc, #152]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800b9f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b9f6:	4b24      	ldr	r3, [pc, #144]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800b9f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b9fa:	4b24      	ldr	r3, [pc, #144]	@ (800ba8c <RCCEx_PLL3_Config+0x160>)
 800b9fc:	4013      	ands	r3, r2
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	69d2      	ldr	r2, [r2, #28]
 800ba02:	00d2      	lsls	r2, r2, #3
 800ba04:	4920      	ldr	r1, [pc, #128]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800ba06:	4313      	orrs	r3, r2
 800ba08:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ba0a:	4b1f      	ldr	r3, [pc, #124]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800ba0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba0e:	4a1e      	ldr	r2, [pc, #120]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800ba10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d106      	bne.n	800ba2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ba1c:	4b1a      	ldr	r3, [pc, #104]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800ba1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba20:	4a19      	ldr	r2, [pc, #100]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800ba22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ba26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ba28:	e00f      	b.n	800ba4a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d106      	bne.n	800ba3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ba30:	4b15      	ldr	r3, [pc, #84]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800ba32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba34:	4a14      	ldr	r2, [pc, #80]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800ba36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ba3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ba3c:	e005      	b.n	800ba4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ba3e:	4b12      	ldr	r3, [pc, #72]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800ba40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba42:	4a11      	ldr	r2, [pc, #68]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800ba44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ba48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ba4a:	4b0f      	ldr	r3, [pc, #60]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a0e      	ldr	r2, [pc, #56]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800ba50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba56:	f7f6 ff29 	bl	80028ac <HAL_GetTick>
 800ba5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba5c:	e008      	b.n	800ba70 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba5e:	f7f6 ff25 	bl	80028ac <HAL_GetTick>
 800ba62:	4602      	mov	r2, r0
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	1ad3      	subs	r3, r2, r3
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	d901      	bls.n	800ba70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba6c:	2303      	movs	r3, #3
 800ba6e:	e006      	b.n	800ba7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba70:	4b05      	ldr	r3, [pc, #20]	@ (800ba88 <RCCEx_PLL3_Config+0x15c>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d0f0      	beq.n	800ba5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ba7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3710      	adds	r7, #16
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	58024400 	.word	0x58024400
 800ba8c:	ffff0007 	.word	0xffff0007

0800ba90 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d101      	bne.n	800baa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e10f      	b.n	800bcc2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2200      	movs	r2, #0
 800baa6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a87      	ldr	r2, [pc, #540]	@ (800bccc <HAL_SPI_Init+0x23c>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d00f      	beq.n	800bad2 <HAL_SPI_Init+0x42>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a86      	ldr	r2, [pc, #536]	@ (800bcd0 <HAL_SPI_Init+0x240>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d00a      	beq.n	800bad2 <HAL_SPI_Init+0x42>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a84      	ldr	r2, [pc, #528]	@ (800bcd4 <HAL_SPI_Init+0x244>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d005      	beq.n	800bad2 <HAL_SPI_Init+0x42>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	2b0f      	cmp	r3, #15
 800bacc:	d901      	bls.n	800bad2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bace:	2301      	movs	r3, #1
 800bad0:	e0f7      	b.n	800bcc2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fbbc 	bl	800c250 <SPI_GetPacketSize>
 800bad8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4a7b      	ldr	r2, [pc, #492]	@ (800bccc <HAL_SPI_Init+0x23c>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d00c      	beq.n	800bafe <HAL_SPI_Init+0x6e>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a79      	ldr	r2, [pc, #484]	@ (800bcd0 <HAL_SPI_Init+0x240>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d007      	beq.n	800bafe <HAL_SPI_Init+0x6e>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a78      	ldr	r2, [pc, #480]	@ (800bcd4 <HAL_SPI_Init+0x244>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d002      	beq.n	800bafe <HAL_SPI_Init+0x6e>
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2b08      	cmp	r3, #8
 800bafc:	d811      	bhi.n	800bb22 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bb02:	4a72      	ldr	r2, [pc, #456]	@ (800bccc <HAL_SPI_Init+0x23c>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d009      	beq.n	800bb1c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a70      	ldr	r2, [pc, #448]	@ (800bcd0 <HAL_SPI_Init+0x240>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d004      	beq.n	800bb1c <HAL_SPI_Init+0x8c>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a6f      	ldr	r2, [pc, #444]	@ (800bcd4 <HAL_SPI_Init+0x244>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d104      	bne.n	800bb26 <HAL_SPI_Init+0x96>
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2b10      	cmp	r3, #16
 800bb20:	d901      	bls.n	800bb26 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bb22:	2301      	movs	r3, #1
 800bb24:	e0cd      	b.n	800bcc2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d106      	bne.n	800bb40 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f7f6 fb26 	bl	800218c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2202      	movs	r2, #2
 800bb44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f022 0201 	bic.w	r2, r2, #1
 800bb56:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bb62:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	699b      	ldr	r3, [r3, #24]
 800bb68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bb6c:	d119      	bne.n	800bba2 <HAL_SPI_Init+0x112>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bb76:	d103      	bne.n	800bb80 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d008      	beq.n	800bb92 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d10c      	bne.n	800bba2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bb8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb90:	d107      	bne.n	800bba2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bba0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00f      	beq.n	800bbce <HAL_SPI_Init+0x13e>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	2b06      	cmp	r3, #6
 800bbb4:	d90b      	bls.n	800bbce <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	430a      	orrs	r2, r1
 800bbca:	601a      	str	r2, [r3, #0]
 800bbcc:	e007      	b.n	800bbde <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bbdc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	69da      	ldr	r2, [r3, #28]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbe6:	431a      	orrs	r2, r3
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	431a      	orrs	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbf0:	ea42 0103 	orr.w	r1, r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	68da      	ldr	r2, [r3, #12]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	430a      	orrs	r2, r1
 800bbfe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc08:	431a      	orrs	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	431a      	orrs	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	691b      	ldr	r3, [r3, #16]
 800bc1a:	431a      	orrs	r2, r3
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	695b      	ldr	r3, [r3, #20]
 800bc20:	431a      	orrs	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a1b      	ldr	r3, [r3, #32]
 800bc26:	431a      	orrs	r2, r3
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	431a      	orrs	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc32:	431a      	orrs	r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	431a      	orrs	r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc3e:	ea42 0103 	orr.w	r1, r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	430a      	orrs	r2, r1
 800bc4c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d113      	bne.n	800bc7e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc68:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bc7c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f022 0201 	bic.w	r2, r2, #1
 800bc8c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00a      	beq.n	800bcb0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	430a      	orrs	r2, r1
 800bcae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3710      	adds	r7, #16
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	40013000 	.word	0x40013000
 800bcd0:	40003800 	.word	0x40003800
 800bcd4:	40003c00 	.word	0x40003c00

0800bcd8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b088      	sub	sp, #32
 800bcdc:	af02      	add	r7, sp, #8
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	603b      	str	r3, [r7, #0]
 800bce4:	4613      	mov	r3, r2
 800bce6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	3320      	adds	r3, #32
 800bcee:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bcf0:	f7f6 fddc 	bl	80028ac <HAL_GetTick>
 800bcf4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d001      	beq.n	800bd06 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800bd02:	2302      	movs	r3, #2
 800bd04:	e1d1      	b.n	800c0aa <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d002      	beq.n	800bd12 <HAL_SPI_Transmit+0x3a>
 800bd0c:	88fb      	ldrh	r3, [r7, #6]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d101      	bne.n	800bd16 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800bd12:	2301      	movs	r3, #1
 800bd14:	e1c9      	b.n	800c0aa <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d101      	bne.n	800bd24 <HAL_SPI_Transmit+0x4c>
 800bd20:	2302      	movs	r3, #2
 800bd22:	e1c2      	b.n	800c0aa <HAL_SPI_Transmit+0x3d2>
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2201      	movs	r2, #1
 800bd28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2203      	movs	r2, #3
 800bd30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2200      	movs	r2, #0
 800bd38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	88fa      	ldrh	r2, [r7, #6]
 800bd46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	88fa      	ldrh	r2, [r7, #6]
 800bd4e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2200      	movs	r2, #0
 800bd56:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2200      	movs	r2, #0
 800bd64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2200      	movs	r2, #0
 800bd72:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	689b      	ldr	r3, [r3, #8]
 800bd78:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bd7c:	d108      	bne.n	800bd90 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bd8c:	601a      	str	r2, [r3, #0]
 800bd8e:	e009      	b.n	800bda4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800bda2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	685a      	ldr	r2, [r3, #4]
 800bdaa:	4b96      	ldr	r3, [pc, #600]	@ (800c004 <HAL_SPI_Transmit+0x32c>)
 800bdac:	4013      	ands	r3, r2
 800bdae:	88f9      	ldrh	r1, [r7, #6]
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	6812      	ldr	r2, [r2, #0]
 800bdb4:	430b      	orrs	r3, r1
 800bdb6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f042 0201 	orr.w	r2, r2, #1
 800bdc6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bdd0:	d107      	bne.n	800bde2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bde0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	2b0f      	cmp	r3, #15
 800bde8:	d947      	bls.n	800be7a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bdea:	e03f      	b.n	800be6c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	695b      	ldr	r3, [r3, #20]
 800bdf2:	f003 0302 	and.w	r3, r3, #2
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	d114      	bne.n	800be24 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	6812      	ldr	r2, [r2, #0]
 800be04:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be0a:	1d1a      	adds	r2, r3, #4
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be16:	b29b      	uxth	r3, r3
 800be18:	3b01      	subs	r3, #1
 800be1a:	b29a      	uxth	r2, r3
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800be22:	e023      	b.n	800be6c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be24:	f7f6 fd42 	bl	80028ac <HAL_GetTick>
 800be28:	4602      	mov	r2, r0
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	1ad3      	subs	r3, r2, r3
 800be2e:	683a      	ldr	r2, [r7, #0]
 800be30:	429a      	cmp	r2, r3
 800be32:	d803      	bhi.n	800be3c <HAL_SPI_Transmit+0x164>
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be3a:	d102      	bne.n	800be42 <HAL_SPI_Transmit+0x16a>
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d114      	bne.n	800be6c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f000 f936 	bl	800c0b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2201      	movs	r2, #1
 800be5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800be68:	2303      	movs	r3, #3
 800be6a:	e11e      	b.n	800c0aa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be72:	b29b      	uxth	r3, r3
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1b9      	bne.n	800bdec <HAL_SPI_Transmit+0x114>
 800be78:	e0f1      	b.n	800c05e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	68db      	ldr	r3, [r3, #12]
 800be7e:	2b07      	cmp	r3, #7
 800be80:	f240 80e6 	bls.w	800c050 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800be84:	e05d      	b.n	800bf42 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	695b      	ldr	r3, [r3, #20]
 800be8c:	f003 0302 	and.w	r3, r3, #2
 800be90:	2b02      	cmp	r3, #2
 800be92:	d132      	bne.n	800befa <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d918      	bls.n	800bed2 <HAL_SPI_Transmit+0x1fa>
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d014      	beq.n	800bed2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6812      	ldr	r2, [r2, #0]
 800beb2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800beb8:	1d1a      	adds	r2, r3, #4
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	3b02      	subs	r3, #2
 800bec8:	b29a      	uxth	r2, r3
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bed0:	e037      	b.n	800bf42 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bed6:	881a      	ldrh	r2, [r3, #0]
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bee0:	1c9a      	adds	r2, r3, #2
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800beec:	b29b      	uxth	r3, r3
 800beee:	3b01      	subs	r3, #1
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bef8:	e023      	b.n	800bf42 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800befa:	f7f6 fcd7 	bl	80028ac <HAL_GetTick>
 800befe:	4602      	mov	r2, r0
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	1ad3      	subs	r3, r2, r3
 800bf04:	683a      	ldr	r2, [r7, #0]
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d803      	bhi.n	800bf12 <HAL_SPI_Transmit+0x23a>
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf10:	d102      	bne.n	800bf18 <HAL_SPI_Transmit+0x240>
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d114      	bne.n	800bf42 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f000 f8cb 	bl	800c0b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2201      	movs	r2, #1
 800bf32:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bf3e:	2303      	movs	r3, #3
 800bf40:	e0b3      	b.n	800c0aa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d19b      	bne.n	800be86 <HAL_SPI_Transmit+0x1ae>
 800bf4e:	e086      	b.n	800c05e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	695b      	ldr	r3, [r3, #20]
 800bf56:	f003 0302 	and.w	r3, r3, #2
 800bf5a:	2b02      	cmp	r3, #2
 800bf5c:	d154      	bne.n	800c008 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	2b03      	cmp	r3, #3
 800bf68:	d918      	bls.n	800bf9c <HAL_SPI_Transmit+0x2c4>
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf6e:	2b40      	cmp	r3, #64	@ 0x40
 800bf70:	d914      	bls.n	800bf9c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	6812      	ldr	r2, [r2, #0]
 800bf7c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf82:	1d1a      	adds	r2, r3, #4
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	3b04      	subs	r3, #4
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bf9a:	e059      	b.n	800c050 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d917      	bls.n	800bfd8 <HAL_SPI_Transmit+0x300>
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d013      	beq.n	800bfd8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfb4:	881a      	ldrh	r2, [r3, #0]
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfbe:	1c9a      	adds	r2, r3, #2
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	3b02      	subs	r3, #2
 800bfce:	b29a      	uxth	r2, r3
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bfd6:	e03b      	b.n	800c050 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	3320      	adds	r3, #32
 800bfe2:	7812      	ldrb	r2, [r2, #0]
 800bfe4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfea:	1c5a      	adds	r2, r3, #1
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	3b01      	subs	r3, #1
 800bffa:	b29a      	uxth	r2, r3
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c002:	e025      	b.n	800c050 <HAL_SPI_Transmit+0x378>
 800c004:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c008:	f7f6 fc50 	bl	80028ac <HAL_GetTick>
 800c00c:	4602      	mov	r2, r0
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	1ad3      	subs	r3, r2, r3
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	429a      	cmp	r2, r3
 800c016:	d803      	bhi.n	800c020 <HAL_SPI_Transmit+0x348>
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c01e:	d102      	bne.n	800c026 <HAL_SPI_Transmit+0x34e>
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d114      	bne.n	800c050 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c026:	68f8      	ldr	r0, [r7, #12]
 800c028:	f000 f844 	bl	800c0b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c032:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2201      	movs	r2, #1
 800c040:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2200      	movs	r2, #0
 800c048:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c04c:	2303      	movs	r3, #3
 800c04e:	e02c      	b.n	800c0aa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c056:	b29b      	uxth	r3, r3
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f47f af79 	bne.w	800bf50 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	2200      	movs	r2, #0
 800c066:	2108      	movs	r1, #8
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f000 f8c3 	bl	800c1f4 <SPI_WaitOnFlagUntilTimeout>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d007      	beq.n	800c084 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c07a:	f043 0220 	orr.w	r2, r3, #32
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c084:	68f8      	ldr	r0, [r7, #12]
 800c086:	f000 f815 	bl	800c0b4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2201      	movs	r2, #1
 800c08e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2200      	movs	r2, #0
 800c096:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d001      	beq.n	800c0a8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	e000      	b.n	800c0aa <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800c0a8:	2300      	movs	r3, #0
  }
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3718      	adds	r7, #24
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop

0800c0b4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	695b      	ldr	r3, [r3, #20]
 800c0c2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	699a      	ldr	r2, [r3, #24]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f042 0208 	orr.w	r2, r2, #8
 800c0d2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	699a      	ldr	r2, [r3, #24]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f042 0210 	orr.w	r2, r2, #16
 800c0e2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f022 0201 	bic.w	r2, r2, #1
 800c0f2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	6919      	ldr	r1, [r3, #16]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	4b3c      	ldr	r3, [pc, #240]	@ (800c1f0 <SPI_CloseTransfer+0x13c>)
 800c100:	400b      	ands	r3, r1
 800c102:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	689a      	ldr	r2, [r3, #8]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c112:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	2b04      	cmp	r3, #4
 800c11e:	d014      	beq.n	800c14a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f003 0320 	and.w	r3, r3, #32
 800c126:	2b00      	cmp	r3, #0
 800c128:	d00f      	beq.n	800c14a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c130:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	699a      	ldr	r2, [r3, #24]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f042 0220 	orr.w	r2, r2, #32
 800c148:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c150:	b2db      	uxtb	r3, r3
 800c152:	2b03      	cmp	r3, #3
 800c154:	d014      	beq.n	800c180 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d00f      	beq.n	800c180 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c166:	f043 0204 	orr.w	r2, r3, #4
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	699a      	ldr	r2, [r3, #24]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c17e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00f      	beq.n	800c1aa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c190:	f043 0201 	orr.w	r2, r3, #1
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	699a      	ldr	r2, [r3, #24]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c1a8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00f      	beq.n	800c1d4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1ba:	f043 0208 	orr.w	r2, r3, #8
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	699a      	ldr	r2, [r3, #24]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c1d2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c1e4:	bf00      	nop
 800c1e6:	3714      	adds	r7, #20
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr
 800c1f0:	fffffc90 	.word	0xfffffc90

0800c1f4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	603b      	str	r3, [r7, #0]
 800c200:	4613      	mov	r3, r2
 800c202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c204:	e010      	b.n	800c228 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c206:	f7f6 fb51 	bl	80028ac <HAL_GetTick>
 800c20a:	4602      	mov	r2, r0
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	1ad3      	subs	r3, r2, r3
 800c210:	683a      	ldr	r2, [r7, #0]
 800c212:	429a      	cmp	r2, r3
 800c214:	d803      	bhi.n	800c21e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c21c:	d102      	bne.n	800c224 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d101      	bne.n	800c228 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c224:	2303      	movs	r3, #3
 800c226:	e00f      	b.n	800c248 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	695a      	ldr	r2, [r3, #20]
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	4013      	ands	r3, r2
 800c232:	68ba      	ldr	r2, [r7, #8]
 800c234:	429a      	cmp	r2, r3
 800c236:	bf0c      	ite	eq
 800c238:	2301      	moveq	r3, #1
 800c23a:	2300      	movne	r3, #0
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	461a      	mov	r2, r3
 800c240:	79fb      	ldrb	r3, [r7, #7]
 800c242:	429a      	cmp	r2, r3
 800c244:	d0df      	beq.n	800c206 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c250:	b480      	push	{r7}
 800c252:	b085      	sub	sp, #20
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c25c:	095b      	lsrs	r3, r3, #5
 800c25e:	3301      	adds	r3, #1
 800c260:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	3301      	adds	r3, #1
 800c268:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	3307      	adds	r3, #7
 800c26e:	08db      	lsrs	r3, r3, #3
 800c270:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	fb02 f303 	mul.w	r3, r2, r3
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3714      	adds	r7, #20
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr

0800c286 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b082      	sub	sp, #8
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d101      	bne.n	800c298 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c294:	2301      	movs	r3, #1
 800c296:	e049      	b.n	800c32c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d106      	bne.n	800c2b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f7f5 fffb 	bl	80022a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2202      	movs	r2, #2
 800c2b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	3304      	adds	r3, #4
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	4610      	mov	r0, r2
 800c2c6:	f000 fe4f 	bl	800cf68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2201      	movs	r2, #1
 800c2de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2201      	movs	r2, #1
 800c306:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2201      	movs	r2, #1
 800c30e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2201      	movs	r2, #1
 800c316:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2201      	movs	r2, #1
 800c31e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2201      	movs	r2, #1
 800c326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c32a:	2300      	movs	r3, #0
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3708      	adds	r7, #8
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c342:	b2db      	uxtb	r3, r3
 800c344:	2b01      	cmp	r3, #1
 800c346:	d001      	beq.n	800c34c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c348:	2301      	movs	r3, #1
 800c34a:	e05e      	b.n	800c40a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2202      	movs	r2, #2
 800c350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	68da      	ldr	r2, [r3, #12]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f042 0201 	orr.w	r2, r2, #1
 800c362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a2b      	ldr	r2, [pc, #172]	@ (800c418 <HAL_TIM_Base_Start_IT+0xe4>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d02c      	beq.n	800c3c8 <HAL_TIM_Base_Start_IT+0x94>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c376:	d027      	beq.n	800c3c8 <HAL_TIM_Base_Start_IT+0x94>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a27      	ldr	r2, [pc, #156]	@ (800c41c <HAL_TIM_Base_Start_IT+0xe8>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d022      	beq.n	800c3c8 <HAL_TIM_Base_Start_IT+0x94>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4a26      	ldr	r2, [pc, #152]	@ (800c420 <HAL_TIM_Base_Start_IT+0xec>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d01d      	beq.n	800c3c8 <HAL_TIM_Base_Start_IT+0x94>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a24      	ldr	r2, [pc, #144]	@ (800c424 <HAL_TIM_Base_Start_IT+0xf0>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d018      	beq.n	800c3c8 <HAL_TIM_Base_Start_IT+0x94>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a23      	ldr	r2, [pc, #140]	@ (800c428 <HAL_TIM_Base_Start_IT+0xf4>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d013      	beq.n	800c3c8 <HAL_TIM_Base_Start_IT+0x94>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a21      	ldr	r2, [pc, #132]	@ (800c42c <HAL_TIM_Base_Start_IT+0xf8>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d00e      	beq.n	800c3c8 <HAL_TIM_Base_Start_IT+0x94>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a20      	ldr	r2, [pc, #128]	@ (800c430 <HAL_TIM_Base_Start_IT+0xfc>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d009      	beq.n	800c3c8 <HAL_TIM_Base_Start_IT+0x94>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4a1e      	ldr	r2, [pc, #120]	@ (800c434 <HAL_TIM_Base_Start_IT+0x100>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d004      	beq.n	800c3c8 <HAL_TIM_Base_Start_IT+0x94>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a1d      	ldr	r2, [pc, #116]	@ (800c438 <HAL_TIM_Base_Start_IT+0x104>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d115      	bne.n	800c3f4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	689a      	ldr	r2, [r3, #8]
 800c3ce:	4b1b      	ldr	r3, [pc, #108]	@ (800c43c <HAL_TIM_Base_Start_IT+0x108>)
 800c3d0:	4013      	ands	r3, r2
 800c3d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2b06      	cmp	r3, #6
 800c3d8:	d015      	beq.n	800c406 <HAL_TIM_Base_Start_IT+0xd2>
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3e0:	d011      	beq.n	800c406 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f042 0201 	orr.w	r2, r2, #1
 800c3f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3f2:	e008      	b.n	800c406 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f042 0201 	orr.w	r2, r2, #1
 800c402:	601a      	str	r2, [r3, #0]
 800c404:	e000      	b.n	800c408 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c406:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c408:	2300      	movs	r3, #0
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3714      	adds	r7, #20
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr
 800c416:	bf00      	nop
 800c418:	40010000 	.word	0x40010000
 800c41c:	40000400 	.word	0x40000400
 800c420:	40000800 	.word	0x40000800
 800c424:	40000c00 	.word	0x40000c00
 800c428:	40010400 	.word	0x40010400
 800c42c:	40001800 	.word	0x40001800
 800c430:	40014000 	.word	0x40014000
 800c434:	4000e000 	.word	0x4000e000
 800c438:	4000e400 	.word	0x4000e400
 800c43c:	00010007 	.word	0x00010007

0800c440 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d101      	bne.n	800c452 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800c44e:	2301      	movs	r3, #1
 800c450:	e049      	b.n	800c4e6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d106      	bne.n	800c46c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 f841 	bl	800c4ee <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2202      	movs	r2, #2
 800c470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	3304      	adds	r3, #4
 800c47c:	4619      	mov	r1, r3
 800c47e:	4610      	mov	r0, r2
 800c480:	f000 fd72 	bl	800cf68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c4e4:	2300      	movs	r3, #0
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3708      	adds	r7, #8
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800c4ee:	b480      	push	{r7}
 800c4f0:	b083      	sub	sp, #12
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800c4f6:	bf00      	nop
 800c4f8:	370c      	adds	r7, #12
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b082      	sub	sp, #8
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d101      	bne.n	800c514 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c510:	2301      	movs	r3, #1
 800c512:	e049      	b.n	800c5a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d106      	bne.n	800c52e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2200      	movs	r2, #0
 800c524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 f841 	bl	800c5b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2202      	movs	r2, #2
 800c532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	3304      	adds	r3, #4
 800c53e:	4619      	mov	r1, r3
 800c540:	4610      	mov	r0, r2
 800c542:	f000 fd11 	bl	800cf68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2201      	movs	r2, #1
 800c54a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2201      	movs	r2, #1
 800c552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2201      	movs	r2, #1
 800c55a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2201      	movs	r2, #1
 800c562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2201      	movs	r2, #1
 800c56a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2201      	movs	r2, #1
 800c572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2201      	movs	r2, #1
 800c57a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2201      	movs	r2, #1
 800c582:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2201      	movs	r2, #1
 800c58a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2201      	movs	r2, #1
 800c592:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2201      	movs	r2, #1
 800c59a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c5a6:	2300      	movs	r3, #0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3708      	adds	r7, #8
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c5b8:	bf00      	nop
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d109      	bne.n	800c5e8 <HAL_TIM_PWM_Start+0x24>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	bf14      	ite	ne
 800c5e0:	2301      	movne	r3, #1
 800c5e2:	2300      	moveq	r3, #0
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	e03c      	b.n	800c662 <HAL_TIM_PWM_Start+0x9e>
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	2b04      	cmp	r3, #4
 800c5ec:	d109      	bne.n	800c602 <HAL_TIM_PWM_Start+0x3e>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	bf14      	ite	ne
 800c5fa:	2301      	movne	r3, #1
 800c5fc:	2300      	moveq	r3, #0
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	e02f      	b.n	800c662 <HAL_TIM_PWM_Start+0x9e>
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	2b08      	cmp	r3, #8
 800c606:	d109      	bne.n	800c61c <HAL_TIM_PWM_Start+0x58>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	2b01      	cmp	r3, #1
 800c612:	bf14      	ite	ne
 800c614:	2301      	movne	r3, #1
 800c616:	2300      	moveq	r3, #0
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	e022      	b.n	800c662 <HAL_TIM_PWM_Start+0x9e>
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	2b0c      	cmp	r3, #12
 800c620:	d109      	bne.n	800c636 <HAL_TIM_PWM_Start+0x72>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	bf14      	ite	ne
 800c62e:	2301      	movne	r3, #1
 800c630:	2300      	moveq	r3, #0
 800c632:	b2db      	uxtb	r3, r3
 800c634:	e015      	b.n	800c662 <HAL_TIM_PWM_Start+0x9e>
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	2b10      	cmp	r3, #16
 800c63a:	d109      	bne.n	800c650 <HAL_TIM_PWM_Start+0x8c>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c642:	b2db      	uxtb	r3, r3
 800c644:	2b01      	cmp	r3, #1
 800c646:	bf14      	ite	ne
 800c648:	2301      	movne	r3, #1
 800c64a:	2300      	moveq	r3, #0
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	e008      	b.n	800c662 <HAL_TIM_PWM_Start+0x9e>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c656:	b2db      	uxtb	r3, r3
 800c658:	2b01      	cmp	r3, #1
 800c65a:	bf14      	ite	ne
 800c65c:	2301      	movne	r3, #1
 800c65e:	2300      	moveq	r3, #0
 800c660:	b2db      	uxtb	r3, r3
 800c662:	2b00      	cmp	r3, #0
 800c664:	d001      	beq.n	800c66a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c666:	2301      	movs	r3, #1
 800c668:	e0ab      	b.n	800c7c2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d104      	bne.n	800c67a <HAL_TIM_PWM_Start+0xb6>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2202      	movs	r2, #2
 800c674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c678:	e023      	b.n	800c6c2 <HAL_TIM_PWM_Start+0xfe>
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	2b04      	cmp	r3, #4
 800c67e:	d104      	bne.n	800c68a <HAL_TIM_PWM_Start+0xc6>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2202      	movs	r2, #2
 800c684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c688:	e01b      	b.n	800c6c2 <HAL_TIM_PWM_Start+0xfe>
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	2b08      	cmp	r3, #8
 800c68e:	d104      	bne.n	800c69a <HAL_TIM_PWM_Start+0xd6>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2202      	movs	r2, #2
 800c694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c698:	e013      	b.n	800c6c2 <HAL_TIM_PWM_Start+0xfe>
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	2b0c      	cmp	r3, #12
 800c69e:	d104      	bne.n	800c6aa <HAL_TIM_PWM_Start+0xe6>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2202      	movs	r2, #2
 800c6a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c6a8:	e00b      	b.n	800c6c2 <HAL_TIM_PWM_Start+0xfe>
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	2b10      	cmp	r3, #16
 800c6ae:	d104      	bne.n	800c6ba <HAL_TIM_PWM_Start+0xf6>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2202      	movs	r2, #2
 800c6b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c6b8:	e003      	b.n	800c6c2 <HAL_TIM_PWM_Start+0xfe>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2202      	movs	r2, #2
 800c6be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	6839      	ldr	r1, [r7, #0]
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f001 f86c 	bl	800d7a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4a3d      	ldr	r2, [pc, #244]	@ (800c7cc <HAL_TIM_PWM_Start+0x208>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d013      	beq.n	800c702 <HAL_TIM_PWM_Start+0x13e>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a3c      	ldr	r2, [pc, #240]	@ (800c7d0 <HAL_TIM_PWM_Start+0x20c>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d00e      	beq.n	800c702 <HAL_TIM_PWM_Start+0x13e>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4a3a      	ldr	r2, [pc, #232]	@ (800c7d4 <HAL_TIM_PWM_Start+0x210>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d009      	beq.n	800c702 <HAL_TIM_PWM_Start+0x13e>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4a39      	ldr	r2, [pc, #228]	@ (800c7d8 <HAL_TIM_PWM_Start+0x214>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d004      	beq.n	800c702 <HAL_TIM_PWM_Start+0x13e>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a37      	ldr	r2, [pc, #220]	@ (800c7dc <HAL_TIM_PWM_Start+0x218>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d101      	bne.n	800c706 <HAL_TIM_PWM_Start+0x142>
 800c702:	2301      	movs	r3, #1
 800c704:	e000      	b.n	800c708 <HAL_TIM_PWM_Start+0x144>
 800c706:	2300      	movs	r3, #0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d007      	beq.n	800c71c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c71a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a2a      	ldr	r2, [pc, #168]	@ (800c7cc <HAL_TIM_PWM_Start+0x208>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d02c      	beq.n	800c780 <HAL_TIM_PWM_Start+0x1bc>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c72e:	d027      	beq.n	800c780 <HAL_TIM_PWM_Start+0x1bc>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a2a      	ldr	r2, [pc, #168]	@ (800c7e0 <HAL_TIM_PWM_Start+0x21c>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d022      	beq.n	800c780 <HAL_TIM_PWM_Start+0x1bc>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a29      	ldr	r2, [pc, #164]	@ (800c7e4 <HAL_TIM_PWM_Start+0x220>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d01d      	beq.n	800c780 <HAL_TIM_PWM_Start+0x1bc>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a27      	ldr	r2, [pc, #156]	@ (800c7e8 <HAL_TIM_PWM_Start+0x224>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d018      	beq.n	800c780 <HAL_TIM_PWM_Start+0x1bc>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a1f      	ldr	r2, [pc, #124]	@ (800c7d0 <HAL_TIM_PWM_Start+0x20c>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d013      	beq.n	800c780 <HAL_TIM_PWM_Start+0x1bc>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a23      	ldr	r2, [pc, #140]	@ (800c7ec <HAL_TIM_PWM_Start+0x228>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d00e      	beq.n	800c780 <HAL_TIM_PWM_Start+0x1bc>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a1b      	ldr	r2, [pc, #108]	@ (800c7d4 <HAL_TIM_PWM_Start+0x210>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d009      	beq.n	800c780 <HAL_TIM_PWM_Start+0x1bc>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a1f      	ldr	r2, [pc, #124]	@ (800c7f0 <HAL_TIM_PWM_Start+0x22c>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d004      	beq.n	800c780 <HAL_TIM_PWM_Start+0x1bc>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a1e      	ldr	r2, [pc, #120]	@ (800c7f4 <HAL_TIM_PWM_Start+0x230>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d115      	bne.n	800c7ac <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	689a      	ldr	r2, [r3, #8]
 800c786:	4b1c      	ldr	r3, [pc, #112]	@ (800c7f8 <HAL_TIM_PWM_Start+0x234>)
 800c788:	4013      	ands	r3, r2
 800c78a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2b06      	cmp	r3, #6
 800c790:	d015      	beq.n	800c7be <HAL_TIM_PWM_Start+0x1fa>
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c798:	d011      	beq.n	800c7be <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f042 0201 	orr.w	r2, r2, #1
 800c7a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7aa:	e008      	b.n	800c7be <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f042 0201 	orr.w	r2, r2, #1
 800c7ba:	601a      	str	r2, [r3, #0]
 800c7bc:	e000      	b.n	800c7c0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7c0:	2300      	movs	r3, #0
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	40010000 	.word	0x40010000
 800c7d0:	40010400 	.word	0x40010400
 800c7d4:	40014000 	.word	0x40014000
 800c7d8:	40014400 	.word	0x40014400
 800c7dc:	40014800 	.word	0x40014800
 800c7e0:	40000400 	.word	0x40000400
 800c7e4:	40000800 	.word	0x40000800
 800c7e8:	40000c00 	.word	0x40000c00
 800c7ec:	40001800 	.word	0x40001800
 800c7f0:	4000e000 	.word	0x4000e000
 800c7f4:	4000e400 	.word	0x4000e400
 800c7f8:	00010007 	.word	0x00010007

0800c7fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b084      	sub	sp, #16
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	691b      	ldr	r3, [r3, #16]
 800c812:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	f003 0302 	and.w	r3, r3, #2
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d020      	beq.n	800c860 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f003 0302 	and.w	r3, r3, #2
 800c824:	2b00      	cmp	r3, #0
 800c826:	d01b      	beq.n	800c860 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f06f 0202 	mvn.w	r2, #2
 800c830:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2201      	movs	r2, #1
 800c836:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	699b      	ldr	r3, [r3, #24]
 800c83e:	f003 0303 	and.w	r3, r3, #3
 800c842:	2b00      	cmp	r3, #0
 800c844:	d003      	beq.n	800c84e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 fb70 	bl	800cf2c <HAL_TIM_IC_CaptureCallback>
 800c84c:	e005      	b.n	800c85a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 fb62 	bl	800cf18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 fb73 	bl	800cf40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	f003 0304 	and.w	r3, r3, #4
 800c866:	2b00      	cmp	r3, #0
 800c868:	d020      	beq.n	800c8ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f003 0304 	and.w	r3, r3, #4
 800c870:	2b00      	cmp	r3, #0
 800c872:	d01b      	beq.n	800c8ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f06f 0204 	mvn.w	r2, #4
 800c87c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2202      	movs	r2, #2
 800c882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	699b      	ldr	r3, [r3, #24]
 800c88a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d003      	beq.n	800c89a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f000 fb4a 	bl	800cf2c <HAL_TIM_IC_CaptureCallback>
 800c898:	e005      	b.n	800c8a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 fb3c 	bl	800cf18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 fb4d 	bl	800cf40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	f003 0308 	and.w	r3, r3, #8
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d020      	beq.n	800c8f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f003 0308 	and.w	r3, r3, #8
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d01b      	beq.n	800c8f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f06f 0208 	mvn.w	r2, #8
 800c8c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2204      	movs	r2, #4
 800c8ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	69db      	ldr	r3, [r3, #28]
 800c8d6:	f003 0303 	and.w	r3, r3, #3
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d003      	beq.n	800c8e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 fb24 	bl	800cf2c <HAL_TIM_IC_CaptureCallback>
 800c8e4:	e005      	b.n	800c8f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f000 fb16 	bl	800cf18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 fb27 	bl	800cf40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	f003 0310 	and.w	r3, r3, #16
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d020      	beq.n	800c944 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f003 0310 	and.w	r3, r3, #16
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d01b      	beq.n	800c944 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f06f 0210 	mvn.w	r2, #16
 800c914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2208      	movs	r2, #8
 800c91a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	69db      	ldr	r3, [r3, #28]
 800c922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c926:	2b00      	cmp	r3, #0
 800c928:	d003      	beq.n	800c932 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 fafe 	bl	800cf2c <HAL_TIM_IC_CaptureCallback>
 800c930:	e005      	b.n	800c93e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 faf0 	bl	800cf18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 fb01 	bl	800cf40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2200      	movs	r2, #0
 800c942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	f003 0301 	and.w	r3, r3, #1
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00c      	beq.n	800c968 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f003 0301 	and.w	r3, r3, #1
 800c954:	2b00      	cmp	r3, #0
 800c956:	d007      	beq.n	800c968 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f06f 0201 	mvn.w	r2, #1
 800c960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f7f4 ff9c 	bl	80018a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d104      	bne.n	800c97c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00c      	beq.n	800c996 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c982:	2b00      	cmp	r3, #0
 800c984:	d007      	beq.n	800c996 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c98e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 ffd5 	bl	800d940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00c      	beq.n	800c9ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d007      	beq.n	800c9ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c9b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f000 ffcd 	bl	800d954 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00c      	beq.n	800c9de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d007      	beq.n	800c9de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c9d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 fabb 	bl	800cf54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	f003 0320 	and.w	r3, r3, #32
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d00c      	beq.n	800ca02 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f003 0320 	and.w	r3, r3, #32
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d007      	beq.n	800ca02 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f06f 0220 	mvn.w	r2, #32
 800c9fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 ff95 	bl	800d92c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ca02:	bf00      	nop
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
	...

0800ca0c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b086      	sub	sp, #24
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d101      	bne.n	800ca2a <HAL_TIM_OC_ConfigChannel+0x1e>
 800ca26:	2302      	movs	r3, #2
 800ca28:	e066      	b.n	800caf8 <HAL_TIM_OC_ConfigChannel+0xec>
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2b14      	cmp	r3, #20
 800ca36:	d857      	bhi.n	800cae8 <HAL_TIM_OC_ConfigChannel+0xdc>
 800ca38:	a201      	add	r2, pc, #4	@ (adr r2, 800ca40 <HAL_TIM_OC_ConfigChannel+0x34>)
 800ca3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca3e:	bf00      	nop
 800ca40:	0800ca95 	.word	0x0800ca95
 800ca44:	0800cae9 	.word	0x0800cae9
 800ca48:	0800cae9 	.word	0x0800cae9
 800ca4c:	0800cae9 	.word	0x0800cae9
 800ca50:	0800caa3 	.word	0x0800caa3
 800ca54:	0800cae9 	.word	0x0800cae9
 800ca58:	0800cae9 	.word	0x0800cae9
 800ca5c:	0800cae9 	.word	0x0800cae9
 800ca60:	0800cab1 	.word	0x0800cab1
 800ca64:	0800cae9 	.word	0x0800cae9
 800ca68:	0800cae9 	.word	0x0800cae9
 800ca6c:	0800cae9 	.word	0x0800cae9
 800ca70:	0800cabf 	.word	0x0800cabf
 800ca74:	0800cae9 	.word	0x0800cae9
 800ca78:	0800cae9 	.word	0x0800cae9
 800ca7c:	0800cae9 	.word	0x0800cae9
 800ca80:	0800cacd 	.word	0x0800cacd
 800ca84:	0800cae9 	.word	0x0800cae9
 800ca88:	0800cae9 	.word	0x0800cae9
 800ca8c:	0800cae9 	.word	0x0800cae9
 800ca90:	0800cadb 	.word	0x0800cadb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	68b9      	ldr	r1, [r7, #8]
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f000 fb10 	bl	800d0c0 <TIM_OC1_SetConfig>
      break;
 800caa0:	e025      	b.n	800caee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	68b9      	ldr	r1, [r7, #8]
 800caa8:	4618      	mov	r0, r3
 800caaa:	f000 fb99 	bl	800d1e0 <TIM_OC2_SetConfig>
      break;
 800caae:	e01e      	b.n	800caee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	68b9      	ldr	r1, [r7, #8]
 800cab6:	4618      	mov	r0, r3
 800cab8:	f000 fc1c 	bl	800d2f4 <TIM_OC3_SetConfig>
      break;
 800cabc:	e017      	b.n	800caee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	68b9      	ldr	r1, [r7, #8]
 800cac4:	4618      	mov	r0, r3
 800cac6:	f000 fc9d 	bl	800d404 <TIM_OC4_SetConfig>
      break;
 800caca:	e010      	b.n	800caee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	68b9      	ldr	r1, [r7, #8]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f000 fd00 	bl	800d4d8 <TIM_OC5_SetConfig>
      break;
 800cad8:	e009      	b.n	800caee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	68b9      	ldr	r1, [r7, #8]
 800cae0:	4618      	mov	r0, r3
 800cae2:	f000 fd5d 	bl	800d5a0 <TIM_OC6_SetConfig>
      break;
 800cae6:	e002      	b.n	800caee <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800cae8:	2301      	movs	r3, #1
 800caea:	75fb      	strb	r3, [r7, #23]
      break;
 800caec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2200      	movs	r2, #0
 800caf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800caf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3718      	adds	r7, #24
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d101      	bne.n	800cb1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cb1a:	2302      	movs	r3, #2
 800cb1c:	e0ff      	b.n	800cd1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2201      	movs	r2, #1
 800cb22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2b14      	cmp	r3, #20
 800cb2a:	f200 80f0 	bhi.w	800cd0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cb2e:	a201      	add	r2, pc, #4	@ (adr r2, 800cb34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cb30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb34:	0800cb89 	.word	0x0800cb89
 800cb38:	0800cd0f 	.word	0x0800cd0f
 800cb3c:	0800cd0f 	.word	0x0800cd0f
 800cb40:	0800cd0f 	.word	0x0800cd0f
 800cb44:	0800cbc9 	.word	0x0800cbc9
 800cb48:	0800cd0f 	.word	0x0800cd0f
 800cb4c:	0800cd0f 	.word	0x0800cd0f
 800cb50:	0800cd0f 	.word	0x0800cd0f
 800cb54:	0800cc0b 	.word	0x0800cc0b
 800cb58:	0800cd0f 	.word	0x0800cd0f
 800cb5c:	0800cd0f 	.word	0x0800cd0f
 800cb60:	0800cd0f 	.word	0x0800cd0f
 800cb64:	0800cc4b 	.word	0x0800cc4b
 800cb68:	0800cd0f 	.word	0x0800cd0f
 800cb6c:	0800cd0f 	.word	0x0800cd0f
 800cb70:	0800cd0f 	.word	0x0800cd0f
 800cb74:	0800cc8d 	.word	0x0800cc8d
 800cb78:	0800cd0f 	.word	0x0800cd0f
 800cb7c:	0800cd0f 	.word	0x0800cd0f
 800cb80:	0800cd0f 	.word	0x0800cd0f
 800cb84:	0800cccd 	.word	0x0800cccd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	68b9      	ldr	r1, [r7, #8]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f000 fa96 	bl	800d0c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	699a      	ldr	r2, [r3, #24]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f042 0208 	orr.w	r2, r2, #8
 800cba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	699a      	ldr	r2, [r3, #24]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f022 0204 	bic.w	r2, r2, #4
 800cbb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	6999      	ldr	r1, [r3, #24]
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	691a      	ldr	r2, [r3, #16]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	430a      	orrs	r2, r1
 800cbc4:	619a      	str	r2, [r3, #24]
      break;
 800cbc6:	e0a5      	b.n	800cd14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	68b9      	ldr	r1, [r7, #8]
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f000 fb06 	bl	800d1e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	699a      	ldr	r2, [r3, #24]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cbe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	699a      	ldr	r2, [r3, #24]
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cbf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	6999      	ldr	r1, [r3, #24]
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	691b      	ldr	r3, [r3, #16]
 800cbfe:	021a      	lsls	r2, r3, #8
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	430a      	orrs	r2, r1
 800cc06:	619a      	str	r2, [r3, #24]
      break;
 800cc08:	e084      	b.n	800cd14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	68b9      	ldr	r1, [r7, #8]
 800cc10:	4618      	mov	r0, r3
 800cc12:	f000 fb6f 	bl	800d2f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	69da      	ldr	r2, [r3, #28]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f042 0208 	orr.w	r2, r2, #8
 800cc24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	69da      	ldr	r2, [r3, #28]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f022 0204 	bic.w	r2, r2, #4
 800cc34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	69d9      	ldr	r1, [r3, #28]
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	691a      	ldr	r2, [r3, #16]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	430a      	orrs	r2, r1
 800cc46:	61da      	str	r2, [r3, #28]
      break;
 800cc48:	e064      	b.n	800cd14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	68b9      	ldr	r1, [r7, #8]
 800cc50:	4618      	mov	r0, r3
 800cc52:	f000 fbd7 	bl	800d404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	69da      	ldr	r2, [r3, #28]
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cc64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	69da      	ldr	r2, [r3, #28]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cc74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	69d9      	ldr	r1, [r3, #28]
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	691b      	ldr	r3, [r3, #16]
 800cc80:	021a      	lsls	r2, r3, #8
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	430a      	orrs	r2, r1
 800cc88:	61da      	str	r2, [r3, #28]
      break;
 800cc8a:	e043      	b.n	800cd14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	68b9      	ldr	r1, [r7, #8]
 800cc92:	4618      	mov	r0, r3
 800cc94:	f000 fc20 	bl	800d4d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f042 0208 	orr.w	r2, r2, #8
 800cca6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f022 0204 	bic.w	r2, r2, #4
 800ccb6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	691a      	ldr	r2, [r3, #16]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	430a      	orrs	r2, r1
 800ccc8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ccca:	e023      	b.n	800cd14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	68b9      	ldr	r1, [r7, #8]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f000 fc64 	bl	800d5a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cce6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ccf6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	691b      	ldr	r3, [r3, #16]
 800cd02:	021a      	lsls	r2, r3, #8
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	430a      	orrs	r2, r1
 800cd0a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800cd0c:	e002      	b.n	800cd14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	75fb      	strb	r3, [r7, #23]
      break;
 800cd12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cd1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3718      	adds	r7, #24
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop

0800cd28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cd32:	2300      	movs	r3, #0
 800cd34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d101      	bne.n	800cd44 <HAL_TIM_ConfigClockSource+0x1c>
 800cd40:	2302      	movs	r3, #2
 800cd42:	e0dc      	b.n	800cefe <HAL_TIM_ConfigClockSource+0x1d6>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2201      	movs	r2, #1
 800cd48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2202      	movs	r2, #2
 800cd50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	689b      	ldr	r3, [r3, #8]
 800cd5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	4b6a      	ldr	r3, [pc, #424]	@ (800cf08 <HAL_TIM_ConfigClockSource+0x1e0>)
 800cd60:	4013      	ands	r3, r2
 800cd62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cd6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	68ba      	ldr	r2, [r7, #8]
 800cd72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4a64      	ldr	r2, [pc, #400]	@ (800cf0c <HAL_TIM_ConfigClockSource+0x1e4>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	f000 80a9 	beq.w	800ced2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd80:	4a62      	ldr	r2, [pc, #392]	@ (800cf0c <HAL_TIM_ConfigClockSource+0x1e4>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	f200 80ae 	bhi.w	800cee4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd88:	4a61      	ldr	r2, [pc, #388]	@ (800cf10 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	f000 80a1 	beq.w	800ced2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cd90:	4a5f      	ldr	r2, [pc, #380]	@ (800cf10 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	f200 80a6 	bhi.w	800cee4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cd98:	4a5e      	ldr	r2, [pc, #376]	@ (800cf14 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	f000 8099 	beq.w	800ced2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cda0:	4a5c      	ldr	r2, [pc, #368]	@ (800cf14 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	f200 809e 	bhi.w	800cee4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cda8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cdac:	f000 8091 	beq.w	800ced2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cdb0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cdb4:	f200 8096 	bhi.w	800cee4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cdb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cdbc:	f000 8089 	beq.w	800ced2 <HAL_TIM_ConfigClockSource+0x1aa>
 800cdc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cdc4:	f200 808e 	bhi.w	800cee4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cdc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cdcc:	d03e      	beq.n	800ce4c <HAL_TIM_ConfigClockSource+0x124>
 800cdce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cdd2:	f200 8087 	bhi.w	800cee4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cdd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cdda:	f000 8086 	beq.w	800ceea <HAL_TIM_ConfigClockSource+0x1c2>
 800cdde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cde2:	d87f      	bhi.n	800cee4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cde4:	2b70      	cmp	r3, #112	@ 0x70
 800cde6:	d01a      	beq.n	800ce1e <HAL_TIM_ConfigClockSource+0xf6>
 800cde8:	2b70      	cmp	r3, #112	@ 0x70
 800cdea:	d87b      	bhi.n	800cee4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cdec:	2b60      	cmp	r3, #96	@ 0x60
 800cdee:	d050      	beq.n	800ce92 <HAL_TIM_ConfigClockSource+0x16a>
 800cdf0:	2b60      	cmp	r3, #96	@ 0x60
 800cdf2:	d877      	bhi.n	800cee4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cdf4:	2b50      	cmp	r3, #80	@ 0x50
 800cdf6:	d03c      	beq.n	800ce72 <HAL_TIM_ConfigClockSource+0x14a>
 800cdf8:	2b50      	cmp	r3, #80	@ 0x50
 800cdfa:	d873      	bhi.n	800cee4 <HAL_TIM_ConfigClockSource+0x1bc>
 800cdfc:	2b40      	cmp	r3, #64	@ 0x40
 800cdfe:	d058      	beq.n	800ceb2 <HAL_TIM_ConfigClockSource+0x18a>
 800ce00:	2b40      	cmp	r3, #64	@ 0x40
 800ce02:	d86f      	bhi.n	800cee4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce04:	2b30      	cmp	r3, #48	@ 0x30
 800ce06:	d064      	beq.n	800ced2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ce08:	2b30      	cmp	r3, #48	@ 0x30
 800ce0a:	d86b      	bhi.n	800cee4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce0c:	2b20      	cmp	r3, #32
 800ce0e:	d060      	beq.n	800ced2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ce10:	2b20      	cmp	r3, #32
 800ce12:	d867      	bhi.n	800cee4 <HAL_TIM_ConfigClockSource+0x1bc>
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d05c      	beq.n	800ced2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ce18:	2b10      	cmp	r3, #16
 800ce1a:	d05a      	beq.n	800ced2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ce1c:	e062      	b.n	800cee4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ce2e:	f000 fc9b 	bl	800d768 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	689b      	ldr	r3, [r3, #8]
 800ce38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ce40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	68ba      	ldr	r2, [r7, #8]
 800ce48:	609a      	str	r2, [r3, #8]
      break;
 800ce4a:	e04f      	b.n	800ceec <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ce5c:	f000 fc84 	bl	800d768 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	689a      	ldr	r2, [r3, #8]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ce6e:	609a      	str	r2, [r3, #8]
      break;
 800ce70:	e03c      	b.n	800ceec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce7e:	461a      	mov	r2, r3
 800ce80:	f000 fbf4 	bl	800d66c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2150      	movs	r1, #80	@ 0x50
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f000 fc4e 	bl	800d72c <TIM_ITRx_SetConfig>
      break;
 800ce90:	e02c      	b.n	800ceec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce9e:	461a      	mov	r2, r3
 800cea0:	f000 fc13 	bl	800d6ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	2160      	movs	r1, #96	@ 0x60
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f000 fc3e 	bl	800d72c <TIM_ITRx_SetConfig>
      break;
 800ceb0:	e01c      	b.n	800ceec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cebe:	461a      	mov	r2, r3
 800cec0:	f000 fbd4 	bl	800d66c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2140      	movs	r1, #64	@ 0x40
 800ceca:	4618      	mov	r0, r3
 800cecc:	f000 fc2e 	bl	800d72c <TIM_ITRx_SetConfig>
      break;
 800ced0:	e00c      	b.n	800ceec <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4619      	mov	r1, r3
 800cedc:	4610      	mov	r0, r2
 800cede:	f000 fc25 	bl	800d72c <TIM_ITRx_SetConfig>
      break;
 800cee2:	e003      	b.n	800ceec <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cee4:	2301      	movs	r3, #1
 800cee6:	73fb      	strb	r3, [r7, #15]
      break;
 800cee8:	e000      	b.n	800ceec <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ceea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2201      	movs	r2, #1
 800cef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2200      	movs	r2, #0
 800cef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cefc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3710      	adds	r7, #16
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop
 800cf08:	ffceff88 	.word	0xffceff88
 800cf0c:	00100040 	.word	0x00100040
 800cf10:	00100030 	.word	0x00100030
 800cf14:	00100020 	.word	0x00100020

0800cf18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cf20:	bf00      	nop
 800cf22:	370c      	adds	r7, #12
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b083      	sub	sp, #12
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cf34:	bf00      	nop
 800cf36:	370c      	adds	r7, #12
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr

0800cf40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cf48:	bf00      	nop
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b083      	sub	sp, #12
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cf5c:	bf00      	nop
 800cf5e:	370c      	adds	r7, #12
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr

0800cf68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b085      	sub	sp, #20
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	4a47      	ldr	r2, [pc, #284]	@ (800d098 <TIM_Base_SetConfig+0x130>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d013      	beq.n	800cfa8 <TIM_Base_SetConfig+0x40>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf86:	d00f      	beq.n	800cfa8 <TIM_Base_SetConfig+0x40>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	4a44      	ldr	r2, [pc, #272]	@ (800d09c <TIM_Base_SetConfig+0x134>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d00b      	beq.n	800cfa8 <TIM_Base_SetConfig+0x40>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	4a43      	ldr	r2, [pc, #268]	@ (800d0a0 <TIM_Base_SetConfig+0x138>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d007      	beq.n	800cfa8 <TIM_Base_SetConfig+0x40>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	4a42      	ldr	r2, [pc, #264]	@ (800d0a4 <TIM_Base_SetConfig+0x13c>)
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d003      	beq.n	800cfa8 <TIM_Base_SetConfig+0x40>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	4a41      	ldr	r2, [pc, #260]	@ (800d0a8 <TIM_Base_SetConfig+0x140>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d108      	bne.n	800cfba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	68fa      	ldr	r2, [r7, #12]
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	4a36      	ldr	r2, [pc, #216]	@ (800d098 <TIM_Base_SetConfig+0x130>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d027      	beq.n	800d012 <TIM_Base_SetConfig+0xaa>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cfc8:	d023      	beq.n	800d012 <TIM_Base_SetConfig+0xaa>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	4a33      	ldr	r2, [pc, #204]	@ (800d09c <TIM_Base_SetConfig+0x134>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d01f      	beq.n	800d012 <TIM_Base_SetConfig+0xaa>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	4a32      	ldr	r2, [pc, #200]	@ (800d0a0 <TIM_Base_SetConfig+0x138>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d01b      	beq.n	800d012 <TIM_Base_SetConfig+0xaa>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4a31      	ldr	r2, [pc, #196]	@ (800d0a4 <TIM_Base_SetConfig+0x13c>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d017      	beq.n	800d012 <TIM_Base_SetConfig+0xaa>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	4a30      	ldr	r2, [pc, #192]	@ (800d0a8 <TIM_Base_SetConfig+0x140>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d013      	beq.n	800d012 <TIM_Base_SetConfig+0xaa>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	4a2f      	ldr	r2, [pc, #188]	@ (800d0ac <TIM_Base_SetConfig+0x144>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d00f      	beq.n	800d012 <TIM_Base_SetConfig+0xaa>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	4a2e      	ldr	r2, [pc, #184]	@ (800d0b0 <TIM_Base_SetConfig+0x148>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d00b      	beq.n	800d012 <TIM_Base_SetConfig+0xaa>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	4a2d      	ldr	r2, [pc, #180]	@ (800d0b4 <TIM_Base_SetConfig+0x14c>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d007      	beq.n	800d012 <TIM_Base_SetConfig+0xaa>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	4a2c      	ldr	r2, [pc, #176]	@ (800d0b8 <TIM_Base_SetConfig+0x150>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d003      	beq.n	800d012 <TIM_Base_SetConfig+0xaa>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	4a2b      	ldr	r2, [pc, #172]	@ (800d0bc <TIM_Base_SetConfig+0x154>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d108      	bne.n	800d024 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	4313      	orrs	r3, r2
 800d022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	695b      	ldr	r3, [r3, #20]
 800d02e:	4313      	orrs	r3, r2
 800d030:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	689a      	ldr	r2, [r3, #8]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	4a14      	ldr	r2, [pc, #80]	@ (800d098 <TIM_Base_SetConfig+0x130>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d00f      	beq.n	800d06a <TIM_Base_SetConfig+0x102>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	4a16      	ldr	r2, [pc, #88]	@ (800d0a8 <TIM_Base_SetConfig+0x140>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d00b      	beq.n	800d06a <TIM_Base_SetConfig+0x102>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	4a15      	ldr	r2, [pc, #84]	@ (800d0ac <TIM_Base_SetConfig+0x144>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d007      	beq.n	800d06a <TIM_Base_SetConfig+0x102>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	4a14      	ldr	r2, [pc, #80]	@ (800d0b0 <TIM_Base_SetConfig+0x148>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d003      	beq.n	800d06a <TIM_Base_SetConfig+0x102>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	4a13      	ldr	r2, [pc, #76]	@ (800d0b4 <TIM_Base_SetConfig+0x14c>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d103      	bne.n	800d072 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	691a      	ldr	r2, [r3, #16]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f043 0204 	orr.w	r2, r3, #4
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2201      	movs	r2, #1
 800d082:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	68fa      	ldr	r2, [r7, #12]
 800d088:	601a      	str	r2, [r3, #0]
}
 800d08a:	bf00      	nop
 800d08c:	3714      	adds	r7, #20
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr
 800d096:	bf00      	nop
 800d098:	40010000 	.word	0x40010000
 800d09c:	40000400 	.word	0x40000400
 800d0a0:	40000800 	.word	0x40000800
 800d0a4:	40000c00 	.word	0x40000c00
 800d0a8:	40010400 	.word	0x40010400
 800d0ac:	40014000 	.word	0x40014000
 800d0b0:	40014400 	.word	0x40014400
 800d0b4:	40014800 	.word	0x40014800
 800d0b8:	4000e000 	.word	0x4000e000
 800d0bc:	4000e400 	.word	0x4000e400

0800d0c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b087      	sub	sp, #28
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6a1b      	ldr	r3, [r3, #32]
 800d0ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6a1b      	ldr	r3, [r3, #32]
 800d0d4:	f023 0201 	bic.w	r2, r3, #1
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	699b      	ldr	r3, [r3, #24]
 800d0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	4b37      	ldr	r3, [pc, #220]	@ (800d1c8 <TIM_OC1_SetConfig+0x108>)
 800d0ec:	4013      	ands	r3, r2
 800d0ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f023 0303 	bic.w	r3, r3, #3
 800d0f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	68fa      	ldr	r2, [r7, #12]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	f023 0302 	bic.w	r3, r3, #2
 800d108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	689b      	ldr	r3, [r3, #8]
 800d10e:	697a      	ldr	r2, [r7, #20]
 800d110:	4313      	orrs	r3, r2
 800d112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	4a2d      	ldr	r2, [pc, #180]	@ (800d1cc <TIM_OC1_SetConfig+0x10c>)
 800d118:	4293      	cmp	r3, r2
 800d11a:	d00f      	beq.n	800d13c <TIM_OC1_SetConfig+0x7c>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	4a2c      	ldr	r2, [pc, #176]	@ (800d1d0 <TIM_OC1_SetConfig+0x110>)
 800d120:	4293      	cmp	r3, r2
 800d122:	d00b      	beq.n	800d13c <TIM_OC1_SetConfig+0x7c>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	4a2b      	ldr	r2, [pc, #172]	@ (800d1d4 <TIM_OC1_SetConfig+0x114>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d007      	beq.n	800d13c <TIM_OC1_SetConfig+0x7c>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	4a2a      	ldr	r2, [pc, #168]	@ (800d1d8 <TIM_OC1_SetConfig+0x118>)
 800d130:	4293      	cmp	r3, r2
 800d132:	d003      	beq.n	800d13c <TIM_OC1_SetConfig+0x7c>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	4a29      	ldr	r2, [pc, #164]	@ (800d1dc <TIM_OC1_SetConfig+0x11c>)
 800d138:	4293      	cmp	r3, r2
 800d13a:	d10c      	bne.n	800d156 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	f023 0308 	bic.w	r3, r3, #8
 800d142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	697a      	ldr	r2, [r7, #20]
 800d14a:	4313      	orrs	r3, r2
 800d14c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	f023 0304 	bic.w	r3, r3, #4
 800d154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	4a1c      	ldr	r2, [pc, #112]	@ (800d1cc <TIM_OC1_SetConfig+0x10c>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d00f      	beq.n	800d17e <TIM_OC1_SetConfig+0xbe>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	4a1b      	ldr	r2, [pc, #108]	@ (800d1d0 <TIM_OC1_SetConfig+0x110>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d00b      	beq.n	800d17e <TIM_OC1_SetConfig+0xbe>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	4a1a      	ldr	r2, [pc, #104]	@ (800d1d4 <TIM_OC1_SetConfig+0x114>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d007      	beq.n	800d17e <TIM_OC1_SetConfig+0xbe>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	4a19      	ldr	r2, [pc, #100]	@ (800d1d8 <TIM_OC1_SetConfig+0x118>)
 800d172:	4293      	cmp	r3, r2
 800d174:	d003      	beq.n	800d17e <TIM_OC1_SetConfig+0xbe>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	4a18      	ldr	r2, [pc, #96]	@ (800d1dc <TIM_OC1_SetConfig+0x11c>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d111      	bne.n	800d1a2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d18c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	695b      	ldr	r3, [r3, #20]
 800d192:	693a      	ldr	r2, [r7, #16]
 800d194:	4313      	orrs	r3, r2
 800d196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	699b      	ldr	r3, [r3, #24]
 800d19c:	693a      	ldr	r2, [r7, #16]
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	693a      	ldr	r2, [r7, #16]
 800d1a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	68fa      	ldr	r2, [r7, #12]
 800d1ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	685a      	ldr	r2, [r3, #4]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	697a      	ldr	r2, [r7, #20]
 800d1ba:	621a      	str	r2, [r3, #32]
}
 800d1bc:	bf00      	nop
 800d1be:	371c      	adds	r7, #28
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr
 800d1c8:	fffeff8f 	.word	0xfffeff8f
 800d1cc:	40010000 	.word	0x40010000
 800d1d0:	40010400 	.word	0x40010400
 800d1d4:	40014000 	.word	0x40014000
 800d1d8:	40014400 	.word	0x40014400
 800d1dc:	40014800 	.word	0x40014800

0800d1e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b087      	sub	sp, #28
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6a1b      	ldr	r3, [r3, #32]
 800d1ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6a1b      	ldr	r3, [r3, #32]
 800d1f4:	f023 0210 	bic.w	r2, r3, #16
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	699b      	ldr	r3, [r3, #24]
 800d206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	4b34      	ldr	r3, [pc, #208]	@ (800d2dc <TIM_OC2_SetConfig+0xfc>)
 800d20c:	4013      	ands	r3, r2
 800d20e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	021b      	lsls	r3, r3, #8
 800d21e:	68fa      	ldr	r2, [r7, #12]
 800d220:	4313      	orrs	r3, r2
 800d222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	f023 0320 	bic.w	r3, r3, #32
 800d22a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	011b      	lsls	r3, r3, #4
 800d232:	697a      	ldr	r2, [r7, #20]
 800d234:	4313      	orrs	r3, r2
 800d236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	4a29      	ldr	r2, [pc, #164]	@ (800d2e0 <TIM_OC2_SetConfig+0x100>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d003      	beq.n	800d248 <TIM_OC2_SetConfig+0x68>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	4a28      	ldr	r2, [pc, #160]	@ (800d2e4 <TIM_OC2_SetConfig+0x104>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d10d      	bne.n	800d264 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d24e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	011b      	lsls	r3, r3, #4
 800d256:	697a      	ldr	r2, [r7, #20]
 800d258:	4313      	orrs	r3, r2
 800d25a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d262:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	4a1e      	ldr	r2, [pc, #120]	@ (800d2e0 <TIM_OC2_SetConfig+0x100>)
 800d268:	4293      	cmp	r3, r2
 800d26a:	d00f      	beq.n	800d28c <TIM_OC2_SetConfig+0xac>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	4a1d      	ldr	r2, [pc, #116]	@ (800d2e4 <TIM_OC2_SetConfig+0x104>)
 800d270:	4293      	cmp	r3, r2
 800d272:	d00b      	beq.n	800d28c <TIM_OC2_SetConfig+0xac>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	4a1c      	ldr	r2, [pc, #112]	@ (800d2e8 <TIM_OC2_SetConfig+0x108>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d007      	beq.n	800d28c <TIM_OC2_SetConfig+0xac>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	4a1b      	ldr	r2, [pc, #108]	@ (800d2ec <TIM_OC2_SetConfig+0x10c>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d003      	beq.n	800d28c <TIM_OC2_SetConfig+0xac>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	4a1a      	ldr	r2, [pc, #104]	@ (800d2f0 <TIM_OC2_SetConfig+0x110>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d113      	bne.n	800d2b4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d29a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	695b      	ldr	r3, [r3, #20]
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	693a      	ldr	r2, [r7, #16]
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	699b      	ldr	r3, [r3, #24]
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	693a      	ldr	r2, [r7, #16]
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	693a      	ldr	r2, [r7, #16]
 800d2b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	68fa      	ldr	r2, [r7, #12]
 800d2be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	685a      	ldr	r2, [r3, #4]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	697a      	ldr	r2, [r7, #20]
 800d2cc:	621a      	str	r2, [r3, #32]
}
 800d2ce:	bf00      	nop
 800d2d0:	371c      	adds	r7, #28
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr
 800d2da:	bf00      	nop
 800d2dc:	feff8fff 	.word	0xfeff8fff
 800d2e0:	40010000 	.word	0x40010000
 800d2e4:	40010400 	.word	0x40010400
 800d2e8:	40014000 	.word	0x40014000
 800d2ec:	40014400 	.word	0x40014400
 800d2f0:	40014800 	.word	0x40014800

0800d2f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b087      	sub	sp, #28
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6a1b      	ldr	r3, [r3, #32]
 800d302:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6a1b      	ldr	r3, [r3, #32]
 800d308:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	69db      	ldr	r3, [r3, #28]
 800d31a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d31c:	68fa      	ldr	r2, [r7, #12]
 800d31e:	4b33      	ldr	r3, [pc, #204]	@ (800d3ec <TIM_OC3_SetConfig+0xf8>)
 800d320:	4013      	ands	r3, r2
 800d322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f023 0303 	bic.w	r3, r3, #3
 800d32a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	68fa      	ldr	r2, [r7, #12]
 800d332:	4313      	orrs	r3, r2
 800d334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d33c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	021b      	lsls	r3, r3, #8
 800d344:	697a      	ldr	r2, [r7, #20]
 800d346:	4313      	orrs	r3, r2
 800d348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	4a28      	ldr	r2, [pc, #160]	@ (800d3f0 <TIM_OC3_SetConfig+0xfc>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d003      	beq.n	800d35a <TIM_OC3_SetConfig+0x66>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	4a27      	ldr	r2, [pc, #156]	@ (800d3f4 <TIM_OC3_SetConfig+0x100>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d10d      	bne.n	800d376 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d360:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	68db      	ldr	r3, [r3, #12]
 800d366:	021b      	lsls	r3, r3, #8
 800d368:	697a      	ldr	r2, [r7, #20]
 800d36a:	4313      	orrs	r3, r2
 800d36c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	4a1d      	ldr	r2, [pc, #116]	@ (800d3f0 <TIM_OC3_SetConfig+0xfc>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d00f      	beq.n	800d39e <TIM_OC3_SetConfig+0xaa>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	4a1c      	ldr	r2, [pc, #112]	@ (800d3f4 <TIM_OC3_SetConfig+0x100>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d00b      	beq.n	800d39e <TIM_OC3_SetConfig+0xaa>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	4a1b      	ldr	r2, [pc, #108]	@ (800d3f8 <TIM_OC3_SetConfig+0x104>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d007      	beq.n	800d39e <TIM_OC3_SetConfig+0xaa>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	4a1a      	ldr	r2, [pc, #104]	@ (800d3fc <TIM_OC3_SetConfig+0x108>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d003      	beq.n	800d39e <TIM_OC3_SetConfig+0xaa>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4a19      	ldr	r2, [pc, #100]	@ (800d400 <TIM_OC3_SetConfig+0x10c>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d113      	bne.n	800d3c6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d3a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d3ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	695b      	ldr	r3, [r3, #20]
 800d3b2:	011b      	lsls	r3, r3, #4
 800d3b4:	693a      	ldr	r2, [r7, #16]
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	699b      	ldr	r3, [r3, #24]
 800d3be:	011b      	lsls	r3, r3, #4
 800d3c0:	693a      	ldr	r2, [r7, #16]
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	68fa      	ldr	r2, [r7, #12]
 800d3d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	685a      	ldr	r2, [r3, #4]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	697a      	ldr	r2, [r7, #20]
 800d3de:	621a      	str	r2, [r3, #32]
}
 800d3e0:	bf00      	nop
 800d3e2:	371c      	adds	r7, #28
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr
 800d3ec:	fffeff8f 	.word	0xfffeff8f
 800d3f0:	40010000 	.word	0x40010000
 800d3f4:	40010400 	.word	0x40010400
 800d3f8:	40014000 	.word	0x40014000
 800d3fc:	40014400 	.word	0x40014400
 800d400:	40014800 	.word	0x40014800

0800d404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d404:	b480      	push	{r7}
 800d406:	b087      	sub	sp, #28
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6a1b      	ldr	r3, [r3, #32]
 800d412:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6a1b      	ldr	r3, [r3, #32]
 800d418:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	69db      	ldr	r3, [r3, #28]
 800d42a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	4b24      	ldr	r3, [pc, #144]	@ (800d4c0 <TIM_OC4_SetConfig+0xbc>)
 800d430:	4013      	ands	r3, r2
 800d432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d43a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	021b      	lsls	r3, r3, #8
 800d442:	68fa      	ldr	r2, [r7, #12]
 800d444:	4313      	orrs	r3, r2
 800d446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d44e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	689b      	ldr	r3, [r3, #8]
 800d454:	031b      	lsls	r3, r3, #12
 800d456:	693a      	ldr	r2, [r7, #16]
 800d458:	4313      	orrs	r3, r2
 800d45a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	4a19      	ldr	r2, [pc, #100]	@ (800d4c4 <TIM_OC4_SetConfig+0xc0>)
 800d460:	4293      	cmp	r3, r2
 800d462:	d00f      	beq.n	800d484 <TIM_OC4_SetConfig+0x80>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	4a18      	ldr	r2, [pc, #96]	@ (800d4c8 <TIM_OC4_SetConfig+0xc4>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d00b      	beq.n	800d484 <TIM_OC4_SetConfig+0x80>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	4a17      	ldr	r2, [pc, #92]	@ (800d4cc <TIM_OC4_SetConfig+0xc8>)
 800d470:	4293      	cmp	r3, r2
 800d472:	d007      	beq.n	800d484 <TIM_OC4_SetConfig+0x80>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	4a16      	ldr	r2, [pc, #88]	@ (800d4d0 <TIM_OC4_SetConfig+0xcc>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	d003      	beq.n	800d484 <TIM_OC4_SetConfig+0x80>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	4a15      	ldr	r2, [pc, #84]	@ (800d4d4 <TIM_OC4_SetConfig+0xd0>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d109      	bne.n	800d498 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d48a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	695b      	ldr	r3, [r3, #20]
 800d490:	019b      	lsls	r3, r3, #6
 800d492:	697a      	ldr	r2, [r7, #20]
 800d494:	4313      	orrs	r3, r2
 800d496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	697a      	ldr	r2, [r7, #20]
 800d49c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	68fa      	ldr	r2, [r7, #12]
 800d4a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	685a      	ldr	r2, [r3, #4]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	693a      	ldr	r2, [r7, #16]
 800d4b0:	621a      	str	r2, [r3, #32]
}
 800d4b2:	bf00      	nop
 800d4b4:	371c      	adds	r7, #28
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr
 800d4be:	bf00      	nop
 800d4c0:	feff8fff 	.word	0xfeff8fff
 800d4c4:	40010000 	.word	0x40010000
 800d4c8:	40010400 	.word	0x40010400
 800d4cc:	40014000 	.word	0x40014000
 800d4d0:	40014400 	.word	0x40014400
 800d4d4:	40014800 	.word	0x40014800

0800d4d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b087      	sub	sp, #28
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6a1b      	ldr	r3, [r3, #32]
 800d4e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6a1b      	ldr	r3, [r3, #32]
 800d4ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d500:	68fa      	ldr	r2, [r7, #12]
 800d502:	4b21      	ldr	r3, [pc, #132]	@ (800d588 <TIM_OC5_SetConfig+0xb0>)
 800d504:	4013      	ands	r3, r2
 800d506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	68fa      	ldr	r2, [r7, #12]
 800d50e:	4313      	orrs	r3, r2
 800d510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d518:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	689b      	ldr	r3, [r3, #8]
 800d51e:	041b      	lsls	r3, r3, #16
 800d520:	693a      	ldr	r2, [r7, #16]
 800d522:	4313      	orrs	r3, r2
 800d524:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	4a18      	ldr	r2, [pc, #96]	@ (800d58c <TIM_OC5_SetConfig+0xb4>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d00f      	beq.n	800d54e <TIM_OC5_SetConfig+0x76>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	4a17      	ldr	r2, [pc, #92]	@ (800d590 <TIM_OC5_SetConfig+0xb8>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d00b      	beq.n	800d54e <TIM_OC5_SetConfig+0x76>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	4a16      	ldr	r2, [pc, #88]	@ (800d594 <TIM_OC5_SetConfig+0xbc>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d007      	beq.n	800d54e <TIM_OC5_SetConfig+0x76>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4a15      	ldr	r2, [pc, #84]	@ (800d598 <TIM_OC5_SetConfig+0xc0>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d003      	beq.n	800d54e <TIM_OC5_SetConfig+0x76>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	4a14      	ldr	r2, [pc, #80]	@ (800d59c <TIM_OC5_SetConfig+0xc4>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d109      	bne.n	800d562 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d554:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	695b      	ldr	r3, [r3, #20]
 800d55a:	021b      	lsls	r3, r3, #8
 800d55c:	697a      	ldr	r2, [r7, #20]
 800d55e:	4313      	orrs	r3, r2
 800d560:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	697a      	ldr	r2, [r7, #20]
 800d566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	685a      	ldr	r2, [r3, #4]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	693a      	ldr	r2, [r7, #16]
 800d57a:	621a      	str	r2, [r3, #32]
}
 800d57c:	bf00      	nop
 800d57e:	371c      	adds	r7, #28
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr
 800d588:	fffeff8f 	.word	0xfffeff8f
 800d58c:	40010000 	.word	0x40010000
 800d590:	40010400 	.word	0x40010400
 800d594:	40014000 	.word	0x40014000
 800d598:	40014400 	.word	0x40014400
 800d59c:	40014800 	.word	0x40014800

0800d5a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b087      	sub	sp, #28
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6a1b      	ldr	r3, [r3, #32]
 800d5ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6a1b      	ldr	r3, [r3, #32]
 800d5b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d5c8:	68fa      	ldr	r2, [r7, #12]
 800d5ca:	4b22      	ldr	r3, [pc, #136]	@ (800d654 <TIM_OC6_SetConfig+0xb4>)
 800d5cc:	4013      	ands	r3, r2
 800d5ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	021b      	lsls	r3, r3, #8
 800d5d6:	68fa      	ldr	r2, [r7, #12]
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d5e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	689b      	ldr	r3, [r3, #8]
 800d5e8:	051b      	lsls	r3, r3, #20
 800d5ea:	693a      	ldr	r2, [r7, #16]
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	4a19      	ldr	r2, [pc, #100]	@ (800d658 <TIM_OC6_SetConfig+0xb8>)
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	d00f      	beq.n	800d618 <TIM_OC6_SetConfig+0x78>
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	4a18      	ldr	r2, [pc, #96]	@ (800d65c <TIM_OC6_SetConfig+0xbc>)
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d00b      	beq.n	800d618 <TIM_OC6_SetConfig+0x78>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	4a17      	ldr	r2, [pc, #92]	@ (800d660 <TIM_OC6_SetConfig+0xc0>)
 800d604:	4293      	cmp	r3, r2
 800d606:	d007      	beq.n	800d618 <TIM_OC6_SetConfig+0x78>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	4a16      	ldr	r2, [pc, #88]	@ (800d664 <TIM_OC6_SetConfig+0xc4>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d003      	beq.n	800d618 <TIM_OC6_SetConfig+0x78>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	4a15      	ldr	r2, [pc, #84]	@ (800d668 <TIM_OC6_SetConfig+0xc8>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d109      	bne.n	800d62c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d61e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	695b      	ldr	r3, [r3, #20]
 800d624:	029b      	lsls	r3, r3, #10
 800d626:	697a      	ldr	r2, [r7, #20]
 800d628:	4313      	orrs	r3, r2
 800d62a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	697a      	ldr	r2, [r7, #20]
 800d630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	68fa      	ldr	r2, [r7, #12]
 800d636:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	685a      	ldr	r2, [r3, #4]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	693a      	ldr	r2, [r7, #16]
 800d644:	621a      	str	r2, [r3, #32]
}
 800d646:	bf00      	nop
 800d648:	371c      	adds	r7, #28
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	feff8fff 	.word	0xfeff8fff
 800d658:	40010000 	.word	0x40010000
 800d65c:	40010400 	.word	0x40010400
 800d660:	40014000 	.word	0x40014000
 800d664:	40014400 	.word	0x40014400
 800d668:	40014800 	.word	0x40014800

0800d66c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b087      	sub	sp, #28
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	6a1b      	ldr	r3, [r3, #32]
 800d67c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	6a1b      	ldr	r3, [r3, #32]
 800d682:	f023 0201 	bic.w	r2, r3, #1
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	699b      	ldr	r3, [r3, #24]
 800d68e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	011b      	lsls	r3, r3, #4
 800d69c:	693a      	ldr	r2, [r7, #16]
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	f023 030a 	bic.w	r3, r3, #10
 800d6a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d6aa:	697a      	ldr	r2, [r7, #20]
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	693a      	ldr	r2, [r7, #16]
 800d6b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	697a      	ldr	r2, [r7, #20]
 800d6bc:	621a      	str	r2, [r3, #32]
}
 800d6be:	bf00      	nop
 800d6c0:	371c      	adds	r7, #28
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr

0800d6ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d6ca:	b480      	push	{r7}
 800d6cc:	b087      	sub	sp, #28
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	60f8      	str	r0, [r7, #12]
 800d6d2:	60b9      	str	r1, [r7, #8]
 800d6d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	6a1b      	ldr	r3, [r3, #32]
 800d6da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6a1b      	ldr	r3, [r3, #32]
 800d6e0:	f023 0210 	bic.w	r2, r3, #16
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	699b      	ldr	r3, [r3, #24]
 800d6ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d6f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	031b      	lsls	r3, r3, #12
 800d6fa:	693a      	ldr	r2, [r7, #16]
 800d6fc:	4313      	orrs	r3, r2
 800d6fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d706:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	011b      	lsls	r3, r3, #4
 800d70c:	697a      	ldr	r2, [r7, #20]
 800d70e:	4313      	orrs	r3, r2
 800d710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	693a      	ldr	r2, [r7, #16]
 800d716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	697a      	ldr	r2, [r7, #20]
 800d71c:	621a      	str	r2, [r3, #32]
}
 800d71e:	bf00      	nop
 800d720:	371c      	adds	r7, #28
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
	...

0800d72c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b085      	sub	sp, #20
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	689b      	ldr	r3, [r3, #8]
 800d73a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d73c:	68fa      	ldr	r2, [r7, #12]
 800d73e:	4b09      	ldr	r3, [pc, #36]	@ (800d764 <TIM_ITRx_SetConfig+0x38>)
 800d740:	4013      	ands	r3, r2
 800d742:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d744:	683a      	ldr	r2, [r7, #0]
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	4313      	orrs	r3, r2
 800d74a:	f043 0307 	orr.w	r3, r3, #7
 800d74e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	68fa      	ldr	r2, [r7, #12]
 800d754:	609a      	str	r2, [r3, #8]
}
 800d756:	bf00      	nop
 800d758:	3714      	adds	r7, #20
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	4770      	bx	lr
 800d762:	bf00      	nop
 800d764:	ffcfff8f 	.word	0xffcfff8f

0800d768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d768:	b480      	push	{r7}
 800d76a:	b087      	sub	sp, #28
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	607a      	str	r2, [r7, #4]
 800d774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	689b      	ldr	r3, [r3, #8]
 800d77a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	021a      	lsls	r2, r3, #8
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	431a      	orrs	r2, r3
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	4313      	orrs	r3, r2
 800d790:	697a      	ldr	r2, [r7, #20]
 800d792:	4313      	orrs	r3, r2
 800d794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	697a      	ldr	r2, [r7, #20]
 800d79a:	609a      	str	r2, [r3, #8]
}
 800d79c:	bf00      	nop
 800d79e:	371c      	adds	r7, #28
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr

0800d7a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b087      	sub	sp, #28
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	60f8      	str	r0, [r7, #12]
 800d7b0:	60b9      	str	r1, [r7, #8]
 800d7b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	f003 031f 	and.w	r3, r3, #31
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d7c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	6a1a      	ldr	r2, [r3, #32]
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	43db      	mvns	r3, r3
 800d7ca:	401a      	ands	r2, r3
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	6a1a      	ldr	r2, [r3, #32]
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	f003 031f 	and.w	r3, r3, #31
 800d7da:	6879      	ldr	r1, [r7, #4]
 800d7dc:	fa01 f303 	lsl.w	r3, r1, r3
 800d7e0:	431a      	orrs	r2, r3
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	621a      	str	r2, [r3, #32]
}
 800d7e6:	bf00      	nop
 800d7e8:	371c      	adds	r7, #28
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr
	...

0800d7f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b085      	sub	sp, #20
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d804:	2b01      	cmp	r3, #1
 800d806:	d101      	bne.n	800d80c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d808:	2302      	movs	r3, #2
 800d80a:	e077      	b.n	800d8fc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2201      	movs	r2, #1
 800d810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2202      	movs	r2, #2
 800d818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	689b      	ldr	r3, [r3, #8]
 800d82a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	4a35      	ldr	r2, [pc, #212]	@ (800d908 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d004      	beq.n	800d840 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4a34      	ldr	r2, [pc, #208]	@ (800d90c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d108      	bne.n	800d852 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d846:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	68fa      	ldr	r2, [r7, #12]
 800d84e:	4313      	orrs	r3, r2
 800d850:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d858:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	68fa      	ldr	r2, [r7, #12]
 800d860:	4313      	orrs	r3, r2
 800d862:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	68fa      	ldr	r2, [r7, #12]
 800d86a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4a25      	ldr	r2, [pc, #148]	@ (800d908 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d02c      	beq.n	800d8d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d87e:	d027      	beq.n	800d8d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4a22      	ldr	r2, [pc, #136]	@ (800d910 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d022      	beq.n	800d8d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	4a21      	ldr	r2, [pc, #132]	@ (800d914 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d890:	4293      	cmp	r3, r2
 800d892:	d01d      	beq.n	800d8d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a1f      	ldr	r2, [pc, #124]	@ (800d918 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d018      	beq.n	800d8d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4a1a      	ldr	r2, [pc, #104]	@ (800d90c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	d013      	beq.n	800d8d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a1b      	ldr	r2, [pc, #108]	@ (800d91c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d00e      	beq.n	800d8d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4a1a      	ldr	r2, [pc, #104]	@ (800d920 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d009      	beq.n	800d8d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a18      	ldr	r2, [pc, #96]	@ (800d924 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d004      	beq.n	800d8d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4a17      	ldr	r2, [pc, #92]	@ (800d928 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d10c      	bne.n	800d8ea <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d8d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	689b      	ldr	r3, [r3, #8]
 800d8dc:	68ba      	ldr	r2, [r7, #8]
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	68ba      	ldr	r2, [r7, #8]
 800d8e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d8fa:	2300      	movs	r3, #0
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3714      	adds	r7, #20
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr
 800d908:	40010000 	.word	0x40010000
 800d90c:	40010400 	.word	0x40010400
 800d910:	40000400 	.word	0x40000400
 800d914:	40000800 	.word	0x40000800
 800d918:	40000c00 	.word	0x40000c00
 800d91c:	40001800 	.word	0x40001800
 800d920:	40014000 	.word	0x40014000
 800d924:	4000e000 	.word	0x4000e000
 800d928:	4000e400 	.word	0x4000e400

0800d92c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b083      	sub	sp, #12
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d934:	bf00      	nop
 800d936:	370c      	adds	r7, #12
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr

0800d940 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d940:	b480      	push	{r7}
 800d942:	b083      	sub	sp, #12
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d948:	bf00      	nop
 800d94a:	370c      	adds	r7, #12
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr

0800d954 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d954:	b480      	push	{r7}
 800d956:	b083      	sub	sp, #12
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d95c:	bf00      	nop
 800d95e:	370c      	adds	r7, #12
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr

0800d968 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800d968:	b480      	push	{r7}
 800d96a:	b083      	sub	sp, #12
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
    {
 800d970:	4a04      	ldr	r2, [pc, #16]	@ (800d984 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	601a      	str	r2, [r3, #0]
    }
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	4618      	mov	r0, r3
 800d97a:	370c      	adds	r7, #12
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr
 800d984:	08010414 	.word	0x08010414

0800d988 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
    }
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f7ff ffe9 	bl	800d968 <_ZN8touchgfx4FontD1Ev>
 800d996:	2114      	movs	r1, #20
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f001 fb6c 	bl	800f076 <_ZdlPvj>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3708      	adds	r7, #8
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800d9a8:	b590      	push	{r4, r7, lr}
 800d9aa:	b087      	sub	sp, #28
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800d9b4:	887b      	ldrh	r3, [r7, #2]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d101      	bne.n	800d9be <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	e010      	b.n	800d9e0 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	3308      	adds	r3, #8
 800d9cc:	681c      	ldr	r4, [r3, #0]
 800d9ce:	f107 030f 	add.w	r3, r7, #15
 800d9d2:	f107 0210 	add.w	r2, r7, #16
 800d9d6:	8879      	ldrh	r1, [r7, #2]
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	47a0      	blx	r4
 800d9dc:	6178      	str	r0, [r7, #20]
        return glyph;
 800d9de:	697b      	ldr	r3, [r7, #20]
    }
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	371c      	adds	r7, #28
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd90      	pop	{r4, r7, pc}

0800d9e8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	89db      	ldrh	r3, [r3, #14]
    }
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr

0800da00 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800da00:	b480      	push	{r7}
 800da02:	b083      	sub	sp, #12
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	8a1b      	ldrh	r3, [r3, #16]
    }
 800da0c:	4618      	mov	r0, r3
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	88db      	ldrh	r3, [r3, #6]
    }
 800da24:	4618      	mov	r0, r3
 800da26:	370c      	adds	r7, #12
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr

0800da30 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800da30:	b480      	push	{r7}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	889b      	ldrh	r3, [r3, #4]
    }
 800da3c:	4618      	mov	r0, r3
 800da3e:	370c      	adds	r7, #12
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800da48:	b480      	push	{r7}
 800da4a:	b083      	sub	sp, #12
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	7a9b      	ldrb	r3, [r3, #10]
 800da54:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800da58:	b2db      	uxtb	r3, r3
    }
 800da5a:	4618      	mov	r0, r3
 800da5c:	370c      	adds	r7, #12
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr

0800da66 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800da66:	b480      	push	{r7}
 800da68:	b083      	sub	sp, #12
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	7a9b      	ldrb	r3, [r3, #10]
 800da72:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800da76:	b2db      	uxtb	r3, r3
    }
 800da78:	4618      	mov	r0, r3
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
    {
        return false;
 800da8c:	2300      	movs	r3, #0
    }
 800da8e:	4618      	mov	r0, r3
 800da90:	370c      	adds	r7, #12
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr

0800da9a <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800da9a:	b480      	push	{r7}
 800da9c:	b083      	sub	sp, #12
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800daa2:	f04f 0300 	mov.w	r3, #0
 800daa6:	ee07 3a90 	vmov	s15, r3
    }
 800daaa:	eeb0 0a67 	vmov.f32	s0, s15
 800daae:	370c      	adds	r7, #12
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr

0800dab8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	4a05      	ldr	r2, [pc, #20]	@ (800dad8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	601a      	str	r2, [r3, #0]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4618      	mov	r0, r3
 800daca:	f7ff ff4d 	bl	800d968 <_ZN8touchgfx4FontD1Ev>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	4618      	mov	r0, r3
 800dad2:	3708      	adds	r7, #8
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}
 800dad8:	08010478 	.word	0x08010478

0800dadc <_ZN8touchgfx9ConstFontD0Ev>:
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f7ff ffe7 	bl	800dab8 <_ZN8touchgfx9ConstFontD1Ev>
 800daea:	211c      	movs	r1, #28
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f001 fac2 	bl	800f076 <_ZdlPvj>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	4618      	mov	r0, r3
 800daf6:	3708      	adds	r7, #8
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	4a05      	ldr	r2, [pc, #20]	@ (800db1c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	601a      	str	r2, [r3, #0]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	4618      	mov	r0, r3
 800db0e:	f7ff ffd3 	bl	800dab8 <_ZN8touchgfx9ConstFontD1Ev>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	4618      	mov	r0, r3
 800db16:	3708      	adds	r7, #8
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	080103ac 	.word	0x080103ac

0800db20 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f7ff ffe7 	bl	800dafc <_ZN8touchgfx13GeneratedFontD1Ev>
 800db2e:	212c      	movs	r1, #44	@ 0x2c
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f001 faa0 	bl	800f076 <_ZdlPvj>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	4618      	mov	r0, r3
 800db3a:	3708      	adds	r7, #8
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800db4c:	4618      	mov	r0, r3
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr

0800db58 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800db58:	b480      	push	{r7}
 800db5a:	b083      	sub	sp, #12
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800db64:	4618      	mov	r0, r3
 800db66:	370c      	adds	r7, #12
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <math.h>
#include <stddef.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800db70:	b580      	push	{r7, lr}
 800db72:	b08e      	sub	sp, #56	@ 0x38
 800db74:	af0a      	add	r7, sp, #40	@ 0x28
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	4611      	mov	r1, r2
 800db7c:	461a      	mov	r2, r3
 800db7e:	460b      	mov	r3, r1
 800db80:	80fb      	strh	r3, [r7, #6]
 800db82:	4613      	mov	r3, r2
 800db84:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800db86:	68f8      	ldr	r0, [r7, #12]
 800db88:	88b9      	ldrh	r1, [r7, #4]
 800db8a:	88fa      	ldrh	r2, [r7, #6]
 800db8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800db90:	9308      	str	r3, [sp, #32]
 800db92:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800db94:	9307      	str	r3, [sp, #28]
 800db96:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800db9a:	9306      	str	r3, [sp, #24]
 800db9c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dba0:	9305      	str	r3, [sp, #20]
 800dba2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dba6:	9304      	str	r3, [sp, #16]
 800dba8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dbac:	9303      	str	r3, [sp, #12]
 800dbae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dbb2:	9302      	str	r3, [sp, #8]
 800dbb4:	7f3b      	ldrb	r3, [r7, #28]
 800dbb6:	9301      	str	r3, [sp, #4]
 800dbb8:	8b3b      	ldrh	r3, [r7, #24]
 800dbba:	9300      	str	r3, [sp, #0]
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	68b9      	ldr	r1, [r7, #8]
 800dbc0:	f000 fcb4 	bl	800e52c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800dbc4:	4a09      	ldr	r2, [pc, #36]	@ (800dbec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbce:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dbd4:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dbda:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dbe0:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3710      	adds	r7, #16
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	080103ac 	.word	0x080103ac

0800dbf0 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b087      	sub	sp, #28
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	6039      	str	r1, [r7, #0]
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	617b      	str	r3, [r7, #20]
    uint32_t offset = dataOffset[0];
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	881b      	ldrh	r3, [r3, #0]
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	613b      	str	r3, [r7, #16]
    offset |= dataOffset[1] << 16;
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	3302      	adds	r3, #2
 800dc0a:	881b      	ldrh	r3, [r3, #0]
 800dc0c:	b29b      	uxth	r3, r3
 800dc0e:	041b      	lsls	r3, r3, #16
 800dc10:	461a      	mov	r2, r3
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	4313      	orrs	r3, r2
 800dc16:	613b      	str	r3, [r7, #16]

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	69db      	ldr	r3, [r3, #28]
 800dc1c:	60fb      	str	r3, [r7, #12]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	889b      	ldrh	r3, [r3, #4]
 800dc22:	0adb      	lsrs	r3, r3, #11
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	68fa      	ldr	r2, [r7, #12]
 800dc2a:	4413      	add	r3, r2
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	60bb      	str	r3, [r7, #8]
    return pixels + offset;
 800dc30:	68ba      	ldr	r2, [r7, #8]
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	4413      	add	r3, r2
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	371c      	adds	r7, #28
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800dc42:	b480      	push	{r7}
 800dc44:	b089      	sub	sp, #36	@ 0x24
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	60f8      	str	r0, [r7, #12]
 800dc4a:	460b      	mov	r3, r1
 800dc4c:	607a      	str	r2, [r7, #4]
 800dc4e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d003      	beq.n	800dc5e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	7b1b      	ldrb	r3, [r3, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d101      	bne.n	800dc62 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	e032      	b.n	800dcc8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6a1a      	ldr	r2, [r3, #32]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	7b5b      	ldrb	r3, [r3, #13]
 800dc6e:	b21b      	sxth	r3, r3
 800dc70:	021b      	lsls	r3, r3, #8
 800dc72:	b21b      	sxth	r3, r3
 800dc74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dc78:	b219      	sxth	r1, r3
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	7adb      	ldrb	r3, [r3, #11]
 800dc7e:	b21b      	sxth	r3, r3
 800dc80:	430b      	orrs	r3, r1
 800dc82:	b21b      	sxth	r3, r3
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	009b      	lsls	r3, r3, #2
 800dc88:	4413      	add	r3, r2
 800dc8a:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	7b1b      	ldrb	r3, [r3, #12]
 800dc90:	837b      	strh	r3, [r7, #26]
 800dc92:	e013      	b.n	800dcbc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7a>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	881b      	ldrh	r3, [r3, #0]
 800dc98:	897a      	ldrh	r2, [r7, #10]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d103      	bne.n	800dca6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x64>
        {
            return kerndata->distance;
 800dc9e:	69fb      	ldr	r3, [r7, #28]
 800dca0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800dca4:	e010      	b.n	800dcc8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	881b      	ldrh	r3, [r3, #0]
 800dcaa:	897a      	ldrh	r2, [r7, #10]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d309      	bcc.n	800dcc4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800dcb0:	8b7b      	ldrh	r3, [r7, #26]
 800dcb2:	3b01      	subs	r3, #1
 800dcb4:	837b      	strh	r3, [r7, #26]
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	3304      	adds	r3, #4
 800dcba:	61fb      	str	r3, [r7, #28]
 800dcbc:	8b7b      	ldrh	r3, [r7, #26]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1e8      	bne.n	800dc94 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
 800dcc2:	e000      	b.n	800dcc6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        {
            break;
 800dcc4:	bf00      	nop
        }
    }
    return 0;
 800dcc6:	2300      	movs	r3, #0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3724      	adds	r7, #36	@ 0x24
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr

0800dcd4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_consola_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_consola_20_4bpp();

touchgfx::GeneratedFont& getFont_consola_20_4bpp()
{
    static touchgfx::GeneratedFont consola_20_4bpp(glyphs_consola_20_4bpp, 12, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_consola_20_4bpp, kerning_consola_20_4bpp, 63, 0, 0, 0);
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	4801      	ldr	r0, [pc, #4]	@ (800dce0 <__tcf_0+0xc>)
 800dcda:	f7ff ff0f 	bl	800dafc <_ZN8touchgfx13GeneratedFontD1Ev>
 800dcde:	bd80      	pop	{r7, pc}
 800dce0:	24000690 	.word	0x24000690

0800dce4 <_Z23getFont_consola_20_4bppv>:
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b08e      	sub	sp, #56	@ 0x38
 800dce8:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont consola_20_4bpp(glyphs_consola_20_4bpp, 12, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_consola_20_4bpp, kerning_consola_20_4bpp, 63, 0, 0, 0);
 800dcea:	4b21      	ldr	r3, [pc, #132]	@ (800dd70 <_Z23getFont_consola_20_4bppv+0x8c>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f3bf 8f5b 	dmb	ish
 800dcf2:	f003 0301 	and.w	r3, r3, #1
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	bf0c      	ite	eq
 800dcfa:	2301      	moveq	r3, #1
 800dcfc:	2300      	movne	r3, #0
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d030      	beq.n	800dd66 <_Z23getFont_consola_20_4bppv+0x82>
 800dd04:	481a      	ldr	r0, [pc, #104]	@ (800dd70 <_Z23getFont_consola_20_4bppv+0x8c>)
 800dd06:	f001 f9b8 	bl	800f07a <__cxa_guard_acquire>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	bf14      	ite	ne
 800dd10:	2301      	movne	r3, #1
 800dd12:	2300      	moveq	r3, #0
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d025      	beq.n	800dd66 <_Z23getFont_consola_20_4bppv+0x82>
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	930c      	str	r3, [sp, #48]	@ 0x30
 800dd1e:	2300      	movs	r3, #0
 800dd20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd22:	2300      	movs	r3, #0
 800dd24:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd26:	233f      	movs	r3, #63	@ 0x3f
 800dd28:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd2a:	4b12      	ldr	r3, [pc, #72]	@ (800dd74 <_Z23getFont_consola_20_4bppv+0x90>)
 800dd2c:	9308      	str	r3, [sp, #32]
 800dd2e:	4b12      	ldr	r3, [pc, #72]	@ (800dd78 <_Z23getFont_consola_20_4bppv+0x94>)
 800dd30:	9307      	str	r3, [sp, #28]
 800dd32:	2300      	movs	r3, #0
 800dd34:	9306      	str	r3, [sp, #24]
 800dd36:	2300      	movs	r3, #0
 800dd38:	9305      	str	r3, [sp, #20]
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	9304      	str	r3, [sp, #16]
 800dd3e:	2304      	movs	r3, #4
 800dd40:	9303      	str	r3, [sp, #12]
 800dd42:	2300      	movs	r3, #0
 800dd44:	9302      	str	r3, [sp, #8]
 800dd46:	2300      	movs	r3, #0
 800dd48:	9301      	str	r3, [sp, #4]
 800dd4a:	2314      	movs	r3, #20
 800dd4c:	9300      	str	r3, [sp, #0]
 800dd4e:	2314      	movs	r3, #20
 800dd50:	220c      	movs	r2, #12
 800dd52:	490a      	ldr	r1, [pc, #40]	@ (800dd7c <_Z23getFont_consola_20_4bppv+0x98>)
 800dd54:	480a      	ldr	r0, [pc, #40]	@ (800dd80 <_Z23getFont_consola_20_4bppv+0x9c>)
 800dd56:	f7ff ff0b 	bl	800db70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800dd5a:	480a      	ldr	r0, [pc, #40]	@ (800dd84 <_Z23getFont_consola_20_4bppv+0xa0>)
 800dd5c:	f001 f9d8 	bl	800f110 <atexit>
 800dd60:	4803      	ldr	r0, [pc, #12]	@ (800dd70 <_Z23getFont_consola_20_4bppv+0x8c>)
 800dd62:	f001 f996 	bl	800f092 <__cxa_guard_release>
    return consola_20_4bpp;
 800dd66:	4b06      	ldr	r3, [pc, #24]	@ (800dd80 <_Z23getFont_consola_20_4bppv+0x9c>)
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	240006bc 	.word	0x240006bc
 800dd74:	08011810 	.word	0x08011810
 800dd78:	08011824 	.word	0x08011824
 800dd7c:	0801154c 	.word	0x0801154c
 800dd80:	24000690 	.word	0x24000690
 800dd84:	0800dcd5 	.word	0x0800dcd5

0800dd88 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_consolab_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_consolab_20_4bpp();

touchgfx::GeneratedFont& getFont_consolab_20_4bpp()
{
    static touchgfx::GeneratedFont consolab_20_4bpp(glyphs_consolab_20_4bpp, 25, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_consolab_20_4bpp, kerning_consolab_20_4bpp, 63, 0, 0, 0);
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	4801      	ldr	r0, [pc, #4]	@ (800dd94 <__tcf_0+0xc>)
 800dd8e:	f7ff feb5 	bl	800dafc <_ZN8touchgfx13GeneratedFontD1Ev>
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	240006c0 	.word	0x240006c0

0800dd98 <_Z24getFont_consolab_20_4bppv>:
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b08e      	sub	sp, #56	@ 0x38
 800dd9c:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont consolab_20_4bpp(glyphs_consolab_20_4bpp, 25, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_consolab_20_4bpp, kerning_consolab_20_4bpp, 63, 0, 0, 0);
 800dd9e:	4b21      	ldr	r3, [pc, #132]	@ (800de24 <_Z24getFont_consolab_20_4bppv+0x8c>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f3bf 8f5b 	dmb	ish
 800dda6:	f003 0301 	and.w	r3, r3, #1
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	bf0c      	ite	eq
 800ddae:	2301      	moveq	r3, #1
 800ddb0:	2300      	movne	r3, #0
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d030      	beq.n	800de1a <_Z24getFont_consolab_20_4bppv+0x82>
 800ddb8:	481a      	ldr	r0, [pc, #104]	@ (800de24 <_Z24getFont_consolab_20_4bppv+0x8c>)
 800ddba:	f001 f95e 	bl	800f07a <__cxa_guard_acquire>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	bf14      	ite	ne
 800ddc4:	2301      	movne	r3, #1
 800ddc6:	2300      	moveq	r3, #0
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d025      	beq.n	800de1a <_Z24getFont_consolab_20_4bppv+0x82>
 800ddce:	2300      	movs	r3, #0
 800ddd0:	930c      	str	r3, [sp, #48]	@ 0x30
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddda:	233f      	movs	r3, #63	@ 0x3f
 800dddc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddde:	4b12      	ldr	r3, [pc, #72]	@ (800de28 <_Z24getFont_consolab_20_4bppv+0x90>)
 800dde0:	9308      	str	r3, [sp, #32]
 800dde2:	4b12      	ldr	r3, [pc, #72]	@ (800de2c <_Z24getFont_consolab_20_4bppv+0x94>)
 800dde4:	9307      	str	r3, [sp, #28]
 800dde6:	2300      	movs	r3, #0
 800dde8:	9306      	str	r3, [sp, #24]
 800ddea:	2300      	movs	r3, #0
 800ddec:	9305      	str	r3, [sp, #20]
 800ddee:	2301      	movs	r3, #1
 800ddf0:	9304      	str	r3, [sp, #16]
 800ddf2:	2304      	movs	r3, #4
 800ddf4:	9303      	str	r3, [sp, #12]
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	9302      	str	r3, [sp, #8]
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	9301      	str	r3, [sp, #4]
 800ddfe:	2314      	movs	r3, #20
 800de00:	9300      	str	r3, [sp, #0]
 800de02:	2314      	movs	r3, #20
 800de04:	2219      	movs	r2, #25
 800de06:	490a      	ldr	r1, [pc, #40]	@ (800de30 <_Z24getFont_consolab_20_4bppv+0x98>)
 800de08:	480a      	ldr	r0, [pc, #40]	@ (800de34 <_Z24getFont_consolab_20_4bppv+0x9c>)
 800de0a:	f7ff feb1 	bl	800db70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800de0e:	480a      	ldr	r0, [pc, #40]	@ (800de38 <_Z24getFont_consolab_20_4bppv+0xa0>)
 800de10:	f001 f97e 	bl	800f110 <atexit>
 800de14:	4803      	ldr	r0, [pc, #12]	@ (800de24 <_Z24getFont_consolab_20_4bppv+0x8c>)
 800de16:	f001 f93c 	bl	800f092 <__cxa_guard_release>
    return consolab_20_4bpp;
 800de1a:	4b06      	ldr	r3, [pc, #24]	@ (800de34 <_Z24getFont_consolab_20_4bppv+0x9c>)
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	240006ec 	.word	0x240006ec
 800de28:	08011814 	.word	0x08011814
 800de2c:	08011828 	.word	0x08011828
 800de30:	080115f4 	.word	0x080115f4
 800de34:	240006c0 	.word	0x240006c0
 800de38:	0800dd89 	.word	0x0800dd89

0800de3c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_consolab_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_consolab_30_4bpp();

touchgfx::GeneratedFont& getFont_consolab_30_4bpp()
{
    static touchgfx::GeneratedFont consolab_30_4bpp(glyphs_consolab_30_4bpp, 11, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_consolab_30_4bpp, kerning_consolab_30_4bpp, 63, 0, 0, 0);
 800de3c:	b580      	push	{r7, lr}
 800de3e:	af00      	add	r7, sp, #0
 800de40:	4801      	ldr	r0, [pc, #4]	@ (800de48 <__tcf_0+0xc>)
 800de42:	f7ff fe5b 	bl	800dafc <_ZN8touchgfx13GeneratedFontD1Ev>
 800de46:	bd80      	pop	{r7, pc}
 800de48:	240006f0 	.word	0x240006f0

0800de4c <_Z24getFont_consolab_30_4bppv>:
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b08e      	sub	sp, #56	@ 0x38
 800de50:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont consolab_30_4bpp(glyphs_consolab_30_4bpp, 11, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_consolab_30_4bpp, kerning_consolab_30_4bpp, 63, 0, 0, 0);
 800de52:	4b21      	ldr	r3, [pc, #132]	@ (800ded8 <_Z24getFont_consolab_30_4bppv+0x8c>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f3bf 8f5b 	dmb	ish
 800de5a:	f003 0301 	and.w	r3, r3, #1
 800de5e:	2b00      	cmp	r3, #0
 800de60:	bf0c      	ite	eq
 800de62:	2301      	moveq	r3, #1
 800de64:	2300      	movne	r3, #0
 800de66:	b2db      	uxtb	r3, r3
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d030      	beq.n	800dece <_Z24getFont_consolab_30_4bppv+0x82>
 800de6c:	481a      	ldr	r0, [pc, #104]	@ (800ded8 <_Z24getFont_consolab_30_4bppv+0x8c>)
 800de6e:	f001 f904 	bl	800f07a <__cxa_guard_acquire>
 800de72:	4603      	mov	r3, r0
 800de74:	2b00      	cmp	r3, #0
 800de76:	bf14      	ite	ne
 800de78:	2301      	movne	r3, #1
 800de7a:	2300      	moveq	r3, #0
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d025      	beq.n	800dece <_Z24getFont_consolab_30_4bppv+0x82>
 800de82:	2300      	movs	r3, #0
 800de84:	930c      	str	r3, [sp, #48]	@ 0x30
 800de86:	2300      	movs	r3, #0
 800de88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de8a:	2300      	movs	r3, #0
 800de8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800de8e:	233f      	movs	r3, #63	@ 0x3f
 800de90:	9309      	str	r3, [sp, #36]	@ 0x24
 800de92:	4b12      	ldr	r3, [pc, #72]	@ (800dedc <_Z24getFont_consolab_30_4bppv+0x90>)
 800de94:	9308      	str	r3, [sp, #32]
 800de96:	4b12      	ldr	r3, [pc, #72]	@ (800dee0 <_Z24getFont_consolab_30_4bppv+0x94>)
 800de98:	9307      	str	r3, [sp, #28]
 800de9a:	2300      	movs	r3, #0
 800de9c:	9306      	str	r3, [sp, #24]
 800de9e:	2300      	movs	r3, #0
 800dea0:	9305      	str	r3, [sp, #20]
 800dea2:	2301      	movs	r3, #1
 800dea4:	9304      	str	r3, [sp, #16]
 800dea6:	2304      	movs	r3, #4
 800dea8:	9303      	str	r3, [sp, #12]
 800deaa:	2300      	movs	r3, #0
 800deac:	9302      	str	r3, [sp, #8]
 800deae:	2300      	movs	r3, #0
 800deb0:	9301      	str	r3, [sp, #4]
 800deb2:	231e      	movs	r3, #30
 800deb4:	9300      	str	r3, [sp, #0]
 800deb6:	231e      	movs	r3, #30
 800deb8:	220b      	movs	r2, #11
 800deba:	490a      	ldr	r1, [pc, #40]	@ (800dee4 <_Z24getFont_consolab_30_4bppv+0x98>)
 800debc:	480a      	ldr	r0, [pc, #40]	@ (800dee8 <_Z24getFont_consolab_30_4bppv+0x9c>)
 800debe:	f7ff fe57 	bl	800db70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800dec2:	480a      	ldr	r0, [pc, #40]	@ (800deec <_Z24getFont_consolab_30_4bppv+0xa0>)
 800dec4:	f001 f924 	bl	800f110 <atexit>
 800dec8:	4803      	ldr	r0, [pc, #12]	@ (800ded8 <_Z24getFont_consolab_30_4bppv+0x8c>)
 800deca:	f001 f8e2 	bl	800f092 <__cxa_guard_release>
    return consolab_30_4bpp;
 800dece:	4b06      	ldr	r3, [pc, #24]	@ (800dee8 <_Z24getFont_consolab_30_4bppv+0x9c>)
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	2400071c 	.word	0x2400071c
 800dedc:	08011818 	.word	0x08011818
 800dee0:	0801182c 	.word	0x0801182c
 800dee4:	08011754 	.word	0x08011754
 800dee8:	240006f0 	.word	0x240006f0
 800deec:	0800de3d 	.word	0x0800de3d

0800def0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800def0:	b580      	push	{r7, lr}
 800def2:	af00      	add	r7, sp, #0
 800def4:	4801      	ldr	r0, [pc, #4]	@ (800defc <__tcf_0+0xc>)
 800def6:	f7ff fe01 	bl	800dafc <_ZN8touchgfx13GeneratedFontD1Ev>
 800defa:	bd80      	pop	{r7, pc}
 800defc:	24000720 	.word	0x24000720

0800df00 <_Z23getFont_verdana_10_4bppv>:
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b08e      	sub	sp, #56	@ 0x38
 800df04:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800df06:	4b21      	ldr	r3, [pc, #132]	@ (800df8c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f3bf 8f5b 	dmb	ish
 800df0e:	f003 0301 	and.w	r3, r3, #1
 800df12:	2b00      	cmp	r3, #0
 800df14:	bf0c      	ite	eq
 800df16:	2301      	moveq	r3, #1
 800df18:	2300      	movne	r3, #0
 800df1a:	b2db      	uxtb	r3, r3
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d030      	beq.n	800df82 <_Z23getFont_verdana_10_4bppv+0x82>
 800df20:	481a      	ldr	r0, [pc, #104]	@ (800df8c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800df22:	f001 f8aa 	bl	800f07a <__cxa_guard_acquire>
 800df26:	4603      	mov	r3, r0
 800df28:	2b00      	cmp	r3, #0
 800df2a:	bf14      	ite	ne
 800df2c:	2301      	movne	r3, #1
 800df2e:	2300      	moveq	r3, #0
 800df30:	b2db      	uxtb	r3, r3
 800df32:	2b00      	cmp	r3, #0
 800df34:	d025      	beq.n	800df82 <_Z23getFont_verdana_10_4bppv+0x82>
 800df36:	2300      	movs	r3, #0
 800df38:	930c      	str	r3, [sp, #48]	@ 0x30
 800df3a:	2300      	movs	r3, #0
 800df3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df3e:	2300      	movs	r3, #0
 800df40:	930a      	str	r3, [sp, #40]	@ 0x28
 800df42:	233f      	movs	r3, #63	@ 0x3f
 800df44:	9309      	str	r3, [sp, #36]	@ 0x24
 800df46:	4b12      	ldr	r3, [pc, #72]	@ (800df90 <_Z23getFont_verdana_10_4bppv+0x90>)
 800df48:	9308      	str	r3, [sp, #32]
 800df4a:	4b12      	ldr	r3, [pc, #72]	@ (800df94 <_Z23getFont_verdana_10_4bppv+0x94>)
 800df4c:	9307      	str	r3, [sp, #28]
 800df4e:	2300      	movs	r3, #0
 800df50:	9306      	str	r3, [sp, #24]
 800df52:	2300      	movs	r3, #0
 800df54:	9305      	str	r3, [sp, #20]
 800df56:	2301      	movs	r3, #1
 800df58:	9304      	str	r3, [sp, #16]
 800df5a:	2304      	movs	r3, #4
 800df5c:	9303      	str	r3, [sp, #12]
 800df5e:	2300      	movs	r3, #0
 800df60:	9302      	str	r3, [sp, #8]
 800df62:	2300      	movs	r3, #0
 800df64:	9301      	str	r3, [sp, #4]
 800df66:	230a      	movs	r3, #10
 800df68:	9300      	str	r3, [sp, #0]
 800df6a:	230a      	movs	r3, #10
 800df6c:	2201      	movs	r2, #1
 800df6e:	490a      	ldr	r1, [pc, #40]	@ (800df98 <_Z23getFont_verdana_10_4bppv+0x98>)
 800df70:	480a      	ldr	r0, [pc, #40]	@ (800df9c <_Z23getFont_verdana_10_4bppv+0x9c>)
 800df72:	f7ff fdfd 	bl	800db70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800df76:	480a      	ldr	r0, [pc, #40]	@ (800dfa0 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800df78:	f001 f8ca 	bl	800f110 <atexit>
 800df7c:	4803      	ldr	r0, [pc, #12]	@ (800df8c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800df7e:	f001 f888 	bl	800f092 <__cxa_guard_release>
    return verdana_10_4bpp;
 800df82:	4b06      	ldr	r3, [pc, #24]	@ (800df9c <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800df84:	4618      	mov	r0, r3
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	2400074c 	.word	0x2400074c
 800df90:	0801181c 	.word	0x0801181c
 800df94:	08011830 	.word	0x08011830
 800df98:	080117f0 	.word	0x080117f0
 800df9c:	24000720 	.word	0x24000720
 800dfa0:	0800def1 	.word	0x0800def1

0800dfa4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	4801      	ldr	r0, [pc, #4]	@ (800dfb0 <__tcf_0+0xc>)
 800dfaa:	f7ff fda7 	bl	800dafc <_ZN8touchgfx13GeneratedFontD1Ev>
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	24000750 	.word	0x24000750

0800dfb4 <_Z23getFont_verdana_40_4bppv>:
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b08e      	sub	sp, #56	@ 0x38
 800dfb8:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800dfba:	4b21      	ldr	r3, [pc, #132]	@ (800e040 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f3bf 8f5b 	dmb	ish
 800dfc2:	f003 0301 	and.w	r3, r3, #1
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	bf0c      	ite	eq
 800dfca:	2301      	moveq	r3, #1
 800dfcc:	2300      	movne	r3, #0
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d030      	beq.n	800e036 <_Z23getFont_verdana_40_4bppv+0x82>
 800dfd4:	481a      	ldr	r0, [pc, #104]	@ (800e040 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800dfd6:	f001 f850 	bl	800f07a <__cxa_guard_acquire>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	bf14      	ite	ne
 800dfe0:	2301      	movne	r3, #1
 800dfe2:	2300      	moveq	r3, #0
 800dfe4:	b2db      	uxtb	r3, r3
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d025      	beq.n	800e036 <_Z23getFont_verdana_40_4bppv+0x82>
 800dfea:	2300      	movs	r3, #0
 800dfec:	930c      	str	r3, [sp, #48]	@ 0x30
 800dfee:	2300      	movs	r3, #0
 800dff0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dff2:	2300      	movs	r3, #0
 800dff4:	930a      	str	r3, [sp, #40]	@ 0x28
 800dff6:	233f      	movs	r3, #63	@ 0x3f
 800dff8:	9309      	str	r3, [sp, #36]	@ 0x24
 800dffa:	4b12      	ldr	r3, [pc, #72]	@ (800e044 <_Z23getFont_verdana_40_4bppv+0x90>)
 800dffc:	9308      	str	r3, [sp, #32]
 800dffe:	4b12      	ldr	r3, [pc, #72]	@ (800e048 <_Z23getFont_verdana_40_4bppv+0x94>)
 800e000:	9307      	str	r3, [sp, #28]
 800e002:	2300      	movs	r3, #0
 800e004:	9306      	str	r3, [sp, #24]
 800e006:	2300      	movs	r3, #0
 800e008:	9305      	str	r3, [sp, #20]
 800e00a:	2301      	movs	r3, #1
 800e00c:	9304      	str	r3, [sp, #16]
 800e00e:	2304      	movs	r3, #4
 800e010:	9303      	str	r3, [sp, #12]
 800e012:	2300      	movs	r3, #0
 800e014:	9302      	str	r3, [sp, #8]
 800e016:	2300      	movs	r3, #0
 800e018:	9301      	str	r3, [sp, #4]
 800e01a:	2328      	movs	r3, #40	@ 0x28
 800e01c:	9300      	str	r3, [sp, #0]
 800e01e:	2328      	movs	r3, #40	@ 0x28
 800e020:	2201      	movs	r2, #1
 800e022:	490a      	ldr	r1, [pc, #40]	@ (800e04c <_Z23getFont_verdana_40_4bppv+0x98>)
 800e024:	480a      	ldr	r0, [pc, #40]	@ (800e050 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800e026:	f7ff fda3 	bl	800db70 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e02a:	480a      	ldr	r0, [pc, #40]	@ (800e054 <_Z23getFont_verdana_40_4bppv+0xa0>)
 800e02c:	f001 f870 	bl	800f110 <atexit>
 800e030:	4803      	ldr	r0, [pc, #12]	@ (800e040 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800e032:	f001 f82e 	bl	800f092 <__cxa_guard_release>
    return verdana_40_4bpp;
 800e036:	4b06      	ldr	r3, [pc, #24]	@ (800e050 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800e038:	4618      	mov	r0, r3
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop
 800e040:	2400077c 	.word	0x2400077c
 800e044:	08011820 	.word	0x08011820
 800e048:	08011834 	.word	0x08011834
 800e04c:	08011800 	.word	0x08011800
 800e050:	24000750 	.word	0x24000750
 800e054:	0800dfa5 	.word	0x0800dfa5

0800e058 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800e058:	b480      	push	{r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	60f8      	str	r0, [r7, #12]
 800e060:	460b      	mov	r3, r1
 800e062:	607a      	str	r2, [r7, #4]
 800e064:	817b      	strh	r3, [r7, #10]
        return 0;
 800e066:	2300      	movs	r3, #0
    }
 800e068:	4618      	mov	r0, r3
 800e06a:	3714      	adds	r7, #20
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
        return 0;
 800e07c:	2300      	movs	r3, #0
    }
 800e07e:	4618      	mov	r0, r3
 800e080:	370c      	adds	r7, #12
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr

0800e08a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800e08a:	b480      	push	{r7}
 800e08c:	b083      	sub	sp, #12
 800e08e:	af00      	add	r7, sp, #0
 800e090:	6078      	str	r0, [r7, #4]
        return 0;
 800e092:	2300      	movs	r3, #0
    }
 800e094:	4618      	mov	r0, r3
 800e096:	370c      	adds	r7, #12
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr

0800e0a0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e0a0:	b40e      	push	{r1, r2, r3}
 800e0a2:	b580      	push	{r7, lr}
 800e0a4:	b085      	sub	sp, #20
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800e0aa:	f107 0320 	add.w	r3, r7, #32
 800e0ae:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	69fa      	ldr	r2, [r7, #28]
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f000 f90c 	bl	800e2d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e0c0:	89fb      	ldrh	r3, [r7, #14]
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3714      	adds	r7, #20
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e0cc:	b003      	add	sp, #12
 800e0ce:	4770      	bx	lr

0800e0d0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800e0d0:	b40c      	push	{r2, r3}
 800e0d2:	b580      	push	{r7, lr}
 800e0d4:	b084      	sub	sp, #16
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
 800e0da:	460b      	mov	r3, r1
 800e0dc:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800e0de:	f107 031c 	add.w	r3, r7, #28
 800e0e2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800e0e4:	78f9      	ldrb	r1, [r7, #3]
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	69ba      	ldr	r2, [r7, #24]
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f000 f8f2 	bl	800e2d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800e0f4:	89fb      	ldrh	r3, [r7, #14]
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3710      	adds	r7, #16
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e100:	b002      	add	sp, #8
 800e102:	4770      	bx	lr

0800e104 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b08a      	sub	sp, #40	@ 0x28
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	460b      	mov	r3, r1
 800e10e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e114:	2b00      	cmp	r3, #0
 800e116:	d016      	beq.n	800e146 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	3322      	adds	r3, #34	@ 0x22
 800e11c:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800e11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e120:	8adb      	ldrh	r3, [r3, #22]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d105      	bne.n	800e132 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800e126:	4b43      	ldr	r3, [pc, #268]	@ (800e234 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e128:	4a43      	ldr	r2, [pc, #268]	@ (800e238 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e12a:	21c5      	movs	r1, #197	@ 0xc5
 800e12c:	4843      	ldr	r0, [pc, #268]	@ (800e23c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e12e:	f000 ffd1 	bl	800f0d4 <__assert_func>
            return buffer[pos];
 800e132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e134:	8a9b      	ldrh	r3, [r3, #20]
 800e136:	461a      	mov	r2, r3
 800e138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d001      	beq.n	800e146 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800e142:	2301      	movs	r3, #1
 800e144:	e000      	b.n	800e148 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800e146:	2300      	movs	r3, #0
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d06a      	beq.n	800e222 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f000 ff73 	bl	800f038 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	3322      	adds	r3, #34	@ 0x22
 800e156:	623b      	str	r3, [r7, #32]
 800e158:	2301      	movs	r3, #1
 800e15a:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800e15c:	6a3b      	ldr	r3, [r7, #32]
 800e15e:	8adb      	ldrh	r3, [r3, #22]
 800e160:	8bfa      	ldrh	r2, [r7, #30]
 800e162:	429a      	cmp	r2, r3
 800e164:	d305      	bcc.n	800e172 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800e166:	4b36      	ldr	r3, [pc, #216]	@ (800e240 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800e168:	4a36      	ldr	r2, [pc, #216]	@ (800e244 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800e16a:	21cb      	movs	r1, #203	@ 0xcb
 800e16c:	4833      	ldr	r0, [pc, #204]	@ (800e23c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e16e:	f000 ffb1 	bl	800f0d4 <__assert_func>
            const uint16_t index = pos + offset;
 800e172:	6a3b      	ldr	r3, [r7, #32]
 800e174:	8a9a      	ldrh	r2, [r3, #20]
 800e176:	8bfb      	ldrh	r3, [r7, #30]
 800e178:	4413      	add	r3, r2
 800e17a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800e17c:	8bbb      	ldrh	r3, [r7, #28]
 800e17e:	2b09      	cmp	r3, #9
 800e180:	d801      	bhi.n	800e186 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800e182:	8bbb      	ldrh	r3, [r7, #28]
 800e184:	e001      	b.n	800e18a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800e186:	8bbb      	ldrh	r3, [r7, #28]
 800e188:	3b0a      	subs	r3, #10
 800e18a:	6a3a      	ldr	r2, [r7, #32]
 800e18c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e190:	f640 123f 	movw	r2, #2367	@ 0x93f
 800e194:	4293      	cmp	r3, r2
 800e196:	bf0c      	ite	eq
 800e198:	2301      	moveq	r3, #1
 800e19a:	2300      	movne	r3, #0
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d03f      	beq.n	800e222 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	3322      	adds	r3, #34	@ 0x22
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	3222      	adds	r2, #34	@ 0x22
 800e1aa:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800e1ac:	68ba      	ldr	r2, [r7, #8]
 800e1ae:	8ad2      	ldrh	r2, [r2, #22]
 800e1b0:	2a00      	cmp	r2, #0
 800e1b2:	d105      	bne.n	800e1c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800e1b4:	4b1f      	ldr	r3, [pc, #124]	@ (800e234 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800e1b6:	4a20      	ldr	r2, [pc, #128]	@ (800e238 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800e1b8:	21c5      	movs	r1, #197	@ 0xc5
 800e1ba:	4820      	ldr	r0, [pc, #128]	@ (800e23c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e1bc:	f000 ff8a 	bl	800f0d4 <__assert_func>
            return buffer[pos];
 800e1c0:	68ba      	ldr	r2, [r7, #8]
 800e1c2:	8a92      	ldrh	r2, [r2, #20]
 800e1c4:	4611      	mov	r1, r2
 800e1c6:	68ba      	ldr	r2, [r7, #8]
 800e1c8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800e1cc:	613b      	str	r3, [r7, #16]
 800e1ce:	4613      	mov	r3, r2
 800e1d0:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	8adb      	ldrh	r3, [r3, #22]
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d806      	bhi.n	800e1e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800e1da:	4b1b      	ldr	r3, [pc, #108]	@ (800e248 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800e1dc:	4a1b      	ldr	r2, [pc, #108]	@ (800e24c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800e1de:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800e1e2:	4816      	ldr	r0, [pc, #88]	@ (800e23c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800e1e4:	f000 ff76 	bl	800f0d4 <__assert_func>
            const uint16_t index = pos + 1;
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	8a9b      	ldrh	r3, [r3, #20]
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800e1f0:	89bb      	ldrh	r3, [r7, #12]
 800e1f2:	2b09      	cmp	r3, #9
 800e1f4:	d801      	bhi.n	800e1fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800e1f6:	89bb      	ldrh	r3, [r7, #12]
 800e1f8:	e000      	b.n	800e1fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	693a      	ldr	r2, [r7, #16]
 800e1fe:	89f9      	ldrh	r1, [r7, #14]
 800e200:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800e204:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	3322      	adds	r3, #34	@ 0x22
 800e20a:	61bb      	str	r3, [r7, #24]
 800e20c:	f640 133f 	movw	r3, #2367	@ 0x93f
 800e210:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800e212:	69bb      	ldr	r3, [r7, #24]
 800e214:	8a9b      	ldrh	r3, [r3, #20]
 800e216:	4619      	mov	r1, r3
 800e218:	69bb      	ldr	r3, [r7, #24]
 800e21a:	8afa      	ldrh	r2, [r7, #22]
 800e21c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800e220:	bf00      	nop
        }
    }
    return getNextChar();
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 fe0a 	bl	800ee3c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e228:	4603      	mov	r3, r0
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3728      	adds	r7, #40	@ 0x28
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
 800e232:	bf00      	nop
 800e234:	080100f0 	.word	0x080100f0
 800e238:	080100fc 	.word	0x080100fc
 800e23c:	080101a8 	.word	0x080101a8
 800e240:	080101f0 	.word	0x080101f0
 800e244:	08010200 	.word	0x08010200
 800e248:	080102d4 	.word	0x080102d4
 800e24c:	080102e0 	.word	0x080102e0

0800e250 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f000 fdb8 	bl	800edce <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800e25e:	bf00      	nop
 800e260:	3708      	adds	r7, #8
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
	...

0800e268 <_Z41__static_initialization_and_destruction_0v>:
    case 4:
        touchgfx_fonts[4] = &(getFont_consolab_30_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800e268:	b580      	push	{r7, lr}
 800e26a:	af00      	add	r7, sp, #0
    &(getFont_consolab_20_4bpp()),
 800e26c:	f7ff fd94 	bl	800dd98 <_Z24getFont_consolab_20_4bppv>
 800e270:	4603      	mov	r3, r0
};
 800e272:	4a0c      	ldr	r2, [pc, #48]	@ (800e2a4 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800e274:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800e276:	f7ff fe9d 	bl	800dfb4 <_Z23getFont_verdana_40_4bppv>
 800e27a:	4603      	mov	r3, r0
};
 800e27c:	4a09      	ldr	r2, [pc, #36]	@ (800e2a4 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800e27e:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 800e280:	f7ff fe3e 	bl	800df00 <_Z23getFont_verdana_10_4bppv>
 800e284:	4603      	mov	r3, r0
};
 800e286:	4a07      	ldr	r2, [pc, #28]	@ (800e2a4 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800e288:	6093      	str	r3, [r2, #8]
    &(getFont_consola_20_4bpp()),
 800e28a:	f7ff fd2b 	bl	800dce4 <_Z23getFont_consola_20_4bppv>
 800e28e:	4603      	mov	r3, r0
};
 800e290:	4a04      	ldr	r2, [pc, #16]	@ (800e2a4 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800e292:	60d3      	str	r3, [r2, #12]
    &(getFont_consolab_30_4bpp())
 800e294:	f7ff fdda 	bl	800de4c <_Z24getFont_consolab_30_4bppv>
 800e298:	4603      	mov	r3, r0
};
 800e29a:	4a02      	ldr	r2, [pc, #8]	@ (800e2a4 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800e29c:	6113      	str	r3, [r2, #16]
} // namespace TypedTextDatabase
 800e29e:	bf00      	nop
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	24000780 	.word	0x24000780

0800e2a8 <_GLOBAL__sub_I_touchgfx_fonts>:
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	f7ff ffdc 	bl	800e268 <_Z41__static_initialization_and_destruction_0v>
 800e2b0:	bd80      	pop	{r7, pc}
	...

0800e2b4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800e2b4:	4b01      	ldr	r3, [pc, #4]	@ (800e2bc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	601a      	str	r2, [r3, #0]
 800e2ba:	4770      	bx	lr
 800e2bc:	24000794 	.word	0x24000794

0800e2c0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800e2c0:	4b03      	ldr	r3, [pc, #12]	@ (800e2d0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	801a      	strh	r2, [r3, #0]
 800e2c6:	805a      	strh	r2, [r3, #2]
 800e2c8:	809a      	strh	r2, [r3, #4]
 800e2ca:	80da      	strh	r2, [r3, #6]
 800e2cc:	4770      	bx	lr
 800e2ce:	bf00      	nop
 800e2d0:	24000798 	.word	0x24000798

0800e2d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800e2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d8:	b09d      	sub	sp, #116	@ 0x74
 800e2da:	4606      	mov	r6, r0
 800e2dc:	4614      	mov	r4, r2
 800e2de:	468a      	mov	sl, r1
 800e2e0:	a803      	add	r0, sp, #12
 800e2e2:	461d      	mov	r5, r3
 800e2e4:	f000 f9b4 	bl	800e650 <_ZN8touchgfx12TextProviderC1Ev>
 800e2e8:	6833      	ldr	r3, [r6, #0]
 800e2ea:	4630      	mov	r0, r6
 800e2ec:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 800e2f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2f2:	4798      	blx	r3
 800e2f4:	6833      	ldr	r3, [r6, #0]
 800e2f6:	4607      	mov	r7, r0
 800e2f8:	4630      	mov	r0, r6
 800e2fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2fc:	4798      	blx	r3
 800e2fe:	462a      	mov	r2, r5
 800e300:	2500      	movs	r5, #0
 800e302:	4621      	mov	r1, r4
 800e304:	9000      	str	r0, [sp, #0]
 800e306:	463b      	mov	r3, r7
 800e308:	462c      	mov	r4, r5
 800e30a:	46a9      	mov	r9, r5
 800e30c:	46a8      	mov	r8, r5
 800e30e:	a803      	add	r0, sp, #12
 800e310:	f000 f9f1 	bl	800e6f6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e314:	2300      	movs	r3, #0
 800e316:	9302      	str	r3, [sp, #8]
 800e318:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800e31c:	429c      	cmp	r4, r3
 800e31e:	d002      	beq.n	800e326 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800e320:	455c      	cmp	r4, fp
 800e322:	bf18      	it	ne
 800e324:	4625      	movne	r5, r4
 800e326:	ab02      	add	r3, sp, #8
 800e328:	4632      	mov	r2, r6
 800e32a:	4651      	mov	r1, sl
 800e32c:	a803      	add	r0, sp, #12
 800e32e:	f000 fd05 	bl	800ed3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e332:	4604      	mov	r4, r0
 800e334:	b108      	cbz	r0, 800e33a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800e336:	280a      	cmp	r0, #10
 800e338:	d10a      	bne.n	800e350 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800e33a:	45c1      	cmp	r9, r8
 800e33c:	bf38      	it	cc
 800e33e:	46c1      	movcc	r9, r8
 800e340:	f04f 0800 	mov.w	r8, #0
 800e344:	2c00      	cmp	r4, #0
 800e346:	d1e5      	bne.n	800e314 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800e348:	4648      	mov	r0, r9
 800e34a:	b01d      	add	sp, #116	@ 0x74
 800e34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e350:	9a02      	ldr	r2, [sp, #8]
 800e352:	2a00      	cmp	r2, #0
 800e354:	d0de      	beq.n	800e314 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800e356:	7b57      	ldrb	r7, [r2, #13]
 800e358:	4629      	mov	r1, r5
 800e35a:	6833      	ldr	r3, [r6, #0]
 800e35c:	007f      	lsls	r7, r7, #1
 800e35e:	8894      	ldrh	r4, [r2, #4]
 800e360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e362:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 800e366:	7a97      	ldrb	r7, [r2, #10]
 800e368:	4307      	orrs	r7, r0
 800e36a:	4630      	mov	r0, r6
 800e36c:	4798      	blx	r3
 800e36e:	4438      	add	r0, r7
 800e370:	4480      	add	r8, r0
 800e372:	fa1f f888 	uxth.w	r8, r8
 800e376:	e7e5      	b.n	800e344 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800e378 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800e378:	b508      	push	{r3, lr}
 800e37a:	6803      	ldr	r3, [r0, #0]
 800e37c:	68db      	ldr	r3, [r3, #12]
 800e37e:	4798      	blx	r3
 800e380:	b128      	cbz	r0, 800e38e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800e382:	7b43      	ldrb	r3, [r0, #13]
 800e384:	7a80      	ldrb	r0, [r0, #10]
 800e386:	005b      	lsls	r3, r3, #1
 800e388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e38c:	4318      	orrs	r0, r3
 800e38e:	bd08      	pop	{r3, pc}

0800e390 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800e390:	b40e      	push	{r1, r2, r3}
 800e392:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e394:	b09e      	sub	sp, #120	@ 0x78
 800e396:	4605      	mov	r5, r0
 800e398:	ab23      	add	r3, sp, #140	@ 0x8c
 800e39a:	a805      	add	r0, sp, #20
 800e39c:	f853 4b04 	ldr.w	r4, [r3], #4
 800e3a0:	9303      	str	r3, [sp, #12]
 800e3a2:	f000 f955 	bl	800e650 <_ZN8touchgfx12TextProviderC1Ev>
 800e3a6:	682b      	ldr	r3, [r5, #0]
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3ac:	4798      	blx	r3
 800e3ae:	682b      	ldr	r3, [r5, #0]
 800e3b0:	4606      	mov	r6, r0
 800e3b2:	4628      	mov	r0, r5
 800e3b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3b6:	4798      	blx	r3
 800e3b8:	4633      	mov	r3, r6
 800e3ba:	4621      	mov	r1, r4
 800e3bc:	ae1e      	add	r6, sp, #120	@ 0x78
 800e3be:	2400      	movs	r4, #0
 800e3c0:	9000      	str	r0, [sp, #0]
 800e3c2:	9a03      	ldr	r2, [sp, #12]
 800e3c4:	a805      	add	r0, sp, #20
 800e3c6:	f000 f996 	bl	800e6f6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e3ca:	f846 4d68 	str.w	r4, [r6, #-104]!
 800e3ce:	462a      	mov	r2, r5
 800e3d0:	4633      	mov	r3, r6
 800e3d2:	4621      	mov	r1, r4
 800e3d4:	a805      	add	r0, sp, #20
 800e3d6:	f000 fcb1 	bl	800ed3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e3da:	b300      	cbz	r0, 800e41e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 800e3dc:	280a      	cmp	r0, #10
 800e3de:	d01a      	beq.n	800e416 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800e3e0:	9f04      	ldr	r7, [sp, #16]
 800e3e2:	b1c7      	cbz	r7, 800e416 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800e3e4:	7b78      	ldrb	r0, [r7, #13]
 800e3e6:	7a3b      	ldrb	r3, [r7, #8]
 800e3e8:	00c1      	lsls	r1, r0, #3
 800e3ea:	88ea      	ldrh	r2, [r5, #6]
 800e3ec:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800e3f0:	4319      	orrs	r1, r3
 800e3f2:	0643      	lsls	r3, r0, #25
 800e3f4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800e3f8:	bf48      	it	mi
 800e3fa:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 800e3fe:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800e402:	bf48      	it	mi
 800e404:	b219      	sxthmi	r1, r3
 800e406:	79fb      	ldrb	r3, [r7, #7]
 800e408:	4303      	orrs	r3, r0
 800e40a:	4413      	add	r3, r2
 800e40c:	1a5b      	subs	r3, r3, r1
 800e40e:	b21b      	sxth	r3, r3
 800e410:	429c      	cmp	r4, r3
 800e412:	bfb8      	it	lt
 800e414:	461c      	movlt	r4, r3
 800e416:	4633      	mov	r3, r6
 800e418:	462a      	mov	r2, r5
 800e41a:	2100      	movs	r1, #0
 800e41c:	e7da      	b.n	800e3d4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800e41e:	b2a0      	uxth	r0, r4
 800e420:	b01e      	add	sp, #120	@ 0x78
 800e422:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e426:	b003      	add	sp, #12
 800e428:	4770      	bx	lr

0800e42a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800e42a:	7a43      	ldrb	r3, [r0, #9]
 800e42c:	8880      	ldrh	r0, [r0, #4]
 800e42e:	4418      	add	r0, r3
 800e430:	b280      	uxth	r0, r0
 800e432:	4770      	bx	lr

0800e434 <_ZNK8touchgfx4Font13getFontHeightEv>:
 800e434:	6803      	ldr	r3, [r0, #0]
 800e436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e438:	4718      	bx	r3

0800e43a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800e43a:	b40e      	push	{r1, r2, r3}
 800e43c:	b570      	push	{r4, r5, r6, lr}
 800e43e:	b09d      	sub	sp, #116	@ 0x74
 800e440:	4604      	mov	r4, r0
 800e442:	ab21      	add	r3, sp, #132	@ 0x84
 800e444:	a803      	add	r0, sp, #12
 800e446:	f853 5b04 	ldr.w	r5, [r3], #4
 800e44a:	9302      	str	r3, [sp, #8]
 800e44c:	f000 f900 	bl	800e650 <_ZN8touchgfx12TextProviderC1Ev>
 800e450:	6823      	ldr	r3, [r4, #0]
 800e452:	4620      	mov	r0, r4
 800e454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e456:	4798      	blx	r3
 800e458:	6823      	ldr	r3, [r4, #0]
 800e45a:	4606      	mov	r6, r0
 800e45c:	4620      	mov	r0, r4
 800e45e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e460:	2401      	movs	r4, #1
 800e462:	4798      	blx	r3
 800e464:	4633      	mov	r3, r6
 800e466:	9000      	str	r0, [sp, #0]
 800e468:	4629      	mov	r1, r5
 800e46a:	9a02      	ldr	r2, [sp, #8]
 800e46c:	a803      	add	r0, sp, #12
 800e46e:	f000 f942 	bl	800e6f6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e472:	a803      	add	r0, sp, #12
 800e474:	f000 fce2 	bl	800ee3c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e478:	b2a3      	uxth	r3, r4
 800e47a:	b138      	cbz	r0, 800e48c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 800e47c:	280a      	cmp	r0, #10
 800e47e:	a803      	add	r0, sp, #12
 800e480:	bf04      	itt	eq
 800e482:	3301      	addeq	r3, #1
 800e484:	b21c      	sxtheq	r4, r3
 800e486:	f000 fcd9 	bl	800ee3c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800e48a:	e7f5      	b.n	800e478 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800e48c:	4618      	mov	r0, r3
 800e48e:	b01d      	add	sp, #116	@ 0x74
 800e490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e494:	b003      	add	sp, #12
 800e496:	4770      	bx	lr

0800e498 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800e498:	b40e      	push	{r1, r2, r3}
 800e49a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e49c:	b09e      	sub	sp, #120	@ 0x78
 800e49e:	4604      	mov	r4, r0
 800e4a0:	ab23      	add	r3, sp, #140	@ 0x8c
 800e4a2:	a805      	add	r0, sp, #20
 800e4a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800e4a8:	9303      	str	r3, [sp, #12]
 800e4aa:	f000 f8d1 	bl	800e650 <_ZN8touchgfx12TextProviderC1Ev>
 800e4ae:	6823      	ldr	r3, [r4, #0]
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4b4:	4798      	blx	r3
 800e4b6:	6823      	ldr	r3, [r4, #0]
 800e4b8:	4606      	mov	r6, r0
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4be:	4798      	blx	r3
 800e4c0:	4633      	mov	r3, r6
 800e4c2:	4629      	mov	r1, r5
 800e4c4:	9000      	str	r0, [sp, #0]
 800e4c6:	9a03      	ldr	r2, [sp, #12]
 800e4c8:	a805      	add	r0, sp, #20
 800e4ca:	f000 f914 	bl	800e6f6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e4ce:	ad1e      	add	r5, sp, #120	@ 0x78
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 800e4d6:	4622      	mov	r2, r4
 800e4d8:	a805      	add	r0, sp, #20
 800e4da:	f845 1d68 	str.w	r1, [r5, #-104]!
 800e4de:	462b      	mov	r3, r5
 800e4e0:	f000 fc2c 	bl	800ed3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e4e4:	b1d8      	cbz	r0, 800e51e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800e4e6:	280a      	cmp	r0, #10
 800e4e8:	d012      	beq.n	800e510 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800e4ea:	9804      	ldr	r0, [sp, #16]
 800e4ec:	b180      	cbz	r0, 800e510 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800e4ee:	7b47      	ldrb	r7, [r0, #13]
 800e4f0:	88e2      	ldrh	r2, [r4, #6]
 800e4f2:	00fb      	lsls	r3, r7, #3
 800e4f4:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800e4f8:	7a03      	ldrb	r3, [r0, #8]
 800e4fa:	430b      	orrs	r3, r1
 800e4fc:	0679      	lsls	r1, r7, #25
 800e4fe:	bf44      	itt	mi
 800e500:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e504:	b21b      	sxthmi	r3, r3
 800e506:	1ad3      	subs	r3, r2, r3
 800e508:	b21b      	sxth	r3, r3
 800e50a:	429e      	cmp	r6, r3
 800e50c:	bfa8      	it	ge
 800e50e:	461e      	movge	r6, r3
 800e510:	462b      	mov	r3, r5
 800e512:	4622      	mov	r2, r4
 800e514:	2100      	movs	r1, #0
 800e516:	a805      	add	r0, sp, #20
 800e518:	f000 fc10 	bl	800ed3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800e51c:	e7e2      	b.n	800e4e4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800e51e:	4630      	mov	r0, r6
 800e520:	b01e      	add	sp, #120	@ 0x78
 800e522:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e526:	b003      	add	sp, #12
 800e528:	4770      	bx	lr
	...

0800e52c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800e52c:	b530      	push	{r4, r5, lr}
 800e52e:	8083      	strh	r3, [r0, #4]
 800e530:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e534:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800e538:	80c3      	strh	r3, [r0, #6]
 800e53a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e53e:	6141      	str	r1, [r0, #20]
 800e540:	7203      	strb	r3, [r0, #8]
 800e542:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e546:	8302      	strh	r2, [r0, #24]
 800e548:	7243      	strb	r3, [r0, #9]
 800e54a:	7a83      	ldrb	r3, [r0, #10]
 800e54c:	f365 0306 	bfi	r3, r5, #0, #7
 800e550:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800e554:	f365 13c7 	bfi	r3, r5, #7, #1
 800e558:	7283      	strb	r3, [r0, #10]
 800e55a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800e55e:	72c3      	strb	r3, [r0, #11]
 800e560:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e564:	7303      	strb	r3, [r0, #12]
 800e566:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800e56a:	81c3      	strh	r3, [r0, #14]
 800e56c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800e570:	8203      	strh	r3, [r0, #16]
 800e572:	4b01      	ldr	r3, [pc, #4]	@ (800e578 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800e574:	6003      	str	r3, [r0, #0]
 800e576:	bd30      	pop	{r4, r5, pc}
 800e578:	08010478 	.word	0x08010478

0800e57c <_ZNK8touchgfx9ConstFont4findEt>:
 800e57c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e57e:	6944      	ldr	r4, [r0, #20]
 800e580:	b3bc      	cbz	r4, 800e5f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e582:	88a3      	ldrh	r3, [r4, #4]
 800e584:	8b02      	ldrh	r2, [r0, #24]
 800e586:	1acb      	subs	r3, r1, r3
 800e588:	f102 32ff 	add.w	r2, r2, #4294967295
 800e58c:	d431      	bmi.n	800e5f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e58e:	4293      	cmp	r3, r2
 800e590:	dd0c      	ble.n	800e5ac <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800e592:	230e      	movs	r3, #14
 800e594:	fb03 4302 	mla	r3, r3, r2, r4
 800e598:	889b      	ldrh	r3, [r3, #4]
 800e59a:	1a5b      	subs	r3, r3, r1
 800e59c:	1ad3      	subs	r3, r2, r3
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	db27      	blt.n	800e5f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	bfbc      	itt	lt
 800e5a6:	2302      	movlt	r3, #2
 800e5a8:	fb92 f3f3 	sdivlt	r3, r2, r3
 800e5ac:	2500      	movs	r5, #0
 800e5ae:	260e      	movs	r6, #14
 800e5b0:	4295      	cmp	r5, r2
 800e5b2:	dc1e      	bgt.n	800e5f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e5b4:	fb06 4003 	mla	r0, r6, r3, r4
 800e5b8:	8887      	ldrh	r7, [r0, #4]
 800e5ba:	42b9      	cmp	r1, r7
 800e5bc:	d01a      	beq.n	800e5f4 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800e5be:	d20d      	bcs.n	800e5dc <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800e5c0:	1e5a      	subs	r2, r3, #1
 800e5c2:	4295      	cmp	r5, r2
 800e5c4:	dc15      	bgt.n	800e5f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e5c6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800e5ca:	1a5b      	subs	r3, r3, r1
 800e5cc:	1ad3      	subs	r3, r2, r3
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	db0f      	blt.n	800e5f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e5d2:	429d      	cmp	r5, r3
 800e5d4:	ddec      	ble.n	800e5b0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e5d6:	1953      	adds	r3, r2, r5
 800e5d8:	105b      	asrs	r3, r3, #1
 800e5da:	e7e9      	b.n	800e5b0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e5dc:	1c5d      	adds	r5, r3, #1
 800e5de:	42aa      	cmp	r2, r5
 800e5e0:	db07      	blt.n	800e5f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e5e2:	8a43      	ldrh	r3, [r0, #18]
 800e5e4:	1acb      	subs	r3, r1, r3
 800e5e6:	442b      	add	r3, r5
 800e5e8:	429d      	cmp	r5, r3
 800e5ea:	dc02      	bgt.n	800e5f2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	dadf      	bge.n	800e5b0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e5f0:	e7f1      	b.n	800e5d6 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800e5f2:	2000      	movs	r0, #0
 800e5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e5f6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800e5f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5f8:	4604      	mov	r4, r0
 800e5fa:	4617      	mov	r7, r2
 800e5fc:	461e      	mov	r6, r3
 800e5fe:	b911      	cbnz	r1, 800e606 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800e600:	2500      	movs	r5, #0
 800e602:	4628      	mov	r0, r5
 800e604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e606:	290a      	cmp	r1, #10
 800e608:	d0fa      	beq.n	800e600 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e60a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800e60e:	4291      	cmp	r1, r2
 800e610:	d0f6      	beq.n	800e600 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e612:	f242 020b 	movw	r2, #8203	@ 0x200b
 800e616:	4291      	cmp	r1, r2
 800e618:	d0f2      	beq.n	800e600 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e61a:	f7ff ffaf 	bl	800e57c <_ZNK8touchgfx9ConstFont4findEt>
 800e61e:	4605      	mov	r5, r0
 800e620:	b950      	cbnz	r0, 800e638 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800e622:	6823      	ldr	r3, [r4, #0]
 800e624:	4620      	mov	r0, r4
 800e626:	691b      	ldr	r3, [r3, #16]
 800e628:	4798      	blx	r3
 800e62a:	4601      	mov	r1, r0
 800e62c:	4620      	mov	r0, r4
 800e62e:	f7ff ffa5 	bl	800e57c <_ZNK8touchgfx9ConstFont4findEt>
 800e632:	4605      	mov	r5, r0
 800e634:	2800      	cmp	r0, #0
 800e636:	d0e3      	beq.n	800e600 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e638:	6823      	ldr	r3, [r4, #0]
 800e63a:	4629      	mov	r1, r5
 800e63c:	4620      	mov	r0, r4
 800e63e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e640:	4798      	blx	r3
 800e642:	6038      	str	r0, [r7, #0]
 800e644:	6823      	ldr	r3, [r4, #0]
 800e646:	4620      	mov	r0, r4
 800e648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e64a:	4798      	blx	r3
 800e64c:	7030      	strb	r0, [r6, #0]
 800e64e:	e7d8      	b.n	800e602 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800e650 <_ZN8touchgfx12TextProviderC1Ev>:
 800e650:	b538      	push	{r3, r4, r5, lr}
 800e652:	2500      	movs	r5, #0
 800e654:	2302      	movs	r3, #2
 800e656:	4604      	mov	r4, r0
 800e658:	220e      	movs	r2, #14
 800e65a:	7403      	strb	r3, [r0, #16]
 800e65c:	4629      	mov	r1, r5
 800e65e:	6145      	str	r5, [r0, #20]
 800e660:	7605      	strb	r5, [r0, #24]
 800e662:	83c5      	strh	r5, [r0, #30]
 800e664:	8405      	strh	r5, [r0, #32]
 800e666:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800e668:	8705      	strh	r5, [r0, #56]	@ 0x38
 800e66a:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 800e66c:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 800e670:	e9c0 5500 	strd	r5, r5, [r0]
 800e674:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 800e678:	304c      	adds	r0, #76	@ 0x4c
 800e67a:	f000 ff24 	bl	800f4c6 <memset>
 800e67e:	2301      	movs	r3, #1
 800e680:	4620      	mov	r0, r4
 800e682:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800e686:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e68a:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 800e68e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 800e692:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800e696:	f7ff fddb 	bl	800e250 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800e69a:	4620      	mov	r0, r4
 800e69c:	bd38      	pop	{r3, r4, r5, pc}

0800e69e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800e69e:	b530      	push	{r4, r5, lr}
 800e6a0:	2500      	movs	r5, #0
 800e6a2:	2401      	movs	r4, #1
 800e6a4:	6843      	ldr	r3, [r0, #4]
 800e6a6:	b913      	cbnz	r3, 800e6ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800e6a8:	6803      	ldr	r3, [r0, #0]
 800e6aa:	b313      	cbz	r3, 800e6f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e6ac:	6043      	str	r3, [r0, #4]
 800e6ae:	7e03      	ldrb	r3, [r0, #24]
 800e6b0:	b143      	cbz	r3, 800e6c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800e6b2:	6943      	ldr	r3, [r0, #20]
 800e6b4:	b12b      	cbz	r3, 800e6c2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e6b6:	881a      	ldrh	r2, [r3, #0]
 800e6b8:	b11a      	cbz	r2, 800e6c2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e6ba:	1c9a      	adds	r2, r3, #2
 800e6bc:	6142      	str	r2, [r0, #20]
 800e6be:	8818      	ldrh	r0, [r3, #0]
 800e6c0:	bd30      	pop	{r4, r5, pc}
 800e6c2:	7605      	strb	r5, [r0, #24]
 800e6c4:	6843      	ldr	r3, [r0, #4]
 800e6c6:	8819      	ldrh	r1, [r3, #0]
 800e6c8:	b199      	cbz	r1, 800e6f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e6ca:	1c9a      	adds	r2, r3, #2
 800e6cc:	2902      	cmp	r1, #2
 800e6ce:	6042      	str	r2, [r0, #4]
 800e6d0:	d1f5      	bne.n	800e6be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800e6d2:	7c03      	ldrb	r3, [r0, #16]
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d8e5      	bhi.n	800e6a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e6d8:	1c5a      	adds	r2, r3, #1
 800e6da:	3302      	adds	r3, #2
 800e6dc:	7402      	strb	r2, [r0, #16]
 800e6de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e6e2:	6143      	str	r3, [r0, #20]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d0dd      	beq.n	800e6a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e6e8:	881b      	ldrh	r3, [r3, #0]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d0da      	beq.n	800e6a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e6ee:	7604      	strb	r4, [r0, #24]
 800e6f0:	e7d8      	b.n	800e6a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e6f2:	2000      	movs	r0, #0
 800e6f4:	e7e4      	b.n	800e6c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800e6f6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800e6f6:	6001      	str	r1, [r0, #0]
 800e6f8:	2100      	movs	r1, #0
 800e6fa:	b430      	push	{r4, r5}
 800e6fc:	6041      	str	r1, [r0, #4]
 800e6fe:	6815      	ldr	r5, [r2, #0]
 800e700:	6085      	str	r5, [r0, #8]
 800e702:	6852      	ldr	r2, [r2, #4]
 800e704:	6443      	str	r3, [r0, #68]	@ 0x44
 800e706:	9b02      	ldr	r3, [sp, #8]
 800e708:	60c2      	str	r2, [r0, #12]
 800e70a:	7401      	strb	r1, [r0, #16]
 800e70c:	6141      	str	r1, [r0, #20]
 800e70e:	7601      	strb	r1, [r0, #24]
 800e710:	8701      	strh	r1, [r0, #56]	@ 0x38
 800e712:	8401      	strh	r1, [r0, #32]
 800e714:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 800e718:	6483      	str	r3, [r0, #72]	@ 0x48
 800e71a:	bc30      	pop	{r4, r5}
 800e71c:	f7ff bd98 	b.w	800e250 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800e720 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800e720:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e722:	4605      	mov	r5, r0
 800e724:	4608      	mov	r0, r1
 800e726:	b1f1      	cbz	r1, 800e766 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 800e728:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 800e72c:	460b      	mov	r3, r1
 800e72e:	f101 0708 	add.w	r7, r1, #8
 800e732:	4622      	mov	r2, r4
 800e734:	6818      	ldr	r0, [r3, #0]
 800e736:	3308      	adds	r3, #8
 800e738:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e73c:	4626      	mov	r6, r4
 800e73e:	42bb      	cmp	r3, r7
 800e740:	c603      	stmia	r6!, {r0, r1}
 800e742:	4634      	mov	r4, r6
 800e744:	d1f6      	bne.n	800e734 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800e746:	6818      	ldr	r0, [r3, #0]
 800e748:	6030      	str	r0, [r6, #0]
 800e74a:	4610      	mov	r0, r2
 800e74c:	889b      	ldrh	r3, [r3, #4]
 800e74e:	80b3      	strh	r3, [r6, #4]
 800e750:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800e754:	015b      	lsls	r3, r3, #5
 800e756:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800e75a:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 800e75e:	430b      	orrs	r3, r1
 800e760:	425b      	negs	r3, r3
 800e762:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800e766:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e768 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800e768:	b538      	push	{r3, r4, r5, lr}
 800e76a:	460c      	mov	r4, r1
 800e76c:	6811      	ldr	r1, [r2, #0]
 800e76e:	4610      	mov	r0, r2
 800e770:	68cd      	ldr	r5, [r1, #12]
 800e772:	4619      	mov	r1, r3
 800e774:	47a8      	blx	r5
 800e776:	2800      	cmp	r0, #0
 800e778:	bf08      	it	eq
 800e77a:	4620      	moveq	r0, r4
 800e77c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e780 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800e780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e784:	468c      	mov	ip, r1
 800e786:	4605      	mov	r5, r0
 800e788:	4614      	mov	r4, r2
 800e78a:	b942      	cbnz	r2, 800e79e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 800e78c:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800e790:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 800e794:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 800e798:	4620      	mov	r0, r4
 800e79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e79e:	7b50      	ldrb	r0, [r2, #13]
 800e7a0:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 800e7a4:	8893      	ldrh	r3, [r2, #4]
 800e7a6:	0106      	lsls	r6, r0, #4
 800e7a8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800e7ac:	79e6      	ldrb	r6, [r4, #7]
 800e7ae:	4316      	orrs	r6, r2
 800e7b0:	185a      	adds	r2, r3, r1
 800e7b2:	b291      	uxth	r1, r2
 800e7b4:	b2b7      	uxth	r7, r6
 800e7b6:	291d      	cmp	r1, #29
 800e7b8:	d87f      	bhi.n	800e8ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	10f6      	asrs	r6, r6, #3
 800e7be:	408a      	lsls	r2, r1
 800e7c0:	498b      	ldr	r1, [pc, #556]	@ (800e9f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 800e7c2:	420a      	tst	r2, r1
 800e7c4:	d12e      	bne.n	800e824 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800e7c6:	f412 7f60 	tst.w	r2, #896	@ 0x380
 800e7ca:	d076      	beq.n	800e8ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 800e7cc:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e7d0:	4623      	mov	r3, r4
 800e7d2:	f104 0e08 	add.w	lr, r4, #8
 800e7d6:	4614      	mov	r4, r2
 800e7d8:	6818      	ldr	r0, [r3, #0]
 800e7da:	3308      	adds	r3, #8
 800e7dc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e7e0:	4694      	mov	ip, r2
 800e7e2:	4573      	cmp	r3, lr
 800e7e4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800e7e8:	4662      	mov	r2, ip
 800e7ea:	d1f5      	bne.n	800e7d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 800e7ec:	6818      	ldr	r0, [r3, #0]
 800e7ee:	f8cc 0000 	str.w	r0, [ip]
 800e7f2:	889b      	ldrh	r3, [r3, #4]
 800e7f4:	f8ac 3004 	strh.w	r3, [ip, #4]
 800e7f8:	b2b3      	uxth	r3, r6
 800e7fa:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 800e7fe:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 800e802:	1aca      	subs	r2, r1, r3
 800e804:	1bcf      	subs	r7, r1, r7
 800e806:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 800e80a:	b292      	uxth	r2, r2
 800e80c:	1afb      	subs	r3, r7, r3
 800e80e:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 800e812:	10d2      	asrs	r2, r2, #3
 800e814:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 800e818:	4302      	orrs	r2, r0
 800e81a:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 800e81e:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 800e822:	e7b9      	b.n	800e798 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800e824:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e828:	4623      	mov	r3, r4
 800e82a:	f104 0808 	add.w	r8, r4, #8
 800e82e:	4614      	mov	r4, r2
 800e830:	6818      	ldr	r0, [r3, #0]
 800e832:	3308      	adds	r3, #8
 800e834:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e838:	4696      	mov	lr, r2
 800e83a:	4543      	cmp	r3, r8
 800e83c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e840:	4672      	mov	r2, lr
 800e842:	d1f5      	bne.n	800e830 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 800e844:	6818      	ldr	r0, [r3, #0]
 800e846:	f8ce 0000 	str.w	r0, [lr]
 800e84a:	889b      	ldrh	r3, [r3, #4]
 800e84c:	f8ae 3004 	strh.w	r3, [lr, #4]
 800e850:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 800e852:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800e856:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800e858:	f640 6333 	movw	r3, #3635	@ 0xe33
 800e85c:	4299      	cmp	r1, r3
 800e85e:	d111      	bne.n	800e884 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 800e860:	f8dc 3000 	ldr.w	r3, [ip]
 800e864:	4660      	mov	r0, ip
 800e866:	68db      	ldr	r3, [r3, #12]
 800e868:	4798      	blx	r3
 800e86a:	7b41      	ldrb	r1, [r0, #13]
 800e86c:	00cb      	lsls	r3, r1, #3
 800e86e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e872:	7a03      	ldrb	r3, [r0, #8]
 800e874:	4313      	orrs	r3, r2
 800e876:	064a      	lsls	r2, r1, #25
 800e878:	bf44      	itt	mi
 800e87a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e87e:	b21b      	sxthmi	r3, r3
 800e880:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e884:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 800e888:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 800e88c:	443b      	add	r3, r7
 800e88e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800e892:	4433      	add	r3, r6
 800e894:	b29b      	uxth	r3, r3
 800e896:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e89a:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 800e89e:	10db      	asrs	r3, r3, #3
 800e8a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e8a4:	4313      	orrs	r3, r2
 800e8a6:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 800e8aa:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 800e8ae:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 800e8b2:	1a9b      	subs	r3, r3, r2
 800e8b4:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800e8b8:	e76e      	b.n	800e798 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800e8ba:	f023 0204 	bic.w	r2, r3, #4
 800e8be:	f640 611b 	movw	r1, #3611	@ 0xe1b
 800e8c2:	428a      	cmp	r2, r1
 800e8c4:	d003      	beq.n	800e8ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 800e8c6:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	d138      	bne.n	800e940 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 800e8ce:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 800e8d2:	4622      	mov	r2, r4
 800e8d4:	f104 0808 	add.w	r8, r4, #8
 800e8d8:	4634      	mov	r4, r6
 800e8da:	6810      	ldr	r0, [r2, #0]
 800e8dc:	3208      	adds	r2, #8
 800e8de:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800e8e2:	46b6      	mov	lr, r6
 800e8e4:	4542      	cmp	r2, r8
 800e8e6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e8ea:	4676      	mov	r6, lr
 800e8ec:	d1f5      	bne.n	800e8da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 800e8ee:	6810      	ldr	r0, [r2, #0]
 800e8f0:	3b01      	subs	r3, #1
 800e8f2:	4621      	mov	r1, r4
 800e8f4:	f8ce 0000 	str.w	r0, [lr]
 800e8f8:	b29b      	uxth	r3, r3
 800e8fa:	8892      	ldrh	r2, [r2, #4]
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	f8ae 2004 	strh.w	r2, [lr, #4]
 800e902:	4662      	mov	r2, ip
 800e904:	f7ff ff30 	bl	800e768 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800e908:	7b41      	ldrb	r1, [r0, #13]
 800e90a:	00cb      	lsls	r3, r1, #3
 800e90c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e910:	7a03      	ldrb	r3, [r0, #8]
 800e912:	0648      	lsls	r0, r1, #25
 800e914:	ea43 0302 	orr.w	r3, r3, r2
 800e918:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 800e91c:	bf44      	itt	mi
 800e91e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e922:	b21b      	sxthmi	r3, r3
 800e924:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e928:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800e92c:	005b      	lsls	r3, r3, #1
 800e92e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e932:	4313      	orrs	r3, r2
 800e934:	115a      	asrs	r2, r3, #5
 800e936:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800e93a:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 800e93e:	e047      	b.n	800e9d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 800e940:	00c2      	lsls	r2, r0, #3
 800e942:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 800e946:	7a22      	ldrb	r2, [r4, #8]
 800e948:	430a      	orrs	r2, r1
 800e94a:	0641      	lsls	r1, r0, #25
 800e94c:	f640 6109 	movw	r1, #3593	@ 0xe09
 800e950:	bf44      	itt	mi
 800e952:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 800e956:	b212      	sxthmi	r2, r2
 800e958:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800e95c:	f023 0210 	bic.w	r2, r3, #16
 800e960:	428a      	cmp	r2, r1
 800e962:	d003      	beq.n	800e96c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 800e964:	f640 6213 	movw	r2, #3603	@ 0xe13
 800e968:	4293      	cmp	r3, r2
 800e96a:	d13e      	bne.n	800e9ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 800e96c:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e970:	f104 0808 	add.w	r8, r4, #8
 800e974:	4696      	mov	lr, r2
 800e976:	6820      	ldr	r0, [r4, #0]
 800e978:	3408      	adds	r4, #8
 800e97a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800e97e:	4616      	mov	r6, r2
 800e980:	4544      	cmp	r4, r8
 800e982:	c603      	stmia	r6!, {r0, r1}
 800e984:	4632      	mov	r2, r6
 800e986:	d1f6      	bne.n	800e976 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 800e988:	6820      	ldr	r0, [r4, #0]
 800e98a:	6030      	str	r0, [r6, #0]
 800e98c:	4628      	mov	r0, r5
 800e98e:	88a1      	ldrh	r1, [r4, #4]
 800e990:	4674      	mov	r4, lr
 800e992:	80b1      	strh	r1, [r6, #4]
 800e994:	4671      	mov	r1, lr
 800e996:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 800e99a:	0076      	lsls	r6, r6, #1
 800e99c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800e9a0:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800e9a4:	4316      	orrs	r6, r2
 800e9a6:	f640 6213 	movw	r2, #3603	@ 0xe13
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	4662      	mov	r2, ip
 800e9ae:	bf16      	itet	ne
 800e9b0:	f103 33ff 	addne.w	r3, r3, #4294967295
 800e9b4:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 800e9b8:	b29b      	uxthne	r3, r3
 800e9ba:	f7ff fed5 	bl	800e768 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800e9be:	7b43      	ldrb	r3, [r0, #13]
 800e9c0:	7a82      	ldrb	r2, [r0, #10]
 800e9c2:	005b      	lsls	r3, r3, #1
 800e9c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9c8:	4313      	orrs	r3, r2
 800e9ca:	1af6      	subs	r6, r6, r3
 800e9cc:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 800e9d0:	7b61      	ldrb	r1, [r4, #13]
 800e9d2:	00cb      	lsls	r3, r1, #3
 800e9d4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e9d8:	7a23      	ldrb	r3, [r4, #8]
 800e9da:	4313      	orrs	r3, r2
 800e9dc:	064a      	lsls	r2, r1, #25
 800e9de:	bf44      	itt	mi
 800e9e0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e9e4:	b21b      	sxthmi	r3, r3
 800e9e6:	1bdb      	subs	r3, r3, r7
 800e9e8:	e719      	b.n	800e81e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	e7a5      	b.n	800e93a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 800e9ee:	bf00      	nop
 800e9f0:	3fc00079 	.word	0x3fc00079

0800e9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800e9f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9f8:	4604      	mov	r4, r0
 800e9fa:	b942      	cbnz	r2, 800ea0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800e9fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ea00:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 800ea04:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800ea08:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800ea0c:	e047      	b.n	800ea9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800ea0e:	7b51      	ldrb	r1, [r2, #13]
 800ea10:	8893      	ldrh	r3, [r2, #4]
 800ea12:	010d      	lsls	r5, r1, #4
 800ea14:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 800ea18:	79d5      	ldrb	r5, [r2, #7]
 800ea1a:	4305      	orrs	r5, r0
 800ea1c:	2d04      	cmp	r5, #4
 800ea1e:	bfcc      	ite	gt
 800ea20:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800ea24:	f04f 0e01 	movle.w	lr, #1
 800ea28:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 800ea2c:	f200 80ab 	bhi.w	800eb86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800ea30:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 800ea34:	4283      	cmp	r3, r0
 800ea36:	d216      	bcs.n	800ea66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ea38:	f240 605b 	movw	r0, #1627	@ 0x65b
 800ea3c:	4283      	cmp	r3, r0
 800ea3e:	d859      	bhi.n	800eaf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800ea40:	f240 6057 	movw	r0, #1623	@ 0x657
 800ea44:	4283      	cmp	r3, r0
 800ea46:	d20e      	bcs.n	800ea66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ea48:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800ea4c:	d24a      	bcs.n	800eae4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800ea4e:	f240 604e 	movw	r0, #1614	@ 0x64e
 800ea52:	4283      	cmp	r3, r0
 800ea54:	d207      	bcs.n	800ea66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ea56:	f240 601a 	movw	r0, #1562	@ 0x61a
 800ea5a:	4283      	cmp	r3, r0
 800ea5c:	d02a      	beq.n	800eab4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ea5e:	d821      	bhi.n	800eaa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800ea60:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 800ea64:	d35b      	bcc.n	800eb1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ea66:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 800ea6a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ea6e:	f040 80d0 	bne.w	800ec12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800ea72:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 800ea76:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ea7a:	f040 80ca 	bne.w	800ec12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800ea7e:	00cb      	lsls	r3, r1, #3
 800ea80:	0649      	lsls	r1, r1, #25
 800ea82:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800ea86:	7a13      	ldrb	r3, [r2, #8]
 800ea88:	ea43 0300 	orr.w	r3, r3, r0
 800ea8c:	bf44      	itt	mi
 800ea8e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ea92:	b21b      	sxthmi	r3, r3
 800ea94:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800ea98:	1b5d      	subs	r5, r3, r5
 800ea9a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800ea9e:	4610      	mov	r0, r2
 800eaa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eaa4:	f240 604b 	movw	r0, #1611	@ 0x64b
 800eaa8:	4283      	cmp	r3, r0
 800eaaa:	d338      	bcc.n	800eb1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800eaac:	f240 604c 	movw	r0, #1612	@ 0x64c
 800eab0:	4283      	cmp	r3, r0
 800eab2:	d9d8      	bls.n	800ea66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eab4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 800eab8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 800eabc:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800eac0:	f040 80f3 	bne.w	800ecaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800eac4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800eac8:	f040 80ef 	bne.w	800ecaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800eacc:	00cb      	lsls	r3, r1, #3
 800eace:	064e      	lsls	r6, r1, #25
 800ead0:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800ead4:	7a13      	ldrb	r3, [r2, #8]
 800ead6:	ea43 0300 	orr.w	r3, r3, r0
 800eada:	bf44      	itt	mi
 800eadc:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800eae0:	b21b      	sxthmi	r3, r3
 800eae2:	e7d9      	b.n	800ea98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800eae4:	f240 6054 	movw	r0, #1620	@ 0x654
 800eae8:	4283      	cmp	r3, r0
 800eaea:	d8e3      	bhi.n	800eab4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eaec:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800eaf0:	d9e0      	bls.n	800eab4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eaf2:	e7b8      	b.n	800ea66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eaf4:	f240 6074 	movw	r0, #1652	@ 0x674
 800eaf8:	4283      	cmp	r3, r0
 800eafa:	d0b4      	beq.n	800ea66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eafc:	d82d      	bhi.n	800eb5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800eafe:	f240 605e 	movw	r0, #1630	@ 0x65e
 800eb02:	4283      	cmp	r3, r0
 800eb04:	d804      	bhi.n	800eb10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800eb06:	f240 605d 	movw	r0, #1629	@ 0x65d
 800eb0a:	4283      	cmp	r3, r0
 800eb0c:	d3d2      	bcc.n	800eab4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eb0e:	e7aa      	b.n	800ea66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eb10:	f240 605f 	movw	r0, #1631	@ 0x65f
 800eb14:	4283      	cmp	r3, r0
 800eb16:	d0cd      	beq.n	800eab4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eb18:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 800eb1c:	d0a3      	beq.n	800ea66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eb1e:	00cb      	lsls	r3, r1, #3
 800eb20:	0649      	lsls	r1, r1, #25
 800eb22:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800eb26:	7a13      	ldrb	r3, [r2, #8]
 800eb28:	ea43 0300 	orr.w	r3, r3, r0
 800eb2c:	bf44      	itt	mi
 800eb2e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800eb32:	b21b      	sxthmi	r3, r3
 800eb34:	1b5d      	subs	r5, r3, r5
 800eb36:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800eb3a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800eb3e:	7b53      	ldrb	r3, [r2, #13]
 800eb40:	015b      	lsls	r3, r3, #5
 800eb42:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800eb46:	7993      	ldrb	r3, [r2, #6]
 800eb48:	430b      	orrs	r3, r1
 800eb4a:	2105      	movs	r1, #5
 800eb4c:	005b      	lsls	r3, r3, #1
 800eb4e:	fb93 f3f1 	sdiv	r3, r3, r1
 800eb52:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800eb56:	440b      	add	r3, r1
 800eb58:	e756      	b.n	800ea08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800eb5a:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 800eb5e:	4283      	cmp	r3, r0
 800eb60:	d809      	bhi.n	800eb76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800eb62:	f240 60df 	movw	r0, #1759	@ 0x6df
 800eb66:	4283      	cmp	r3, r0
 800eb68:	f4bf af7d 	bcs.w	800ea66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eb6c:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 800eb70:	2b05      	cmp	r3, #5
 800eb72:	d8d4      	bhi.n	800eb1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800eb74:	e777      	b.n	800ea66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eb76:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 800eb7a:	4283      	cmp	r3, r0
 800eb7c:	d09a      	beq.n	800eab4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eb7e:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800eb82:	4283      	cmp	r3, r0
 800eb84:	e7ca      	b.n	800eb1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800eb86:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 800eb8a:	d22b      	bcs.n	800ebe4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800eb8c:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 800eb90:	4283      	cmp	r3, r0
 800eb92:	d28f      	bcs.n	800eab4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800eb94:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800eb98:	4283      	cmp	r3, r0
 800eb9a:	d816      	bhi.n	800ebca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800eb9c:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 800eba0:	4283      	cmp	r3, r0
 800eba2:	f4bf af60 	bcs.w	800ea66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800eba6:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 800ebaa:	4283      	cmp	r3, r0
 800ebac:	d80a      	bhi.n	800ebc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800ebae:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800ebb2:	4283      	cmp	r3, r0
 800ebb4:	f4bf af57 	bcs.w	800ea66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ebb8:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 800ebbc:	4283      	cmp	r3, r0
 800ebbe:	f43f af79 	beq.w	800eab4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ebc2:	e7ac      	b.n	800eb1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ebc4:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 800ebc8:	e7f8      	b.n	800ebbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800ebca:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800ebce:	4283      	cmp	r3, r0
 800ebd0:	d802      	bhi.n	800ebd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800ebd2:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800ebd6:	e798      	b.n	800eb0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800ebd8:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 800ebdc:	4283      	cmp	r3, r0
 800ebde:	f47f af42 	bne.w	800ea66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ebe2:	e767      	b.n	800eab4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ebe4:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 800ebe8:	4283      	cmp	r3, r0
 800ebea:	f43f af63 	beq.w	800eab4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ebee:	d802      	bhi.n	800ebf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800ebf0:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 800ebf4:	e7f2      	b.n	800ebdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800ebf6:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 800ebfa:	4283      	cmp	r3, r0
 800ebfc:	d805      	bhi.n	800ec0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800ebfe:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 800ec02:	4283      	cmp	r3, r0
 800ec04:	f4ff af2f 	bcc.w	800ea66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ec08:	e754      	b.n	800eab4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ec0a:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 800ec0e:	4283      	cmp	r3, r0
 800ec10:	e7af      	b.n	800eb72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800ec12:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800ec16:	4617      	mov	r7, r2
 800ec18:	f102 0808 	add.w	r8, r2, #8
 800ec1c:	4666      	mov	r6, ip
 800ec1e:	6838      	ldr	r0, [r7, #0]
 800ec20:	3708      	adds	r7, #8
 800ec22:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800ec26:	46e6      	mov	lr, ip
 800ec28:	4547      	cmp	r7, r8
 800ec2a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800ec2e:	46f4      	mov	ip, lr
 800ec30:	d1f5      	bne.n	800ec1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800ec32:	6838      	ldr	r0, [r7, #0]
 800ec34:	f8ce 0000 	str.w	r0, [lr]
 800ec38:	88b9      	ldrh	r1, [r7, #4]
 800ec3a:	f8ae 1004 	strh.w	r1, [lr, #4]
 800ec3e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800ec42:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ec46:	d009      	beq.n	800ec5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 800ec48:	7b51      	ldrb	r1, [r2, #13]
 800ec4a:	7992      	ldrb	r2, [r2, #6]
 800ec4c:	0149      	lsls	r1, r1, #5
 800ec4e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800ec52:	4311      	orrs	r1, r2
 800ec54:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800ec58:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800ec5c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ec60:	b2ad      	uxth	r5, r5
 800ec62:	d00d      	beq.n	800ec80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 800ec64:	442b      	add	r3, r5
 800ec66:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800ec70:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800ec74:	10db      	asrs	r3, r3, #3
 800ec76:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ec7a:	4313      	orrs	r3, r2
 800ec7c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800ec80:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800ec84:	00cb      	lsls	r3, r1, #3
 800ec86:	064f      	lsls	r7, r1, #25
 800ec88:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800ec8c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800ec90:	ea43 0302 	orr.w	r3, r3, r2
 800ec94:	bf44      	itt	mi
 800ec96:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ec9a:	b21b      	sxthmi	r3, r3
 800ec9c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800eca0:	1b5b      	subs	r3, r3, r5
 800eca2:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800eca6:	4632      	mov	r2, r6
 800eca8:	e6f9      	b.n	800ea9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800ecaa:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800ecae:	4617      	mov	r7, r2
 800ecb0:	f102 0908 	add.w	r9, r2, #8
 800ecb4:	4666      	mov	r6, ip
 800ecb6:	6838      	ldr	r0, [r7, #0]
 800ecb8:	3708      	adds	r7, #8
 800ecba:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800ecbe:	46e0      	mov	r8, ip
 800ecc0:	454f      	cmp	r7, r9
 800ecc2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800ecc6:	46c4      	mov	ip, r8
 800ecc8:	d1f5      	bne.n	800ecb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 800ecca:	6838      	ldr	r0, [r7, #0]
 800eccc:	f8c8 0000 	str.w	r0, [r8]
 800ecd0:	88b9      	ldrh	r1, [r7, #4]
 800ecd2:	f8a8 1004 	strh.w	r1, [r8, #4]
 800ecd6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800ecda:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ecde:	d009      	beq.n	800ecf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 800ece0:	7b51      	ldrb	r1, [r2, #13]
 800ece2:	7992      	ldrb	r2, [r2, #6]
 800ece4:	0149      	lsls	r1, r1, #5
 800ece6:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800ecea:	4311      	orrs	r1, r2
 800ecec:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800ecf0:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800ecf4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ecf8:	d00e      	beq.n	800ed18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 800ecfa:	eba3 030e 	sub.w	r3, r3, lr
 800ecfe:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800ed02:	b29b      	uxth	r3, r3
 800ed04:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800ed08:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800ed0c:	10db      	asrs	r3, r3, #3
 800ed0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ed12:	4313      	orrs	r3, r2
 800ed14:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800ed18:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800ed1c:	00cb      	lsls	r3, r1, #3
 800ed1e:	0648      	lsls	r0, r1, #25
 800ed20:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800ed24:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800ed28:	ea43 0302 	orr.w	r3, r3, r2
 800ed2c:	bf44      	itt	mi
 800ed2e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ed32:	b21b      	sxthmi	r3, r3
 800ed34:	1b5d      	subs	r5, r3, r5
 800ed36:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800ed3a:	e7b4      	b.n	800eca6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0800ed3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800ed3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed40:	461e      	mov	r6, r3
 800ed42:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800ed44:	4604      	mov	r4, r0
 800ed46:	4617      	mov	r7, r2
 800ed48:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ed4c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800ed50:	f7ff f9d8 	bl	800e104 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800ed54:	4605      	mov	r5, r0
 800ed56:	b918      	cbnz	r0, 800ed60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800ed58:	6030      	str	r0, [r6, #0]
 800ed5a:	4628      	mov	r0, r5
 800ed5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	4601      	mov	r1, r0
 800ed64:	4638      	mov	r0, r7
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	4798      	blx	r3
 800ed6a:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800ed6e:	4602      	mov	r2, r0
 800ed70:	6030      	str	r0, [r6, #0]
 800ed72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ed76:	d213      	bcs.n	800eda0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800ed78:	4643      	mov	r3, r8
 800ed7a:	4639      	mov	r1, r7
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	f7ff fe39 	bl	800e9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800ed82:	6030      	str	r0, [r6, #0]
 800ed84:	6833      	ldr	r3, [r6, #0]
 800ed86:	b143      	cbz	r3, 800ed9a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800ed88:	7b5a      	ldrb	r2, [r3, #13]
 800ed8a:	7a9b      	ldrb	r3, [r3, #10]
 800ed8c:	0052      	lsls	r2, r2, #1
 800ed8e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800ed92:	4313      	orrs	r3, r2
 800ed94:	bf0c      	ite	eq
 800ed96:	2301      	moveq	r3, #1
 800ed98:	2300      	movne	r3, #0
 800ed9a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800ed9e:	e7dc      	b.n	800ed5a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800eda0:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	2b7f      	cmp	r3, #127	@ 0x7f
 800eda8:	d804      	bhi.n	800edb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800edaa:	4639      	mov	r1, r7
 800edac:	4620      	mov	r0, r4
 800edae:	f7ff fce7 	bl	800e780 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800edb2:	e7e6      	b.n	800ed82 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800edb4:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d0e3      	beq.n	800ed84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800edbc:	f640 1302 	movw	r3, #2306	@ 0x902
 800edc0:	429d      	cmp	r5, r3
 800edc2:	d1df      	bne.n	800ed84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800edc4:	4601      	mov	r1, r0
 800edc6:	4620      	mov	r0, r4
 800edc8:	f7ff fcaa 	bl	800e720 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800edcc:	e7d9      	b.n	800ed82 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800edce <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800edce:	b510      	push	{r4, lr}
 800edd0:	4604      	mov	r4, r0
 800edd2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800edd6:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800edd8:	b1e1      	cbz	r1, 800ee14 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800edda:	2b0a      	cmp	r3, #10
 800eddc:	d02d      	beq.n	800ee3a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800edde:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800ede0:	3901      	subs	r1, #1
 800ede2:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800ede6:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800ede8:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 800edec:	1c51      	adds	r1, r2, #1
 800edee:	b289      	uxth	r1, r1
 800edf0:	2901      	cmp	r1, #1
 800edf2:	bf8a      	itet	hi
 800edf4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800edf8:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 800edfa:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 800edfc:	1c5a      	adds	r2, r3, #1
 800edfe:	8722      	strh	r2, [r4, #56]	@ 0x38
 800ee00:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800ee02:	4413      	add	r3, r2
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	2b09      	cmp	r3, #9
 800ee08:	bf88      	it	hi
 800ee0a:	3b0a      	subhi	r3, #10
 800ee0c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ee10:	8458      	strh	r0, [r3, #34]	@ 0x22
 800ee12:	e7de      	b.n	800edd2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800ee14:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800ee16:	2b0a      	cmp	r3, #10
 800ee18:	d00f      	beq.n	800ee3a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	f7ff fc3f 	bl	800e69e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800ee20:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800ee22:	1c5a      	adds	r2, r3, #1
 800ee24:	8722      	strh	r2, [r4, #56]	@ 0x38
 800ee26:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800ee28:	4413      	add	r3, r2
 800ee2a:	b29b      	uxth	r3, r3
 800ee2c:	2b09      	cmp	r3, #9
 800ee2e:	bf88      	it	hi
 800ee30:	3b0a      	subhi	r3, #10
 800ee32:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ee36:	8458      	strh	r0, [r3, #34]	@ 0x22
 800ee38:	e7ec      	b.n	800ee14 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800ee3a:	bd10      	pop	{r4, pc}

0800ee3c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800ee3c:	b538      	push	{r3, r4, r5, lr}
 800ee3e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800ee40:	4604      	mov	r4, r0
 800ee42:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800ee46:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 800ee48:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 800ee4a:	3a01      	subs	r2, #1
 800ee4c:	8702      	strh	r2, [r0, #56]	@ 0x38
 800ee4e:	1c5a      	adds	r2, r3, #1
 800ee50:	b292      	uxth	r2, r2
 800ee52:	2a09      	cmp	r2, #9
 800ee54:	bf8a      	itet	hi
 800ee56:	3b09      	subhi	r3, #9
 800ee58:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 800ee5a:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 800ee5c:	f7ff ffb7 	bl	800edce <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800ee60:	8c23      	ldrh	r3, [r4, #32]
 800ee62:	2b01      	cmp	r3, #1
 800ee64:	bf9c      	itt	ls
 800ee66:	3301      	addls	r3, #1
 800ee68:	8423      	strhls	r3, [r4, #32]
 800ee6a:	8be3      	ldrh	r3, [r4, #30]
 800ee6c:	b90b      	cbnz	r3, 800ee72 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800ee6e:	2302      	movs	r3, #2
 800ee70:	83e3      	strh	r3, [r4, #30]
 800ee72:	8be3      	ldrh	r3, [r4, #30]
 800ee74:	4628      	mov	r0, r5
 800ee76:	3b01      	subs	r3, #1
 800ee78:	b29b      	uxth	r3, r3
 800ee7a:	83e3      	strh	r3, [r4, #30]
 800ee7c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800ee80:	8365      	strh	r5, [r4, #26]
 800ee82:	bd38      	pop	{r3, r4, r5, pc}

0800ee84 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800ee84:	428a      	cmp	r2, r1
 800ee86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee8a:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 800ee8c:	d932      	bls.n	800eef4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 800ee8e:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 800ee90:	1a54      	subs	r4, r2, r1
 800ee92:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 800ee96:	19ee      	adds	r6, r5, r7
 800ee98:	fa1f fe84 	uxth.w	lr, r4
 800ee9c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 800eea0:	3e01      	subs	r6, #1
 800eea2:	b2b4      	uxth	r4, r6
 800eea4:	eba4 090e 	sub.w	r9, r4, lr
 800eea8:	fa1f f989 	uxth.w	r9, r9
 800eeac:	2c09      	cmp	r4, #9
 800eeae:	4626      	mov	r6, r4
 800eeb0:	bf88      	it	hi
 800eeb2:	f1a4 060a 	subhi.w	r6, r4, #10
 800eeb6:	f1bc 0f00 	cmp.w	ip, #0
 800eeba:	f104 34ff 	add.w	r4, r4, #4294967295
 800eebe:	bf08      	it	eq
 800eec0:	f04f 0c02 	moveq.w	ip, #2
 800eec4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800eec8:	b2a4      	uxth	r4, r4
 800eeca:	f10c 3cff 	add.w	ip, ip, #4294967295
 800eece:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800eed2:	454c      	cmp	r4, r9
 800eed4:	fa1f fc8c 	uxth.w	ip, ip
 800eed8:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800eedc:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 800eee0:	d1e4      	bne.n	800eeac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800eee2:	eba5 050e 	sub.w	r5, r5, lr
 800eee6:	eb0e 0408 	add.w	r4, lr, r8
 800eeea:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 800eeee:	8705      	strh	r5, [r0, #56]	@ 0x38
 800eef0:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 800eef4:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800eef6:	250a      	movs	r5, #10
 800eef8:	1a64      	subs	r4, r4, r1
 800eefa:	4439      	add	r1, r7
 800eefc:	b289      	uxth	r1, r1
 800eefe:	8704      	strh	r4, [r0, #56]	@ 0x38
 800ef00:	2909      	cmp	r1, #9
 800ef02:	bf88      	it	hi
 800ef04:	390a      	subhi	r1, #10
 800ef06:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800ef08:	b18a      	cbz	r2, 800ef2e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 800ef0a:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 800ef0c:	3a01      	subs	r2, #1
 800ef0e:	3101      	adds	r1, #1
 800ef10:	b292      	uxth	r2, r2
 800ef12:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800ef16:	8701      	strh	r1, [r0, #56]	@ 0x38
 800ef18:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800ef1a:	b901      	cbnz	r1, 800ef1e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 800ef1c:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800ef1e:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800ef20:	3901      	subs	r1, #1
 800ef22:	b289      	uxth	r1, r1
 800ef24:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800ef26:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800ef2a:	844c      	strh	r4, [r1, #34]	@ 0x22
 800ef2c:	e7ec      	b.n	800ef08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 800ef2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef32:	f7ff bf4c 	b.w	800edce <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800ef36 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800ef36:	b570      	push	{r4, r5, r6, lr}
 800ef38:	2500      	movs	r5, #0
 800ef3a:	4295      	cmp	r5, r2
 800ef3c:	d011      	beq.n	800ef62 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800ef3e:	8bc4      	ldrh	r4, [r0, #30]
 800ef40:	f831 6b02 	ldrh.w	r6, [r1], #2
 800ef44:	4414      	add	r4, r2
 800ef46:	3c01      	subs	r4, #1
 800ef48:	1b64      	subs	r4, r4, r5
 800ef4a:	b2a4      	uxth	r4, r4
 800ef4c:	2c01      	cmp	r4, #1
 800ef4e:	bf88      	it	hi
 800ef50:	3c02      	subhi	r4, #2
 800ef52:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800ef56:	8b64      	ldrh	r4, [r4, #26]
 800ef58:	42b4      	cmp	r4, r6
 800ef5a:	d117      	bne.n	800ef8c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800ef5c:	3501      	adds	r5, #1
 800ef5e:	b2ad      	uxth	r5, r5
 800ef60:	e7eb      	b.n	800ef3a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800ef62:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800ef66:	2400      	movs	r4, #0
 800ef68:	4413      	add	r3, r2
 800ef6a:	b2a2      	uxth	r2, r4
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	da0f      	bge.n	800ef90 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800ef70:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 800ef72:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800ef76:	3401      	adds	r4, #1
 800ef78:	4432      	add	r2, r6
 800ef7a:	b292      	uxth	r2, r2
 800ef7c:	2a09      	cmp	r2, #9
 800ef7e:	bf88      	it	hi
 800ef80:	3a0a      	subhi	r2, #10
 800ef82:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800ef86:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800ef88:	42aa      	cmp	r2, r5
 800ef8a:	d0ee      	beq.n	800ef6a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	bd70      	pop	{r4, r5, r6, pc}
 800ef90:	2001      	movs	r0, #1
 800ef92:	e7fc      	b.n	800ef8e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800ef94 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800ef94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef98:	4605      	mov	r5, r0
 800ef9a:	4616      	mov	r6, r2
 800ef9c:	1c8c      	adds	r4, r1, #2
 800ef9e:	8809      	ldrh	r1, [r1, #0]
 800efa0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800efa4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800efa8:	42b3      	cmp	r3, r6
 800efaa:	d124      	bne.n	800eff6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800efac:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800efb0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800efb4:	f001 070f 	and.w	r7, r1, #15
 800efb8:	4652      	mov	r2, sl
 800efba:	f8cd 8000 	str.w	r8, [sp]
 800efbe:	464b      	mov	r3, r9
 800efc0:	4621      	mov	r1, r4
 800efc2:	4628      	mov	r0, r5
 800efc4:	f7ff ffb7 	bl	800ef36 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800efc8:	4683      	mov	fp, r0
 800efca:	b168      	cbz	r0, 800efe8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800efcc:	eb0a 0109 	add.w	r1, sl, r9
 800efd0:	463a      	mov	r2, r7
 800efd2:	4628      	mov	r0, r5
 800efd4:	4441      	add	r1, r8
 800efd6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800efda:	4649      	mov	r1, r9
 800efdc:	f7ff ff52 	bl	800ee84 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800efe0:	4658      	mov	r0, fp
 800efe2:	b003      	add	sp, #12
 800efe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efe8:	eb07 010a 	add.w	r1, r7, sl
 800efec:	4449      	add	r1, r9
 800efee:	4441      	add	r1, r8
 800eff0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800eff4:	e7d2      	b.n	800ef9c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800eff6:	f04f 0b00 	mov.w	fp, #0
 800effa:	e7f1      	b.n	800efe0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800effc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800effc:	b570      	push	{r4, r5, r6, lr}
 800effe:	8810      	ldrh	r0, [r2, #0]
 800f000:	4298      	cmp	r0, r3
 800f002:	d817      	bhi.n	800f034 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f004:	1e48      	subs	r0, r1, #1
 800f006:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800f00a:	4298      	cmp	r0, r3
 800f00c:	d312      	bcc.n	800f034 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f00e:	2400      	movs	r4, #0
 800f010:	428c      	cmp	r4, r1
 800f012:	d20f      	bcs.n	800f034 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f014:	1860      	adds	r0, r4, r1
 800f016:	1040      	asrs	r0, r0, #1
 800f018:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800f01c:	0085      	lsls	r5, r0, #2
 800f01e:	42b3      	cmp	r3, r6
 800f020:	d902      	bls.n	800f028 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800f022:	3001      	adds	r0, #1
 800f024:	b284      	uxth	r4, r0
 800f026:	e7f3      	b.n	800f010 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f028:	d201      	bcs.n	800f02e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800f02a:	b281      	uxth	r1, r0
 800f02c:	e7f0      	b.n	800f010 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f02e:	442a      	add	r2, r5
 800f030:	8850      	ldrh	r0, [r2, #2]
 800f032:	bd70      	pop	{r4, r5, r6, pc}
 800f034:	2000      	movs	r0, #0
 800f036:	e7fc      	b.n	800f032 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800f038 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800f038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f03c:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800f03e:	4604      	mov	r4, r0
 800f040:	260b      	movs	r6, #11
 800f042:	886f      	ldrh	r7, [r5, #2]
 800f044:	087f      	lsrs	r7, r7, #1
 800f046:	3e01      	subs	r6, #1
 800f048:	d013      	beq.n	800f072 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f04a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800f04c:	462a      	mov	r2, r5
 800f04e:	4639      	mov	r1, r7
 800f050:	4620      	mov	r0, r4
 800f052:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f056:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800f05a:	4643      	mov	r3, r8
 800f05c:	f7ff ffce 	bl	800effc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800f060:	b138      	cbz	r0, 800f072 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f062:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800f066:	4642      	mov	r2, r8
 800f068:	4620      	mov	r0, r4
 800f06a:	f7ff ff93 	bl	800ef94 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800f06e:	2800      	cmp	r0, #0
 800f070:	d1e9      	bne.n	800f046 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800f072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f076 <_ZdlPvj>:
 800f076:	f000 b812 	b.w	800f09e <_ZdlPv>

0800f07a <__cxa_guard_acquire>:
 800f07a:	6802      	ldr	r2, [r0, #0]
 800f07c:	07d2      	lsls	r2, r2, #31
 800f07e:	4603      	mov	r3, r0
 800f080:	d405      	bmi.n	800f08e <__cxa_guard_acquire+0x14>
 800f082:	7842      	ldrb	r2, [r0, #1]
 800f084:	b102      	cbz	r2, 800f088 <__cxa_guard_acquire+0xe>
 800f086:	deff      	udf	#255	@ 0xff
 800f088:	2001      	movs	r0, #1
 800f08a:	7058      	strb	r0, [r3, #1]
 800f08c:	4770      	bx	lr
 800f08e:	2000      	movs	r0, #0
 800f090:	4770      	bx	lr

0800f092 <__cxa_guard_release>:
 800f092:	2301      	movs	r3, #1
 800f094:	6003      	str	r3, [r0, #0]
 800f096:	4770      	bx	lr

0800f098 <__cxa_pure_virtual>:
 800f098:	b508      	push	{r3, lr}
 800f09a:	f000 f80f 	bl	800f0bc <_ZSt9terminatev>

0800f09e <_ZdlPv>:
 800f09e:	f000 b845 	b.w	800f12c <free>

0800f0a2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f0a2:	b508      	push	{r3, lr}
 800f0a4:	4780      	blx	r0
 800f0a6:	f000 f80e 	bl	800f0c6 <abort>
	...

0800f0ac <_ZSt13get_terminatev>:
 800f0ac:	4b02      	ldr	r3, [pc, #8]	@ (800f0b8 <_ZSt13get_terminatev+0xc>)
 800f0ae:	6818      	ldr	r0, [r3, #0]
 800f0b0:	f3bf 8f5b 	dmb	ish
 800f0b4:	4770      	bx	lr
 800f0b6:	bf00      	nop
 800f0b8:	240001c0 	.word	0x240001c0

0800f0bc <_ZSt9terminatev>:
 800f0bc:	b508      	push	{r3, lr}
 800f0be:	f7ff fff5 	bl	800f0ac <_ZSt13get_terminatev>
 800f0c2:	f7ff ffee 	bl	800f0a2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f0c6 <abort>:
 800f0c6:	b508      	push	{r3, lr}
 800f0c8:	2006      	movs	r0, #6
 800f0ca:	f000 fa2d 	bl	800f528 <raise>
 800f0ce:	2001      	movs	r0, #1
 800f0d0:	f7f3 f9e4 	bl	800249c <_exit>

0800f0d4 <__assert_func>:
 800f0d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0d6:	4614      	mov	r4, r2
 800f0d8:	461a      	mov	r2, r3
 800f0da:	4b09      	ldr	r3, [pc, #36]	@ (800f100 <__assert_func+0x2c>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	4605      	mov	r5, r0
 800f0e0:	68d8      	ldr	r0, [r3, #12]
 800f0e2:	b14c      	cbz	r4, 800f0f8 <__assert_func+0x24>
 800f0e4:	4b07      	ldr	r3, [pc, #28]	@ (800f104 <__assert_func+0x30>)
 800f0e6:	9100      	str	r1, [sp, #0]
 800f0e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f0ec:	4906      	ldr	r1, [pc, #24]	@ (800f108 <__assert_func+0x34>)
 800f0ee:	462b      	mov	r3, r5
 800f0f0:	f000 f976 	bl	800f3e0 <fiprintf>
 800f0f4:	f7ff ffe7 	bl	800f0c6 <abort>
 800f0f8:	4b04      	ldr	r3, [pc, #16]	@ (800f10c <__assert_func+0x38>)
 800f0fa:	461c      	mov	r4, r3
 800f0fc:	e7f3      	b.n	800f0e6 <__assert_func+0x12>
 800f0fe:	bf00      	nop
 800f100:	240001d0 	.word	0x240001d0
 800f104:	080104d8 	.word	0x080104d8
 800f108:	080104e5 	.word	0x080104e5
 800f10c:	08010513 	.word	0x08010513

0800f110 <atexit>:
 800f110:	2300      	movs	r3, #0
 800f112:	4601      	mov	r1, r0
 800f114:	461a      	mov	r2, r3
 800f116:	4618      	mov	r0, r3
 800f118:	f000 baa6 	b.w	800f668 <__register_exitproc>

0800f11c <malloc>:
 800f11c:	4b02      	ldr	r3, [pc, #8]	@ (800f128 <malloc+0xc>)
 800f11e:	4601      	mov	r1, r0
 800f120:	6818      	ldr	r0, [r3, #0]
 800f122:	f000 b82d 	b.w	800f180 <_malloc_r>
 800f126:	bf00      	nop
 800f128:	240001d0 	.word	0x240001d0

0800f12c <free>:
 800f12c:	4b02      	ldr	r3, [pc, #8]	@ (800f138 <free+0xc>)
 800f12e:	4601      	mov	r1, r0
 800f130:	6818      	ldr	r0, [r3, #0]
 800f132:	f000 baf5 	b.w	800f720 <_free_r>
 800f136:	bf00      	nop
 800f138:	240001d0 	.word	0x240001d0

0800f13c <sbrk_aligned>:
 800f13c:	b570      	push	{r4, r5, r6, lr}
 800f13e:	4e0f      	ldr	r6, [pc, #60]	@ (800f17c <sbrk_aligned+0x40>)
 800f140:	460c      	mov	r4, r1
 800f142:	6831      	ldr	r1, [r6, #0]
 800f144:	4605      	mov	r5, r0
 800f146:	b911      	cbnz	r1, 800f14e <sbrk_aligned+0x12>
 800f148:	f000 fa3e 	bl	800f5c8 <_sbrk_r>
 800f14c:	6030      	str	r0, [r6, #0]
 800f14e:	4621      	mov	r1, r4
 800f150:	4628      	mov	r0, r5
 800f152:	f000 fa39 	bl	800f5c8 <_sbrk_r>
 800f156:	1c43      	adds	r3, r0, #1
 800f158:	d103      	bne.n	800f162 <sbrk_aligned+0x26>
 800f15a:	f04f 34ff 	mov.w	r4, #4294967295
 800f15e:	4620      	mov	r0, r4
 800f160:	bd70      	pop	{r4, r5, r6, pc}
 800f162:	1cc4      	adds	r4, r0, #3
 800f164:	f024 0403 	bic.w	r4, r4, #3
 800f168:	42a0      	cmp	r0, r4
 800f16a:	d0f8      	beq.n	800f15e <sbrk_aligned+0x22>
 800f16c:	1a21      	subs	r1, r4, r0
 800f16e:	4628      	mov	r0, r5
 800f170:	f000 fa2a 	bl	800f5c8 <_sbrk_r>
 800f174:	3001      	adds	r0, #1
 800f176:	d1f2      	bne.n	800f15e <sbrk_aligned+0x22>
 800f178:	e7ef      	b.n	800f15a <sbrk_aligned+0x1e>
 800f17a:	bf00      	nop
 800f17c:	240007a0 	.word	0x240007a0

0800f180 <_malloc_r>:
 800f180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f184:	1ccd      	adds	r5, r1, #3
 800f186:	f025 0503 	bic.w	r5, r5, #3
 800f18a:	3508      	adds	r5, #8
 800f18c:	2d0c      	cmp	r5, #12
 800f18e:	bf38      	it	cc
 800f190:	250c      	movcc	r5, #12
 800f192:	2d00      	cmp	r5, #0
 800f194:	4606      	mov	r6, r0
 800f196:	db01      	blt.n	800f19c <_malloc_r+0x1c>
 800f198:	42a9      	cmp	r1, r5
 800f19a:	d904      	bls.n	800f1a6 <_malloc_r+0x26>
 800f19c:	230c      	movs	r3, #12
 800f19e:	6033      	str	r3, [r6, #0]
 800f1a0:	2000      	movs	r0, #0
 800f1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f27c <_malloc_r+0xfc>
 800f1aa:	f000 f869 	bl	800f280 <__malloc_lock>
 800f1ae:	f8d8 3000 	ldr.w	r3, [r8]
 800f1b2:	461c      	mov	r4, r3
 800f1b4:	bb44      	cbnz	r4, 800f208 <_malloc_r+0x88>
 800f1b6:	4629      	mov	r1, r5
 800f1b8:	4630      	mov	r0, r6
 800f1ba:	f7ff ffbf 	bl	800f13c <sbrk_aligned>
 800f1be:	1c43      	adds	r3, r0, #1
 800f1c0:	4604      	mov	r4, r0
 800f1c2:	d158      	bne.n	800f276 <_malloc_r+0xf6>
 800f1c4:	f8d8 4000 	ldr.w	r4, [r8]
 800f1c8:	4627      	mov	r7, r4
 800f1ca:	2f00      	cmp	r7, #0
 800f1cc:	d143      	bne.n	800f256 <_malloc_r+0xd6>
 800f1ce:	2c00      	cmp	r4, #0
 800f1d0:	d04b      	beq.n	800f26a <_malloc_r+0xea>
 800f1d2:	6823      	ldr	r3, [r4, #0]
 800f1d4:	4639      	mov	r1, r7
 800f1d6:	4630      	mov	r0, r6
 800f1d8:	eb04 0903 	add.w	r9, r4, r3
 800f1dc:	f000 f9f4 	bl	800f5c8 <_sbrk_r>
 800f1e0:	4581      	cmp	r9, r0
 800f1e2:	d142      	bne.n	800f26a <_malloc_r+0xea>
 800f1e4:	6821      	ldr	r1, [r4, #0]
 800f1e6:	1a6d      	subs	r5, r5, r1
 800f1e8:	4629      	mov	r1, r5
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	f7ff ffa6 	bl	800f13c <sbrk_aligned>
 800f1f0:	3001      	adds	r0, #1
 800f1f2:	d03a      	beq.n	800f26a <_malloc_r+0xea>
 800f1f4:	6823      	ldr	r3, [r4, #0]
 800f1f6:	442b      	add	r3, r5
 800f1f8:	6023      	str	r3, [r4, #0]
 800f1fa:	f8d8 3000 	ldr.w	r3, [r8]
 800f1fe:	685a      	ldr	r2, [r3, #4]
 800f200:	bb62      	cbnz	r2, 800f25c <_malloc_r+0xdc>
 800f202:	f8c8 7000 	str.w	r7, [r8]
 800f206:	e00f      	b.n	800f228 <_malloc_r+0xa8>
 800f208:	6822      	ldr	r2, [r4, #0]
 800f20a:	1b52      	subs	r2, r2, r5
 800f20c:	d420      	bmi.n	800f250 <_malloc_r+0xd0>
 800f20e:	2a0b      	cmp	r2, #11
 800f210:	d917      	bls.n	800f242 <_malloc_r+0xc2>
 800f212:	1961      	adds	r1, r4, r5
 800f214:	42a3      	cmp	r3, r4
 800f216:	6025      	str	r5, [r4, #0]
 800f218:	bf18      	it	ne
 800f21a:	6059      	strne	r1, [r3, #4]
 800f21c:	6863      	ldr	r3, [r4, #4]
 800f21e:	bf08      	it	eq
 800f220:	f8c8 1000 	streq.w	r1, [r8]
 800f224:	5162      	str	r2, [r4, r5]
 800f226:	604b      	str	r3, [r1, #4]
 800f228:	4630      	mov	r0, r6
 800f22a:	f000 f82f 	bl	800f28c <__malloc_unlock>
 800f22e:	f104 000b 	add.w	r0, r4, #11
 800f232:	1d23      	adds	r3, r4, #4
 800f234:	f020 0007 	bic.w	r0, r0, #7
 800f238:	1ac2      	subs	r2, r0, r3
 800f23a:	bf1c      	itt	ne
 800f23c:	1a1b      	subne	r3, r3, r0
 800f23e:	50a3      	strne	r3, [r4, r2]
 800f240:	e7af      	b.n	800f1a2 <_malloc_r+0x22>
 800f242:	6862      	ldr	r2, [r4, #4]
 800f244:	42a3      	cmp	r3, r4
 800f246:	bf0c      	ite	eq
 800f248:	f8c8 2000 	streq.w	r2, [r8]
 800f24c:	605a      	strne	r2, [r3, #4]
 800f24e:	e7eb      	b.n	800f228 <_malloc_r+0xa8>
 800f250:	4623      	mov	r3, r4
 800f252:	6864      	ldr	r4, [r4, #4]
 800f254:	e7ae      	b.n	800f1b4 <_malloc_r+0x34>
 800f256:	463c      	mov	r4, r7
 800f258:	687f      	ldr	r7, [r7, #4]
 800f25a:	e7b6      	b.n	800f1ca <_malloc_r+0x4a>
 800f25c:	461a      	mov	r2, r3
 800f25e:	685b      	ldr	r3, [r3, #4]
 800f260:	42a3      	cmp	r3, r4
 800f262:	d1fb      	bne.n	800f25c <_malloc_r+0xdc>
 800f264:	2300      	movs	r3, #0
 800f266:	6053      	str	r3, [r2, #4]
 800f268:	e7de      	b.n	800f228 <_malloc_r+0xa8>
 800f26a:	230c      	movs	r3, #12
 800f26c:	6033      	str	r3, [r6, #0]
 800f26e:	4630      	mov	r0, r6
 800f270:	f000 f80c 	bl	800f28c <__malloc_unlock>
 800f274:	e794      	b.n	800f1a0 <_malloc_r+0x20>
 800f276:	6005      	str	r5, [r0, #0]
 800f278:	e7d6      	b.n	800f228 <_malloc_r+0xa8>
 800f27a:	bf00      	nop
 800f27c:	240007a4 	.word	0x240007a4

0800f280 <__malloc_lock>:
 800f280:	4801      	ldr	r0, [pc, #4]	@ (800f288 <__malloc_lock+0x8>)
 800f282:	f000 b9ee 	b.w	800f662 <__retarget_lock_acquire_recursive>
 800f286:	bf00      	nop
 800f288:	240008e8 	.word	0x240008e8

0800f28c <__malloc_unlock>:
 800f28c:	4801      	ldr	r0, [pc, #4]	@ (800f294 <__malloc_unlock+0x8>)
 800f28e:	f000 b9e9 	b.w	800f664 <__retarget_lock_release_recursive>
 800f292:	bf00      	nop
 800f294:	240008e8 	.word	0x240008e8

0800f298 <std>:
 800f298:	2300      	movs	r3, #0
 800f29a:	b510      	push	{r4, lr}
 800f29c:	4604      	mov	r4, r0
 800f29e:	e9c0 3300 	strd	r3, r3, [r0]
 800f2a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f2a6:	6083      	str	r3, [r0, #8]
 800f2a8:	8181      	strh	r1, [r0, #12]
 800f2aa:	6643      	str	r3, [r0, #100]	@ 0x64
 800f2ac:	81c2      	strh	r2, [r0, #14]
 800f2ae:	6183      	str	r3, [r0, #24]
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	2208      	movs	r2, #8
 800f2b4:	305c      	adds	r0, #92	@ 0x5c
 800f2b6:	f000 f906 	bl	800f4c6 <memset>
 800f2ba:	4b0d      	ldr	r3, [pc, #52]	@ (800f2f0 <std+0x58>)
 800f2bc:	6263      	str	r3, [r4, #36]	@ 0x24
 800f2be:	4b0d      	ldr	r3, [pc, #52]	@ (800f2f4 <std+0x5c>)
 800f2c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f2c2:	4b0d      	ldr	r3, [pc, #52]	@ (800f2f8 <std+0x60>)
 800f2c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800f2fc <std+0x64>)
 800f2c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800f2ca:	4b0d      	ldr	r3, [pc, #52]	@ (800f300 <std+0x68>)
 800f2cc:	6224      	str	r4, [r4, #32]
 800f2ce:	429c      	cmp	r4, r3
 800f2d0:	d006      	beq.n	800f2e0 <std+0x48>
 800f2d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f2d6:	4294      	cmp	r4, r2
 800f2d8:	d002      	beq.n	800f2e0 <std+0x48>
 800f2da:	33d0      	adds	r3, #208	@ 0xd0
 800f2dc:	429c      	cmp	r4, r3
 800f2de:	d105      	bne.n	800f2ec <std+0x54>
 800f2e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2e8:	f000 b9ba 	b.w	800f660 <__retarget_lock_init_recursive>
 800f2ec:	bd10      	pop	{r4, pc}
 800f2ee:	bf00      	nop
 800f2f0:	0800f441 	.word	0x0800f441
 800f2f4:	0800f463 	.word	0x0800f463
 800f2f8:	0800f49b 	.word	0x0800f49b
 800f2fc:	0800f4bf 	.word	0x0800f4bf
 800f300:	240007a8 	.word	0x240007a8

0800f304 <stdio_exit_handler>:
 800f304:	4a02      	ldr	r2, [pc, #8]	@ (800f310 <stdio_exit_handler+0xc>)
 800f306:	4903      	ldr	r1, [pc, #12]	@ (800f314 <stdio_exit_handler+0x10>)
 800f308:	4803      	ldr	r0, [pc, #12]	@ (800f318 <stdio_exit_handler+0x14>)
 800f30a:	f000 b87b 	b.w	800f404 <_fwalk_sglue>
 800f30e:	bf00      	nop
 800f310:	240001c4 	.word	0x240001c4
 800f314:	0800fe59 	.word	0x0800fe59
 800f318:	240001d4 	.word	0x240001d4

0800f31c <cleanup_stdio>:
 800f31c:	6841      	ldr	r1, [r0, #4]
 800f31e:	4b0c      	ldr	r3, [pc, #48]	@ (800f350 <cleanup_stdio+0x34>)
 800f320:	4299      	cmp	r1, r3
 800f322:	b510      	push	{r4, lr}
 800f324:	4604      	mov	r4, r0
 800f326:	d001      	beq.n	800f32c <cleanup_stdio+0x10>
 800f328:	f000 fd96 	bl	800fe58 <_fflush_r>
 800f32c:	68a1      	ldr	r1, [r4, #8]
 800f32e:	4b09      	ldr	r3, [pc, #36]	@ (800f354 <cleanup_stdio+0x38>)
 800f330:	4299      	cmp	r1, r3
 800f332:	d002      	beq.n	800f33a <cleanup_stdio+0x1e>
 800f334:	4620      	mov	r0, r4
 800f336:	f000 fd8f 	bl	800fe58 <_fflush_r>
 800f33a:	68e1      	ldr	r1, [r4, #12]
 800f33c:	4b06      	ldr	r3, [pc, #24]	@ (800f358 <cleanup_stdio+0x3c>)
 800f33e:	4299      	cmp	r1, r3
 800f340:	d004      	beq.n	800f34c <cleanup_stdio+0x30>
 800f342:	4620      	mov	r0, r4
 800f344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f348:	f000 bd86 	b.w	800fe58 <_fflush_r>
 800f34c:	bd10      	pop	{r4, pc}
 800f34e:	bf00      	nop
 800f350:	240007a8 	.word	0x240007a8
 800f354:	24000810 	.word	0x24000810
 800f358:	24000878 	.word	0x24000878

0800f35c <global_stdio_init.part.0>:
 800f35c:	b510      	push	{r4, lr}
 800f35e:	4b0b      	ldr	r3, [pc, #44]	@ (800f38c <global_stdio_init.part.0+0x30>)
 800f360:	4c0b      	ldr	r4, [pc, #44]	@ (800f390 <global_stdio_init.part.0+0x34>)
 800f362:	4a0c      	ldr	r2, [pc, #48]	@ (800f394 <global_stdio_init.part.0+0x38>)
 800f364:	601a      	str	r2, [r3, #0]
 800f366:	4620      	mov	r0, r4
 800f368:	2200      	movs	r2, #0
 800f36a:	2104      	movs	r1, #4
 800f36c:	f7ff ff94 	bl	800f298 <std>
 800f370:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f374:	2201      	movs	r2, #1
 800f376:	2109      	movs	r1, #9
 800f378:	f7ff ff8e 	bl	800f298 <std>
 800f37c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f380:	2202      	movs	r2, #2
 800f382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f386:	2112      	movs	r1, #18
 800f388:	f7ff bf86 	b.w	800f298 <std>
 800f38c:	240008e0 	.word	0x240008e0
 800f390:	240007a8 	.word	0x240007a8
 800f394:	0800f305 	.word	0x0800f305

0800f398 <__sfp_lock_acquire>:
 800f398:	4801      	ldr	r0, [pc, #4]	@ (800f3a0 <__sfp_lock_acquire+0x8>)
 800f39a:	f000 b962 	b.w	800f662 <__retarget_lock_acquire_recursive>
 800f39e:	bf00      	nop
 800f3a0:	240008ea 	.word	0x240008ea

0800f3a4 <__sfp_lock_release>:
 800f3a4:	4801      	ldr	r0, [pc, #4]	@ (800f3ac <__sfp_lock_release+0x8>)
 800f3a6:	f000 b95d 	b.w	800f664 <__retarget_lock_release_recursive>
 800f3aa:	bf00      	nop
 800f3ac:	240008ea 	.word	0x240008ea

0800f3b0 <__sinit>:
 800f3b0:	b510      	push	{r4, lr}
 800f3b2:	4604      	mov	r4, r0
 800f3b4:	f7ff fff0 	bl	800f398 <__sfp_lock_acquire>
 800f3b8:	6a23      	ldr	r3, [r4, #32]
 800f3ba:	b11b      	cbz	r3, 800f3c4 <__sinit+0x14>
 800f3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3c0:	f7ff bff0 	b.w	800f3a4 <__sfp_lock_release>
 800f3c4:	4b04      	ldr	r3, [pc, #16]	@ (800f3d8 <__sinit+0x28>)
 800f3c6:	6223      	str	r3, [r4, #32]
 800f3c8:	4b04      	ldr	r3, [pc, #16]	@ (800f3dc <__sinit+0x2c>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d1f5      	bne.n	800f3bc <__sinit+0xc>
 800f3d0:	f7ff ffc4 	bl	800f35c <global_stdio_init.part.0>
 800f3d4:	e7f2      	b.n	800f3bc <__sinit+0xc>
 800f3d6:	bf00      	nop
 800f3d8:	0800f31d 	.word	0x0800f31d
 800f3dc:	240008e0 	.word	0x240008e0

0800f3e0 <fiprintf>:
 800f3e0:	b40e      	push	{r1, r2, r3}
 800f3e2:	b503      	push	{r0, r1, lr}
 800f3e4:	4601      	mov	r1, r0
 800f3e6:	ab03      	add	r3, sp, #12
 800f3e8:	4805      	ldr	r0, [pc, #20]	@ (800f400 <fiprintf+0x20>)
 800f3ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3ee:	6800      	ldr	r0, [r0, #0]
 800f3f0:	9301      	str	r3, [sp, #4]
 800f3f2:	f000 fa09 	bl	800f808 <_vfiprintf_r>
 800f3f6:	b002      	add	sp, #8
 800f3f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3fc:	b003      	add	sp, #12
 800f3fe:	4770      	bx	lr
 800f400:	240001d0 	.word	0x240001d0

0800f404 <_fwalk_sglue>:
 800f404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f408:	4607      	mov	r7, r0
 800f40a:	4688      	mov	r8, r1
 800f40c:	4614      	mov	r4, r2
 800f40e:	2600      	movs	r6, #0
 800f410:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f414:	f1b9 0901 	subs.w	r9, r9, #1
 800f418:	d505      	bpl.n	800f426 <_fwalk_sglue+0x22>
 800f41a:	6824      	ldr	r4, [r4, #0]
 800f41c:	2c00      	cmp	r4, #0
 800f41e:	d1f7      	bne.n	800f410 <_fwalk_sglue+0xc>
 800f420:	4630      	mov	r0, r6
 800f422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f426:	89ab      	ldrh	r3, [r5, #12]
 800f428:	2b01      	cmp	r3, #1
 800f42a:	d907      	bls.n	800f43c <_fwalk_sglue+0x38>
 800f42c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f430:	3301      	adds	r3, #1
 800f432:	d003      	beq.n	800f43c <_fwalk_sglue+0x38>
 800f434:	4629      	mov	r1, r5
 800f436:	4638      	mov	r0, r7
 800f438:	47c0      	blx	r8
 800f43a:	4306      	orrs	r6, r0
 800f43c:	3568      	adds	r5, #104	@ 0x68
 800f43e:	e7e9      	b.n	800f414 <_fwalk_sglue+0x10>

0800f440 <__sread>:
 800f440:	b510      	push	{r4, lr}
 800f442:	460c      	mov	r4, r1
 800f444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f448:	f000 f898 	bl	800f57c <_read_r>
 800f44c:	2800      	cmp	r0, #0
 800f44e:	bfab      	itete	ge
 800f450:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f452:	89a3      	ldrhlt	r3, [r4, #12]
 800f454:	181b      	addge	r3, r3, r0
 800f456:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f45a:	bfac      	ite	ge
 800f45c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f45e:	81a3      	strhlt	r3, [r4, #12]
 800f460:	bd10      	pop	{r4, pc}

0800f462 <__swrite>:
 800f462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f466:	461f      	mov	r7, r3
 800f468:	898b      	ldrh	r3, [r1, #12]
 800f46a:	05db      	lsls	r3, r3, #23
 800f46c:	4605      	mov	r5, r0
 800f46e:	460c      	mov	r4, r1
 800f470:	4616      	mov	r6, r2
 800f472:	d505      	bpl.n	800f480 <__swrite+0x1e>
 800f474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f478:	2302      	movs	r3, #2
 800f47a:	2200      	movs	r2, #0
 800f47c:	f000 f86c 	bl	800f558 <_lseek_r>
 800f480:	89a3      	ldrh	r3, [r4, #12]
 800f482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f486:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f48a:	81a3      	strh	r3, [r4, #12]
 800f48c:	4632      	mov	r2, r6
 800f48e:	463b      	mov	r3, r7
 800f490:	4628      	mov	r0, r5
 800f492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f496:	f000 b8a7 	b.w	800f5e8 <_write_r>

0800f49a <__sseek>:
 800f49a:	b510      	push	{r4, lr}
 800f49c:	460c      	mov	r4, r1
 800f49e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4a2:	f000 f859 	bl	800f558 <_lseek_r>
 800f4a6:	1c43      	adds	r3, r0, #1
 800f4a8:	89a3      	ldrh	r3, [r4, #12]
 800f4aa:	bf15      	itete	ne
 800f4ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f4ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f4b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f4b6:	81a3      	strheq	r3, [r4, #12]
 800f4b8:	bf18      	it	ne
 800f4ba:	81a3      	strhne	r3, [r4, #12]
 800f4bc:	bd10      	pop	{r4, pc}

0800f4be <__sclose>:
 800f4be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4c2:	f000 b839 	b.w	800f538 <_close_r>

0800f4c6 <memset>:
 800f4c6:	4402      	add	r2, r0
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d100      	bne.n	800f4d0 <memset+0xa>
 800f4ce:	4770      	bx	lr
 800f4d0:	f803 1b01 	strb.w	r1, [r3], #1
 800f4d4:	e7f9      	b.n	800f4ca <memset+0x4>

0800f4d6 <_raise_r>:
 800f4d6:	291f      	cmp	r1, #31
 800f4d8:	b538      	push	{r3, r4, r5, lr}
 800f4da:	4605      	mov	r5, r0
 800f4dc:	460c      	mov	r4, r1
 800f4de:	d904      	bls.n	800f4ea <_raise_r+0x14>
 800f4e0:	2316      	movs	r3, #22
 800f4e2:	6003      	str	r3, [r0, #0]
 800f4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4e8:	bd38      	pop	{r3, r4, r5, pc}
 800f4ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f4ec:	b112      	cbz	r2, 800f4f4 <_raise_r+0x1e>
 800f4ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4f2:	b94b      	cbnz	r3, 800f508 <_raise_r+0x32>
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	f000 f865 	bl	800f5c4 <_getpid_r>
 800f4fa:	4622      	mov	r2, r4
 800f4fc:	4601      	mov	r1, r0
 800f4fe:	4628      	mov	r0, r5
 800f500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f504:	f000 b84c 	b.w	800f5a0 <_kill_r>
 800f508:	2b01      	cmp	r3, #1
 800f50a:	d00a      	beq.n	800f522 <_raise_r+0x4c>
 800f50c:	1c59      	adds	r1, r3, #1
 800f50e:	d103      	bne.n	800f518 <_raise_r+0x42>
 800f510:	2316      	movs	r3, #22
 800f512:	6003      	str	r3, [r0, #0]
 800f514:	2001      	movs	r0, #1
 800f516:	e7e7      	b.n	800f4e8 <_raise_r+0x12>
 800f518:	2100      	movs	r1, #0
 800f51a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f51e:	4620      	mov	r0, r4
 800f520:	4798      	blx	r3
 800f522:	2000      	movs	r0, #0
 800f524:	e7e0      	b.n	800f4e8 <_raise_r+0x12>
	...

0800f528 <raise>:
 800f528:	4b02      	ldr	r3, [pc, #8]	@ (800f534 <raise+0xc>)
 800f52a:	4601      	mov	r1, r0
 800f52c:	6818      	ldr	r0, [r3, #0]
 800f52e:	f7ff bfd2 	b.w	800f4d6 <_raise_r>
 800f532:	bf00      	nop
 800f534:	240001d0 	.word	0x240001d0

0800f538 <_close_r>:
 800f538:	b538      	push	{r3, r4, r5, lr}
 800f53a:	4d06      	ldr	r5, [pc, #24]	@ (800f554 <_close_r+0x1c>)
 800f53c:	2300      	movs	r3, #0
 800f53e:	4604      	mov	r4, r0
 800f540:	4608      	mov	r0, r1
 800f542:	602b      	str	r3, [r5, #0]
 800f544:	f7f2 ffee 	bl	8002524 <_close>
 800f548:	1c43      	adds	r3, r0, #1
 800f54a:	d102      	bne.n	800f552 <_close_r+0x1a>
 800f54c:	682b      	ldr	r3, [r5, #0]
 800f54e:	b103      	cbz	r3, 800f552 <_close_r+0x1a>
 800f550:	6023      	str	r3, [r4, #0]
 800f552:	bd38      	pop	{r3, r4, r5, pc}
 800f554:	240008e4 	.word	0x240008e4

0800f558 <_lseek_r>:
 800f558:	b538      	push	{r3, r4, r5, lr}
 800f55a:	4d07      	ldr	r5, [pc, #28]	@ (800f578 <_lseek_r+0x20>)
 800f55c:	4604      	mov	r4, r0
 800f55e:	4608      	mov	r0, r1
 800f560:	4611      	mov	r1, r2
 800f562:	2200      	movs	r2, #0
 800f564:	602a      	str	r2, [r5, #0]
 800f566:	461a      	mov	r2, r3
 800f568:	f7f3 f803 	bl	8002572 <_lseek>
 800f56c:	1c43      	adds	r3, r0, #1
 800f56e:	d102      	bne.n	800f576 <_lseek_r+0x1e>
 800f570:	682b      	ldr	r3, [r5, #0]
 800f572:	b103      	cbz	r3, 800f576 <_lseek_r+0x1e>
 800f574:	6023      	str	r3, [r4, #0]
 800f576:	bd38      	pop	{r3, r4, r5, pc}
 800f578:	240008e4 	.word	0x240008e4

0800f57c <_read_r>:
 800f57c:	b538      	push	{r3, r4, r5, lr}
 800f57e:	4d07      	ldr	r5, [pc, #28]	@ (800f59c <_read_r+0x20>)
 800f580:	4604      	mov	r4, r0
 800f582:	4608      	mov	r0, r1
 800f584:	4611      	mov	r1, r2
 800f586:	2200      	movs	r2, #0
 800f588:	602a      	str	r2, [r5, #0]
 800f58a:	461a      	mov	r2, r3
 800f58c:	f7f2 ff91 	bl	80024b2 <_read>
 800f590:	1c43      	adds	r3, r0, #1
 800f592:	d102      	bne.n	800f59a <_read_r+0x1e>
 800f594:	682b      	ldr	r3, [r5, #0]
 800f596:	b103      	cbz	r3, 800f59a <_read_r+0x1e>
 800f598:	6023      	str	r3, [r4, #0]
 800f59a:	bd38      	pop	{r3, r4, r5, pc}
 800f59c:	240008e4 	.word	0x240008e4

0800f5a0 <_kill_r>:
 800f5a0:	b538      	push	{r3, r4, r5, lr}
 800f5a2:	4d07      	ldr	r5, [pc, #28]	@ (800f5c0 <_kill_r+0x20>)
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	4604      	mov	r4, r0
 800f5a8:	4608      	mov	r0, r1
 800f5aa:	4611      	mov	r1, r2
 800f5ac:	602b      	str	r3, [r5, #0]
 800f5ae:	f7f2 ff65 	bl	800247c <_kill>
 800f5b2:	1c43      	adds	r3, r0, #1
 800f5b4:	d102      	bne.n	800f5bc <_kill_r+0x1c>
 800f5b6:	682b      	ldr	r3, [r5, #0]
 800f5b8:	b103      	cbz	r3, 800f5bc <_kill_r+0x1c>
 800f5ba:	6023      	str	r3, [r4, #0]
 800f5bc:	bd38      	pop	{r3, r4, r5, pc}
 800f5be:	bf00      	nop
 800f5c0:	240008e4 	.word	0x240008e4

0800f5c4 <_getpid_r>:
 800f5c4:	f7f2 bf52 	b.w	800246c <_getpid>

0800f5c8 <_sbrk_r>:
 800f5c8:	b538      	push	{r3, r4, r5, lr}
 800f5ca:	4d06      	ldr	r5, [pc, #24]	@ (800f5e4 <_sbrk_r+0x1c>)
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	4604      	mov	r4, r0
 800f5d0:	4608      	mov	r0, r1
 800f5d2:	602b      	str	r3, [r5, #0]
 800f5d4:	f7f2 ffda 	bl	800258c <_sbrk>
 800f5d8:	1c43      	adds	r3, r0, #1
 800f5da:	d102      	bne.n	800f5e2 <_sbrk_r+0x1a>
 800f5dc:	682b      	ldr	r3, [r5, #0]
 800f5de:	b103      	cbz	r3, 800f5e2 <_sbrk_r+0x1a>
 800f5e0:	6023      	str	r3, [r4, #0]
 800f5e2:	bd38      	pop	{r3, r4, r5, pc}
 800f5e4:	240008e4 	.word	0x240008e4

0800f5e8 <_write_r>:
 800f5e8:	b538      	push	{r3, r4, r5, lr}
 800f5ea:	4d07      	ldr	r5, [pc, #28]	@ (800f608 <_write_r+0x20>)
 800f5ec:	4604      	mov	r4, r0
 800f5ee:	4608      	mov	r0, r1
 800f5f0:	4611      	mov	r1, r2
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	602a      	str	r2, [r5, #0]
 800f5f6:	461a      	mov	r2, r3
 800f5f8:	f7f2 ff78 	bl	80024ec <_write>
 800f5fc:	1c43      	adds	r3, r0, #1
 800f5fe:	d102      	bne.n	800f606 <_write_r+0x1e>
 800f600:	682b      	ldr	r3, [r5, #0]
 800f602:	b103      	cbz	r3, 800f606 <_write_r+0x1e>
 800f604:	6023      	str	r3, [r4, #0]
 800f606:	bd38      	pop	{r3, r4, r5, pc}
 800f608:	240008e4 	.word	0x240008e4

0800f60c <__errno>:
 800f60c:	4b01      	ldr	r3, [pc, #4]	@ (800f614 <__errno+0x8>)
 800f60e:	6818      	ldr	r0, [r3, #0]
 800f610:	4770      	bx	lr
 800f612:	bf00      	nop
 800f614:	240001d0 	.word	0x240001d0

0800f618 <__libc_init_array>:
 800f618:	b570      	push	{r4, r5, r6, lr}
 800f61a:	4d0d      	ldr	r5, [pc, #52]	@ (800f650 <__libc_init_array+0x38>)
 800f61c:	4c0d      	ldr	r4, [pc, #52]	@ (800f654 <__libc_init_array+0x3c>)
 800f61e:	1b64      	subs	r4, r4, r5
 800f620:	10a4      	asrs	r4, r4, #2
 800f622:	2600      	movs	r6, #0
 800f624:	42a6      	cmp	r6, r4
 800f626:	d109      	bne.n	800f63c <__libc_init_array+0x24>
 800f628:	4d0b      	ldr	r5, [pc, #44]	@ (800f658 <__libc_init_array+0x40>)
 800f62a:	4c0c      	ldr	r4, [pc, #48]	@ (800f65c <__libc_init_array+0x44>)
 800f62c:	f000 fd54 	bl	80100d8 <_init>
 800f630:	1b64      	subs	r4, r4, r5
 800f632:	10a4      	asrs	r4, r4, #2
 800f634:	2600      	movs	r6, #0
 800f636:	42a6      	cmp	r6, r4
 800f638:	d105      	bne.n	800f646 <__libc_init_array+0x2e>
 800f63a:	bd70      	pop	{r4, r5, r6, pc}
 800f63c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f640:	4798      	blx	r3
 800f642:	3601      	adds	r6, #1
 800f644:	e7ee      	b.n	800f624 <__libc_init_array+0xc>
 800f646:	f855 3b04 	ldr.w	r3, [r5], #4
 800f64a:	4798      	blx	r3
 800f64c:	3601      	adds	r6, #1
 800f64e:	e7f2      	b.n	800f636 <__libc_init_array+0x1e>
 800f650:	08011840 	.word	0x08011840
 800f654:	08011840 	.word	0x08011840
 800f658:	08011840 	.word	0x08011840
 800f65c:	08011850 	.word	0x08011850

0800f660 <__retarget_lock_init_recursive>:
 800f660:	4770      	bx	lr

0800f662 <__retarget_lock_acquire_recursive>:
 800f662:	4770      	bx	lr

0800f664 <__retarget_lock_release_recursive>:
 800f664:	4770      	bx	lr
	...

0800f668 <__register_exitproc>:
 800f668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f66c:	4d27      	ldr	r5, [pc, #156]	@ (800f70c <__register_exitproc+0xa4>)
 800f66e:	4607      	mov	r7, r0
 800f670:	6828      	ldr	r0, [r5, #0]
 800f672:	4691      	mov	r9, r2
 800f674:	460e      	mov	r6, r1
 800f676:	4698      	mov	r8, r3
 800f678:	f7ff fff3 	bl	800f662 <__retarget_lock_acquire_recursive>
 800f67c:	4a24      	ldr	r2, [pc, #144]	@ (800f710 <__register_exitproc+0xa8>)
 800f67e:	6814      	ldr	r4, [r2, #0]
 800f680:	b93c      	cbnz	r4, 800f692 <__register_exitproc+0x2a>
 800f682:	4b24      	ldr	r3, [pc, #144]	@ (800f714 <__register_exitproc+0xac>)
 800f684:	6013      	str	r3, [r2, #0]
 800f686:	4a24      	ldr	r2, [pc, #144]	@ (800f718 <__register_exitproc+0xb0>)
 800f688:	b112      	cbz	r2, 800f690 <__register_exitproc+0x28>
 800f68a:	6812      	ldr	r2, [r2, #0]
 800f68c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800f690:	4c20      	ldr	r4, [pc, #128]	@ (800f714 <__register_exitproc+0xac>)
 800f692:	6863      	ldr	r3, [r4, #4]
 800f694:	2b1f      	cmp	r3, #31
 800f696:	dd06      	ble.n	800f6a6 <__register_exitproc+0x3e>
 800f698:	6828      	ldr	r0, [r5, #0]
 800f69a:	f7ff ffe3 	bl	800f664 <__retarget_lock_release_recursive>
 800f69e:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6a6:	b32f      	cbz	r7, 800f6f4 <__register_exitproc+0x8c>
 800f6a8:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800f6ac:	b968      	cbnz	r0, 800f6ca <__register_exitproc+0x62>
 800f6ae:	4b1b      	ldr	r3, [pc, #108]	@ (800f71c <__register_exitproc+0xb4>)
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d0f1      	beq.n	800f698 <__register_exitproc+0x30>
 800f6b4:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800f6b8:	f7ff fd30 	bl	800f11c <malloc>
 800f6bc:	2800      	cmp	r0, #0
 800f6be:	d0eb      	beq.n	800f698 <__register_exitproc+0x30>
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 800f6c6:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 800f6ca:	6863      	ldr	r3, [r4, #4]
 800f6cc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800f6d0:	2201      	movs	r2, #1
 800f6d2:	409a      	lsls	r2, r3
 800f6d4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800f6d8:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 800f6dc:	4313      	orrs	r3, r2
 800f6de:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 800f6e2:	2f02      	cmp	r7, #2
 800f6e4:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 800f6e8:	bf02      	ittt	eq
 800f6ea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 800f6ee:	4313      	orreq	r3, r2
 800f6f0:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 800f6f4:	6863      	ldr	r3, [r4, #4]
 800f6f6:	6828      	ldr	r0, [r5, #0]
 800f6f8:	1c5a      	adds	r2, r3, #1
 800f6fa:	3302      	adds	r3, #2
 800f6fc:	6062      	str	r2, [r4, #4]
 800f6fe:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800f702:	f7ff ffaf 	bl	800f664 <__retarget_lock_release_recursive>
 800f706:	2000      	movs	r0, #0
 800f708:	e7cb      	b.n	800f6a2 <__register_exitproc+0x3a>
 800f70a:	bf00      	nop
 800f70c:	24000220 	.word	0x24000220
 800f710:	24000978 	.word	0x24000978
 800f714:	240008ec 	.word	0x240008ec
 800f718:	08010548 	.word	0x08010548
 800f71c:	0800f11d 	.word	0x0800f11d

0800f720 <_free_r>:
 800f720:	b538      	push	{r3, r4, r5, lr}
 800f722:	4605      	mov	r5, r0
 800f724:	2900      	cmp	r1, #0
 800f726:	d041      	beq.n	800f7ac <_free_r+0x8c>
 800f728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f72c:	1f0c      	subs	r4, r1, #4
 800f72e:	2b00      	cmp	r3, #0
 800f730:	bfb8      	it	lt
 800f732:	18e4      	addlt	r4, r4, r3
 800f734:	f7ff fda4 	bl	800f280 <__malloc_lock>
 800f738:	4a1d      	ldr	r2, [pc, #116]	@ (800f7b0 <_free_r+0x90>)
 800f73a:	6813      	ldr	r3, [r2, #0]
 800f73c:	b933      	cbnz	r3, 800f74c <_free_r+0x2c>
 800f73e:	6063      	str	r3, [r4, #4]
 800f740:	6014      	str	r4, [r2, #0]
 800f742:	4628      	mov	r0, r5
 800f744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f748:	f7ff bda0 	b.w	800f28c <__malloc_unlock>
 800f74c:	42a3      	cmp	r3, r4
 800f74e:	d908      	bls.n	800f762 <_free_r+0x42>
 800f750:	6820      	ldr	r0, [r4, #0]
 800f752:	1821      	adds	r1, r4, r0
 800f754:	428b      	cmp	r3, r1
 800f756:	bf01      	itttt	eq
 800f758:	6819      	ldreq	r1, [r3, #0]
 800f75a:	685b      	ldreq	r3, [r3, #4]
 800f75c:	1809      	addeq	r1, r1, r0
 800f75e:	6021      	streq	r1, [r4, #0]
 800f760:	e7ed      	b.n	800f73e <_free_r+0x1e>
 800f762:	461a      	mov	r2, r3
 800f764:	685b      	ldr	r3, [r3, #4]
 800f766:	b10b      	cbz	r3, 800f76c <_free_r+0x4c>
 800f768:	42a3      	cmp	r3, r4
 800f76a:	d9fa      	bls.n	800f762 <_free_r+0x42>
 800f76c:	6811      	ldr	r1, [r2, #0]
 800f76e:	1850      	adds	r0, r2, r1
 800f770:	42a0      	cmp	r0, r4
 800f772:	d10b      	bne.n	800f78c <_free_r+0x6c>
 800f774:	6820      	ldr	r0, [r4, #0]
 800f776:	4401      	add	r1, r0
 800f778:	1850      	adds	r0, r2, r1
 800f77a:	4283      	cmp	r3, r0
 800f77c:	6011      	str	r1, [r2, #0]
 800f77e:	d1e0      	bne.n	800f742 <_free_r+0x22>
 800f780:	6818      	ldr	r0, [r3, #0]
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	6053      	str	r3, [r2, #4]
 800f786:	4408      	add	r0, r1
 800f788:	6010      	str	r0, [r2, #0]
 800f78a:	e7da      	b.n	800f742 <_free_r+0x22>
 800f78c:	d902      	bls.n	800f794 <_free_r+0x74>
 800f78e:	230c      	movs	r3, #12
 800f790:	602b      	str	r3, [r5, #0]
 800f792:	e7d6      	b.n	800f742 <_free_r+0x22>
 800f794:	6820      	ldr	r0, [r4, #0]
 800f796:	1821      	adds	r1, r4, r0
 800f798:	428b      	cmp	r3, r1
 800f79a:	bf04      	itt	eq
 800f79c:	6819      	ldreq	r1, [r3, #0]
 800f79e:	685b      	ldreq	r3, [r3, #4]
 800f7a0:	6063      	str	r3, [r4, #4]
 800f7a2:	bf04      	itt	eq
 800f7a4:	1809      	addeq	r1, r1, r0
 800f7a6:	6021      	streq	r1, [r4, #0]
 800f7a8:	6054      	str	r4, [r2, #4]
 800f7aa:	e7ca      	b.n	800f742 <_free_r+0x22>
 800f7ac:	bd38      	pop	{r3, r4, r5, pc}
 800f7ae:	bf00      	nop
 800f7b0:	240007a4 	.word	0x240007a4

0800f7b4 <__sfputc_r>:
 800f7b4:	6893      	ldr	r3, [r2, #8]
 800f7b6:	3b01      	subs	r3, #1
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	b410      	push	{r4}
 800f7bc:	6093      	str	r3, [r2, #8]
 800f7be:	da08      	bge.n	800f7d2 <__sfputc_r+0x1e>
 800f7c0:	6994      	ldr	r4, [r2, #24]
 800f7c2:	42a3      	cmp	r3, r4
 800f7c4:	db01      	blt.n	800f7ca <__sfputc_r+0x16>
 800f7c6:	290a      	cmp	r1, #10
 800f7c8:	d103      	bne.n	800f7d2 <__sfputc_r+0x1e>
 800f7ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7ce:	f000 bb6b 	b.w	800fea8 <__swbuf_r>
 800f7d2:	6813      	ldr	r3, [r2, #0]
 800f7d4:	1c58      	adds	r0, r3, #1
 800f7d6:	6010      	str	r0, [r2, #0]
 800f7d8:	7019      	strb	r1, [r3, #0]
 800f7da:	4608      	mov	r0, r1
 800f7dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7e0:	4770      	bx	lr

0800f7e2 <__sfputs_r>:
 800f7e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7e4:	4606      	mov	r6, r0
 800f7e6:	460f      	mov	r7, r1
 800f7e8:	4614      	mov	r4, r2
 800f7ea:	18d5      	adds	r5, r2, r3
 800f7ec:	42ac      	cmp	r4, r5
 800f7ee:	d101      	bne.n	800f7f4 <__sfputs_r+0x12>
 800f7f0:	2000      	movs	r0, #0
 800f7f2:	e007      	b.n	800f804 <__sfputs_r+0x22>
 800f7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7f8:	463a      	mov	r2, r7
 800f7fa:	4630      	mov	r0, r6
 800f7fc:	f7ff ffda 	bl	800f7b4 <__sfputc_r>
 800f800:	1c43      	adds	r3, r0, #1
 800f802:	d1f3      	bne.n	800f7ec <__sfputs_r+0xa>
 800f804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f808 <_vfiprintf_r>:
 800f808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f80c:	460d      	mov	r5, r1
 800f80e:	b09d      	sub	sp, #116	@ 0x74
 800f810:	4614      	mov	r4, r2
 800f812:	4698      	mov	r8, r3
 800f814:	4606      	mov	r6, r0
 800f816:	b118      	cbz	r0, 800f820 <_vfiprintf_r+0x18>
 800f818:	6a03      	ldr	r3, [r0, #32]
 800f81a:	b90b      	cbnz	r3, 800f820 <_vfiprintf_r+0x18>
 800f81c:	f7ff fdc8 	bl	800f3b0 <__sinit>
 800f820:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f822:	07d9      	lsls	r1, r3, #31
 800f824:	d405      	bmi.n	800f832 <_vfiprintf_r+0x2a>
 800f826:	89ab      	ldrh	r3, [r5, #12]
 800f828:	059a      	lsls	r2, r3, #22
 800f82a:	d402      	bmi.n	800f832 <_vfiprintf_r+0x2a>
 800f82c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f82e:	f7ff ff18 	bl	800f662 <__retarget_lock_acquire_recursive>
 800f832:	89ab      	ldrh	r3, [r5, #12]
 800f834:	071b      	lsls	r3, r3, #28
 800f836:	d501      	bpl.n	800f83c <_vfiprintf_r+0x34>
 800f838:	692b      	ldr	r3, [r5, #16]
 800f83a:	b99b      	cbnz	r3, 800f864 <_vfiprintf_r+0x5c>
 800f83c:	4629      	mov	r1, r5
 800f83e:	4630      	mov	r0, r6
 800f840:	f000 fb70 	bl	800ff24 <__swsetup_r>
 800f844:	b170      	cbz	r0, 800f864 <_vfiprintf_r+0x5c>
 800f846:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f848:	07dc      	lsls	r4, r3, #31
 800f84a:	d504      	bpl.n	800f856 <_vfiprintf_r+0x4e>
 800f84c:	f04f 30ff 	mov.w	r0, #4294967295
 800f850:	b01d      	add	sp, #116	@ 0x74
 800f852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f856:	89ab      	ldrh	r3, [r5, #12]
 800f858:	0598      	lsls	r0, r3, #22
 800f85a:	d4f7      	bmi.n	800f84c <_vfiprintf_r+0x44>
 800f85c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f85e:	f7ff ff01 	bl	800f664 <__retarget_lock_release_recursive>
 800f862:	e7f3      	b.n	800f84c <_vfiprintf_r+0x44>
 800f864:	2300      	movs	r3, #0
 800f866:	9309      	str	r3, [sp, #36]	@ 0x24
 800f868:	2320      	movs	r3, #32
 800f86a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f86e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f872:	2330      	movs	r3, #48	@ 0x30
 800f874:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fa24 <_vfiprintf_r+0x21c>
 800f878:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f87c:	f04f 0901 	mov.w	r9, #1
 800f880:	4623      	mov	r3, r4
 800f882:	469a      	mov	sl, r3
 800f884:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f888:	b10a      	cbz	r2, 800f88e <_vfiprintf_r+0x86>
 800f88a:	2a25      	cmp	r2, #37	@ 0x25
 800f88c:	d1f9      	bne.n	800f882 <_vfiprintf_r+0x7a>
 800f88e:	ebba 0b04 	subs.w	fp, sl, r4
 800f892:	d00b      	beq.n	800f8ac <_vfiprintf_r+0xa4>
 800f894:	465b      	mov	r3, fp
 800f896:	4622      	mov	r2, r4
 800f898:	4629      	mov	r1, r5
 800f89a:	4630      	mov	r0, r6
 800f89c:	f7ff ffa1 	bl	800f7e2 <__sfputs_r>
 800f8a0:	3001      	adds	r0, #1
 800f8a2:	f000 80a7 	beq.w	800f9f4 <_vfiprintf_r+0x1ec>
 800f8a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f8a8:	445a      	add	r2, fp
 800f8aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800f8ac:	f89a 3000 	ldrb.w	r3, [sl]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f000 809f 	beq.w	800f9f4 <_vfiprintf_r+0x1ec>
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	f04f 32ff 	mov.w	r2, #4294967295
 800f8bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8c0:	f10a 0a01 	add.w	sl, sl, #1
 800f8c4:	9304      	str	r3, [sp, #16]
 800f8c6:	9307      	str	r3, [sp, #28]
 800f8c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f8cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800f8ce:	4654      	mov	r4, sl
 800f8d0:	2205      	movs	r2, #5
 800f8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8d6:	4853      	ldr	r0, [pc, #332]	@ (800fa24 <_vfiprintf_r+0x21c>)
 800f8d8:	f7f0 fd1a 	bl	8000310 <memchr>
 800f8dc:	9a04      	ldr	r2, [sp, #16]
 800f8de:	b9d8      	cbnz	r0, 800f918 <_vfiprintf_r+0x110>
 800f8e0:	06d1      	lsls	r1, r2, #27
 800f8e2:	bf44      	itt	mi
 800f8e4:	2320      	movmi	r3, #32
 800f8e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f8ea:	0713      	lsls	r3, r2, #28
 800f8ec:	bf44      	itt	mi
 800f8ee:	232b      	movmi	r3, #43	@ 0x2b
 800f8f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f8f4:	f89a 3000 	ldrb.w	r3, [sl]
 800f8f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8fa:	d015      	beq.n	800f928 <_vfiprintf_r+0x120>
 800f8fc:	9a07      	ldr	r2, [sp, #28]
 800f8fe:	4654      	mov	r4, sl
 800f900:	2000      	movs	r0, #0
 800f902:	f04f 0c0a 	mov.w	ip, #10
 800f906:	4621      	mov	r1, r4
 800f908:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f90c:	3b30      	subs	r3, #48	@ 0x30
 800f90e:	2b09      	cmp	r3, #9
 800f910:	d94b      	bls.n	800f9aa <_vfiprintf_r+0x1a2>
 800f912:	b1b0      	cbz	r0, 800f942 <_vfiprintf_r+0x13a>
 800f914:	9207      	str	r2, [sp, #28]
 800f916:	e014      	b.n	800f942 <_vfiprintf_r+0x13a>
 800f918:	eba0 0308 	sub.w	r3, r0, r8
 800f91c:	fa09 f303 	lsl.w	r3, r9, r3
 800f920:	4313      	orrs	r3, r2
 800f922:	9304      	str	r3, [sp, #16]
 800f924:	46a2      	mov	sl, r4
 800f926:	e7d2      	b.n	800f8ce <_vfiprintf_r+0xc6>
 800f928:	9b03      	ldr	r3, [sp, #12]
 800f92a:	1d19      	adds	r1, r3, #4
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	9103      	str	r1, [sp, #12]
 800f930:	2b00      	cmp	r3, #0
 800f932:	bfbb      	ittet	lt
 800f934:	425b      	neglt	r3, r3
 800f936:	f042 0202 	orrlt.w	r2, r2, #2
 800f93a:	9307      	strge	r3, [sp, #28]
 800f93c:	9307      	strlt	r3, [sp, #28]
 800f93e:	bfb8      	it	lt
 800f940:	9204      	strlt	r2, [sp, #16]
 800f942:	7823      	ldrb	r3, [r4, #0]
 800f944:	2b2e      	cmp	r3, #46	@ 0x2e
 800f946:	d10a      	bne.n	800f95e <_vfiprintf_r+0x156>
 800f948:	7863      	ldrb	r3, [r4, #1]
 800f94a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f94c:	d132      	bne.n	800f9b4 <_vfiprintf_r+0x1ac>
 800f94e:	9b03      	ldr	r3, [sp, #12]
 800f950:	1d1a      	adds	r2, r3, #4
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	9203      	str	r2, [sp, #12]
 800f956:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f95a:	3402      	adds	r4, #2
 800f95c:	9305      	str	r3, [sp, #20]
 800f95e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fa34 <_vfiprintf_r+0x22c>
 800f962:	7821      	ldrb	r1, [r4, #0]
 800f964:	2203      	movs	r2, #3
 800f966:	4650      	mov	r0, sl
 800f968:	f7f0 fcd2 	bl	8000310 <memchr>
 800f96c:	b138      	cbz	r0, 800f97e <_vfiprintf_r+0x176>
 800f96e:	9b04      	ldr	r3, [sp, #16]
 800f970:	eba0 000a 	sub.w	r0, r0, sl
 800f974:	2240      	movs	r2, #64	@ 0x40
 800f976:	4082      	lsls	r2, r0
 800f978:	4313      	orrs	r3, r2
 800f97a:	3401      	adds	r4, #1
 800f97c:	9304      	str	r3, [sp, #16]
 800f97e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f982:	4829      	ldr	r0, [pc, #164]	@ (800fa28 <_vfiprintf_r+0x220>)
 800f984:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f988:	2206      	movs	r2, #6
 800f98a:	f7f0 fcc1 	bl	8000310 <memchr>
 800f98e:	2800      	cmp	r0, #0
 800f990:	d03f      	beq.n	800fa12 <_vfiprintf_r+0x20a>
 800f992:	4b26      	ldr	r3, [pc, #152]	@ (800fa2c <_vfiprintf_r+0x224>)
 800f994:	bb1b      	cbnz	r3, 800f9de <_vfiprintf_r+0x1d6>
 800f996:	9b03      	ldr	r3, [sp, #12]
 800f998:	3307      	adds	r3, #7
 800f99a:	f023 0307 	bic.w	r3, r3, #7
 800f99e:	3308      	adds	r3, #8
 800f9a0:	9303      	str	r3, [sp, #12]
 800f9a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9a4:	443b      	add	r3, r7
 800f9a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9a8:	e76a      	b.n	800f880 <_vfiprintf_r+0x78>
 800f9aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9ae:	460c      	mov	r4, r1
 800f9b0:	2001      	movs	r0, #1
 800f9b2:	e7a8      	b.n	800f906 <_vfiprintf_r+0xfe>
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	3401      	adds	r4, #1
 800f9b8:	9305      	str	r3, [sp, #20]
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	f04f 0c0a 	mov.w	ip, #10
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9c6:	3a30      	subs	r2, #48	@ 0x30
 800f9c8:	2a09      	cmp	r2, #9
 800f9ca:	d903      	bls.n	800f9d4 <_vfiprintf_r+0x1cc>
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d0c6      	beq.n	800f95e <_vfiprintf_r+0x156>
 800f9d0:	9105      	str	r1, [sp, #20]
 800f9d2:	e7c4      	b.n	800f95e <_vfiprintf_r+0x156>
 800f9d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9d8:	4604      	mov	r4, r0
 800f9da:	2301      	movs	r3, #1
 800f9dc:	e7f0      	b.n	800f9c0 <_vfiprintf_r+0x1b8>
 800f9de:	ab03      	add	r3, sp, #12
 800f9e0:	9300      	str	r3, [sp, #0]
 800f9e2:	462a      	mov	r2, r5
 800f9e4:	4b12      	ldr	r3, [pc, #72]	@ (800fa30 <_vfiprintf_r+0x228>)
 800f9e6:	a904      	add	r1, sp, #16
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	f3af 8000 	nop.w
 800f9ee:	4607      	mov	r7, r0
 800f9f0:	1c78      	adds	r0, r7, #1
 800f9f2:	d1d6      	bne.n	800f9a2 <_vfiprintf_r+0x19a>
 800f9f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f9f6:	07d9      	lsls	r1, r3, #31
 800f9f8:	d405      	bmi.n	800fa06 <_vfiprintf_r+0x1fe>
 800f9fa:	89ab      	ldrh	r3, [r5, #12]
 800f9fc:	059a      	lsls	r2, r3, #22
 800f9fe:	d402      	bmi.n	800fa06 <_vfiprintf_r+0x1fe>
 800fa00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa02:	f7ff fe2f 	bl	800f664 <__retarget_lock_release_recursive>
 800fa06:	89ab      	ldrh	r3, [r5, #12]
 800fa08:	065b      	lsls	r3, r3, #25
 800fa0a:	f53f af1f 	bmi.w	800f84c <_vfiprintf_r+0x44>
 800fa0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa10:	e71e      	b.n	800f850 <_vfiprintf_r+0x48>
 800fa12:	ab03      	add	r3, sp, #12
 800fa14:	9300      	str	r3, [sp, #0]
 800fa16:	462a      	mov	r2, r5
 800fa18:	4b05      	ldr	r3, [pc, #20]	@ (800fa30 <_vfiprintf_r+0x228>)
 800fa1a:	a904      	add	r1, sp, #16
 800fa1c:	4630      	mov	r0, r6
 800fa1e:	f000 f879 	bl	800fb14 <_printf_i>
 800fa22:	e7e4      	b.n	800f9ee <_vfiprintf_r+0x1e6>
 800fa24:	08010514 	.word	0x08010514
 800fa28:	0801051e 	.word	0x0801051e
 800fa2c:	00000000 	.word	0x00000000
 800fa30:	0800f7e3 	.word	0x0800f7e3
 800fa34:	0801051a 	.word	0x0801051a

0800fa38 <_printf_common>:
 800fa38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa3c:	4616      	mov	r6, r2
 800fa3e:	4698      	mov	r8, r3
 800fa40:	688a      	ldr	r2, [r1, #8]
 800fa42:	690b      	ldr	r3, [r1, #16]
 800fa44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	bfb8      	it	lt
 800fa4c:	4613      	movlt	r3, r2
 800fa4e:	6033      	str	r3, [r6, #0]
 800fa50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fa54:	4607      	mov	r7, r0
 800fa56:	460c      	mov	r4, r1
 800fa58:	b10a      	cbz	r2, 800fa5e <_printf_common+0x26>
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	6033      	str	r3, [r6, #0]
 800fa5e:	6823      	ldr	r3, [r4, #0]
 800fa60:	0699      	lsls	r1, r3, #26
 800fa62:	bf42      	ittt	mi
 800fa64:	6833      	ldrmi	r3, [r6, #0]
 800fa66:	3302      	addmi	r3, #2
 800fa68:	6033      	strmi	r3, [r6, #0]
 800fa6a:	6825      	ldr	r5, [r4, #0]
 800fa6c:	f015 0506 	ands.w	r5, r5, #6
 800fa70:	d106      	bne.n	800fa80 <_printf_common+0x48>
 800fa72:	f104 0a19 	add.w	sl, r4, #25
 800fa76:	68e3      	ldr	r3, [r4, #12]
 800fa78:	6832      	ldr	r2, [r6, #0]
 800fa7a:	1a9b      	subs	r3, r3, r2
 800fa7c:	42ab      	cmp	r3, r5
 800fa7e:	dc26      	bgt.n	800face <_printf_common+0x96>
 800fa80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fa84:	6822      	ldr	r2, [r4, #0]
 800fa86:	3b00      	subs	r3, #0
 800fa88:	bf18      	it	ne
 800fa8a:	2301      	movne	r3, #1
 800fa8c:	0692      	lsls	r2, r2, #26
 800fa8e:	d42b      	bmi.n	800fae8 <_printf_common+0xb0>
 800fa90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fa94:	4641      	mov	r1, r8
 800fa96:	4638      	mov	r0, r7
 800fa98:	47c8      	blx	r9
 800fa9a:	3001      	adds	r0, #1
 800fa9c:	d01e      	beq.n	800fadc <_printf_common+0xa4>
 800fa9e:	6823      	ldr	r3, [r4, #0]
 800faa0:	6922      	ldr	r2, [r4, #16]
 800faa2:	f003 0306 	and.w	r3, r3, #6
 800faa6:	2b04      	cmp	r3, #4
 800faa8:	bf02      	ittt	eq
 800faaa:	68e5      	ldreq	r5, [r4, #12]
 800faac:	6833      	ldreq	r3, [r6, #0]
 800faae:	1aed      	subeq	r5, r5, r3
 800fab0:	68a3      	ldr	r3, [r4, #8]
 800fab2:	bf0c      	ite	eq
 800fab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fab8:	2500      	movne	r5, #0
 800faba:	4293      	cmp	r3, r2
 800fabc:	bfc4      	itt	gt
 800fabe:	1a9b      	subgt	r3, r3, r2
 800fac0:	18ed      	addgt	r5, r5, r3
 800fac2:	2600      	movs	r6, #0
 800fac4:	341a      	adds	r4, #26
 800fac6:	42b5      	cmp	r5, r6
 800fac8:	d11a      	bne.n	800fb00 <_printf_common+0xc8>
 800faca:	2000      	movs	r0, #0
 800facc:	e008      	b.n	800fae0 <_printf_common+0xa8>
 800face:	2301      	movs	r3, #1
 800fad0:	4652      	mov	r2, sl
 800fad2:	4641      	mov	r1, r8
 800fad4:	4638      	mov	r0, r7
 800fad6:	47c8      	blx	r9
 800fad8:	3001      	adds	r0, #1
 800fada:	d103      	bne.n	800fae4 <_printf_common+0xac>
 800fadc:	f04f 30ff 	mov.w	r0, #4294967295
 800fae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fae4:	3501      	adds	r5, #1
 800fae6:	e7c6      	b.n	800fa76 <_printf_common+0x3e>
 800fae8:	18e1      	adds	r1, r4, r3
 800faea:	1c5a      	adds	r2, r3, #1
 800faec:	2030      	movs	r0, #48	@ 0x30
 800faee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800faf2:	4422      	add	r2, r4
 800faf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800faf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fafc:	3302      	adds	r3, #2
 800fafe:	e7c7      	b.n	800fa90 <_printf_common+0x58>
 800fb00:	2301      	movs	r3, #1
 800fb02:	4622      	mov	r2, r4
 800fb04:	4641      	mov	r1, r8
 800fb06:	4638      	mov	r0, r7
 800fb08:	47c8      	blx	r9
 800fb0a:	3001      	adds	r0, #1
 800fb0c:	d0e6      	beq.n	800fadc <_printf_common+0xa4>
 800fb0e:	3601      	adds	r6, #1
 800fb10:	e7d9      	b.n	800fac6 <_printf_common+0x8e>
	...

0800fb14 <_printf_i>:
 800fb14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb18:	7e0f      	ldrb	r7, [r1, #24]
 800fb1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fb1c:	2f78      	cmp	r7, #120	@ 0x78
 800fb1e:	4691      	mov	r9, r2
 800fb20:	4680      	mov	r8, r0
 800fb22:	460c      	mov	r4, r1
 800fb24:	469a      	mov	sl, r3
 800fb26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fb2a:	d807      	bhi.n	800fb3c <_printf_i+0x28>
 800fb2c:	2f62      	cmp	r7, #98	@ 0x62
 800fb2e:	d80a      	bhi.n	800fb46 <_printf_i+0x32>
 800fb30:	2f00      	cmp	r7, #0
 800fb32:	f000 80d1 	beq.w	800fcd8 <_printf_i+0x1c4>
 800fb36:	2f58      	cmp	r7, #88	@ 0x58
 800fb38:	f000 80b8 	beq.w	800fcac <_printf_i+0x198>
 800fb3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fb44:	e03a      	b.n	800fbbc <_printf_i+0xa8>
 800fb46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fb4a:	2b15      	cmp	r3, #21
 800fb4c:	d8f6      	bhi.n	800fb3c <_printf_i+0x28>
 800fb4e:	a101      	add	r1, pc, #4	@ (adr r1, 800fb54 <_printf_i+0x40>)
 800fb50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb54:	0800fbad 	.word	0x0800fbad
 800fb58:	0800fbc1 	.word	0x0800fbc1
 800fb5c:	0800fb3d 	.word	0x0800fb3d
 800fb60:	0800fb3d 	.word	0x0800fb3d
 800fb64:	0800fb3d 	.word	0x0800fb3d
 800fb68:	0800fb3d 	.word	0x0800fb3d
 800fb6c:	0800fbc1 	.word	0x0800fbc1
 800fb70:	0800fb3d 	.word	0x0800fb3d
 800fb74:	0800fb3d 	.word	0x0800fb3d
 800fb78:	0800fb3d 	.word	0x0800fb3d
 800fb7c:	0800fb3d 	.word	0x0800fb3d
 800fb80:	0800fcbf 	.word	0x0800fcbf
 800fb84:	0800fbeb 	.word	0x0800fbeb
 800fb88:	0800fc79 	.word	0x0800fc79
 800fb8c:	0800fb3d 	.word	0x0800fb3d
 800fb90:	0800fb3d 	.word	0x0800fb3d
 800fb94:	0800fce1 	.word	0x0800fce1
 800fb98:	0800fb3d 	.word	0x0800fb3d
 800fb9c:	0800fbeb 	.word	0x0800fbeb
 800fba0:	0800fb3d 	.word	0x0800fb3d
 800fba4:	0800fb3d 	.word	0x0800fb3d
 800fba8:	0800fc81 	.word	0x0800fc81
 800fbac:	6833      	ldr	r3, [r6, #0]
 800fbae:	1d1a      	adds	r2, r3, #4
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	6032      	str	r2, [r6, #0]
 800fbb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fbb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	e09c      	b.n	800fcfa <_printf_i+0x1e6>
 800fbc0:	6833      	ldr	r3, [r6, #0]
 800fbc2:	6820      	ldr	r0, [r4, #0]
 800fbc4:	1d19      	adds	r1, r3, #4
 800fbc6:	6031      	str	r1, [r6, #0]
 800fbc8:	0606      	lsls	r6, r0, #24
 800fbca:	d501      	bpl.n	800fbd0 <_printf_i+0xbc>
 800fbcc:	681d      	ldr	r5, [r3, #0]
 800fbce:	e003      	b.n	800fbd8 <_printf_i+0xc4>
 800fbd0:	0645      	lsls	r5, r0, #25
 800fbd2:	d5fb      	bpl.n	800fbcc <_printf_i+0xb8>
 800fbd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fbd8:	2d00      	cmp	r5, #0
 800fbda:	da03      	bge.n	800fbe4 <_printf_i+0xd0>
 800fbdc:	232d      	movs	r3, #45	@ 0x2d
 800fbde:	426d      	negs	r5, r5
 800fbe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fbe4:	4858      	ldr	r0, [pc, #352]	@ (800fd48 <_printf_i+0x234>)
 800fbe6:	230a      	movs	r3, #10
 800fbe8:	e011      	b.n	800fc0e <_printf_i+0xfa>
 800fbea:	6821      	ldr	r1, [r4, #0]
 800fbec:	6833      	ldr	r3, [r6, #0]
 800fbee:	0608      	lsls	r0, r1, #24
 800fbf0:	f853 5b04 	ldr.w	r5, [r3], #4
 800fbf4:	d402      	bmi.n	800fbfc <_printf_i+0xe8>
 800fbf6:	0649      	lsls	r1, r1, #25
 800fbf8:	bf48      	it	mi
 800fbfa:	b2ad      	uxthmi	r5, r5
 800fbfc:	2f6f      	cmp	r7, #111	@ 0x6f
 800fbfe:	4852      	ldr	r0, [pc, #328]	@ (800fd48 <_printf_i+0x234>)
 800fc00:	6033      	str	r3, [r6, #0]
 800fc02:	bf14      	ite	ne
 800fc04:	230a      	movne	r3, #10
 800fc06:	2308      	moveq	r3, #8
 800fc08:	2100      	movs	r1, #0
 800fc0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fc0e:	6866      	ldr	r6, [r4, #4]
 800fc10:	60a6      	str	r6, [r4, #8]
 800fc12:	2e00      	cmp	r6, #0
 800fc14:	db05      	blt.n	800fc22 <_printf_i+0x10e>
 800fc16:	6821      	ldr	r1, [r4, #0]
 800fc18:	432e      	orrs	r6, r5
 800fc1a:	f021 0104 	bic.w	r1, r1, #4
 800fc1e:	6021      	str	r1, [r4, #0]
 800fc20:	d04b      	beq.n	800fcba <_printf_i+0x1a6>
 800fc22:	4616      	mov	r6, r2
 800fc24:	fbb5 f1f3 	udiv	r1, r5, r3
 800fc28:	fb03 5711 	mls	r7, r3, r1, r5
 800fc2c:	5dc7      	ldrb	r7, [r0, r7]
 800fc2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fc32:	462f      	mov	r7, r5
 800fc34:	42bb      	cmp	r3, r7
 800fc36:	460d      	mov	r5, r1
 800fc38:	d9f4      	bls.n	800fc24 <_printf_i+0x110>
 800fc3a:	2b08      	cmp	r3, #8
 800fc3c:	d10b      	bne.n	800fc56 <_printf_i+0x142>
 800fc3e:	6823      	ldr	r3, [r4, #0]
 800fc40:	07df      	lsls	r7, r3, #31
 800fc42:	d508      	bpl.n	800fc56 <_printf_i+0x142>
 800fc44:	6923      	ldr	r3, [r4, #16]
 800fc46:	6861      	ldr	r1, [r4, #4]
 800fc48:	4299      	cmp	r1, r3
 800fc4a:	bfde      	ittt	le
 800fc4c:	2330      	movle	r3, #48	@ 0x30
 800fc4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fc52:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fc56:	1b92      	subs	r2, r2, r6
 800fc58:	6122      	str	r2, [r4, #16]
 800fc5a:	f8cd a000 	str.w	sl, [sp]
 800fc5e:	464b      	mov	r3, r9
 800fc60:	aa03      	add	r2, sp, #12
 800fc62:	4621      	mov	r1, r4
 800fc64:	4640      	mov	r0, r8
 800fc66:	f7ff fee7 	bl	800fa38 <_printf_common>
 800fc6a:	3001      	adds	r0, #1
 800fc6c:	d14a      	bne.n	800fd04 <_printf_i+0x1f0>
 800fc6e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc72:	b004      	add	sp, #16
 800fc74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc78:	6823      	ldr	r3, [r4, #0]
 800fc7a:	f043 0320 	orr.w	r3, r3, #32
 800fc7e:	6023      	str	r3, [r4, #0]
 800fc80:	4832      	ldr	r0, [pc, #200]	@ (800fd4c <_printf_i+0x238>)
 800fc82:	2778      	movs	r7, #120	@ 0x78
 800fc84:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fc88:	6823      	ldr	r3, [r4, #0]
 800fc8a:	6831      	ldr	r1, [r6, #0]
 800fc8c:	061f      	lsls	r7, r3, #24
 800fc8e:	f851 5b04 	ldr.w	r5, [r1], #4
 800fc92:	d402      	bmi.n	800fc9a <_printf_i+0x186>
 800fc94:	065f      	lsls	r7, r3, #25
 800fc96:	bf48      	it	mi
 800fc98:	b2ad      	uxthmi	r5, r5
 800fc9a:	6031      	str	r1, [r6, #0]
 800fc9c:	07d9      	lsls	r1, r3, #31
 800fc9e:	bf44      	itt	mi
 800fca0:	f043 0320 	orrmi.w	r3, r3, #32
 800fca4:	6023      	strmi	r3, [r4, #0]
 800fca6:	b11d      	cbz	r5, 800fcb0 <_printf_i+0x19c>
 800fca8:	2310      	movs	r3, #16
 800fcaa:	e7ad      	b.n	800fc08 <_printf_i+0xf4>
 800fcac:	4826      	ldr	r0, [pc, #152]	@ (800fd48 <_printf_i+0x234>)
 800fcae:	e7e9      	b.n	800fc84 <_printf_i+0x170>
 800fcb0:	6823      	ldr	r3, [r4, #0]
 800fcb2:	f023 0320 	bic.w	r3, r3, #32
 800fcb6:	6023      	str	r3, [r4, #0]
 800fcb8:	e7f6      	b.n	800fca8 <_printf_i+0x194>
 800fcba:	4616      	mov	r6, r2
 800fcbc:	e7bd      	b.n	800fc3a <_printf_i+0x126>
 800fcbe:	6833      	ldr	r3, [r6, #0]
 800fcc0:	6825      	ldr	r5, [r4, #0]
 800fcc2:	6961      	ldr	r1, [r4, #20]
 800fcc4:	1d18      	adds	r0, r3, #4
 800fcc6:	6030      	str	r0, [r6, #0]
 800fcc8:	062e      	lsls	r6, r5, #24
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	d501      	bpl.n	800fcd2 <_printf_i+0x1be>
 800fcce:	6019      	str	r1, [r3, #0]
 800fcd0:	e002      	b.n	800fcd8 <_printf_i+0x1c4>
 800fcd2:	0668      	lsls	r0, r5, #25
 800fcd4:	d5fb      	bpl.n	800fcce <_printf_i+0x1ba>
 800fcd6:	8019      	strh	r1, [r3, #0]
 800fcd8:	2300      	movs	r3, #0
 800fcda:	6123      	str	r3, [r4, #16]
 800fcdc:	4616      	mov	r6, r2
 800fcde:	e7bc      	b.n	800fc5a <_printf_i+0x146>
 800fce0:	6833      	ldr	r3, [r6, #0]
 800fce2:	1d1a      	adds	r2, r3, #4
 800fce4:	6032      	str	r2, [r6, #0]
 800fce6:	681e      	ldr	r6, [r3, #0]
 800fce8:	6862      	ldr	r2, [r4, #4]
 800fcea:	2100      	movs	r1, #0
 800fcec:	4630      	mov	r0, r6
 800fcee:	f7f0 fb0f 	bl	8000310 <memchr>
 800fcf2:	b108      	cbz	r0, 800fcf8 <_printf_i+0x1e4>
 800fcf4:	1b80      	subs	r0, r0, r6
 800fcf6:	6060      	str	r0, [r4, #4]
 800fcf8:	6863      	ldr	r3, [r4, #4]
 800fcfa:	6123      	str	r3, [r4, #16]
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd02:	e7aa      	b.n	800fc5a <_printf_i+0x146>
 800fd04:	6923      	ldr	r3, [r4, #16]
 800fd06:	4632      	mov	r2, r6
 800fd08:	4649      	mov	r1, r9
 800fd0a:	4640      	mov	r0, r8
 800fd0c:	47d0      	blx	sl
 800fd0e:	3001      	adds	r0, #1
 800fd10:	d0ad      	beq.n	800fc6e <_printf_i+0x15a>
 800fd12:	6823      	ldr	r3, [r4, #0]
 800fd14:	079b      	lsls	r3, r3, #30
 800fd16:	d413      	bmi.n	800fd40 <_printf_i+0x22c>
 800fd18:	68e0      	ldr	r0, [r4, #12]
 800fd1a:	9b03      	ldr	r3, [sp, #12]
 800fd1c:	4298      	cmp	r0, r3
 800fd1e:	bfb8      	it	lt
 800fd20:	4618      	movlt	r0, r3
 800fd22:	e7a6      	b.n	800fc72 <_printf_i+0x15e>
 800fd24:	2301      	movs	r3, #1
 800fd26:	4632      	mov	r2, r6
 800fd28:	4649      	mov	r1, r9
 800fd2a:	4640      	mov	r0, r8
 800fd2c:	47d0      	blx	sl
 800fd2e:	3001      	adds	r0, #1
 800fd30:	d09d      	beq.n	800fc6e <_printf_i+0x15a>
 800fd32:	3501      	adds	r5, #1
 800fd34:	68e3      	ldr	r3, [r4, #12]
 800fd36:	9903      	ldr	r1, [sp, #12]
 800fd38:	1a5b      	subs	r3, r3, r1
 800fd3a:	42ab      	cmp	r3, r5
 800fd3c:	dcf2      	bgt.n	800fd24 <_printf_i+0x210>
 800fd3e:	e7eb      	b.n	800fd18 <_printf_i+0x204>
 800fd40:	2500      	movs	r5, #0
 800fd42:	f104 0619 	add.w	r6, r4, #25
 800fd46:	e7f5      	b.n	800fd34 <_printf_i+0x220>
 800fd48:	08010525 	.word	0x08010525
 800fd4c:	08010536 	.word	0x08010536

0800fd50 <__sflush_r>:
 800fd50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd58:	0716      	lsls	r6, r2, #28
 800fd5a:	4605      	mov	r5, r0
 800fd5c:	460c      	mov	r4, r1
 800fd5e:	d454      	bmi.n	800fe0a <__sflush_r+0xba>
 800fd60:	684b      	ldr	r3, [r1, #4]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	dc02      	bgt.n	800fd6c <__sflush_r+0x1c>
 800fd66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	dd48      	ble.n	800fdfe <__sflush_r+0xae>
 800fd6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fd6e:	2e00      	cmp	r6, #0
 800fd70:	d045      	beq.n	800fdfe <__sflush_r+0xae>
 800fd72:	2300      	movs	r3, #0
 800fd74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fd78:	682f      	ldr	r7, [r5, #0]
 800fd7a:	6a21      	ldr	r1, [r4, #32]
 800fd7c:	602b      	str	r3, [r5, #0]
 800fd7e:	d030      	beq.n	800fde2 <__sflush_r+0x92>
 800fd80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fd82:	89a3      	ldrh	r3, [r4, #12]
 800fd84:	0759      	lsls	r1, r3, #29
 800fd86:	d505      	bpl.n	800fd94 <__sflush_r+0x44>
 800fd88:	6863      	ldr	r3, [r4, #4]
 800fd8a:	1ad2      	subs	r2, r2, r3
 800fd8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fd8e:	b10b      	cbz	r3, 800fd94 <__sflush_r+0x44>
 800fd90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fd92:	1ad2      	subs	r2, r2, r3
 800fd94:	2300      	movs	r3, #0
 800fd96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fd98:	6a21      	ldr	r1, [r4, #32]
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	47b0      	blx	r6
 800fd9e:	1c43      	adds	r3, r0, #1
 800fda0:	89a3      	ldrh	r3, [r4, #12]
 800fda2:	d106      	bne.n	800fdb2 <__sflush_r+0x62>
 800fda4:	6829      	ldr	r1, [r5, #0]
 800fda6:	291d      	cmp	r1, #29
 800fda8:	d82b      	bhi.n	800fe02 <__sflush_r+0xb2>
 800fdaa:	4a2a      	ldr	r2, [pc, #168]	@ (800fe54 <__sflush_r+0x104>)
 800fdac:	40ca      	lsrs	r2, r1
 800fdae:	07d6      	lsls	r6, r2, #31
 800fdb0:	d527      	bpl.n	800fe02 <__sflush_r+0xb2>
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	6062      	str	r2, [r4, #4]
 800fdb6:	04d9      	lsls	r1, r3, #19
 800fdb8:	6922      	ldr	r2, [r4, #16]
 800fdba:	6022      	str	r2, [r4, #0]
 800fdbc:	d504      	bpl.n	800fdc8 <__sflush_r+0x78>
 800fdbe:	1c42      	adds	r2, r0, #1
 800fdc0:	d101      	bne.n	800fdc6 <__sflush_r+0x76>
 800fdc2:	682b      	ldr	r3, [r5, #0]
 800fdc4:	b903      	cbnz	r3, 800fdc8 <__sflush_r+0x78>
 800fdc6:	6560      	str	r0, [r4, #84]	@ 0x54
 800fdc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fdca:	602f      	str	r7, [r5, #0]
 800fdcc:	b1b9      	cbz	r1, 800fdfe <__sflush_r+0xae>
 800fdce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fdd2:	4299      	cmp	r1, r3
 800fdd4:	d002      	beq.n	800fddc <__sflush_r+0x8c>
 800fdd6:	4628      	mov	r0, r5
 800fdd8:	f7ff fca2 	bl	800f720 <_free_r>
 800fddc:	2300      	movs	r3, #0
 800fdde:	6363      	str	r3, [r4, #52]	@ 0x34
 800fde0:	e00d      	b.n	800fdfe <__sflush_r+0xae>
 800fde2:	2301      	movs	r3, #1
 800fde4:	4628      	mov	r0, r5
 800fde6:	47b0      	blx	r6
 800fde8:	4602      	mov	r2, r0
 800fdea:	1c50      	adds	r0, r2, #1
 800fdec:	d1c9      	bne.n	800fd82 <__sflush_r+0x32>
 800fdee:	682b      	ldr	r3, [r5, #0]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d0c6      	beq.n	800fd82 <__sflush_r+0x32>
 800fdf4:	2b1d      	cmp	r3, #29
 800fdf6:	d001      	beq.n	800fdfc <__sflush_r+0xac>
 800fdf8:	2b16      	cmp	r3, #22
 800fdfa:	d11e      	bne.n	800fe3a <__sflush_r+0xea>
 800fdfc:	602f      	str	r7, [r5, #0]
 800fdfe:	2000      	movs	r0, #0
 800fe00:	e022      	b.n	800fe48 <__sflush_r+0xf8>
 800fe02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe06:	b21b      	sxth	r3, r3
 800fe08:	e01b      	b.n	800fe42 <__sflush_r+0xf2>
 800fe0a:	690f      	ldr	r7, [r1, #16]
 800fe0c:	2f00      	cmp	r7, #0
 800fe0e:	d0f6      	beq.n	800fdfe <__sflush_r+0xae>
 800fe10:	0793      	lsls	r3, r2, #30
 800fe12:	680e      	ldr	r6, [r1, #0]
 800fe14:	bf08      	it	eq
 800fe16:	694b      	ldreq	r3, [r1, #20]
 800fe18:	600f      	str	r7, [r1, #0]
 800fe1a:	bf18      	it	ne
 800fe1c:	2300      	movne	r3, #0
 800fe1e:	eba6 0807 	sub.w	r8, r6, r7
 800fe22:	608b      	str	r3, [r1, #8]
 800fe24:	f1b8 0f00 	cmp.w	r8, #0
 800fe28:	dde9      	ble.n	800fdfe <__sflush_r+0xae>
 800fe2a:	6a21      	ldr	r1, [r4, #32]
 800fe2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fe2e:	4643      	mov	r3, r8
 800fe30:	463a      	mov	r2, r7
 800fe32:	4628      	mov	r0, r5
 800fe34:	47b0      	blx	r6
 800fe36:	2800      	cmp	r0, #0
 800fe38:	dc08      	bgt.n	800fe4c <__sflush_r+0xfc>
 800fe3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe42:	81a3      	strh	r3, [r4, #12]
 800fe44:	f04f 30ff 	mov.w	r0, #4294967295
 800fe48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe4c:	4407      	add	r7, r0
 800fe4e:	eba8 0800 	sub.w	r8, r8, r0
 800fe52:	e7e7      	b.n	800fe24 <__sflush_r+0xd4>
 800fe54:	20400001 	.word	0x20400001

0800fe58 <_fflush_r>:
 800fe58:	b538      	push	{r3, r4, r5, lr}
 800fe5a:	690b      	ldr	r3, [r1, #16]
 800fe5c:	4605      	mov	r5, r0
 800fe5e:	460c      	mov	r4, r1
 800fe60:	b913      	cbnz	r3, 800fe68 <_fflush_r+0x10>
 800fe62:	2500      	movs	r5, #0
 800fe64:	4628      	mov	r0, r5
 800fe66:	bd38      	pop	{r3, r4, r5, pc}
 800fe68:	b118      	cbz	r0, 800fe72 <_fflush_r+0x1a>
 800fe6a:	6a03      	ldr	r3, [r0, #32]
 800fe6c:	b90b      	cbnz	r3, 800fe72 <_fflush_r+0x1a>
 800fe6e:	f7ff fa9f 	bl	800f3b0 <__sinit>
 800fe72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d0f3      	beq.n	800fe62 <_fflush_r+0xa>
 800fe7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fe7c:	07d0      	lsls	r0, r2, #31
 800fe7e:	d404      	bmi.n	800fe8a <_fflush_r+0x32>
 800fe80:	0599      	lsls	r1, r3, #22
 800fe82:	d402      	bmi.n	800fe8a <_fflush_r+0x32>
 800fe84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fe86:	f7ff fbec 	bl	800f662 <__retarget_lock_acquire_recursive>
 800fe8a:	4628      	mov	r0, r5
 800fe8c:	4621      	mov	r1, r4
 800fe8e:	f7ff ff5f 	bl	800fd50 <__sflush_r>
 800fe92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fe94:	07da      	lsls	r2, r3, #31
 800fe96:	4605      	mov	r5, r0
 800fe98:	d4e4      	bmi.n	800fe64 <_fflush_r+0xc>
 800fe9a:	89a3      	ldrh	r3, [r4, #12]
 800fe9c:	059b      	lsls	r3, r3, #22
 800fe9e:	d4e1      	bmi.n	800fe64 <_fflush_r+0xc>
 800fea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fea2:	f7ff fbdf 	bl	800f664 <__retarget_lock_release_recursive>
 800fea6:	e7dd      	b.n	800fe64 <_fflush_r+0xc>

0800fea8 <__swbuf_r>:
 800fea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feaa:	460e      	mov	r6, r1
 800feac:	4614      	mov	r4, r2
 800feae:	4605      	mov	r5, r0
 800feb0:	b118      	cbz	r0, 800feba <__swbuf_r+0x12>
 800feb2:	6a03      	ldr	r3, [r0, #32]
 800feb4:	b90b      	cbnz	r3, 800feba <__swbuf_r+0x12>
 800feb6:	f7ff fa7b 	bl	800f3b0 <__sinit>
 800feba:	69a3      	ldr	r3, [r4, #24]
 800febc:	60a3      	str	r3, [r4, #8]
 800febe:	89a3      	ldrh	r3, [r4, #12]
 800fec0:	071a      	lsls	r2, r3, #28
 800fec2:	d501      	bpl.n	800fec8 <__swbuf_r+0x20>
 800fec4:	6923      	ldr	r3, [r4, #16]
 800fec6:	b943      	cbnz	r3, 800feda <__swbuf_r+0x32>
 800fec8:	4621      	mov	r1, r4
 800feca:	4628      	mov	r0, r5
 800fecc:	f000 f82a 	bl	800ff24 <__swsetup_r>
 800fed0:	b118      	cbz	r0, 800feda <__swbuf_r+0x32>
 800fed2:	f04f 37ff 	mov.w	r7, #4294967295
 800fed6:	4638      	mov	r0, r7
 800fed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800feda:	6823      	ldr	r3, [r4, #0]
 800fedc:	6922      	ldr	r2, [r4, #16]
 800fede:	1a98      	subs	r0, r3, r2
 800fee0:	6963      	ldr	r3, [r4, #20]
 800fee2:	b2f6      	uxtb	r6, r6
 800fee4:	4283      	cmp	r3, r0
 800fee6:	4637      	mov	r7, r6
 800fee8:	dc05      	bgt.n	800fef6 <__swbuf_r+0x4e>
 800feea:	4621      	mov	r1, r4
 800feec:	4628      	mov	r0, r5
 800feee:	f7ff ffb3 	bl	800fe58 <_fflush_r>
 800fef2:	2800      	cmp	r0, #0
 800fef4:	d1ed      	bne.n	800fed2 <__swbuf_r+0x2a>
 800fef6:	68a3      	ldr	r3, [r4, #8]
 800fef8:	3b01      	subs	r3, #1
 800fefa:	60a3      	str	r3, [r4, #8]
 800fefc:	6823      	ldr	r3, [r4, #0]
 800fefe:	1c5a      	adds	r2, r3, #1
 800ff00:	6022      	str	r2, [r4, #0]
 800ff02:	701e      	strb	r6, [r3, #0]
 800ff04:	6962      	ldr	r2, [r4, #20]
 800ff06:	1c43      	adds	r3, r0, #1
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	d004      	beq.n	800ff16 <__swbuf_r+0x6e>
 800ff0c:	89a3      	ldrh	r3, [r4, #12]
 800ff0e:	07db      	lsls	r3, r3, #31
 800ff10:	d5e1      	bpl.n	800fed6 <__swbuf_r+0x2e>
 800ff12:	2e0a      	cmp	r6, #10
 800ff14:	d1df      	bne.n	800fed6 <__swbuf_r+0x2e>
 800ff16:	4621      	mov	r1, r4
 800ff18:	4628      	mov	r0, r5
 800ff1a:	f7ff ff9d 	bl	800fe58 <_fflush_r>
 800ff1e:	2800      	cmp	r0, #0
 800ff20:	d0d9      	beq.n	800fed6 <__swbuf_r+0x2e>
 800ff22:	e7d6      	b.n	800fed2 <__swbuf_r+0x2a>

0800ff24 <__swsetup_r>:
 800ff24:	b538      	push	{r3, r4, r5, lr}
 800ff26:	4b29      	ldr	r3, [pc, #164]	@ (800ffcc <__swsetup_r+0xa8>)
 800ff28:	4605      	mov	r5, r0
 800ff2a:	6818      	ldr	r0, [r3, #0]
 800ff2c:	460c      	mov	r4, r1
 800ff2e:	b118      	cbz	r0, 800ff38 <__swsetup_r+0x14>
 800ff30:	6a03      	ldr	r3, [r0, #32]
 800ff32:	b90b      	cbnz	r3, 800ff38 <__swsetup_r+0x14>
 800ff34:	f7ff fa3c 	bl	800f3b0 <__sinit>
 800ff38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff3c:	0719      	lsls	r1, r3, #28
 800ff3e:	d422      	bmi.n	800ff86 <__swsetup_r+0x62>
 800ff40:	06da      	lsls	r2, r3, #27
 800ff42:	d407      	bmi.n	800ff54 <__swsetup_r+0x30>
 800ff44:	2209      	movs	r2, #9
 800ff46:	602a      	str	r2, [r5, #0]
 800ff48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff4c:	81a3      	strh	r3, [r4, #12]
 800ff4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ff52:	e033      	b.n	800ffbc <__swsetup_r+0x98>
 800ff54:	0758      	lsls	r0, r3, #29
 800ff56:	d512      	bpl.n	800ff7e <__swsetup_r+0x5a>
 800ff58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ff5a:	b141      	cbz	r1, 800ff6e <__swsetup_r+0x4a>
 800ff5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff60:	4299      	cmp	r1, r3
 800ff62:	d002      	beq.n	800ff6a <__swsetup_r+0x46>
 800ff64:	4628      	mov	r0, r5
 800ff66:	f7ff fbdb 	bl	800f720 <_free_r>
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff6e:	89a3      	ldrh	r3, [r4, #12]
 800ff70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ff74:	81a3      	strh	r3, [r4, #12]
 800ff76:	2300      	movs	r3, #0
 800ff78:	6063      	str	r3, [r4, #4]
 800ff7a:	6923      	ldr	r3, [r4, #16]
 800ff7c:	6023      	str	r3, [r4, #0]
 800ff7e:	89a3      	ldrh	r3, [r4, #12]
 800ff80:	f043 0308 	orr.w	r3, r3, #8
 800ff84:	81a3      	strh	r3, [r4, #12]
 800ff86:	6923      	ldr	r3, [r4, #16]
 800ff88:	b94b      	cbnz	r3, 800ff9e <__swsetup_r+0x7a>
 800ff8a:	89a3      	ldrh	r3, [r4, #12]
 800ff8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ff90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff94:	d003      	beq.n	800ff9e <__swsetup_r+0x7a>
 800ff96:	4621      	mov	r1, r4
 800ff98:	4628      	mov	r0, r5
 800ff9a:	f000 f83f 	bl	801001c <__smakebuf_r>
 800ff9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffa2:	f013 0201 	ands.w	r2, r3, #1
 800ffa6:	d00a      	beq.n	800ffbe <__swsetup_r+0x9a>
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	60a2      	str	r2, [r4, #8]
 800ffac:	6962      	ldr	r2, [r4, #20]
 800ffae:	4252      	negs	r2, r2
 800ffb0:	61a2      	str	r2, [r4, #24]
 800ffb2:	6922      	ldr	r2, [r4, #16]
 800ffb4:	b942      	cbnz	r2, 800ffc8 <__swsetup_r+0xa4>
 800ffb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ffba:	d1c5      	bne.n	800ff48 <__swsetup_r+0x24>
 800ffbc:	bd38      	pop	{r3, r4, r5, pc}
 800ffbe:	0799      	lsls	r1, r3, #30
 800ffc0:	bf58      	it	pl
 800ffc2:	6962      	ldrpl	r2, [r4, #20]
 800ffc4:	60a2      	str	r2, [r4, #8]
 800ffc6:	e7f4      	b.n	800ffb2 <__swsetup_r+0x8e>
 800ffc8:	2000      	movs	r0, #0
 800ffca:	e7f7      	b.n	800ffbc <__swsetup_r+0x98>
 800ffcc:	240001d0 	.word	0x240001d0

0800ffd0 <__swhatbuf_r>:
 800ffd0:	b570      	push	{r4, r5, r6, lr}
 800ffd2:	460c      	mov	r4, r1
 800ffd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffd8:	2900      	cmp	r1, #0
 800ffda:	b096      	sub	sp, #88	@ 0x58
 800ffdc:	4615      	mov	r5, r2
 800ffde:	461e      	mov	r6, r3
 800ffe0:	da0d      	bge.n	800fffe <__swhatbuf_r+0x2e>
 800ffe2:	89a3      	ldrh	r3, [r4, #12]
 800ffe4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ffe8:	f04f 0100 	mov.w	r1, #0
 800ffec:	bf14      	ite	ne
 800ffee:	2340      	movne	r3, #64	@ 0x40
 800fff0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fff4:	2000      	movs	r0, #0
 800fff6:	6031      	str	r1, [r6, #0]
 800fff8:	602b      	str	r3, [r5, #0]
 800fffa:	b016      	add	sp, #88	@ 0x58
 800fffc:	bd70      	pop	{r4, r5, r6, pc}
 800fffe:	466a      	mov	r2, sp
 8010000:	f000 f848 	bl	8010094 <_fstat_r>
 8010004:	2800      	cmp	r0, #0
 8010006:	dbec      	blt.n	800ffe2 <__swhatbuf_r+0x12>
 8010008:	9901      	ldr	r1, [sp, #4]
 801000a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801000e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010012:	4259      	negs	r1, r3
 8010014:	4159      	adcs	r1, r3
 8010016:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801001a:	e7eb      	b.n	800fff4 <__swhatbuf_r+0x24>

0801001c <__smakebuf_r>:
 801001c:	898b      	ldrh	r3, [r1, #12]
 801001e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010020:	079d      	lsls	r5, r3, #30
 8010022:	4606      	mov	r6, r0
 8010024:	460c      	mov	r4, r1
 8010026:	d507      	bpl.n	8010038 <__smakebuf_r+0x1c>
 8010028:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801002c:	6023      	str	r3, [r4, #0]
 801002e:	6123      	str	r3, [r4, #16]
 8010030:	2301      	movs	r3, #1
 8010032:	6163      	str	r3, [r4, #20]
 8010034:	b003      	add	sp, #12
 8010036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010038:	ab01      	add	r3, sp, #4
 801003a:	466a      	mov	r2, sp
 801003c:	f7ff ffc8 	bl	800ffd0 <__swhatbuf_r>
 8010040:	9f00      	ldr	r7, [sp, #0]
 8010042:	4605      	mov	r5, r0
 8010044:	4639      	mov	r1, r7
 8010046:	4630      	mov	r0, r6
 8010048:	f7ff f89a 	bl	800f180 <_malloc_r>
 801004c:	b948      	cbnz	r0, 8010062 <__smakebuf_r+0x46>
 801004e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010052:	059a      	lsls	r2, r3, #22
 8010054:	d4ee      	bmi.n	8010034 <__smakebuf_r+0x18>
 8010056:	f023 0303 	bic.w	r3, r3, #3
 801005a:	f043 0302 	orr.w	r3, r3, #2
 801005e:	81a3      	strh	r3, [r4, #12]
 8010060:	e7e2      	b.n	8010028 <__smakebuf_r+0xc>
 8010062:	89a3      	ldrh	r3, [r4, #12]
 8010064:	6020      	str	r0, [r4, #0]
 8010066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801006a:	81a3      	strh	r3, [r4, #12]
 801006c:	9b01      	ldr	r3, [sp, #4]
 801006e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010072:	b15b      	cbz	r3, 801008c <__smakebuf_r+0x70>
 8010074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010078:	4630      	mov	r0, r6
 801007a:	f000 f81d 	bl	80100b8 <_isatty_r>
 801007e:	b128      	cbz	r0, 801008c <__smakebuf_r+0x70>
 8010080:	89a3      	ldrh	r3, [r4, #12]
 8010082:	f023 0303 	bic.w	r3, r3, #3
 8010086:	f043 0301 	orr.w	r3, r3, #1
 801008a:	81a3      	strh	r3, [r4, #12]
 801008c:	89a3      	ldrh	r3, [r4, #12]
 801008e:	431d      	orrs	r5, r3
 8010090:	81a5      	strh	r5, [r4, #12]
 8010092:	e7cf      	b.n	8010034 <__smakebuf_r+0x18>

08010094 <_fstat_r>:
 8010094:	b538      	push	{r3, r4, r5, lr}
 8010096:	4d07      	ldr	r5, [pc, #28]	@ (80100b4 <_fstat_r+0x20>)
 8010098:	2300      	movs	r3, #0
 801009a:	4604      	mov	r4, r0
 801009c:	4608      	mov	r0, r1
 801009e:	4611      	mov	r1, r2
 80100a0:	602b      	str	r3, [r5, #0]
 80100a2:	f7f2 fa4b 	bl	800253c <_fstat>
 80100a6:	1c43      	adds	r3, r0, #1
 80100a8:	d102      	bne.n	80100b0 <_fstat_r+0x1c>
 80100aa:	682b      	ldr	r3, [r5, #0]
 80100ac:	b103      	cbz	r3, 80100b0 <_fstat_r+0x1c>
 80100ae:	6023      	str	r3, [r4, #0]
 80100b0:	bd38      	pop	{r3, r4, r5, pc}
 80100b2:	bf00      	nop
 80100b4:	240008e4 	.word	0x240008e4

080100b8 <_isatty_r>:
 80100b8:	b538      	push	{r3, r4, r5, lr}
 80100ba:	4d06      	ldr	r5, [pc, #24]	@ (80100d4 <_isatty_r+0x1c>)
 80100bc:	2300      	movs	r3, #0
 80100be:	4604      	mov	r4, r0
 80100c0:	4608      	mov	r0, r1
 80100c2:	602b      	str	r3, [r5, #0]
 80100c4:	f7f2 fa4a 	bl	800255c <_isatty>
 80100c8:	1c43      	adds	r3, r0, #1
 80100ca:	d102      	bne.n	80100d2 <_isatty_r+0x1a>
 80100cc:	682b      	ldr	r3, [r5, #0]
 80100ce:	b103      	cbz	r3, 80100d2 <_isatty_r+0x1a>
 80100d0:	6023      	str	r3, [r4, #0]
 80100d2:	bd38      	pop	{r3, r4, r5, pc}
 80100d4:	240008e4 	.word	0x240008e4

080100d8 <_init>:
 80100d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100da:	bf00      	nop
 80100dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100de:	bc08      	pop	{r3}
 80100e0:	469e      	mov	lr, r3
 80100e2:	4770      	bx	lr

080100e4 <_fini>:
 80100e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100e6:	bf00      	nop
 80100e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100ea:	bc08      	pop	{r3}
 80100ec:	469e      	mov	lr, r3
 80100ee:	4770      	bx	lr
