
Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f840  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800fb10  0800fb10  00010b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000012c2  0800ff6c  0800ff6c  00010f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000028  08011230  08011230  00012230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  08011258  08011258  00012258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000010  08011260  08011260  00012260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011270  08011270  00012270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  24000000  08011274  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  24000224  08011498  00013224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000a38  08011498  00013a38  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00013224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032069  00000000  00000000  00013252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007613  00000000  00000000  000452bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002050  00000000  00000000  0004c8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001826  00000000  00000000  0004e920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039046  00000000  00000000  00050146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b679  00000000  00000000  0008918c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00172003  00000000  00000000  000b4805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c2  00000000  00000000  00226808  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009164  00000000  00000000  002268cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0022fa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000224 	.word	0x24000224
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800faf8 	.word	0x0800faf8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000228 	.word	0x24000228
 800030c:	0800faf8 	.word	0x0800faf8

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003b6:	f001 fc69 	bl	8001c8c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ba:	f002 f9ab 	bl	8002714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003be:	f000 fa7d 	bl	80008bc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80003c2:	f000 fae9 	bl	8000998 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c6:	f000 fded 	bl	8000fa4 <MX_GPIO_Init>
  MX_CRC_Init();
 80003ca:	f000 fc09 	bl	8000be0 <MX_CRC_Init>
  MX_DMA2D_Init();
 80003ce:	f000 fc29 	bl	8000c24 <MX_DMA2D_Init>
  MX_ADC1_Init();
 80003d2:	f000 fb11 	bl	80009f8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80003d6:	f000 fc61 	bl	8000c9c <MX_I2C1_Init>
  MX_SPI1_Init();
 80003da:	f000 fc9f 	bl	8000d1c <MX_SPI1_Init>
  MX_TIM2_Init();
 80003de:	f000 fcf5 	bl	8000dcc <MX_TIM2_Init>
  MX_TIM3_Init();
 80003e2:	f000 fd67 	bl	8000eb4 <MX_TIM3_Init>
  MX_ADC2_Init();
 80003e6:	f000 fb93 	bl	8000b10 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
	serial_communication_variable_init();
 80003ea:	f001 fc81 	bl	8001cf0 <serial_communication_variable_init>
	speed_joystickX = 0;
 80003ee:	4bbb      	ldr	r3, [pc, #748]	@ (80006dc <main+0x32c>)
 80003f0:	f04f 0200 	mov.w	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
	speed_joystickY = 0;
 80003f6:	4bba      	ldr	r3, [pc, #744]	@ (80006e0 <main+0x330>)
 80003f8:	f04f 0200 	mov.w	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
	speed_joystickZ = 0;
 80003fe:	4bb9      	ldr	r3, [pc, #740]	@ (80006e4 <main+0x334>)
 8000400:	f04f 0200 	mov.w	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
	speed_joystickT = 0;
 8000406:	4bb8      	ldr	r3, [pc, #736]	@ (80006e8 <main+0x338>)
 8000408:	f04f 0200 	mov.w	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
	solenoid_tear_1_status = 0;
 800040e:	4bb7      	ldr	r3, [pc, #732]	@ (80006ec <main+0x33c>)
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
	solenoid_tear_2_status = 0;
 8000414:	4bb6      	ldr	r3, [pc, #728]	@ (80006f0 <main+0x340>)
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
	solenoid_tear_clamp_status = 0;
 800041a:	4bb6      	ldr	r3, [pc, #728]	@ (80006f4 <main+0x344>)
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
	solenoid_tear_lock_status = 0;
 8000420:	4bb5      	ldr	r3, [pc, #724]	@ (80006f8 <main+0x348>)
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
	control_mode = 0;
 8000426:	4bb5      	ldr	r3, [pc, #724]	@ (80006fc <main+0x34c>)
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
	bond_power_now = 0;
 800042c:	4bb4      	ldr	r3, [pc, #720]	@ (8000700 <main+0x350>)
 800042e:	2200      	movs	r2, #0
 8000430:	701a      	strb	r2, [r3, #0]
	bond_power_before = 0;
 8000432:	4bb4      	ldr	r3, [pc, #720]	@ (8000704 <main+0x354>)
 8000434:	2200      	movs	r2, #0
 8000436:	701a      	strb	r2, [r3, #0]
	search_height_adj_1 = 0;
 8000438:	4bb3      	ldr	r3, [pc, #716]	@ (8000708 <main+0x358>)
 800043a:	f04f 0200 	mov.w	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
	search_height_adj_2 = 0;
 8000440:	4bb2      	ldr	r3, [pc, #712]	@ (800070c <main+0x35c>)
 8000442:	f04f 0200 	mov.w	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
	measured_temperature_gauge = 0;
 8000448:	4bb1      	ldr	r3, [pc, #708]	@ (8000710 <main+0x360>)
 800044a:	f04f 0200 	mov.w	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
	debug_head_touched = 0;
 8000450:	4bb0      	ldr	r3, [pc, #704]	@ (8000714 <main+0x364>)
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
	fine_adjustment = 0;
 8000456:	4bb0      	ldr	r3, [pc, #704]	@ (8000718 <main+0x368>)
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]

	if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 800045c:	48af      	ldr	r0, [pc, #700]	@ (800071c <main+0x36c>)
 800045e:	f00b fc79 	bl	800bd54 <HAL_TIM_Base_Start_IT>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <main+0xbc>
	{
		/* Starting Error */
		Error_Handler();
 8000468:	f001 fc3c 	bl	8001ce4 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800046c:	2108      	movs	r1, #8
 800046e:	48ac      	ldr	r0, [pc, #688]	@ (8000720 <main+0x370>)
 8000470:	f00b fdb8 	bl	800bfe4 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	position_joystick = 0;
 8000474:	4bab      	ldr	r3, [pc, #684]	@ (8000724 <main+0x374>)
 8000476:	f04f 0200 	mov.w	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
	ui32_to_f conv;
	//https://deepbluembedded.com/stm32-potentiometer-read-examples-single-multiple-potentiometers/
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 800047c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000480:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000484:	48a8      	ldr	r0, [pc, #672]	@ (8000728 <main+0x378>)
 8000486:	f004 f8eb 	bl	8004660 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 800048a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800048e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000492:	48a6      	ldr	r0, [pc, #664]	@ (800072c <main+0x37c>)
 8000494:	f004 f8e4 	bl	8004660 <HAL_ADCEx_Calibration_Start>

	//Disable the ultrasonic driver
	HAL_GPIO_WritePin(ULTRASONIC_ENABLE_GPIO_Port, ULTRASONIC_ENABLE_Pin, GPIO_PIN_SET);
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800049e:	48a4      	ldr	r0, [pc, #656]	@ (8000730 <main+0x380>)
 80004a0:	f005 f9c4 	bl	800582c <HAL_GPIO_WritePin>

	//Reset position at startup
	write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, 0);
 80004a4:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 8000734 <main+0x384>
 80004a8:	2100      	movs	r1, #0
 80004aa:	202c      	movs	r0, #44	@ 0x2c
 80004ac:	f001 fa6c 	bl	8001988 <write_float_to_slave>

	write_uint32_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_MODE, SPD_MODE);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2105      	movs	r1, #5
 80004b4:	2028      	movs	r0, #40	@ 0x28
 80004b6:	f001 fa8b 	bl	80019d0 <write_uint32_to_slave>
	write_uint32_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_MODE, SPD_MODE);
 80004ba:	2201      	movs	r2, #1
 80004bc:	2105      	movs	r1, #5
 80004be:	202a      	movs	r0, #42	@ 0x2a
 80004c0:	f001 fa86 	bl	80019d0 <write_uint32_to_slave>
	write_float_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_SPEED, 0);
 80004c4:	ed9f 0a9b 	vldr	s0, [pc, #620]	@ 8000734 <main+0x384>
 80004c8:	2101      	movs	r1, #1
 80004ca:	2028      	movs	r0, #40	@ 0x28
 80004cc:	f001 fa5c 	bl	8001988 <write_float_to_slave>
	write_float_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_SPEED, 0);
 80004d0:	ed9f 0a98 	vldr	s0, [pc, #608]	@ 8000734 <main+0x384>
 80004d4:	2101      	movs	r1, #1
 80004d6:	202a      	movs	r0, #42	@ 0x2a
 80004d8:	f001 fa56 	bl	8001988 <write_float_to_slave>
//		//Keep the head raised
//		debug_head_touched = HAL_GPIO_ReadPin(PLATFORM_TOUCH_GPIO_Port, PLATFORM_TOUCH_Pin);
//		HAL_Delay(100);
//
		//Enable XY jog mode
		measure_joystick_and_send_to_slave();
 80004dc:	f001 f830 	bl	8001540 <measure_joystick_and_send_to_slave>
		HAL_Delay(100);
 80004e0:	2064      	movs	r0, #100	@ 0x64
 80004e2:	f002 f9a9 	bl	8002838 <HAL_Delay>
		}
		HAL_Delay(100);
#endif

#if 1
		if(HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_SET)
 80004e6:	2180      	movs	r1, #128	@ 0x80
 80004e8:	4891      	ldr	r0, [pc, #580]	@ (8000730 <main+0x380>)
 80004ea:	f005 f987 	bl	80057fc <HAL_GPIO_ReadPin>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	f040 8176 	bne.w	80007e2 <main+0x432>
		{
			fine_adjustment = 1;
 80004f6:	4b88      	ldr	r3, [pc, #544]	@ (8000718 <main+0x368>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	601a      	str	r2, [r3, #0]

			stage = 0; //For debug; TODO: remove in the future
 80004fc:	4b8e      	ldr	r3, [pc, #568]	@ (8000738 <main+0x388>)
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
			// Wait for the user to release the button
			wait_for_button_release();
 8000502:	f001 faaf 	bl	8001a64 <wait_for_button_release>

			ui32_to_f descent_position;

			stage++; //For debug; TODO: remove
 8000506:	4b8c      	ldr	r3, [pc, #560]	@ (8000738 <main+0x388>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	3301      	adds	r3, #1
 800050c:	4a8a      	ldr	r2, [pc, #552]	@ (8000738 <main+0x388>)
 800050e:	6013      	str	r3, [r2, #0]
			// First search descent
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, search_height_1);
 8000510:	4b8a      	ldr	r3, [pc, #552]	@ (800073c <main+0x38c>)
 8000512:	edd3 7a00 	vldr	s15, [r3]
 8000516:	eeb0 0a67 	vmov.f32	s0, s15
 800051a:	2100      	movs	r1, #0
 800051c:	202c      	movs	r0, #44	@ 0x2c
 800051e:	f001 fa33 	bl	8001988 <write_float_to_slave>

			// Wait for the button to be pressed and released
			//wait_for_button_press();

			stage++; //For debug; TODO: remove
 8000522:	4b85      	ldr	r3, [pc, #532]	@ (8000738 <main+0x388>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	3301      	adds	r3, #1
 8000528:	4a83      	ldr	r2, [pc, #524]	@ (8000738 <main+0x388>)
 800052a:	6013      	str	r3, [r2, #0]
			// Enter into jog mode (XY movement with joystick)
			enter_jog_mode();
 800052c:	f001 f8c6 	bl	80016bc <enter_jog_mode>
			// Wait for the user to release the button
			wait_for_button_release();
 8000530:	f001 fa98 	bl	8001a64 <wait_for_button_release>

			stage++; //For debug; TODO: remove
 8000534:	4b80      	ldr	r3, [pc, #512]	@ (8000738 <main+0x388>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	4a7f      	ldr	r2, [pc, #508]	@ (8000738 <main+0x388>)
 800053c:	6013      	str	r3, [r2, #0]
			//Start descending until touch with substrate
			head_touched = false;
 800053e:	4b80      	ldr	r3, [pc, #512]	@ (8000740 <main+0x390>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, -1);
 8000544:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8000548:	2100      	movs	r1, #0
 800054a:	202c      	movs	r0, #44	@ 0x2c
 800054c:	f001 fa1c 	bl	8001988 <write_float_to_slave>
			while(!head_touched){};
 8000550:	bf00      	nop
 8000552:	4b7b      	ldr	r3, [pc, #492]	@ (8000740 <main+0x390>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	f083 0301 	eor.w	r3, r3, #1
 800055a:	b2db      	uxtb	r3, r3
 800055c:	2b00      	cmp	r3, #0
 800055e:	d1f8      	bne.n	8000552 <main+0x1a2>

			stage++; //For debug; TODO: remove
 8000560:	4b75      	ldr	r3, [pc, #468]	@ (8000738 <main+0x388>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	4a74      	ldr	r2, [pc, #464]	@ (8000738 <main+0x388>)
 8000568:	6013      	str	r3, [r2, #0]
			//Lower the head a bit more
			data_ready = false;
 800056a:	4b76      	ldr	r3, [pc, #472]	@ (8000744 <main+0x394>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
			prepare_READ_packet(tx_buffer, VIRTUAL_MEM_POSITION_MEAS);
 8000570:	2103      	movs	r1, #3
 8000572:	4875      	ldr	r0, [pc, #468]	@ (8000748 <main+0x398>)
 8000574:	f001 fbfc 	bl	8001d70 <prepare_READ_packet>
			HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_MOTOR_Z, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 8000578:	2364      	movs	r3, #100	@ 0x64
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	2320      	movs	r3, #32
 800057e:	4a72      	ldr	r2, [pc, #456]	@ (8000748 <main+0x398>)
 8000580:	212c      	movs	r1, #44	@ 0x2c
 8000582:	4872      	ldr	r0, [pc, #456]	@ (800074c <main+0x39c>)
 8000584:	f005 fa22 	bl	80059cc <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive_IT(&hi2c1, ADDRESS_MOTOR_Z, rx_buffer, MAX_COMM_BUFFER_SIZE);
 8000588:	2320      	movs	r3, #32
 800058a:	4a71      	ldr	r2, [pc, #452]	@ (8000750 <main+0x3a0>)
 800058c:	212c      	movs	r1, #44	@ 0x2c
 800058e:	486f      	ldr	r0, [pc, #444]	@ (800074c <main+0x39c>)
 8000590:	f005 fb34 	bl	8005bfc <HAL_I2C_Master_Receive_IT>
			while(!data_ready){};
 8000594:	bf00      	nop
 8000596:	4b6b      	ldr	r3, [pc, #428]	@ (8000744 <main+0x394>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	f083 0301 	eor.w	r3, r3, #1
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d1f8      	bne.n	8000596 <main+0x1e6>
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, read_position - further_descent);
 80005a4:	4b6b      	ldr	r3, [pc, #428]	@ (8000754 <main+0x3a4>)
 80005a6:	ed93 7a00 	vldr	s14, [r3]
 80005aa:	4b6b      	ldr	r3, [pc, #428]	@ (8000758 <main+0x3a8>)
 80005ac:	edd3 7a00 	vldr	s15, [r3]
 80005b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005b4:	eeb0 0a67 	vmov.f32	s0, s15
 80005b8:	2100      	movs	r1, #0
 80005ba:	202c      	movs	r0, #44	@ 0x2c
 80005bc:	f001 f9e4 	bl	8001988 <write_float_to_slave>

			stage++; //For debug; TODO: remove
 80005c0:	4b5d      	ldr	r3, [pc, #372]	@ (8000738 <main+0x388>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	4a5c      	ldr	r2, [pc, #368]	@ (8000738 <main+0x388>)
 80005c8:	6013      	str	r3, [r2, #0]
			//Perform the bond
			perform_bond(bond_time_1);
 80005ca:	4b64      	ldr	r3, [pc, #400]	@ (800075c <main+0x3ac>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fa1e 	bl	8001a10 <perform_bond>

			// Open clamp solenoid
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2108      	movs	r1, #8
 80005d8:	4861      	ldr	r0, [pc, #388]	@ (8000760 <main+0x3b0>)
 80005da:	f005 f927 	bl	800582c <HAL_GPIO_WritePin>

			//Go to loop height
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, (read_position - further_descent) + loop_height);
 80005de:	4b5d      	ldr	r3, [pc, #372]	@ (8000754 <main+0x3a4>)
 80005e0:	ed93 7a00 	vldr	s14, [r3]
 80005e4:	4b5c      	ldr	r3, [pc, #368]	@ (8000758 <main+0x3a8>)
 80005e6:	edd3 7a00 	vldr	s15, [r3]
 80005ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005ee:	4b5d      	ldr	r3, [pc, #372]	@ (8000764 <main+0x3b4>)
 80005f0:	edd3 7a00 	vldr	s15, [r3]
 80005f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005f8:	eeb0 0a67 	vmov.f32	s0, s15
 80005fc:	2100      	movs	r1, #0
 80005fe:	202c      	movs	r0, #44	@ 0x2c
 8000600:	f001 f9c2 	bl	8001988 <write_float_to_slave>

			stage++; //For debug; TODO: remove
 8000604:	4b4c      	ldr	r3, [pc, #304]	@ (8000738 <main+0x388>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	3301      	adds	r3, #1
 800060a:	4a4b      	ldr	r2, [pc, #300]	@ (8000738 <main+0x388>)
 800060c:	6013      	str	r3, [r2, #0]
			// Enter into jog mode (XY movement with joystick)
			enter_jog_mode();
 800060e:	f001 f855 	bl	80016bc <enter_jog_mode>
			// Wait for the user to release the button
			wait_for_button_release();
 8000612:	f001 fa27 	bl	8001a64 <wait_for_button_release>

			//Go to search height 2
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, search_height_2);
 8000616:	4b54      	ldr	r3, [pc, #336]	@ (8000768 <main+0x3b8>)
 8000618:	edd3 7a00 	vldr	s15, [r3]
 800061c:	eeb0 0a67 	vmov.f32	s0, s15
 8000620:	2100      	movs	r1, #0
 8000622:	202c      	movs	r0, #44	@ 0x2c
 8000624:	f001 f9b0 	bl	8001988 <write_float_to_slave>

			// Wait for the button to be pressed and released
			//wait_for_button_press();

			stage++; //For debug; TODO: remove
 8000628:	4b43      	ldr	r3, [pc, #268]	@ (8000738 <main+0x388>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	3301      	adds	r3, #1
 800062e:	4a42      	ldr	r2, [pc, #264]	@ (8000738 <main+0x388>)
 8000630:	6013      	str	r3, [r2, #0]
			// Enter into jog mode (XY movement with joystick)
			enter_jog_mode();
 8000632:	f001 f843 	bl	80016bc <enter_jog_mode>
			// Wait for the user to release the button
			wait_for_button_release();
 8000636:	f001 fa15 	bl	8001a64 <wait_for_button_release>

			//Start descending until touch with substrate
			head_touched = false;
 800063a:	4b41      	ldr	r3, [pc, #260]	@ (8000740 <main+0x390>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, -1);
 8000640:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8000644:	2100      	movs	r1, #0
 8000646:	202c      	movs	r0, #44	@ 0x2c
 8000648:	f001 f99e 	bl	8001988 <write_float_to_slave>
			while(!head_touched){};
 800064c:	bf00      	nop
 800064e:	4b3c      	ldr	r3, [pc, #240]	@ (8000740 <main+0x390>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	f083 0301 	eor.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1f8      	bne.n	800064e <main+0x29e>

			stage++; //For debug; TODO: remove
 800065c:	4b36      	ldr	r3, [pc, #216]	@ (8000738 <main+0x388>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	4a35      	ldr	r2, [pc, #212]	@ (8000738 <main+0x388>)
 8000664:	6013      	str	r3, [r2, #0]
			//Lower the head a bit more
			data_ready = false;
 8000666:	4b37      	ldr	r3, [pc, #220]	@ (8000744 <main+0x394>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
			prepare_READ_packet(tx_buffer, VIRTUAL_MEM_POSITION_MEAS);
 800066c:	2103      	movs	r1, #3
 800066e:	4836      	ldr	r0, [pc, #216]	@ (8000748 <main+0x398>)
 8000670:	f001 fb7e 	bl	8001d70 <prepare_READ_packet>
			HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_MOTOR_Z, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 8000674:	2364      	movs	r3, #100	@ 0x64
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2320      	movs	r3, #32
 800067a:	4a33      	ldr	r2, [pc, #204]	@ (8000748 <main+0x398>)
 800067c:	212c      	movs	r1, #44	@ 0x2c
 800067e:	4833      	ldr	r0, [pc, #204]	@ (800074c <main+0x39c>)
 8000680:	f005 f9a4 	bl	80059cc <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive_IT(&hi2c1, ADDRESS_MOTOR_Z, rx_buffer, MAX_COMM_BUFFER_SIZE);
 8000684:	2320      	movs	r3, #32
 8000686:	4a32      	ldr	r2, [pc, #200]	@ (8000750 <main+0x3a0>)
 8000688:	212c      	movs	r1, #44	@ 0x2c
 800068a:	4830      	ldr	r0, [pc, #192]	@ (800074c <main+0x39c>)
 800068c:	f005 fab6 	bl	8005bfc <HAL_I2C_Master_Receive_IT>
			while(!data_ready){};
 8000690:	bf00      	nop
 8000692:	4b2c      	ldr	r3, [pc, #176]	@ (8000744 <main+0x394>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	f083 0301 	eor.w	r3, r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1f8      	bne.n	8000692 <main+0x2e2>
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, read_position - further_descent);
 80006a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <main+0x3a4>)
 80006a2:	ed93 7a00 	vldr	s14, [r3]
 80006a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000758 <main+0x3a8>)
 80006a8:	edd3 7a00 	vldr	s15, [r3]
 80006ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006b0:	eeb0 0a67 	vmov.f32	s0, s15
 80006b4:	2100      	movs	r1, #0
 80006b6:	202c      	movs	r0, #44	@ 0x2c
 80006b8:	f001 f966 	bl	8001988 <write_float_to_slave>

			stage++; //For debug; TODO: remove
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <main+0x388>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	3301      	adds	r3, #1
 80006c2:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <main+0x388>)
 80006c4:	6013      	str	r3, [r2, #0]
			//Perform the bond
			perform_bond(bond_time_2);
 80006c6:	4b29      	ldr	r3, [pc, #164]	@ (800076c <main+0x3bc>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 f9a0 	bl	8001a10 <perform_bond>
			HAL_GPIO_WritePin(SOLENOID_TEAR_2_GPIO_Port, SOLENOID_TEAR_2_Pin, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2110      	movs	r1, #16
 80006d4:	4822      	ldr	r0, [pc, #136]	@ (8000760 <main+0x3b0>)
 80006d6:	f005 f8a9 	bl	800582c <HAL_GPIO_WritePin>
 80006da:	e049      	b.n	8000770 <main+0x3c0>
 80006dc:	24000554 	.word	0x24000554
 80006e0:	24000558 	.word	0x24000558
 80006e4:	2400055c 	.word	0x2400055c
 80006e8:	24000560 	.word	0x24000560
 80006ec:	24000564 	.word	0x24000564
 80006f0:	24000568 	.word	0x24000568
 80006f4:	2400056c 	.word	0x2400056c
 80006f8:	24000570 	.word	0x24000570
 80006fc:	2400057c 	.word	0x2400057c
 8000700:	24000578 	.word	0x24000578
 8000704:	24000579 	.word	0x24000579
 8000708:	24000520 	.word	0x24000520
 800070c:	24000524 	.word	0x24000524
 8000710:	24000528 	.word	0x24000528
 8000714:	2400052c 	.word	0x2400052c
 8000718:	24000574 	.word	0x24000574
 800071c:	24000488 	.word	0x24000488
 8000720:	240004d4 	.word	0x240004d4
 8000724:	24000550 	.word	0x24000550
 8000728:	24000240 	.word	0x24000240
 800072c:	240002b0 	.word	0x240002b0
 8000730:	58021400 	.word	0x58021400
 8000734:	00000000 	.word	0x00000000
 8000738:	24000530 	.word	0x24000530
 800073c:	24000000 	.word	0x24000000
 8000740:	24000540 	.word	0x24000540
 8000744:	24000541 	.word	0x24000541
 8000748:	240005f8 	.word	0x240005f8
 800074c:	240003ac 	.word	0x240003ac
 8000750:	24000618 	.word	0x24000618
 8000754:	2400053c 	.word	0x2400053c
 8000758:	24000008 	.word	0x24000008
 800075c:	24000014 	.word	0x24000014
 8000760:	58020400 	.word	0x58020400
 8000764:	2400000c 	.word	0x2400000c
 8000768:	24000004 	.word	0x24000004
 800076c:	24000018 	.word	0x24000018
			HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000776:	4846      	ldr	r0, [pc, #280]	@ (8000890 <main+0x4e0>)
 8000778:	f005 f858 	bl	800582c <HAL_GPIO_WritePin>

			HAL_Delay(1000);
 800077c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000780:	f002 f85a 	bl	8002838 <HAL_Delay>

			stage++; //For debug; TODO: remove
 8000784:	4b43      	ldr	r3, [pc, #268]	@ (8000894 <main+0x4e4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	4a42      	ldr	r2, [pc, #264]	@ (8000894 <main+0x4e4>)
 800078c:	6013      	str	r3, [r2, #0]
			// Close clamp solenoid
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2108      	movs	r1, #8
 8000792:	4841      	ldr	r0, [pc, #260]	@ (8000898 <main+0x4e8>)
 8000794:	f005 f84a 	bl	800582c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SOLENOID_TEAR_2_GPIO_Port, SOLENOID_TEAR_2_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2110      	movs	r1, #16
 800079c:	483e      	ldr	r0, [pc, #248]	@ (8000898 <main+0x4e8>)
 800079e:	f005 f845 	bl	800582c <HAL_GPIO_WritePin>

			stage++; //For debug; TODO: remove
 80007a2:	4b3c      	ldr	r3, [pc, #240]	@ (8000894 <main+0x4e4>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	4a3a      	ldr	r2, [pc, #232]	@ (8000894 <main+0x4e4>)
 80007aa:	6013      	str	r3, [r2, #0]
			// Go back up
			head_touched = false;
 80007ac:	4b3b      	ldr	r3, [pc, #236]	@ (800089c <main+0x4ec>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
			write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_POSITION, 0);
 80007b2:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 80008a0 <main+0x4f0>
 80007b6:	2100      	movs	r1, #0
 80007b8:	202c      	movs	r0, #44	@ 0x2c
 80007ba:	f001 f8e5 	bl	8001988 <write_float_to_slave>

			HAL_Delay(1000);
 80007be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007c2:	f002 f839 	bl	8002838 <HAL_Delay>

			HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007cc:	4830      	ldr	r0, [pc, #192]	@ (8000890 <main+0x4e0>)
 80007ce:	f005 f82d 	bl	800582c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2108      	movs	r1, #8
 80007d6:	4830      	ldr	r0, [pc, #192]	@ (8000898 <main+0x4e8>)
 80007d8:	f005 f828 	bl	800582c <HAL_GPIO_WritePin>

			fine_adjustment = 0;
 80007dc:	4b31      	ldr	r3, [pc, #196]	@ (80008a4 <main+0x4f4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
		}
#endif

#if 1
		if(solenoid_tear_1_status)
 80007e2:	4b31      	ldr	r3, [pc, #196]	@ (80008a8 <main+0x4f8>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d006      	beq.n	80007f8 <main+0x448>
			HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f0:	4827      	ldr	r0, [pc, #156]	@ (8000890 <main+0x4e0>)
 80007f2:	f005 f81b 	bl	800582c <HAL_GPIO_WritePin>
 80007f6:	e005      	b.n	8000804 <main+0x454>
		else
			HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007fe:	4824      	ldr	r0, [pc, #144]	@ (8000890 <main+0x4e0>)
 8000800:	f005 f814 	bl	800582c <HAL_GPIO_WritePin>

		if(solenoid_tear_2_status)
 8000804:	4b29      	ldr	r3, [pc, #164]	@ (80008ac <main+0x4fc>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d005      	beq.n	8000818 <main+0x468>
			HAL_GPIO_WritePin(SOLENOID_TEAR_2_GPIO_Port, SOLENOID_TEAR_2_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	2110      	movs	r1, #16
 8000810:	4821      	ldr	r0, [pc, #132]	@ (8000898 <main+0x4e8>)
 8000812:	f005 f80b 	bl	800582c <HAL_GPIO_WritePin>
 8000816:	e004      	b.n	8000822 <main+0x472>
		else
			HAL_GPIO_WritePin(SOLENOID_TEAR_2_GPIO_Port, SOLENOID_TEAR_2_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2110      	movs	r1, #16
 800081c:	481e      	ldr	r0, [pc, #120]	@ (8000898 <main+0x4e8>)
 800081e:	f005 f805 	bl	800582c <HAL_GPIO_WritePin>

		if(solenoid_tear_clamp_status)
 8000822:	4b23      	ldr	r3, [pc, #140]	@ (80008b0 <main+0x500>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d005      	beq.n	8000836 <main+0x486>
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	2108      	movs	r1, #8
 800082e:	481a      	ldr	r0, [pc, #104]	@ (8000898 <main+0x4e8>)
 8000830:	f004 fffc 	bl	800582c <HAL_GPIO_WritePin>
 8000834:	e004      	b.n	8000840 <main+0x490>
		else
			HAL_GPIO_WritePin(SOLENOID_CLAMP_GPIO_Port, SOLENOID_CLAMP_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2108      	movs	r1, #8
 800083a:	4817      	ldr	r0, [pc, #92]	@ (8000898 <main+0x4e8>)
 800083c:	f004 fff6 	bl	800582c <HAL_GPIO_WritePin>
		//		HAL_ADC_Start(&hadc1);
		//		HAL_ADC_PollForConversion(&hadc1, 10);
		//		ADC_valX = HAL_ADC_GetValue(&hadc1) - 127.5;


		ADC_valX = ADC_Convert_Rank1() - 127.5;
 8000840:	f001 f9a0 	bl	8001b84 <ADC_Convert_Rank1>
 8000844:	eef0 7a40 	vmov.f32	s15, s0
 8000848:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800084c:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8000888 <main+0x4d8>
 8000850:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000854:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000858:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <main+0x504>)
 800085a:	edc3 7a00 	vstr	s15, [r3]
		ADC_valY = ADC_Convert_Rank2() - 127.5;         // Read The ADC Conversion Result
 800085e:	f001 f9d3 	bl	8001c08 <ADC_Convert_Rank2>
 8000862:	eef0 7a40 	vmov.f32	s15, s0
 8000866:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800086a:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8000888 <main+0x4d8>
 800086e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000872:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <main+0x508>)
 8000878:	edc3 7a00 	vstr	s15, [r3]
//HAL_I2C_Master_Receive_IT(&hi2c1, ADDRESS_MOTOR_Z, rx_buffer, MAX_COMM_BUFFER_SIZE);
//Altre funzioni (che non servono)
//HAL_I2C_Master_Receive(&hi2c1, ADDRESS_MOTOR_X, rx_buffer, MAX_COMM_BUFFER_SIZE, 1000);
//HAL_I2C_Master_Seq_Receive_IT(&hi2c1, ADDRESS_MOTOR_X, rx_buffer, MAX_COMM_BUFFER_SIZE, I2C_FIRST_AND_LAST_FRAME);

HAL_Delay(100);
 800087c:	2064      	movs	r0, #100	@ 0x64
 800087e:	f001 ffdb 	bl	8002838 <HAL_Delay>
		measure_joystick_and_send_to_slave();
 8000882:	e62b      	b.n	80004dc <main+0x12c>
 8000884:	f3af 8000 	nop.w
 8000888:	00000000 	.word	0x00000000
 800088c:	405fe000 	.word	0x405fe000
 8000890:	58020800 	.word	0x58020800
 8000894:	24000530 	.word	0x24000530
 8000898:	58020400 	.word	0x58020400
 800089c:	24000540 	.word	0x24000540
 80008a0:	00000000 	.word	0x00000000
 80008a4:	24000574 	.word	0x24000574
 80008a8:	24000564 	.word	0x24000564
 80008ac:	24000568 	.word	0x24000568
 80008b0:	2400056c 	.word	0x2400056c
 80008b4:	24000548 	.word	0x24000548
 80008b8:	2400054c 	.word	0x2400054c

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b09c      	sub	sp, #112	@ 0x70
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c6:	224c      	movs	r2, #76	@ 0x4c
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f00e fb0b 	bl	800eee6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2220      	movs	r2, #32
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f00e fb05 	bl	800eee6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008dc:	2002      	movs	r0, #2
 80008de:	f007 fa77 	bl	8007dd0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000994 <SystemClock_Config+0xd8>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	4a2a      	ldr	r2, [pc, #168]	@ (8000994 <SystemClock_Config+0xd8>)
 80008ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008f0:	6193      	str	r3, [r2, #24]
 80008f2:	4b28      	ldr	r3, [pc, #160]	@ (8000994 <SystemClock_Config+0xd8>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008fe:	bf00      	nop
 8000900:	4b24      	ldr	r3, [pc, #144]	@ (8000994 <SystemClock_Config+0xd8>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000908:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800090c:	d1f8      	bne.n	8000900 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090e:	2302      	movs	r3, #2
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000912:	2301      	movs	r3, #1
 8000914:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000916:	2340      	movs	r3, #64	@ 0x40
 8000918:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091a:	2302      	movs	r3, #2
 800091c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800091e:	2300      	movs	r3, #0
 8000920:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000922:	2304      	movs	r3, #4
 8000924:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000926:	230c      	movs	r3, #12
 8000928:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800092a:	2301      	movs	r3, #1
 800092c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800092e:	2304      	movs	r3, #4
 8000930:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000932:	2302      	movs	r3, #2
 8000934:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000936:	230c      	movs	r3, #12
 8000938:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800093a:	2300      	movs	r3, #0
 800093c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000946:	4618      	mov	r0, r3
 8000948:	f007 fa7c 	bl	8007e44 <HAL_RCC_OscConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000952:	f001 f9c7 	bl	8001ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000956:	233f      	movs	r3, #63	@ 0x3f
 8000958:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095a:	2303      	movs	r3, #3
 800095c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000966:	2340      	movs	r3, #64	@ 0x40
 8000968:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800096a:	2340      	movs	r3, #64	@ 0x40
 800096c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800096e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000972:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000974:	2340      	movs	r3, #64	@ 0x40
 8000976:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2102      	movs	r1, #2
 800097c:	4618      	mov	r0, r3
 800097e:	f007 fe3b 	bl	80085f8 <HAL_RCC_ClockConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000988:	f001 f9ac 	bl	8001ce4 <Error_Handler>
  }
}
 800098c:	bf00      	nop
 800098e:	3770      	adds	r7, #112	@ 0x70
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	58024800 	.word	0x58024800

08000998 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b0ae      	sub	sp, #184	@ 0xb8
 800099c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800099e:	463b      	mov	r3, r7
 80009a0:	22b8      	movs	r2, #184	@ 0xb8
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f00e fa9e 	bl	800eee6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009aa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009ae:	f04f 0300 	mov.w	r3, #0
 80009b2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80009b6:	2304      	movs	r3, #4
 80009b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80009ba:	230c      	movs	r3, #12
 80009bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80009be:	2302      	movs	r3, #2
 80009c0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009ca:	23c0      	movs	r3, #192	@ 0xc0
 80009cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 80009d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009d8:	2300      	movs	r3, #0
 80009da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4618      	mov	r0, r3
 80009e2:	f008 f97f 	bl	8008ce4 <HAL_RCCEx_PeriphCLKConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80009ec:	f001 f97a 	bl	8001ce4 <Error_Handler>
  }
}
 80009f0:	bf00      	nop
 80009f2:	37b8      	adds	r7, #184	@ 0xb8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	@ 0x30
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2224      	movs	r2, #36	@ 0x24
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f00e fa68 	bl	800eee6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a16:	4b3a      	ldr	r3, [pc, #232]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a18:	4a3a      	ldr	r2, [pc, #232]	@ (8000b04 <MX_ADC1_Init+0x10c>)
 8000a1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a1c:	4b38      	ldr	r3, [pc, #224]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000a22:	4b37      	ldr	r3, [pc, #220]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a24:	221c      	movs	r2, #28
 8000a26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a28:	4b35      	ldr	r3, [pc, #212]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a2e:	4b34      	ldr	r3, [pc, #208]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a30:	2204      	movs	r2, #4
 8000a32:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a34:	4b32      	ldr	r3, [pc, #200]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a3a:	4b31      	ldr	r3, [pc, #196]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000a40:	4b2f      	ldr	r3, [pc, #188]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a42:	2202      	movs	r2, #2
 8000a44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a46:	4b2e      	ldr	r3, [pc, #184]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a54:	4b2a      	ldr	r3, [pc, #168]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a5a:	4b29      	ldr	r3, [pc, #164]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a60:	4b27      	ldr	r3, [pc, #156]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a66:	4b26      	ldr	r3, [pc, #152]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000a6c:	4b24      	ldr	r3, [pc, #144]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000a74:	4b22      	ldr	r3, [pc, #136]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a7a:	4821      	ldr	r0, [pc, #132]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a7c:	f002 fa26 	bl	8002ecc <HAL_ADC_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a86:	f001 f92d 	bl	8001ce4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a92:	4619      	mov	r1, r3
 8000a94:	481a      	ldr	r0, [pc, #104]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000a96:	f003 fe47 	bl	8004728 <HAL_ADCEx_MultiModeConfigChannel>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000aa0:	f001 f920 	bl	8001ce4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <MX_ADC1_Init+0x110>)
 8000aa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aa8:	2306      	movs	r3, #6
 8000aaa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000aac:	2307      	movs	r3, #7
 8000aae:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ab0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ab4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000aca:	f002 fe07 	bl	80036dc <HAL_ADC_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000ad4:	f001 f906 	bl	8001ce4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_ADC1_Init+0x114>)
 8000ada:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000adc:	230c      	movs	r3, #12
 8000ade:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000ae0:	2306      	movs	r3, #6
 8000ae2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_ADC1_Init+0x108>)
 8000aea:	f002 fdf7 	bl	80036dc <HAL_ADC_ConfigChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000af4:	f001 f8f6 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	3730      	adds	r7, #48	@ 0x30
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	24000240 	.word	0x24000240
 8000b04:	40022000 	.word	0x40022000
 8000b08:	08600004 	.word	0x08600004
 8000b0c:	3ac04000 	.word	0x3ac04000

08000b10 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	@ 0x28
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2224      	movs	r2, #36	@ 0x24
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f00e f9e2 	bl	800eee6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b22:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b24:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd8 <MX_ADC2_Init+0xc8>)
 8000b26:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b28:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b2e:	4b29      	ldr	r3, [pc, #164]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b30:	2208      	movs	r2, #8
 8000b32:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b34:	4b27      	ldr	r3, [pc, #156]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b3a:	4b26      	ldr	r3, [pc, #152]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b3c:	2204      	movs	r2, #4
 8000b3e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b40:	4b24      	ldr	r3, [pc, #144]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b46:	4b23      	ldr	r3, [pc, #140]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000b4c:	4b21      	ldr	r3, [pc, #132]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b52:	4b20      	ldr	r3, [pc, #128]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b60:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b66:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b6c:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b72:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000b78:	4b16      	ldr	r3, [pc, #88]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000b80:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b86:	4813      	ldr	r0, [pc, #76]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000b88:	f002 f9a0 	bl	8002ecc <HAL_ADC_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000b92:	f001 f8a7 	bl	8001ce4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_ADC2_Init+0xcc>)
 8000b98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b9a:	2306      	movs	r3, #6
 8000b9c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ba2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ba6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4806      	ldr	r0, [pc, #24]	@ (8000bd4 <MX_ADC2_Init+0xc4>)
 8000bbc:	f002 fd8e 	bl	80036dc <HAL_ADC_ConfigChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000bc6:	f001 f88d 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	3728      	adds	r7, #40	@ 0x28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	240002b0 	.word	0x240002b0
 8000bd8:	40022100 	.word	0x40022100
 8000bdc:	14f00020 	.word	0x14f00020

08000be0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000be6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c20 <MX_CRC_Init+0x40>)
 8000be8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <MX_CRC_Init+0x3c>)
 8000c0a:	f003 fff7 	bl	8004bfc <HAL_CRC_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000c14:	f001 f866 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	24000320 	.word	0x24000320
 8000c20:	58024c00 	.word	0x58024c00

08000c24 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000c28:	4b1a      	ldr	r3, [pc, #104]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8000c98 <MX_DMA2D_Init+0x74>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_PFC;
 8000c2e:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c30:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000c34:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000c36:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c38:	2202      	movs	r2, #2
 8000c3a:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000c3c:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000c42:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000c48:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c6e:	f004 fb0b 	bl	8005288 <HAL_DMA2D_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_DMA2D_Init+0x58>
  {
    Error_Handler();
 8000c78:	f001 f834 	bl	8001ce4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <MX_DMA2D_Init+0x70>)
 8000c80:	f004 fb66 	bl	8005350 <HAL_DMA2D_ConfigLayer>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_DMA2D_Init+0x6a>
  {
    Error_Handler();
 8000c8a:	f001 f82b 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	24000344 	.word	0x24000344
 8000c98:	52001000 	.word	0x52001000

08000c9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d14 <MX_I2C1_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B0DCFB;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d18 <MX_I2C1_Init+0x7c>)
 8000caa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cac:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd6:	480e      	ldr	r0, [pc, #56]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cd8:	f004 fddc 	bl	8005894 <HAL_I2C_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ce2:	f000 ffff 	bl	8001ce4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4809      	ldr	r0, [pc, #36]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cea:	f006 ffd9 	bl	8007ca0 <HAL_I2CEx_ConfigAnalogFilter>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cf4:	f000 fff6 	bl	8001ce4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <MX_I2C1_Init+0x74>)
 8000cfc:	f007 f81b 	bl	8007d36 <HAL_I2CEx_ConfigDigitalFilter>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d06:	f000 ffed 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	240003ac 	.word	0x240003ac
 8000d14:	40005400 	.word	0x40005400
 8000d18:	10b0dcfb 	.word	0x10b0dcfb

08000d1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d20:	4b28      	ldr	r3, [pc, #160]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d22:	4a29      	ldr	r2, [pc, #164]	@ (8000dc8 <MX_SPI1_Init+0xac>)
 8000d24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d26:	4b27      	ldr	r3, [pc, #156]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d28:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000d2e:	4b25      	ldr	r3, [pc, #148]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d30:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000d34:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d36:	4b23      	ldr	r3, [pc, #140]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d3c:	4b21      	ldr	r3, [pc, #132]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d42:	4b20      	ldr	r3, [pc, #128]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d48:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d4a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000d50:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d52:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8000d56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d64:	4b17      	ldr	r3, [pc, #92]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d70:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d76:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d78:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <MX_SPI1_Init+0xa8>)
 8000db0:	f00a fb7e 	bl	800b4b0 <HAL_SPI_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000dba:	f000 ff93 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	24000400 	.word	0x24000400
 8000dc8:	40013000 	.word	0x40013000

08000dcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	@ 0x38
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]
 8000dfa:	615a      	str	r2, [r3, #20]
 8000dfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19200-1;
 8000e06:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e08:	f644 22ff 	movw	r2, #19199	@ 0x4aff
 8000e0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0e:	4b28      	ldr	r3, [pc, #160]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000e14:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e16:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1c:	4b24      	ldr	r3, [pc, #144]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e22:	4b23      	ldr	r3, [pc, #140]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e28:	4821      	ldr	r0, [pc, #132]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e2a:	f00a ff3c 	bl	800bca6 <HAL_TIM_Base_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000e34:	f000 ff56 	bl	8001ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e42:	4619      	mov	r1, r3
 8000e44:	481a      	ldr	r0, [pc, #104]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e46:	f00b fc7f 	bl	800c748 <HAL_TIM_ConfigClockSource>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000e50:	f000 ff48 	bl	8001ce4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000e54:	4816      	ldr	r0, [pc, #88]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e56:	f00b f803 	bl	800be60 <HAL_TIM_OC_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000e60:	f000 ff40 	bl	8001ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	480f      	ldr	r0, [pc, #60]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e74:	f00c f9ce 	bl	800d214 <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000e7e:	f000 ff31 	bl	8001ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e92:	463b      	mov	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_TIM2_Init+0xe4>)
 8000e9a:	f00b fac7 	bl	800c42c <HAL_TIM_OC_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000ea4:	f000 ff1e 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3738      	adds	r7, #56	@ 0x38
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	24000488 	.word	0x24000488

08000eb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08e      	sub	sp, #56	@ 0x38
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]
 8000ee2:	615a      	str	r2, [r3, #20]
 8000ee4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ee6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8000fa0 <MX_TIM3_Init+0xec>)
 8000eea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 192-1;
 8000eec:	4b2b      	ldr	r3, [pc, #172]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000eee:	22bf      	movs	r2, #191	@ 0xbf
 8000ef0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000ef8:	4b28      	ldr	r3, [pc, #160]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000efa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000efe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f00:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f06:	4b25      	ldr	r3, [pc, #148]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000f08:	2280      	movs	r2, #128	@ 0x80
 8000f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f0c:	4823      	ldr	r0, [pc, #140]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000f0e:	f00a feca 	bl	800bca6 <HAL_TIM_Base_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f18:	f000 fee4 	bl	8001ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f26:	4619      	mov	r1, r3
 8000f28:	481c      	ldr	r0, [pc, #112]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000f2a:	f00b fc0d 	bl	800c748 <HAL_TIM_ConfigClockSource>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000f34:	f000 fed6 	bl	8001ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f38:	4818      	ldr	r0, [pc, #96]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000f3a:	f00a fff2 	bl	800bf22 <HAL_TIM_PWM_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f44:	f000 fece 	bl	8001ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	4811      	ldr	r0, [pc, #68]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000f58:	f00c f95c 	bl	800d214 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f62:	f000 febf 	bl	8001ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f66:	2360      	movs	r3, #96	@ 0x60
 8000f68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f76:	463b      	mov	r3, r7
 8000f78:	2208      	movs	r2, #8
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000f7e:	f00b facf 	bl	800c520 <HAL_TIM_PWM_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f88:	f000 feac 	bl	8001ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f8c:	4803      	ldr	r0, [pc, #12]	@ (8000f9c <MX_TIM3_Init+0xe8>)
 8000f8e:	f001 f991 	bl	80022b4 <HAL_TIM_MspPostInit>

}
 8000f92:	bf00      	nop
 8000f94:	3738      	adds	r7, #56	@ 0x38
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	240004d4 	.word	0x240004d4
 8000fa0:	40000400 	.word	0x40000400

08000fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08c      	sub	sp, #48	@ 0x30
 8000fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fba:	4bbe      	ldr	r3, [pc, #760]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc0:	4abc      	ldr	r2, [pc, #752]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fca:	4bba      	ldr	r3, [pc, #744]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd0:	f003 0310 	and.w	r3, r3, #16
 8000fd4:	61bb      	str	r3, [r7, #24]
 8000fd6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd8:	4bb6      	ldr	r3, [pc, #728]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fde:	4ab5      	ldr	r2, [pc, #724]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8000fe0:	f043 0304 	orr.w	r3, r3, #4
 8000fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe8:	4bb2      	ldr	r3, [pc, #712]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff6:	4baf      	ldr	r3, [pc, #700]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffc:	4aad      	ldr	r2, [pc, #692]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8000ffe:	f043 0320 	orr.w	r3, r3, #32
 8001002:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001006:	4bab      	ldr	r3, [pc, #684]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100c:	f003 0320 	and.w	r3, r3, #32
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4ba7      	ldr	r3, [pc, #668]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101a:	4aa6      	ldr	r2, [pc, #664]	@ (80012b4 <MX_GPIO_Init+0x310>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001024:	4ba3      	ldr	r3, [pc, #652]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4ba0      	ldr	r3, [pc, #640]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001038:	4a9e      	ldr	r2, [pc, #632]	@ (80012b4 <MX_GPIO_Init+0x310>)
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001042:	4b9c      	ldr	r3, [pc, #624]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001050:	4b98      	ldr	r3, [pc, #608]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001056:	4a97      	ldr	r2, [pc, #604]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800105c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001060:	4b94      	ldr	r3, [pc, #592]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106e:	4b91      	ldr	r3, [pc, #580]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001074:	4a8f      	ldr	r2, [pc, #572]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001076:	f043 0308 	orr.w	r3, r3, #8
 800107a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800107e:	4b8d      	ldr	r3, [pc, #564]	@ (80012b4 <MX_GPIO_Init+0x310>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SOLENOID_TEAR_1_GPIO_Port, SOLENOID_TEAR_1_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001092:	4889      	ldr	r0, [pc, #548]	@ (80012b8 <MX_GPIO_Init+0x314>)
 8001094:	f004 fbca 	bl	800582c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SOLENOID_LOCK_Pin|LAMP_Pin|ULTRASONIC_ENABLE_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	f241 0103 	movw	r1, #4099	@ 0x1003
 800109e:	4887      	ldr	r0, [pc, #540]	@ (80012bc <MX_GPIO_Init+0x318>)
 80010a0:	f004 fbc4 	bl	800582c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2108      	movs	r1, #8
 80010a8:	4885      	ldr	r0, [pc, #532]	@ (80012c0 <MX_GPIO_Init+0x31c>)
 80010aa:	f004 fbbf 	bl	800582c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SOLENOID_CLAMP_Pin|SOLENOID_TEAR_2_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2118      	movs	r1, #24
 80010b2:	4884      	ldr	r0, [pc, #528]	@ (80012c4 <MX_GPIO_Init+0x320>)
 80010b4:	f004 fbba 	bl	800582c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010b8:	2304      	movs	r3, #4
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80010c8:	2309      	movs	r3, #9
 80010ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	487d      	ldr	r0, [pc, #500]	@ (80012c8 <MX_GPIO_Init+0x324>)
 80010d4:	f004 f9ea 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : HEATER_TEMP_Pin TOUCHSCREEN_Y_Pin TOUCHSCREEN_X_Pin */
  GPIO_InitStruct.Pin = HEATER_TEMP_Pin|TOUCHSCREEN_Y_Pin|TOUCHSCREEN_X_Pin;
 80010d8:	230b      	movs	r3, #11
 80010da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010dc:	2303      	movs	r3, #3
 80010de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	4619      	mov	r1, r3
 80010ea:	4877      	ldr	r0, [pc, #476]	@ (80012c8 <MX_GPIO_Init+0x324>)
 80010ec:	f004 f9de 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80010f0:	2370      	movs	r3, #112	@ 0x70
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001100:	230d      	movs	r3, #13
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	486f      	ldr	r0, [pc, #444]	@ (80012c8 <MX_GPIO_Init+0x324>)
 800110c:	f004 f9ce 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SOLENOID_TEAR_1_Pin */
  GPIO_InitStruct.Pin = SOLENOID_TEAR_1_Pin;
 8001110:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SOLENOID_TEAR_1_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	4863      	ldr	r0, [pc, #396]	@ (80012b8 <MX_GPIO_Init+0x314>)
 800112a:	f004 f9bf 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SOLENOID_LOCK_Pin LAMP_Pin ULTRASONIC_ENABLE_Pin */
  GPIO_InitStruct.Pin = SOLENOID_LOCK_Pin|LAMP_Pin|ULTRASONIC_ENABLE_Pin;
 800112e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	485d      	ldr	r0, [pc, #372]	@ (80012bc <MX_GPIO_Init+0x318>)
 8001148:	f004 f9b0 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : HEATER_Pin */
  GPIO_InitStruct.Pin = HEATER_Pin;
 800114c:	2304      	movs	r3, #4
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001150:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	4856      	ldr	r0, [pc, #344]	@ (80012bc <MX_GPIO_Init+0x318>)
 8001162:	f004 f9a3 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PLATFORM_TOUCH_Pin */
  GPIO_InitStruct.Pin = PLATFORM_TOUCH_Pin;
 8001166:	2308      	movs	r3, #8
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800116a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800116e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001170:	2301      	movs	r3, #1
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PLATFORM_TOUCH_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	4850      	ldr	r0, [pc, #320]	@ (80012bc <MX_GPIO_Init+0x318>)
 800117c:	f004 f996 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ULTRASONIC_CURRENT_Pin ULTRASONIC_VOLTAGE_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_CURRENT_Pin|ULTRASONIC_VOLTAGE_Pin;
 8001180:	2330      	movs	r3, #48	@ 0x30
 8001182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001184:	2303      	movs	r3, #3
 8001186:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	484a      	ldr	r0, [pc, #296]	@ (80012bc <MX_GPIO_Init+0x318>)
 8001194:	f004 f98a 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001198:	f44f 7350 	mov.w	r3, #832	@ 0x340
 800119c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80011aa:	230a      	movs	r3, #10
 80011ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	4841      	ldr	r0, [pc, #260]	@ (80012bc <MX_GPIO_Init+0x318>)
 80011b6:	f004 f979 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_START_BOND_Pin */
  GPIO_InitStruct.Pin = BUTTON_START_BOND_Pin;
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_START_BOND_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	483b      	ldr	r0, [pc, #236]	@ (80012bc <MX_GPIO_Init+0x318>)
 80011ce:	f004 f96d 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80011e4:	2309      	movs	r3, #9
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	4833      	ldr	r0, [pc, #204]	@ (80012bc <MX_GPIO_Init+0x318>)
 80011f0:	f004 f95c 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8001204:	230b      	movs	r3, #11
 8001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	482a      	ldr	r0, [pc, #168]	@ (80012b8 <MX_GPIO_Init+0x314>)
 8001210:	f004 f94c 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001214:	2302      	movs	r3, #2
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001224:	230a      	movs	r3, #10
 8001226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4619      	mov	r1, r3
 800122e:	4822      	ldr	r0, [pc, #136]	@ (80012b8 <MX_GPIO_Init+0x314>)
 8001230:	f004 f93c 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001234:	230c      	movs	r3, #12
 8001236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 8001244:	2304      	movs	r3, #4
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	481a      	ldr	r0, [pc, #104]	@ (80012b8 <MX_GPIO_Init+0x314>)
 8001250:	f004 f92c 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001254:	2302      	movs	r3, #2
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_OCTOSPIM_P1;
 8001264:	230c      	movs	r3, #12
 8001266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	4814      	ldr	r0, [pc, #80]	@ (80012c0 <MX_GPIO_Init+0x31c>)
 8001270:	f004 f91c 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001274:	2308      	movs	r3, #8
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	480d      	ldr	r0, [pc, #52]	@ (80012c0 <MX_GPIO_Init+0x31c>)
 800128c:	f004 f90e 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10;
 8001290:	f44f 63ca 	mov.w	r3, #1616	@ 0x650
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012a2:	230d      	movs	r3, #13
 80012a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <MX_GPIO_Init+0x31c>)
 80012ae:	f004 f8fd 	bl	80054ac <HAL_GPIO_Init>
 80012b2:	e00b      	b.n	80012cc <MX_GPIO_Init+0x328>
 80012b4:	58024400 	.word	0x58024400
 80012b8:	58020800 	.word	0x58020800
 80012bc:	58021400 	.word	0x58021400
 80012c0:	58020000 	.word	0x58020000
 80012c4:	58020400 	.word	0x58020400
 80012c8:	58021000 	.word	0x58021000

  /*Configure GPIO pins : PA7 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12;
 80012cc:	f44f 53c4 	mov.w	r3, #6272	@ 0x1880
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012de:	230e      	movs	r3, #14
 80012e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	488f      	ldr	r0, [pc, #572]	@ (8001528 <MX_GPIO_Init+0x584>)
 80012ea:	f004 f8df 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC7 PC10
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10
 80012ee:	f44f 53a7 	mov.w	r3, #5344	@ 0x14e0
 80012f2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001300:	230e      	movs	r3, #14
 8001302:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	4888      	ldr	r0, [pc, #544]	@ (800152c <MX_GPIO_Init+0x588>)
 800130c:	f004 f8ce 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001310:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001322:	230a      	movs	r3, #10
 8001324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	4880      	ldr	r0, [pc, #512]	@ (8001530 <MX_GPIO_Init+0x58c>)
 800132e:	f004 f8bd 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001332:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8001344:	230b      	movs	r3, #11
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	4878      	ldr	r0, [pc, #480]	@ (8001530 <MX_GPIO_Init+0x58c>)
 8001350:	f004 f8ac 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001354:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001366:	230e      	movs	r3, #14
 8001368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	486f      	ldr	r0, [pc, #444]	@ (8001530 <MX_GPIO_Init+0x58c>)
 8001372:	f004 f89b 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8;
 8001376:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001388:	230e      	movs	r3, #14
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4868      	ldr	r0, [pc, #416]	@ (8001534 <MX_GPIO_Init+0x590>)
 8001394:	f004 f88a 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG6 PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001398:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013aa:	230e      	movs	r3, #14
 80013ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	4860      	ldr	r0, [pc, #384]	@ (8001538 <MX_GPIO_Init+0x594>)
 80013b6:	f004 f879 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013cc:	230d      	movs	r3, #13
 80013ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	4855      	ldr	r0, [pc, #340]	@ (800152c <MX_GPIO_Init+0x588>)
 80013d8:	f004 f868 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 80013ee:	230d      	movs	r3, #13
 80013f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	484b      	ldr	r0, [pc, #300]	@ (8001528 <MX_GPIO_Init+0x584>)
 80013fa:	f004 f857 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001410:	2309      	movs	r3, #9
 8001412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	4843      	ldr	r0, [pc, #268]	@ (8001528 <MX_GPIO_Init+0x584>)
 800141c:	f004 f846 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001420:	2304      	movs	r3, #4
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001430:	2309      	movs	r3, #9
 8001432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	4840      	ldr	r0, [pc, #256]	@ (800153c <MX_GPIO_Init+0x598>)
 800143c:	f004 f836 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001440:	2308      	movs	r3, #8
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001450:	230d      	movs	r3, #13
 8001452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4838      	ldr	r0, [pc, #224]	@ (800153c <MX_GPIO_Init+0x598>)
 800145c:	f004 f826 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001460:	2340      	movs	r3, #64	@ 0x40
 8001462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2300      	movs	r3, #0
 800146e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001470:	230e      	movs	r3, #14
 8001472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	4830      	ldr	r0, [pc, #192]	@ (800153c <MX_GPIO_Init+0x598>)
 800147c:	f004 f816 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001480:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001492:	230d      	movs	r3, #13
 8001494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	4619      	mov	r1, r3
 800149c:	4826      	ldr	r0, [pc, #152]	@ (8001538 <MX_GPIO_Init+0x594>)
 800149e:	f004 f805 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80014b4:	2309      	movs	r3, #9
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	4619      	mov	r1, r3
 80014be:	481e      	ldr	r0, [pc, #120]	@ (8001538 <MX_GPIO_Init+0x594>)
 80014c0:	f003 fff4 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SOLENOID_CLAMP_Pin SOLENOID_TEAR_2_Pin */
  GPIO_InitStruct.Pin = SOLENOID_CLAMP_Pin|SOLENOID_TEAR_2_Pin;
 80014c4:	2318      	movs	r3, #24
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4619      	mov	r1, r3
 80014da:	4816      	ldr	r0, [pc, #88]	@ (8001534 <MX_GPIO_Init+0x590>)
 80014dc:	f003 ffe6 	bl	80054ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014e0:	2320      	movs	r3, #32
 80014e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_LTDC;
 80014f0:	2303      	movs	r3, #3
 80014f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	480e      	ldr	r0, [pc, #56]	@ (8001534 <MX_GPIO_Init+0x590>)
 80014fc:	f003 ffd6 	bl	80054ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(HEATER_EXTI_IRQn, 0, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	2008      	movs	r0, #8
 8001506:	f003 facc 	bl	8004aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HEATER_EXTI_IRQn);
 800150a:	2008      	movs	r0, #8
 800150c:	f003 fae3 	bl	8004ad6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(PLATFORM_TOUCH_EXTI_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2009      	movs	r0, #9
 8001516:	f003 fac4 	bl	8004aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PLATFORM_TOUCH_EXTI_IRQn);
 800151a:	2009      	movs	r0, #9
 800151c:	f003 fadb 	bl	8004ad6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001520:	bf00      	nop
 8001522:	3730      	adds	r7, #48	@ 0x30
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	58020000 	.word	0x58020000
 800152c:	58020800 	.word	0x58020800
 8001530:	58021000 	.word	0x58021000
 8001534:	58020400 	.word	0x58020400
 8001538:	58021800 	.word	0x58021800
 800153c:	58020c00 	.word	0x58020c00

08001540 <measure_joystick_and_send_to_slave>:

/* USER CODE BEGIN 4 */
void measure_joystick_and_send_to_slave(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	float divider;
	ADC_valX = ADC_Convert_Rank1() - 127.5 - 1.5;
 8001546:	f000 fb1d 	bl	8001b84 <ADC_Convert_Rank1>
 800154a:	eef0 7a40 	vmov.f32	s15, s0
 800154e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001552:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 8001688 <measure_joystick_and_send_to_slave+0x148>
 8001556:	ee37 7b46 	vsub.f64	d7, d7, d6
 800155a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800155e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001562:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001566:	4b4a      	ldr	r3, [pc, #296]	@ (8001690 <measure_joystick_and_send_to_slave+0x150>)
 8001568:	edc3 7a00 	vstr	s15, [r3]
	ADC_valY = ADC_Convert_Rank2() - 127.5 - 25.0;         // Read The ADC Conversion Result
 800156c:	f000 fb4c 	bl	8001c08 <ADC_Convert_Rank2>
 8001570:	eef0 7a40 	vmov.f32	s15, s0
 8001574:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001578:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 8001688 <measure_joystick_and_send_to_slave+0x148>
 800157c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001580:	eeb3 6b09 	vmov.f64	d6, #57	@ 0x41c80000  25.0
 8001584:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001588:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800158c:	4b41      	ldr	r3, [pc, #260]	@ (8001694 <measure_joystick_and_send_to_slave+0x154>)
 800158e:	edc3 7a00 	vstr	s15, [r3]
	/*
	 * Fine: /250.0
	 * Coarse: /50.0
	 */
	if (fine_adjustment)
 8001592:	4b41      	ldr	r3, [pc, #260]	@ (8001698 <measure_joystick_and_send_to_slave+0x158>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <measure_joystick_and_send_to_slave+0x60>
		divider = 150.0;
 800159a:	4b40      	ldr	r3, [pc, #256]	@ (800169c <measure_joystick_and_send_to_slave+0x15c>)
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	e001      	b.n	80015a4 <measure_joystick_and_send_to_slave+0x64>
	else
		divider = 25.0;
 80015a0:	4b3f      	ldr	r3, [pc, #252]	@ (80016a0 <measure_joystick_and_send_to_slave+0x160>)
 80015a2:	607b      	str	r3, [r7, #4]

	switch (control_mode)
 80015a4:	4b3f      	ldr	r3, [pc, #252]	@ (80016a4 <measure_joystick_and_send_to_slave+0x164>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d059      	beq.n	8001660 <measure_joystick_and_send_to_slave+0x120>
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d865      	bhi.n	800167c <measure_joystick_and_send_to_slave+0x13c>
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <measure_joystick_and_send_to_slave+0x7a>
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d045      	beq.n	8001644 <measure_joystick_and_send_to_slave+0x104>
		break;
	case 2:
		write_float_to_slave(ADDRESS_MOTOR_T, VIRTUAL_MEM_SPEED, speed_joystickT / divider);
		break;
	}
}
 80015b8:	e060      	b.n	800167c <measure_joystick_and_send_to_slave+0x13c>
		if (fabs(ADC_valX) > 40)
 80015ba:	4b35      	ldr	r3, [pc, #212]	@ (8001690 <measure_joystick_and_send_to_slave+0x150>)
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	eef0 7ae7 	vabs.f32	s15, s15
 80015c4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80016a8 <measure_joystick_and_send_to_slave+0x168>
 80015c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	dd04      	ble.n	80015dc <measure_joystick_and_send_to_slave+0x9c>
			speed_joystickX = ADC_valX;
 80015d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001690 <measure_joystick_and_send_to_slave+0x150>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a35      	ldr	r2, [pc, #212]	@ (80016ac <measure_joystick_and_send_to_slave+0x16c>)
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e003      	b.n	80015e4 <measure_joystick_and_send_to_slave+0xa4>
			speed_joystickX = 0;
 80015dc:	4b33      	ldr	r3, [pc, #204]	@ (80016ac <measure_joystick_and_send_to_slave+0x16c>)
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
		if (fabs(ADC_valY) > 40)
 80015e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001694 <measure_joystick_and_send_to_slave+0x154>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	eef0 7ae7 	vabs.f32	s15, s15
 80015ee:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80016a8 <measure_joystick_and_send_to_slave+0x168>
 80015f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fa:	dd04      	ble.n	8001606 <measure_joystick_and_send_to_slave+0xc6>
			speed_joystickY = ADC_valY;
 80015fc:	4b25      	ldr	r3, [pc, #148]	@ (8001694 <measure_joystick_and_send_to_slave+0x154>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a2b      	ldr	r2, [pc, #172]	@ (80016b0 <measure_joystick_and_send_to_slave+0x170>)
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	e003      	b.n	800160e <measure_joystick_and_send_to_slave+0xce>
			speed_joystickY = 0;
 8001606:	4b2a      	ldr	r3, [pc, #168]	@ (80016b0 <measure_joystick_and_send_to_slave+0x170>)
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
		write_float_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_SPEED, speed_joystickX / divider);
 800160e:	4b27      	ldr	r3, [pc, #156]	@ (80016ac <measure_joystick_and_send_to_slave+0x16c>)
 8001610:	ed93 7a00 	vldr	s14, [r3]
 8001614:	edd7 7a01 	vldr	s15, [r7, #4]
 8001618:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800161c:	eeb0 0a66 	vmov.f32	s0, s13
 8001620:	2101      	movs	r1, #1
 8001622:	2028      	movs	r0, #40	@ 0x28
 8001624:	f000 f9b0 	bl	8001988 <write_float_to_slave>
		write_float_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_SPEED, speed_joystickY / divider);
 8001628:	4b21      	ldr	r3, [pc, #132]	@ (80016b0 <measure_joystick_and_send_to_slave+0x170>)
 800162a:	ed93 7a00 	vldr	s14, [r3]
 800162e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001632:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001636:	eeb0 0a66 	vmov.f32	s0, s13
 800163a:	2101      	movs	r1, #1
 800163c:	202a      	movs	r0, #42	@ 0x2a
 800163e:	f000 f9a3 	bl	8001988 <write_float_to_slave>
		break;
 8001642:	e01b      	b.n	800167c <measure_joystick_and_send_to_slave+0x13c>
		write_float_to_slave(ADDRESS_MOTOR_Z, VIRTUAL_MEM_SPEED, speed_joystickZ / divider);
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <measure_joystick_and_send_to_slave+0x174>)
 8001646:	ed93 7a00 	vldr	s14, [r3]
 800164a:	edd7 7a01 	vldr	s15, [r7, #4]
 800164e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001652:	eeb0 0a66 	vmov.f32	s0, s13
 8001656:	2101      	movs	r1, #1
 8001658:	202c      	movs	r0, #44	@ 0x2c
 800165a:	f000 f995 	bl	8001988 <write_float_to_slave>
		break;
 800165e:	e00d      	b.n	800167c <measure_joystick_and_send_to_slave+0x13c>
		write_float_to_slave(ADDRESS_MOTOR_T, VIRTUAL_MEM_SPEED, speed_joystickT / divider);
 8001660:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <measure_joystick_and_send_to_slave+0x178>)
 8001662:	ed93 7a00 	vldr	s14, [r3]
 8001666:	edd7 7a01 	vldr	s15, [r7, #4]
 800166a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800166e:	eeb0 0a66 	vmov.f32	s0, s13
 8001672:	2101      	movs	r1, #1
 8001674:	202e      	movs	r0, #46	@ 0x2e
 8001676:	f000 f987 	bl	8001988 <write_float_to_slave>
		break;
 800167a:	bf00      	nop
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	f3af 8000 	nop.w
 8001688:	00000000 	.word	0x00000000
 800168c:	405fe000 	.word	0x405fe000
 8001690:	24000548 	.word	0x24000548
 8001694:	2400054c 	.word	0x2400054c
 8001698:	24000574 	.word	0x24000574
 800169c:	43160000 	.word	0x43160000
 80016a0:	41c80000 	.word	0x41c80000
 80016a4:	2400057c 	.word	0x2400057c
 80016a8:	42200000 	.word	0x42200000
 80016ac:	24000554 	.word	0x24000554
 80016b0:	24000558 	.word	0x24000558
 80016b4:	2400055c 	.word	0x2400055c
 80016b8:	24000560 	.word	0x24000560

080016bc <enter_jog_mode>:

// Enter into jog mode (XY movement with joystick)
void enter_jog_mode(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	write_uint32_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_MODE, SPD_MODE);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2105      	movs	r1, #5
 80016c4:	2028      	movs	r0, #40	@ 0x28
 80016c6:	f000 f983 	bl	80019d0 <write_uint32_to_slave>
	write_uint32_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_MODE, SPD_MODE);
 80016ca:	2201      	movs	r2, #1
 80016cc:	2105      	movs	r1, #5
 80016ce:	202a      	movs	r0, #42	@ 0x2a
 80016d0:	f000 f97e 	bl	80019d0 <write_uint32_to_slave>
	while (HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_RESET)
 80016d4:	e004      	b.n	80016e0 <enter_jog_mode+0x24>
	{
		measure_joystick_and_send_to_slave();
 80016d6:	f7ff ff33 	bl	8001540 <measure_joystick_and_send_to_slave>
		HAL_Delay(100);
 80016da:	2064      	movs	r0, #100	@ 0x64
 80016dc:	f001 f8ac 	bl	8002838 <HAL_Delay>
	while (HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_RESET)
 80016e0:	2180      	movs	r1, #128	@ 0x80
 80016e2:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <enter_jog_mode+0x38>)
 80016e4:	f004 f88a 	bl	80057fc <HAL_GPIO_ReadPin>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f3      	beq.n	80016d6 <enter_jog_mode+0x1a>
	}
	//write_uint32_to_slave(ADDRESS_MOTOR_X, VIRTUAL_MEM_MODE, POS_MODE);
	//write_uint32_to_slave(ADDRESS_MOTOR_Y, VIRTUAL_MEM_MODE, POS_MODE);
}
 80016ee:	bf00      	nop
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	58021400 	.word	0x58021400

080016f8 <read_temp_from_ADC>:
uint32_t index1=0, index2=1;
int32_t feedback_pred =0;


float read_temp_from_ADC(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
	uint32_t ADC_value;

	ADC_value = HAL_ADC_GetValue(&hadc2);
 80016fe:	4823      	ldr	r0, [pc, #140]	@ (800178c <read_temp_from_ADC+0x94>)
 8001700:	f001 ffde 	bl	80036c0 <HAL_ADC_GetValue>
 8001704:	60f8      	str	r0, [r7, #12]

	if (ADC_value < ADC_MIN)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 800170c:	d203      	bcs.n	8001716 <read_temp_from_ADC+0x1e>
	{
		ADC_value = ADC_MIN;
 800170e:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	e006      	b.n	8001724 <read_temp_from_ADC+0x2c>
	}
	else if (ADC_value > ADC_MAX)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f5b3 6f58 	cmp.w	r3, #3456	@ 0xd80
 800171c:	d902      	bls.n	8001724 <read_temp_from_ADC+0x2c>
	{
		ADC_value = ADC_MAX;
 800171e:	f44f 6358 	mov.w	r3, #3456	@ 0xd80
 8001722:	60fb      	str	r3, [r7, #12]

	//Read_temp = Tlook[ADC_value - 195];  //209

	// Interpolating...

	int16_t adc_index = (ADC_value >> DECIMATION) - (ADC_MIN >> DECIMATION);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	b29b      	uxth	r3, r3
 800172a:	3b09      	subs	r3, #9
 800172c:	b29b      	uxth	r3, r3
 800172e:	817b      	strh	r3, [r7, #10]

	int32_t delta_T = Tlook[adc_index + 1] - Tlook[adc_index];
 8001730:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001734:	3301      	adds	r3, #1
 8001736:	4a16      	ldr	r2, [pc, #88]	@ (8001790 <read_temp_from_ADC+0x98>)
 8001738:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800173c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001740:	4913      	ldr	r1, [pc, #76]	@ (8001790 <read_temp_from_ADC+0x98>)
 8001742:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	607b      	str	r3, [r7, #4]

	int16_t delta_ADC = ADC_value - ((adc_index + (ADC_MIN >> DECIMATION)) << DECIMATION);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	b29a      	uxth	r2, r3
 800174e:	897b      	ldrh	r3, [r7, #10]
 8001750:	3309      	adds	r3, #9
 8001752:	b29b      	uxth	r3, r3
 8001754:	015b      	lsls	r3, r3, #5
 8001756:	b29b      	uxth	r3, r3
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	b29b      	uxth	r3, r3
 800175c:	807b      	strh	r3, [r7, #2]

	return ((delta_T * delta_ADC) + (Tlook[adc_index] << DECIMATION)) >> DECIMATION;
 800175e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	fb03 f202 	mul.w	r2, r3, r2
 8001768:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800176c:	4908      	ldr	r1, [pc, #32]	@ (8001790 <read_temp_from_ADC+0x98>)
 800176e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001772:	015b      	lsls	r3, r3, #5
 8001774:	4413      	add	r3, r2
 8001776:	115b      	asrs	r3, r3, #5
 8001778:	ee07 3a90 	vmov	s15, r3
 800177c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001780:	eeb0 0a67 	vmov.f32	s0, s15
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	240002b0 	.word	0x240002b0
 8001790:	24000020 	.word	0x24000020

08001794 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	int32_t Read_temp, PI_error, PI_output, integral = 0, proportional, PI_prev_error = 0, limMaxInt = 0, limMinInt = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
 80017a0:	2300      	movs	r3, #0
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

	if(htim == &htim2) {
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a66      	ldr	r2, [pc, #408]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	f040 80c4 	bne.w	800193e <HAL_TIM_PeriodElapsedCallback+0x1aa>
		/* Read ADC */
		HAL_ADC_Start(&hadc2);
 80017b6:	4865      	ldr	r0, [pc, #404]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80017b8:	f001 fd90 	bl	80032dc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 1000);
 80017bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017c0:	4862      	ldr	r0, [pc, #392]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80017c2:	f001 fe89 	bl	80034d8 <HAL_ADC_PollForConversion>
		Read_temp = read_temp_from_ADC();
 80017c6:	f7ff ff97 	bl	80016f8 <read_temp_from_ADC>
 80017ca:	eef0 7a40 	vmov.f32	s15, s0
 80017ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d2:	ee17 3a90 	vmov	r3, s15
 80017d6:	613b      	str	r3, [r7, #16]
		HAL_ADC_Stop(&hadc2);
 80017d8:	485c      	ldr	r0, [pc, #368]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80017da:	f001 fe49 	bl	8003470 <HAL_ADC_Stop>

		measured_temperature_gauge = ((float)(Read_temp>>10)) - 273.5;
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	129b      	asrs	r3, r3, #10
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ea:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001950 <HAL_TIM_PeriodElapsedCallback+0x1bc>
 80017ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017f2:	4b58      	ldr	r3, [pc, #352]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80017f4:	edc3 7a00 	vstr	s15, [r3]
		temperature_testpoint = Read_temp;
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4a57      	ldr	r2, [pc, #348]	@ (8001958 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80017fc:	6013      	str	r3, [r2, #0]

		/* PI Controller */
		//error = setpoint - feedback_pred;
		PI_error = setpoint - Read_temp;
 80017fe:	4b57      	ldr	r3, [pc, #348]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	60fb      	str	r3, [r7, #12]

		proportional = Kp * PI_error;
 8001808:	225a      	movs	r2, #90	@ 0x5a
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	fb02 f303 	mul.w	r3, r2, r3
 8001810:	60bb      	str	r3, [r7, #8]

		// Dynamic Anti-wind-up limits calculation
		if (PLMAX > proportional && proportional >= 0) {
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001818:	da07      	bge.n	800182a <HAL_TIM_PeriodElapsedCallback+0x96>
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db04      	blt.n	800182a <HAL_TIM_PeriodElapsedCallback+0x96>
			limMaxInt = PLMAX - proportional;
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001826:	61fb      	str	r3, [r7, #28]
 8001828:	e001      	b.n	800182e <HAL_TIM_PeriodElapsedCallback+0x9a>
		}
		else {
			limMaxInt = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
		}

		integral = integral + Ki * Sample_time * (PI_prev_error + PI_error);
 800182e:	2300      	movs	r3, #0
 8001830:	2201      	movs	r2, #1
 8001832:	fb02 f303 	mul.w	r3, r2, r3
 8001836:	69b9      	ldr	r1, [r7, #24]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	440a      	add	r2, r1
 800183c:	fb02 f303 	mul.w	r3, r2, r3
 8001840:	6a3a      	ldr	r2, [r7, #32]
 8001842:	4413      	add	r3, r2
 8001844:	623b      	str	r3, [r7, #32]
		PI_prev_error = PI_error;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	61bb      	str	r3, [r7, #24]

		// Anti-wind-up integrator limits clamping
		if (integral > limMaxInt) {
 800184a:	6a3a      	ldr	r2, [r7, #32]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	429a      	cmp	r2, r3
 8001850:	dd02      	ble.n	8001858 <HAL_TIM_PeriodElapsedCallback+0xc4>
			integral = limMaxInt;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	623b      	str	r3, [r7, #32]
 8001856:	e005      	b.n	8001864 <HAL_TIM_PeriodElapsedCallback+0xd0>
		}
		else if (integral < limMinInt) {
 8001858:	6a3a      	ldr	r2, [r7, #32]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	429a      	cmp	r2, r3
 800185e:	da01      	bge.n	8001864 <HAL_TIM_PeriodElapsedCallback+0xd0>
			integral = limMinInt;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	623b      	str	r3, [r7, #32]
		}

		// output to PWM value conditioning
		PI_output = ((integral + proportional) >> 10) * 50;
 8001864:	6a3a      	ldr	r2, [r7, #32]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	4413      	add	r3, r2
 800186a:	129b      	asrs	r3, r3, #10
 800186c:	2232      	movs	r2, #50	@ 0x32
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24

		if (PI_output > OLMAX) {
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001876:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800187a:	dd03      	ble.n	8001884 <HAL_TIM_PeriodElapsedCallback+0xf0>
			PI_output = 1000;
 800187c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
 8001882:	e004      	b.n	800188e <HAL_TIM_PeriodElapsedCallback+0xfa>
		}
		else if (PI_output < 0) {
 8001884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001886:	2b00      	cmp	r3, #0
 8001888:	da01      	bge.n	800188e <HAL_TIM_PeriodElapsedCallback+0xfa>
			PI_output = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		/* End PI Controller */

		TIM3->CCR3 = PI_output;
 800188e:	4a34      	ldr	r2, [pc, #208]	@ (8001960 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001892:	63d3      	str	r3, [r2, #60]	@ 0x3c

		// Output diventa 2^10
		output2 = PI_output * 20;
 8001894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	461a      	mov	r2, r3
 80018a0:	4b30      	ldr	r3, [pc, #192]	@ (8001964 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80018a2:	601a      	str	r2, [r3, #0]

		// 2^20 -> 2^10
		in_model = (((output2 * output2) >> 10) * 82) >> 10;
 80018a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001964 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001964 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	129b      	asrs	r3, r3, #10
 80018b2:	2252      	movs	r2, #82	@ 0x52
 80018b4:	fb02 f303 	mul.w	r3, r2, r3
 80018b8:	129b      	asrs	r3, r3, #10
 80018ba:	4a2b      	ldr	r2, [pc, #172]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80018bc:	6013      	str	r3, [r2, #0]

		//L'uscita è 2^10
		out_model =  (out_model_prev * ad + bu * in_model + bd * in_model_prev) >> 16;
 80018be:	4b2b      	ldr	r3, [pc, #172]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f64f 72c5 	movw	r2, #65477	@ 0xffc5
 80018c6:	fb03 f202 	mul.w	r2, r3, r2
 80018ca:	21d1      	movs	r1, #209	@ 0xd1
 80018cc:	4b26      	ldr	r3, [pc, #152]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	441a      	add	r2, r3
 80018d6:	21d1      	movs	r1, #209	@ 0xd1
 80018d8:	4b25      	ldr	r3, [pc, #148]	@ (8001970 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	141b      	asrs	r3, r3, #16
 80018e4:	4a23      	ldr	r2, [pc, #140]	@ (8001974 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80018e6:	6013      	str	r3, [r2, #0]

		in_model_prev = in_model;
 80018e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a20      	ldr	r2, [pc, #128]	@ (8001970 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80018ee:	6013      	str	r3, [r2, #0]
		out_model_prev = out_model;
 80018f0:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a1d      	ldr	r2, [pc, #116]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80018f6:	6013      	str	r3, [r2, #0]

		// Prendo primo blocco
		out_delayed = delay_vect[index1];
 80018f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a1f      	ldr	r2, [pc, #124]	@ (800197c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80018fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001902:	4a1f      	ldr	r2, [pc, #124]	@ (8001980 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001904:	6013      	str	r3, [r2, #0]

		delay_vect[index1] = out_model;
 8001906:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a1a      	ldr	r2, [pc, #104]	@ (8001974 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	491b      	ldr	r1, [pc, #108]	@ (800197c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		index1++;
 8001914:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	3301      	adds	r3, #1
 800191a:	4a17      	ldr	r2, [pc, #92]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800191c:	6013      	str	r3, [r2, #0]

		if (index1 > 21)
 800191e:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b15      	cmp	r3, #21
 8001924:	d902      	bls.n	800192c <HAL_TIM_PeriodElapsedCallback+0x198>
			index1 = 0;
 8001926:	4b14      	ldr	r3, [pc, #80]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]


		 feedback_pred = Read_temp - out_delayed + out_model;
 800192c:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	1ad2      	subs	r2, r2, r3
 8001934:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4413      	add	r3, r2
 800193a:	4a12      	ldr	r2, [pc, #72]	@ (8001984 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800193c:	6013      	str	r3, [r2, #0]

	}
}
 800193e:	bf00      	nop
 8001940:	3728      	adds	r7, #40	@ 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	24000488 	.word	0x24000488
 800194c:	240002b0 	.word	0x240002b0
 8001950:	4388c000 	.word	0x4388c000
 8001954:	24000528 	.word	0x24000528
 8001958:	24000544 	.word	0x24000544
 800195c:	2400001c 	.word	0x2400001c
 8001960:	40000400 	.word	0x40000400
 8001964:	24000590 	.word	0x24000590
 8001968:	24000588 	.word	0x24000588
 800196c:	24000584 	.word	0x24000584
 8001970:	24000580 	.word	0x24000580
 8001974:	2400058c 	.word	0x2400058c
 8001978:	240005f0 	.word	0x240005f0
 800197c:	24000598 	.word	0x24000598
 8001980:	24000594 	.word	0x24000594
 8001984:	240005f4 	.word	0x240005f4

08001988 <write_float_to_slave>:


void write_float_to_slave(uint8_t slave_address, uint8_t virtual_memory_address, float value)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af02      	add	r7, sp, #8
 800198e:	4603      	mov	r3, r0
 8001990:	460a      	mov	r2, r1
 8001992:	ed87 0a00 	vstr	s0, [r7]
 8001996:	71fb      	strb	r3, [r7, #7]
 8001998:	4613      	mov	r3, r2
 800199a:	71bb      	strb	r3, [r7, #6]
	ui32_to_f conv;
	conv.f = value;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	60fb      	str	r3, [r7, #12]
	prepare_WRITE_packet(tx_buffer, virtual_memory_address, conv.ui32);
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	4619      	mov	r1, r3
 80019a6:	4808      	ldr	r0, [pc, #32]	@ (80019c8 <write_float_to_slave+0x40>)
 80019a8:	f000 f9b4 	bl	8001d14 <prepare_WRITE_packet>
	HAL_I2C_Master_Transmit(&hi2c1, slave_address, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	b299      	uxth	r1, r3
 80019b0:	2364      	movs	r3, #100	@ 0x64
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2320      	movs	r3, #32
 80019b6:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <write_float_to_slave+0x40>)
 80019b8:	4804      	ldr	r0, [pc, #16]	@ (80019cc <write_float_to_slave+0x44>)
 80019ba:	f004 f807 	bl	80059cc <HAL_I2C_Master_Transmit>
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	240005f8 	.word	0x240005f8
 80019cc:	240003ac 	.word	0x240003ac

080019d0 <write_uint32_to_slave>:

void write_uint32_to_slave(uint8_t slave_address, uint8_t virtual_memory_address, uint32_t value)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	4603      	mov	r3, r0
 80019d8:	603a      	str	r2, [r7, #0]
 80019da:	71fb      	strb	r3, [r7, #7]
 80019dc:	460b      	mov	r3, r1
 80019de:	71bb      	strb	r3, [r7, #6]
	prepare_WRITE_packet(tx_buffer, virtual_memory_address, value);
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	4808      	ldr	r0, [pc, #32]	@ (8001a08 <write_uint32_to_slave+0x38>)
 80019e8:	f000 f994 	bl	8001d14 <prepare_WRITE_packet>
	HAL_I2C_Master_Transmit(&hi2c1, slave_address, tx_buffer, MAX_COMM_BUFFER_SIZE, MAX_TRANSMISSION_TIME);
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	b299      	uxth	r1, r3
 80019f0:	2364      	movs	r3, #100	@ 0x64
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2320      	movs	r3, #32
 80019f6:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <write_uint32_to_slave+0x38>)
 80019f8:	4804      	ldr	r0, [pc, #16]	@ (8001a0c <write_uint32_to_slave+0x3c>)
 80019fa:	f003 ffe7 	bl	80059cc <HAL_I2C_Master_Transmit>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	240005f8 	.word	0x240005f8
 8001a0c:	240003ac 	.word	0x240003ac

08001a10 <perform_bond>:

void perform_bond(uint32_t bond_time)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	//Perform the bond

	//Enable the ultrasonic driver
	HAL_GPIO_WritePin(ULTRASONIC_ENABLE_GPIO_Port, ULTRASONIC_ENABLE_Pin, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a1e:	480f      	ldr	r0, [pc, #60]	@ (8001a5c <perform_bond+0x4c>)
 8001a20:	f003 ff04 	bl	800582c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001a24:	2064      	movs	r0, #100	@ 0x64
 8001a26:	f000 ff07 	bl	8002838 <HAL_Delay>
	write_bond_power_to_trimmer(bond_power);
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <perform_bond+0x50>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f82a 	bl	8001a88 <write_bond_power_to_trimmer>
	HAL_Delay(bond_time);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 feff 	bl	8002838 <HAL_Delay>
	write_bond_power_to_trimmer(0);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f000 f824 	bl	8001a88 <write_bond_power_to_trimmer>
	HAL_Delay(100);
 8001a40:	2064      	movs	r0, #100	@ 0x64
 8001a42:	f000 fef9 	bl	8002838 <HAL_Delay>
	//Disable the ultrasonic driver
	HAL_GPIO_WritePin(ULTRASONIC_ENABLE_GPIO_Port, ULTRASONIC_ENABLE_Pin, GPIO_PIN_SET);
 8001a46:	2201      	movs	r2, #1
 8001a48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a4c:	4803      	ldr	r0, [pc, #12]	@ (8001a5c <perform_bond+0x4c>)
 8001a4e:	f003 feed 	bl	800582c <HAL_GPIO_WritePin>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	58021400 	.word	0x58021400
 8001a60:	24000010 	.word	0x24000010

08001a64 <wait_for_button_release>:

void wait_for_button_release(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_SET)
 8001a68:	e002      	b.n	8001a70 <wait_for_button_release+0xc>
		HAL_Delay(100);
 8001a6a:	2064      	movs	r0, #100	@ 0x64
 8001a6c:	f000 fee4 	bl	8002838 <HAL_Delay>
	while(HAL_GPIO_ReadPin(BUTTON_START_BOND_GPIO_Port, BUTTON_START_BOND_Pin) == GPIO_PIN_SET)
 8001a70:	2180      	movs	r1, #128	@ 0x80
 8001a72:	4804      	ldr	r0, [pc, #16]	@ (8001a84 <wait_for_button_release+0x20>)
 8001a74:	f003 fec2 	bl	80057fc <HAL_GPIO_ReadPin>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d0f5      	beq.n	8001a6a <wait_for_button_release+0x6>
}
 8001a7e:	bf00      	nop
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	58021400 	.word	0x58021400

08001a88 <write_bond_power_to_trimmer>:
	// Wait for the user to release the button
	wait_for_button_release();
}

void write_bond_power_to_trimmer(uint8_t bond_power)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
	uint8_t payload[2] = {0x11, bond_power};
 8001a92:	2311      	movs	r3, #17
 8001a94:	733b      	strb	r3, [r7, #12]
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2108      	movs	r1, #8
 8001a9e:	4809      	ldr	r0, [pc, #36]	@ (8001ac4 <write_bond_power_to_trimmer+0x3c>)
 8001aa0:	f003 fec4 	bl	800582c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, payload, 2, 100);
 8001aa4:	f107 010c 	add.w	r1, r7, #12
 8001aa8:	2364      	movs	r3, #100	@ 0x64
 8001aaa:	2202      	movs	r2, #2
 8001aac:	4806      	ldr	r0, [pc, #24]	@ (8001ac8 <write_bond_power_to_trimmer+0x40>)
 8001aae:	f009 fe23 	bl	800b6f8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2108      	movs	r1, #8
 8001ab6:	4803      	ldr	r0, [pc, #12]	@ (8001ac4 <write_bond_power_to_trimmer+0x3c>)
 8001ab8:	f003 feb8 	bl	800582c <HAL_GPIO_WritePin>

	return;
 8001abc:	bf00      	nop
}
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	58020000 	.word	0x58020000
 8001ac8:	24000400 	.word	0x24000400

08001acc <HAL_GPIO_EXTI_Callback>:
/**
 * @brief Handles the GPIO callback
 * @param GPIO_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PLATFORM_TOUCH_Pin)
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d102      	bne.n	8001ae2 <HAL_GPIO_EXTI_Callback+0x16>
	{
		head_touched = true;
 8001adc:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <HAL_GPIO_EXTI_Callback+0x24>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
	}
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	24000540 	.word	0x24000540

08001af4 <execute_write_command>:

int execute_write_command(uint8_t write_address, uint32_t data)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
	int ret_val = COMM_ERR;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	60fb      	str	r3, [r7, #12]
	ui32_to_f conv;
	conv.ui32 = data;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	60bb      	str	r3, [r7, #8]

	switch (write_address)
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d108      	bne.n	8001b22 <execute_write_command+0x2e>
	{
	case VIRTUAL_MEM_POSITION_MEAS:
		read_position = conv.f;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4a09      	ldr	r2, [pc, #36]	@ (8001b38 <execute_write_command+0x44>)
 8001b14:	6013      	str	r3, [r2, #0]
		data_ready = true;
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <execute_write_command+0x48>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	701a      	strb	r2, [r3, #0]
		ret_val = COMM_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
		break;
 8001b20:	e003      	b.n	8001b2a <execute_write_command+0x36>

	default:
		ret_val = COMM_ERR;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	60fb      	str	r3, [r7, #12]
		break;
 8001b28:	bf00      	nop
	}

	return ret_val;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	2400053c 	.word	0x2400053c
 8001b3c:	24000541 	.word	0x24000541

08001b40 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c1)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	//Perform different actions based on the received command
	switch (rx_buffer[0])
 8001b48:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <HAL_I2C_MasterRxCpltCallback+0x38>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d10e      	bne.n	8001b6e <HAL_I2C_MasterRxCpltCallback+0x2e>
	{
	case COMMAND_WRITE:
		read_data_from_WRITE_command(rx_buffer, &received_address, &received_data);
 8001b50:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <HAL_I2C_MasterRxCpltCallback+0x3c>)
 8001b52:	490b      	ldr	r1, [pc, #44]	@ (8001b80 <HAL_I2C_MasterRxCpltCallback+0x40>)
 8001b54:	4808      	ldr	r0, [pc, #32]	@ (8001b78 <HAL_I2C_MasterRxCpltCallback+0x38>)
 8001b56:	f000 f926 	bl	8001da6 <read_data_from_WRITE_command>
		execute_write_command(received_address, received_data);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_I2C_MasterRxCpltCallback+0x40>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	4a07      	ldr	r2, [pc, #28]	@ (8001b7c <HAL_I2C_MasterRxCpltCallback+0x3c>)
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ffc5 	bl	8001af4 <execute_write_command>
		break;
 8001b6a:	bf00      	nop
	}
	return;
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
}
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	24000618 	.word	0x24000618
 8001b7c:	24000534 	.word	0x24000534
 8001b80:	24000538 	.word	0x24000538

08001b84 <ADC_Convert_Rank1>:


float ADC_Convert_Rank1 (void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	@ 0x28
 8001b88:	af00      	add	r7, sp, #0
	/* Configure channel */
	ADC_ChannelConfTypeDef sConfig = {0};
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	2224      	movs	r2, #36	@ 0x24
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f00d f9a8 	bl	800eee6 <memset>
	sConfig.Channel = ADC_CHANNEL_2;
 8001b96:	4b1a      	ldr	r3, [pc, #104]	@ (8001c00 <ADC_Convert_Rank1+0x7c>)
 8001b98:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b9a:	2306      	movs	r3, #6
 8001b9c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ba2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001ba6:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ba8:	2304      	movs	r3, #4
 8001baa:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4812      	ldr	r0, [pc, #72]	@ (8001c04 <ADC_Convert_Rank1+0x80>)
 8001bbc:	f001 fd8e 	bl	80036dc <HAL_ADC_ConfigChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <ADC_Convert_Rank1+0x46>
	{
		Error_Handler();
 8001bc6:	f000 f88d 	bl	8001ce4 <Error_Handler>
	}
	/* Convert the Channel */
	HAL_ADC_Start(&hadc1);
 8001bca:	480e      	ldr	r0, [pc, #56]	@ (8001c04 <ADC_Convert_Rank1+0x80>)
 8001bcc:	f001 fb86 	bl	80032dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001bd0:	2164      	movs	r1, #100	@ 0x64
 8001bd2:	480c      	ldr	r0, [pc, #48]	@ (8001c04 <ADC_Convert_Rank1+0x80>)
 8001bd4:	f001 fc80 	bl	80034d8 <HAL_ADC_PollForConversion>
	float adcval = HAL_ADC_GetValue(&hadc1);
 8001bd8:	480a      	ldr	r0, [pc, #40]	@ (8001c04 <ADC_Convert_Rank1+0x80>)
 8001bda:	f001 fd71 	bl	80036c0 <HAL_ADC_GetValue>
 8001bde:	ee07 0a90 	vmov	s15, r0
 8001be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	HAL_ADC_Stop(&hadc1);
 8001bea:	4806      	ldr	r0, [pc, #24]	@ (8001c04 <ADC_Convert_Rank1+0x80>)
 8001bec:	f001 fc40 	bl	8003470 <HAL_ADC_Stop>
	return adcval;
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	ee07 3a90 	vmov	s15, r3
}
 8001bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfa:	3728      	adds	r7, #40	@ 0x28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	08600004 	.word	0x08600004
 8001c04:	24000240 	.word	0x24000240

08001c08 <ADC_Convert_Rank2>:

float ADC_Convert_Rank2 (void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001c0e:	463b      	mov	r3, r7
 8001c10:	2224      	movs	r2, #36	@ 0x24
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f00d f966 	bl	800eee6 <memset>
	sConfig.Channel = ADC_CHANNEL_5;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <ADC_Convert_Rank2+0x7c>)
 8001c1c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c1e:	2306      	movs	r3, #6
 8001c20:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8001c22:	2306      	movs	r3, #6
 8001c24:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c26:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001c2a:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4812      	ldr	r0, [pc, #72]	@ (8001c88 <ADC_Convert_Rank2+0x80>)
 8001c40:	f001 fd4c 	bl	80036dc <HAL_ADC_ConfigChannel>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <ADC_Convert_Rank2+0x46>
	{
		Error_Handler();
 8001c4a:	f000 f84b 	bl	8001ce4 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 8001c4e:	480e      	ldr	r0, [pc, #56]	@ (8001c88 <ADC_Convert_Rank2+0x80>)
 8001c50:	f001 fb44 	bl	80032dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001c54:	2164      	movs	r1, #100	@ 0x64
 8001c56:	480c      	ldr	r0, [pc, #48]	@ (8001c88 <ADC_Convert_Rank2+0x80>)
 8001c58:	f001 fc3e 	bl	80034d8 <HAL_ADC_PollForConversion>
	float adcval = HAL_ADC_GetValue(&hadc1);
 8001c5c:	480a      	ldr	r0, [pc, #40]	@ (8001c88 <ADC_Convert_Rank2+0x80>)
 8001c5e:	f001 fd2f 	bl	80036c0 <HAL_ADC_GetValue>
 8001c62:	ee07 0a90 	vmov	s15, r0
 8001c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c6a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	HAL_ADC_Stop(&hadc1);
 8001c6e:	4806      	ldr	r0, [pc, #24]	@ (8001c88 <ADC_Convert_Rank2+0x80>)
 8001c70:	f001 fbfe 	bl	8003470 <HAL_ADC_Stop>
	return adcval;
 8001c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c76:	ee07 3a90 	vmov	s15, r3
}
 8001c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7e:	3728      	adds	r7, #40	@ 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	14f00020 	.word	0x14f00020
 8001c88:	24000240 	.word	0x24000240

08001c8c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001c92:	463b      	mov	r3, r7
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001c9e:	f002 ff35 	bl	8004b0c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001cae:	231f      	movs	r3, #31
 8001cb0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001cb2:	2387      	movs	r3, #135	@ 0x87
 8001cb4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001cce:	463b      	mov	r3, r7
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f002 ff53 	bl	8004b7c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001cd6:	2004      	movs	r0, #4
 8001cd8:	f002 ff30 	bl	8004b3c <HAL_MPU_Enable>

}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce8:	b672      	cpsid	i
}
 8001cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <Error_Handler+0x8>

08001cf0 <serial_communication_variable_init>:
 **********************************************************************************************/
/**
 * Zeroes the tx and rx buffers
 */
void serial_communication_variable_init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	memset(tx_buffer, 0x00, MAX_COMM_BUFFER_SIZE);
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4804      	ldr	r0, [pc, #16]	@ (8001d0c <serial_communication_variable_init+0x1c>)
 8001cfa:	f00d f8f4 	bl	800eee6 <memset>
	memset(rx_buffer, 0x00, MAX_COMM_BUFFER_SIZE);
 8001cfe:	2220      	movs	r2, #32
 8001d00:	2100      	movs	r1, #0
 8001d02:	4803      	ldr	r0, [pc, #12]	@ (8001d10 <serial_communication_variable_init+0x20>)
 8001d04:	f00d f8ef 	bl	800eee6 <memset>
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	240005f8 	.word	0x240005f8
 8001d10:	24000618 	.word	0x24000618

08001d14 <prepare_WRITE_packet>:
 *
 * @param buffer tx buffer pointer
 * @return total message length
 */
uint16_t prepare_WRITE_packet(uint8_t * buffer, uint8_t virtual_memory_address, uint32_t value)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	72fb      	strb	r3, [r7, #11]
	uint16_t packet_size = 7;
 8001d22:	2307      	movs	r3, #7
 8001d24:	82fb      	strh	r3, [r7, #22]
	ui32_to_ui8 conversion_union;

	conversion_union.ui32 = value;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	613b      	str	r3, [r7, #16]

	buffer[0] = COMMAND_WRITE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2205      	movs	r2, #5
 8001d2e:	701a      	strb	r2, [r3, #0]
	buffer[1] = packet_size;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3301      	adds	r3, #1
 8001d34:	8afa      	ldrh	r2, [r7, #22]
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	701a      	strb	r2, [r3, #0]
	buffer[2] = virtual_memory_address;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	7afa      	ldrb	r2, [r7, #11]
 8001d40:	701a      	strb	r2, [r3, #0]
	buffer[3] = conversion_union.ui8[0];
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3303      	adds	r3, #3
 8001d46:	7c3a      	ldrb	r2, [r7, #16]
 8001d48:	701a      	strb	r2, [r3, #0]
	buffer[4] = conversion_union.ui8[1];
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	7c7a      	ldrb	r2, [r7, #17]
 8001d50:	701a      	strb	r2, [r3, #0]
	buffer[5] = conversion_union.ui8[2];
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3305      	adds	r3, #5
 8001d56:	7cba      	ldrb	r2, [r7, #18]
 8001d58:	701a      	strb	r2, [r3, #0]
	buffer[6] = conversion_union.ui8[3];
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3306      	adds	r3, #6
 8001d5e:	7cfa      	ldrb	r2, [r7, #19]
 8001d60:	701a      	strb	r2, [r3, #0]
	return packet_size;
 8001d62:	8afb      	ldrh	r3, [r7, #22]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	371c      	adds	r7, #28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <prepare_READ_packet>:
 *
 * @param buffer tx buffer pointer
 * @return total message length
 */
uint16_t prepare_READ_packet(uint8_t * buffer, uint8_t read_address)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70fb      	strb	r3, [r7, #3]
	uint16_t packet_size = 3;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	81fb      	strh	r3, [r7, #14]
	buffer[0] = COMMAND_READ;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2206      	movs	r2, #6
 8001d84:	701a      	strb	r2, [r3, #0]
	buffer[1] = packet_size;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	89fa      	ldrh	r2, [r7, #14]
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	701a      	strb	r2, [r3, #0]
	buffer[2] = read_address;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3302      	adds	r3, #2
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	701a      	strb	r2, [r3, #0]
	return packet_size;
 8001d98:	89fb      	ldrh	r3, [r7, #14]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <read_data_from_WRITE_command>:
 * @param buffer pointer to the input buffer (it contains the received WRITE command)
 * @param read_address address at which the WRITE command is directed
 * @param data received uint32_t word
 */
void read_data_from_WRITE_command(uint8_t * buffer, uint8_t * read_address, uint32_t * data)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b087      	sub	sp, #28
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
	ui32_to_ui8 conversion_union;
	(*read_address) = buffer[2];
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	789a      	ldrb	r2, [r3, #2]
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	701a      	strb	r2, [r3, #0]
	conversion_union.ui8[0] = buffer[3];
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	78db      	ldrb	r3, [r3, #3]
 8001dbe:	753b      	strb	r3, [r7, #20]
	conversion_union.ui8[1] = buffer[4];
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	791b      	ldrb	r3, [r3, #4]
 8001dc4:	757b      	strb	r3, [r7, #21]
	conversion_union.ui8[2] = buffer[5];
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	795b      	ldrb	r3, [r3, #5]
 8001dca:	75bb      	strb	r3, [r7, #22]
	conversion_union.ui8[3] = buffer[6];
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	799b      	ldrb	r3, [r3, #6]
 8001dd0:	75fb      	strb	r3, [r7, #23]
	(*data) = conversion_union.ui32;
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	601a      	str	r2, [r3, #0]

	return;
 8001dd8:	bf00      	nop
}
 8001dda:	371c      	adds	r7, #28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <HAL_MspInit+0x30>)
 8001dec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001df0:	4a08      	ldr	r2, [pc, #32]	@ (8001e14 <HAL_MspInit+0x30>)
 8001df2:	f043 0302 	orr.w	r3, r3, #2
 8001df6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_MspInit+0x30>)
 8001dfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	58024400 	.word	0x58024400

08001e18 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08e      	sub	sp, #56	@ 0x38
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a54      	ldr	r2, [pc, #336]	@ (8001f88 <HAL_ADC_MspInit+0x170>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d16a      	bne.n	8001f10 <HAL_ADC_MspInit+0xf8>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e3a:	4b54      	ldr	r3, [pc, #336]	@ (8001f8c <HAL_ADC_MspInit+0x174>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	4a52      	ldr	r2, [pc, #328]	@ (8001f8c <HAL_ADC_MspInit+0x174>)
 8001e42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e44:	4b51      	ldr	r3, [pc, #324]	@ (8001f8c <HAL_ADC_MspInit+0x174>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d10e      	bne.n	8001e6a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e4c:	4b50      	ldr	r3, [pc, #320]	@ (8001f90 <HAL_ADC_MspInit+0x178>)
 8001e4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e52:	4a4f      	ldr	r2, [pc, #316]	@ (8001f90 <HAL_ADC_MspInit+0x178>)
 8001e54:	f043 0320 	orr.w	r3, r3, #32
 8001e58:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e5c:	4b4c      	ldr	r3, [pc, #304]	@ (8001f90 <HAL_ADC_MspInit+0x178>)
 8001e5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	623b      	str	r3, [r7, #32]
 8001e68:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	4b49      	ldr	r3, [pc, #292]	@ (8001f90 <HAL_ADC_MspInit+0x178>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e70:	4a47      	ldr	r2, [pc, #284]	@ (8001f90 <HAL_ADC_MspInit+0x178>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e7a:	4b45      	ldr	r3, [pc, #276]	@ (8001f90 <HAL_ADC_MspInit+0x178>)
 8001e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e88:	4b41      	ldr	r3, [pc, #260]	@ (8001f90 <HAL_ADC_MspInit+0x178>)
 8001e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8e:	4a40      	ldr	r2, [pc, #256]	@ (8001f90 <HAL_ADC_MspInit+0x178>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e98:	4b3d      	ldr	r3, [pc, #244]	@ (8001f90 <HAL_ADC_MspInit+0x178>)
 8001e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	@ (8001f90 <HAL_ADC_MspInit+0x178>)
 8001ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eac:	4a38      	ldr	r2, [pc, #224]	@ (8001f90 <HAL_ADC_MspInit+0x178>)
 8001eae:	f043 0320 	orr.w	r3, r3, #32
 8001eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eb6:	4b36      	ldr	r3, [pc, #216]	@ (8001f90 <HAL_ADC_MspInit+0x178>)
 8001eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ebc:	f003 0320 	and.w	r3, r3, #32
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	482f      	ldr	r0, [pc, #188]	@ (8001f94 <HAL_ADC_MspInit+0x17c>)
 8001ed8:	f003 fae8 	bl	80054ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001edc:	2302      	movs	r3, #2
 8001ede:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eec:	4619      	mov	r1, r3
 8001eee:	482a      	ldr	r0, [pc, #168]	@ (8001f98 <HAL_ADC_MspInit+0x180>)
 8001ef0:	f003 fadc 	bl	80054ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ef4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001efa:	2303      	movs	r3, #3
 8001efc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f06:	4619      	mov	r1, r3
 8001f08:	4824      	ldr	r0, [pc, #144]	@ (8001f9c <HAL_ADC_MspInit+0x184>)
 8001f0a:	f003 facf 	bl	80054ac <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001f0e:	e037      	b.n	8001f80 <HAL_ADC_MspInit+0x168>
  else if(hadc->Instance==ADC2)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a22      	ldr	r2, [pc, #136]	@ (8001fa0 <HAL_ADC_MspInit+0x188>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d132      	bne.n	8001f80 <HAL_ADC_MspInit+0x168>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f8c <HAL_ADC_MspInit+0x174>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	4a1a      	ldr	r2, [pc, #104]	@ (8001f8c <HAL_ADC_MspInit+0x174>)
 8001f22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001f24:	4b19      	ldr	r3, [pc, #100]	@ (8001f8c <HAL_ADC_MspInit+0x174>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d10e      	bne.n	8001f4a <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001f2c:	4b18      	ldr	r3, [pc, #96]	@ (8001f90 <HAL_ADC_MspInit+0x178>)
 8001f2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f32:	4a17      	ldr	r2, [pc, #92]	@ (8001f90 <HAL_ADC_MspInit+0x178>)
 8001f34:	f043 0320 	orr.w	r3, r3, #32
 8001f38:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f3c:	4b14      	ldr	r3, [pc, #80]	@ (8001f90 <HAL_ADC_MspInit+0x178>)
 8001f3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4a:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <HAL_ADC_MspInit+0x178>)
 8001f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f50:	4a0f      	ldr	r2, [pc, #60]	@ (8001f90 <HAL_ADC_MspInit+0x178>)
 8001f52:	f043 0302 	orr.w	r3, r3, #2
 8001f56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <HAL_ADC_MspInit+0x178>)
 8001f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4807      	ldr	r0, [pc, #28]	@ (8001f98 <HAL_ADC_MspInit+0x180>)
 8001f7c:	f003 fa96 	bl	80054ac <HAL_GPIO_Init>
}
 8001f80:	bf00      	nop
 8001f82:	3738      	adds	r7, #56	@ 0x38
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40022000 	.word	0x40022000
 8001f8c:	24000638 	.word	0x24000638
 8001f90:	58024400 	.word	0x58024400
 8001f94:	58020000 	.word	0x58020000
 8001f98:	58020400 	.word	0x58020400
 8001f9c:	58021400 	.word	0x58021400
 8001fa0:	40022100 	.word	0x40022100

08001fa4 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe0 <HAL_CRC_MspInit+0x3c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d10e      	bne.n	8001fd4 <HAL_CRC_MspInit+0x30>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <HAL_CRC_MspInit+0x40>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fbc:	4a09      	ldr	r2, [pc, #36]	@ (8001fe4 <HAL_CRC_MspInit+0x40>)
 8001fbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fc6:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <HAL_CRC_MspInit+0x40>)
 8001fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	58024c00 	.word	0x58024c00
 8001fe4:	58024400 	.word	0x58024400

08001fe8 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8002024 <HAL_DMA2D_MspInit+0x3c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d10e      	bne.n	8002018 <HAL_DMA2D_MspInit+0x30>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <HAL_DMA2D_MspInit+0x40>)
 8001ffc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002000:	4a09      	ldr	r2, [pc, #36]	@ (8002028 <HAL_DMA2D_MspInit+0x40>)
 8002002:	f043 0310 	orr.w	r3, r3, #16
 8002006:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800200a:	4b07      	ldr	r3, [pc, #28]	@ (8002028 <HAL_DMA2D_MspInit+0x40>)
 800200c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	52001000 	.word	0x52001000
 8002028:	58024400 	.word	0x58024400

0800202c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b0b8      	sub	sp, #224	@ 0xe0
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002044:	f107 0310 	add.w	r3, r7, #16
 8002048:	22b8      	movs	r2, #184	@ 0xb8
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f00c ff4a 	bl	800eee6 <memset>
  if(hi2c->Instance==I2C1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a2e      	ldr	r2, [pc, #184]	@ (8002110 <HAL_I2C_MspInit+0xe4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d155      	bne.n	8002108 <HAL_I2C_MspInit+0xdc>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800205c:	f04f 0208 	mov.w	r2, #8
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002068:	2300      	movs	r3, #0
 800206a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800206e:	f107 0310 	add.w	r3, r7, #16
 8002072:	4618      	mov	r0, r3
 8002074:	f006 fe36 	bl	8008ce4 <HAL_RCCEx_PeriphCLKConfig>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800207e:	f7ff fe31 	bl	8001ce4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002082:	4b24      	ldr	r3, [pc, #144]	@ (8002114 <HAL_I2C_MspInit+0xe8>)
 8002084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002088:	4a22      	ldr	r2, [pc, #136]	@ (8002114 <HAL_I2C_MspInit+0xe8>)
 800208a:	f043 0302 	orr.w	r3, r3, #2
 800208e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002092:	4b20      	ldr	r3, [pc, #128]	@ (8002114 <HAL_I2C_MspInit+0xe8>)
 8002094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020a0:	23c0      	movs	r3, #192	@ 0xc0
 80020a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020a6:	2312      	movs	r3, #18
 80020a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020b8:	2304      	movs	r3, #4
 80020ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020be:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80020c2:	4619      	mov	r1, r3
 80020c4:	4814      	ldr	r0, [pc, #80]	@ (8002118 <HAL_I2C_MspInit+0xec>)
 80020c6:	f003 f9f1 	bl	80054ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020ca:	4b12      	ldr	r3, [pc, #72]	@ (8002114 <HAL_I2C_MspInit+0xe8>)
 80020cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020d0:	4a10      	ldr	r2, [pc, #64]	@ (8002114 <HAL_I2C_MspInit+0xe8>)
 80020d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020da:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <HAL_I2C_MspInit+0xe8>)
 80020dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2100      	movs	r1, #0
 80020ec:	201f      	movs	r0, #31
 80020ee:	f002 fcd8 	bl	8004aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80020f2:	201f      	movs	r0, #31
 80020f4:	f002 fcef 	bl	8004ad6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2100      	movs	r1, #0
 80020fc:	2020      	movs	r0, #32
 80020fe:	f002 fcd0 	bl	8004aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002102:	2020      	movs	r0, #32
 8002104:	f002 fce7 	bl	8004ad6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002108:	bf00      	nop
 800210a:	37e0      	adds	r7, #224	@ 0xe0
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40005400 	.word	0x40005400
 8002114:	58024400 	.word	0x58024400
 8002118:	58020400 	.word	0x58020400

0800211c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b0ba      	sub	sp, #232	@ 0xe8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002134:	f107 0318 	add.w	r3, r7, #24
 8002138:	22b8      	movs	r2, #184	@ 0xb8
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f00c fed2 	bl	800eee6 <memset>
  if(hspi->Instance==SPI1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a38      	ldr	r2, [pc, #224]	@ (8002228 <HAL_SPI_MspInit+0x10c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d168      	bne.n	800221e <HAL_SPI_MspInit+0x102>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800214c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002158:	2300      	movs	r3, #0
 800215a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800215c:	f107 0318 	add.w	r3, r7, #24
 8002160:	4618      	mov	r0, r3
 8002162:	f006 fdbf 	bl	8008ce4 <HAL_RCCEx_PeriphCLKConfig>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800216c:	f7ff fdba 	bl	8001ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002170:	4b2e      	ldr	r3, [pc, #184]	@ (800222c <HAL_SPI_MspInit+0x110>)
 8002172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002176:	4a2d      	ldr	r2, [pc, #180]	@ (800222c <HAL_SPI_MspInit+0x110>)
 8002178:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800217c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002180:	4b2a      	ldr	r3, [pc, #168]	@ (800222c <HAL_SPI_MspInit+0x110>)
 8002182:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002186:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218e:	4b27      	ldr	r3, [pc, #156]	@ (800222c <HAL_SPI_MspInit+0x110>)
 8002190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002194:	4a25      	ldr	r2, [pc, #148]	@ (800222c <HAL_SPI_MspInit+0x110>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800219e:	4b23      	ldr	r3, [pc, #140]	@ (800222c <HAL_SPI_MspInit+0x110>)
 80021a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ac:	4b1f      	ldr	r3, [pc, #124]	@ (800222c <HAL_SPI_MspInit+0x110>)
 80021ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b2:	4a1e      	ldr	r2, [pc, #120]	@ (800222c <HAL_SPI_MspInit+0x110>)
 80021b4:	f043 0308 	orr.w	r3, r3, #8
 80021b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021bc:	4b1b      	ldr	r3, [pc, #108]	@ (800222c <HAL_SPI_MspInit+0x110>)
 80021be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021ca:	2320      	movs	r3, #32
 80021cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021e2:	2305      	movs	r3, #5
 80021e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021ec:	4619      	mov	r1, r3
 80021ee:	4810      	ldr	r0, [pc, #64]	@ (8002230 <HAL_SPI_MspInit+0x114>)
 80021f0:	f003 f95c 	bl	80054ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021f4:	2380      	movs	r3, #128	@ 0x80
 80021f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800220c:	2305      	movs	r3, #5
 800220e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002212:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002216:	4619      	mov	r1, r3
 8002218:	4806      	ldr	r0, [pc, #24]	@ (8002234 <HAL_SPI_MspInit+0x118>)
 800221a:	f003 f947 	bl	80054ac <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800221e:	bf00      	nop
 8002220:	37e8      	adds	r7, #232	@ 0xe8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40013000 	.word	0x40013000
 800222c:	58024400 	.word	0x58024400
 8002230:	58020000 	.word	0x58020000
 8002234:	58020c00 	.word	0x58020c00

08002238 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002248:	d117      	bne.n	800227a <HAL_TIM_Base_MspInit+0x42>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800224a:	4b18      	ldr	r3, [pc, #96]	@ (80022ac <HAL_TIM_Base_MspInit+0x74>)
 800224c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002250:	4a16      	ldr	r2, [pc, #88]	@ (80022ac <HAL_TIM_Base_MspInit+0x74>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800225a:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <HAL_TIM_Base_MspInit+0x74>)
 800225c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002268:	2200      	movs	r2, #0
 800226a:	2100      	movs	r1, #0
 800226c:	201c      	movs	r0, #28
 800226e:	f002 fc18 	bl	8004aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002272:	201c      	movs	r0, #28
 8002274:	f002 fc2f 	bl	8004ad6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002278:	e013      	b.n	80022a2 <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM3)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a0c      	ldr	r2, [pc, #48]	@ (80022b0 <HAL_TIM_Base_MspInit+0x78>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d10e      	bne.n	80022a2 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002284:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <HAL_TIM_Base_MspInit+0x74>)
 8002286:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800228a:	4a08      	ldr	r2, [pc, #32]	@ (80022ac <HAL_TIM_Base_MspInit+0x74>)
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002294:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <HAL_TIM_Base_MspInit+0x74>)
 8002296:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
}
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	58024400 	.word	0x58024400
 80022b0:	40000400 	.word	0x40000400

080022b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 030c 	add.w	r3, r7, #12
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a12      	ldr	r2, [pc, #72]	@ (800231c <HAL_TIM_MspPostInit+0x68>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d11e      	bne.n	8002314 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <HAL_TIM_MspPostInit+0x6c>)
 80022d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022dc:	4a10      	ldr	r2, [pc, #64]	@ (8002320 <HAL_TIM_MspPostInit+0x6c>)
 80022de:	f043 0302 	orr.w	r3, r3, #2
 80022e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <HAL_TIM_MspPostInit+0x6c>)
 80022e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022f4:	2301      	movs	r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002300:	2300      	movs	r3, #0
 8002302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002304:	2302      	movs	r3, #2
 8002306:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	4619      	mov	r1, r3
 800230e:	4805      	ldr	r0, [pc, #20]	@ (8002324 <HAL_TIM_MspPostInit+0x70>)
 8002310:	f003 f8cc 	bl	80054ac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002314:	bf00      	nop
 8002316:	3720      	adds	r7, #32
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40000400 	.word	0x40000400
 8002320:	58024400 	.word	0x58024400
 8002324:	58020400 	.word	0x58020400

08002328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <NMI_Handler+0x4>

08002330 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002334:	bf00      	nop
 8002336:	e7fd      	b.n	8002334 <HardFault_Handler+0x4>

08002338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800233c:	bf00      	nop
 800233e:	e7fd      	b.n	800233c <MemManage_Handler+0x4>

08002340 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002344:	bf00      	nop
 8002346:	e7fd      	b.n	8002344 <BusFault_Handler+0x4>

08002348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800234c:	bf00      	nop
 800234e:	e7fd      	b.n	800234c <UsageFault_Handler+0x4>

08002350 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800237e:	f000 fa3b 	bl	80027f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}

08002386 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HEATER_Pin);
 800238a:	2004      	movs	r0, #4
 800238c:	f003 fa67 	bl	800585e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}

08002394 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PLATFORM_TOUCH_Pin);
 8002398:	2008      	movs	r0, #8
 800239a:	f003 fa60 	bl	800585e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023a8:	4802      	ldr	r0, [pc, #8]	@ (80023b4 <TIM2_IRQHandler+0x10>)
 80023aa:	f009 ff37 	bl	800c21c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	24000488 	.word	0x24000488

080023b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80023bc:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <I2C1_EV_IRQHandler+0x10>)
 80023be:	f003 fc8d 	bl	8005cdc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	240003ac 	.word	0x240003ac

080023cc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80023d0:	4802      	ldr	r0, [pc, #8]	@ (80023dc <I2C1_ER_IRQHandler+0x10>)
 80023d2:	f003 fc9d 	bl	8005d10 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	240003ac 	.word	0x240003ac

080023e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return 1;
 80023e4:	2301      	movs	r3, #1
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_kill>:

int _kill(int pid, int sig)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023fa:	f00c fe17 	bl	800f02c <__errno>
 80023fe:	4603      	mov	r3, r0
 8002400:	2216      	movs	r2, #22
 8002402:	601a      	str	r2, [r3, #0]
  return -1;
 8002404:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <_exit>:

void _exit (int status)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002418:	f04f 31ff 	mov.w	r1, #4294967295
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ffe7 	bl	80023f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002422:	bf00      	nop
 8002424:	e7fd      	b.n	8002422 <_exit+0x12>

08002426 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b086      	sub	sp, #24
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	e00a      	b.n	800244e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002438:	f3af 8000 	nop.w
 800243c:	4601      	mov	r1, r0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	60ba      	str	r2, [r7, #8]
 8002444:	b2ca      	uxtb	r2, r1
 8002446:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3301      	adds	r3, #1
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	429a      	cmp	r2, r3
 8002454:	dbf0      	blt.n	8002438 <_read+0x12>
  }

  return len;
 8002456:	687b      	ldr	r3, [r7, #4]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	e009      	b.n	8002486 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	60ba      	str	r2, [r7, #8]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3301      	adds	r3, #1
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	429a      	cmp	r2, r3
 800248c:	dbf1      	blt.n	8002472 <_write+0x12>
  }
  return len;
 800248e:	687b      	ldr	r3, [r7, #4]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <_close>:

int _close(int file)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024c0:	605a      	str	r2, [r3, #4]
  return 0;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <_isatty>:

int _isatty(int file)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024d8:	2301      	movs	r3, #1
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002508:	4a14      	ldr	r2, [pc, #80]	@ (800255c <_sbrk+0x5c>)
 800250a:	4b15      	ldr	r3, [pc, #84]	@ (8002560 <_sbrk+0x60>)
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002514:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <_sbrk+0x64>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800251c:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <_sbrk+0x64>)
 800251e:	4a12      	ldr	r2, [pc, #72]	@ (8002568 <_sbrk+0x68>)
 8002520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002522:	4b10      	ldr	r3, [pc, #64]	@ (8002564 <_sbrk+0x64>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	429a      	cmp	r2, r3
 800252e:	d207      	bcs.n	8002540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002530:	f00c fd7c 	bl	800f02c <__errno>
 8002534:	4603      	mov	r3, r0
 8002536:	220c      	movs	r2, #12
 8002538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	e009      	b.n	8002554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002540:	4b08      	ldr	r3, [pc, #32]	@ (8002564 <_sbrk+0x64>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002546:	4b07      	ldr	r3, [pc, #28]	@ (8002564 <_sbrk+0x64>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	4a05      	ldr	r2, [pc, #20]	@ (8002564 <_sbrk+0x64>)
 8002550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002552:	68fb      	ldr	r3, [r7, #12]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	24050000 	.word	0x24050000
 8002560:	00000400 	.word	0x00000400
 8002564:	2400063c 	.word	0x2400063c
 8002568:	24000a38 	.word	0x24000a38

0800256c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002570:	4b3e      	ldr	r3, [pc, #248]	@ (800266c <SystemInit+0x100>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002576:	4a3d      	ldr	r2, [pc, #244]	@ (800266c <SystemInit+0x100>)
 8002578:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800257c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002580:	4b3b      	ldr	r3, [pc, #236]	@ (8002670 <SystemInit+0x104>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	2b06      	cmp	r3, #6
 800258a:	d807      	bhi.n	800259c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800258c:	4b38      	ldr	r3, [pc, #224]	@ (8002670 <SystemInit+0x104>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f023 030f 	bic.w	r3, r3, #15
 8002594:	4a36      	ldr	r2, [pc, #216]	@ (8002670 <SystemInit+0x104>)
 8002596:	f043 0307 	orr.w	r3, r3, #7
 800259a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800259c:	4b35      	ldr	r3, [pc, #212]	@ (8002674 <SystemInit+0x108>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a34      	ldr	r2, [pc, #208]	@ (8002674 <SystemInit+0x108>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025a8:	4b32      	ldr	r3, [pc, #200]	@ (8002674 <SystemInit+0x108>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025ae:	4b31      	ldr	r3, [pc, #196]	@ (8002674 <SystemInit+0x108>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4930      	ldr	r1, [pc, #192]	@ (8002674 <SystemInit+0x108>)
 80025b4:	4b30      	ldr	r3, [pc, #192]	@ (8002678 <SystemInit+0x10c>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002670 <SystemInit+0x104>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d007      	beq.n	80025d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002670 <SystemInit+0x104>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 030f 	bic.w	r3, r3, #15
 80025ce:	4a28      	ldr	r2, [pc, #160]	@ (8002670 <SystemInit+0x104>)
 80025d0:	f043 0307 	orr.w	r3, r3, #7
 80025d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025d6:	4b27      	ldr	r3, [pc, #156]	@ (8002674 <SystemInit+0x108>)
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025dc:	4b25      	ldr	r3, [pc, #148]	@ (8002674 <SystemInit+0x108>)
 80025de:	2200      	movs	r2, #0
 80025e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025e2:	4b24      	ldr	r3, [pc, #144]	@ (8002674 <SystemInit+0x108>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025e8:	4b22      	ldr	r3, [pc, #136]	@ (8002674 <SystemInit+0x108>)
 80025ea:	4a24      	ldr	r2, [pc, #144]	@ (800267c <SystemInit+0x110>)
 80025ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025ee:	4b21      	ldr	r3, [pc, #132]	@ (8002674 <SystemInit+0x108>)
 80025f0:	4a23      	ldr	r2, [pc, #140]	@ (8002680 <SystemInit+0x114>)
 80025f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002674 <SystemInit+0x108>)
 80025f6:	4a23      	ldr	r2, [pc, #140]	@ (8002684 <SystemInit+0x118>)
 80025f8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80025fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002674 <SystemInit+0x108>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002600:	4b1c      	ldr	r3, [pc, #112]	@ (8002674 <SystemInit+0x108>)
 8002602:	4a20      	ldr	r2, [pc, #128]	@ (8002684 <SystemInit+0x118>)
 8002604:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002606:	4b1b      	ldr	r3, [pc, #108]	@ (8002674 <SystemInit+0x108>)
 8002608:	2200      	movs	r2, #0
 800260a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800260c:	4b19      	ldr	r3, [pc, #100]	@ (8002674 <SystemInit+0x108>)
 800260e:	4a1d      	ldr	r2, [pc, #116]	@ (8002684 <SystemInit+0x118>)
 8002610:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002612:	4b18      	ldr	r3, [pc, #96]	@ (8002674 <SystemInit+0x108>)
 8002614:	2200      	movs	r2, #0
 8002616:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002618:	4b16      	ldr	r3, [pc, #88]	@ (8002674 <SystemInit+0x108>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a15      	ldr	r2, [pc, #84]	@ (8002674 <SystemInit+0x108>)
 800261e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002622:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002624:	4b13      	ldr	r3, [pc, #76]	@ (8002674 <SystemInit+0x108>)
 8002626:	2200      	movs	r2, #0
 8002628:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800262a:	4b12      	ldr	r3, [pc, #72]	@ (8002674 <SystemInit+0x108>)
 800262c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002630:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d113      	bne.n	8002660 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002638:	4b0e      	ldr	r3, [pc, #56]	@ (8002674 <SystemInit+0x108>)
 800263a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800263e:	4a0d      	ldr	r2, [pc, #52]	@ (8002674 <SystemInit+0x108>)
 8002640:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002644:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002648:	4b0f      	ldr	r3, [pc, #60]	@ (8002688 <SystemInit+0x11c>)
 800264a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800264e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002650:	4b08      	ldr	r3, [pc, #32]	@ (8002674 <SystemInit+0x108>)
 8002652:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002656:	4a07      	ldr	r2, [pc, #28]	@ (8002674 <SystemInit+0x108>)
 8002658:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800265c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000ed00 	.word	0xe000ed00
 8002670:	52002000 	.word	0x52002000
 8002674:	58024400 	.word	0x58024400
 8002678:	eaf6ed7f 	.word	0xeaf6ed7f
 800267c:	02020200 	.word	0x02020200
 8002680:	01ff0000 	.word	0x01ff0000
 8002684:	01010280 	.word	0x01010280
 8002688:	52004000 	.word	0x52004000

0800268c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002690:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <ExitRun0Mode+0x2c>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4a08      	ldr	r2, [pc, #32]	@ (80026b8 <ExitRun0Mode+0x2c>)
 8002696:	f043 0302 	orr.w	r3, r3, #2
 800269a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800269c:	bf00      	nop
 800269e:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <ExitRun0Mode+0x2c>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f9      	beq.n	800269e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80026aa:	bf00      	nop
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	58024800 	.word	0x58024800

080026bc <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack      /* set stack pointer */
 80026bc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80026f8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80026c0:	f7ff ffe4 	bl	800268c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026c4:	f7ff ff52 	bl	800256c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c8:	480c      	ldr	r0, [pc, #48]	@ (80026fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026ca:	490d      	ldr	r1, [pc, #52]	@ (8002700 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002704 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d0:	e002      	b.n	80026d8 <LoopCopyDataInit>

080026d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d6:	3304      	adds	r3, #4

080026d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026dc:	d3f9      	bcc.n	80026d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026de:	4a0a      	ldr	r2, [pc, #40]	@ (8002708 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026e0:	4c0a      	ldr	r4, [pc, #40]	@ (800270c <LoopFillZerobss+0x22>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e4:	e001      	b.n	80026ea <LoopFillZerobss>

080026e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e8:	3204      	adds	r2, #4

080026ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ec:	d3fb      	bcc.n	80026e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ee:	f00c fca3 	bl	800f038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f2:	f7fd fe5d 	bl	80003b0 <main>
  bx  lr
 80026f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026f8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80026fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002700:	24000224 	.word	0x24000224
  ldr r2, =_sidata
 8002704:	08011274 	.word	0x08011274
  ldr r2, =_sbss
 8002708:	24000224 	.word	0x24000224
  ldr r4, =_ebss
 800270c:	24000a38 	.word	0x24000a38

08002710 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002710:	e7fe      	b.n	8002710 <ADC3_IRQHandler>
	...

08002714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800271a:	2003      	movs	r0, #3
 800271c:	f002 f9b6 	bl	8004a8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002720:	f006 f920 	bl	8008964 <HAL_RCC_GetSysClockFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b15      	ldr	r3, [pc, #84]	@ (800277c <HAL_Init+0x68>)
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	4913      	ldr	r1, [pc, #76]	@ (8002780 <HAL_Init+0x6c>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
 800273c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800273e:	4b0f      	ldr	r3, [pc, #60]	@ (800277c <HAL_Init+0x68>)
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	4a0e      	ldr	r2, [pc, #56]	@ (8002780 <HAL_Init+0x6c>)
 8002748:	5cd3      	ldrb	r3, [r2, r3]
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
 8002754:	4a0b      	ldr	r2, [pc, #44]	@ (8002784 <HAL_Init+0x70>)
 8002756:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002758:	4a0b      	ldr	r2, [pc, #44]	@ (8002788 <HAL_Init+0x74>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800275e:	2000      	movs	r0, #0
 8002760:	f000 f814 	bl	800278c <HAL_InitTick>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e002      	b.n	8002774 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800276e:	f7ff fb39 	bl	8001de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	58024400 	.word	0x58024400
 8002780:	0800fdb4 	.word	0x0800fdb4
 8002784:	240001b4 	.word	0x240001b4
 8002788:	240001b0 	.word	0x240001b0

0800278c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002794:	4b15      	ldr	r3, [pc, #84]	@ (80027ec <HAL_InitTick+0x60>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e021      	b.n	80027e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80027a0:	4b13      	ldr	r3, [pc, #76]	@ (80027f0 <HAL_InitTick+0x64>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b11      	ldr	r3, [pc, #68]	@ (80027ec <HAL_InitTick+0x60>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	f002 f99b 	bl	8004af2 <HAL_SYSTICK_Config>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00e      	b.n	80027e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b0f      	cmp	r3, #15
 80027ca:	d80a      	bhi.n	80027e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027cc:	2200      	movs	r2, #0
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	f002 f965 	bl	8004aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d8:	4a06      	ldr	r2, [pc, #24]	@ (80027f4 <HAL_InitTick+0x68>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	240001bc 	.word	0x240001bc
 80027f0:	240001b0 	.word	0x240001b0
 80027f4:	240001b8 	.word	0x240001b8

080027f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027fc:	4b06      	ldr	r3, [pc, #24]	@ (8002818 <HAL_IncTick+0x20>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4b06      	ldr	r3, [pc, #24]	@ (800281c <HAL_IncTick+0x24>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4413      	add	r3, r2
 8002808:	4a04      	ldr	r2, [pc, #16]	@ (800281c <HAL_IncTick+0x24>)
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	240001bc 	.word	0x240001bc
 800281c:	24000640 	.word	0x24000640

08002820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return uwTick;
 8002824:	4b03      	ldr	r3, [pc, #12]	@ (8002834 <HAL_GetTick+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	24000640 	.word	0x24000640

08002838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002840:	f7ff ffee 	bl	8002820 <HAL_GetTick>
 8002844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d005      	beq.n	800285e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002852:	4b0a      	ldr	r3, [pc, #40]	@ (800287c <HAL_Delay+0x44>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800285e:	bf00      	nop
 8002860:	f7ff ffde 	bl	8002820 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	429a      	cmp	r2, r3
 800286e:	d8f7      	bhi.n	8002860 <HAL_Delay+0x28>
  {
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	240001bc 	.word	0x240001bc

08002880 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	609a      	str	r2, [r3, #8]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	609a      	str	r2, [r3, #8]
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a18      	ldr	r2, [pc, #96]	@ (8002958 <LL_ADC_SetChannelPreselection+0x70>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d027      	beq.n	800294a <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002900:	2b00      	cmp	r3, #0
 8002902:	d107      	bne.n	8002914 <LL_ADC_SetChannelPreselection+0x2c>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	0e9b      	lsrs	r3, r3, #26
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	2201      	movs	r2, #1
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	e015      	b.n	8002940 <LL_ADC_SetChannelPreselection+0x58>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 800292a:	2320      	movs	r3, #32
 800292c:	e003      	b.n	8002936 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	2201      	movs	r2, #1
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	69d2      	ldr	r2, [r2, #28]
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 800294a:	bf00      	nop
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	58026000 	.word	0x58026000

0800295c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3360      	adds	r3, #96	@ 0x60
 800296e:	461a      	mov	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4a10      	ldr	r2, [pc, #64]	@ (80029bc <LL_ADC_SetOffset+0x60>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d10b      	bne.n	8002998 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	4313      	orrs	r3, r2
 800298e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002996:	e00b      	b.n	80029b0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	430b      	orrs	r3, r1
 80029aa:	431a      	orrs	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	601a      	str	r2, [r3, #0]
}
 80029b0:	bf00      	nop
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	58026000 	.word	0x58026000

080029c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3360      	adds	r3, #96	@ 0x60
 80029ce:	461a      	mov	r2, r3
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f003 031f 	and.w	r3, r3, #31
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	611a      	str	r2, [r3, #16]
}
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8002a60 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00e      	beq.n	8002a52 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3360      	adds	r3, #96	@ 0x60
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	601a      	str	r2, [r3, #0]
  }
}
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	58026000 	.word	0x58026000

08002a64 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa4 <LL_ADC_SetOffsetSaturation+0x40>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d10e      	bne.n	8002a96 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3360      	adds	r3, #96	@ 0x60
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	431a      	orrs	r2, r3
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	58026000 	.word	0x58026000

08002aa8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8002ae8 <LL_ADC_SetOffsetSign+0x40>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d10e      	bne.n	8002ada <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	3360      	adds	r3, #96	@ 0x60
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	58026000 	.word	0x58026000

08002aec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	3360      	adds	r3, #96	@ 0x60
 8002afc:	461a      	mov	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4a0c      	ldr	r2, [pc, #48]	@ (8002b3c <LL_ADC_SetOffsetState+0x50>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d108      	bne.n	8002b20 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002b1e:	e007      	b.n	8002b30 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	601a      	str	r2, [r3, #0]
}
 8002b30:	bf00      	nop
 8002b32:	371c      	adds	r7, #28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	58026000 	.word	0x58026000

08002b40 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b087      	sub	sp, #28
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3330      	adds	r3, #48	@ 0x30
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	4413      	add	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	211f      	movs	r1, #31
 8002b92:	fa01 f303 	lsl.w	r3, r1, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	401a      	ands	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	0e9b      	lsrs	r3, r3, #26
 8002b9e:	f003 011f 	and.w	r1, r3, #31
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	431a      	orrs	r2, r3
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b087      	sub	sp, #28
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3314      	adds	r3, #20
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	0e5b      	lsrs	r3, r3, #25
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	4413      	add	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	0d1b      	lsrs	r3, r3, #20
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	2107      	movs	r1, #7
 8002bec:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	0d1b      	lsrs	r3, r3, #20
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002c02:	431a      	orrs	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c08:	bf00      	nop
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a1a      	ldr	r2, [pc, #104]	@ (8002c8c <LL_ADC_SetChannelSingleDiff+0x78>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d115      	bne.n	8002c54 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c34:	43db      	mvns	r3, r3
 8002c36:	401a      	ands	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f003 0318 	and.w	r3, r3, #24
 8002c3e:	4914      	ldr	r1, [pc, #80]	@ (8002c90 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002c40:	40d9      	lsrs	r1, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	400b      	ands	r3, r1
 8002c46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002c52:	e014      	b.n	8002c7e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c60:	43db      	mvns	r3, r3
 8002c62:	401a      	ands	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f003 0318 	and.w	r3, r3, #24
 8002c6a:	4909      	ldr	r1, [pc, #36]	@ (8002c90 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002c6c:	40d9      	lsrs	r1, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	400b      	ands	r3, r1
 8002c72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c76:	431a      	orrs	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002c7e:	bf00      	nop
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	58026000 	.word	0x58026000
 8002c90:	000fffff 	.word	0x000fffff

08002c94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 031f 	and.w	r3, r3, #31
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	4b04      	ldr	r3, [pc, #16]	@ (8002cec <LL_ADC_DisableDeepPowerDown+0x20>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6093      	str	r3, [r2, #8]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	5fffffc0 	.word	0x5fffffc0

08002cf0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d04:	d101      	bne.n	8002d0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	4b05      	ldr	r3, [pc, #20]	@ (8002d3c <LL_ADC_EnableInternalRegulator+0x24>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	6fffffc0 	.word	0x6fffffc0

08002d40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d54:	d101      	bne.n	8002d5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	4b05      	ldr	r3, [pc, #20]	@ (8002d8c <LL_ADC_Enable+0x24>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	f043 0201 	orr.w	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	7fffffc0 	.word	0x7fffffc0

08002d90 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	4b05      	ldr	r3, [pc, #20]	@ (8002db4 <LL_ADC_Disable+0x24>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	f043 0202 	orr.w	r2, r3, #2
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	7fffffc0 	.word	0x7fffffc0

08002db8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <LL_ADC_IsEnabled+0x18>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <LL_ADC_IsEnabled+0x1a>
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d101      	bne.n	8002df6 <LL_ADC_IsDisableOngoing+0x18>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <LL_ADC_IsDisableOngoing+0x1a>
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	4b05      	ldr	r3, [pc, #20]	@ (8002e28 <LL_ADC_REG_StartConversion+0x24>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	f043 0204 	orr.w	r2, r3, #4
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	7fffffc0 	.word	0x7fffffc0

08002e2c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <LL_ADC_REG_StopConversion+0x24>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	f043 0210 	orr.w	r2, r3, #16
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	7fffffc0 	.word	0x7fffffc0

08002e54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d101      	bne.n	8002e6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <LL_ADC_INJ_StopConversion+0x24>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	f043 0220 	orr.w	r2, r3, #32
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	7fffffc0 	.word	0x7fffffc0

08002ea4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d101      	bne.n	8002ebc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b089      	sub	sp, #36	@ 0x24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e1ee      	b.n	80032c4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d109      	bne.n	8002f08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7fe ff8f 	bl	8001e18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff feef 	bl	8002cf0 <LL_ADC_IsDeepPowerDownEnabled>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d004      	beq.n	8002f22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fed5 	bl	8002ccc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ff0a 	bl	8002d40 <LL_ADC_IsInternalRegulatorEnabled>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d114      	bne.n	8002f5c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff feee 	bl	8002d18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f3c:	4b8e      	ldr	r3, [pc, #568]	@ (8003178 <HAL_ADC_Init+0x2ac>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	099b      	lsrs	r3, r3, #6
 8002f42:	4a8e      	ldr	r2, [pc, #568]	@ (800317c <HAL_ADC_Init+0x2b0>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	099b      	lsrs	r3, r3, #6
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f4e:	e002      	b.n	8002f56 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f9      	bne.n	8002f50 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff feed 	bl	8002d40 <LL_ADC_IsInternalRegulatorEnabled>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10d      	bne.n	8002f88 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f70:	f043 0210 	orr.w	r2, r3, #16
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f7c:	f043 0201 	orr.w	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff61 	bl	8002e54 <LL_ADC_REG_IsConversionOngoing>
 8002f92:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f040 8188 	bne.w	80032b2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f040 8184 	bne.w	80032b2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fae:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002fb2:	f043 0202 	orr.w	r2, r3, #2
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fefa 	bl	8002db8 <LL_ADC_IsEnabled>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d136      	bne.n	8003038 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a6c      	ldr	r2, [pc, #432]	@ (8003180 <HAL_ADC_Init+0x2b4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_ADC_Init+0x112>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a6a      	ldr	r2, [pc, #424]	@ (8003184 <HAL_ADC_Init+0x2b8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d10e      	bne.n	8002ffc <HAL_ADC_Init+0x130>
 8002fde:	4868      	ldr	r0, [pc, #416]	@ (8003180 <HAL_ADC_Init+0x2b4>)
 8002fe0:	f7ff feea 	bl	8002db8 <LL_ADC_IsEnabled>
 8002fe4:	4604      	mov	r4, r0
 8002fe6:	4867      	ldr	r0, [pc, #412]	@ (8003184 <HAL_ADC_Init+0x2b8>)
 8002fe8:	f7ff fee6 	bl	8002db8 <LL_ADC_IsEnabled>
 8002fec:	4603      	mov	r3, r0
 8002fee:	4323      	orrs	r3, r4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	e008      	b.n	800300e <HAL_ADC_Init+0x142>
 8002ffc:	4862      	ldr	r0, [pc, #392]	@ (8003188 <HAL_ADC_Init+0x2bc>)
 8002ffe:	f7ff fedb 	bl	8002db8 <LL_ADC_IsEnabled>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf0c      	ite	eq
 8003008:	2301      	moveq	r3, #1
 800300a:	2300      	movne	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d012      	beq.n	8003038 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a5a      	ldr	r2, [pc, #360]	@ (8003180 <HAL_ADC_Init+0x2b4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d004      	beq.n	8003026 <HAL_ADC_Init+0x15a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a58      	ldr	r2, [pc, #352]	@ (8003184 <HAL_ADC_Init+0x2b8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d101      	bne.n	800302a <HAL_ADC_Init+0x15e>
 8003026:	4a59      	ldr	r2, [pc, #356]	@ (800318c <HAL_ADC_Init+0x2c0>)
 8003028:	e000      	b.n	800302c <HAL_ADC_Init+0x160>
 800302a:	4a59      	ldr	r2, [pc, #356]	@ (8003190 <HAL_ADC_Init+0x2c4>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f7ff fc24 	bl	8002880 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a52      	ldr	r2, [pc, #328]	@ (8003188 <HAL_ADC_Init+0x2bc>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d129      	bne.n	8003096 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	7e5b      	ldrb	r3, [r3, #25]
 8003046:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800304c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003052:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d013      	beq.n	8003084 <HAL_ADC_Init+0x1b8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b0c      	cmp	r3, #12
 8003062:	d00d      	beq.n	8003080 <HAL_ADC_Init+0x1b4>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b1c      	cmp	r3, #28
 800306a:	d007      	beq.n	800307c <HAL_ADC_Init+0x1b0>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b18      	cmp	r3, #24
 8003072:	d101      	bne.n	8003078 <HAL_ADC_Init+0x1ac>
 8003074:	2318      	movs	r3, #24
 8003076:	e006      	b.n	8003086 <HAL_ADC_Init+0x1ba>
 8003078:	2300      	movs	r3, #0
 800307a:	e004      	b.n	8003086 <HAL_ADC_Init+0x1ba>
 800307c:	2310      	movs	r3, #16
 800307e:	e002      	b.n	8003086 <HAL_ADC_Init+0x1ba>
 8003080:	2308      	movs	r3, #8
 8003082:	e000      	b.n	8003086 <HAL_ADC_Init+0x1ba>
 8003084:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003086:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800308e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
 8003094:	e00e      	b.n	80030b4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7e5b      	ldrb	r3, [r3, #25]
 800309a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030a0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030a6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d106      	bne.n	80030cc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	3b01      	subs	r3, #1
 80030c4:	045b      	lsls	r3, r3, #17
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d009      	beq.n	80030e8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a26      	ldr	r2, [pc, #152]	@ (8003188 <HAL_ADC_Init+0x2bc>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d115      	bne.n	800311e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	4b26      	ldr	r3, [pc, #152]	@ (8003194 <HAL_ADC_Init+0x2c8>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	69b9      	ldr	r1, [r7, #24]
 8003102:	430b      	orrs	r3, r1
 8003104:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	611a      	str	r2, [r3, #16]
 800311c:	e009      	b.n	8003132 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	4b1c      	ldr	r3, [pc, #112]	@ (8003198 <HAL_ADC_Init+0x2cc>)
 8003126:	4013      	ands	r3, r2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	69b9      	ldr	r1, [r7, #24]
 800312e:	430b      	orrs	r3, r1
 8003130:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fe8c 	bl	8002e54 <LL_ADC_REG_IsConversionOngoing>
 800313c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff feae 	bl	8002ea4 <LL_ADC_INJ_IsConversionOngoing>
 8003148:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	f040 808e 	bne.w	800326e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f040 808a 	bne.w	800326e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a0a      	ldr	r2, [pc, #40]	@ (8003188 <HAL_ADC_Init+0x2bc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d11b      	bne.n	800319c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	7e1b      	ldrb	r3, [r3, #24]
 8003168:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003170:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	e018      	b.n	80031aa <HAL_ADC_Init+0x2de>
 8003178:	240001b0 	.word	0x240001b0
 800317c:	053e2d63 	.word	0x053e2d63
 8003180:	40022000 	.word	0x40022000
 8003184:	40022100 	.word	0x40022100
 8003188:	58026000 	.word	0x58026000
 800318c:	40022300 	.word	0x40022300
 8003190:	58026300 	.word	0x58026300
 8003194:	fff04007 	.word	0xfff04007
 8003198:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	7e1b      	ldrb	r3, [r3, #24]
 80031a0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	4b46      	ldr	r3, [pc, #280]	@ (80032cc <HAL_ADC_Init+0x400>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	69b9      	ldr	r1, [r7, #24]
 80031ba:	430b      	orrs	r3, r1
 80031bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d137      	bne.n	8003238 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a3f      	ldr	r2, [pc, #252]	@ (80032d0 <HAL_ADC_Init+0x404>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d116      	bne.n	8003206 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	4b3d      	ldr	r3, [pc, #244]	@ (80032d4 <HAL_ADC_Init+0x408>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80031ea:	4311      	orrs	r1, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031f0:	4311      	orrs	r1, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80031f6:	430a      	orrs	r2, r1
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	611a      	str	r2, [r3, #16]
 8003204:	e020      	b.n	8003248 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	4b32      	ldr	r3, [pc, #200]	@ (80032d8 <HAL_ADC_Init+0x40c>)
 800320e:	4013      	ands	r3, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003214:	3a01      	subs	r2, #1
 8003216:	0411      	lsls	r1, r2, #16
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800321c:	4311      	orrs	r1, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003222:	4311      	orrs	r1, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003228:	430a      	orrs	r2, r1
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0201 	orr.w	r2, r2, #1
 8003234:	611a      	str	r2, [r3, #16]
 8003236:	e007      	b.n	8003248 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a1b      	ldr	r2, [pc, #108]	@ (80032d0 <HAL_ADC_Init+0x404>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d002      	beq.n	800326e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f001 f8b1 	bl	80043d0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d10c      	bne.n	8003290 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327c:	f023 010f 	bic.w	r1, r3, #15
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	1e5a      	subs	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	631a      	str	r2, [r3, #48]	@ 0x30
 800328e:	e007      	b.n	80032a0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 020f 	bic.w	r2, r2, #15
 800329e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a4:	f023 0303 	bic.w	r3, r3, #3
 80032a8:	f043 0201 	orr.w	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	661a      	str	r2, [r3, #96]	@ 0x60
 80032b0:	e007      	b.n	80032c2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b6:	f043 0210 	orr.w	r2, r3, #16
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3724      	adds	r7, #36	@ 0x24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd90      	pop	{r4, r7, pc}
 80032cc:	ffffbffc 	.word	0xffffbffc
 80032d0:	58026000 	.word	0x58026000
 80032d4:	fc00f81f 	.word	0xfc00f81f
 80032d8:	fc00f81e 	.word	0xfc00f81e

080032dc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a5c      	ldr	r2, [pc, #368]	@ (800345c <HAL_ADC_Start+0x180>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <HAL_ADC_Start+0x1c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003460 <HAL_ADC_Start+0x184>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d101      	bne.n	80032fc <HAL_ADC_Start+0x20>
 80032f8:	4b5a      	ldr	r3, [pc, #360]	@ (8003464 <HAL_ADC_Start+0x188>)
 80032fa:	e000      	b.n	80032fe <HAL_ADC_Start+0x22>
 80032fc:	4b5a      	ldr	r3, [pc, #360]	@ (8003468 <HAL_ADC_Start+0x18c>)
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff fcc8 	bl	8002c94 <LL_ADC_GetMultimode>
 8003304:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fda2 	bl	8002e54 <LL_ADC_REG_IsConversionOngoing>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	f040 809a 	bne.w	800344c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_ADC_Start+0x4a>
 8003322:	2302      	movs	r3, #2
 8003324:	e095      	b.n	8003452 <HAL_ADC_Start+0x176>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 ff64 	bl	80041fc <ADC_Enable>
 8003334:	4603      	mov	r3, r0
 8003336:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003338:	7dfb      	ldrb	r3, [r7, #23]
 800333a:	2b00      	cmp	r3, #0
 800333c:	f040 8081 	bne.w	8003442 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003344:	4b49      	ldr	r3, [pc, #292]	@ (800346c <HAL_ADC_Start+0x190>)
 8003346:	4013      	ands	r3, r2
 8003348:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a42      	ldr	r2, [pc, #264]	@ (8003460 <HAL_ADC_Start+0x184>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d002      	beq.n	8003360 <HAL_ADC_Start+0x84>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	e000      	b.n	8003362 <HAL_ADC_Start+0x86>
 8003360:	4b3e      	ldr	r3, [pc, #248]	@ (800345c <HAL_ADC_Start+0x180>)
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6812      	ldr	r2, [r2, #0]
 8003366:	4293      	cmp	r3, r2
 8003368:	d002      	beq.n	8003370 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d105      	bne.n	800337c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003374:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003380:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003388:	d106      	bne.n	8003398 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800338e:	f023 0206 	bic.w	r2, r3, #6
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	665a      	str	r2, [r3, #100]	@ 0x64
 8003396:	e002      	b.n	800339e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	221c      	movs	r2, #28
 80033a4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a2b      	ldr	r2, [pc, #172]	@ (8003460 <HAL_ADC_Start+0x184>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d002      	beq.n	80033be <HAL_ADC_Start+0xe2>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	e000      	b.n	80033c0 <HAL_ADC_Start+0xe4>
 80033be:	4b27      	ldr	r3, [pc, #156]	@ (800345c <HAL_ADC_Start+0x180>)
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d008      	beq.n	80033da <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b05      	cmp	r3, #5
 80033d2:	d002      	beq.n	80033da <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2b09      	cmp	r3, #9
 80033d8:	d114      	bne.n	8003404 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d007      	beq.n	80033f8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fd01 	bl	8002e04 <LL_ADC_REG_StartConversion>
 8003402:	e025      	b.n	8003450 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003408:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a12      	ldr	r2, [pc, #72]	@ (8003460 <HAL_ADC_Start+0x184>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d002      	beq.n	8003420 <HAL_ADC_Start+0x144>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	e000      	b.n	8003422 <HAL_ADC_Start+0x146>
 8003420:	4b0e      	ldr	r3, [pc, #56]	@ (800345c <HAL_ADC_Start+0x180>)
 8003422:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00f      	beq.n	8003450 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003434:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003438:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003440:	e006      	b.n	8003450 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800344a:	e001      	b.n	8003450 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800344c:	2302      	movs	r3, #2
 800344e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003450:	7dfb      	ldrb	r3, [r7, #23]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40022000 	.word	0x40022000
 8003460:	40022100 	.word	0x40022100
 8003464:	40022300 	.word	0x40022300
 8003468:	58026300 	.word	0x58026300
 800346c:	fffff0fe 	.word	0xfffff0fe

08003470 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_ADC_Stop+0x16>
 8003482:	2302      	movs	r3, #2
 8003484:	e021      	b.n	80034ca <HAL_ADC_Stop+0x5a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800348e:	2103      	movs	r1, #3
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fdf7 	bl	8004084 <ADC_ConversionStop>
 8003496:	4603      	mov	r3, r0
 8003498:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10f      	bne.n	80034c0 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 ff35 	bl	8004310 <ADC_Disable>
 80034a6:	4603      	mov	r3, r0
 80034a8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d107      	bne.n	80034c0 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80034b4:	4b07      	ldr	r3, [pc, #28]	@ (80034d4 <HAL_ADC_Stop+0x64>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	f043 0201 	orr.w	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	ffffeefe 	.word	0xffffeefe

080034d8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a72      	ldr	r2, [pc, #456]	@ (80036b0 <HAL_ADC_PollForConversion+0x1d8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d004      	beq.n	80034f6 <HAL_ADC_PollForConversion+0x1e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a70      	ldr	r2, [pc, #448]	@ (80036b4 <HAL_ADC_PollForConversion+0x1dc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d101      	bne.n	80034fa <HAL_ADC_PollForConversion+0x22>
 80034f6:	4b70      	ldr	r3, [pc, #448]	@ (80036b8 <HAL_ADC_PollForConversion+0x1e0>)
 80034f8:	e000      	b.n	80034fc <HAL_ADC_PollForConversion+0x24>
 80034fa:	4b70      	ldr	r3, [pc, #448]	@ (80036bc <HAL_ADC_PollForConversion+0x1e4>)
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fbc9 	bl	8002c94 <LL_ADC_GetMultimode>
 8003502:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	2b08      	cmp	r3, #8
 800350a:	d102      	bne.n	8003512 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800350c:	2308      	movs	r3, #8
 800350e:	61fb      	str	r3, [r7, #28]
 8003510:	e037      	b.n	8003582 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2b05      	cmp	r3, #5
 800351c:	d002      	beq.n	8003524 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b09      	cmp	r3, #9
 8003522:	d111      	bne.n	8003548 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003536:	f043 0220 	orr.w	r2, r3, #32
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e0b1      	b.n	80036a6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003542:	2304      	movs	r3, #4
 8003544:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003546:	e01c      	b.n	8003582 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a58      	ldr	r2, [pc, #352]	@ (80036b0 <HAL_ADC_PollForConversion+0x1d8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d004      	beq.n	800355c <HAL_ADC_PollForConversion+0x84>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a57      	ldr	r2, [pc, #348]	@ (80036b4 <HAL_ADC_PollForConversion+0x1dc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d101      	bne.n	8003560 <HAL_ADC_PollForConversion+0x88>
 800355c:	4b56      	ldr	r3, [pc, #344]	@ (80036b8 <HAL_ADC_PollForConversion+0x1e0>)
 800355e:	e000      	b.n	8003562 <HAL_ADC_PollForConversion+0x8a>
 8003560:	4b56      	ldr	r3, [pc, #344]	@ (80036bc <HAL_ADC_PollForConversion+0x1e4>)
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fba4 	bl	8002cb0 <LL_ADC_GetMultiDMATransfer>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003572:	f043 0220 	orr.w	r2, r3, #32
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e093      	b.n	80036a6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800357e:	2304      	movs	r3, #4
 8003580:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003582:	f7ff f94d 	bl	8002820 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003588:	e021      	b.n	80035ce <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d01d      	beq.n	80035ce <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003592:	f7ff f945 	bl	8002820 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d302      	bcc.n	80035a8 <HAL_ADC_PollForConversion+0xd0>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d112      	bne.n	80035ce <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10b      	bne.n	80035ce <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ba:	f043 0204 	orr.w	r2, r3, #4
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e06b      	b.n	80036a6 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0d6      	beq.n	800358a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff faa7 	bl	8002b40 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01c      	beq.n	8003632 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	7e5b      	ldrb	r3, [r3, #25]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d118      	bne.n	8003632 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b08      	cmp	r3, #8
 800360c:	d111      	bne.n	8003632 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003612:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d105      	bne.n	8003632 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362a:	f043 0201 	orr.w	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1f      	ldr	r2, [pc, #124]	@ (80036b4 <HAL_ADC_PollForConversion+0x1dc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d002      	beq.n	8003642 <HAL_ADC_PollForConversion+0x16a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	e000      	b.n	8003644 <HAL_ADC_PollForConversion+0x16c>
 8003642:	4b1b      	ldr	r3, [pc, #108]	@ (80036b0 <HAL_ADC_PollForConversion+0x1d8>)
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	4293      	cmp	r3, r2
 800364a:	d008      	beq.n	800365e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b05      	cmp	r3, #5
 8003656:	d002      	beq.n	800365e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2b09      	cmp	r3, #9
 800365c:	d104      	bne.n	8003668 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	e00c      	b.n	8003682 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a11      	ldr	r2, [pc, #68]	@ (80036b4 <HAL_ADC_PollForConversion+0x1dc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d002      	beq.n	8003678 <HAL_ADC_PollForConversion+0x1a0>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	e000      	b.n	800367a <HAL_ADC_PollForConversion+0x1a2>
 8003678:	4b0d      	ldr	r3, [pc, #52]	@ (80036b0 <HAL_ADC_PollForConversion+0x1d8>)
 800367a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	2b08      	cmp	r3, #8
 8003686:	d104      	bne.n	8003692 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2208      	movs	r2, #8
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	e008      	b.n	80036a4 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d103      	bne.n	80036a4 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	220c      	movs	r2, #12
 80036a2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40022000 	.word	0x40022000
 80036b4:	40022100 	.word	0x40022100
 80036b8:	40022300 	.word	0x40022300
 80036bc:	58026300 	.word	0x58026300

080036c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b0a5      	sub	sp, #148	@ 0x94
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036f6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4aa4      	ldr	r2, [pc, #656]	@ (8003990 <HAL_ADC_ConfigChannel+0x2b4>)
 80036fe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003706:	2b01      	cmp	r3, #1
 8003708:	d102      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x34>
 800370a:	2302      	movs	r3, #2
 800370c:	f000 bca2 	b.w	8004054 <HAL_ADC_ConfigChannel+0x978>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff fb99 	bl	8002e54 <LL_ADC_REG_IsConversionOngoing>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	f040 8486 	bne.w	8004036 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	db31      	blt.n	8003796 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a97      	ldr	r2, [pc, #604]	@ (8003994 <HAL_ADC_ConfigChannel+0x2b8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d02c      	beq.n	8003796 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003744:	2b00      	cmp	r3, #0
 8003746:	d108      	bne.n	800375a <HAL_ADC_ConfigChannel+0x7e>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	0e9b      	lsrs	r3, r3, #26
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	2201      	movs	r2, #1
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	e016      	b.n	8003788 <HAL_ADC_ConfigChannel+0xac>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003760:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003762:	fa93 f3a3 	rbit	r3, r3
 8003766:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003768:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800376a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800376c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8003772:	2320      	movs	r3, #32
 8003774:	e003      	b.n	800377e <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8003776:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003778:	fab3 f383 	clz	r3, r3
 800377c:	b2db      	uxtb	r3, r3
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	2201      	movs	r2, #1
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	69d1      	ldr	r1, [r2, #28]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	430b      	orrs	r3, r1
 8003794:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6818      	ldr	r0, [r3, #0]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	6859      	ldr	r1, [r3, #4]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	f7ff f9df 	bl	8002b66 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff fb51 	bl	8002e54 <LL_ADC_REG_IsConversionOngoing>
 80037b2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff fb72 	bl	8002ea4 <LL_ADC_INJ_IsConversionOngoing>
 80037c0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f040 824a 	bne.w	8003c62 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f040 8245 	bne.w	8003c62 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	6819      	ldr	r1, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	461a      	mov	r2, r3
 80037e6:	f7ff f9ea 	bl	8002bbe <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a69      	ldr	r2, [pc, #420]	@ (8003994 <HAL_ADC_ConfigChannel+0x2b8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d10d      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	08db      	lsrs	r3, r3, #3
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800380e:	e032      	b.n	8003876 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003810:	4b61      	ldr	r3, [pc, #388]	@ (8003998 <HAL_ADC_ConfigChannel+0x2bc>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003818:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800381c:	d10b      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x15a>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	695a      	ldr	r2, [r3, #20]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	089b      	lsrs	r3, r3, #2
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	e01d      	b.n	8003872 <HAL_ADC_ConfigChannel+0x196>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10b      	bne.n	800385c <HAL_ADC_ConfigChannel+0x180>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	089b      	lsrs	r3, r3, #2
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	e00a      	b.n	8003872 <HAL_ADC_ConfigChannel+0x196>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	089b      	lsrs	r3, r3, #2
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b04      	cmp	r3, #4
 800387c:	d048      	beq.n	8003910 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6919      	ldr	r1, [r3, #16]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800388e:	f7ff f865 	bl	800295c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a3f      	ldr	r2, [pc, #252]	@ (8003994 <HAL_ADC_ConfigChannel+0x2b8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d119      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	6919      	ldr	r1, [r3, #16]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	461a      	mov	r2, r3
 80038aa:	f7ff f8fd 	bl	8002aa8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6919      	ldr	r1, [r3, #16]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d102      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x1ea>
 80038c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038c4:	e000      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x1ec>
 80038c6:	2300      	movs	r3, #0
 80038c8:	461a      	mov	r2, r3
 80038ca:	f7ff f8cb 	bl	8002a64 <LL_ADC_SetOffsetSaturation>
 80038ce:	e1c8      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6919      	ldr	r1, [r3, #16]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d102      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x20c>
 80038e2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80038e6:	e000      	b.n	80038ea <HAL_ADC_ConfigChannel+0x20e>
 80038e8:	2300      	movs	r3, #0
 80038ea:	461a      	mov	r2, r3
 80038ec:	f7ff f898 	bl	8002a20 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6919      	ldr	r1, [r3, #16]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	7e1b      	ldrb	r3, [r3, #24]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d102      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x22a>
 8003900:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003904:	e000      	b.n	8003908 <HAL_ADC_ConfigChannel+0x22c>
 8003906:	2300      	movs	r3, #0
 8003908:	461a      	mov	r2, r3
 800390a:	f7ff f86f 	bl	80029ec <LL_ADC_SetDataRightShift>
 800390e:	e1a8      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1f      	ldr	r2, [pc, #124]	@ (8003994 <HAL_ADC_ConfigChannel+0x2b8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	f040 815b 	bne.w	8003bd2 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2100      	movs	r1, #0
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff f84c 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 8003928:	4603      	mov	r3, r0
 800392a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x26c>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff f841 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 800393e:	4603      	mov	r3, r0
 8003940:	0e9b      	lsrs	r3, r3, #26
 8003942:	f003 021f 	and.w	r2, r3, #31
 8003946:	e017      	b.n	8003978 <HAL_ADC_ConfigChannel+0x29c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2100      	movs	r1, #0
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff f836 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 8003954:	4603      	mov	r3, r0
 8003956:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003958:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800395a:	fa93 f3a3 	rbit	r3, r3
 800395e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003962:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003964:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800396a:	2320      	movs	r3, #32
 800396c:	e003      	b.n	8003976 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 800396e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003970:	fab3 f383 	clz	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10b      	bne.n	800399c <HAL_ADC_ConfigChannel+0x2c0>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	0e9b      	lsrs	r3, r3, #26
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	e017      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x2e4>
 8003990:	47ff0000 	.word	0x47ff0000
 8003994:	58026000 	.word	0x58026000
 8003998:	5c001000 	.word	0x5c001000
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039a4:	fa93 f3a3 	rbit	r3, r3
 80039a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80039aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039ac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80039ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80039b4:	2320      	movs	r3, #32
 80039b6:	e003      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80039b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d106      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2200      	movs	r2, #0
 80039ca:	2100      	movs	r1, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff f88d 	bl	8002aec <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2101      	movs	r1, #1
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fe fff1 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 80039de:	4603      	mov	r3, r0
 80039e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10a      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x322>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2101      	movs	r1, #1
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe ffe6 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 80039f4:	4603      	mov	r3, r0
 80039f6:	0e9b      	lsrs	r3, r3, #26
 80039f8:	f003 021f 	and.w	r2, r3, #31
 80039fc:	e017      	b.n	8003a2e <HAL_ADC_ConfigChannel+0x352>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2101      	movs	r1, #1
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe ffdb 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a10:	fa93 f3a3 	rbit	r3, r3
 8003a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a18:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003a1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8003a20:	2320      	movs	r3, #32
 8003a22:	e003      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8003a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a26:	fab3 f383 	clz	r3, r3
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d105      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x36a>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	0e9b      	lsrs	r3, r3, #26
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	e011      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x38e>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a4e:	fa93 f3a3 	rbit	r3, r3
 8003a52:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003a54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a56:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003a58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003a5e:	2320      	movs	r3, #32
 8003a60:	e003      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a64:	fab3 f383 	clz	r3, r3
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d106      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2200      	movs	r2, #0
 8003a74:	2101      	movs	r1, #1
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff f838 	bl	8002aec <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2102      	movs	r1, #2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe ff9c 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x3cc>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2102      	movs	r1, #2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe ff91 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	0e9b      	lsrs	r3, r3, #26
 8003aa2:	f003 021f 	and.w	r2, r3, #31
 8003aa6:	e017      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x3fc>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2102      	movs	r1, #2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe ff86 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aba:	fa93 f3a3 	rbit	r3, r3
 8003abe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003aca:	2320      	movs	r3, #32
 8003acc:	e003      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ad0:	fab3 f383 	clz	r3, r3
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d105      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x414>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	0e9b      	lsrs	r3, r3, #26
 8003aea:	f003 031f 	and.w	r3, r3, #31
 8003aee:	e011      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x438>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b00:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003b08:	2320      	movs	r3, #32
 8003b0a:	e003      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0e:	fab3 f383 	clz	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d106      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2102      	movs	r1, #2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe ffe3 	bl	8002aec <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2103      	movs	r1, #3
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fe ff47 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10a      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x476>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2103      	movs	r1, #3
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe ff3c 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	0e9b      	lsrs	r3, r3, #26
 8003b4c:	f003 021f 	and.w	r2, r3, #31
 8003b50:	e017      	b.n	8003b82 <HAL_ADC_ConfigChannel+0x4a6>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2103      	movs	r1, #3
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fe ff31 	bl	80029c0 <LL_ADC_GetOffsetChannel>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	fa93 f3a3 	rbit	r3, r3
 8003b68:	61fb      	str	r3, [r7, #28]
  return result;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003b74:	2320      	movs	r3, #32
 8003b76:	e003      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d105      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x4be>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	0e9b      	lsrs	r3, r3, #26
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	e011      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x4e2>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	fa93 f3a3 	rbit	r3, r3
 8003ba6:	613b      	str	r3, [r7, #16]
  return result;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8003bb2:	2320      	movs	r3, #32
 8003bb4:	e003      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	fab3 f383 	clz	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d14f      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2103      	movs	r1, #3
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe ff8e 	bl	8002aec <LL_ADC_SetOffsetState>
 8003bd0:	e047      	b.n	8003c62 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	069b      	lsls	r3, r3, #26
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d107      	bne.n	8003bf6 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003bf4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bfc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	069b      	lsls	r3, r3, #26
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d107      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003c18:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	069b      	lsls	r3, r3, #26
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d107      	bne.n	8003c3e <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003c3c:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c44:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	069b      	lsls	r3, r3, #26
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d107      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003c60:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff f8a6 	bl	8002db8 <LL_ADC_IsEnabled>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f040 81ea 	bne.w	8004048 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	6819      	ldr	r1, [r3, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	461a      	mov	r2, r3
 8003c82:	f7fe ffc7 	bl	8002c14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	4a7a      	ldr	r2, [pc, #488]	@ (8003e74 <HAL_ADC_ConfigChannel+0x798>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	f040 80e0 	bne.w	8003e52 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4977      	ldr	r1, [pc, #476]	@ (8003e78 <HAL_ADC_ConfigChannel+0x79c>)
 8003c9c:	428b      	cmp	r3, r1
 8003c9e:	d147      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x654>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4975      	ldr	r1, [pc, #468]	@ (8003e7c <HAL_ADC_ConfigChannel+0x7a0>)
 8003ca6:	428b      	cmp	r3, r1
 8003ca8:	d040      	beq.n	8003d2c <HAL_ADC_ConfigChannel+0x650>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4974      	ldr	r1, [pc, #464]	@ (8003e80 <HAL_ADC_ConfigChannel+0x7a4>)
 8003cb0:	428b      	cmp	r3, r1
 8003cb2:	d039      	beq.n	8003d28 <HAL_ADC_ConfigChannel+0x64c>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4972      	ldr	r1, [pc, #456]	@ (8003e84 <HAL_ADC_ConfigChannel+0x7a8>)
 8003cba:	428b      	cmp	r3, r1
 8003cbc:	d032      	beq.n	8003d24 <HAL_ADC_ConfigChannel+0x648>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4971      	ldr	r1, [pc, #452]	@ (8003e88 <HAL_ADC_ConfigChannel+0x7ac>)
 8003cc4:	428b      	cmp	r3, r1
 8003cc6:	d02b      	beq.n	8003d20 <HAL_ADC_ConfigChannel+0x644>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	496f      	ldr	r1, [pc, #444]	@ (8003e8c <HAL_ADC_ConfigChannel+0x7b0>)
 8003cce:	428b      	cmp	r3, r1
 8003cd0:	d024      	beq.n	8003d1c <HAL_ADC_ConfigChannel+0x640>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	496e      	ldr	r1, [pc, #440]	@ (8003e90 <HAL_ADC_ConfigChannel+0x7b4>)
 8003cd8:	428b      	cmp	r3, r1
 8003cda:	d01d      	beq.n	8003d18 <HAL_ADC_ConfigChannel+0x63c>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	496c      	ldr	r1, [pc, #432]	@ (8003e94 <HAL_ADC_ConfigChannel+0x7b8>)
 8003ce2:	428b      	cmp	r3, r1
 8003ce4:	d016      	beq.n	8003d14 <HAL_ADC_ConfigChannel+0x638>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	496b      	ldr	r1, [pc, #428]	@ (8003e98 <HAL_ADC_ConfigChannel+0x7bc>)
 8003cec:	428b      	cmp	r3, r1
 8003cee:	d00f      	beq.n	8003d10 <HAL_ADC_ConfigChannel+0x634>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4969      	ldr	r1, [pc, #420]	@ (8003e9c <HAL_ADC_ConfigChannel+0x7c0>)
 8003cf6:	428b      	cmp	r3, r1
 8003cf8:	d008      	beq.n	8003d0c <HAL_ADC_ConfigChannel+0x630>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4968      	ldr	r1, [pc, #416]	@ (8003ea0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003d00:	428b      	cmp	r3, r1
 8003d02:	d101      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x62c>
 8003d04:	4b67      	ldr	r3, [pc, #412]	@ (8003ea4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003d06:	e0a0      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	e09e      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003d0c:	4b66      	ldr	r3, [pc, #408]	@ (8003ea8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003d0e:	e09c      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003d10:	4b66      	ldr	r3, [pc, #408]	@ (8003eac <HAL_ADC_ConfigChannel+0x7d0>)
 8003d12:	e09a      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003d14:	4b60      	ldr	r3, [pc, #384]	@ (8003e98 <HAL_ADC_ConfigChannel+0x7bc>)
 8003d16:	e098      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003d18:	4b5e      	ldr	r3, [pc, #376]	@ (8003e94 <HAL_ADC_ConfigChannel+0x7b8>)
 8003d1a:	e096      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003d1c:	4b64      	ldr	r3, [pc, #400]	@ (8003eb0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003d1e:	e094      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003d20:	4b64      	ldr	r3, [pc, #400]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003d22:	e092      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003d24:	4b64      	ldr	r3, [pc, #400]	@ (8003eb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003d26:	e090      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003d28:	4b64      	ldr	r3, [pc, #400]	@ (8003ebc <HAL_ADC_ConfigChannel+0x7e0>)
 8003d2a:	e08e      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e08c      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4962      	ldr	r1, [pc, #392]	@ (8003ec0 <HAL_ADC_ConfigChannel+0x7e4>)
 8003d36:	428b      	cmp	r3, r1
 8003d38:	d140      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x6e0>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	494f      	ldr	r1, [pc, #316]	@ (8003e7c <HAL_ADC_ConfigChannel+0x7a0>)
 8003d40:	428b      	cmp	r3, r1
 8003d42:	d039      	beq.n	8003db8 <HAL_ADC_ConfigChannel+0x6dc>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	494d      	ldr	r1, [pc, #308]	@ (8003e80 <HAL_ADC_ConfigChannel+0x7a4>)
 8003d4a:	428b      	cmp	r3, r1
 8003d4c:	d032      	beq.n	8003db4 <HAL_ADC_ConfigChannel+0x6d8>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	494c      	ldr	r1, [pc, #304]	@ (8003e84 <HAL_ADC_ConfigChannel+0x7a8>)
 8003d54:	428b      	cmp	r3, r1
 8003d56:	d02b      	beq.n	8003db0 <HAL_ADC_ConfigChannel+0x6d4>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	494a      	ldr	r1, [pc, #296]	@ (8003e88 <HAL_ADC_ConfigChannel+0x7ac>)
 8003d5e:	428b      	cmp	r3, r1
 8003d60:	d024      	beq.n	8003dac <HAL_ADC_ConfigChannel+0x6d0>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4949      	ldr	r1, [pc, #292]	@ (8003e8c <HAL_ADC_ConfigChannel+0x7b0>)
 8003d68:	428b      	cmp	r3, r1
 8003d6a:	d01d      	beq.n	8003da8 <HAL_ADC_ConfigChannel+0x6cc>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4947      	ldr	r1, [pc, #284]	@ (8003e90 <HAL_ADC_ConfigChannel+0x7b4>)
 8003d72:	428b      	cmp	r3, r1
 8003d74:	d016      	beq.n	8003da4 <HAL_ADC_ConfigChannel+0x6c8>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4946      	ldr	r1, [pc, #280]	@ (8003e94 <HAL_ADC_ConfigChannel+0x7b8>)
 8003d7c:	428b      	cmp	r3, r1
 8003d7e:	d00f      	beq.n	8003da0 <HAL_ADC_ConfigChannel+0x6c4>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4944      	ldr	r1, [pc, #272]	@ (8003e98 <HAL_ADC_ConfigChannel+0x7bc>)
 8003d86:	428b      	cmp	r3, r1
 8003d88:	d008      	beq.n	8003d9c <HAL_ADC_ConfigChannel+0x6c0>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4944      	ldr	r1, [pc, #272]	@ (8003ea0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003d90:	428b      	cmp	r3, r1
 8003d92:	d101      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x6bc>
 8003d94:	4b43      	ldr	r3, [pc, #268]	@ (8003ea4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003d96:	e058      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e056      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003d9c:	4b43      	ldr	r3, [pc, #268]	@ (8003eac <HAL_ADC_ConfigChannel+0x7d0>)
 8003d9e:	e054      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003da0:	4b3d      	ldr	r3, [pc, #244]	@ (8003e98 <HAL_ADC_ConfigChannel+0x7bc>)
 8003da2:	e052      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003da4:	4b3b      	ldr	r3, [pc, #236]	@ (8003e94 <HAL_ADC_ConfigChannel+0x7b8>)
 8003da6:	e050      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003da8:	4b41      	ldr	r3, [pc, #260]	@ (8003eb0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003daa:	e04e      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003dac:	4b41      	ldr	r3, [pc, #260]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003dae:	e04c      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003db0:	4b41      	ldr	r3, [pc, #260]	@ (8003eb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003db2:	e04a      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003db4:	4b41      	ldr	r3, [pc, #260]	@ (8003ebc <HAL_ADC_ConfigChannel+0x7e0>)
 8003db6:	e048      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003db8:	2301      	movs	r3, #1
 8003dba:	e046      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4940      	ldr	r1, [pc, #256]	@ (8003ec4 <HAL_ADC_ConfigChannel+0x7e8>)
 8003dc2:	428b      	cmp	r3, r1
 8003dc4:	d140      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x76c>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	492c      	ldr	r1, [pc, #176]	@ (8003e7c <HAL_ADC_ConfigChannel+0x7a0>)
 8003dcc:	428b      	cmp	r3, r1
 8003dce:	d039      	beq.n	8003e44 <HAL_ADC_ConfigChannel+0x768>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	492a      	ldr	r1, [pc, #168]	@ (8003e80 <HAL_ADC_ConfigChannel+0x7a4>)
 8003dd6:	428b      	cmp	r3, r1
 8003dd8:	d032      	beq.n	8003e40 <HAL_ADC_ConfigChannel+0x764>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4929      	ldr	r1, [pc, #164]	@ (8003e84 <HAL_ADC_ConfigChannel+0x7a8>)
 8003de0:	428b      	cmp	r3, r1
 8003de2:	d02b      	beq.n	8003e3c <HAL_ADC_ConfigChannel+0x760>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4927      	ldr	r1, [pc, #156]	@ (8003e88 <HAL_ADC_ConfigChannel+0x7ac>)
 8003dea:	428b      	cmp	r3, r1
 8003dec:	d024      	beq.n	8003e38 <HAL_ADC_ConfigChannel+0x75c>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4926      	ldr	r1, [pc, #152]	@ (8003e8c <HAL_ADC_ConfigChannel+0x7b0>)
 8003df4:	428b      	cmp	r3, r1
 8003df6:	d01d      	beq.n	8003e34 <HAL_ADC_ConfigChannel+0x758>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4924      	ldr	r1, [pc, #144]	@ (8003e90 <HAL_ADC_ConfigChannel+0x7b4>)
 8003dfe:	428b      	cmp	r3, r1
 8003e00:	d016      	beq.n	8003e30 <HAL_ADC_ConfigChannel+0x754>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4923      	ldr	r1, [pc, #140]	@ (8003e94 <HAL_ADC_ConfigChannel+0x7b8>)
 8003e08:	428b      	cmp	r3, r1
 8003e0a:	d00f      	beq.n	8003e2c <HAL_ADC_ConfigChannel+0x750>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4926      	ldr	r1, [pc, #152]	@ (8003eac <HAL_ADC_ConfigChannel+0x7d0>)
 8003e12:	428b      	cmp	r3, r1
 8003e14:	d008      	beq.n	8003e28 <HAL_ADC_ConfigChannel+0x74c>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	492b      	ldr	r1, [pc, #172]	@ (8003ec8 <HAL_ADC_ConfigChannel+0x7ec>)
 8003e1c:	428b      	cmp	r3, r1
 8003e1e:	d101      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x748>
 8003e20:	4b2a      	ldr	r3, [pc, #168]	@ (8003ecc <HAL_ADC_ConfigChannel+0x7f0>)
 8003e22:	e012      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003e24:	2300      	movs	r3, #0
 8003e26:	e010      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003e28:	4b27      	ldr	r3, [pc, #156]	@ (8003ec8 <HAL_ADC_ConfigChannel+0x7ec>)
 8003e2a:	e00e      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003e98 <HAL_ADC_ConfigChannel+0x7bc>)
 8003e2e:	e00c      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003e30:	4b18      	ldr	r3, [pc, #96]	@ (8003e94 <HAL_ADC_ConfigChannel+0x7b8>)
 8003e32:	e00a      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003e34:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003e36:	e008      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003e38:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003e3a:	e006      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003e3e:	e004      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003e40:	4b1e      	ldr	r3, [pc, #120]	@ (8003ebc <HAL_ADC_ConfigChannel+0x7e0>)
 8003e42:	e002      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x76e>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f7fe fd4b 	bl	80028e8 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f280 80f6 	bge.w	8004048 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a05      	ldr	r2, [pc, #20]	@ (8003e78 <HAL_ADC_ConfigChannel+0x79c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d004      	beq.n	8003e70 <HAL_ADC_ConfigChannel+0x794>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a15      	ldr	r2, [pc, #84]	@ (8003ec0 <HAL_ADC_ConfigChannel+0x7e4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d131      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x7f8>
 8003e70:	4b17      	ldr	r3, [pc, #92]	@ (8003ed0 <HAL_ADC_ConfigChannel+0x7f4>)
 8003e72:	e030      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x7fa>
 8003e74:	47ff0000 	.word	0x47ff0000
 8003e78:	40022000 	.word	0x40022000
 8003e7c:	04300002 	.word	0x04300002
 8003e80:	08600004 	.word	0x08600004
 8003e84:	0c900008 	.word	0x0c900008
 8003e88:	10c00010 	.word	0x10c00010
 8003e8c:	14f00020 	.word	0x14f00020
 8003e90:	2a000400 	.word	0x2a000400
 8003e94:	2e300800 	.word	0x2e300800
 8003e98:	32601000 	.word	0x32601000
 8003e9c:	43210000 	.word	0x43210000
 8003ea0:	4b840000 	.word	0x4b840000
 8003ea4:	4fb80000 	.word	0x4fb80000
 8003ea8:	47520000 	.word	0x47520000
 8003eac:	36902000 	.word	0x36902000
 8003eb0:	25b00200 	.word	0x25b00200
 8003eb4:	21800100 	.word	0x21800100
 8003eb8:	1d500080 	.word	0x1d500080
 8003ebc:	19200040 	.word	0x19200040
 8003ec0:	40022100 	.word	0x40022100
 8003ec4:	58026000 	.word	0x58026000
 8003ec8:	3ac04000 	.word	0x3ac04000
 8003ecc:	3ef08000 	.word	0x3ef08000
 8003ed0:	40022300 	.word	0x40022300
 8003ed4:	4b61      	ldr	r3, [pc, #388]	@ (800405c <HAL_ADC_ConfigChannel+0x980>)
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe fcf8 	bl	80028cc <LL_ADC_GetCommonPathInternalCh>
 8003edc:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a5f      	ldr	r2, [pc, #380]	@ (8004060 <HAL_ADC_ConfigChannel+0x984>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d004      	beq.n	8003ef2 <HAL_ADC_ConfigChannel+0x816>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a5d      	ldr	r2, [pc, #372]	@ (8004064 <HAL_ADC_ConfigChannel+0x988>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d10e      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x834>
 8003ef2:	485b      	ldr	r0, [pc, #364]	@ (8004060 <HAL_ADC_ConfigChannel+0x984>)
 8003ef4:	f7fe ff60 	bl	8002db8 <LL_ADC_IsEnabled>
 8003ef8:	4604      	mov	r4, r0
 8003efa:	485a      	ldr	r0, [pc, #360]	@ (8004064 <HAL_ADC_ConfigChannel+0x988>)
 8003efc:	f7fe ff5c 	bl	8002db8 <LL_ADC_IsEnabled>
 8003f00:	4603      	mov	r3, r0
 8003f02:	4323      	orrs	r3, r4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf0c      	ite	eq
 8003f08:	2301      	moveq	r3, #1
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	e008      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x846>
 8003f10:	4855      	ldr	r0, [pc, #340]	@ (8004068 <HAL_ADC_ConfigChannel+0x98c>)
 8003f12:	f7fe ff51 	bl	8002db8 <LL_ADC_IsEnabled>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d07d      	beq.n	8004022 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a50      	ldr	r2, [pc, #320]	@ (800406c <HAL_ADC_ConfigChannel+0x990>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d130      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x8b6>
 8003f30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d12b      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a4a      	ldr	r2, [pc, #296]	@ (8004068 <HAL_ADC_ConfigChannel+0x98c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	f040 8081 	bne.w	8004048 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a45      	ldr	r2, [pc, #276]	@ (8004060 <HAL_ADC_ConfigChannel+0x984>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d004      	beq.n	8003f5a <HAL_ADC_ConfigChannel+0x87e>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a43      	ldr	r2, [pc, #268]	@ (8004064 <HAL_ADC_ConfigChannel+0x988>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d101      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x882>
 8003f5a:	4a45      	ldr	r2, [pc, #276]	@ (8004070 <HAL_ADC_ConfigChannel+0x994>)
 8003f5c:	e000      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x884>
 8003f5e:	4a3f      	ldr	r2, [pc, #252]	@ (800405c <HAL_ADC_ConfigChannel+0x980>)
 8003f60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f66:	4619      	mov	r1, r3
 8003f68:	4610      	mov	r0, r2
 8003f6a:	f7fe fc9c 	bl	80028a6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f6e:	4b41      	ldr	r3, [pc, #260]	@ (8004074 <HAL_ADC_ConfigChannel+0x998>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	099b      	lsrs	r3, r3, #6
 8003f74:	4a40      	ldr	r2, [pc, #256]	@ (8004078 <HAL_ADC_ConfigChannel+0x99c>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	099b      	lsrs	r3, r3, #6
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003f82:	e002      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1f9      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f90:	e05a      	b.n	8004048 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a39      	ldr	r2, [pc, #228]	@ (800407c <HAL_ADC_ConfigChannel+0x9a0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d11e      	bne.n	8003fda <HAL_ADC_ConfigChannel+0x8fe>
 8003f9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d119      	bne.n	8003fda <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a2f      	ldr	r2, [pc, #188]	@ (8004068 <HAL_ADC_ConfigChannel+0x98c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d14b      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a2a      	ldr	r2, [pc, #168]	@ (8004060 <HAL_ADC_ConfigChannel+0x984>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d004      	beq.n	8003fc4 <HAL_ADC_ConfigChannel+0x8e8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a29      	ldr	r2, [pc, #164]	@ (8004064 <HAL_ADC_ConfigChannel+0x988>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d101      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x8ec>
 8003fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8004070 <HAL_ADC_ConfigChannel+0x994>)
 8003fc6:	e000      	b.n	8003fca <HAL_ADC_ConfigChannel+0x8ee>
 8003fc8:	4a24      	ldr	r2, [pc, #144]	@ (800405c <HAL_ADC_ConfigChannel+0x980>)
 8003fca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f7fe fc67 	bl	80028a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fd8:	e036      	b.n	8004048 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a28      	ldr	r2, [pc, #160]	@ (8004080 <HAL_ADC_ConfigChannel+0x9a4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d131      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x96c>
 8003fe4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d12c      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8004068 <HAL_ADC_ConfigChannel+0x98c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d127      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a18      	ldr	r2, [pc, #96]	@ (8004060 <HAL_ADC_ConfigChannel+0x984>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d004      	beq.n	800400c <HAL_ADC_ConfigChannel+0x930>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a17      	ldr	r2, [pc, #92]	@ (8004064 <HAL_ADC_ConfigChannel+0x988>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d101      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x934>
 800400c:	4a18      	ldr	r2, [pc, #96]	@ (8004070 <HAL_ADC_ConfigChannel+0x994>)
 800400e:	e000      	b.n	8004012 <HAL_ADC_ConfigChannel+0x936>
 8004010:	4a12      	ldr	r2, [pc, #72]	@ (800405c <HAL_ADC_ConfigChannel+0x980>)
 8004012:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004014:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004018:	4619      	mov	r1, r3
 800401a:	4610      	mov	r0, r2
 800401c:	f7fe fc43 	bl	80028a6 <LL_ADC_SetCommonPathInternalCh>
 8004020:	e012      	b.n	8004048 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004026:	f043 0220 	orr.w	r2, r3, #32
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8004034:	e008      	b.n	8004048 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800403a:	f043 0220 	orr.w	r2, r3, #32
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004050:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8004054:	4618      	mov	r0, r3
 8004056:	3794      	adds	r7, #148	@ 0x94
 8004058:	46bd      	mov	sp, r7
 800405a:	bd90      	pop	{r4, r7, pc}
 800405c:	58026300 	.word	0x58026300
 8004060:	40022000 	.word	0x40022000
 8004064:	40022100 	.word	0x40022100
 8004068:	58026000 	.word	0x58026000
 800406c:	c7520000 	.word	0xc7520000
 8004070:	40022300 	.word	0x40022300
 8004074:	240001b0 	.word	0x240001b0
 8004078:	053e2d63 	.word	0x053e2d63
 800407c:	c3210000 	.word	0xc3210000
 8004080:	cb840000 	.word	0xcb840000

08004084 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe feda 	bl	8002e54 <LL_ADC_REG_IsConversionOngoing>
 80040a0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe fefc 	bl	8002ea4 <LL_ADC_INJ_IsConversionOngoing>
 80040ac:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d103      	bne.n	80040bc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 8098 	beq.w	80041ec <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d02a      	beq.n	8004120 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	7e5b      	ldrb	r3, [r3, #25]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d126      	bne.n	8004120 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	7e1b      	ldrb	r3, [r3, #24]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d122      	bne.n	8004120 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80040da:	2301      	movs	r3, #1
 80040dc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80040de:	e014      	b.n	800410a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	4a45      	ldr	r2, [pc, #276]	@ (80041f8 <ADC_ConversionStop+0x174>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d90d      	bls.n	8004104 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ec:	f043 0210 	orr.w	r2, r3, #16
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040f8:	f043 0201 	orr.w	r2, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e074      	b.n	80041ee <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	3301      	adds	r3, #1
 8004108:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004114:	2b40      	cmp	r3, #64	@ 0x40
 8004116:	d1e3      	bne.n	80040e0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2240      	movs	r2, #64	@ 0x40
 800411e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d014      	beq.n	8004150 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fe fe92 	bl	8002e54 <LL_ADC_REG_IsConversionOngoing>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00c      	beq.n	8004150 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe fe4f 	bl	8002dde <LL_ADC_IsDisableOngoing>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d104      	bne.n	8004150 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fe fe6e 	bl	8002e2c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d014      	beq.n	8004180 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe fea2 	bl	8002ea4 <LL_ADC_INJ_IsConversionOngoing>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00c      	beq.n	8004180 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe fe37 	bl	8002dde <LL_ADC_IsDisableOngoing>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d104      	bne.n	8004180 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe fe7e 	bl	8002e7c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d005      	beq.n	8004192 <ADC_ConversionStop+0x10e>
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b03      	cmp	r3, #3
 800418a:	d105      	bne.n	8004198 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800418c:	230c      	movs	r3, #12
 800418e:	617b      	str	r3, [r7, #20]
        break;
 8004190:	e005      	b.n	800419e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004192:	2308      	movs	r3, #8
 8004194:	617b      	str	r3, [r7, #20]
        break;
 8004196:	e002      	b.n	800419e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004198:	2304      	movs	r3, #4
 800419a:	617b      	str	r3, [r7, #20]
        break;
 800419c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800419e:	f7fe fb3f 	bl	8002820 <HAL_GetTick>
 80041a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80041a4:	e01b      	b.n	80041de <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80041a6:	f7fe fb3b 	bl	8002820 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b05      	cmp	r3, #5
 80041b2:	d914      	bls.n	80041de <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	4013      	ands	r3, r2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00d      	beq.n	80041de <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041c6:	f043 0210 	orr.w	r2, r3, #16
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041d2:	f043 0201 	orr.w	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e007      	b.n	80041ee <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1dc      	bne.n	80041a6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3720      	adds	r7, #32
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	000cdbff 	.word	0x000cdbff

080041fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4618      	mov	r0, r3
 800420a:	f7fe fdd5 	bl	8002db8 <LL_ADC_IsEnabled>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d16e      	bne.n	80042f2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	4b38      	ldr	r3, [pc, #224]	@ (80042fc <ADC_Enable+0x100>)
 800421c:	4013      	ands	r3, r2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00d      	beq.n	800423e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004226:	f043 0210 	orr.w	r2, r3, #16
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004232:	f043 0201 	orr.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e05a      	b.n	80042f4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe fd90 	bl	8002d68 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004248:	f7fe faea 	bl	8002820 <HAL_GetTick>
 800424c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2b      	ldr	r2, [pc, #172]	@ (8004300 <ADC_Enable+0x104>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d004      	beq.n	8004262 <ADC_Enable+0x66>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a29      	ldr	r2, [pc, #164]	@ (8004304 <ADC_Enable+0x108>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d101      	bne.n	8004266 <ADC_Enable+0x6a>
 8004262:	4b29      	ldr	r3, [pc, #164]	@ (8004308 <ADC_Enable+0x10c>)
 8004264:	e000      	b.n	8004268 <ADC_Enable+0x6c>
 8004266:	4b29      	ldr	r3, [pc, #164]	@ (800430c <ADC_Enable+0x110>)
 8004268:	4618      	mov	r0, r3
 800426a:	f7fe fd13 	bl	8002c94 <LL_ADC_GetMultimode>
 800426e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a23      	ldr	r2, [pc, #140]	@ (8004304 <ADC_Enable+0x108>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d002      	beq.n	8004280 <ADC_Enable+0x84>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	e000      	b.n	8004282 <ADC_Enable+0x86>
 8004280:	4b1f      	ldr	r3, [pc, #124]	@ (8004300 <ADC_Enable+0x104>)
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	4293      	cmp	r3, r2
 8004288:	d02c      	beq.n	80042e4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d130      	bne.n	80042f2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004290:	e028      	b.n	80042e4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe fd8e 	bl	8002db8 <LL_ADC_IsEnabled>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d104      	bne.n	80042ac <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fe fd5e 	bl	8002d68 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80042ac:	f7fe fab8 	bl	8002820 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d914      	bls.n	80042e4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d00d      	beq.n	80042e4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042cc:	f043 0210 	orr.w	r2, r3, #16
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042d8:	f043 0201 	orr.w	r2, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e007      	b.n	80042f4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d1cf      	bne.n	8004292 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	8000003f 	.word	0x8000003f
 8004300:	40022000 	.word	0x40022000
 8004304:	40022100 	.word	0x40022100
 8004308:	40022300 	.word	0x40022300
 800430c:	58026300 	.word	0x58026300

08004310 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f7fe fd5e 	bl	8002dde <LL_ADC_IsDisableOngoing>
 8004322:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7fe fd45 	bl	8002db8 <LL_ADC_IsEnabled>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d047      	beq.n	80043c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d144      	bne.n	80043c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 030d 	and.w	r3, r3, #13
 8004344:	2b01      	cmp	r3, #1
 8004346:	d10c      	bne.n	8004362 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f7fe fd1f 	bl	8002d90 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2203      	movs	r2, #3
 8004358:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800435a:	f7fe fa61 	bl	8002820 <HAL_GetTick>
 800435e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004360:	e029      	b.n	80043b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004366:	f043 0210 	orr.w	r2, r3, #16
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004372:	f043 0201 	orr.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e023      	b.n	80043c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800437e:	f7fe fa4f 	bl	8002820 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d914      	bls.n	80043b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00d      	beq.n	80043b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800439e:	f043 0210 	orr.w	r2, r3, #16
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043aa:	f043 0201 	orr.w	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e007      	b.n	80043c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1dc      	bne.n	800437e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a6c      	ldr	r2, [pc, #432]	@ (8004590 <ADC_ConfigureBoostMode+0x1c0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <ADC_ConfigureBoostMode+0x1c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a6b      	ldr	r2, [pc, #428]	@ (8004594 <ADC_ConfigureBoostMode+0x1c4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d109      	bne.n	8004400 <ADC_ConfigureBoostMode+0x30>
 80043ec:	4b6a      	ldr	r3, [pc, #424]	@ (8004598 <ADC_ConfigureBoostMode+0x1c8>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	bf14      	ite	ne
 80043f8:	2301      	movne	r3, #1
 80043fa:	2300      	moveq	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	e008      	b.n	8004412 <ADC_ConfigureBoostMode+0x42>
 8004400:	4b66      	ldr	r3, [pc, #408]	@ (800459c <ADC_ConfigureBoostMode+0x1cc>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004408:	2b00      	cmp	r3, #0
 800440a:	bf14      	ite	ne
 800440c:	2301      	movne	r3, #1
 800440e:	2300      	moveq	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d01c      	beq.n	8004450 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004416:	f004 fc1f 	bl	8008c58 <HAL_RCC_GetHCLKFreq>
 800441a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004424:	d010      	beq.n	8004448 <ADC_ConfigureBoostMode+0x78>
 8004426:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800442a:	d873      	bhi.n	8004514 <ADC_ConfigureBoostMode+0x144>
 800442c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004430:	d002      	beq.n	8004438 <ADC_ConfigureBoostMode+0x68>
 8004432:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004436:	d16d      	bne.n	8004514 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	0c1b      	lsrs	r3, r3, #16
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	60fb      	str	r3, [r7, #12]
        break;
 8004446:	e068      	b.n	800451a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	089b      	lsrs	r3, r3, #2
 800444c:	60fb      	str	r3, [r7, #12]
        break;
 800444e:	e064      	b.n	800451a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004450:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004454:	f04f 0100 	mov.w	r1, #0
 8004458:	f005 fde4 	bl	800a024 <HAL_RCCEx_GetPeriphCLKFreq>
 800445c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004466:	d051      	beq.n	800450c <ADC_ConfigureBoostMode+0x13c>
 8004468:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800446c:	d854      	bhi.n	8004518 <ADC_ConfigureBoostMode+0x148>
 800446e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004472:	d047      	beq.n	8004504 <ADC_ConfigureBoostMode+0x134>
 8004474:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004478:	d84e      	bhi.n	8004518 <ADC_ConfigureBoostMode+0x148>
 800447a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800447e:	d03d      	beq.n	80044fc <ADC_ConfigureBoostMode+0x12c>
 8004480:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004484:	d848      	bhi.n	8004518 <ADC_ConfigureBoostMode+0x148>
 8004486:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800448a:	d033      	beq.n	80044f4 <ADC_ConfigureBoostMode+0x124>
 800448c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004490:	d842      	bhi.n	8004518 <ADC_ConfigureBoostMode+0x148>
 8004492:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004496:	d029      	beq.n	80044ec <ADC_ConfigureBoostMode+0x11c>
 8004498:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800449c:	d83c      	bhi.n	8004518 <ADC_ConfigureBoostMode+0x148>
 800449e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80044a2:	d01a      	beq.n	80044da <ADC_ConfigureBoostMode+0x10a>
 80044a4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80044a8:	d836      	bhi.n	8004518 <ADC_ConfigureBoostMode+0x148>
 80044aa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80044ae:	d014      	beq.n	80044da <ADC_ConfigureBoostMode+0x10a>
 80044b0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80044b4:	d830      	bhi.n	8004518 <ADC_ConfigureBoostMode+0x148>
 80044b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044ba:	d00e      	beq.n	80044da <ADC_ConfigureBoostMode+0x10a>
 80044bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044c0:	d82a      	bhi.n	8004518 <ADC_ConfigureBoostMode+0x148>
 80044c2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80044c6:	d008      	beq.n	80044da <ADC_ConfigureBoostMode+0x10a>
 80044c8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80044cc:	d824      	bhi.n	8004518 <ADC_ConfigureBoostMode+0x148>
 80044ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044d2:	d002      	beq.n	80044da <ADC_ConfigureBoostMode+0x10a>
 80044d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80044d8:	d11e      	bne.n	8004518 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	0c9b      	lsrs	r3, r3, #18
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	60fb      	str	r3, [r7, #12]
        break;
 80044ea:	e016      	b.n	800451a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	60fb      	str	r3, [r7, #12]
        break;
 80044f2:	e012      	b.n	800451a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	60fb      	str	r3, [r7, #12]
        break;
 80044fa:	e00e      	b.n	800451a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	099b      	lsrs	r3, r3, #6
 8004500:	60fb      	str	r3, [r7, #12]
        break;
 8004502:	e00a      	b.n	800451a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	09db      	lsrs	r3, r3, #7
 8004508:	60fb      	str	r3, [r7, #12]
        break;
 800450a:	e006      	b.n	800451a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	0a1b      	lsrs	r3, r3, #8
 8004510:	60fb      	str	r3, [r7, #12]
        break;
 8004512:	e002      	b.n	800451a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004514:	bf00      	nop
 8004516:	e000      	b.n	800451a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004518:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4a1f      	ldr	r2, [pc, #124]	@ (80045a0 <ADC_ConfigureBoostMode+0x1d0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d808      	bhi.n	800453a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004536:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004538:	e025      	b.n	8004586 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4a19      	ldr	r2, [pc, #100]	@ (80045a4 <ADC_ConfigureBoostMode+0x1d4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d80a      	bhi.n	8004558 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004554:	609a      	str	r2, [r3, #8]
}
 8004556:	e016      	b.n	8004586 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4a13      	ldr	r2, [pc, #76]	@ (80045a8 <ADC_ConfigureBoostMode+0x1d8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d80a      	bhi.n	8004576 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004572:	609a      	str	r2, [r3, #8]
}
 8004574:	e007      	b.n	8004586 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004584:	609a      	str	r2, [r3, #8]
}
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40022000 	.word	0x40022000
 8004594:	40022100 	.word	0x40022100
 8004598:	40022300 	.word	0x40022300
 800459c:	58026300 	.word	0x58026300
 80045a0:	005f5e10 	.word	0x005f5e10
 80045a4:	00bebc20 	.word	0x00bebc20
 80045a8:	017d7840 	.word	0x017d7840

080045ac <LL_ADC_IsEnabled>:
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <LL_ADC_IsEnabled+0x18>
 80045c0:	2301      	movs	r3, #1
 80045c2:	e000      	b.n	80045c6 <LL_ADC_IsEnabled+0x1a>
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <LL_ADC_StartCalibration>:
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	4b09      	ldr	r3, [pc, #36]	@ (800460c <LL_ADC_StartCalibration+0x38>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80045f4:	430a      	orrs	r2, r1
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	609a      	str	r2, [r3, #8]
}
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	3ffeffc0 	.word	0x3ffeffc0

08004610 <LL_ADC_IsCalibrationOnGoing>:
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004620:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004624:	d101      	bne.n	800462a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <LL_ADC_REG_IsConversionOngoing>:
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b04      	cmp	r3, #4
 800464a:	d101      	bne.n	8004650 <LL_ADC_REG_IsConversionOngoing+0x18>
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
	...

08004660 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800466c:	2300      	movs	r3, #0
 800466e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_ADCEx_Calibration_Start+0x1e>
 800467a:	2302      	movs	r3, #2
 800467c:	e04c      	b.n	8004718 <HAL_ADCEx_Calibration_Start+0xb8>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f7ff fe42 	bl	8004310 <ADC_Disable>
 800468c:	4603      	mov	r3, r0
 800468e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004690:	7dfb      	ldrb	r3, [r7, #23]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d135      	bne.n	8004702 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800469a:	4b21      	ldr	r3, [pc, #132]	@ (8004720 <HAL_ADCEx_Calibration_Start+0xc0>)
 800469c:	4013      	ands	r3, r2
 800469e:	f043 0202 	orr.w	r2, r3, #2
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff ff90 	bl	80045d4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80046b4:	e014      	b.n	80046e0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	3301      	adds	r3, #1
 80046ba:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4a19      	ldr	r2, [pc, #100]	@ (8004724 <HAL_ADCEx_Calibration_Start+0xc4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d30d      	bcc.n	80046e0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c8:	f023 0312 	bic.w	r3, r3, #18
 80046cc:	f043 0210 	orr.w	r2, r3, #16
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e01b      	b.n	8004718 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff ff93 	bl	8004610 <LL_ADC_IsCalibrationOnGoing>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e2      	bne.n	80046b6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f4:	f023 0303 	bic.w	r3, r3, #3
 80046f8:	f043 0201 	orr.w	r2, r3, #1
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	661a      	str	r2, [r3, #96]	@ 0x60
 8004700:	e005      	b.n	800470e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004706:	f043 0210 	orr.w	r2, r3, #16
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004716:	7dfb      	ldrb	r3, [r7, #23]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	ffffeefd 	.word	0xffffeefd
 8004724:	25c3f800 	.word	0x25c3f800

08004728 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004728:	b590      	push	{r4, r7, lr}
 800472a:	b0a3      	sub	sp, #140	@ 0x8c
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004742:	2302      	movs	r3, #2
 8004744:	e0c1      	b.n	80048ca <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800474e:	2300      	movs	r3, #0
 8004750:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004752:	2300      	movs	r3, #0
 8004754:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a5e      	ldr	r2, [pc, #376]	@ (80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d102      	bne.n	8004766 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004760:	4b5d      	ldr	r3, [pc, #372]	@ (80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e001      	b.n	800476a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10b      	bne.n	8004788 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004774:	f043 0220 	orr.w	r2, r3, #32
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0a0      	b.n	80048ca <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff ff54 	bl	8004638 <LL_ADC_REG_IsConversionOngoing>
 8004790:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff ff4d 	bl	8004638 <LL_ADC_REG_IsConversionOngoing>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f040 8081 	bne.w	80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80047a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d17c      	bne.n	80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a48      	ldr	r2, [pc, #288]	@ (80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d004      	beq.n	80047c2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a46      	ldr	r2, [pc, #280]	@ (80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d101      	bne.n	80047c6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80047c2:	4b46      	ldr	r3, [pc, #280]	@ (80048dc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80047c4:	e000      	b.n	80047c8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80047c6:	4b46      	ldr	r3, [pc, #280]	@ (80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80047c8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d039      	beq.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80047d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	431a      	orrs	r2, r3
 80047e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047e2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a3a      	ldr	r2, [pc, #232]	@ (80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a39      	ldr	r2, [pc, #228]	@ (80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d10e      	bne.n	8004816 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80047f8:	4836      	ldr	r0, [pc, #216]	@ (80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80047fa:	f7ff fed7 	bl	80045ac <LL_ADC_IsEnabled>
 80047fe:	4604      	mov	r4, r0
 8004800:	4835      	ldr	r0, [pc, #212]	@ (80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004802:	f7ff fed3 	bl	80045ac <LL_ADC_IsEnabled>
 8004806:	4603      	mov	r3, r0
 8004808:	4323      	orrs	r3, r4
 800480a:	2b00      	cmp	r3, #0
 800480c:	bf0c      	ite	eq
 800480e:	2301      	moveq	r3, #1
 8004810:	2300      	movne	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	e008      	b.n	8004828 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004816:	4833      	ldr	r0, [pc, #204]	@ (80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004818:	f7ff fec8 	bl	80045ac <LL_ADC_IsEnabled>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	bf0c      	ite	eq
 8004822:	2301      	moveq	r3, #1
 8004824:	2300      	movne	r3, #0
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d047      	beq.n	80048bc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800482c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	4b2d      	ldr	r3, [pc, #180]	@ (80048e8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004832:	4013      	ands	r3, r2
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	6811      	ldr	r1, [r2, #0]
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	6892      	ldr	r2, [r2, #8]
 800483c:	430a      	orrs	r2, r1
 800483e:	431a      	orrs	r2, r3
 8004840:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004842:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004844:	e03a      	b.n	80048bc <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004846:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800484e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004850:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1f      	ldr	r2, [pc, #124]	@ (80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1d      	ldr	r2, [pc, #116]	@ (80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10e      	bne.n	8004884 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004866:	481b      	ldr	r0, [pc, #108]	@ (80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004868:	f7ff fea0 	bl	80045ac <LL_ADC_IsEnabled>
 800486c:	4604      	mov	r4, r0
 800486e:	481a      	ldr	r0, [pc, #104]	@ (80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004870:	f7ff fe9c 	bl	80045ac <LL_ADC_IsEnabled>
 8004874:	4603      	mov	r3, r0
 8004876:	4323      	orrs	r3, r4
 8004878:	2b00      	cmp	r3, #0
 800487a:	bf0c      	ite	eq
 800487c:	2301      	moveq	r3, #1
 800487e:	2300      	movne	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	e008      	b.n	8004896 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004884:	4817      	ldr	r0, [pc, #92]	@ (80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004886:	f7ff fe91 	bl	80045ac <LL_ADC_IsEnabled>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	bf0c      	ite	eq
 8004890:	2301      	moveq	r3, #1
 8004892:	2300      	movne	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d010      	beq.n	80048bc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800489a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	4b12      	ldr	r3, [pc, #72]	@ (80048e8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80048a4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048a6:	e009      	b.n	80048bc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ac:	f043 0220 	orr.w	r2, r3, #32
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80048ba:	e000      	b.n	80048be <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80048c6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	378c      	adds	r7, #140	@ 0x8c
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd90      	pop	{r4, r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40022000 	.word	0x40022000
 80048d8:	40022100 	.word	0x40022100
 80048dc:	40022300 	.word	0x40022300
 80048e0:	58026300 	.word	0x58026300
 80048e4:	58026000 	.word	0x58026000
 80048e8:	fffff0e0 	.word	0xfffff0e0

080048ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048fc:	4b0b      	ldr	r3, [pc, #44]	@ (800492c <__NVIC_SetPriorityGrouping+0x40>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004908:	4013      	ands	r3, r2
 800490a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004914:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <__NVIC_SetPriorityGrouping+0x44>)
 8004916:	4313      	orrs	r3, r2
 8004918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800491a:	4a04      	ldr	r2, [pc, #16]	@ (800492c <__NVIC_SetPriorityGrouping+0x40>)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	60d3      	str	r3, [r2, #12]
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	e000ed00 	.word	0xe000ed00
 8004930:	05fa0000 	.word	0x05fa0000

08004934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004938:	4b04      	ldr	r3, [pc, #16]	@ (800494c <__NVIC_GetPriorityGrouping+0x18>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	0a1b      	lsrs	r3, r3, #8
 800493e:	f003 0307 	and.w	r3, r3, #7
}
 8004942:	4618      	mov	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	e000ed00 	.word	0xe000ed00

08004950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	4603      	mov	r3, r0
 8004958:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800495a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800495e:	2b00      	cmp	r3, #0
 8004960:	db0b      	blt.n	800497a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	f003 021f 	and.w	r2, r3, #31
 8004968:	4907      	ldr	r1, [pc, #28]	@ (8004988 <__NVIC_EnableIRQ+0x38>)
 800496a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	2001      	movs	r0, #1
 8004972:	fa00 f202 	lsl.w	r2, r0, r2
 8004976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	e000e100 	.word	0xe000e100

0800498c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	6039      	str	r1, [r7, #0]
 8004996:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004998:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800499c:	2b00      	cmp	r3, #0
 800499e:	db0a      	blt.n	80049b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	490c      	ldr	r1, [pc, #48]	@ (80049d8 <__NVIC_SetPriority+0x4c>)
 80049a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049aa:	0112      	lsls	r2, r2, #4
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	440b      	add	r3, r1
 80049b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049b4:	e00a      	b.n	80049cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	4908      	ldr	r1, [pc, #32]	@ (80049dc <__NVIC_SetPriority+0x50>)
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	3b04      	subs	r3, #4
 80049c4:	0112      	lsls	r2, r2, #4
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	440b      	add	r3, r1
 80049ca:	761a      	strb	r2, [r3, #24]
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	e000e100 	.word	0xe000e100
 80049dc:	e000ed00 	.word	0xe000ed00

080049e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b089      	sub	sp, #36	@ 0x24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f1c3 0307 	rsb	r3, r3, #7
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	bf28      	it	cs
 80049fe:	2304      	movcs	r3, #4
 8004a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	3304      	adds	r3, #4
 8004a06:	2b06      	cmp	r3, #6
 8004a08:	d902      	bls.n	8004a10 <NVIC_EncodePriority+0x30>
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	3b03      	subs	r3, #3
 8004a0e:	e000      	b.n	8004a12 <NVIC_EncodePriority+0x32>
 8004a10:	2300      	movs	r3, #0
 8004a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a14:	f04f 32ff 	mov.w	r2, #4294967295
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	43da      	mvns	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	401a      	ands	r2, r3
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a28:	f04f 31ff 	mov.w	r1, #4294967295
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a32:	43d9      	mvns	r1, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a38:	4313      	orrs	r3, r2
         );
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3724      	adds	r7, #36	@ 0x24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a58:	d301      	bcc.n	8004a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e00f      	b.n	8004a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a88 <SysTick_Config+0x40>)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a66:	210f      	movs	r1, #15
 8004a68:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6c:	f7ff ff8e 	bl	800498c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a70:	4b05      	ldr	r3, [pc, #20]	@ (8004a88 <SysTick_Config+0x40>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a76:	4b04      	ldr	r3, [pc, #16]	@ (8004a88 <SysTick_Config+0x40>)
 8004a78:	2207      	movs	r2, #7
 8004a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	e000e010 	.word	0xe000e010

08004a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff ff29 	bl	80048ec <__NVIC_SetPriorityGrouping>
}
 8004a9a:	bf00      	nop
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b086      	sub	sp, #24
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ab0:	f7ff ff40 	bl	8004934 <__NVIC_GetPriorityGrouping>
 8004ab4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	68b9      	ldr	r1, [r7, #8]
 8004aba:	6978      	ldr	r0, [r7, #20]
 8004abc:	f7ff ff90 	bl	80049e0 <NVIC_EncodePriority>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff ff5f 	bl	800498c <__NVIC_SetPriority>
}
 8004ace:	bf00      	nop
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	4603      	mov	r3, r0
 8004ade:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff ff33 	bl	8004950 <__NVIC_EnableIRQ>
}
 8004aea:	bf00      	nop
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b082      	sub	sp, #8
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff ffa4 	bl	8004a48 <SysTick_Config>
 8004b00:	4603      	mov	r3, r0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004b10:	f3bf 8f5f 	dmb	sy
}
 8004b14:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004b16:	4b07      	ldr	r3, [pc, #28]	@ (8004b34 <HAL_MPU_Disable+0x28>)
 8004b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1a:	4a06      	ldr	r2, [pc, #24]	@ (8004b34 <HAL_MPU_Disable+0x28>)
 8004b1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b20:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004b22:	4b05      	ldr	r3, [pc, #20]	@ (8004b38 <HAL_MPU_Disable+0x2c>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	605a      	str	r2, [r3, #4]
}
 8004b28:	bf00      	nop
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	e000ed00 	.word	0xe000ed00
 8004b38:	e000ed90 	.word	0xe000ed90

08004b3c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004b44:	4a0b      	ldr	r2, [pc, #44]	@ (8004b74 <HAL_MPU_Enable+0x38>)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f043 0301 	orr.w	r3, r3, #1
 8004b4c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b78 <HAL_MPU_Enable+0x3c>)
 8004b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b52:	4a09      	ldr	r2, [pc, #36]	@ (8004b78 <HAL_MPU_Enable+0x3c>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b58:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004b5a:	f3bf 8f4f 	dsb	sy
}
 8004b5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b60:	f3bf 8f6f 	isb	sy
}
 8004b64:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	e000ed90 	.word	0xe000ed90
 8004b78:	e000ed00 	.word	0xe000ed00

08004b7c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	785a      	ldrb	r2, [r3, #1]
 8004b88:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf8 <HAL_MPU_ConfigRegion+0x7c>)
 8004b8a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf8 <HAL_MPU_ConfigRegion+0x7c>)
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	4a19      	ldr	r2, [pc, #100]	@ (8004bf8 <HAL_MPU_ConfigRegion+0x7c>)
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004b98:	4a17      	ldr	r2, [pc, #92]	@ (8004bf8 <HAL_MPU_ConfigRegion+0x7c>)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	7b1b      	ldrb	r3, [r3, #12]
 8004ba4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	7adb      	ldrb	r3, [r3, #11]
 8004baa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004bac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	7a9b      	ldrb	r3, [r3, #10]
 8004bb2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004bb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	7b5b      	ldrb	r3, [r3, #13]
 8004bba:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004bbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	7b9b      	ldrb	r3, [r3, #14]
 8004bc2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004bc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	7bdb      	ldrb	r3, [r3, #15]
 8004bca:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004bcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	7a5b      	ldrb	r3, [r3, #9]
 8004bd2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004bd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	7a1b      	ldrb	r3, [r3, #8]
 8004bda:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004bdc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	7812      	ldrb	r2, [r2, #0]
 8004be2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004be4:	4a04      	ldr	r2, [pc, #16]	@ (8004bf8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004be6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004be8:	6113      	str	r3, [r2, #16]
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	e000ed90 	.word	0xe000ed90

08004bfc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e054      	b.n	8004cb8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	7f5b      	ldrb	r3, [r3, #29]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d105      	bne.n	8004c24 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fd f9c0 	bl	8001fa4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	791b      	ldrb	r3, [r3, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10c      	bne.n	8004c4c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a22      	ldr	r2, [pc, #136]	@ (8004cc0 <HAL_CRC_Init+0xc4>)
 8004c38:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0218 	bic.w	r2, r2, #24
 8004c48:	609a      	str	r2, [r3, #8]
 8004c4a:	e00c      	b.n	8004c66 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6899      	ldr	r1, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	461a      	mov	r2, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f834 	bl	8004cc4 <HAL_CRCEx_Polynomial_Set>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e028      	b.n	8004cb8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	795b      	ldrb	r3, [r3, #5]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d105      	bne.n	8004c7a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f04f 32ff 	mov.w	r2, #4294967295
 8004c76:	611a      	str	r2, [r3, #16]
 8004c78:	e004      	b.n	8004c84 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6912      	ldr	r2, [r2, #16]
 8004c82:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695a      	ldr	r2, [r3, #20]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699a      	ldr	r2, [r3, #24]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	04c11db7 	.word	0x04c11db7

08004cc4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004cd4:	231f      	movs	r3, #31
 8004cd6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d102      	bne.n	8004ce8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	75fb      	strb	r3, [r7, #23]
 8004ce6:	e063      	b.n	8004db0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004ce8:	bf00      	nop
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1e5a      	subs	r2, r3, #1
 8004cee:	613a      	str	r2, [r7, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d009      	beq.n	8004d08 <HAL_CRCEx_Polynomial_Set+0x44>
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f003 031f 	and.w	r3, r3, #31
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f0      	beq.n	8004cea <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b18      	cmp	r3, #24
 8004d0c:	d846      	bhi.n	8004d9c <HAL_CRCEx_Polynomial_Set+0xd8>
 8004d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d14 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d14:	08004da3 	.word	0x08004da3
 8004d18:	08004d9d 	.word	0x08004d9d
 8004d1c:	08004d9d 	.word	0x08004d9d
 8004d20:	08004d9d 	.word	0x08004d9d
 8004d24:	08004d9d 	.word	0x08004d9d
 8004d28:	08004d9d 	.word	0x08004d9d
 8004d2c:	08004d9d 	.word	0x08004d9d
 8004d30:	08004d9d 	.word	0x08004d9d
 8004d34:	08004d91 	.word	0x08004d91
 8004d38:	08004d9d 	.word	0x08004d9d
 8004d3c:	08004d9d 	.word	0x08004d9d
 8004d40:	08004d9d 	.word	0x08004d9d
 8004d44:	08004d9d 	.word	0x08004d9d
 8004d48:	08004d9d 	.word	0x08004d9d
 8004d4c:	08004d9d 	.word	0x08004d9d
 8004d50:	08004d9d 	.word	0x08004d9d
 8004d54:	08004d85 	.word	0x08004d85
 8004d58:	08004d9d 	.word	0x08004d9d
 8004d5c:	08004d9d 	.word	0x08004d9d
 8004d60:	08004d9d 	.word	0x08004d9d
 8004d64:	08004d9d 	.word	0x08004d9d
 8004d68:	08004d9d 	.word	0x08004d9d
 8004d6c:	08004d9d 	.word	0x08004d9d
 8004d70:	08004d9d 	.word	0x08004d9d
 8004d74:	08004d79 	.word	0x08004d79
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	2b06      	cmp	r3, #6
 8004d7c:	d913      	bls.n	8004da6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004d82:	e010      	b.n	8004da6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	2b07      	cmp	r3, #7
 8004d88:	d90f      	bls.n	8004daa <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004d8e:	e00c      	b.n	8004daa <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b0f      	cmp	r3, #15
 8004d94:	d90b      	bls.n	8004dae <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004d9a:	e008      	b.n	8004dae <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	75fb      	strb	r3, [r7, #23]
        break;
 8004da0:	e006      	b.n	8004db0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004da2:	bf00      	nop
 8004da4:	e004      	b.n	8004db0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004da6:	bf00      	nop
 8004da8:	e002      	b.n	8004db0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004daa:	bf00      	nop
 8004dac:	e000      	b.n	8004db0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004dae:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004db0:	7dfb      	ldrb	r3, [r7, #23]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10d      	bne.n	8004dd2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f023 0118 	bic.w	r1, r3, #24
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e237      	b.n	8005262 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d004      	beq.n	8004e08 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2280      	movs	r2, #128	@ 0x80
 8004e02:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e22c      	b.n	8005262 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a5c      	ldr	r2, [pc, #368]	@ (8004f80 <HAL_DMA_Abort_IT+0x1a0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d04a      	beq.n	8004ea8 <HAL_DMA_Abort_IT+0xc8>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a5b      	ldr	r2, [pc, #364]	@ (8004f84 <HAL_DMA_Abort_IT+0x1a4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d045      	beq.n	8004ea8 <HAL_DMA_Abort_IT+0xc8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a59      	ldr	r2, [pc, #356]	@ (8004f88 <HAL_DMA_Abort_IT+0x1a8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d040      	beq.n	8004ea8 <HAL_DMA_Abort_IT+0xc8>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a58      	ldr	r2, [pc, #352]	@ (8004f8c <HAL_DMA_Abort_IT+0x1ac>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d03b      	beq.n	8004ea8 <HAL_DMA_Abort_IT+0xc8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a56      	ldr	r2, [pc, #344]	@ (8004f90 <HAL_DMA_Abort_IT+0x1b0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d036      	beq.n	8004ea8 <HAL_DMA_Abort_IT+0xc8>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a55      	ldr	r2, [pc, #340]	@ (8004f94 <HAL_DMA_Abort_IT+0x1b4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d031      	beq.n	8004ea8 <HAL_DMA_Abort_IT+0xc8>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a53      	ldr	r2, [pc, #332]	@ (8004f98 <HAL_DMA_Abort_IT+0x1b8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d02c      	beq.n	8004ea8 <HAL_DMA_Abort_IT+0xc8>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a52      	ldr	r2, [pc, #328]	@ (8004f9c <HAL_DMA_Abort_IT+0x1bc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d027      	beq.n	8004ea8 <HAL_DMA_Abort_IT+0xc8>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a50      	ldr	r2, [pc, #320]	@ (8004fa0 <HAL_DMA_Abort_IT+0x1c0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d022      	beq.n	8004ea8 <HAL_DMA_Abort_IT+0xc8>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a4f      	ldr	r2, [pc, #316]	@ (8004fa4 <HAL_DMA_Abort_IT+0x1c4>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d01d      	beq.n	8004ea8 <HAL_DMA_Abort_IT+0xc8>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a4d      	ldr	r2, [pc, #308]	@ (8004fa8 <HAL_DMA_Abort_IT+0x1c8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d018      	beq.n	8004ea8 <HAL_DMA_Abort_IT+0xc8>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a4c      	ldr	r2, [pc, #304]	@ (8004fac <HAL_DMA_Abort_IT+0x1cc>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d013      	beq.n	8004ea8 <HAL_DMA_Abort_IT+0xc8>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a4a      	ldr	r2, [pc, #296]	@ (8004fb0 <HAL_DMA_Abort_IT+0x1d0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00e      	beq.n	8004ea8 <HAL_DMA_Abort_IT+0xc8>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a49      	ldr	r2, [pc, #292]	@ (8004fb4 <HAL_DMA_Abort_IT+0x1d4>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d009      	beq.n	8004ea8 <HAL_DMA_Abort_IT+0xc8>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a47      	ldr	r2, [pc, #284]	@ (8004fb8 <HAL_DMA_Abort_IT+0x1d8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d004      	beq.n	8004ea8 <HAL_DMA_Abort_IT+0xc8>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a46      	ldr	r2, [pc, #280]	@ (8004fbc <HAL_DMA_Abort_IT+0x1dc>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d101      	bne.n	8004eac <HAL_DMA_Abort_IT+0xcc>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <HAL_DMA_Abort_IT+0xce>
 8004eac:	2300      	movs	r3, #0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 8086 	beq.w	8004fc0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2204      	movs	r2, #4
 8004eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8004f80 <HAL_DMA_Abort_IT+0x1a0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d04a      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x17c>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a2e      	ldr	r2, [pc, #184]	@ (8004f84 <HAL_DMA_Abort_IT+0x1a4>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d045      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x17c>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a2c      	ldr	r2, [pc, #176]	@ (8004f88 <HAL_DMA_Abort_IT+0x1a8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d040      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x17c>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a2b      	ldr	r2, [pc, #172]	@ (8004f8c <HAL_DMA_Abort_IT+0x1ac>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d03b      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x17c>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a29      	ldr	r2, [pc, #164]	@ (8004f90 <HAL_DMA_Abort_IT+0x1b0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d036      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x17c>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a28      	ldr	r2, [pc, #160]	@ (8004f94 <HAL_DMA_Abort_IT+0x1b4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d031      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x17c>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a26      	ldr	r2, [pc, #152]	@ (8004f98 <HAL_DMA_Abort_IT+0x1b8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d02c      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x17c>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a25      	ldr	r2, [pc, #148]	@ (8004f9c <HAL_DMA_Abort_IT+0x1bc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d027      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x17c>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a23      	ldr	r2, [pc, #140]	@ (8004fa0 <HAL_DMA_Abort_IT+0x1c0>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d022      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x17c>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a22      	ldr	r2, [pc, #136]	@ (8004fa4 <HAL_DMA_Abort_IT+0x1c4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d01d      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x17c>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a20      	ldr	r2, [pc, #128]	@ (8004fa8 <HAL_DMA_Abort_IT+0x1c8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d018      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x17c>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fac <HAL_DMA_Abort_IT+0x1cc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d013      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x17c>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb0 <HAL_DMA_Abort_IT+0x1d0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00e      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x17c>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb4 <HAL_DMA_Abort_IT+0x1d4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d009      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x17c>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004fb8 <HAL_DMA_Abort_IT+0x1d8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d004      	beq.n	8004f5c <HAL_DMA_Abort_IT+0x17c>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a19      	ldr	r2, [pc, #100]	@ (8004fbc <HAL_DMA_Abort_IT+0x1dc>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d108      	bne.n	8004f6e <HAL_DMA_Abort_IT+0x18e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0201 	bic.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	e178      	b.n	8005260 <HAL_DMA_Abort_IT+0x480>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0201 	bic.w	r2, r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	e16f      	b.n	8005260 <HAL_DMA_Abort_IT+0x480>
 8004f80:	40020010 	.word	0x40020010
 8004f84:	40020028 	.word	0x40020028
 8004f88:	40020040 	.word	0x40020040
 8004f8c:	40020058 	.word	0x40020058
 8004f90:	40020070 	.word	0x40020070
 8004f94:	40020088 	.word	0x40020088
 8004f98:	400200a0 	.word	0x400200a0
 8004f9c:	400200b8 	.word	0x400200b8
 8004fa0:	40020410 	.word	0x40020410
 8004fa4:	40020428 	.word	0x40020428
 8004fa8:	40020440 	.word	0x40020440
 8004fac:	40020458 	.word	0x40020458
 8004fb0:	40020470 	.word	0x40020470
 8004fb4:	40020488 	.word	0x40020488
 8004fb8:	400204a0 	.word	0x400204a0
 8004fbc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 020e 	bic.w	r2, r2, #14
 8004fce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a6c      	ldr	r2, [pc, #432]	@ (8005188 <HAL_DMA_Abort_IT+0x3a8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d04a      	beq.n	8005070 <HAL_DMA_Abort_IT+0x290>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a6b      	ldr	r2, [pc, #428]	@ (800518c <HAL_DMA_Abort_IT+0x3ac>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d045      	beq.n	8005070 <HAL_DMA_Abort_IT+0x290>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a69      	ldr	r2, [pc, #420]	@ (8005190 <HAL_DMA_Abort_IT+0x3b0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d040      	beq.n	8005070 <HAL_DMA_Abort_IT+0x290>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a68      	ldr	r2, [pc, #416]	@ (8005194 <HAL_DMA_Abort_IT+0x3b4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d03b      	beq.n	8005070 <HAL_DMA_Abort_IT+0x290>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a66      	ldr	r2, [pc, #408]	@ (8005198 <HAL_DMA_Abort_IT+0x3b8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d036      	beq.n	8005070 <HAL_DMA_Abort_IT+0x290>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a65      	ldr	r2, [pc, #404]	@ (800519c <HAL_DMA_Abort_IT+0x3bc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d031      	beq.n	8005070 <HAL_DMA_Abort_IT+0x290>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a63      	ldr	r2, [pc, #396]	@ (80051a0 <HAL_DMA_Abort_IT+0x3c0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d02c      	beq.n	8005070 <HAL_DMA_Abort_IT+0x290>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a62      	ldr	r2, [pc, #392]	@ (80051a4 <HAL_DMA_Abort_IT+0x3c4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d027      	beq.n	8005070 <HAL_DMA_Abort_IT+0x290>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a60      	ldr	r2, [pc, #384]	@ (80051a8 <HAL_DMA_Abort_IT+0x3c8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d022      	beq.n	8005070 <HAL_DMA_Abort_IT+0x290>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a5f      	ldr	r2, [pc, #380]	@ (80051ac <HAL_DMA_Abort_IT+0x3cc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d01d      	beq.n	8005070 <HAL_DMA_Abort_IT+0x290>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a5d      	ldr	r2, [pc, #372]	@ (80051b0 <HAL_DMA_Abort_IT+0x3d0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d018      	beq.n	8005070 <HAL_DMA_Abort_IT+0x290>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a5c      	ldr	r2, [pc, #368]	@ (80051b4 <HAL_DMA_Abort_IT+0x3d4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d013      	beq.n	8005070 <HAL_DMA_Abort_IT+0x290>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a5a      	ldr	r2, [pc, #360]	@ (80051b8 <HAL_DMA_Abort_IT+0x3d8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00e      	beq.n	8005070 <HAL_DMA_Abort_IT+0x290>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a59      	ldr	r2, [pc, #356]	@ (80051bc <HAL_DMA_Abort_IT+0x3dc>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d009      	beq.n	8005070 <HAL_DMA_Abort_IT+0x290>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a57      	ldr	r2, [pc, #348]	@ (80051c0 <HAL_DMA_Abort_IT+0x3e0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d004      	beq.n	8005070 <HAL_DMA_Abort_IT+0x290>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a56      	ldr	r2, [pc, #344]	@ (80051c4 <HAL_DMA_Abort_IT+0x3e4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d108      	bne.n	8005082 <HAL_DMA_Abort_IT+0x2a2>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0201 	bic.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	e007      	b.n	8005092 <HAL_DMA_Abort_IT+0x2b2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a3c      	ldr	r2, [pc, #240]	@ (8005188 <HAL_DMA_Abort_IT+0x3a8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d072      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a3a      	ldr	r2, [pc, #232]	@ (800518c <HAL_DMA_Abort_IT+0x3ac>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d06d      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a39      	ldr	r2, [pc, #228]	@ (8005190 <HAL_DMA_Abort_IT+0x3b0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d068      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a37      	ldr	r2, [pc, #220]	@ (8005194 <HAL_DMA_Abort_IT+0x3b4>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d063      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a36      	ldr	r2, [pc, #216]	@ (8005198 <HAL_DMA_Abort_IT+0x3b8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d05e      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a34      	ldr	r2, [pc, #208]	@ (800519c <HAL_DMA_Abort_IT+0x3bc>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d059      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a33      	ldr	r2, [pc, #204]	@ (80051a0 <HAL_DMA_Abort_IT+0x3c0>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d054      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a31      	ldr	r2, [pc, #196]	@ (80051a4 <HAL_DMA_Abort_IT+0x3c4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d04f      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a30      	ldr	r2, [pc, #192]	@ (80051a8 <HAL_DMA_Abort_IT+0x3c8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d04a      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a2e      	ldr	r2, [pc, #184]	@ (80051ac <HAL_DMA_Abort_IT+0x3cc>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d045      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a2d      	ldr	r2, [pc, #180]	@ (80051b0 <HAL_DMA_Abort_IT+0x3d0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d040      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a2b      	ldr	r2, [pc, #172]	@ (80051b4 <HAL_DMA_Abort_IT+0x3d4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d03b      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a2a      	ldr	r2, [pc, #168]	@ (80051b8 <HAL_DMA_Abort_IT+0x3d8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d036      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a28      	ldr	r2, [pc, #160]	@ (80051bc <HAL_DMA_Abort_IT+0x3dc>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d031      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a27      	ldr	r2, [pc, #156]	@ (80051c0 <HAL_DMA_Abort_IT+0x3e0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d02c      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a25      	ldr	r2, [pc, #148]	@ (80051c4 <HAL_DMA_Abort_IT+0x3e4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d027      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a24      	ldr	r2, [pc, #144]	@ (80051c8 <HAL_DMA_Abort_IT+0x3e8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d022      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a22      	ldr	r2, [pc, #136]	@ (80051cc <HAL_DMA_Abort_IT+0x3ec>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d01d      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a21      	ldr	r2, [pc, #132]	@ (80051d0 <HAL_DMA_Abort_IT+0x3f0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d018      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a1f      	ldr	r2, [pc, #124]	@ (80051d4 <HAL_DMA_Abort_IT+0x3f4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d013      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1e      	ldr	r2, [pc, #120]	@ (80051d8 <HAL_DMA_Abort_IT+0x3f8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00e      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1c      	ldr	r2, [pc, #112]	@ (80051dc <HAL_DMA_Abort_IT+0x3fc>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d009      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1b      	ldr	r2, [pc, #108]	@ (80051e0 <HAL_DMA_Abort_IT+0x400>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d004      	beq.n	8005182 <HAL_DMA_Abort_IT+0x3a2>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a19      	ldr	r2, [pc, #100]	@ (80051e4 <HAL_DMA_Abort_IT+0x404>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d132      	bne.n	80051e8 <HAL_DMA_Abort_IT+0x408>
 8005182:	2301      	movs	r3, #1
 8005184:	e031      	b.n	80051ea <HAL_DMA_Abort_IT+0x40a>
 8005186:	bf00      	nop
 8005188:	40020010 	.word	0x40020010
 800518c:	40020028 	.word	0x40020028
 8005190:	40020040 	.word	0x40020040
 8005194:	40020058 	.word	0x40020058
 8005198:	40020070 	.word	0x40020070
 800519c:	40020088 	.word	0x40020088
 80051a0:	400200a0 	.word	0x400200a0
 80051a4:	400200b8 	.word	0x400200b8
 80051a8:	40020410 	.word	0x40020410
 80051ac:	40020428 	.word	0x40020428
 80051b0:	40020440 	.word	0x40020440
 80051b4:	40020458 	.word	0x40020458
 80051b8:	40020470 	.word	0x40020470
 80051bc:	40020488 	.word	0x40020488
 80051c0:	400204a0 	.word	0x400204a0
 80051c4:	400204b8 	.word	0x400204b8
 80051c8:	58025408 	.word	0x58025408
 80051cc:	5802541c 	.word	0x5802541c
 80051d0:	58025430 	.word	0x58025430
 80051d4:	58025444 	.word	0x58025444
 80051d8:	58025458 	.word	0x58025458
 80051dc:	5802546c 	.word	0x5802546c
 80051e0:	58025480 	.word	0x58025480
 80051e4:	58025494 	.word	0x58025494
 80051e8:	2300      	movs	r3, #0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d028      	beq.n	8005240 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051fc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005202:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	2201      	movs	r2, #1
 800520e:	409a      	lsls	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800521c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00c      	beq.n	8005240 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005230:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005234:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800523e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop

0800526c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800527a:	b2db      	uxtb	r3, r3
}
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e04f      	b.n	800533a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fc fe9a 	bl	8001fe8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4b20      	ldr	r3, [pc, #128]	@ (8005344 <HAL_DMA2D_Init+0xbc>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6851      	ldr	r1, [r2, #4]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	69d2      	ldr	r2, [r2, #28]
 80052ce:	4311      	orrs	r1, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	430b      	orrs	r3, r1
 80052d6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052de:	4b1a      	ldr	r3, [pc, #104]	@ (8005348 <HAL_DMA2D_Init+0xc0>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6891      	ldr	r1, [r2, #8]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6992      	ldr	r2, [r2, #24]
 80052ea:	4311      	orrs	r1, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	430b      	orrs	r3, r1
 80052f2:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052fa:	4b14      	ldr	r3, [pc, #80]	@ (800534c <HAL_DMA2D_Init+0xc4>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	68d1      	ldr	r1, [r2, #12]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6812      	ldr	r2, [r2, #0]
 8005306:	430b      	orrs	r3, r1
 8005308:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005310:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	051a      	lsls	r2, r3, #20
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	055b      	lsls	r3, r3, #21
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	fff8ffbf 	.word	0xfff8ffbf
 8005348:	fffffef8 	.word	0xfffffef8
 800534c:	ffff0000 	.word	0xffff0000

08005350 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_DMA2D_ConfigLayer+0x24>
 8005370:	2302      	movs	r3, #2
 8005372:	e092      	b.n	800549a <HAL_DMA2D_ConfigLayer+0x14a>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	4613      	mov	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	3328      	adds	r3, #40	@ 0x28
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	4413      	add	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	041b      	lsls	r3, r3, #16
 80053a0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80053a8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80053b4:	4b3c      	ldr	r3, [pc, #240]	@ (80054a8 <HAL_DMA2D_ConfigLayer+0x158>)
 80053b6:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b0a      	cmp	r3, #10
 80053be:	d003      	beq.n	80053c8 <HAL_DMA2D_ConfigLayer+0x78>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b09      	cmp	r3, #9
 80053c6:	d107      	bne.n	80053d8 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	e005      	b.n	80053e4 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	061b      	lsls	r3, r3, #24
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d120      	bne.n	800542c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	43db      	mvns	r3, r3
 80053f4:	ea02 0103 	and.w	r1, r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	430a      	orrs	r2, r1
 8005400:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	6812      	ldr	r2, [r2, #0]
 800540a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b0a      	cmp	r3, #10
 8005412:	d003      	beq.n	800541c <HAL_DMA2D_ConfigLayer+0xcc>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b09      	cmp	r3, #9
 800541a:	d135      	bne.n	8005488 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005428:	629a      	str	r2, [r3, #40]	@ 0x28
 800542a:	e02d      	b.n	8005488 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b0b      	cmp	r3, #11
 8005432:	d109      	bne.n	8005448 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	049b      	lsls	r3, r3, #18
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8005446:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	69da      	ldr	r2, [r3, #28]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	43db      	mvns	r3, r3
 8005452:	ea02 0103 	and.w	r1, r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	430a      	orrs	r2, r1
 800545e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	6812      	ldr	r2, [r2, #0]
 8005468:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b0a      	cmp	r3, #10
 8005470:	d003      	beq.n	800547a <HAL_DMA2D_ConfigLayer+0x12a>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2b09      	cmp	r3, #9
 8005478:	d106      	bne.n	8005488 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005486:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	ff33000f 	.word	0xff33000f

080054ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b089      	sub	sp, #36	@ 0x24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80054ba:	4b86      	ldr	r3, [pc, #536]	@ (80056d4 <HAL_GPIO_Init+0x228>)
 80054bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054be:	e18c      	b.n	80057da <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	2101      	movs	r1, #1
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	fa01 f303 	lsl.w	r3, r1, r3
 80054cc:	4013      	ands	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 817e 	beq.w	80057d4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f003 0303 	and.w	r3, r3, #3
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d005      	beq.n	80054f0 <HAL_GPIO_Init+0x44>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f003 0303 	and.w	r3, r3, #3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d130      	bne.n	8005552 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	2203      	movs	r2, #3
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	43db      	mvns	r3, r3
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	4013      	ands	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	4313      	orrs	r3, r2
 8005518:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005526:	2201      	movs	r2, #1
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	43db      	mvns	r3, r3
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	4013      	ands	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	091b      	lsrs	r3, r3, #4
 800553c:	f003 0201 	and.w	r2, r3, #1
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4313      	orrs	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	2b03      	cmp	r3, #3
 800555c:	d017      	beq.n	800558e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	2203      	movs	r2, #3
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	43db      	mvns	r3, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	4013      	ands	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	4313      	orrs	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d123      	bne.n	80055e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	08da      	lsrs	r2, r3, #3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3208      	adds	r2, #8
 80055a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	220f      	movs	r2, #15
 80055b2:	fa02 f303 	lsl.w	r3, r2, r3
 80055b6:	43db      	mvns	r3, r3
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	4013      	ands	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	08da      	lsrs	r2, r3, #3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3208      	adds	r2, #8
 80055dc:	69b9      	ldr	r1, [r7, #24]
 80055de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	2203      	movs	r2, #3
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	43db      	mvns	r3, r3
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	4013      	ands	r3, r2
 80055f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f003 0203 	and.w	r2, r3, #3
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	fa02 f303 	lsl.w	r3, r2, r3
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	4313      	orrs	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 80d8 	beq.w	80057d4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005624:	4b2c      	ldr	r3, [pc, #176]	@ (80056d8 <HAL_GPIO_Init+0x22c>)
 8005626:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800562a:	4a2b      	ldr	r2, [pc, #172]	@ (80056d8 <HAL_GPIO_Init+0x22c>)
 800562c:	f043 0302 	orr.w	r3, r3, #2
 8005630:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005634:	4b28      	ldr	r3, [pc, #160]	@ (80056d8 <HAL_GPIO_Init+0x22c>)
 8005636:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005642:	4a26      	ldr	r2, [pc, #152]	@ (80056dc <HAL_GPIO_Init+0x230>)
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	089b      	lsrs	r3, r3, #2
 8005648:	3302      	adds	r3, #2
 800564a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800564e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	220f      	movs	r2, #15
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	43db      	mvns	r3, r3
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	4013      	ands	r3, r2
 8005664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a1d      	ldr	r2, [pc, #116]	@ (80056e0 <HAL_GPIO_Init+0x234>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d04a      	beq.n	8005704 <HAL_GPIO_Init+0x258>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a1c      	ldr	r2, [pc, #112]	@ (80056e4 <HAL_GPIO_Init+0x238>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d02b      	beq.n	80056ce <HAL_GPIO_Init+0x222>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a1b      	ldr	r2, [pc, #108]	@ (80056e8 <HAL_GPIO_Init+0x23c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d025      	beq.n	80056ca <HAL_GPIO_Init+0x21e>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a1a      	ldr	r2, [pc, #104]	@ (80056ec <HAL_GPIO_Init+0x240>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d01f      	beq.n	80056c6 <HAL_GPIO_Init+0x21a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a19      	ldr	r2, [pc, #100]	@ (80056f0 <HAL_GPIO_Init+0x244>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d019      	beq.n	80056c2 <HAL_GPIO_Init+0x216>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a18      	ldr	r2, [pc, #96]	@ (80056f4 <HAL_GPIO_Init+0x248>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d013      	beq.n	80056be <HAL_GPIO_Init+0x212>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a17      	ldr	r2, [pc, #92]	@ (80056f8 <HAL_GPIO_Init+0x24c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00d      	beq.n	80056ba <HAL_GPIO_Init+0x20e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a16      	ldr	r2, [pc, #88]	@ (80056fc <HAL_GPIO_Init+0x250>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d007      	beq.n	80056b6 <HAL_GPIO_Init+0x20a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a15      	ldr	r2, [pc, #84]	@ (8005700 <HAL_GPIO_Init+0x254>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d101      	bne.n	80056b2 <HAL_GPIO_Init+0x206>
 80056ae:	2309      	movs	r3, #9
 80056b0:	e029      	b.n	8005706 <HAL_GPIO_Init+0x25a>
 80056b2:	230a      	movs	r3, #10
 80056b4:	e027      	b.n	8005706 <HAL_GPIO_Init+0x25a>
 80056b6:	2307      	movs	r3, #7
 80056b8:	e025      	b.n	8005706 <HAL_GPIO_Init+0x25a>
 80056ba:	2306      	movs	r3, #6
 80056bc:	e023      	b.n	8005706 <HAL_GPIO_Init+0x25a>
 80056be:	2305      	movs	r3, #5
 80056c0:	e021      	b.n	8005706 <HAL_GPIO_Init+0x25a>
 80056c2:	2304      	movs	r3, #4
 80056c4:	e01f      	b.n	8005706 <HAL_GPIO_Init+0x25a>
 80056c6:	2303      	movs	r3, #3
 80056c8:	e01d      	b.n	8005706 <HAL_GPIO_Init+0x25a>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e01b      	b.n	8005706 <HAL_GPIO_Init+0x25a>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e019      	b.n	8005706 <HAL_GPIO_Init+0x25a>
 80056d2:	bf00      	nop
 80056d4:	58000080 	.word	0x58000080
 80056d8:	58024400 	.word	0x58024400
 80056dc:	58000400 	.word	0x58000400
 80056e0:	58020000 	.word	0x58020000
 80056e4:	58020400 	.word	0x58020400
 80056e8:	58020800 	.word	0x58020800
 80056ec:	58020c00 	.word	0x58020c00
 80056f0:	58021000 	.word	0x58021000
 80056f4:	58021400 	.word	0x58021400
 80056f8:	58021800 	.word	0x58021800
 80056fc:	58021c00 	.word	0x58021c00
 8005700:	58022400 	.word	0x58022400
 8005704:	2300      	movs	r3, #0
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	f002 0203 	and.w	r2, r2, #3
 800570c:	0092      	lsls	r2, r2, #2
 800570e:	4093      	lsls	r3, r2
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	4313      	orrs	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005716:	4938      	ldr	r1, [pc, #224]	@ (80057f8 <HAL_GPIO_Init+0x34c>)
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	089b      	lsrs	r3, r3, #2
 800571c:	3302      	adds	r3, #2
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	43db      	mvns	r3, r3
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	4013      	ands	r3, r2
 8005734:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800574a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	43db      	mvns	r3, r3
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4013      	ands	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005778:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	43db      	mvns	r3, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4013      	ands	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	43db      	mvns	r3, r3
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	4013      	ands	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	3301      	adds	r3, #1
 80057d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	fa22 f303 	lsr.w	r3, r2, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f47f ae6b 	bne.w	80054c0 <HAL_GPIO_Init+0x14>
  }
}
 80057ea:	bf00      	nop
 80057ec:	bf00      	nop
 80057ee:	3724      	adds	r7, #36	@ 0x24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	58000400 	.word	0x58000400

080057fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	887b      	ldrh	r3, [r7, #2]
 800580e:	4013      	ands	r3, r2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]
 8005818:	e001      	b.n	800581e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800581a:	2300      	movs	r3, #0
 800581c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800581e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	807b      	strh	r3, [r7, #2]
 8005838:	4613      	mov	r3, r2
 800583a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800583c:	787b      	ldrb	r3, [r7, #1]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005842:	887a      	ldrh	r2, [r7, #2]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005848:	e003      	b.n	8005852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800584a:	887b      	ldrh	r3, [r7, #2]
 800584c:	041a      	lsls	r2, r3, #16
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	619a      	str	r2, [r3, #24]
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b082      	sub	sp, #8
 8005862:	af00      	add	r7, sp, #0
 8005864:	4603      	mov	r3, r0
 8005866:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800586c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	4013      	ands	r3, r2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d008      	beq.n	800588a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005878:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800587c:	88fb      	ldrh	r3, [r7, #6]
 800587e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	4618      	mov	r0, r3
 8005886:	f7fc f921 	bl	8001acc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800588a:	bf00      	nop
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e08b      	b.n	80059be <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fc fbb6 	bl	800202c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2224      	movs	r2, #36	@ 0x24
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0201 	bic.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80058e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d107      	bne.n	800590e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800590a:	609a      	str	r2, [r3, #8]
 800590c:	e006      	b.n	800591c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800591a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	2b02      	cmp	r3, #2
 8005922:	d108      	bne.n	8005936 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005932:	605a      	str	r2, [r3, #4]
 8005934:	e007      	b.n	8005946 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005944:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6859      	ldr	r1, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	4b1d      	ldr	r3, [pc, #116]	@ (80059c8 <HAL_I2C_Init+0x134>)
 8005952:	430b      	orrs	r3, r1
 8005954:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005964:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691a      	ldr	r2, [r3, #16]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	69d9      	ldr	r1, [r3, #28]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a1a      	ldr	r2, [r3, #32]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	02008000 	.word	0x02008000

080059cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	607a      	str	r2, [r7, #4]
 80059d6:	461a      	mov	r2, r3
 80059d8:	460b      	mov	r3, r1
 80059da:	817b      	strh	r3, [r7, #10]
 80059dc:	4613      	mov	r3, r2
 80059de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	f040 80fd 	bne.w	8005be8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_I2C_Master_Transmit+0x30>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e0f6      	b.n	8005bea <HAL_I2C_Master_Transmit+0x21e>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a04:	f7fc ff0c 	bl	8002820 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	2319      	movs	r3, #25
 8005a10:	2201      	movs	r2, #1
 8005a12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f001 fe6b 	bl	80076f2 <I2C_WaitOnFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e0e1      	b.n	8005bea <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2221      	movs	r2, #33	@ 0x21
 8005a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2210      	movs	r2, #16
 8005a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	893a      	ldrh	r2, [r7, #8]
 8005a46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2bff      	cmp	r3, #255	@ 0xff
 8005a56:	d906      	bls.n	8005a66 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	22ff      	movs	r2, #255	@ 0xff
 8005a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005a5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	e007      	b.n	8005a76 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005a70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a74:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d024      	beq.n	8005ac8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a82:	781a      	ldrb	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	8979      	ldrh	r1, [r7, #10]
 8005aba:	4b4e      	ldr	r3, [pc, #312]	@ (8005bf4 <HAL_I2C_Master_Transmit+0x228>)
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f001 ffd9 	bl	8007a78 <I2C_TransferConfig>
 8005ac6:	e066      	b.n	8005b96 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	8979      	ldrh	r1, [r7, #10]
 8005ad0:	4b48      	ldr	r3, [pc, #288]	@ (8005bf4 <HAL_I2C_Master_Transmit+0x228>)
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f001 ffce 	bl	8007a78 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005adc:	e05b      	b.n	8005b96 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	6a39      	ldr	r1, [r7, #32]
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f001 fe5e 	bl	80077a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e07b      	b.n	8005bea <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af6:	781a      	ldrb	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d034      	beq.n	8005b96 <HAL_I2C_Master_Transmit+0x1ca>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d130      	bne.n	8005b96 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2180      	movs	r1, #128	@ 0x80
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f001 fdd7 	bl	80076f2 <I2C_WaitOnFlagUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e04d      	b.n	8005bea <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2bff      	cmp	r3, #255	@ 0xff
 8005b56:	d90e      	bls.n	8005b76 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	22ff      	movs	r2, #255	@ 0xff
 8005b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	8979      	ldrh	r1, [r7, #10]
 8005b66:	2300      	movs	r3, #0
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f001 ff82 	bl	8007a78 <I2C_TransferConfig>
 8005b74:	e00f      	b.n	8005b96 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	8979      	ldrh	r1, [r7, #10]
 8005b88:	2300      	movs	r3, #0
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f001 ff71 	bl	8007a78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d19e      	bne.n	8005ade <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	6a39      	ldr	r1, [r7, #32]
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f001 fe44 	bl	8007832 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e01a      	b.n	8005bea <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6859      	ldr	r1, [r3, #4]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf8 <HAL_I2C_Master_Transmit+0x22c>)
 8005bc8:	400b      	ands	r3, r1
 8005bca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	e000      	b.n	8005bea <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005be8:	2302      	movs	r3, #2
  }
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	80002000 	.word	0x80002000
 8005bf8:	fe00e800 	.word	0xfe00e800

08005bfc <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b088      	sub	sp, #32
 8005c00:	af02      	add	r7, sp, #8
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	461a      	mov	r2, r3
 8005c08:	460b      	mov	r3, r1
 8005c0a:	817b      	strh	r3, [r7, #10]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	d153      	bne.n	8005cc4 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c2a:	d101      	bne.n	8005c30 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e04a      	b.n	8005cc6 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d101      	bne.n	8005c3e <HAL_I2C_Master_Receive_IT+0x42>
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	e043      	b.n	8005cc6 <HAL_I2C_Master_Receive_IT+0xca>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2222      	movs	r2, #34	@ 0x22
 8005c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2210      	movs	r2, #16
 8005c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	893a      	ldrh	r2, [r7, #8]
 8005c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4a19      	ldr	r2, [pc, #100]	@ (8005cd0 <HAL_I2C_Master_Receive_IT+0xd4>)
 8005c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4a18      	ldr	r2, [pc, #96]	@ (8005cd4 <HAL_I2C_Master_Receive_IT+0xd8>)
 8005c72:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	2bff      	cmp	r3, #255	@ 0xff
 8005c7c:	d906      	bls.n	8005c8c <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	22ff      	movs	r2, #255	@ 0xff
 8005c82:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005c84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	e007      	b.n	8005c9c <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005c96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c9a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	8979      	ldrh	r1, [r7, #10]
 8005ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd8 <HAL_I2C_Master_Receive_IT+0xdc>)
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f001 fee4 	bl	8007a78 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005cb8:	2102      	movs	r1, #2
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f001 ff0e 	bl	8007adc <I2C_Enable_IRQ>

    return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e000      	b.n	8005cc6 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005cc4:	2302      	movs	r3, #2
  }
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	ffff0000 	.word	0xffff0000
 8005cd4:	08005e8f 	.word	0x08005e8f
 8005cd8:	80002400 	.word	0x80002400

08005cdc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d005      	beq.n	8005d08 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	68f9      	ldr	r1, [r7, #12]
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	4798      	blx	r3
  }
}
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	0a1b      	lsrs	r3, r3, #8
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d010      	beq.n	8005d56 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	09db      	lsrs	r3, r3, #7
 8005d38:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00a      	beq.n	8005d56 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d44:	f043 0201 	orr.w	r2, r3, #1
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d54:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	0a9b      	lsrs	r3, r3, #10
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d010      	beq.n	8005d84 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	09db      	lsrs	r3, r3, #7
 8005d66:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d72:	f043 0208 	orr.w	r2, r3, #8
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d82:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	0a5b      	lsrs	r3, r3, #9
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d010      	beq.n	8005db2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	09db      	lsrs	r3, r3, #7
 8005d94:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da0:	f043 0202 	orr.w	r2, r3, #2
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005db0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f003 030b 	and.w	r3, r3, #11
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005dc2:	68f9      	ldr	r1, [r7, #12]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f001 fb3b 	bl	8007440 <I2C_ITError>
  }
}
 8005dca:	bf00      	nop
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005e02:	bf00      	nop
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	460b      	mov	r3, r1
 8005e18:	70fb      	strb	r3, [r7, #3]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b088      	sub	sp, #32
 8005e92:	af02      	add	r7, sp, #8
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d101      	bne.n	8005eac <I2C_Master_ISR_IT+0x1e>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	e120      	b.n	80060ee <I2C_Master_ISR_IT+0x260>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	091b      	lsrs	r3, r3, #4
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d013      	beq.n	8005ee8 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	091b      	lsrs	r3, r3, #4
 8005ec4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00d      	beq.n	8005ee8 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2210      	movs	r2, #16
 8005ed2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed8:	f043 0204 	orr.w	r2, r3, #4
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f001 fbc4 	bl	800766e <I2C_Flush_TXDR>
 8005ee6:	e0ed      	b.n	80060c4 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	089b      	lsrs	r3, r3, #2
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d023      	beq.n	8005f3c <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	089b      	lsrs	r3, r3, #2
 8005ef8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01d      	beq.n	8005f3c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f023 0304 	bic.w	r3, r3, #4
 8005f06:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f3a:	e0c3      	b.n	80060c4 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	099b      	lsrs	r3, r3, #6
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d12a      	bne.n	8005f9e <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	085b      	lsrs	r3, r3, #1
 8005f4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d024      	beq.n	8005f9e <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	085b      	lsrs	r3, r3, #1
 8005f58:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d01e      	beq.n	8005f9e <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 80ac 	beq.w	80060c4 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f70:	781a      	ldrb	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005f9c:	e092      	b.n	80060c4 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	09db      	lsrs	r3, r3, #7
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d05d      	beq.n	8006066 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	099b      	lsrs	r3, r3, #6
 8005fae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d057      	beq.n	8006066 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d040      	beq.n	8006042 <I2C_Master_ISR_IT+0x1b4>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d13c      	bne.n	8006042 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fd4:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	2bff      	cmp	r3, #255	@ 0xff
 8005fde:	d90e      	bls.n	8005ffe <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	22ff      	movs	r2, #255	@ 0xff
 8005fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	8a79      	ldrh	r1, [r7, #18]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f001 fd3e 	bl	8007a78 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ffc:	e032      	b.n	8006064 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006010:	d00b      	beq.n	800602a <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006016:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800601c:	8a79      	ldrh	r1, [r7, #18]
 800601e:	2000      	movs	r0, #0
 8006020:	9000      	str	r0, [sp, #0]
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f001 fd28 	bl	8007a78 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006028:	e01c      	b.n	8006064 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800602e:	b2da      	uxtb	r2, r3
 8006030:	8a79      	ldrh	r1, [r7, #18]
 8006032:	2300      	movs	r3, #0
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f001 fd1c 	bl	8007a78 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006040:	e010      	b.n	8006064 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800604c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006050:	d003      	beq.n	800605a <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fdde 	bl	8006c14 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006058:	e034      	b.n	80060c4 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800605a:	2140      	movs	r1, #64	@ 0x40
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f001 f9ef 	bl	8007440 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006062:	e02f      	b.n	80060c4 <I2C_Master_ISR_IT+0x236>
 8006064:	e02e      	b.n	80060c4 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	099b      	lsrs	r3, r3, #6
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d028      	beq.n	80060c4 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	099b      	lsrs	r3, r3, #6
 8006076:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800607a:	2b00      	cmp	r3, #0
 800607c:	d022      	beq.n	80060c4 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d119      	bne.n	80060bc <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006092:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006096:	d015      	beq.n	80060c4 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80060a0:	d108      	bne.n	80060b4 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060b0:	605a      	str	r2, [r3, #4]
 80060b2:	e007      	b.n	80060c4 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fdad 	bl	8006c14 <I2C_ITMasterSeqCplt>
 80060ba:	e003      	b.n	80060c4 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80060bc:	2140      	movs	r1, #64	@ 0x40
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f001 f9be 	bl	8007440 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	095b      	lsrs	r3, r3, #5
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d009      	beq.n	80060e4 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80060dc:	6979      	ldr	r1, [r7, #20]
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 fe34 	bl	8006d4c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b086      	sub	sp, #24
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	60b9      	str	r1, [r7, #8]
 8006100:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006106:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <I2C_Slave_ISR_IT+0x24>
 8006116:	2302      	movs	r3, #2
 8006118:	e0ed      	b.n	80062f6 <I2C_Slave_ISR_IT+0x200>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	095b      	lsrs	r3, r3, #5
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	095b      	lsrs	r3, r3, #5
 8006132:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006136:	2b00      	cmp	r3, #0
 8006138:	d004      	beq.n	8006144 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800613a:	6939      	ldr	r1, [r7, #16]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 fecf 	bl	8006ee0 <I2C_ITSlaveCplt>
 8006142:	e0d3      	b.n	80062ec <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	091b      	lsrs	r3, r3, #4
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d04d      	beq.n	80061ec <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	091b      	lsrs	r3, r3, #4
 8006154:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006158:	2b00      	cmp	r3, #0
 800615a:	d047      	beq.n	80061ec <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d128      	bne.n	80061b8 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b28      	cmp	r3, #40	@ 0x28
 8006170:	d108      	bne.n	8006184 <I2C_Slave_ISR_IT+0x8e>
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006178:	d104      	bne.n	8006184 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800617a:	6939      	ldr	r1, [r7, #16]
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f001 f909 	bl	8007394 <I2C_ITListenCplt>
 8006182:	e032      	b.n	80061ea <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b29      	cmp	r3, #41	@ 0x29
 800618e:	d10e      	bne.n	80061ae <I2C_Slave_ISR_IT+0xb8>
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006196:	d00a      	beq.n	80061ae <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2210      	movs	r2, #16
 800619e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f001 fa64 	bl	800766e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 fd71 	bl	8006c8e <I2C_ITSlaveSeqCplt>
 80061ac:	e01d      	b.n	80061ea <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2210      	movs	r2, #16
 80061b4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80061b6:	e096      	b.n	80062e6 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2210      	movs	r2, #16
 80061be:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c4:	f043 0204 	orr.w	r2, r3, #4
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d004      	beq.n	80061dc <I2C_Slave_ISR_IT+0xe6>
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061d8:	f040 8085 	bne.w	80062e6 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e0:	4619      	mov	r1, r3
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f001 f92c 	bl	8007440 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80061e8:	e07d      	b.n	80062e6 <I2C_Slave_ISR_IT+0x1f0>
 80061ea:	e07c      	b.n	80062e6 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	089b      	lsrs	r3, r3, #2
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d030      	beq.n	800625a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	089b      	lsrs	r3, r3, #2
 80061fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006200:	2b00      	cmp	r3, #0
 8006202:	d02a      	beq.n	800625a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d018      	beq.n	8006240 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006244:	b29b      	uxth	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d14f      	bne.n	80062ea <I2C_Slave_ISR_IT+0x1f4>
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006250:	d04b      	beq.n	80062ea <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fd1b 	bl	8006c8e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006258:	e047      	b.n	80062ea <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	08db      	lsrs	r3, r3, #3
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	08db      	lsrs	r3, r3, #3
 800626a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800626e:	2b00      	cmp	r3, #0
 8006270:	d004      	beq.n	800627c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006272:	6939      	ldr	r1, [r7, #16]
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 fc49 	bl	8006b0c <I2C_ITAddrCplt>
 800627a:	e037      	b.n	80062ec <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	085b      	lsrs	r3, r3, #1
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	d031      	beq.n	80062ec <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	085b      	lsrs	r3, r3, #1
 800628c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006290:	2b00      	cmp	r3, #0
 8006292:	d02b      	beq.n	80062ec <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006298:	b29b      	uxth	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d018      	beq.n	80062d0 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a2:	781a      	ldrb	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80062ce:	e00d      	b.n	80062ec <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062d6:	d002      	beq.n	80062de <I2C_Slave_ISR_IT+0x1e8>
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 fcd5 	bl	8006c8e <I2C_ITSlaveSeqCplt>
 80062e4:	e002      	b.n	80062ec <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80062e6:	bf00      	nop
 80062e8:	e000      	b.n	80062ec <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80062ea:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b088      	sub	sp, #32
 8006302:	af02      	add	r7, sp, #8
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <I2C_Master_ISR_DMA+0x1a>
 8006314:	2302      	movs	r3, #2
 8006316:	e0e1      	b.n	80064dc <I2C_Master_ISR_DMA+0x1de>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	091b      	lsrs	r3, r3, #4
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d017      	beq.n	800635c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	091b      	lsrs	r3, r3, #4
 8006330:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006334:	2b00      	cmp	r3, #0
 8006336:	d011      	beq.n	800635c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2210      	movs	r2, #16
 800633e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006344:	f043 0204 	orr.w	r2, r3, #4
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800634c:	2120      	movs	r1, #32
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f001 fbc4 	bl	8007adc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f001 f98a 	bl	800766e <I2C_Flush_TXDR>
 800635a:	e0ba      	b.n	80064d2 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	09db      	lsrs	r3, r3, #7
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b00      	cmp	r3, #0
 8006366:	d072      	beq.n	800644e <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	099b      	lsrs	r3, r3, #6
 800636c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006370:	2b00      	cmp	r3, #0
 8006372:	d06c      	beq.n	800644e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006382:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006388:	b29b      	uxth	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d04e      	beq.n	800642c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	b29b      	uxth	r3, r3
 8006396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800639a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	2bff      	cmp	r3, #255	@ 0xff
 80063a4:	d906      	bls.n	80063b4 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	22ff      	movs	r2, #255	@ 0xff
 80063aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80063ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063b0:	617b      	str	r3, [r7, #20]
 80063b2:	e010      	b.n	80063d6 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063c6:	d003      	beq.n	80063d0 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	e002      	b.n	80063d6 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80063d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063d4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	8a79      	ldrh	r1, [r7, #18]
 80063de:	2300      	movs	r3, #0
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f001 fb47 	bl	8007a78 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b22      	cmp	r3, #34	@ 0x22
 8006406:	d108      	bne.n	800641a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006416:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006418:	e05b      	b.n	80064d2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006428:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800642a:	e052      	b.n	80064d2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006436:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800643a:	d003      	beq.n	8006444 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 fbe9 	bl	8006c14 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006442:	e046      	b.n	80064d2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006444:	2140      	movs	r1, #64	@ 0x40
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 fffa 	bl	8007440 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800644c:	e041      	b.n	80064d2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	099b      	lsrs	r3, r3, #6
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d029      	beq.n	80064ae <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	099b      	lsrs	r3, r3, #6
 800645e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006462:	2b00      	cmp	r3, #0
 8006464:	d023      	beq.n	80064ae <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800646a:	b29b      	uxth	r3, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	d119      	bne.n	80064a4 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800647a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800647e:	d027      	beq.n	80064d0 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006484:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006488:	d108      	bne.n	800649c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006498:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800649a:	e019      	b.n	80064d0 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 fbb9 	bl	8006c14 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80064a2:	e015      	b.n	80064d0 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80064a4:	2140      	movs	r1, #64	@ 0x40
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 ffca 	bl	8007440 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80064ac:	e010      	b.n	80064d0 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00b      	beq.n	80064d2 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	095b      	lsrs	r3, r3, #5
 80064be:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d005      	beq.n	80064d2 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80064c6:	68b9      	ldr	r1, [r7, #8]
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 fc3f 	bl	8006d4c <I2C_ITMasterCplt>
 80064ce:	e000      	b.n	80064d2 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80064d0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b088      	sub	sp, #32
 80064e8:	af02      	add	r7, sp, #8
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80064f0:	4b92      	ldr	r3, [pc, #584]	@ (800673c <I2C_Mem_ISR_DMA+0x258>)
 80064f2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d101      	bne.n	8006502 <I2C_Mem_ISR_DMA+0x1e>
 80064fe:	2302      	movs	r3, #2
 8006500:	e118      	b.n	8006734 <I2C_Mem_ISR_DMA+0x250>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	091b      	lsrs	r3, r3, #4
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	d017      	beq.n	8006546 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	091b      	lsrs	r3, r3, #4
 800651a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800651e:	2b00      	cmp	r3, #0
 8006520:	d011      	beq.n	8006546 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2210      	movs	r2, #16
 8006528:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800652e:	f043 0204 	orr.w	r2, r3, #4
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006536:	2120      	movs	r1, #32
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f001 facf 	bl	8007adc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f001 f895 	bl	800766e <I2C_Flush_TXDR>
 8006544:	e0f1      	b.n	800672a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	085b      	lsrs	r3, r3, #1
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00f      	beq.n	8006572 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	085b      	lsrs	r3, r3, #1
 8006556:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800655a:	2b00      	cmp	r3, #0
 800655c:	d009      	beq.n	8006572 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006566:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f04f 32ff 	mov.w	r2, #4294967295
 800656e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006570:	e0db      	b.n	800672a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	09db      	lsrs	r3, r3, #7
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d060      	beq.n	8006640 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	099b      	lsrs	r3, r3, #6
 8006582:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006586:	2b00      	cmp	r3, #0
 8006588:	d05a      	beq.n	8006640 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800658a:	2101      	movs	r1, #1
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f001 fb29 	bl	8007be4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006592:	2110      	movs	r1, #16
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f001 faa1 	bl	8007adc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800659e:	b29b      	uxth	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d048      	beq.n	8006636 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	2bff      	cmp	r3, #255	@ 0xff
 80065ac:	d910      	bls.n	80065d0 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	22ff      	movs	r2, #255	@ 0xff
 80065b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065b8:	b299      	uxth	r1, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	2300      	movs	r3, #0
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f001 fa55 	bl	8007a78 <I2C_TransferConfig>
 80065ce:	e011      	b.n	80065f4 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065de:	b299      	uxth	r1, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	2300      	movs	r3, #0
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f001 fa42 	bl	8007a78 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b22      	cmp	r3, #34	@ 0x22
 8006610:	d108      	bne.n	8006624 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006620:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006622:	e082      	b.n	800672a <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006632:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006634:	e079      	b.n	800672a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006636:	2140      	movs	r1, #64	@ 0x40
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 ff01 	bl	8007440 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800663e:	e074      	b.n	800672a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	099b      	lsrs	r3, r3, #6
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d05e      	beq.n	800670a <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	099b      	lsrs	r3, r3, #6
 8006650:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006654:	2b00      	cmp	r3, #0
 8006656:	d058      	beq.n	800670a <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006658:	2101      	movs	r1, #1
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f001 fac2 	bl	8007be4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006660:	2110      	movs	r1, #16
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f001 fa3a 	bl	8007adc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b22      	cmp	r3, #34	@ 0x22
 8006672:	d101      	bne.n	8006678 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8006674:	4b32      	ldr	r3, [pc, #200]	@ (8006740 <I2C_Mem_ISR_DMA+0x25c>)
 8006676:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800667c:	b29b      	uxth	r3, r3
 800667e:	2bff      	cmp	r3, #255	@ 0xff
 8006680:	d910      	bls.n	80066a4 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	22ff      	movs	r2, #255	@ 0xff
 8006686:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800668c:	b299      	uxth	r1, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006692:	b2da      	uxtb	r2, r3
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f001 f9eb 	bl	8007a78 <I2C_TransferConfig>
 80066a2:	e011      	b.n	80066c8 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066b2:	b299      	uxth	r1, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f001 f9d8 	bl	8007a78 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b22      	cmp	r3, #34	@ 0x22
 80066e4:	d108      	bne.n	80066f8 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066f4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066f6:	e018      	b.n	800672a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006706:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006708:	e00f      	b.n	800672a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	095b      	lsrs	r3, r3, #5
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d009      	beq.n	800672a <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	095b      	lsrs	r3, r3, #5
 800671a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006722:	68b9      	ldr	r1, [r7, #8]
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 fb11 	bl	8006d4c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	80002000 	.word	0x80002000
 8006740:	80002400 	.word	0x80002400

08006744 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006754:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <I2C_Slave_ISR_DMA+0x24>
 8006764:	2302      	movs	r3, #2
 8006766:	e1cc      	b.n	8006b02 <I2C_Slave_ISR_DMA+0x3be>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	095b      	lsrs	r3, r3, #5
 8006774:	f003 0301 	and.w	r3, r3, #1
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00a      	beq.n	8006792 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006784:	2b00      	cmp	r3, #0
 8006786:	d004      	beq.n	8006792 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006788:	68b9      	ldr	r1, [r7, #8]
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 fba8 	bl	8006ee0 <I2C_ITSlaveCplt>
 8006790:	e1b2      	b.n	8006af8 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	091b      	lsrs	r3, r3, #4
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 819c 	beq.w	8006ad8 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	091b      	lsrs	r3, r3, #4
 80067a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 8195 	beq.w	8006ad8 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	0b9b      	lsrs	r3, r3, #14
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d106      	bne.n	80067c8 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	0bdb      	lsrs	r3, r3, #15
 80067be:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 8181 	beq.w	8006aca <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d07c      	beq.n	80068ca <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	0bdb      	lsrs	r3, r3, #15
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d076      	beq.n	80068ca <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a75      	ldr	r2, [pc, #468]	@ (80069b8 <I2C_Slave_ISR_DMA+0x274>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d059      	beq.n	800689c <I2C_Slave_ISR_DMA+0x158>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a73      	ldr	r2, [pc, #460]	@ (80069bc <I2C_Slave_ISR_DMA+0x278>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d053      	beq.n	800689c <I2C_Slave_ISR_DMA+0x158>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a71      	ldr	r2, [pc, #452]	@ (80069c0 <I2C_Slave_ISR_DMA+0x27c>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d04d      	beq.n	800689c <I2C_Slave_ISR_DMA+0x158>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a6f      	ldr	r2, [pc, #444]	@ (80069c4 <I2C_Slave_ISR_DMA+0x280>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d047      	beq.n	800689c <I2C_Slave_ISR_DMA+0x158>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a6d      	ldr	r2, [pc, #436]	@ (80069c8 <I2C_Slave_ISR_DMA+0x284>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d041      	beq.n	800689c <I2C_Slave_ISR_DMA+0x158>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a6b      	ldr	r2, [pc, #428]	@ (80069cc <I2C_Slave_ISR_DMA+0x288>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d03b      	beq.n	800689c <I2C_Slave_ISR_DMA+0x158>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a69      	ldr	r2, [pc, #420]	@ (80069d0 <I2C_Slave_ISR_DMA+0x28c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d035      	beq.n	800689c <I2C_Slave_ISR_DMA+0x158>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a67      	ldr	r2, [pc, #412]	@ (80069d4 <I2C_Slave_ISR_DMA+0x290>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d02f      	beq.n	800689c <I2C_Slave_ISR_DMA+0x158>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a65      	ldr	r2, [pc, #404]	@ (80069d8 <I2C_Slave_ISR_DMA+0x294>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d029      	beq.n	800689c <I2C_Slave_ISR_DMA+0x158>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a63      	ldr	r2, [pc, #396]	@ (80069dc <I2C_Slave_ISR_DMA+0x298>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d023      	beq.n	800689c <I2C_Slave_ISR_DMA+0x158>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a61      	ldr	r2, [pc, #388]	@ (80069e0 <I2C_Slave_ISR_DMA+0x29c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d01d      	beq.n	800689c <I2C_Slave_ISR_DMA+0x158>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a5f      	ldr	r2, [pc, #380]	@ (80069e4 <I2C_Slave_ISR_DMA+0x2a0>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d017      	beq.n	800689c <I2C_Slave_ISR_DMA+0x158>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a5d      	ldr	r2, [pc, #372]	@ (80069e8 <I2C_Slave_ISR_DMA+0x2a4>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d011      	beq.n	800689c <I2C_Slave_ISR_DMA+0x158>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a5b      	ldr	r2, [pc, #364]	@ (80069ec <I2C_Slave_ISR_DMA+0x2a8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d00b      	beq.n	800689c <I2C_Slave_ISR_DMA+0x158>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a59      	ldr	r2, [pc, #356]	@ (80069f0 <I2C_Slave_ISR_DMA+0x2ac>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d005      	beq.n	800689c <I2C_Slave_ISR_DMA+0x158>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a57      	ldr	r2, [pc, #348]	@ (80069f4 <I2C_Slave_ISR_DMA+0x2b0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d109      	bne.n	80068b0 <I2C_Slave_ISR_DMA+0x16c>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	bf0c      	ite	eq
 80068a8:	2301      	moveq	r3, #1
 80068aa:	2300      	movne	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	e008      	b.n	80068c2 <I2C_Slave_ISR_DMA+0x17e>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	bf0c      	ite	eq
 80068bc:	2301      	moveq	r3, #1
 80068be:	2300      	movne	r3, #0
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 80068c6:	2301      	movs	r3, #1
 80068c8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 809f 	beq.w	8006a12 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	0b9b      	lsrs	r3, r3, #14
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 8098 	beq.w	8006a12 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a33      	ldr	r2, [pc, #204]	@ (80069b8 <I2C_Slave_ISR_DMA+0x274>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d059      	beq.n	80069a2 <I2C_Slave_ISR_DMA+0x25e>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a31      	ldr	r2, [pc, #196]	@ (80069bc <I2C_Slave_ISR_DMA+0x278>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d053      	beq.n	80069a2 <I2C_Slave_ISR_DMA+0x25e>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a2f      	ldr	r2, [pc, #188]	@ (80069c0 <I2C_Slave_ISR_DMA+0x27c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d04d      	beq.n	80069a2 <I2C_Slave_ISR_DMA+0x25e>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a2d      	ldr	r2, [pc, #180]	@ (80069c4 <I2C_Slave_ISR_DMA+0x280>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d047      	beq.n	80069a2 <I2C_Slave_ISR_DMA+0x25e>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a2b      	ldr	r2, [pc, #172]	@ (80069c8 <I2C_Slave_ISR_DMA+0x284>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d041      	beq.n	80069a2 <I2C_Slave_ISR_DMA+0x25e>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a29      	ldr	r2, [pc, #164]	@ (80069cc <I2C_Slave_ISR_DMA+0x288>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d03b      	beq.n	80069a2 <I2C_Slave_ISR_DMA+0x25e>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a27      	ldr	r2, [pc, #156]	@ (80069d0 <I2C_Slave_ISR_DMA+0x28c>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d035      	beq.n	80069a2 <I2C_Slave_ISR_DMA+0x25e>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a25      	ldr	r2, [pc, #148]	@ (80069d4 <I2C_Slave_ISR_DMA+0x290>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d02f      	beq.n	80069a2 <I2C_Slave_ISR_DMA+0x25e>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a23      	ldr	r2, [pc, #140]	@ (80069d8 <I2C_Slave_ISR_DMA+0x294>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d029      	beq.n	80069a2 <I2C_Slave_ISR_DMA+0x25e>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a21      	ldr	r2, [pc, #132]	@ (80069dc <I2C_Slave_ISR_DMA+0x298>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d023      	beq.n	80069a2 <I2C_Slave_ISR_DMA+0x25e>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1f      	ldr	r2, [pc, #124]	@ (80069e0 <I2C_Slave_ISR_DMA+0x29c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d01d      	beq.n	80069a2 <I2C_Slave_ISR_DMA+0x25e>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a1d      	ldr	r2, [pc, #116]	@ (80069e4 <I2C_Slave_ISR_DMA+0x2a0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d017      	beq.n	80069a2 <I2C_Slave_ISR_DMA+0x25e>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a1b      	ldr	r2, [pc, #108]	@ (80069e8 <I2C_Slave_ISR_DMA+0x2a4>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d011      	beq.n	80069a2 <I2C_Slave_ISR_DMA+0x25e>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a19      	ldr	r2, [pc, #100]	@ (80069ec <I2C_Slave_ISR_DMA+0x2a8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d00b      	beq.n	80069a2 <I2C_Slave_ISR_DMA+0x25e>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a17      	ldr	r2, [pc, #92]	@ (80069f0 <I2C_Slave_ISR_DMA+0x2ac>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d005      	beq.n	80069a2 <I2C_Slave_ISR_DMA+0x25e>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a15      	ldr	r2, [pc, #84]	@ (80069f4 <I2C_Slave_ISR_DMA+0x2b0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d12a      	bne.n	80069f8 <I2C_Slave_ISR_DMA+0x2b4>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	bf0c      	ite	eq
 80069ae:	2301      	moveq	r3, #1
 80069b0:	2300      	movne	r3, #0
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	e029      	b.n	8006a0a <I2C_Slave_ISR_DMA+0x2c6>
 80069b6:	bf00      	nop
 80069b8:	40020010 	.word	0x40020010
 80069bc:	40020028 	.word	0x40020028
 80069c0:	40020040 	.word	0x40020040
 80069c4:	40020058 	.word	0x40020058
 80069c8:	40020070 	.word	0x40020070
 80069cc:	40020088 	.word	0x40020088
 80069d0:	400200a0 	.word	0x400200a0
 80069d4:	400200b8 	.word	0x400200b8
 80069d8:	40020410 	.word	0x40020410
 80069dc:	40020428 	.word	0x40020428
 80069e0:	40020440 	.word	0x40020440
 80069e4:	40020458 	.word	0x40020458
 80069e8:	40020470 	.word	0x40020470
 80069ec:	40020488 	.word	0x40020488
 80069f0:	400204a0 	.word	0x400204a0
 80069f4:	400204b8 	.word	0x400204b8
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	bf0c      	ite	eq
 8006a04:	2301      	moveq	r3, #1
 8006a06:	2300      	movne	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d128      	bne.n	8006a6a <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b28      	cmp	r3, #40	@ 0x28
 8006a22:	d108      	bne.n	8006a36 <I2C_Slave_ISR_DMA+0x2f2>
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a2a:	d104      	bne.n	8006a36 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 fcb0 	bl	8007394 <I2C_ITListenCplt>
 8006a34:	e048      	b.n	8006ac8 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b29      	cmp	r3, #41	@ 0x29
 8006a40:	d10e      	bne.n	8006a60 <I2C_Slave_ISR_DMA+0x31c>
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a48:	d00a      	beq.n	8006a60 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2210      	movs	r2, #16
 8006a50:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 fe0b 	bl	800766e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 f918 	bl	8006c8e <I2C_ITSlaveSeqCplt>
 8006a5e:	e033      	b.n	8006ac8 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2210      	movs	r2, #16
 8006a66:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006a68:	e034      	b.n	8006ad4 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2210      	movs	r2, #16
 8006a70:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a76:	f043 0204 	orr.w	r2, r3, #4
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a84:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <I2C_Slave_ISR_DMA+0x350>
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a92:	d11f      	bne.n	8006ad4 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
 8006a96:	2b21      	cmp	r3, #33	@ 0x21
 8006a98:	d002      	beq.n	8006aa0 <I2C_Slave_ISR_DMA+0x35c>
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
 8006a9c:	2b29      	cmp	r3, #41	@ 0x29
 8006a9e:	d103      	bne.n	8006aa8 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2221      	movs	r2, #33	@ 0x21
 8006aa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8006aa6:	e008      	b.n	8006aba <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	2b22      	cmp	r3, #34	@ 0x22
 8006aac:	d002      	beq.n	8006ab4 <I2C_Slave_ISR_DMA+0x370>
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
 8006ab0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ab2:	d102      	bne.n	8006aba <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2222      	movs	r2, #34	@ 0x22
 8006ab8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006abe:	4619      	mov	r1, r3
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 fcbd 	bl	8007440 <I2C_ITError>
      if (treatdmanack == 1U)
 8006ac6:	e005      	b.n	8006ad4 <I2C_Slave_ISR_DMA+0x390>
 8006ac8:	e004      	b.n	8006ad4 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2210      	movs	r2, #16
 8006ad0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006ad2:	e011      	b.n	8006af8 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 8006ad4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006ad6:	e00f      	b.n	8006af8 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	08db      	lsrs	r3, r3, #3
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d009      	beq.n	8006af8 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	08db      	lsrs	r3, r3, #3
 8006ae8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 f80a 	bl	8006b0c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3720      	adds	r7, #32
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop

08006b0c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006b22:	2b28      	cmp	r3, #40	@ 0x28
 8006b24:	d16a      	bne.n	8006bfc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	0c1b      	lsrs	r3, r3, #16
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	0c1b      	lsrs	r3, r3, #16
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006b44:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b52:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006b60:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d138      	bne.n	8006bdc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006b6a:	897b      	ldrh	r3, [r7, #10]
 8006b6c:	09db      	lsrs	r3, r3, #7
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	89bb      	ldrh	r3, [r7, #12]
 8006b72:	4053      	eors	r3, r2
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	f003 0306 	and.w	r3, r3, #6
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d11c      	bne.n	8006bb8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006b7e:	897b      	ldrh	r3, [r7, #10]
 8006b80:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d13b      	bne.n	8006c0c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2208      	movs	r2, #8
 8006ba0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006baa:	89ba      	ldrh	r2, [r7, #12]
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff f92c 	bl	8005e0e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006bb6:	e029      	b.n	8006c0c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006bb8:	893b      	ldrh	r3, [r7, #8]
 8006bba:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006bbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 f80f 	bl	8007be4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006bce:	89ba      	ldrh	r2, [r7, #12]
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff f91a 	bl	8005e0e <HAL_I2C_AddrCallback>
}
 8006bda:	e017      	b.n	8006c0c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006bdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 ffff 	bl	8007be4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006bee:	89ba      	ldrh	r2, [r7, #12]
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff f90a 	bl	8005e0e <HAL_I2C_AddrCallback>
}
 8006bfa:	e007      	b.n	8006c0c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2208      	movs	r2, #8
 8006c02:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006c0c:	bf00      	nop
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b21      	cmp	r3, #33	@ 0x21
 8006c2e:	d115      	bne.n	8006c5c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2211      	movs	r2, #17
 8006c3c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c44:	2101      	movs	r1, #1
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 ffcc 	bl	8007be4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff f8bc 	bl	8005dd2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006c5a:	e014      	b.n	8006c86 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2212      	movs	r2, #18
 8006c68:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006c70:	2102      	movs	r1, #2
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 ffb6 	bl	8007be4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7fa ff5d 	bl	8001b40 <HAL_I2C_MasterRxCpltCallback>
}
 8006c86:	bf00      	nop
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	0b9b      	lsrs	r3, r3, #14
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d008      	beq.n	8006cc4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	e00d      	b.n	8006ce0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	0bdb      	lsrs	r3, r3, #15
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d007      	beq.n	8006ce0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006cde:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b29      	cmp	r3, #41	@ 0x29
 8006cea:	d112      	bne.n	8006d12 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2228      	movs	r2, #40	@ 0x28
 8006cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2221      	movs	r2, #33	@ 0x21
 8006cf8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 ff71 	bl	8007be4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7ff f86b 	bl	8005de6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006d10:	e017      	b.n	8006d42 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d1c:	d111      	bne.n	8006d42 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2228      	movs	r2, #40	@ 0x28
 8006d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2222      	movs	r2, #34	@ 0x22
 8006d2a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006d2c:	2102      	movs	r1, #2
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 ff58 	bl	8007be4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7ff f85c 	bl	8005dfa <HAL_I2C_SlaveRxCpltCallback>
}
 8006d42:	bf00      	nop
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b21      	cmp	r3, #33	@ 0x21
 8006d6c:	d107      	bne.n	8006d7e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006d6e:	2101      	movs	r1, #1
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 ff37 	bl	8007be4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2211      	movs	r2, #17
 8006d7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d7c:	e00c      	b.n	8006d98 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b22      	cmp	r3, #34	@ 0x22
 8006d88:	d106      	bne.n	8006d98 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006d8a:	2102      	movs	r1, #2
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 ff29 	bl	8007be4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2212      	movs	r2, #18
 8006d96:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6859      	ldr	r1, [r3, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	4b4d      	ldr	r3, [pc, #308]	@ (8006ed8 <I2C_ITMasterCplt+0x18c>)
 8006da4:	400b      	ands	r3, r1
 8006da6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a4a      	ldr	r2, [pc, #296]	@ (8006edc <I2C_ITMasterCplt+0x190>)
 8006db2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	091b      	lsrs	r3, r3, #4
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d009      	beq.n	8006dd4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2210      	movs	r2, #16
 8006dc6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dcc:	f043 0204 	orr.w	r2, r3, #4
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b60      	cmp	r3, #96	@ 0x60
 8006dde:	d10b      	bne.n	8006df8 <I2C_ITMasterCplt+0xac>
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	089b      	lsrs	r3, r3, #2
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d005      	beq.n	8006df8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006df6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fc38 	bl	800766e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e02:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b60      	cmp	r3, #96	@ 0x60
 8006e0e:	d002      	beq.n	8006e16 <I2C_ITMasterCplt+0xca>
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d006      	beq.n	8006e24 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fb0f 	bl	8007440 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e22:	e054      	b.n	8006ece <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b21      	cmp	r3, #33	@ 0x21
 8006e2e:	d124      	bne.n	8006e7a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b40      	cmp	r3, #64	@ 0x40
 8006e48:	d10b      	bne.n	8006e62 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7fe ffef 	bl	8005e3e <HAL_I2C_MemTxCpltCallback>
}
 8006e60:	e035      	b.n	8006ece <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fe ffad 	bl	8005dd2 <HAL_I2C_MasterTxCpltCallback>
}
 8006e78:	e029      	b.n	8006ece <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b22      	cmp	r3, #34	@ 0x22
 8006e84:	d123      	bne.n	8006ece <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b40      	cmp	r3, #64	@ 0x40
 8006e9e:	d10b      	bne.n	8006eb8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7fe ffce 	bl	8005e52 <HAL_I2C_MemRxCpltCallback>
}
 8006eb6:	e00a      	b.n	8006ece <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f7fa fe39 	bl	8001b40 <HAL_I2C_MasterRxCpltCallback>
}
 8006ece:	bf00      	nop
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	fe00e800 	.word	0xfe00e800
 8006edc:	ffff0000 	.word	0xffff0000

08006ee0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efa:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f02:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f0c:	7afb      	ldrb	r3, [r7, #11]
 8006f0e:	2b21      	cmp	r3, #33	@ 0x21
 8006f10:	d002      	beq.n	8006f18 <I2C_ITSlaveCplt+0x38>
 8006f12:	7afb      	ldrb	r3, [r7, #11]
 8006f14:	2b29      	cmp	r3, #41	@ 0x29
 8006f16:	d108      	bne.n	8006f2a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006f18:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fe61 	bl	8007be4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2221      	movs	r2, #33	@ 0x21
 8006f26:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f28:	e019      	b.n	8006f5e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006f2a:	7afb      	ldrb	r3, [r7, #11]
 8006f2c:	2b22      	cmp	r3, #34	@ 0x22
 8006f2e:	d002      	beq.n	8006f36 <I2C_ITSlaveCplt+0x56>
 8006f30:	7afb      	ldrb	r3, [r7, #11]
 8006f32:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f34:	d108      	bne.n	8006f48 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006f36:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fe52 	bl	8007be4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2222      	movs	r2, #34	@ 0x22
 8006f44:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f46:	e00a      	b.n	8006f5e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006f48:	7afb      	ldrb	r3, [r7, #11]
 8006f4a:	2b28      	cmp	r3, #40	@ 0x28
 8006f4c:	d107      	bne.n	8006f5e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006f4e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fe46 	bl	8007be4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f6c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6859      	ldr	r1, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	4b80      	ldr	r3, [pc, #512]	@ (800717c <I2C_ITSlaveCplt+0x29c>)
 8006f7a:	400b      	ands	r3, r1
 8006f7c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fb75 	bl	800766e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	0b9b      	lsrs	r3, r3, #14
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d07a      	beq.n	8007086 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f9e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8112 	beq.w	80071ce <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a73      	ldr	r2, [pc, #460]	@ (8007180 <I2C_ITSlaveCplt+0x2a0>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d059      	beq.n	800706a <I2C_ITSlaveCplt+0x18a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a71      	ldr	r2, [pc, #452]	@ (8007184 <I2C_ITSlaveCplt+0x2a4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d053      	beq.n	800706a <I2C_ITSlaveCplt+0x18a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a6f      	ldr	r2, [pc, #444]	@ (8007188 <I2C_ITSlaveCplt+0x2a8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d04d      	beq.n	800706a <I2C_ITSlaveCplt+0x18a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a6d      	ldr	r2, [pc, #436]	@ (800718c <I2C_ITSlaveCplt+0x2ac>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d047      	beq.n	800706a <I2C_ITSlaveCplt+0x18a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a6b      	ldr	r2, [pc, #428]	@ (8007190 <I2C_ITSlaveCplt+0x2b0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d041      	beq.n	800706a <I2C_ITSlaveCplt+0x18a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a69      	ldr	r2, [pc, #420]	@ (8007194 <I2C_ITSlaveCplt+0x2b4>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d03b      	beq.n	800706a <I2C_ITSlaveCplt+0x18a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a67      	ldr	r2, [pc, #412]	@ (8007198 <I2C_ITSlaveCplt+0x2b8>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d035      	beq.n	800706a <I2C_ITSlaveCplt+0x18a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a65      	ldr	r2, [pc, #404]	@ (800719c <I2C_ITSlaveCplt+0x2bc>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d02f      	beq.n	800706a <I2C_ITSlaveCplt+0x18a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a63      	ldr	r2, [pc, #396]	@ (80071a0 <I2C_ITSlaveCplt+0x2c0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d029      	beq.n	800706a <I2C_ITSlaveCplt+0x18a>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a61      	ldr	r2, [pc, #388]	@ (80071a4 <I2C_ITSlaveCplt+0x2c4>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d023      	beq.n	800706a <I2C_ITSlaveCplt+0x18a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a5f      	ldr	r2, [pc, #380]	@ (80071a8 <I2C_ITSlaveCplt+0x2c8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d01d      	beq.n	800706a <I2C_ITSlaveCplt+0x18a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a5d      	ldr	r2, [pc, #372]	@ (80071ac <I2C_ITSlaveCplt+0x2cc>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d017      	beq.n	800706a <I2C_ITSlaveCplt+0x18a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a5b      	ldr	r2, [pc, #364]	@ (80071b0 <I2C_ITSlaveCplt+0x2d0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d011      	beq.n	800706a <I2C_ITSlaveCplt+0x18a>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a59      	ldr	r2, [pc, #356]	@ (80071b4 <I2C_ITSlaveCplt+0x2d4>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d00b      	beq.n	800706a <I2C_ITSlaveCplt+0x18a>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a57      	ldr	r2, [pc, #348]	@ (80071b8 <I2C_ITSlaveCplt+0x2d8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d005      	beq.n	800706a <I2C_ITSlaveCplt+0x18a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a55      	ldr	r2, [pc, #340]	@ (80071bc <I2C_ITSlaveCplt+0x2dc>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d105      	bne.n	8007076 <I2C_ITSlaveCplt+0x196>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	b29b      	uxth	r3, r3
 8007074:	e004      	b.n	8007080 <I2C_ITSlaveCplt+0x1a0>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	b29b      	uxth	r3, r3
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8007084:	e0a3      	b.n	80071ce <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	0bdb      	lsrs	r3, r3, #15
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 809d 	beq.w	80071ce <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80070a2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 8090 	beq.w	80071ce <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a32      	ldr	r2, [pc, #200]	@ (8007180 <I2C_ITSlaveCplt+0x2a0>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d059      	beq.n	800716e <I2C_ITSlaveCplt+0x28e>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a30      	ldr	r2, [pc, #192]	@ (8007184 <I2C_ITSlaveCplt+0x2a4>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d053      	beq.n	800716e <I2C_ITSlaveCplt+0x28e>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a2e      	ldr	r2, [pc, #184]	@ (8007188 <I2C_ITSlaveCplt+0x2a8>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d04d      	beq.n	800716e <I2C_ITSlaveCplt+0x28e>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a2c      	ldr	r2, [pc, #176]	@ (800718c <I2C_ITSlaveCplt+0x2ac>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d047      	beq.n	800716e <I2C_ITSlaveCplt+0x28e>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a2a      	ldr	r2, [pc, #168]	@ (8007190 <I2C_ITSlaveCplt+0x2b0>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d041      	beq.n	800716e <I2C_ITSlaveCplt+0x28e>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a28      	ldr	r2, [pc, #160]	@ (8007194 <I2C_ITSlaveCplt+0x2b4>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d03b      	beq.n	800716e <I2C_ITSlaveCplt+0x28e>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a26      	ldr	r2, [pc, #152]	@ (8007198 <I2C_ITSlaveCplt+0x2b8>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d035      	beq.n	800716e <I2C_ITSlaveCplt+0x28e>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a24      	ldr	r2, [pc, #144]	@ (800719c <I2C_ITSlaveCplt+0x2bc>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d02f      	beq.n	800716e <I2C_ITSlaveCplt+0x28e>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a22      	ldr	r2, [pc, #136]	@ (80071a0 <I2C_ITSlaveCplt+0x2c0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d029      	beq.n	800716e <I2C_ITSlaveCplt+0x28e>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a20      	ldr	r2, [pc, #128]	@ (80071a4 <I2C_ITSlaveCplt+0x2c4>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d023      	beq.n	800716e <I2C_ITSlaveCplt+0x28e>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a1e      	ldr	r2, [pc, #120]	@ (80071a8 <I2C_ITSlaveCplt+0x2c8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d01d      	beq.n	800716e <I2C_ITSlaveCplt+0x28e>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a1c      	ldr	r2, [pc, #112]	@ (80071ac <I2C_ITSlaveCplt+0x2cc>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d017      	beq.n	800716e <I2C_ITSlaveCplt+0x28e>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a1a      	ldr	r2, [pc, #104]	@ (80071b0 <I2C_ITSlaveCplt+0x2d0>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d011      	beq.n	800716e <I2C_ITSlaveCplt+0x28e>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a18      	ldr	r2, [pc, #96]	@ (80071b4 <I2C_ITSlaveCplt+0x2d4>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d00b      	beq.n	800716e <I2C_ITSlaveCplt+0x28e>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a16      	ldr	r2, [pc, #88]	@ (80071b8 <I2C_ITSlaveCplt+0x2d8>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d005      	beq.n	800716e <I2C_ITSlaveCplt+0x28e>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a14      	ldr	r2, [pc, #80]	@ (80071bc <I2C_ITSlaveCplt+0x2dc>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d128      	bne.n	80071c0 <I2C_ITSlaveCplt+0x2e0>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	b29b      	uxth	r3, r3
 8007178:	e027      	b.n	80071ca <I2C_ITSlaveCplt+0x2ea>
 800717a:	bf00      	nop
 800717c:	fe00e800 	.word	0xfe00e800
 8007180:	40020010 	.word	0x40020010
 8007184:	40020028 	.word	0x40020028
 8007188:	40020040 	.word	0x40020040
 800718c:	40020058 	.word	0x40020058
 8007190:	40020070 	.word	0x40020070
 8007194:	40020088 	.word	0x40020088
 8007198:	400200a0 	.word	0x400200a0
 800719c:	400200b8 	.word	0x400200b8
 80071a0:	40020410 	.word	0x40020410
 80071a4:	40020428 	.word	0x40020428
 80071a8:	40020440 	.word	0x40020440
 80071ac:	40020458 	.word	0x40020458
 80071b0:	40020470 	.word	0x40020470
 80071b4:	40020488 	.word	0x40020488
 80071b8:	400204a0 	.word	0x400204a0
 80071bc:	400204b8 	.word	0x400204b8
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	089b      	lsrs	r3, r3, #2
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d020      	beq.n	800721c <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f023 0304 	bic.w	r3, r3, #4
 80071e0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ec:	b2d2      	uxtb	r2, r2
 80071ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00c      	beq.n	800721c <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007206:	3b01      	subs	r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007212:	b29b      	uxth	r3, r3
 8007214:	3b01      	subs	r3, #1
 8007216:	b29a      	uxth	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007220:	b29b      	uxth	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d005      	beq.n	8007232 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800722a:	f043 0204 	orr.w	r2, r3, #4
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	091b      	lsrs	r3, r3, #4
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	d04a      	beq.n	80072d4 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	091b      	lsrs	r3, r3, #4
 8007242:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007246:	2b00      	cmp	r3, #0
 8007248:	d044      	beq.n	80072d4 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800724e:	b29b      	uxth	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	d128      	bne.n	80072a6 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b28      	cmp	r3, #40	@ 0x28
 800725e:	d108      	bne.n	8007272 <I2C_ITSlaveCplt+0x392>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007266:	d104      	bne.n	8007272 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007268:	6979      	ldr	r1, [r7, #20]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f892 	bl	8007394 <I2C_ITListenCplt>
 8007270:	e030      	b.n	80072d4 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b29      	cmp	r3, #41	@ 0x29
 800727c:	d10e      	bne.n	800729c <I2C_ITSlaveCplt+0x3bc>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007284:	d00a      	beq.n	800729c <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2210      	movs	r2, #16
 800728c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f9ed 	bl	800766e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7ff fcfa 	bl	8006c8e <I2C_ITSlaveSeqCplt>
 800729a:	e01b      	b.n	80072d4 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2210      	movs	r2, #16
 80072a2:	61da      	str	r2, [r3, #28]
 80072a4:	e016      	b.n	80072d4 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2210      	movs	r2, #16
 80072ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072b2:	f043 0204 	orr.w	r2, r3, #4
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <I2C_ITSlaveCplt+0x3e8>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072c6:	d105      	bne.n	80072d4 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072cc:	4619      	mov	r1, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f8b6 	bl	8007440 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d010      	beq.n	800730c <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f8a5 	bl	8007440 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b28      	cmp	r3, #40	@ 0x28
 8007300:	d141      	bne.n	8007386 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007302:	6979      	ldr	r1, [r7, #20]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f845 	bl	8007394 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800730a:	e03c      	b.n	8007386 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007310:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007314:	d014      	beq.n	8007340 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff fcb9 	bl	8006c8e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a1c      	ldr	r2, [pc, #112]	@ (8007390 <I2C_ITSlaveCplt+0x4b0>)
 8007320:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2220      	movs	r2, #32
 8007326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7fe fd76 	bl	8005e2a <HAL_I2C_ListenCpltCallback>
}
 800733e:	e022      	b.n	8007386 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b22      	cmp	r3, #34	@ 0x22
 800734a:	d10e      	bne.n	800736a <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2220      	movs	r2, #32
 8007350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fe fd49 	bl	8005dfa <HAL_I2C_SlaveRxCpltCallback>
}
 8007368:	e00d      	b.n	8007386 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2220      	movs	r2, #32
 800736e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7fe fd30 	bl	8005de6 <HAL_I2C_SlaveTxCpltCallback>
}
 8007386:	bf00      	nop
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	ffff0000 	.word	0xffff0000

08007394 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a26      	ldr	r2, [pc, #152]	@ (800743c <I2C_ITListenCplt+0xa8>)
 80073a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2220      	movs	r2, #32
 80073ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	089b      	lsrs	r3, r3, #2
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d022      	beq.n	8007412 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d012      	beq.n	8007412 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	b29a      	uxth	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800740a:	f043 0204 	orr.w	r2, r3, #4
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007412:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fbe4 	bl	8007be4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2210      	movs	r2, #16
 8007422:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7fe fcfc 	bl	8005e2a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	ffff0000 	.word	0xffff0000

08007440 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007450:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a6d      	ldr	r2, [pc, #436]	@ (8007614 <I2C_ITError+0x1d4>)
 800745e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	431a      	orrs	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007472:	7bfb      	ldrb	r3, [r7, #15]
 8007474:	2b28      	cmp	r3, #40	@ 0x28
 8007476:	d005      	beq.n	8007484 <I2C_ITError+0x44>
 8007478:	7bfb      	ldrb	r3, [r7, #15]
 800747a:	2b29      	cmp	r3, #41	@ 0x29
 800747c:	d002      	beq.n	8007484 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800747e:	7bfb      	ldrb	r3, [r7, #15]
 8007480:	2b2a      	cmp	r3, #42	@ 0x2a
 8007482:	d10b      	bne.n	800749c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007484:	2103      	movs	r1, #3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fbac 	bl	8007be4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2228      	movs	r2, #40	@ 0x28
 8007490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a60      	ldr	r2, [pc, #384]	@ (8007618 <I2C_ITError+0x1d8>)
 8007498:	635a      	str	r2, [r3, #52]	@ 0x34
 800749a:	e030      	b.n	80074fe <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800749c:	f248 0103 	movw	r1, #32771	@ 0x8003
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fb9f 	bl	8007be4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f8e1 	bl	800766e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b60      	cmp	r3, #96	@ 0x60
 80074b6:	d01f      	beq.n	80074f8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	d114      	bne.n	80074f8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	f003 0310 	and.w	r3, r3, #16
 80074d8:	2b10      	cmp	r3, #16
 80074da:	d109      	bne.n	80074f0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2210      	movs	r2, #16
 80074e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e8:	f043 0204 	orr.w	r2, r3, #4
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2220      	movs	r2, #32
 80074f6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007502:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007508:	2b00      	cmp	r3, #0
 800750a:	d039      	beq.n	8007580 <I2C_ITError+0x140>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b11      	cmp	r3, #17
 8007510:	d002      	beq.n	8007518 <I2C_ITError+0xd8>
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b21      	cmp	r3, #33	@ 0x21
 8007516:	d133      	bne.n	8007580 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007522:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007526:	d107      	bne.n	8007538 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007536:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753c:	4618      	mov	r0, r3
 800753e:	f7fd fe95 	bl	800526c <HAL_DMA_GetState>
 8007542:	4603      	mov	r3, r0
 8007544:	2b01      	cmp	r3, #1
 8007546:	d017      	beq.n	8007578 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800754c:	4a33      	ldr	r2, [pc, #204]	@ (800761c <I2C_ITError+0x1dc>)
 800754e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755c:	4618      	mov	r0, r3
 800755e:	f7fd fc3f 	bl	8004de0 <HAL_DMA_Abort_IT>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d04d      	beq.n	8007604 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800756c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007572:	4610      	mov	r0, r2
 8007574:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007576:	e045      	b.n	8007604 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f851 	bl	8007620 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800757e:	e041      	b.n	8007604 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007584:	2b00      	cmp	r3, #0
 8007586:	d039      	beq.n	80075fc <I2C_ITError+0x1bc>
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2b12      	cmp	r3, #18
 800758c:	d002      	beq.n	8007594 <I2C_ITError+0x154>
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b22      	cmp	r3, #34	@ 0x22
 8007592:	d133      	bne.n	80075fc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800759e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075a2:	d107      	bne.n	80075b4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80075b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fd fe57 	bl	800526c <HAL_DMA_GetState>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d017      	beq.n	80075f4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075c8:	4a14      	ldr	r2, [pc, #80]	@ (800761c <I2C_ITError+0x1dc>)
 80075ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fd fc01 	bl	8004de0 <HAL_DMA_Abort_IT>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d011      	beq.n	8007608 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80075ee:	4610      	mov	r0, r2
 80075f0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075f2:	e009      	b.n	8007608 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f813 	bl	8007620 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075fa:	e005      	b.n	8007608 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f80f 	bl	8007620 <I2C_TreatErrorCallback>
  }
}
 8007602:	e002      	b.n	800760a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007604:	bf00      	nop
 8007606:	e000      	b.n	800760a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007608:	bf00      	nop
}
 800760a:	bf00      	nop
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	ffff0000 	.word	0xffff0000
 8007618:	080060f7 	.word	0x080060f7
 800761c:	080076b7 	.word	0x080076b7

08007620 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b60      	cmp	r3, #96	@ 0x60
 8007632:	d10e      	bne.n	8007652 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2220      	movs	r2, #32
 8007638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7fe fc15 	bl	8005e7a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007650:	e009      	b.n	8007666 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7fe fc00 	bl	8005e66 <HAL_I2C_ErrorCallback>
}
 8007666:	bf00      	nop
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b02      	cmp	r3, #2
 8007682:	d103      	bne.n	800768c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2200      	movs	r2, #0
 800768a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b01      	cmp	r3, #1
 8007698:	d007      	beq.n	80076aa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	699a      	ldr	r2, [r3, #24]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f042 0201 	orr.w	r2, r2, #1
 80076a8:	619a      	str	r2, [r3, #24]
  }
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d0:	2200      	movs	r2, #0
 80076d2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e0:	2200      	movs	r2, #0
 80076e2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f7ff ff9b 	bl	8007620 <I2C_TreatErrorCallback>
}
 80076ea:	bf00      	nop
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	60f8      	str	r0, [r7, #12]
 80076fa:	60b9      	str	r1, [r7, #8]
 80076fc:	603b      	str	r3, [r7, #0]
 80076fe:	4613      	mov	r3, r2
 8007700:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007702:	e03b      	b.n	800777c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f000 f8d5 	bl	80078b8 <I2C_IsErrorOccurred>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e041      	b.n	800779c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771e:	d02d      	beq.n	800777c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007720:	f7fb f87e 	bl	8002820 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d302      	bcc.n	8007736 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d122      	bne.n	800777c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	699a      	ldr	r2, [r3, #24]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	4013      	ands	r3, r2
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	429a      	cmp	r2, r3
 8007744:	bf0c      	ite	eq
 8007746:	2301      	moveq	r3, #1
 8007748:	2300      	movne	r3, #0
 800774a:	b2db      	uxtb	r3, r3
 800774c:	461a      	mov	r2, r3
 800774e:	79fb      	ldrb	r3, [r7, #7]
 8007750:	429a      	cmp	r2, r3
 8007752:	d113      	bne.n	800777c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007758:	f043 0220 	orr.w	r2, r3, #32
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2220      	movs	r2, #32
 8007764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e00f      	b.n	800779c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699a      	ldr	r2, [r3, #24]
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	4013      	ands	r3, r2
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	429a      	cmp	r2, r3
 800778a:	bf0c      	ite	eq
 800778c:	2301      	moveq	r3, #1
 800778e:	2300      	movne	r3, #0
 8007790:	b2db      	uxtb	r3, r3
 8007792:	461a      	mov	r2, r3
 8007794:	79fb      	ldrb	r3, [r7, #7]
 8007796:	429a      	cmp	r2, r3
 8007798:	d0b4      	beq.n	8007704 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80077b0:	e033      	b.n	800781a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	68b9      	ldr	r1, [r7, #8]
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 f87e 	bl	80078b8 <I2C_IsErrorOccurred>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e031      	b.n	800782a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077cc:	d025      	beq.n	800781a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ce:	f7fb f827 	bl	8002820 <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d302      	bcc.n	80077e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d11a      	bne.n	800781a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d013      	beq.n	800781a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f6:	f043 0220 	orr.w	r2, r3, #32
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2220      	movs	r2, #32
 8007802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e007      	b.n	800782a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	f003 0302 	and.w	r3, r3, #2
 8007824:	2b02      	cmp	r3, #2
 8007826:	d1c4      	bne.n	80077b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800783e:	e02f      	b.n	80078a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	68b9      	ldr	r1, [r7, #8]
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 f837 	bl	80078b8 <I2C_IsErrorOccurred>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e02d      	b.n	80078b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007854:	f7fa ffe4 	bl	8002820 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	429a      	cmp	r2, r3
 8007862:	d302      	bcc.n	800786a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d11a      	bne.n	80078a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	f003 0320 	and.w	r3, r3, #32
 8007874:	2b20      	cmp	r3, #32
 8007876:	d013      	beq.n	80078a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800787c:	f043 0220 	orr.w	r2, r3, #32
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2220      	movs	r2, #32
 8007888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e007      	b.n	80078b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	f003 0320 	and.w	r3, r3, #32
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	d1c8      	bne.n	8007840 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08a      	sub	sp, #40	@ 0x28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80078d2:	2300      	movs	r3, #0
 80078d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	f003 0310 	and.w	r3, r3, #16
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d068      	beq.n	80079b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2210      	movs	r2, #16
 80078ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80078ec:	e049      	b.n	8007982 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f4:	d045      	beq.n	8007982 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80078f6:	f7fa ff93 	bl	8002820 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	429a      	cmp	r2, r3
 8007904:	d302      	bcc.n	800790c <I2C_IsErrorOccurred+0x54>
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d13a      	bne.n	8007982 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007916:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800791e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800792a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800792e:	d121      	bne.n	8007974 <I2C_IsErrorOccurred+0xbc>
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007936:	d01d      	beq.n	8007974 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007938:	7cfb      	ldrb	r3, [r7, #19]
 800793a:	2b20      	cmp	r3, #32
 800793c:	d01a      	beq.n	8007974 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800794c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800794e:	f7fa ff67 	bl	8002820 <HAL_GetTick>
 8007952:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007954:	e00e      	b.n	8007974 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007956:	f7fa ff63 	bl	8002820 <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	2b19      	cmp	r3, #25
 8007962:	d907      	bls.n	8007974 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	f043 0320 	orr.w	r3, r3, #32
 800796a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007972:	e006      	b.n	8007982 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	f003 0320 	and.w	r3, r3, #32
 800797e:	2b20      	cmp	r3, #32
 8007980:	d1e9      	bne.n	8007956 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	f003 0320 	and.w	r3, r3, #32
 800798c:	2b20      	cmp	r3, #32
 800798e:	d003      	beq.n	8007998 <I2C_IsErrorOccurred+0xe0>
 8007990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007994:	2b00      	cmp	r3, #0
 8007996:	d0aa      	beq.n	80078ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800799c:	2b00      	cmp	r3, #0
 800799e:	d103      	bne.n	80079a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2220      	movs	r2, #32
 80079a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80079a8:	6a3b      	ldr	r3, [r7, #32]
 80079aa:	f043 0304 	orr.w	r3, r3, #4
 80079ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00b      	beq.n	80079e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	f043 0301 	orr.w	r3, r3, #1
 80079ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80079d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00b      	beq.n	8007a02 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	f043 0308 	orr.w	r3, r3, #8
 80079f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80079fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00b      	beq.n	8007a24 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	f043 0302 	orr.w	r3, r3, #2
 8007a12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007a24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d01c      	beq.n	8007a66 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f7ff fe1e 	bl	800766e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6859      	ldr	r1, [r3, #4]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8007a74 <I2C_IsErrorOccurred+0x1bc>)
 8007a3e:	400b      	ands	r3, r1
 8007a40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	431a      	orrs	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007a66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3728      	adds	r7, #40	@ 0x28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	fe00e800 	.word	0xfe00e800

08007a78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	607b      	str	r3, [r7, #4]
 8007a82:	460b      	mov	r3, r1
 8007a84:	817b      	strh	r3, [r7, #10]
 8007a86:	4613      	mov	r3, r2
 8007a88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a8a:	897b      	ldrh	r3, [r7, #10]
 8007a8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007a90:	7a7b      	ldrb	r3, [r7, #9]
 8007a92:	041b      	lsls	r3, r3, #16
 8007a94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a98:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a9e:	6a3b      	ldr	r3, [r7, #32]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007aa6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	0d5b      	lsrs	r3, r3, #21
 8007ab2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007ab6:	4b08      	ldr	r3, [pc, #32]	@ (8007ad8 <I2C_TransferConfig+0x60>)
 8007ab8:	430b      	orrs	r3, r1
 8007aba:	43db      	mvns	r3, r3
 8007abc:	ea02 0103 	and.w	r1, r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007aca:	bf00      	nop
 8007acc:	371c      	adds	r7, #28
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	03ff63ff 	.word	0x03ff63ff

08007adc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007af0:	4a39      	ldr	r2, [pc, #228]	@ (8007bd8 <I2C_Enable_IRQ+0xfc>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d032      	beq.n	8007b5c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007afa:	4a38      	ldr	r2, [pc, #224]	@ (8007bdc <I2C_Enable_IRQ+0x100>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d02d      	beq.n	8007b5c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007b04:	4a36      	ldr	r2, [pc, #216]	@ (8007be0 <I2C_Enable_IRQ+0x104>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d028      	beq.n	8007b5c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007b0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	da03      	bge.n	8007b1a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007b18:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007b1a:	887b      	ldrh	r3, [r7, #2]
 8007b1c:	f003 0301 	and.w	r3, r3, #1
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d003      	beq.n	8007b2c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007b2a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007b2c:	887b      	ldrh	r3, [r7, #2]
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007b3c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007b3e:	887b      	ldrh	r3, [r7, #2]
 8007b40:	2b10      	cmp	r3, #16
 8007b42:	d103      	bne.n	8007b4c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007b4a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b4c:	887b      	ldrh	r3, [r7, #2]
 8007b4e:	2b20      	cmp	r3, #32
 8007b50:	d133      	bne.n	8007bba <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f043 0320 	orr.w	r3, r3, #32
 8007b58:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b5a:	e02e      	b.n	8007bba <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007b5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	da03      	bge.n	8007b6c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007b6a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007b6c:	887b      	ldrh	r3, [r7, #2]
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007b7c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007b7e:	887b      	ldrh	r3, [r7, #2]
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d003      	beq.n	8007b90 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007b8e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007b90:	887b      	ldrh	r3, [r7, #2]
 8007b92:	2b10      	cmp	r3, #16
 8007b94:	d103      	bne.n	8007b9e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007b9c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b9e:	887b      	ldrh	r3, [r7, #2]
 8007ba0:	2b20      	cmp	r3, #32
 8007ba2:	d103      	bne.n	8007bac <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007baa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007bac:	887b      	ldrh	r3, [r7, #2]
 8007bae:	2b40      	cmp	r3, #64	@ 0x40
 8007bb0:	d103      	bne.n	8007bba <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bb8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6819      	ldr	r1, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	601a      	str	r2, [r3, #0]
}
 8007bca:	bf00      	nop
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	080062ff 	.word	0x080062ff
 8007bdc:	08006745 	.word	0x08006745
 8007be0:	080064e5 	.word	0x080064e5

08007be4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007bf4:	887b      	ldrh	r3, [r7, #2]
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00f      	beq.n	8007c1e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007c04:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007c12:	2b28      	cmp	r3, #40	@ 0x28
 8007c14:	d003      	beq.n	8007c1e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007c1c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007c1e:	887b      	ldrh	r3, [r7, #2]
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00f      	beq.n	8007c48 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007c2e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007c3c:	2b28      	cmp	r3, #40	@ 0x28
 8007c3e:	d003      	beq.n	8007c48 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007c46:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007c48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	da03      	bge.n	8007c58 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007c56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007c58:	887b      	ldrh	r3, [r7, #2]
 8007c5a:	2b10      	cmp	r3, #16
 8007c5c:	d103      	bne.n	8007c66 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007c64:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007c66:	887b      	ldrh	r3, [r7, #2]
 8007c68:	2b20      	cmp	r3, #32
 8007c6a:	d103      	bne.n	8007c74 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f043 0320 	orr.w	r3, r3, #32
 8007c72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007c74:	887b      	ldrh	r3, [r7, #2]
 8007c76:	2b40      	cmp	r3, #64	@ 0x40
 8007c78:	d103      	bne.n	8007c82 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c80:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6819      	ldr	r1, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	43da      	mvns	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	400a      	ands	r2, r1
 8007c92:	601a      	str	r2, [r3, #0]
}
 8007c94:	bf00      	nop
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b20      	cmp	r3, #32
 8007cb4:	d138      	bne.n	8007d28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d101      	bne.n	8007cc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	e032      	b.n	8007d2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2224      	movs	r2, #36	@ 0x24
 8007cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0201 	bic.w	r2, r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007cf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6819      	ldr	r1, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	430a      	orrs	r2, r1
 8007d02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f042 0201 	orr.w	r2, r2, #1
 8007d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	e000      	b.n	8007d2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d28:	2302      	movs	r3, #2
  }
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b085      	sub	sp, #20
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	d139      	bne.n	8007dc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d101      	bne.n	8007d5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e033      	b.n	8007dc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2224      	movs	r2, #36	@ 0x24
 8007d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f022 0201 	bic.w	r2, r2, #1
 8007d78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007d88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	021b      	lsls	r3, r3, #8
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0201 	orr.w	r2, r2, #1
 8007daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2220      	movs	r2, #32
 8007db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	e000      	b.n	8007dc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007dc0:	2302      	movs	r3, #2
  }
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
	...

08007dd0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007dd8:	4b19      	ldr	r3, [pc, #100]	@ (8007e40 <HAL_PWREx_ConfigSupply+0x70>)
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	f003 0304 	and.w	r3, r3, #4
 8007de0:	2b04      	cmp	r3, #4
 8007de2:	d00a      	beq.n	8007dfa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007de4:	4b16      	ldr	r3, [pc, #88]	@ (8007e40 <HAL_PWREx_ConfigSupply+0x70>)
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	f003 0307 	and.w	r3, r3, #7
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d001      	beq.n	8007df6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e01f      	b.n	8007e36 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	e01d      	b.n	8007e36 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007dfa:	4b11      	ldr	r3, [pc, #68]	@ (8007e40 <HAL_PWREx_ConfigSupply+0x70>)
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f023 0207 	bic.w	r2, r3, #7
 8007e02:	490f      	ldr	r1, [pc, #60]	@ (8007e40 <HAL_PWREx_ConfigSupply+0x70>)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007e0a:	f7fa fd09 	bl	8002820 <HAL_GetTick>
 8007e0e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e10:	e009      	b.n	8007e26 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007e12:	f7fa fd05 	bl	8002820 <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e20:	d901      	bls.n	8007e26 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e007      	b.n	8007e36 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e26:	4b06      	ldr	r3, [pc, #24]	@ (8007e40 <HAL_PWREx_ConfigSupply+0x70>)
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e32:	d1ee      	bne.n	8007e12 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	58024800 	.word	0x58024800

08007e44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b08c      	sub	sp, #48	@ 0x30
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e3c8      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 8087 	beq.w	8007f72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e64:	4b88      	ldr	r3, [pc, #544]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e6e:	4b86      	ldr	r3, [pc, #536]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e72:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e76:	2b10      	cmp	r3, #16
 8007e78:	d007      	beq.n	8007e8a <HAL_RCC_OscConfig+0x46>
 8007e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e7c:	2b18      	cmp	r3, #24
 8007e7e:	d110      	bne.n	8007ea2 <HAL_RCC_OscConfig+0x5e>
 8007e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e82:	f003 0303 	and.w	r3, r3, #3
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d10b      	bne.n	8007ea2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e8a:	4b7f      	ldr	r3, [pc, #508]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d06c      	beq.n	8007f70 <HAL_RCC_OscConfig+0x12c>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d168      	bne.n	8007f70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e3a2      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eaa:	d106      	bne.n	8007eba <HAL_RCC_OscConfig+0x76>
 8007eac:	4b76      	ldr	r3, [pc, #472]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a75      	ldr	r2, [pc, #468]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007eb6:	6013      	str	r3, [r2, #0]
 8007eb8:	e02e      	b.n	8007f18 <HAL_RCC_OscConfig+0xd4>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10c      	bne.n	8007edc <HAL_RCC_OscConfig+0x98>
 8007ec2:	4b71      	ldr	r3, [pc, #452]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a70      	ldr	r2, [pc, #448]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007ec8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ecc:	6013      	str	r3, [r2, #0]
 8007ece:	4b6e      	ldr	r3, [pc, #440]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a6d      	ldr	r2, [pc, #436]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007ed4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ed8:	6013      	str	r3, [r2, #0]
 8007eda:	e01d      	b.n	8007f18 <HAL_RCC_OscConfig+0xd4>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ee4:	d10c      	bne.n	8007f00 <HAL_RCC_OscConfig+0xbc>
 8007ee6:	4b68      	ldr	r3, [pc, #416]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a67      	ldr	r2, [pc, #412]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007eec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ef0:	6013      	str	r3, [r2, #0]
 8007ef2:	4b65      	ldr	r3, [pc, #404]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a64      	ldr	r2, [pc, #400]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007ef8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007efc:	6013      	str	r3, [r2, #0]
 8007efe:	e00b      	b.n	8007f18 <HAL_RCC_OscConfig+0xd4>
 8007f00:	4b61      	ldr	r3, [pc, #388]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a60      	ldr	r2, [pc, #384]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007f06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f0a:	6013      	str	r3, [r2, #0]
 8007f0c:	4b5e      	ldr	r3, [pc, #376]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a5d      	ldr	r2, [pc, #372]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007f12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d013      	beq.n	8007f48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f20:	f7fa fc7e 	bl	8002820 <HAL_GetTick>
 8007f24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f26:	e008      	b.n	8007f3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f28:	f7fa fc7a 	bl	8002820 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b64      	cmp	r3, #100	@ 0x64
 8007f34:	d901      	bls.n	8007f3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e356      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f3a:	4b53      	ldr	r3, [pc, #332]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0f0      	beq.n	8007f28 <HAL_RCC_OscConfig+0xe4>
 8007f46:	e014      	b.n	8007f72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f48:	f7fa fc6a 	bl	8002820 <HAL_GetTick>
 8007f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f4e:	e008      	b.n	8007f62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f50:	f7fa fc66 	bl	8002820 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2b64      	cmp	r3, #100	@ 0x64
 8007f5c:	d901      	bls.n	8007f62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e342      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f62:	4b49      	ldr	r3, [pc, #292]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1f0      	bne.n	8007f50 <HAL_RCC_OscConfig+0x10c>
 8007f6e:	e000      	b.n	8007f72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f000 808c 	beq.w	8008098 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f80:	4b41      	ldr	r3, [pc, #260]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f88:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f8a:	4b3f      	ldr	r3, [pc, #252]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f8e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d007      	beq.n	8007fa6 <HAL_RCC_OscConfig+0x162>
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	2b18      	cmp	r3, #24
 8007f9a:	d137      	bne.n	800800c <HAL_RCC_OscConfig+0x1c8>
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	f003 0303 	and.w	r3, r3, #3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d132      	bne.n	800800c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fa6:	4b38      	ldr	r3, [pc, #224]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0304 	and.w	r3, r3, #4
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d005      	beq.n	8007fbe <HAL_RCC_OscConfig+0x17a>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e314      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007fbe:	4b32      	ldr	r3, [pc, #200]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f023 0219 	bic.w	r2, r3, #25
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	492f      	ldr	r1, [pc, #188]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fd0:	f7fa fc26 	bl	8002820 <HAL_GetTick>
 8007fd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fd6:	e008      	b.n	8007fea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fd8:	f7fa fc22 	bl	8002820 <HAL_GetTick>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d901      	bls.n	8007fea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e2fe      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fea:	4b27      	ldr	r3, [pc, #156]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0304 	and.w	r3, r3, #4
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d0f0      	beq.n	8007fd8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ff6:	4b24      	ldr	r3, [pc, #144]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	061b      	lsls	r3, r3, #24
 8008004:	4920      	ldr	r1, [pc, #128]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8008006:	4313      	orrs	r3, r2
 8008008:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800800a:	e045      	b.n	8008098 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d026      	beq.n	8008062 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008014:	4b1c      	ldr	r3, [pc, #112]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f023 0219 	bic.w	r2, r3, #25
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	4919      	ldr	r1, [pc, #100]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8008022:	4313      	orrs	r3, r2
 8008024:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008026:	f7fa fbfb 	bl	8002820 <HAL_GetTick>
 800802a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800802c:	e008      	b.n	8008040 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800802e:	f7fa fbf7 	bl	8002820 <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	2b02      	cmp	r3, #2
 800803a:	d901      	bls.n	8008040 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e2d3      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008040:	4b11      	ldr	r3, [pc, #68]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b00      	cmp	r3, #0
 800804a:	d0f0      	beq.n	800802e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800804c:	4b0e      	ldr	r3, [pc, #56]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	061b      	lsls	r3, r3, #24
 800805a:	490b      	ldr	r1, [pc, #44]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 800805c:	4313      	orrs	r3, r2
 800805e:	604b      	str	r3, [r1, #4]
 8008060:	e01a      	b.n	8008098 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008062:	4b09      	ldr	r3, [pc, #36]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a08      	ldr	r2, [pc, #32]	@ (8008088 <HAL_RCC_OscConfig+0x244>)
 8008068:	f023 0301 	bic.w	r3, r3, #1
 800806c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800806e:	f7fa fbd7 	bl	8002820 <HAL_GetTick>
 8008072:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008074:	e00a      	b.n	800808c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008076:	f7fa fbd3 	bl	8002820 <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	2b02      	cmp	r3, #2
 8008082:	d903      	bls.n	800808c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e2af      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
 8008088:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800808c:	4b96      	ldr	r3, [pc, #600]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0304 	and.w	r3, r3, #4
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1ee      	bne.n	8008076 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0310 	and.w	r3, r3, #16
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d06a      	beq.n	800817a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080a4:	4b90      	ldr	r3, [pc, #576]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080ac:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080ae:	4b8e      	ldr	r3, [pc, #568]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 80080b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	2b08      	cmp	r3, #8
 80080b8:	d007      	beq.n	80080ca <HAL_RCC_OscConfig+0x286>
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	2b18      	cmp	r3, #24
 80080be:	d11b      	bne.n	80080f8 <HAL_RCC_OscConfig+0x2b4>
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d116      	bne.n	80080f8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080ca:	4b87      	ldr	r3, [pc, #540]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d005      	beq.n	80080e2 <HAL_RCC_OscConfig+0x29e>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	2b80      	cmp	r3, #128	@ 0x80
 80080dc:	d001      	beq.n	80080e2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e282      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080e2:	4b81      	ldr	r3, [pc, #516]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	061b      	lsls	r3, r3, #24
 80080f0:	497d      	ldr	r1, [pc, #500]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080f6:	e040      	b.n	800817a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d023      	beq.n	8008148 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008100:	4b79      	ldr	r3, [pc, #484]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a78      	ldr	r2, [pc, #480]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 8008106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800810a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800810c:	f7fa fb88 	bl	8002820 <HAL_GetTick>
 8008110:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008112:	e008      	b.n	8008126 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008114:	f7fa fb84 	bl	8002820 <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	2b02      	cmp	r3, #2
 8008120:	d901      	bls.n	8008126 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e260      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008126:	4b70      	ldr	r3, [pc, #448]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0f0      	beq.n	8008114 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008132:	4b6d      	ldr	r3, [pc, #436]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	061b      	lsls	r3, r3, #24
 8008140:	4969      	ldr	r1, [pc, #420]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 8008142:	4313      	orrs	r3, r2
 8008144:	60cb      	str	r3, [r1, #12]
 8008146:	e018      	b.n	800817a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008148:	4b67      	ldr	r3, [pc, #412]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a66      	ldr	r2, [pc, #408]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 800814e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008154:	f7fa fb64 	bl	8002820 <HAL_GetTick>
 8008158:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800815a:	e008      	b.n	800816e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800815c:	f7fa fb60 	bl	8002820 <HAL_GetTick>
 8008160:	4602      	mov	r2, r0
 8008162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	2b02      	cmp	r3, #2
 8008168:	d901      	bls.n	800816e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e23c      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800816e:	4b5e      	ldr	r3, [pc, #376]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1f0      	bne.n	800815c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0308 	and.w	r3, r3, #8
 8008182:	2b00      	cmp	r3, #0
 8008184:	d036      	beq.n	80081f4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d019      	beq.n	80081c2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800818e:	4b56      	ldr	r3, [pc, #344]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 8008190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008192:	4a55      	ldr	r2, [pc, #340]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 8008194:	f043 0301 	orr.w	r3, r3, #1
 8008198:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800819a:	f7fa fb41 	bl	8002820 <HAL_GetTick>
 800819e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80081a0:	e008      	b.n	80081b4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081a2:	f7fa fb3d 	bl	8002820 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d901      	bls.n	80081b4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e219      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80081b4:	4b4c      	ldr	r3, [pc, #304]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 80081b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0f0      	beq.n	80081a2 <HAL_RCC_OscConfig+0x35e>
 80081c0:	e018      	b.n	80081f4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081c2:	4b49      	ldr	r3, [pc, #292]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 80081c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081c6:	4a48      	ldr	r2, [pc, #288]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 80081c8:	f023 0301 	bic.w	r3, r3, #1
 80081cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ce:	f7fa fb27 	bl	8002820 <HAL_GetTick>
 80081d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80081d4:	e008      	b.n	80081e8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081d6:	f7fa fb23 	bl	8002820 <HAL_GetTick>
 80081da:	4602      	mov	r2, r0
 80081dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d901      	bls.n	80081e8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e1ff      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80081e8:	4b3f      	ldr	r3, [pc, #252]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 80081ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ec:	f003 0302 	and.w	r3, r3, #2
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1f0      	bne.n	80081d6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0320 	and.w	r3, r3, #32
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d036      	beq.n	800826e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d019      	beq.n	800823c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008208:	4b37      	ldr	r3, [pc, #220]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a36      	ldr	r2, [pc, #216]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 800820e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008212:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008214:	f7fa fb04 	bl	8002820 <HAL_GetTick>
 8008218:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800821a:	e008      	b.n	800822e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800821c:	f7fa fb00 	bl	8002820 <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b02      	cmp	r3, #2
 8008228:	d901      	bls.n	800822e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e1dc      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800822e:	4b2e      	ldr	r3, [pc, #184]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0f0      	beq.n	800821c <HAL_RCC_OscConfig+0x3d8>
 800823a:	e018      	b.n	800826e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800823c:	4b2a      	ldr	r3, [pc, #168]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a29      	ldr	r2, [pc, #164]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 8008242:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008246:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008248:	f7fa faea 	bl	8002820 <HAL_GetTick>
 800824c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800824e:	e008      	b.n	8008262 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008250:	f7fa fae6 	bl	8002820 <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	2b02      	cmp	r3, #2
 800825c:	d901      	bls.n	8008262 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e1c2      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008262:	4b21      	ldr	r3, [pc, #132]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1f0      	bne.n	8008250 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0304 	and.w	r3, r3, #4
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 8086 	beq.w	8008388 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800827c:	4b1b      	ldr	r3, [pc, #108]	@ (80082ec <HAL_RCC_OscConfig+0x4a8>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a1a      	ldr	r2, [pc, #104]	@ (80082ec <HAL_RCC_OscConfig+0x4a8>)
 8008282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008286:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008288:	f7fa faca 	bl	8002820 <HAL_GetTick>
 800828c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800828e:	e008      	b.n	80082a2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008290:	f7fa fac6 	bl	8002820 <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	2b64      	cmp	r3, #100	@ 0x64
 800829c:	d901      	bls.n	80082a2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e1a2      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082a2:	4b12      	ldr	r3, [pc, #72]	@ (80082ec <HAL_RCC_OscConfig+0x4a8>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0f0      	beq.n	8008290 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d106      	bne.n	80082c4 <HAL_RCC_OscConfig+0x480>
 80082b6:	4b0c      	ldr	r3, [pc, #48]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 80082b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ba:	4a0b      	ldr	r2, [pc, #44]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 80082bc:	f043 0301 	orr.w	r3, r3, #1
 80082c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80082c2:	e032      	b.n	800832a <HAL_RCC_OscConfig+0x4e6>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d111      	bne.n	80082f0 <HAL_RCC_OscConfig+0x4ac>
 80082cc:	4b06      	ldr	r3, [pc, #24]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 80082ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082d0:	4a05      	ldr	r2, [pc, #20]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 80082d2:	f023 0301 	bic.w	r3, r3, #1
 80082d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80082d8:	4b03      	ldr	r3, [pc, #12]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 80082da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082dc:	4a02      	ldr	r2, [pc, #8]	@ (80082e8 <HAL_RCC_OscConfig+0x4a4>)
 80082de:	f023 0304 	bic.w	r3, r3, #4
 80082e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80082e4:	e021      	b.n	800832a <HAL_RCC_OscConfig+0x4e6>
 80082e6:	bf00      	nop
 80082e8:	58024400 	.word	0x58024400
 80082ec:	58024800 	.word	0x58024800
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	2b05      	cmp	r3, #5
 80082f6:	d10c      	bne.n	8008312 <HAL_RCC_OscConfig+0x4ce>
 80082f8:	4b83      	ldr	r3, [pc, #524]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 80082fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082fc:	4a82      	ldr	r2, [pc, #520]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 80082fe:	f043 0304 	orr.w	r3, r3, #4
 8008302:	6713      	str	r3, [r2, #112]	@ 0x70
 8008304:	4b80      	ldr	r3, [pc, #512]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 8008306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008308:	4a7f      	ldr	r2, [pc, #508]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 800830a:	f043 0301 	orr.w	r3, r3, #1
 800830e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008310:	e00b      	b.n	800832a <HAL_RCC_OscConfig+0x4e6>
 8008312:	4b7d      	ldr	r3, [pc, #500]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 8008314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008316:	4a7c      	ldr	r2, [pc, #496]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 8008318:	f023 0301 	bic.w	r3, r3, #1
 800831c:	6713      	str	r3, [r2, #112]	@ 0x70
 800831e:	4b7a      	ldr	r3, [pc, #488]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 8008320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008322:	4a79      	ldr	r2, [pc, #484]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 8008324:	f023 0304 	bic.w	r3, r3, #4
 8008328:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d015      	beq.n	800835e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008332:	f7fa fa75 	bl	8002820 <HAL_GetTick>
 8008336:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008338:	e00a      	b.n	8008350 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800833a:	f7fa fa71 	bl	8002820 <HAL_GetTick>
 800833e:	4602      	mov	r2, r0
 8008340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008348:	4293      	cmp	r3, r2
 800834a:	d901      	bls.n	8008350 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e14b      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008350:	4b6d      	ldr	r3, [pc, #436]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 8008352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008354:	f003 0302 	and.w	r3, r3, #2
 8008358:	2b00      	cmp	r3, #0
 800835a:	d0ee      	beq.n	800833a <HAL_RCC_OscConfig+0x4f6>
 800835c:	e014      	b.n	8008388 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800835e:	f7fa fa5f 	bl	8002820 <HAL_GetTick>
 8008362:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008364:	e00a      	b.n	800837c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008366:	f7fa fa5b 	bl	8002820 <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008374:	4293      	cmp	r3, r2
 8008376:	d901      	bls.n	800837c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e135      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800837c:	4b62      	ldr	r3, [pc, #392]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 800837e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008380:	f003 0302 	and.w	r3, r3, #2
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1ee      	bne.n	8008366 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 812a 	beq.w	80085e6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008392:	4b5d      	ldr	r3, [pc, #372]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800839a:	2b18      	cmp	r3, #24
 800839c:	f000 80ba 	beq.w	8008514 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	f040 8095 	bne.w	80084d4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083aa:	4b57      	ldr	r3, [pc, #348]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a56      	ldr	r2, [pc, #344]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 80083b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083b6:	f7fa fa33 	bl	8002820 <HAL_GetTick>
 80083ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083bc:	e008      	b.n	80083d0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083be:	f7fa fa2f 	bl	8002820 <HAL_GetTick>
 80083c2:	4602      	mov	r2, r0
 80083c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d901      	bls.n	80083d0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e10b      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083d0:	4b4d      	ldr	r3, [pc, #308]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1f0      	bne.n	80083be <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80083dc:	4b4a      	ldr	r3, [pc, #296]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 80083de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083e0:	4b4a      	ldr	r3, [pc, #296]	@ (800850c <HAL_RCC_OscConfig+0x6c8>)
 80083e2:	4013      	ands	r3, r2
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80083ec:	0112      	lsls	r2, r2, #4
 80083ee:	430a      	orrs	r2, r1
 80083f0:	4945      	ldr	r1, [pc, #276]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	628b      	str	r3, [r1, #40]	@ 0x28
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083fa:	3b01      	subs	r3, #1
 80083fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008404:	3b01      	subs	r3, #1
 8008406:	025b      	lsls	r3, r3, #9
 8008408:	b29b      	uxth	r3, r3
 800840a:	431a      	orrs	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008410:	3b01      	subs	r3, #1
 8008412:	041b      	lsls	r3, r3, #16
 8008414:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008418:	431a      	orrs	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800841e:	3b01      	subs	r3, #1
 8008420:	061b      	lsls	r3, r3, #24
 8008422:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008426:	4938      	ldr	r1, [pc, #224]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 8008428:	4313      	orrs	r3, r2
 800842a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800842c:	4b36      	ldr	r3, [pc, #216]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 800842e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008430:	4a35      	ldr	r2, [pc, #212]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 8008432:	f023 0301 	bic.w	r3, r3, #1
 8008436:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008438:	4b33      	ldr	r3, [pc, #204]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 800843a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800843c:	4b34      	ldr	r3, [pc, #208]	@ (8008510 <HAL_RCC_OscConfig+0x6cc>)
 800843e:	4013      	ands	r3, r2
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008444:	00d2      	lsls	r2, r2, #3
 8008446:	4930      	ldr	r1, [pc, #192]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 8008448:	4313      	orrs	r3, r2
 800844a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800844c:	4b2e      	ldr	r3, [pc, #184]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 800844e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008450:	f023 020c 	bic.w	r2, r3, #12
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008458:	492b      	ldr	r1, [pc, #172]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 800845a:	4313      	orrs	r3, r2
 800845c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800845e:	4b2a      	ldr	r3, [pc, #168]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 8008460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008462:	f023 0202 	bic.w	r2, r3, #2
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800846a:	4927      	ldr	r1, [pc, #156]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 800846c:	4313      	orrs	r3, r2
 800846e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008470:	4b25      	ldr	r3, [pc, #148]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 8008472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008474:	4a24      	ldr	r2, [pc, #144]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 8008476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800847a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800847c:	4b22      	ldr	r3, [pc, #136]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 800847e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008480:	4a21      	ldr	r2, [pc, #132]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 8008482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008488:	4b1f      	ldr	r3, [pc, #124]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 800848a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848c:	4a1e      	ldr	r2, [pc, #120]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 800848e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008492:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008494:	4b1c      	ldr	r3, [pc, #112]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 8008496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008498:	4a1b      	ldr	r2, [pc, #108]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 800849a:	f043 0301 	orr.w	r3, r3, #1
 800849e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084a0:	4b19      	ldr	r3, [pc, #100]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a18      	ldr	r2, [pc, #96]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 80084a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80084aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ac:	f7fa f9b8 	bl	8002820 <HAL_GetTick>
 80084b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084b2:	e008      	b.n	80084c6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084b4:	f7fa f9b4 	bl	8002820 <HAL_GetTick>
 80084b8:	4602      	mov	r2, r0
 80084ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d901      	bls.n	80084c6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e090      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084c6:	4b10      	ldr	r3, [pc, #64]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d0f0      	beq.n	80084b4 <HAL_RCC_OscConfig+0x670>
 80084d2:	e088      	b.n	80085e6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a0b      	ldr	r2, [pc, #44]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 80084da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e0:	f7fa f99e 	bl	8002820 <HAL_GetTick>
 80084e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084e6:	e008      	b.n	80084fa <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084e8:	f7fa f99a 	bl	8002820 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d901      	bls.n	80084fa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e076      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084fa:	4b03      	ldr	r3, [pc, #12]	@ (8008508 <HAL_RCC_OscConfig+0x6c4>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1f0      	bne.n	80084e8 <HAL_RCC_OscConfig+0x6a4>
 8008506:	e06e      	b.n	80085e6 <HAL_RCC_OscConfig+0x7a2>
 8008508:	58024400 	.word	0x58024400
 800850c:	fffffc0c 	.word	0xfffffc0c
 8008510:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008514:	4b36      	ldr	r3, [pc, #216]	@ (80085f0 <HAL_RCC_OscConfig+0x7ac>)
 8008516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008518:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800851a:	4b35      	ldr	r3, [pc, #212]	@ (80085f0 <HAL_RCC_OscConfig+0x7ac>)
 800851c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800851e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008524:	2b01      	cmp	r3, #1
 8008526:	d031      	beq.n	800858c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	f003 0203 	and.w	r2, r3, #3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008532:	429a      	cmp	r2, r3
 8008534:	d12a      	bne.n	800858c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	091b      	lsrs	r3, r3, #4
 800853a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008542:	429a      	cmp	r2, r3
 8008544:	d122      	bne.n	800858c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008550:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008552:	429a      	cmp	r2, r3
 8008554:	d11a      	bne.n	800858c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	0a5b      	lsrs	r3, r3, #9
 800855a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008562:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008564:	429a      	cmp	r2, r3
 8008566:	d111      	bne.n	800858c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	0c1b      	lsrs	r3, r3, #16
 800856c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008574:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008576:	429a      	cmp	r2, r3
 8008578:	d108      	bne.n	800858c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	0e1b      	lsrs	r3, r3, #24
 800857e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008586:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008588:	429a      	cmp	r2, r3
 800858a:	d001      	beq.n	8008590 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e02b      	b.n	80085e8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008590:	4b17      	ldr	r3, [pc, #92]	@ (80085f0 <HAL_RCC_OscConfig+0x7ac>)
 8008592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008594:	08db      	lsrs	r3, r3, #3
 8008596:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800859a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d01f      	beq.n	80085e6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80085a6:	4b12      	ldr	r3, [pc, #72]	@ (80085f0 <HAL_RCC_OscConfig+0x7ac>)
 80085a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085aa:	4a11      	ldr	r2, [pc, #68]	@ (80085f0 <HAL_RCC_OscConfig+0x7ac>)
 80085ac:	f023 0301 	bic.w	r3, r3, #1
 80085b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80085b2:	f7fa f935 	bl	8002820 <HAL_GetTick>
 80085b6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80085b8:	bf00      	nop
 80085ba:	f7fa f931 	bl	8002820 <HAL_GetTick>
 80085be:	4602      	mov	r2, r0
 80085c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d0f9      	beq.n	80085ba <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80085c6:	4b0a      	ldr	r3, [pc, #40]	@ (80085f0 <HAL_RCC_OscConfig+0x7ac>)
 80085c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085ca:	4b0a      	ldr	r3, [pc, #40]	@ (80085f4 <HAL_RCC_OscConfig+0x7b0>)
 80085cc:	4013      	ands	r3, r2
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80085d2:	00d2      	lsls	r2, r2, #3
 80085d4:	4906      	ldr	r1, [pc, #24]	@ (80085f0 <HAL_RCC_OscConfig+0x7ac>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80085da:	4b05      	ldr	r3, [pc, #20]	@ (80085f0 <HAL_RCC_OscConfig+0x7ac>)
 80085dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085de:	4a04      	ldr	r2, [pc, #16]	@ (80085f0 <HAL_RCC_OscConfig+0x7ac>)
 80085e0:	f043 0301 	orr.w	r3, r3, #1
 80085e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3730      	adds	r7, #48	@ 0x30
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	58024400 	.word	0x58024400
 80085f4:	ffff0007 	.word	0xffff0007

080085f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e19c      	b.n	8008946 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800860c:	4b8a      	ldr	r3, [pc, #552]	@ (8008838 <HAL_RCC_ClockConfig+0x240>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	429a      	cmp	r2, r3
 8008618:	d910      	bls.n	800863c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800861a:	4b87      	ldr	r3, [pc, #540]	@ (8008838 <HAL_RCC_ClockConfig+0x240>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f023 020f 	bic.w	r2, r3, #15
 8008622:	4985      	ldr	r1, [pc, #532]	@ (8008838 <HAL_RCC_ClockConfig+0x240>)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	4313      	orrs	r3, r2
 8008628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800862a:	4b83      	ldr	r3, [pc, #524]	@ (8008838 <HAL_RCC_ClockConfig+0x240>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 030f 	and.w	r3, r3, #15
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	429a      	cmp	r2, r3
 8008636:	d001      	beq.n	800863c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e184      	b.n	8008946 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	d010      	beq.n	800866a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	691a      	ldr	r2, [r3, #16]
 800864c:	4b7b      	ldr	r3, [pc, #492]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008654:	429a      	cmp	r2, r3
 8008656:	d908      	bls.n	800866a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008658:	4b78      	ldr	r3, [pc, #480]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	4975      	ldr	r1, [pc, #468]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 8008666:	4313      	orrs	r3, r2
 8008668:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0308 	and.w	r3, r3, #8
 8008672:	2b00      	cmp	r3, #0
 8008674:	d010      	beq.n	8008698 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	695a      	ldr	r2, [r3, #20]
 800867a:	4b70      	ldr	r3, [pc, #448]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 800867c:	69db      	ldr	r3, [r3, #28]
 800867e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008682:	429a      	cmp	r2, r3
 8008684:	d908      	bls.n	8008698 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008686:	4b6d      	ldr	r3, [pc, #436]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	496a      	ldr	r1, [pc, #424]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 8008694:	4313      	orrs	r3, r2
 8008696:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0310 	and.w	r3, r3, #16
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d010      	beq.n	80086c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	699a      	ldr	r2, [r3, #24]
 80086a8:	4b64      	ldr	r3, [pc, #400]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 80086aa:	69db      	ldr	r3, [r3, #28]
 80086ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d908      	bls.n	80086c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80086b4:	4b61      	ldr	r3, [pc, #388]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 80086b6:	69db      	ldr	r3, [r3, #28]
 80086b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	495e      	ldr	r1, [pc, #376]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0320 	and.w	r3, r3, #32
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d010      	beq.n	80086f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	69da      	ldr	r2, [r3, #28]
 80086d6:	4b59      	ldr	r3, [pc, #356]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80086de:	429a      	cmp	r2, r3
 80086e0:	d908      	bls.n	80086f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80086e2:	4b56      	ldr	r3, [pc, #344]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	4953      	ldr	r1, [pc, #332]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 0302 	and.w	r3, r3, #2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d010      	beq.n	8008722 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68da      	ldr	r2, [r3, #12]
 8008704:	4b4d      	ldr	r3, [pc, #308]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	f003 030f 	and.w	r3, r3, #15
 800870c:	429a      	cmp	r2, r3
 800870e:	d908      	bls.n	8008722 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008710:	4b4a      	ldr	r3, [pc, #296]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	f023 020f 	bic.w	r2, r3, #15
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	4947      	ldr	r1, [pc, #284]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 800871e:	4313      	orrs	r3, r2
 8008720:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d055      	beq.n	80087da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800872e:	4b43      	ldr	r3, [pc, #268]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	4940      	ldr	r1, [pc, #256]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 800873c:	4313      	orrs	r3, r2
 800873e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	2b02      	cmp	r3, #2
 8008746:	d107      	bne.n	8008758 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008748:	4b3c      	ldr	r3, [pc, #240]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d121      	bne.n	8008798 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e0f6      	b.n	8008946 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	2b03      	cmp	r3, #3
 800875e:	d107      	bne.n	8008770 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008760:	4b36      	ldr	r3, [pc, #216]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d115      	bne.n	8008798 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e0ea      	b.n	8008946 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d107      	bne.n	8008788 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008778:	4b30      	ldr	r3, [pc, #192]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008780:	2b00      	cmp	r3, #0
 8008782:	d109      	bne.n	8008798 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e0de      	b.n	8008946 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008788:	4b2c      	ldr	r3, [pc, #176]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0304 	and.w	r3, r3, #4
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e0d6      	b.n	8008946 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008798:	4b28      	ldr	r3, [pc, #160]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	f023 0207 	bic.w	r2, r3, #7
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	4925      	ldr	r1, [pc, #148]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087aa:	f7fa f839 	bl	8002820 <HAL_GetTick>
 80087ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087b0:	e00a      	b.n	80087c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087b2:	f7fa f835 	bl	8002820 <HAL_GetTick>
 80087b6:	4602      	mov	r2, r0
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d901      	bls.n	80087c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e0be      	b.n	8008946 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087c8:	4b1c      	ldr	r3, [pc, #112]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	00db      	lsls	r3, r3, #3
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d1eb      	bne.n	80087b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 0302 	and.w	r3, r3, #2
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d010      	beq.n	8008808 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	4b14      	ldr	r3, [pc, #80]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	f003 030f 	and.w	r3, r3, #15
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d208      	bcs.n	8008808 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087f6:	4b11      	ldr	r3, [pc, #68]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	f023 020f 	bic.w	r2, r3, #15
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	490e      	ldr	r1, [pc, #56]	@ (800883c <HAL_RCC_ClockConfig+0x244>)
 8008804:	4313      	orrs	r3, r2
 8008806:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008808:	4b0b      	ldr	r3, [pc, #44]	@ (8008838 <HAL_RCC_ClockConfig+0x240>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 030f 	and.w	r3, r3, #15
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	429a      	cmp	r2, r3
 8008814:	d214      	bcs.n	8008840 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008816:	4b08      	ldr	r3, [pc, #32]	@ (8008838 <HAL_RCC_ClockConfig+0x240>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f023 020f 	bic.w	r2, r3, #15
 800881e:	4906      	ldr	r1, [pc, #24]	@ (8008838 <HAL_RCC_ClockConfig+0x240>)
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	4313      	orrs	r3, r2
 8008824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008826:	4b04      	ldr	r3, [pc, #16]	@ (8008838 <HAL_RCC_ClockConfig+0x240>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 030f 	and.w	r3, r3, #15
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	429a      	cmp	r2, r3
 8008832:	d005      	beq.n	8008840 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e086      	b.n	8008946 <HAL_RCC_ClockConfig+0x34e>
 8008838:	52002000 	.word	0x52002000
 800883c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b00      	cmp	r3, #0
 800884a:	d010      	beq.n	800886e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	691a      	ldr	r2, [r3, #16]
 8008850:	4b3f      	ldr	r3, [pc, #252]	@ (8008950 <HAL_RCC_ClockConfig+0x358>)
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008858:	429a      	cmp	r2, r3
 800885a:	d208      	bcs.n	800886e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800885c:	4b3c      	ldr	r3, [pc, #240]	@ (8008950 <HAL_RCC_ClockConfig+0x358>)
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	4939      	ldr	r1, [pc, #228]	@ (8008950 <HAL_RCC_ClockConfig+0x358>)
 800886a:	4313      	orrs	r3, r2
 800886c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 0308 	and.w	r3, r3, #8
 8008876:	2b00      	cmp	r3, #0
 8008878:	d010      	beq.n	800889c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	695a      	ldr	r2, [r3, #20]
 800887e:	4b34      	ldr	r3, [pc, #208]	@ (8008950 <HAL_RCC_ClockConfig+0x358>)
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008886:	429a      	cmp	r2, r3
 8008888:	d208      	bcs.n	800889c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800888a:	4b31      	ldr	r3, [pc, #196]	@ (8008950 <HAL_RCC_ClockConfig+0x358>)
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	492e      	ldr	r1, [pc, #184]	@ (8008950 <HAL_RCC_ClockConfig+0x358>)
 8008898:	4313      	orrs	r3, r2
 800889a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0310 	and.w	r3, r3, #16
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d010      	beq.n	80088ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	699a      	ldr	r2, [r3, #24]
 80088ac:	4b28      	ldr	r3, [pc, #160]	@ (8008950 <HAL_RCC_ClockConfig+0x358>)
 80088ae:	69db      	ldr	r3, [r3, #28]
 80088b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d208      	bcs.n	80088ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088b8:	4b25      	ldr	r3, [pc, #148]	@ (8008950 <HAL_RCC_ClockConfig+0x358>)
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	4922      	ldr	r1, [pc, #136]	@ (8008950 <HAL_RCC_ClockConfig+0x358>)
 80088c6:	4313      	orrs	r3, r2
 80088c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 0320 	and.w	r3, r3, #32
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d010      	beq.n	80088f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	69da      	ldr	r2, [r3, #28]
 80088da:	4b1d      	ldr	r3, [pc, #116]	@ (8008950 <HAL_RCC_ClockConfig+0x358>)
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d208      	bcs.n	80088f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80088e6:	4b1a      	ldr	r3, [pc, #104]	@ (8008950 <HAL_RCC_ClockConfig+0x358>)
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	69db      	ldr	r3, [r3, #28]
 80088f2:	4917      	ldr	r1, [pc, #92]	@ (8008950 <HAL_RCC_ClockConfig+0x358>)
 80088f4:	4313      	orrs	r3, r2
 80088f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80088f8:	f000 f834 	bl	8008964 <HAL_RCC_GetSysClockFreq>
 80088fc:	4602      	mov	r2, r0
 80088fe:	4b14      	ldr	r3, [pc, #80]	@ (8008950 <HAL_RCC_ClockConfig+0x358>)
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	0a1b      	lsrs	r3, r3, #8
 8008904:	f003 030f 	and.w	r3, r3, #15
 8008908:	4912      	ldr	r1, [pc, #72]	@ (8008954 <HAL_RCC_ClockConfig+0x35c>)
 800890a:	5ccb      	ldrb	r3, [r1, r3]
 800890c:	f003 031f 	and.w	r3, r3, #31
 8008910:	fa22 f303 	lsr.w	r3, r2, r3
 8008914:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008916:	4b0e      	ldr	r3, [pc, #56]	@ (8008950 <HAL_RCC_ClockConfig+0x358>)
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	f003 030f 	and.w	r3, r3, #15
 800891e:	4a0d      	ldr	r2, [pc, #52]	@ (8008954 <HAL_RCC_ClockConfig+0x35c>)
 8008920:	5cd3      	ldrb	r3, [r2, r3]
 8008922:	f003 031f 	and.w	r3, r3, #31
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	fa22 f303 	lsr.w	r3, r2, r3
 800892c:	4a0a      	ldr	r2, [pc, #40]	@ (8008958 <HAL_RCC_ClockConfig+0x360>)
 800892e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008930:	4a0a      	ldr	r2, [pc, #40]	@ (800895c <HAL_RCC_ClockConfig+0x364>)
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008936:	4b0a      	ldr	r3, [pc, #40]	@ (8008960 <HAL_RCC_ClockConfig+0x368>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4618      	mov	r0, r3
 800893c:	f7f9 ff26 	bl	800278c <HAL_InitTick>
 8008940:	4603      	mov	r3, r0
 8008942:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008944:	7bfb      	ldrb	r3, [r7, #15]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	58024400 	.word	0x58024400
 8008954:	0800fdb4 	.word	0x0800fdb4
 8008958:	240001b4 	.word	0x240001b4
 800895c:	240001b0 	.word	0x240001b0
 8008960:	240001b8 	.word	0x240001b8

08008964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008964:	b480      	push	{r7}
 8008966:	b089      	sub	sp, #36	@ 0x24
 8008968:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800896a:	4bb3      	ldr	r3, [pc, #716]	@ (8008c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008972:	2b18      	cmp	r3, #24
 8008974:	f200 8155 	bhi.w	8008c22 <HAL_RCC_GetSysClockFreq+0x2be>
 8008978:	a201      	add	r2, pc, #4	@ (adr r2, 8008980 <HAL_RCC_GetSysClockFreq+0x1c>)
 800897a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897e:	bf00      	nop
 8008980:	080089e5 	.word	0x080089e5
 8008984:	08008c23 	.word	0x08008c23
 8008988:	08008c23 	.word	0x08008c23
 800898c:	08008c23 	.word	0x08008c23
 8008990:	08008c23 	.word	0x08008c23
 8008994:	08008c23 	.word	0x08008c23
 8008998:	08008c23 	.word	0x08008c23
 800899c:	08008c23 	.word	0x08008c23
 80089a0:	08008a0b 	.word	0x08008a0b
 80089a4:	08008c23 	.word	0x08008c23
 80089a8:	08008c23 	.word	0x08008c23
 80089ac:	08008c23 	.word	0x08008c23
 80089b0:	08008c23 	.word	0x08008c23
 80089b4:	08008c23 	.word	0x08008c23
 80089b8:	08008c23 	.word	0x08008c23
 80089bc:	08008c23 	.word	0x08008c23
 80089c0:	08008a11 	.word	0x08008a11
 80089c4:	08008c23 	.word	0x08008c23
 80089c8:	08008c23 	.word	0x08008c23
 80089cc:	08008c23 	.word	0x08008c23
 80089d0:	08008c23 	.word	0x08008c23
 80089d4:	08008c23 	.word	0x08008c23
 80089d8:	08008c23 	.word	0x08008c23
 80089dc:	08008c23 	.word	0x08008c23
 80089e0:	08008a17 	.word	0x08008a17
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089e4:	4b94      	ldr	r3, [pc, #592]	@ (8008c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0320 	and.w	r3, r3, #32
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d009      	beq.n	8008a04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089f0:	4b91      	ldr	r3, [pc, #580]	@ (8008c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	08db      	lsrs	r3, r3, #3
 80089f6:	f003 0303 	and.w	r3, r3, #3
 80089fa:	4a90      	ldr	r2, [pc, #576]	@ (8008c3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008a00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008a02:	e111      	b.n	8008c28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008a04:	4b8d      	ldr	r3, [pc, #564]	@ (8008c3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a06:	61bb      	str	r3, [r7, #24]
      break;
 8008a08:	e10e      	b.n	8008c28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008a0a:	4b8d      	ldr	r3, [pc, #564]	@ (8008c40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008a0c:	61bb      	str	r3, [r7, #24]
      break;
 8008a0e:	e10b      	b.n	8008c28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008a10:	4b8c      	ldr	r3, [pc, #560]	@ (8008c44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008a12:	61bb      	str	r3, [r7, #24]
      break;
 8008a14:	e108      	b.n	8008c28 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a16:	4b88      	ldr	r3, [pc, #544]	@ (8008c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a1a:	f003 0303 	and.w	r3, r3, #3
 8008a1e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008a20:	4b85      	ldr	r3, [pc, #532]	@ (8008c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a24:	091b      	lsrs	r3, r3, #4
 8008a26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a2a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008a2c:	4b82      	ldr	r3, [pc, #520]	@ (8008c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a36:	4b80      	ldr	r3, [pc, #512]	@ (8008c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a3a:	08db      	lsrs	r3, r3, #3
 8008a3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	fb02 f303 	mul.w	r3, r2, r3
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f000 80e1 	beq.w	8008c1c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	f000 8083 	beq.w	8008b68 <HAL_RCC_GetSysClockFreq+0x204>
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	f200 80a1 	bhi.w	8008bac <HAL_RCC_GetSysClockFreq+0x248>
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d003      	beq.n	8008a78 <HAL_RCC_GetSysClockFreq+0x114>
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d056      	beq.n	8008b24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008a76:	e099      	b.n	8008bac <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a78:	4b6f      	ldr	r3, [pc, #444]	@ (8008c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0320 	and.w	r3, r3, #32
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d02d      	beq.n	8008ae0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a84:	4b6c      	ldr	r3, [pc, #432]	@ (8008c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	08db      	lsrs	r3, r3, #3
 8008a8a:	f003 0303 	and.w	r3, r3, #3
 8008a8e:	4a6b      	ldr	r2, [pc, #428]	@ (8008c3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a90:	fa22 f303 	lsr.w	r3, r2, r3
 8008a94:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	ee07 3a90 	vmov	s15, r3
 8008a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	ee07 3a90 	vmov	s15, r3
 8008aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aae:	4b62      	ldr	r3, [pc, #392]	@ (8008c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab6:	ee07 3a90 	vmov	s15, r3
 8008aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ac2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008c48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ada:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008ade:	e087      	b.n	8008bf0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	ee07 3a90 	vmov	s15, r3
 8008ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008c4c <HAL_RCC_GetSysClockFreq+0x2e8>
 8008aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008af2:	4b51      	ldr	r3, [pc, #324]	@ (8008c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008afa:	ee07 3a90 	vmov	s15, r3
 8008afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b06:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008c48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b22:	e065      	b.n	8008bf0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	ee07 3a90 	vmov	s15, r3
 8008b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008c50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b36:	4b40      	ldr	r3, [pc, #256]	@ (8008c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b3e:	ee07 3a90 	vmov	s15, r3
 8008b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b46:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b4a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008c48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b66:	e043      	b.n	8008bf0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	ee07 3a90 	vmov	s15, r3
 8008b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b72:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008c54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8008c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b82:	ee07 3a90 	vmov	s15, r3
 8008b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b8e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008c48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008baa:	e021      	b.n	8008bf0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	ee07 3a90 	vmov	s15, r3
 8008bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008c50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8008c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc6:	ee07 3a90 	vmov	s15, r3
 8008bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bce:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bd2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008c48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008bee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008bf0:	4b11      	ldr	r3, [pc, #68]	@ (8008c38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf4:	0a5b      	lsrs	r3, r3, #9
 8008bf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	ee07 3a90 	vmov	s15, r3
 8008c04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c08:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c14:	ee17 3a90 	vmov	r3, s15
 8008c18:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008c1a:	e005      	b.n	8008c28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	61bb      	str	r3, [r7, #24]
      break;
 8008c20:	e002      	b.n	8008c28 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008c22:	4b07      	ldr	r3, [pc, #28]	@ (8008c40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c24:	61bb      	str	r3, [r7, #24]
      break;
 8008c26:	bf00      	nop
  }

  return sysclockfreq;
 8008c28:	69bb      	ldr	r3, [r7, #24]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3724      	adds	r7, #36	@ 0x24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	58024400 	.word	0x58024400
 8008c3c:	03d09000 	.word	0x03d09000
 8008c40:	003d0900 	.word	0x003d0900
 8008c44:	007a1200 	.word	0x007a1200
 8008c48:	46000000 	.word	0x46000000
 8008c4c:	4c742400 	.word	0x4c742400
 8008c50:	4a742400 	.word	0x4a742400
 8008c54:	4af42400 	.word	0x4af42400

08008c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c5e:	f7ff fe81 	bl	8008964 <HAL_RCC_GetSysClockFreq>
 8008c62:	4602      	mov	r2, r0
 8008c64:	4b10      	ldr	r3, [pc, #64]	@ (8008ca8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	0a1b      	lsrs	r3, r3, #8
 8008c6a:	f003 030f 	and.w	r3, r3, #15
 8008c6e:	490f      	ldr	r1, [pc, #60]	@ (8008cac <HAL_RCC_GetHCLKFreq+0x54>)
 8008c70:	5ccb      	ldrb	r3, [r1, r3]
 8008c72:	f003 031f 	and.w	r3, r3, #31
 8008c76:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ca8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	f003 030f 	and.w	r3, r3, #15
 8008c84:	4a09      	ldr	r2, [pc, #36]	@ (8008cac <HAL_RCC_GetHCLKFreq+0x54>)
 8008c86:	5cd3      	ldrb	r3, [r2, r3]
 8008c88:	f003 031f 	and.w	r3, r3, #31
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c92:	4a07      	ldr	r2, [pc, #28]	@ (8008cb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c96:	4a07      	ldr	r2, [pc, #28]	@ (8008cb4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008c9c:	4b04      	ldr	r3, [pc, #16]	@ (8008cb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	58024400 	.word	0x58024400
 8008cac:	0800fdb4 	.word	0x0800fdb4
 8008cb0:	240001b4 	.word	0x240001b4
 8008cb4:	240001b0 	.word	0x240001b0

08008cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008cbc:	f7ff ffcc 	bl	8008c58 <HAL_RCC_GetHCLKFreq>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	4b06      	ldr	r3, [pc, #24]	@ (8008cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	091b      	lsrs	r3, r3, #4
 8008cc8:	f003 0307 	and.w	r3, r3, #7
 8008ccc:	4904      	ldr	r1, [pc, #16]	@ (8008ce0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008cce:	5ccb      	ldrb	r3, [r1, r3]
 8008cd0:	f003 031f 	and.w	r3, r3, #31
 8008cd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	58024400 	.word	0x58024400
 8008ce0:	0800fdb4 	.word	0x0800fdb4

08008ce4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ce8:	b0c6      	sub	sp, #280	@ 0x118
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008d08:	2500      	movs	r5, #0
 8008d0a:	ea54 0305 	orrs.w	r3, r4, r5
 8008d0e:	d049      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d1a:	d02f      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008d1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d20:	d828      	bhi.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008d22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d26:	d01a      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008d28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d2c:	d822      	bhi.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008d32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d36:	d007      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d38:	e01c      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d3a:	4bab      	ldr	r3, [pc, #684]	@ (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3e:	4aaa      	ldr	r2, [pc, #680]	@ (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d46:	e01a      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d4c:	3308      	adds	r3, #8
 8008d4e:	2102      	movs	r1, #2
 8008d50:	4618      	mov	r0, r3
 8008d52:	f002 fa49 	bl	800b1e8 <RCCEx_PLL2_Config>
 8008d56:	4603      	mov	r3, r0
 8008d58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d5c:	e00f      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d62:	3328      	adds	r3, #40	@ 0x28
 8008d64:	2102      	movs	r1, #2
 8008d66:	4618      	mov	r0, r3
 8008d68:	f002 faf0 	bl	800b34c <RCCEx_PLL3_Config>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d72:	e004      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d7a:	e000      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10a      	bne.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d86:	4b98      	ldr	r3, [pc, #608]	@ (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d94:	4a94      	ldr	r2, [pc, #592]	@ (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008d96:	430b      	orrs	r3, r1
 8008d98:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d9a:	e003      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008da0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008db0:	f04f 0900 	mov.w	r9, #0
 8008db4:	ea58 0309 	orrs.w	r3, r8, r9
 8008db8:	d047      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dc0:	2b04      	cmp	r3, #4
 8008dc2:	d82a      	bhi.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8008dcc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dca:	bf00      	nop
 8008dcc:	08008de1 	.word	0x08008de1
 8008dd0:	08008def 	.word	0x08008def
 8008dd4:	08008e05 	.word	0x08008e05
 8008dd8:	08008e23 	.word	0x08008e23
 8008ddc:	08008e23 	.word	0x08008e23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de0:	4b81      	ldr	r3, [pc, #516]	@ (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de4:	4a80      	ldr	r2, [pc, #512]	@ (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008dec:	e01a      	b.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008df2:	3308      	adds	r3, #8
 8008df4:	2100      	movs	r1, #0
 8008df6:	4618      	mov	r0, r3
 8008df8:	f002 f9f6 	bl	800b1e8 <RCCEx_PLL2_Config>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e02:	e00f      	b.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e08:	3328      	adds	r3, #40	@ 0x28
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f002 fa9d 	bl	800b34c <RCCEx_PLL3_Config>
 8008e12:	4603      	mov	r3, r0
 8008e14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e18:	e004      	b.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e20:	e000      	b.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10a      	bne.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e2c:	4b6e      	ldr	r3, [pc, #440]	@ (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e30:	f023 0107 	bic.w	r1, r3, #7
 8008e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e3a:	4a6b      	ldr	r2, [pc, #428]	@ (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008e3c:	430b      	orrs	r3, r1
 8008e3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e40:	e003      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008e56:	f04f 0b00 	mov.w	fp, #0
 8008e5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8008e5e:	d05b      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e68:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008e6c:	d03b      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008e6e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008e72:	d834      	bhi.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e78:	d037      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008e7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e7e:	d82e      	bhi.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e80:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e84:	d033      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008e86:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e8a:	d828      	bhi.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e90:	d01a      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008e92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e96:	d822      	bhi.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008e9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ea0:	d007      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008ea2:	e01c      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ea4:	4b50      	ldr	r3, [pc, #320]	@ (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea8:	4a4f      	ldr	r2, [pc, #316]	@ (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008eae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008eb0:	e01e      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008eb6:	3308      	adds	r3, #8
 8008eb8:	2100      	movs	r1, #0
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f002 f994 	bl	800b1e8 <RCCEx_PLL2_Config>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008ec6:	e013      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ecc:	3328      	adds	r3, #40	@ 0x28
 8008ece:	2100      	movs	r1, #0
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f002 fa3b 	bl	800b34c <RCCEx_PLL3_Config>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008edc:	e008      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ee4:	e004      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008ee6:	bf00      	nop
 8008ee8:	e002      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008eea:	bf00      	nop
 8008eec:	e000      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ef0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10b      	bne.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008ef8:	4b3b      	ldr	r3, [pc, #236]	@ (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008efc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f08:	4a37      	ldr	r2, [pc, #220]	@ (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f0a:	430b      	orrs	r3, r1
 8008f0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f0e:	e003      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f20:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008f24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008f28:	2300      	movs	r3, #0
 8008f2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008f2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008f32:	460b      	mov	r3, r1
 8008f34:	4313      	orrs	r3, r2
 8008f36:	d05d      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008f40:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008f44:	d03b      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008f46:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008f4a:	d834      	bhi.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f50:	d037      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008f52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f56:	d82e      	bhi.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f5c:	d033      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008f5e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f62:	d828      	bhi.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f68:	d01a      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008f6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f6e:	d822      	bhi.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d003      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008f74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f78:	d007      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008f7a:	e01c      	b.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f80:	4a19      	ldr	r2, [pc, #100]	@ (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f88:	e01e      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f8e:	3308      	adds	r3, #8
 8008f90:	2100      	movs	r1, #0
 8008f92:	4618      	mov	r0, r3
 8008f94:	f002 f928 	bl	800b1e8 <RCCEx_PLL2_Config>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f9e:	e013      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fa4:	3328      	adds	r3, #40	@ 0x28
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f002 f9cf 	bl	800b34c <RCCEx_PLL3_Config>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fb4:	e008      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008fbc:	e004      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008fbe:	bf00      	nop
 8008fc0:	e002      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008fc2:	bf00      	nop
 8008fc4:	e000      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10d      	bne.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008fd0:	4b05      	ldr	r3, [pc, #20]	@ (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fd4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008fe0:	4a01      	ldr	r2, [pc, #4]	@ (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008fe2:	430b      	orrs	r3, r1
 8008fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8008fe6:	e005      	b.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008fe8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ff0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009000:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009004:	2300      	movs	r3, #0
 8009006:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800900a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800900e:	460b      	mov	r3, r1
 8009010:	4313      	orrs	r3, r2
 8009012:	d03a      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800901a:	2b30      	cmp	r3, #48	@ 0x30
 800901c:	d01f      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800901e:	2b30      	cmp	r3, #48	@ 0x30
 8009020:	d819      	bhi.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009022:	2b20      	cmp	r3, #32
 8009024:	d00c      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009026:	2b20      	cmp	r3, #32
 8009028:	d815      	bhi.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800902a:	2b00      	cmp	r3, #0
 800902c:	d019      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800902e:	2b10      	cmp	r3, #16
 8009030:	d111      	bne.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009032:	4baa      	ldr	r3, [pc, #680]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009036:	4aa9      	ldr	r2, [pc, #676]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800903c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800903e:	e011      	b.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009044:	3308      	adds	r3, #8
 8009046:	2102      	movs	r1, #2
 8009048:	4618      	mov	r0, r3
 800904a:	f002 f8cd 	bl	800b1e8 <RCCEx_PLL2_Config>
 800904e:	4603      	mov	r3, r0
 8009050:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009054:	e006      	b.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800905c:	e002      	b.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800905e:	bf00      	nop
 8009060:	e000      	b.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009062:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009064:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10a      	bne.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800906c:	4b9b      	ldr	r3, [pc, #620]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800906e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009070:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800907a:	4a98      	ldr	r2, [pc, #608]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800907c:	430b      	orrs	r3, r1
 800907e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009080:	e003      	b.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009082:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009086:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800908a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800908e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009092:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009096:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800909a:	2300      	movs	r3, #0
 800909c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80090a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80090a4:	460b      	mov	r3, r1
 80090a6:	4313      	orrs	r3, r2
 80090a8:	d051      	beq.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80090aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090b4:	d035      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80090b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090ba:	d82e      	bhi.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80090bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090c0:	d031      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80090c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090c6:	d828      	bhi.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80090c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090cc:	d01a      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80090ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090d2:	d822      	bhi.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d003      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80090d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090dc:	d007      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80090de:	e01c      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090e0:	4b7e      	ldr	r3, [pc, #504]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e4:	4a7d      	ldr	r2, [pc, #500]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80090e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80090ec:	e01c      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090f2:	3308      	adds	r3, #8
 80090f4:	2100      	movs	r1, #0
 80090f6:	4618      	mov	r0, r3
 80090f8:	f002 f876 	bl	800b1e8 <RCCEx_PLL2_Config>
 80090fc:	4603      	mov	r3, r0
 80090fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009102:	e011      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009108:	3328      	adds	r3, #40	@ 0x28
 800910a:	2100      	movs	r1, #0
 800910c:	4618      	mov	r0, r3
 800910e:	f002 f91d 	bl	800b34c <RCCEx_PLL3_Config>
 8009112:	4603      	mov	r3, r0
 8009114:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009118:	e006      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009120:	e002      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009122:	bf00      	nop
 8009124:	e000      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009128:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10a      	bne.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009130:	4b6a      	ldr	r3, [pc, #424]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009134:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800913c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800913e:	4a67      	ldr	r2, [pc, #412]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009140:	430b      	orrs	r3, r1
 8009142:	6513      	str	r3, [r2, #80]	@ 0x50
 8009144:	e003      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009146:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800914a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800914e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009156:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800915a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800915e:	2300      	movs	r3, #0
 8009160:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009164:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009168:	460b      	mov	r3, r1
 800916a:	4313      	orrs	r3, r2
 800916c:	d053      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800916e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009174:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009178:	d033      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800917a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800917e:	d82c      	bhi.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009180:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009184:	d02f      	beq.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009186:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800918a:	d826      	bhi.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800918c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009190:	d02b      	beq.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009192:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009196:	d820      	bhi.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009198:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800919c:	d012      	beq.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800919e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091a2:	d81a      	bhi.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d022      	beq.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80091a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091ac:	d115      	bne.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091b2:	3308      	adds	r3, #8
 80091b4:	2101      	movs	r1, #1
 80091b6:	4618      	mov	r0, r3
 80091b8:	f002 f816 	bl	800b1e8 <RCCEx_PLL2_Config>
 80091bc:	4603      	mov	r3, r0
 80091be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80091c2:	e015      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091c8:	3328      	adds	r3, #40	@ 0x28
 80091ca:	2101      	movs	r1, #1
 80091cc:	4618      	mov	r0, r3
 80091ce:	f002 f8bd 	bl	800b34c <RCCEx_PLL3_Config>
 80091d2:	4603      	mov	r3, r0
 80091d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80091d8:	e00a      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80091e0:	e006      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091e2:	bf00      	nop
 80091e4:	e004      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091e6:	bf00      	nop
 80091e8:	e002      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091ea:	bf00      	nop
 80091ec:	e000      	b.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80091ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10a      	bne.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80091f8:	4b38      	ldr	r3, [pc, #224]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80091fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009206:	4a35      	ldr	r2, [pc, #212]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009208:	430b      	orrs	r3, r1
 800920a:	6513      	str	r3, [r2, #80]	@ 0x50
 800920c:	e003      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800920e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009212:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009222:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009226:	2300      	movs	r3, #0
 8009228:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800922c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009230:	460b      	mov	r3, r1
 8009232:	4313      	orrs	r3, r2
 8009234:	d058      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800923a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800923e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009242:	d033      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009244:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009248:	d82c      	bhi.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800924a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800924e:	d02f      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009254:	d826      	bhi.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009256:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800925a:	d02b      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800925c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009260:	d820      	bhi.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009262:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009266:	d012      	beq.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800926c:	d81a      	bhi.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800926e:	2b00      	cmp	r3, #0
 8009270:	d022      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009272:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009276:	d115      	bne.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800927c:	3308      	adds	r3, #8
 800927e:	2101      	movs	r1, #1
 8009280:	4618      	mov	r0, r3
 8009282:	f001 ffb1 	bl	800b1e8 <RCCEx_PLL2_Config>
 8009286:	4603      	mov	r3, r0
 8009288:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800928c:	e015      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800928e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009292:	3328      	adds	r3, #40	@ 0x28
 8009294:	2101      	movs	r1, #1
 8009296:	4618      	mov	r0, r3
 8009298:	f002 f858 	bl	800b34c <RCCEx_PLL3_Config>
 800929c:	4603      	mov	r3, r0
 800929e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80092a2:	e00a      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80092aa:	e006      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80092ac:	bf00      	nop
 80092ae:	e004      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80092b0:	bf00      	nop
 80092b2:	e002      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80092b4:	bf00      	nop
 80092b6:	e000      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80092b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d10e      	bne.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80092c2:	4b06      	ldr	r3, [pc, #24]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80092ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80092d2:	4a02      	ldr	r2, [pc, #8]	@ (80092dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80092d4:	430b      	orrs	r3, r1
 80092d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80092d8:	e006      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80092da:	bf00      	nop
 80092dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80092e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80092f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80092f8:	2300      	movs	r3, #0
 80092fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80092fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009302:	460b      	mov	r3, r1
 8009304:	4313      	orrs	r3, r2
 8009306:	d037      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800930c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800930e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009312:	d00e      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009318:	d816      	bhi.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800931a:	2b00      	cmp	r3, #0
 800931c:	d018      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800931e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009322:	d111      	bne.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009324:	4bc4      	ldr	r3, [pc, #784]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009328:	4ac3      	ldr	r2, [pc, #780]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800932a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800932e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009330:	e00f      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009336:	3308      	adds	r3, #8
 8009338:	2101      	movs	r1, #1
 800933a:	4618      	mov	r0, r3
 800933c:	f001 ff54 	bl	800b1e8 <RCCEx_PLL2_Config>
 8009340:	4603      	mov	r3, r0
 8009342:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009346:	e004      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800934e:	e000      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009352:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10a      	bne.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800935a:	4bb7      	ldr	r3, [pc, #732]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800935c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800935e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009368:	4ab3      	ldr	r2, [pc, #716]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800936a:	430b      	orrs	r3, r1
 800936c:	6513      	str	r3, [r2, #80]	@ 0x50
 800936e:	e003      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009370:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009374:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009384:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009388:	2300      	movs	r3, #0
 800938a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800938e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009392:	460b      	mov	r3, r1
 8009394:	4313      	orrs	r3, r2
 8009396:	d039      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800939c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800939e:	2b03      	cmp	r3, #3
 80093a0:	d81c      	bhi.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80093a2:	a201      	add	r2, pc, #4	@ (adr r2, 80093a8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80093a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a8:	080093e5 	.word	0x080093e5
 80093ac:	080093b9 	.word	0x080093b9
 80093b0:	080093c7 	.word	0x080093c7
 80093b4:	080093e5 	.word	0x080093e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093b8:	4b9f      	ldr	r3, [pc, #636]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093bc:	4a9e      	ldr	r2, [pc, #632]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80093c4:	e00f      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80093c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ca:	3308      	adds	r3, #8
 80093cc:	2102      	movs	r1, #2
 80093ce:	4618      	mov	r0, r3
 80093d0:	f001 ff0a 	bl	800b1e8 <RCCEx_PLL2_Config>
 80093d4:	4603      	mov	r3, r0
 80093d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80093da:	e004      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80093e2:	e000      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80093e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10a      	bne.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80093ee:	4b92      	ldr	r3, [pc, #584]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093f2:	f023 0103 	bic.w	r1, r3, #3
 80093f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093fc:	4a8e      	ldr	r2, [pc, #568]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80093fe:	430b      	orrs	r3, r1
 8009400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009402:	e003      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009408:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800940c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009414:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009418:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800941c:	2300      	movs	r3, #0
 800941e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009422:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009426:	460b      	mov	r3, r1
 8009428:	4313      	orrs	r3, r2
 800942a:	f000 8099 	beq.w	8009560 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800942e:	4b83      	ldr	r3, [pc, #524]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a82      	ldr	r2, [pc, #520]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009438:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800943a:	f7f9 f9f1 	bl	8002820 <HAL_GetTick>
 800943e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009442:	e00b      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009444:	f7f9 f9ec 	bl	8002820 <HAL_GetTick>
 8009448:	4602      	mov	r2, r0
 800944a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	2b64      	cmp	r3, #100	@ 0x64
 8009452:	d903      	bls.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800945a:	e005      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800945c:	4b77      	ldr	r3, [pc, #476]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009464:	2b00      	cmp	r3, #0
 8009466:	d0ed      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009468:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800946c:	2b00      	cmp	r3, #0
 800946e:	d173      	bne.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009470:	4b71      	ldr	r3, [pc, #452]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009472:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009478:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800947c:	4053      	eors	r3, r2
 800947e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009482:	2b00      	cmp	r3, #0
 8009484:	d015      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009486:	4b6c      	ldr	r3, [pc, #432]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800948a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800948e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009492:	4b69      	ldr	r3, [pc, #420]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009496:	4a68      	ldr	r2, [pc, #416]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800949c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800949e:	4b66      	ldr	r3, [pc, #408]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094a2:	4a65      	ldr	r2, [pc, #404]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094a8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80094aa:	4a63      	ldr	r2, [pc, #396]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094b0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80094b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094be:	d118      	bne.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094c0:	f7f9 f9ae 	bl	8002820 <HAL_GetTick>
 80094c4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094c8:	e00d      	b.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094ca:	f7f9 f9a9 	bl	8002820 <HAL_GetTick>
 80094ce:	4602      	mov	r2, r0
 80094d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80094d4:	1ad2      	subs	r2, r2, r3
 80094d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80094da:	429a      	cmp	r2, r3
 80094dc:	d903      	bls.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80094e4:	e005      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094e6:	4b54      	ldr	r3, [pc, #336]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80094e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d0eb      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80094f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d129      	bne.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009506:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800950a:	d10e      	bne.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800950c:	4b4a      	ldr	r3, [pc, #296]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009518:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800951c:	091a      	lsrs	r2, r3, #4
 800951e:	4b48      	ldr	r3, [pc, #288]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009520:	4013      	ands	r3, r2
 8009522:	4a45      	ldr	r2, [pc, #276]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009524:	430b      	orrs	r3, r1
 8009526:	6113      	str	r3, [r2, #16]
 8009528:	e005      	b.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800952a:	4b43      	ldr	r3, [pc, #268]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	4a42      	ldr	r2, [pc, #264]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009530:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009534:	6113      	str	r3, [r2, #16]
 8009536:	4b40      	ldr	r3, [pc, #256]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009538:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800953a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800953e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009546:	4a3c      	ldr	r2, [pc, #240]	@ (8009638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009548:	430b      	orrs	r3, r1
 800954a:	6713      	str	r3, [r2, #112]	@ 0x70
 800954c:	e008      	b.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800954e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009552:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8009556:	e003      	b.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009558:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800955c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	f002 0301 	and.w	r3, r2, #1
 800956c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009570:	2300      	movs	r3, #0
 8009572:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009576:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800957a:	460b      	mov	r3, r1
 800957c:	4313      	orrs	r3, r2
 800957e:	f000 808f 	beq.w	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009586:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009588:	2b28      	cmp	r3, #40	@ 0x28
 800958a:	d871      	bhi.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800958c:	a201      	add	r2, pc, #4	@ (adr r2, 8009594 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800958e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009592:	bf00      	nop
 8009594:	08009679 	.word	0x08009679
 8009598:	08009671 	.word	0x08009671
 800959c:	08009671 	.word	0x08009671
 80095a0:	08009671 	.word	0x08009671
 80095a4:	08009671 	.word	0x08009671
 80095a8:	08009671 	.word	0x08009671
 80095ac:	08009671 	.word	0x08009671
 80095b0:	08009671 	.word	0x08009671
 80095b4:	08009645 	.word	0x08009645
 80095b8:	08009671 	.word	0x08009671
 80095bc:	08009671 	.word	0x08009671
 80095c0:	08009671 	.word	0x08009671
 80095c4:	08009671 	.word	0x08009671
 80095c8:	08009671 	.word	0x08009671
 80095cc:	08009671 	.word	0x08009671
 80095d0:	08009671 	.word	0x08009671
 80095d4:	0800965b 	.word	0x0800965b
 80095d8:	08009671 	.word	0x08009671
 80095dc:	08009671 	.word	0x08009671
 80095e0:	08009671 	.word	0x08009671
 80095e4:	08009671 	.word	0x08009671
 80095e8:	08009671 	.word	0x08009671
 80095ec:	08009671 	.word	0x08009671
 80095f0:	08009671 	.word	0x08009671
 80095f4:	08009679 	.word	0x08009679
 80095f8:	08009671 	.word	0x08009671
 80095fc:	08009671 	.word	0x08009671
 8009600:	08009671 	.word	0x08009671
 8009604:	08009671 	.word	0x08009671
 8009608:	08009671 	.word	0x08009671
 800960c:	08009671 	.word	0x08009671
 8009610:	08009671 	.word	0x08009671
 8009614:	08009679 	.word	0x08009679
 8009618:	08009671 	.word	0x08009671
 800961c:	08009671 	.word	0x08009671
 8009620:	08009671 	.word	0x08009671
 8009624:	08009671 	.word	0x08009671
 8009628:	08009671 	.word	0x08009671
 800962c:	08009671 	.word	0x08009671
 8009630:	08009671 	.word	0x08009671
 8009634:	08009679 	.word	0x08009679
 8009638:	58024400 	.word	0x58024400
 800963c:	58024800 	.word	0x58024800
 8009640:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009648:	3308      	adds	r3, #8
 800964a:	2101      	movs	r1, #1
 800964c:	4618      	mov	r0, r3
 800964e:	f001 fdcb 	bl	800b1e8 <RCCEx_PLL2_Config>
 8009652:	4603      	mov	r3, r0
 8009654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009658:	e00f      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800965a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800965e:	3328      	adds	r3, #40	@ 0x28
 8009660:	2101      	movs	r1, #1
 8009662:	4618      	mov	r0, r3
 8009664:	f001 fe72 	bl	800b34c <RCCEx_PLL3_Config>
 8009668:	4603      	mov	r3, r0
 800966a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800966e:	e004      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009676:	e000      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800967a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10a      	bne.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009682:	4bbf      	ldr	r3, [pc, #764]	@ (8009980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009686:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800968a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800968e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009690:	4abb      	ldr	r2, [pc, #748]	@ (8009980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009692:	430b      	orrs	r3, r1
 8009694:	6553      	str	r3, [r2, #84]	@ 0x54
 8009696:	e003      	b.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009698:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800969c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80096a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a8:	f002 0302 	and.w	r3, r2, #2
 80096ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80096b0:	2300      	movs	r3, #0
 80096b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4313      	orrs	r3, r2
 80096be:	d041      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80096c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096c6:	2b05      	cmp	r3, #5
 80096c8:	d824      	bhi.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80096ca:	a201      	add	r2, pc, #4	@ (adr r2, 80096d0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80096cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d0:	0800971d 	.word	0x0800971d
 80096d4:	080096e9 	.word	0x080096e9
 80096d8:	080096ff 	.word	0x080096ff
 80096dc:	0800971d 	.word	0x0800971d
 80096e0:	0800971d 	.word	0x0800971d
 80096e4:	0800971d 	.word	0x0800971d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ec:	3308      	adds	r3, #8
 80096ee:	2101      	movs	r1, #1
 80096f0:	4618      	mov	r0, r3
 80096f2:	f001 fd79 	bl	800b1e8 <RCCEx_PLL2_Config>
 80096f6:	4603      	mov	r3, r0
 80096f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80096fc:	e00f      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009702:	3328      	adds	r3, #40	@ 0x28
 8009704:	2101      	movs	r1, #1
 8009706:	4618      	mov	r0, r3
 8009708:	f001 fe20 	bl	800b34c <RCCEx_PLL3_Config>
 800970c:	4603      	mov	r3, r0
 800970e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009712:	e004      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800971a:	e000      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800971c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800971e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10a      	bne.n	800973c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009726:	4b96      	ldr	r3, [pc, #600]	@ (8009980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800972a:	f023 0107 	bic.w	r1, r3, #7
 800972e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009734:	4a92      	ldr	r2, [pc, #584]	@ (8009980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009736:	430b      	orrs	r3, r1
 8009738:	6553      	str	r3, [r2, #84]	@ 0x54
 800973a:	e003      	b.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800973c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009740:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974c:	f002 0304 	and.w	r3, r2, #4
 8009750:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009754:	2300      	movs	r3, #0
 8009756:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800975a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800975e:	460b      	mov	r3, r1
 8009760:	4313      	orrs	r3, r2
 8009762:	d044      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800976c:	2b05      	cmp	r3, #5
 800976e:	d825      	bhi.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009770:	a201      	add	r2, pc, #4	@ (adr r2, 8009778 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009776:	bf00      	nop
 8009778:	080097c5 	.word	0x080097c5
 800977c:	08009791 	.word	0x08009791
 8009780:	080097a7 	.word	0x080097a7
 8009784:	080097c5 	.word	0x080097c5
 8009788:	080097c5 	.word	0x080097c5
 800978c:	080097c5 	.word	0x080097c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009794:	3308      	adds	r3, #8
 8009796:	2101      	movs	r1, #1
 8009798:	4618      	mov	r0, r3
 800979a:	f001 fd25 	bl	800b1e8 <RCCEx_PLL2_Config>
 800979e:	4603      	mov	r3, r0
 80097a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80097a4:	e00f      	b.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097aa:	3328      	adds	r3, #40	@ 0x28
 80097ac:	2101      	movs	r1, #1
 80097ae:	4618      	mov	r0, r3
 80097b0:	f001 fdcc 	bl	800b34c <RCCEx_PLL3_Config>
 80097b4:	4603      	mov	r3, r0
 80097b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80097ba:	e004      	b.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80097c2:	e000      	b.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80097c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d10b      	bne.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80097ce:	4b6c      	ldr	r3, [pc, #432]	@ (8009980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80097d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097d2:	f023 0107 	bic.w	r1, r3, #7
 80097d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097de:	4a68      	ldr	r2, [pc, #416]	@ (8009980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80097e0:	430b      	orrs	r3, r1
 80097e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80097e4:	e003      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80097ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	f002 0320 	and.w	r3, r2, #32
 80097fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80097fe:	2300      	movs	r3, #0
 8009800:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009804:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009808:	460b      	mov	r3, r1
 800980a:	4313      	orrs	r3, r2
 800980c:	d055      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800980e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009816:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800981a:	d033      	beq.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800981c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009820:	d82c      	bhi.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009826:	d02f      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800982c:	d826      	bhi.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800982e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009832:	d02b      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009834:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009838:	d820      	bhi.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800983a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800983e:	d012      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009844:	d81a      	bhi.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009846:	2b00      	cmp	r3, #0
 8009848:	d022      	beq.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800984a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800984e:	d115      	bne.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009854:	3308      	adds	r3, #8
 8009856:	2100      	movs	r1, #0
 8009858:	4618      	mov	r0, r3
 800985a:	f001 fcc5 	bl	800b1e8 <RCCEx_PLL2_Config>
 800985e:	4603      	mov	r3, r0
 8009860:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009864:	e015      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800986a:	3328      	adds	r3, #40	@ 0x28
 800986c:	2102      	movs	r1, #2
 800986e:	4618      	mov	r0, r3
 8009870:	f001 fd6c 	bl	800b34c <RCCEx_PLL3_Config>
 8009874:	4603      	mov	r3, r0
 8009876:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800987a:	e00a      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009882:	e006      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009884:	bf00      	nop
 8009886:	e004      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009888:	bf00      	nop
 800988a:	e002      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800988c:	bf00      	nop
 800988e:	e000      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009892:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10b      	bne.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800989a:	4b39      	ldr	r3, [pc, #228]	@ (8009980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800989c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800989e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80098a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098aa:	4a35      	ldr	r2, [pc, #212]	@ (8009980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80098ac:	430b      	orrs	r3, r1
 80098ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80098b0:	e003      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80098ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80098c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80098ca:	2300      	movs	r3, #0
 80098cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80098d0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80098d4:	460b      	mov	r3, r1
 80098d6:	4313      	orrs	r3, r2
 80098d8:	d058      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80098da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80098e6:	d033      	beq.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80098e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80098ec:	d82c      	bhi.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098f2:	d02f      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80098f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098f8:	d826      	bhi.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80098fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098fe:	d02b      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009900:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009904:	d820      	bhi.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009906:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800990a:	d012      	beq.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800990c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009910:	d81a      	bhi.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009912:	2b00      	cmp	r3, #0
 8009914:	d022      	beq.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009916:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800991a:	d115      	bne.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800991c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009920:	3308      	adds	r3, #8
 8009922:	2100      	movs	r1, #0
 8009924:	4618      	mov	r0, r3
 8009926:	f001 fc5f 	bl	800b1e8 <RCCEx_PLL2_Config>
 800992a:	4603      	mov	r3, r0
 800992c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009930:	e015      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009936:	3328      	adds	r3, #40	@ 0x28
 8009938:	2102      	movs	r1, #2
 800993a:	4618      	mov	r0, r3
 800993c:	f001 fd06 	bl	800b34c <RCCEx_PLL3_Config>
 8009940:	4603      	mov	r3, r0
 8009942:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009946:	e00a      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800994e:	e006      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009950:	bf00      	nop
 8009952:	e004      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009954:	bf00      	nop
 8009956:	e002      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009958:	bf00      	nop
 800995a:	e000      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800995c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800995e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10e      	bne.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009966:	4b06      	ldr	r3, [pc, #24]	@ (8009980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800996a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800996e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009972:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009976:	4a02      	ldr	r2, [pc, #8]	@ (8009980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009978:	430b      	orrs	r3, r1
 800997a:	6593      	str	r3, [r2, #88]	@ 0x58
 800997c:	e006      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800997e:	bf00      	nop
 8009980:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009984:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009988:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800998c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009998:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800999c:	2300      	movs	r3, #0
 800999e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80099a6:	460b      	mov	r3, r1
 80099a8:	4313      	orrs	r3, r2
 80099aa:	d055      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80099ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80099b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80099b8:	d033      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80099ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80099be:	d82c      	bhi.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099c4:	d02f      	beq.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80099c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099ca:	d826      	bhi.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80099d0:	d02b      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80099d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80099d6:	d820      	bhi.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099dc:	d012      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80099de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099e2:	d81a      	bhi.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d022      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80099e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099ec:	d115      	bne.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099f2:	3308      	adds	r3, #8
 80099f4:	2100      	movs	r1, #0
 80099f6:	4618      	mov	r0, r3
 80099f8:	f001 fbf6 	bl	800b1e8 <RCCEx_PLL2_Config>
 80099fc:	4603      	mov	r3, r0
 80099fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009a02:	e015      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a08:	3328      	adds	r3, #40	@ 0x28
 8009a0a:	2102      	movs	r1, #2
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f001 fc9d 	bl	800b34c <RCCEx_PLL3_Config>
 8009a12:	4603      	mov	r3, r0
 8009a14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009a18:	e00a      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009a20:	e006      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009a22:	bf00      	nop
 8009a24:	e004      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009a26:	bf00      	nop
 8009a28:	e002      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009a2a:	bf00      	nop
 8009a2c:	e000      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d10b      	bne.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009a38:	4ba0      	ldr	r3, [pc, #640]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a3c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a48:	4a9c      	ldr	r2, [pc, #624]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009a4a:	430b      	orrs	r3, r1
 8009a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a4e:	e003      	b.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a60:	f002 0308 	and.w	r3, r2, #8
 8009a64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a6e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009a72:	460b      	mov	r3, r1
 8009a74:	4313      	orrs	r3, r2
 8009a76:	d01e      	beq.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a84:	d10c      	bne.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a8a:	3328      	adds	r3, #40	@ 0x28
 8009a8c:	2102      	movs	r1, #2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f001 fc5c 	bl	800b34c <RCCEx_PLL3_Config>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d002      	beq.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009aa0:	4b86      	ldr	r3, [pc, #536]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aa4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ab0:	4a82      	ldr	r2, [pc, #520]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ab2:	430b      	orrs	r3, r1
 8009ab4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	f002 0310 	and.w	r3, r2, #16
 8009ac2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009acc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	d01e      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ae2:	d10c      	bne.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae8:	3328      	adds	r3, #40	@ 0x28
 8009aea:	2102      	movs	r1, #2
 8009aec:	4618      	mov	r0, r3
 8009aee:	f001 fc2d 	bl	800b34c <RCCEx_PLL3_Config>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d002      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009afe:	4b6f      	ldr	r3, [pc, #444]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b0e:	4a6b      	ldr	r2, [pc, #428]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b10:	430b      	orrs	r3, r1
 8009b12:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009b20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b22:	2300      	movs	r3, #0
 8009b24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009b26:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	d03e      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b3c:	d022      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009b3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b42:	d81b      	bhi.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d003      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b4c:	d00b      	beq.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009b4e:	e015      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b54:	3308      	adds	r3, #8
 8009b56:	2100      	movs	r1, #0
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f001 fb45 	bl	800b1e8 <RCCEx_PLL2_Config>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b64:	e00f      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b6a:	3328      	adds	r3, #40	@ 0x28
 8009b6c:	2102      	movs	r1, #2
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f001 fbec 	bl	800b34c <RCCEx_PLL3_Config>
 8009b74:	4603      	mov	r3, r0
 8009b76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b7a:	e004      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b82:	e000      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10b      	bne.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009b8e:	4b4b      	ldr	r3, [pc, #300]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b92:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b9e:	4a47      	ldr	r2, [pc, #284]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ba0:	430b      	orrs	r3, r1
 8009ba2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ba4:	e003      	b.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009baa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009bba:	673b      	str	r3, [r7, #112]	@ 0x70
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	677b      	str	r3, [r7, #116]	@ 0x74
 8009bc0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	d03b      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009bd2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009bd6:	d01f      	beq.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009bd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009bdc:	d818      	bhi.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009be2:	d003      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009be4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009be8:	d007      	beq.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009bea:	e011      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bec:	4b33      	ldr	r3, [pc, #204]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf0:	4a32      	ldr	r2, [pc, #200]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009bf8:	e00f      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bfe:	3328      	adds	r3, #40	@ 0x28
 8009c00:	2101      	movs	r1, #1
 8009c02:	4618      	mov	r0, r3
 8009c04:	f001 fba2 	bl	800b34c <RCCEx_PLL3_Config>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009c0e:	e004      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c16:	e000      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10b      	bne.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009c22:	4b26      	ldr	r3, [pc, #152]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c26:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c32:	4a22      	ldr	r2, [pc, #136]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c34:	430b      	orrs	r3, r1
 8009c36:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c38:	e003      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009c4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c50:	2300      	movs	r3, #0
 8009c52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c54:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009c58:	460b      	mov	r3, r1
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	d034      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d003      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c6c:	d007      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009c6e:	e011      	b.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c70:	4b12      	ldr	r3, [pc, #72]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c74:	4a11      	ldr	r2, [pc, #68]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009c76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c7c:	e00e      	b.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c82:	3308      	adds	r3, #8
 8009c84:	2102      	movs	r1, #2
 8009c86:	4618      	mov	r0, r3
 8009c88:	f001 faae 	bl	800b1e8 <RCCEx_PLL2_Config>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009c92:	e003      	b.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10d      	bne.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009ca4:	4b05      	ldr	r3, [pc, #20]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ca8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cb2:	4a02      	ldr	r2, [pc, #8]	@ (8009cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009cb4:	430b      	orrs	r3, r1
 8009cb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009cb8:	e006      	b.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009cba:	bf00      	nop
 8009cbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009cd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cda:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	d00c      	beq.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ce8:	3328      	adds	r3, #40	@ 0x28
 8009cea:	2102      	movs	r1, #2
 8009cec:	4618      	mov	r0, r3
 8009cee:	f001 fb2d 	bl	800b34c <RCCEx_PLL3_Config>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d002      	beq.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d06:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009d0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d10:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009d14:	460b      	mov	r3, r1
 8009d16:	4313      	orrs	r3, r2
 8009d18:	d036      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d24:	d018      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009d26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d2a:	d811      	bhi.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d30:	d014      	beq.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009d32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d36:	d80b      	bhi.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d011      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d40:	d106      	bne.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d42:	4bb7      	ldr	r3, [pc, #732]	@ (800a020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d46:	4ab6      	ldr	r2, [pc, #728]	@ (800a020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009d4e:	e008      	b.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009d56:	e004      	b.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d58:	bf00      	nop
 8009d5a:	e002      	b.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d5c:	bf00      	nop
 8009d5e:	e000      	b.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10a      	bne.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d6a:	4bad      	ldr	r3, [pc, #692]	@ (800a020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d78:	4aa9      	ldr	r2, [pc, #676]	@ (800a020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009d7a:	430b      	orrs	r3, r1
 8009d7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d7e:	e003      	b.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d90:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009d94:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d96:	2300      	movs	r3, #0
 8009d98:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d9a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4313      	orrs	r3, r2
 8009da2:	d009      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009da4:	4b9e      	ldr	r3, [pc, #632]	@ (800a020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009da8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009db2:	4a9b      	ldr	r2, [pc, #620]	@ (800a020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009db4:	430b      	orrs	r3, r1
 8009db6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	d009      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009dd4:	4b92      	ldr	r3, [pc, #584]	@ (800a020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dd8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009de2:	4a8f      	ldr	r2, [pc, #572]	@ (800a020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009de4:	430b      	orrs	r3, r1
 8009de6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009df4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009df6:	2300      	movs	r3, #0
 8009df8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dfa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4313      	orrs	r3, r2
 8009e02:	d00e      	beq.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009e04:	4b86      	ldr	r3, [pc, #536]	@ (800a020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	4a85      	ldr	r2, [pc, #532]	@ (800a020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009e0e:	6113      	str	r3, [r2, #16]
 8009e10:	4b83      	ldr	r3, [pc, #524]	@ (800a020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e12:	6919      	ldr	r1, [r3, #16]
 8009e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009e1c:	4a80      	ldr	r2, [pc, #512]	@ (800a020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e1e:	430b      	orrs	r3, r1
 8009e20:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e30:	2300      	movs	r3, #0
 8009e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e34:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	d009      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009e3e:	4b78      	ldr	r3, [pc, #480]	@ (800a020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e42:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e4c:	4a74      	ldr	r2, [pc, #464]	@ (800a020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e4e:	430b      	orrs	r3, r1
 8009e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009e5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e60:	2300      	movs	r3, #0
 8009e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e64:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009e68:	460b      	mov	r3, r1
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	d00a      	beq.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e6e:	4b6c      	ldr	r3, [pc, #432]	@ (800a020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e72:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e7e:	4a68      	ldr	r2, [pc, #416]	@ (800a020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009e80:	430b      	orrs	r3, r1
 8009e82:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009e90:	f003 0301 	and.w	r3, r3, #1
 8009e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e96:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	d011      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ea4:	3308      	adds	r3, #8
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f001 f99d 	bl	800b1e8 <RCCEx_PLL2_Config>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009eb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ebc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ec0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ecc:	2100      	movs	r1, #0
 8009ece:	6239      	str	r1, [r7, #32]
 8009ed0:	f003 0302 	and.w	r3, r3, #2
 8009ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ed6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009eda:	460b      	mov	r3, r1
 8009edc:	4313      	orrs	r3, r2
 8009ede:	d011      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ee4:	3308      	adds	r3, #8
 8009ee6:	2101      	movs	r1, #1
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f001 f97d 	bl	800b1e8 <RCCEx_PLL2_Config>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009ef4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d003      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009efc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	61b9      	str	r1, [r7, #24]
 8009f10:	f003 0304 	and.w	r3, r3, #4
 8009f14:	61fb      	str	r3, [r7, #28]
 8009f16:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	d011      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f24:	3308      	adds	r3, #8
 8009f26:	2102      	movs	r1, #2
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f001 f95d 	bl	800b1e8 <RCCEx_PLL2_Config>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009f34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d003      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	6139      	str	r1, [r7, #16]
 8009f50:	f003 0308 	and.w	r3, r3, #8
 8009f54:	617b      	str	r3, [r7, #20]
 8009f56:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	d011      	beq.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f64:	3328      	adds	r3, #40	@ 0x28
 8009f66:	2100      	movs	r1, #0
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f001 f9ef 	bl	800b34c <RCCEx_PLL3_Config>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8009f74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d003      	beq.n	8009f84 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	60b9      	str	r1, [r7, #8]
 8009f90:	f003 0310 	and.w	r3, r3, #16
 8009f94:	60fb      	str	r3, [r7, #12]
 8009f96:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	d011      	beq.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fa4:	3328      	adds	r3, #40	@ 0x28
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f001 f9cf 	bl	800b34c <RCCEx_PLL3_Config>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d003      	beq.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	2100      	movs	r1, #0
 8009fce:	6039      	str	r1, [r7, #0]
 8009fd0:	f003 0320 	and.w	r3, r3, #32
 8009fd4:	607b      	str	r3, [r7, #4]
 8009fd6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	d011      	beq.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fe4:	3328      	adds	r3, #40	@ 0x28
 8009fe6:	2102      	movs	r1, #2
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f001 f9af 	bl	800b34c <RCCEx_PLL3_Config>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009ff4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d003      	beq.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ffc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a000:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a004:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d101      	bne.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	e000      	b.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a010:	2301      	movs	r3, #1
}
 800a012:	4618      	mov	r0, r3
 800a014:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a018:	46bd      	mov	sp, r7
 800a01a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a01e:	bf00      	nop
 800a020:	58024400 	.word	0x58024400

0800a024 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b090      	sub	sp, #64	@ 0x40
 800a028:	af00      	add	r7, sp, #0
 800a02a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a02e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a032:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a036:	430b      	orrs	r3, r1
 800a038:	f040 8094 	bne.w	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a03c:	4b9b      	ldr	r3, [pc, #620]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a03e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a040:	f003 0307 	and.w	r3, r3, #7
 800a044:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a048:	2b04      	cmp	r3, #4
 800a04a:	f200 8087 	bhi.w	800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a04e:	a201      	add	r2, pc, #4	@ (adr r2, 800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a054:	0800a069 	.word	0x0800a069
 800a058:	0800a091 	.word	0x0800a091
 800a05c:	0800a0b9 	.word	0x0800a0b9
 800a060:	0800a155 	.word	0x0800a155
 800a064:	0800a0e1 	.word	0x0800a0e1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a068:	4b90      	ldr	r3, [pc, #576]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a070:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a074:	d108      	bne.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a07a:	4618      	mov	r0, r3
 800a07c:	f000 ff62 	bl	800af44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a084:	f000 bc93 	b.w	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a088:	2300      	movs	r3, #0
 800a08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a08c:	f000 bc8f 	b.w	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a090:	4b86      	ldr	r3, [pc, #536]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a09c:	d108      	bne.n	800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a09e:	f107 0318 	add.w	r3, r7, #24
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 fca6 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ac:	f000 bc7f 	b.w	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0b4:	f000 bc7b 	b.w	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0b8:	4b7c      	ldr	r3, [pc, #496]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0c4:	d108      	bne.n	800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0c6:	f107 030c 	add.w	r3, r7, #12
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f000 fde6 	bl	800ac9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0d4:	f000 bc6b 	b.w	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0dc:	f000 bc67 	b.w	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0e0:	4b72      	ldr	r3, [pc, #456]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a0e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0ea:	4b70      	ldr	r3, [pc, #448]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0304 	and.w	r3, r3, #4
 800a0f2:	2b04      	cmp	r3, #4
 800a0f4:	d10c      	bne.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a0f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d109      	bne.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0fc:	4b6b      	ldr	r3, [pc, #428]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	08db      	lsrs	r3, r3, #3
 800a102:	f003 0303 	and.w	r3, r3, #3
 800a106:	4a6a      	ldr	r2, [pc, #424]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a108:	fa22 f303 	lsr.w	r3, r2, r3
 800a10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a10e:	e01f      	b.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a110:	4b66      	ldr	r3, [pc, #408]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a11c:	d106      	bne.n	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a11e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a120:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a124:	d102      	bne.n	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a126:	4b63      	ldr	r3, [pc, #396]	@ (800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a128:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a12a:	e011      	b.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a12c:	4b5f      	ldr	r3, [pc, #380]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a134:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a138:	d106      	bne.n	800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a13a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a13c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a140:	d102      	bne.n	800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a142:	4b5d      	ldr	r3, [pc, #372]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a144:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a146:	e003      	b.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a148:	2300      	movs	r3, #0
 800a14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a14c:	f000 bc2f 	b.w	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a150:	f000 bc2d 	b.w	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a154:	4b59      	ldr	r3, [pc, #356]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a158:	f000 bc29 	b.w	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a15c:	2300      	movs	r3, #0
 800a15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a160:	f000 bc25 	b.w	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a164:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a168:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a16c:	430b      	orrs	r3, r1
 800a16e:	f040 80a7 	bne.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a172:	4b4e      	ldr	r3, [pc, #312]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a176:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a17a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a182:	d054      	beq.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a186:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a18a:	f200 808b 	bhi.w	800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a190:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a194:	f000 8083 	beq.w	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a19e:	f200 8081 	bhi.w	800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1a8:	d02f      	beq.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1b0:	d878      	bhi.n	800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d004      	beq.n	800a1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1be:	d012      	beq.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a1c0:	e070      	b.n	800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1c2:	4b3a      	ldr	r3, [pc, #232]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1ce:	d107      	bne.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f000 feb5 	bl	800af44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1de:	e3e6      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1e4:	e3e3      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1e6:	4b31      	ldr	r3, [pc, #196]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1f2:	d107      	bne.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1f4:	f107 0318 	add.w	r3, r7, #24
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f000 fbfb 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a202:	e3d4      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a208:	e3d1      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a20a:	4b28      	ldr	r3, [pc, #160]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a216:	d107      	bne.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a218:	f107 030c 	add.w	r3, r7, #12
 800a21c:	4618      	mov	r0, r3
 800a21e:	f000 fd3d 	bl	800ac9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a226:	e3c2      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a22c:	e3bf      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a22e:	4b1f      	ldr	r3, [pc, #124]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a232:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a236:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a238:	4b1c      	ldr	r3, [pc, #112]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 0304 	and.w	r3, r3, #4
 800a240:	2b04      	cmp	r3, #4
 800a242:	d10c      	bne.n	800a25e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a246:	2b00      	cmp	r3, #0
 800a248:	d109      	bne.n	800a25e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a24a:	4b18      	ldr	r3, [pc, #96]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	08db      	lsrs	r3, r3, #3
 800a250:	f003 0303 	and.w	r3, r3, #3
 800a254:	4a16      	ldr	r2, [pc, #88]	@ (800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a256:	fa22 f303 	lsr.w	r3, r2, r3
 800a25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a25c:	e01e      	b.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a25e:	4b13      	ldr	r3, [pc, #76]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a26a:	d106      	bne.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a26c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a26e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a272:	d102      	bne.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a274:	4b0f      	ldr	r3, [pc, #60]	@ (800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a278:	e010      	b.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a27a:	4b0c      	ldr	r3, [pc, #48]	@ (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a282:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a286:	d106      	bne.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a28a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a28e:	d102      	bne.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a290:	4b09      	ldr	r3, [pc, #36]	@ (800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a294:	e002      	b.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a296:	2300      	movs	r3, #0
 800a298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a29a:	e388      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a29c:	e387      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a29e:	4b07      	ldr	r3, [pc, #28]	@ (800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a2:	e384      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a8:	e381      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a2aa:	bf00      	nop
 800a2ac:	58024400 	.word	0x58024400
 800a2b0:	03d09000 	.word	0x03d09000
 800a2b4:	003d0900 	.word	0x003d0900
 800a2b8:	007a1200 	.word	0x007a1200
 800a2bc:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a2c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2c4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a2c8:	430b      	orrs	r3, r1
 800a2ca:	f040 809c 	bne.w	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a2ce:	4b9e      	ldr	r3, [pc, #632]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a2d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2d2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a2d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2de:	d054      	beq.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2e6:	f200 808b 	bhi.w	800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a2f0:	f000 8083 	beq.w	800a3fa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a2fa:	f200 8081 	bhi.w	800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a300:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a304:	d02f      	beq.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a308:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a30c:	d878      	bhi.n	800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a310:	2b00      	cmp	r3, #0
 800a312:	d004      	beq.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a316:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a31a:	d012      	beq.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a31c:	e070      	b.n	800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a31e:	4b8a      	ldr	r3, [pc, #552]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a326:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a32a:	d107      	bne.n	800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a32c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a330:	4618      	mov	r0, r3
 800a332:	f000 fe07 	bl	800af44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a33a:	e338      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a33c:	2300      	movs	r3, #0
 800a33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a340:	e335      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a342:	4b81      	ldr	r3, [pc, #516]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a34a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a34e:	d107      	bne.n	800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a350:	f107 0318 	add.w	r3, r7, #24
 800a354:	4618      	mov	r0, r3
 800a356:	f000 fb4d 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a35e:	e326      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a360:	2300      	movs	r3, #0
 800a362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a364:	e323      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a366:	4b78      	ldr	r3, [pc, #480]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a36e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a372:	d107      	bne.n	800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a374:	f107 030c 	add.w	r3, r7, #12
 800a378:	4618      	mov	r0, r3
 800a37a:	f000 fc8f 	bl	800ac9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a382:	e314      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a384:	2300      	movs	r3, #0
 800a386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a388:	e311      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a38a:	4b6f      	ldr	r3, [pc, #444]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a38c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a38e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a392:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a394:	4b6c      	ldr	r3, [pc, #432]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b04      	cmp	r3, #4
 800a39e:	d10c      	bne.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a3a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d109      	bne.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3a6:	4b68      	ldr	r3, [pc, #416]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	08db      	lsrs	r3, r3, #3
 800a3ac:	f003 0303 	and.w	r3, r3, #3
 800a3b0:	4a66      	ldr	r2, [pc, #408]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a3b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3b8:	e01e      	b.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3ba:	4b63      	ldr	r3, [pc, #396]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3c6:	d106      	bne.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a3c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3ce:	d102      	bne.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3d0:	4b5f      	ldr	r3, [pc, #380]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a3d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3d4:	e010      	b.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3d6:	4b5c      	ldr	r3, [pc, #368]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3e2:	d106      	bne.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a3e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3ea:	d102      	bne.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3ec:	4b59      	ldr	r3, [pc, #356]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3f0:	e002      	b.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3f6:	e2da      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a3f8:	e2d9      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3fa:	4b57      	ldr	r3, [pc, #348]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3fe:	e2d6      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a400:	2300      	movs	r3, #0
 800a402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a404:	e2d3      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a40a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a40e:	430b      	orrs	r3, r1
 800a410:	f040 80a7 	bne.w	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a414:	4b4c      	ldr	r3, [pc, #304]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a418:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a41c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a420:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a424:	d055      	beq.n	800a4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a428:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a42c:	f200 8096 	bhi.w	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a432:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a436:	f000 8084 	beq.w	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a440:	f200 808c 	bhi.w	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a44a:	d030      	beq.n	800a4ae <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a452:	f200 8083 	bhi.w	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d004      	beq.n	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a45e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a462:	d012      	beq.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a464:	e07a      	b.n	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a466:	4b38      	ldr	r3, [pc, #224]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a46e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a472:	d107      	bne.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 fd63 	bl	800af44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a482:	e294      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a484:	2300      	movs	r3, #0
 800a486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a488:	e291      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a48a:	4b2f      	ldr	r3, [pc, #188]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a492:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a496:	d107      	bne.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a498:	f107 0318 	add.w	r3, r7, #24
 800a49c:	4618      	mov	r0, r3
 800a49e:	f000 faa9 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4a6:	e282      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ac:	e27f      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4ae:	4b26      	ldr	r3, [pc, #152]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4ba:	d107      	bne.n	800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4bc:	f107 030c 	add.w	r3, r7, #12
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f000 fbeb 	bl	800ac9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ca:	e270      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d0:	e26d      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4d2:	4b1d      	ldr	r3, [pc, #116]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a4da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4dc:	4b1a      	ldr	r3, [pc, #104]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 0304 	and.w	r3, r3, #4
 800a4e4:	2b04      	cmp	r3, #4
 800a4e6:	d10c      	bne.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a4e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d109      	bne.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4ee:	4b16      	ldr	r3, [pc, #88]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	08db      	lsrs	r3, r3, #3
 800a4f4:	f003 0303 	and.w	r3, r3, #3
 800a4f8:	4a14      	ldr	r2, [pc, #80]	@ (800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a4fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a500:	e01e      	b.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a502:	4b11      	ldr	r3, [pc, #68]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a50a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a50e:	d106      	bne.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a512:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a516:	d102      	bne.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a518:	4b0d      	ldr	r3, [pc, #52]	@ (800a550 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a51a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a51c:	e010      	b.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a51e:	4b0a      	ldr	r3, [pc, #40]	@ (800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a526:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a52a:	d106      	bne.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a52c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a52e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a532:	d102      	bne.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a534:	4b07      	ldr	r3, [pc, #28]	@ (800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a538:	e002      	b.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a53a:	2300      	movs	r3, #0
 800a53c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a53e:	e236      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a540:	e235      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a542:	4b05      	ldr	r3, [pc, #20]	@ (800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a546:	e232      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a548:	58024400 	.word	0x58024400
 800a54c:	03d09000 	.word	0x03d09000
 800a550:	003d0900 	.word	0x003d0900
 800a554:	007a1200 	.word	0x007a1200
 800a558:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a55c:	2300      	movs	r3, #0
 800a55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a560:	e225      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a562:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a566:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a56a:	430b      	orrs	r3, r1
 800a56c:	f040 8085 	bne.w	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a570:	4b9c      	ldr	r3, [pc, #624]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a574:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a578:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a57c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a580:	d06b      	beq.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a588:	d874      	bhi.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a58c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a590:	d056      	beq.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a594:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a598:	d86c      	bhi.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a5a0:	d03b      	beq.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a5a8:	d864      	bhi.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5b0:	d021      	beq.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5b8:	d85c      	bhi.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d004      	beq.n	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5c6:	d004      	beq.n	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a5c8:	e054      	b.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a5ca:	f7fe fb75 	bl	8008cb8 <HAL_RCC_GetPCLK1Freq>
 800a5ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a5d0:	e1ed      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5d2:	4b84      	ldr	r3, [pc, #528]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5de:	d107      	bne.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5e0:	f107 0318 	add.w	r3, r7, #24
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f000 fa05 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5ee:	e1de      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5f4:	e1db      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5f6:	4b7b      	ldr	r3, [pc, #492]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a602:	d107      	bne.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a604:	f107 030c 	add.w	r3, r7, #12
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 fb47 	bl	800ac9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a612:	e1cc      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a614:	2300      	movs	r3, #0
 800a616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a618:	e1c9      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a61a:	4b72      	ldr	r3, [pc, #456]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 0304 	and.w	r3, r3, #4
 800a622:	2b04      	cmp	r3, #4
 800a624:	d109      	bne.n	800a63a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a626:	4b6f      	ldr	r3, [pc, #444]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	08db      	lsrs	r3, r3, #3
 800a62c:	f003 0303 	and.w	r3, r3, #3
 800a630:	4a6d      	ldr	r2, [pc, #436]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a632:	fa22 f303 	lsr.w	r3, r2, r3
 800a636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a638:	e1b9      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a63a:	2300      	movs	r3, #0
 800a63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a63e:	e1b6      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a640:	4b68      	ldr	r3, [pc, #416]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a64c:	d102      	bne.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a64e:	4b67      	ldr	r3, [pc, #412]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a652:	e1ac      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a654:	2300      	movs	r3, #0
 800a656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a658:	e1a9      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a65a:	4b62      	ldr	r3, [pc, #392]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a662:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a666:	d102      	bne.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a668:	4b61      	ldr	r3, [pc, #388]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a66c:	e19f      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a66e:	2300      	movs	r3, #0
 800a670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a672:	e19c      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a674:	2300      	movs	r3, #0
 800a676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a678:	e199      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a67a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a67e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a682:	430b      	orrs	r3, r1
 800a684:	d173      	bne.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a686:	4b57      	ldr	r3, [pc, #348]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a68a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a68e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a692:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a696:	d02f      	beq.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a69a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a69e:	d863      	bhi.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d004      	beq.n	800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6ac:	d012      	beq.n	800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a6ae:	e05b      	b.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6b0:	4b4c      	ldr	r3, [pc, #304]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6bc:	d107      	bne.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6be:	f107 0318 	add.w	r3, r7, #24
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 f996 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6cc:	e16f      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6d2:	e16c      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6d4:	4b43      	ldr	r3, [pc, #268]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6e0:	d107      	bne.n	800a6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6e2:	f107 030c 	add.w	r3, r7, #12
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 fad8 	bl	800ac9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6f0:	e15d      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6f6:	e15a      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6f8:	4b3a      	ldr	r3, [pc, #232]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a6fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a700:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a702:	4b38      	ldr	r3, [pc, #224]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f003 0304 	and.w	r3, r3, #4
 800a70a:	2b04      	cmp	r3, #4
 800a70c:	d10c      	bne.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a70e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a710:	2b00      	cmp	r3, #0
 800a712:	d109      	bne.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a714:	4b33      	ldr	r3, [pc, #204]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	08db      	lsrs	r3, r3, #3
 800a71a:	f003 0303 	and.w	r3, r3, #3
 800a71e:	4a32      	ldr	r2, [pc, #200]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a720:	fa22 f303 	lsr.w	r3, r2, r3
 800a724:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a726:	e01e      	b.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a728:	4b2e      	ldr	r3, [pc, #184]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a730:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a734:	d106      	bne.n	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a738:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a73c:	d102      	bne.n	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a73e:	4b2b      	ldr	r3, [pc, #172]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a742:	e010      	b.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a744:	4b27      	ldr	r3, [pc, #156]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a74c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a750:	d106      	bne.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a758:	d102      	bne.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a75a:	4b25      	ldr	r3, [pc, #148]	@ (800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a75e:	e002      	b.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a764:	e123      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a766:	e122      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a768:	2300      	movs	r3, #0
 800a76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a76c:	e11f      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a76e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a772:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a776:	430b      	orrs	r3, r1
 800a778:	d13c      	bne.n	800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a77a:	4b1a      	ldr	r3, [pc, #104]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a77c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a77e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a782:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a786:	2b00      	cmp	r3, #0
 800a788:	d004      	beq.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a790:	d012      	beq.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a792:	e023      	b.n	800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a794:	4b13      	ldr	r3, [pc, #76]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a79c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7a0:	d107      	bne.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 fbcc 	bl	800af44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7b0:	e0fd      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7b6:	e0fa      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7c4:	d107      	bne.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7c6:	f107 0318 	add.w	r3, r7, #24
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f000 f912 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a7d0:	6a3b      	ldr	r3, [r7, #32]
 800a7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7d4:	e0eb      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7da:	e0e8      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e0:	e0e5      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a7e2:	bf00      	nop
 800a7e4:	58024400 	.word	0x58024400
 800a7e8:	03d09000 	.word	0x03d09000
 800a7ec:	003d0900 	.word	0x003d0900
 800a7f0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a7f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7f8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a7fc:	430b      	orrs	r3, r1
 800a7fe:	f040 8085 	bne.w	800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a802:	4b6d      	ldr	r3, [pc, #436]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a806:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a80a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a80c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a80e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a812:	d06b      	beq.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a816:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a81a:	d874      	bhi.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a81e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a822:	d056      	beq.n	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a82a:	d86c      	bhi.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a82e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a832:	d03b      	beq.n	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a836:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a83a:	d864      	bhi.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a83e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a842:	d021      	beq.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a84a:	d85c      	bhi.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d004      	beq.n	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a854:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a858:	d004      	beq.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a85a:	e054      	b.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a85c:	f000 f8b4 	bl	800a9c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a860:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a862:	e0a4      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a864:	4b54      	ldr	r3, [pc, #336]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a86c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a870:	d107      	bne.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a872:	f107 0318 	add.w	r3, r7, #24
 800a876:	4618      	mov	r0, r3
 800a878:	f000 f8bc 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a880:	e095      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a882:	2300      	movs	r3, #0
 800a884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a886:	e092      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a888:	4b4b      	ldr	r3, [pc, #300]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a890:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a894:	d107      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a896:	f107 030c 	add.w	r3, r7, #12
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 f9fe 	bl	800ac9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8a4:	e083      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8aa:	e080      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a8ac:	4b42      	ldr	r3, [pc, #264]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f003 0304 	and.w	r3, r3, #4
 800a8b4:	2b04      	cmp	r3, #4
 800a8b6:	d109      	bne.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8b8:	4b3f      	ldr	r3, [pc, #252]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	08db      	lsrs	r3, r3, #3
 800a8be:	f003 0303 	and.w	r3, r3, #3
 800a8c2:	4a3e      	ldr	r2, [pc, #248]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a8c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8ca:	e070      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8d0:	e06d      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a8d2:	4b39      	ldr	r3, [pc, #228]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8de:	d102      	bne.n	800a8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a8e0:	4b37      	ldr	r3, [pc, #220]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8e4:	e063      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ea:	e060      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a8ec:	4b32      	ldr	r3, [pc, #200]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8f8:	d102      	bne.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a8fa:	4b32      	ldr	r3, [pc, #200]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8fe:	e056      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a900:	2300      	movs	r3, #0
 800a902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a904:	e053      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a906:	2300      	movs	r3, #0
 800a908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a90a:	e050      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a90c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a910:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a914:	430b      	orrs	r3, r1
 800a916:	d148      	bne.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a918:	4b27      	ldr	r3, [pc, #156]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a91a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a91c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a920:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a928:	d02a      	beq.n	800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a92c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a930:	d838      	bhi.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a934:	2b00      	cmp	r3, #0
 800a936:	d004      	beq.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a93a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a93e:	d00d      	beq.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a940:	e030      	b.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a942:	4b1d      	ldr	r3, [pc, #116]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a94a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a94e:	d102      	bne.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a950:	4b1c      	ldr	r3, [pc, #112]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a954:	e02b      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a956:	2300      	movs	r3, #0
 800a958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a95a:	e028      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a95c:	4b16      	ldr	r3, [pc, #88]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a964:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a968:	d107      	bne.n	800a97a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a96a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a96e:	4618      	mov	r0, r3
 800a970:	f000 fae8 	bl	800af44 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a978:	e019      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a97e:	e016      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a980:	4b0d      	ldr	r3, [pc, #52]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a988:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a98c:	d107      	bne.n	800a99e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a98e:	f107 0318 	add.w	r3, r7, #24
 800a992:	4618      	mov	r0, r3
 800a994:	f000 f82e 	bl	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a99c:	e007      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9a2:	e004      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9a8:	e001      	b.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a9ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3740      	adds	r7, #64	@ 0x40
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	58024400 	.word	0x58024400
 800a9bc:	03d09000 	.word	0x03d09000
 800a9c0:	003d0900 	.word	0x003d0900
 800a9c4:	007a1200 	.word	0x007a1200

0800a9c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a9cc:	f7fe f944 	bl	8008c58 <HAL_RCC_GetHCLKFreq>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	4b06      	ldr	r3, [pc, #24]	@ (800a9ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a9d4:	6a1b      	ldr	r3, [r3, #32]
 800a9d6:	091b      	lsrs	r3, r3, #4
 800a9d8:	f003 0307 	and.w	r3, r3, #7
 800a9dc:	4904      	ldr	r1, [pc, #16]	@ (800a9f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a9de:	5ccb      	ldrb	r3, [r1, r3]
 800a9e0:	f003 031f 	and.w	r3, r3, #31
 800a9e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	58024400 	.word	0x58024400
 800a9f0:	0800fdb4 	.word	0x0800fdb4

0800a9f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b089      	sub	sp, #36	@ 0x24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9fc:	4ba1      	ldr	r3, [pc, #644]	@ (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa00:	f003 0303 	and.w	r3, r3, #3
 800aa04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800aa06:	4b9f      	ldr	r3, [pc, #636]	@ (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa0a:	0b1b      	lsrs	r3, r3, #12
 800aa0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aa12:	4b9c      	ldr	r3, [pc, #624]	@ (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa16:	091b      	lsrs	r3, r3, #4
 800aa18:	f003 0301 	and.w	r3, r3, #1
 800aa1c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800aa1e:	4b99      	ldr	r3, [pc, #612]	@ (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa22:	08db      	lsrs	r3, r3, #3
 800aa24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	fb02 f303 	mul.w	r3, r2, r3
 800aa2e:	ee07 3a90 	vmov	s15, r3
 800aa32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f000 8111 	beq.w	800ac64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	f000 8083 	beq.w	800ab50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	2b02      	cmp	r3, #2
 800aa4e:	f200 80a1 	bhi.w	800ab94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d003      	beq.n	800aa60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d056      	beq.n	800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aa5e:	e099      	b.n	800ab94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa60:	4b88      	ldr	r3, [pc, #544]	@ (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0320 	and.w	r3, r3, #32
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d02d      	beq.n	800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa6c:	4b85      	ldr	r3, [pc, #532]	@ (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	08db      	lsrs	r3, r3, #3
 800aa72:	f003 0303 	and.w	r3, r3, #3
 800aa76:	4a84      	ldr	r2, [pc, #528]	@ (800ac88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aa78:	fa22 f303 	lsr.w	r3, r2, r3
 800aa7c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	ee07 3a90 	vmov	s15, r3
 800aa84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa96:	4b7b      	ldr	r3, [pc, #492]	@ (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa9e:	ee07 3a90 	vmov	s15, r3
 800aaa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaaa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ac8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aaba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aabe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aac2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aac6:	e087      	b.n	800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	ee07 3a90 	vmov	s15, r3
 800aace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aad2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aada:	4b6a      	ldr	r3, [pc, #424]	@ (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aadc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aae2:	ee07 3a90 	vmov	s15, r3
 800aae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaea:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ac8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aafa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aafe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab0a:	e065      	b.n	800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	ee07 3a90 	vmov	s15, r3
 800ab12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ac94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab1e:	4b59      	ldr	r3, [pc, #356]	@ (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab26:	ee07 3a90 	vmov	s15, r3
 800ab2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ac8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab4e:	e043      	b.n	800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	ee07 3a90 	vmov	s15, r3
 800ab56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ac98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ab5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab62:	4b48      	ldr	r3, [pc, #288]	@ (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab6a:	ee07 3a90 	vmov	s15, r3
 800ab6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ac8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab92:	e021      	b.n	800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	ee07 3a90 	vmov	s15, r3
 800ab9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ac94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aba6:	4b37      	ldr	r3, [pc, #220]	@ (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abae:	ee07 3a90 	vmov	s15, r3
 800abb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800abba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ac8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800abd8:	4b2a      	ldr	r3, [pc, #168]	@ (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abdc:	0a5b      	lsrs	r3, r3, #9
 800abde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abe2:	ee07 3a90 	vmov	s15, r3
 800abe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abf2:	edd7 6a07 	vldr	s13, [r7, #28]
 800abf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abfe:	ee17 2a90 	vmov	r2, s15
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ac06:	4b1f      	ldr	r3, [pc, #124]	@ (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac0a:	0c1b      	lsrs	r3, r3, #16
 800ac0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac10:	ee07 3a90 	vmov	s15, r3
 800ac14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac20:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac2c:	ee17 2a90 	vmov	r2, s15
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ac34:	4b13      	ldr	r3, [pc, #76]	@ (800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac38:	0e1b      	lsrs	r3, r3, #24
 800ac3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac3e:	ee07 3a90 	vmov	s15, r3
 800ac42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac5a:	ee17 2a90 	vmov	r2, s15
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac62:	e008      	b.n	800ac76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	609a      	str	r2, [r3, #8]
}
 800ac76:	bf00      	nop
 800ac78:	3724      	adds	r7, #36	@ 0x24
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	58024400 	.word	0x58024400
 800ac88:	03d09000 	.word	0x03d09000
 800ac8c:	46000000 	.word	0x46000000
 800ac90:	4c742400 	.word	0x4c742400
 800ac94:	4a742400 	.word	0x4a742400
 800ac98:	4af42400 	.word	0x4af42400

0800ac9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b089      	sub	sp, #36	@ 0x24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aca4:	4ba1      	ldr	r3, [pc, #644]	@ (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aca8:	f003 0303 	and.w	r3, r3, #3
 800acac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800acae:	4b9f      	ldr	r3, [pc, #636]	@ (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb2:	0d1b      	lsrs	r3, r3, #20
 800acb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800acb8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800acba:	4b9c      	ldr	r3, [pc, #624]	@ (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acbe:	0a1b      	lsrs	r3, r3, #8
 800acc0:	f003 0301 	and.w	r3, r3, #1
 800acc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800acc6:	4b99      	ldr	r3, [pc, #612]	@ (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acca:	08db      	lsrs	r3, r3, #3
 800accc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acd0:	693a      	ldr	r2, [r7, #16]
 800acd2:	fb02 f303 	mul.w	r3, r2, r3
 800acd6:	ee07 3a90 	vmov	s15, r3
 800acda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 8111 	beq.w	800af0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	2b02      	cmp	r3, #2
 800acee:	f000 8083 	beq.w	800adf8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	f200 80a1 	bhi.w	800ae3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d003      	beq.n	800ad08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d056      	beq.n	800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ad06:	e099      	b.n	800ae3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad08:	4b88      	ldr	r3, [pc, #544]	@ (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 0320 	and.w	r3, r3, #32
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d02d      	beq.n	800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad14:	4b85      	ldr	r3, [pc, #532]	@ (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	08db      	lsrs	r3, r3, #3
 800ad1a:	f003 0303 	and.w	r3, r3, #3
 800ad1e:	4a84      	ldr	r2, [pc, #528]	@ (800af30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ad20:	fa22 f303 	lsr.w	r3, r2, r3
 800ad24:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	ee07 3a90 	vmov	s15, r3
 800ad2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	ee07 3a90 	vmov	s15, r3
 800ad36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad3e:	4b7b      	ldr	r3, [pc, #492]	@ (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad46:	ee07 3a90 	vmov	s15, r3
 800ad4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad52:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800af34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad6e:	e087      	b.n	800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	ee07 3a90 	vmov	s15, r3
 800ad76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ad7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad82:	4b6a      	ldr	r3, [pc, #424]	@ (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8a:	ee07 3a90 	vmov	s15, r3
 800ad8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad92:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad96:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800af34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ada2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ada6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adb2:	e065      	b.n	800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	ee07 3a90 	vmov	s15, r3
 800adba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adbe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800af3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800adc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adc6:	4b59      	ldr	r3, [pc, #356]	@ (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adce:	ee07 3a90 	vmov	s15, r3
 800add2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800add6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adda:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800af34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ade2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ade6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adf6:	e043      	b.n	800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	ee07 3a90 	vmov	s15, r3
 800adfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae02:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ae06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae0a:	4b48      	ldr	r3, [pc, #288]	@ (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae12:	ee07 3a90 	vmov	s15, r3
 800ae16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae1e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800af34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae3a:	e021      	b.n	800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	ee07 3a90 	vmov	s15, r3
 800ae42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae46:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800af3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae4e:	4b37      	ldr	r3, [pc, #220]	@ (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae56:	ee07 3a90 	vmov	s15, r3
 800ae5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae62:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800af34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ae80:	4b2a      	ldr	r3, [pc, #168]	@ (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae84:	0a5b      	lsrs	r3, r3, #9
 800ae86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae8a:	ee07 3a90 	vmov	s15, r3
 800ae8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aea6:	ee17 2a90 	vmov	r2, s15
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800aeae:	4b1f      	ldr	r3, [pc, #124]	@ (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeb2:	0c1b      	lsrs	r3, r3, #16
 800aeb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aeb8:	ee07 3a90 	vmov	s15, r3
 800aebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aec4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aec8:	edd7 6a07 	vldr	s13, [r7, #28]
 800aecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aed4:	ee17 2a90 	vmov	r2, s15
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aedc:	4b13      	ldr	r3, [pc, #76]	@ (800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aee0:	0e1b      	lsrs	r3, r3, #24
 800aee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aee6:	ee07 3a90 	vmov	s15, r3
 800aeea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aef6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aefa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aefe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af02:	ee17 2a90 	vmov	r2, s15
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800af0a:	e008      	b.n	800af1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	609a      	str	r2, [r3, #8]
}
 800af1e:	bf00      	nop
 800af20:	3724      	adds	r7, #36	@ 0x24
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	58024400 	.word	0x58024400
 800af30:	03d09000 	.word	0x03d09000
 800af34:	46000000 	.word	0x46000000
 800af38:	4c742400 	.word	0x4c742400
 800af3c:	4a742400 	.word	0x4a742400
 800af40:	4af42400 	.word	0x4af42400

0800af44 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800af44:	b480      	push	{r7}
 800af46:	b089      	sub	sp, #36	@ 0x24
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af4c:	4ba0      	ldr	r3, [pc, #640]	@ (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af50:	f003 0303 	and.w	r3, r3, #3
 800af54:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800af56:	4b9e      	ldr	r3, [pc, #632]	@ (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af5a:	091b      	lsrs	r3, r3, #4
 800af5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af60:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800af62:	4b9b      	ldr	r3, [pc, #620]	@ (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af66:	f003 0301 	and.w	r3, r3, #1
 800af6a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800af6c:	4b98      	ldr	r3, [pc, #608]	@ (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af70:	08db      	lsrs	r3, r3, #3
 800af72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af76:	693a      	ldr	r2, [r7, #16]
 800af78:	fb02 f303 	mul.w	r3, r2, r3
 800af7c:	ee07 3a90 	vmov	s15, r3
 800af80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af84:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f000 8111 	beq.w	800b1b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	2b02      	cmp	r3, #2
 800af94:	f000 8083 	beq.w	800b09e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	f200 80a1 	bhi.w	800b0e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d003      	beq.n	800afae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d056      	beq.n	800b05a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800afac:	e099      	b.n	800b0e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afae:	4b88      	ldr	r3, [pc, #544]	@ (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f003 0320 	and.w	r3, r3, #32
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d02d      	beq.n	800b016 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afba:	4b85      	ldr	r3, [pc, #532]	@ (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	08db      	lsrs	r3, r3, #3
 800afc0:	f003 0303 	and.w	r3, r3, #3
 800afc4:	4a83      	ldr	r2, [pc, #524]	@ (800b1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800afc6:	fa22 f303 	lsr.w	r3, r2, r3
 800afca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	ee07 3a90 	vmov	s15, r3
 800afd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	ee07 3a90 	vmov	s15, r3
 800afdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afe4:	4b7a      	ldr	r3, [pc, #488]	@ (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afec:	ee07 3a90 	vmov	s15, r3
 800aff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aff4:	ed97 6a03 	vldr	s12, [r7, #12]
 800aff8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800affc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b004:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b00c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b010:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b014:	e087      	b.n	800b126 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	ee07 3a90 	vmov	s15, r3
 800b01c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b020:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b028:	4b69      	ldr	r3, [pc, #420]	@ (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b02a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b02c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b030:	ee07 3a90 	vmov	s15, r3
 800b034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b038:	ed97 6a03 	vldr	s12, [r7, #12]
 800b03c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b040:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b048:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b04c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b050:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b054:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b058:	e065      	b.n	800b126 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	ee07 3a90 	vmov	s15, r3
 800b060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b064:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b06c:	4b58      	ldr	r3, [pc, #352]	@ (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b06e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b074:	ee07 3a90 	vmov	s15, r3
 800b078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b07c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b080:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b084:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b088:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b08c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b094:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b098:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b09c:	e043      	b.n	800b126 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	ee07 3a90 	vmov	s15, r3
 800b0a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b0ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0b0:	4b47      	ldr	r3, [pc, #284]	@ (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0b8:	ee07 3a90 	vmov	s15, r3
 800b0bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0c4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0e0:	e021      	b.n	800b126 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	ee07 3a90 	vmov	s15, r3
 800b0e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ec:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b0f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0f4:	4b36      	ldr	r3, [pc, #216]	@ (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0fc:	ee07 3a90 	vmov	s15, r3
 800b100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b104:	ed97 6a03 	vldr	s12, [r7, #12]
 800b108:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b10c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b110:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b114:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b118:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b11c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b120:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b124:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b126:	4b2a      	ldr	r3, [pc, #168]	@ (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b12a:	0a5b      	lsrs	r3, r3, #9
 800b12c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b130:	ee07 3a90 	vmov	s15, r3
 800b134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b138:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b13c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b140:	edd7 6a07 	vldr	s13, [r7, #28]
 800b144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b14c:	ee17 2a90 	vmov	r2, s15
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b154:	4b1e      	ldr	r3, [pc, #120]	@ (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b158:	0c1b      	lsrs	r3, r3, #16
 800b15a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b15e:	ee07 3a90 	vmov	s15, r3
 800b162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b166:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b16a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b16e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b17a:	ee17 2a90 	vmov	r2, s15
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b182:	4b13      	ldr	r3, [pc, #76]	@ (800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b186:	0e1b      	lsrs	r3, r3, #24
 800b188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b18c:	ee07 3a90 	vmov	s15, r3
 800b190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b194:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b198:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b19c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1a8:	ee17 2a90 	vmov	r2, s15
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b1b0:	e008      	b.n	800b1c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	609a      	str	r2, [r3, #8]
}
 800b1c4:	bf00      	nop
 800b1c6:	3724      	adds	r7, #36	@ 0x24
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr
 800b1d0:	58024400 	.word	0x58024400
 800b1d4:	03d09000 	.word	0x03d09000
 800b1d8:	46000000 	.word	0x46000000
 800b1dc:	4c742400 	.word	0x4c742400
 800b1e0:	4a742400 	.word	0x4a742400
 800b1e4:	4af42400 	.word	0x4af42400

0800b1e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b1f6:	4b53      	ldr	r3, [pc, #332]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b1f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1fa:	f003 0303 	and.w	r3, r3, #3
 800b1fe:	2b03      	cmp	r3, #3
 800b200:	d101      	bne.n	800b206 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	e099      	b.n	800b33a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b206:	4b4f      	ldr	r3, [pc, #316]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a4e      	ldr	r2, [pc, #312]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b20c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b212:	f7f7 fb05 	bl	8002820 <HAL_GetTick>
 800b216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b218:	e008      	b.n	800b22c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b21a:	f7f7 fb01 	bl	8002820 <HAL_GetTick>
 800b21e:	4602      	mov	r2, r0
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	2b02      	cmp	r3, #2
 800b226:	d901      	bls.n	800b22c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b228:	2303      	movs	r3, #3
 800b22a:	e086      	b.n	800b33a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b22c:	4b45      	ldr	r3, [pc, #276]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1f0      	bne.n	800b21a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b238:	4b42      	ldr	r3, [pc, #264]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b23a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b23c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	031b      	lsls	r3, r3, #12
 800b246:	493f      	ldr	r1, [pc, #252]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b248:	4313      	orrs	r3, r2
 800b24a:	628b      	str	r3, [r1, #40]	@ 0x28
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	3b01      	subs	r3, #1
 800b252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	3b01      	subs	r3, #1
 800b25c:	025b      	lsls	r3, r3, #9
 800b25e:	b29b      	uxth	r3, r3
 800b260:	431a      	orrs	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	3b01      	subs	r3, #1
 800b268:	041b      	lsls	r3, r3, #16
 800b26a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b26e:	431a      	orrs	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	3b01      	subs	r3, #1
 800b276:	061b      	lsls	r3, r3, #24
 800b278:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b27c:	4931      	ldr	r1, [pc, #196]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b27e:	4313      	orrs	r3, r2
 800b280:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b282:	4b30      	ldr	r3, [pc, #192]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b286:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	695b      	ldr	r3, [r3, #20]
 800b28e:	492d      	ldr	r1, [pc, #180]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b290:	4313      	orrs	r3, r2
 800b292:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b294:	4b2b      	ldr	r3, [pc, #172]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b298:	f023 0220 	bic.w	r2, r3, #32
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	699b      	ldr	r3, [r3, #24]
 800b2a0:	4928      	ldr	r1, [pc, #160]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b2a6:	4b27      	ldr	r3, [pc, #156]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2aa:	4a26      	ldr	r2, [pc, #152]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2ac:	f023 0310 	bic.w	r3, r3, #16
 800b2b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b2b2:	4b24      	ldr	r3, [pc, #144]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b2b6:	4b24      	ldr	r3, [pc, #144]	@ (800b348 <RCCEx_PLL2_Config+0x160>)
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	69d2      	ldr	r2, [r2, #28]
 800b2be:	00d2      	lsls	r2, r2, #3
 800b2c0:	4920      	ldr	r1, [pc, #128]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b2c6:	4b1f      	ldr	r3, [pc, #124]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ca:	4a1e      	ldr	r2, [pc, #120]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2cc:	f043 0310 	orr.w	r3, r3, #16
 800b2d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d106      	bne.n	800b2e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b2d8:	4b1a      	ldr	r3, [pc, #104]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2dc:	4a19      	ldr	r2, [pc, #100]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b2e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b2e4:	e00f      	b.n	800b306 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d106      	bne.n	800b2fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b2ec:	4b15      	ldr	r3, [pc, #84]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f0:	4a14      	ldr	r2, [pc, #80]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b2f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b2f8:	e005      	b.n	800b306 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b2fa:	4b12      	ldr	r3, [pc, #72]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2fe:	4a11      	ldr	r2, [pc, #68]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b300:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b304:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b306:	4b0f      	ldr	r3, [pc, #60]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a0e      	ldr	r2, [pc, #56]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b30c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b312:	f7f7 fa85 	bl	8002820 <HAL_GetTick>
 800b316:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b318:	e008      	b.n	800b32c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b31a:	f7f7 fa81 	bl	8002820 <HAL_GetTick>
 800b31e:	4602      	mov	r2, r0
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	1ad3      	subs	r3, r2, r3
 800b324:	2b02      	cmp	r3, #2
 800b326:	d901      	bls.n	800b32c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b328:	2303      	movs	r3, #3
 800b32a:	e006      	b.n	800b33a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b32c:	4b05      	ldr	r3, [pc, #20]	@ (800b344 <RCCEx_PLL2_Config+0x15c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b334:	2b00      	cmp	r3, #0
 800b336:	d0f0      	beq.n	800b31a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b338:	7bfb      	ldrb	r3, [r7, #15]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	58024400 	.word	0x58024400
 800b348:	ffff0007 	.word	0xffff0007

0800b34c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b356:	2300      	movs	r3, #0
 800b358:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b35a:	4b53      	ldr	r3, [pc, #332]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b35c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b35e:	f003 0303 	and.w	r3, r3, #3
 800b362:	2b03      	cmp	r3, #3
 800b364:	d101      	bne.n	800b36a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e099      	b.n	800b49e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b36a:	4b4f      	ldr	r3, [pc, #316]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a4e      	ldr	r2, [pc, #312]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b370:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b376:	f7f7 fa53 	bl	8002820 <HAL_GetTick>
 800b37a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b37c:	e008      	b.n	800b390 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b37e:	f7f7 fa4f 	bl	8002820 <HAL_GetTick>
 800b382:	4602      	mov	r2, r0
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	1ad3      	subs	r3, r2, r3
 800b388:	2b02      	cmp	r3, #2
 800b38a:	d901      	bls.n	800b390 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b38c:	2303      	movs	r3, #3
 800b38e:	e086      	b.n	800b49e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b390:	4b45      	ldr	r3, [pc, #276]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d1f0      	bne.n	800b37e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b39c:	4b42      	ldr	r3, [pc, #264]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b39e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3a0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	051b      	lsls	r3, r3, #20
 800b3aa:	493f      	ldr	r1, [pc, #252]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	628b      	str	r3, [r1, #40]	@ 0x28
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	025b      	lsls	r3, r3, #9
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	431a      	orrs	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	3b01      	subs	r3, #1
 800b3cc:	041b      	lsls	r3, r3, #16
 800b3ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b3d2:	431a      	orrs	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	691b      	ldr	r3, [r3, #16]
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	061b      	lsls	r3, r3, #24
 800b3dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b3e0:	4931      	ldr	r1, [pc, #196]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b3e6:	4b30      	ldr	r3, [pc, #192]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b3e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	695b      	ldr	r3, [r3, #20]
 800b3f2:	492d      	ldr	r1, [pc, #180]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b3f8:	4b2b      	ldr	r3, [pc, #172]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b3fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	699b      	ldr	r3, [r3, #24]
 800b404:	4928      	ldr	r1, [pc, #160]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b406:	4313      	orrs	r3, r2
 800b408:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b40a:	4b27      	ldr	r3, [pc, #156]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b40c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b40e:	4a26      	ldr	r2, [pc, #152]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b414:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b416:	4b24      	ldr	r3, [pc, #144]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b41a:	4b24      	ldr	r3, [pc, #144]	@ (800b4ac <RCCEx_PLL3_Config+0x160>)
 800b41c:	4013      	ands	r3, r2
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	69d2      	ldr	r2, [r2, #28]
 800b422:	00d2      	lsls	r2, r2, #3
 800b424:	4920      	ldr	r1, [pc, #128]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b426:	4313      	orrs	r3, r2
 800b428:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b42a:	4b1f      	ldr	r3, [pc, #124]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b42e:	4a1e      	ldr	r2, [pc, #120]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b434:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d106      	bne.n	800b44a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b43c:	4b1a      	ldr	r3, [pc, #104]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b440:	4a19      	ldr	r2, [pc, #100]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b442:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b446:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b448:	e00f      	b.n	800b46a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d106      	bne.n	800b45e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b450:	4b15      	ldr	r3, [pc, #84]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b454:	4a14      	ldr	r2, [pc, #80]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b456:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b45a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b45c:	e005      	b.n	800b46a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b45e:	4b12      	ldr	r3, [pc, #72]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b462:	4a11      	ldr	r2, [pc, #68]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b464:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b468:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b46a:	4b0f      	ldr	r3, [pc, #60]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a0e      	ldr	r2, [pc, #56]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b474:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b476:	f7f7 f9d3 	bl	8002820 <HAL_GetTick>
 800b47a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b47c:	e008      	b.n	800b490 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b47e:	f7f7 f9cf 	bl	8002820 <HAL_GetTick>
 800b482:	4602      	mov	r2, r0
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d901      	bls.n	800b490 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b48c:	2303      	movs	r3, #3
 800b48e:	e006      	b.n	800b49e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b490:	4b05      	ldr	r3, [pc, #20]	@ (800b4a8 <RCCEx_PLL3_Config+0x15c>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d0f0      	beq.n	800b47e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	58024400 	.word	0x58024400
 800b4ac:	ffff0007 	.word	0xffff0007

0800b4b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d101      	bne.n	800b4c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e10f      	b.n	800b6e2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a87      	ldr	r2, [pc, #540]	@ (800b6ec <HAL_SPI_Init+0x23c>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d00f      	beq.n	800b4f2 <HAL_SPI_Init+0x42>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a86      	ldr	r2, [pc, #536]	@ (800b6f0 <HAL_SPI_Init+0x240>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d00a      	beq.n	800b4f2 <HAL_SPI_Init+0x42>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a84      	ldr	r2, [pc, #528]	@ (800b6f4 <HAL_SPI_Init+0x244>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d005      	beq.n	800b4f2 <HAL_SPI_Init+0x42>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	2b0f      	cmp	r3, #15
 800b4ec:	d901      	bls.n	800b4f2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e0f7      	b.n	800b6e2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 fbbc 	bl	800bc70 <SPI_GetPacketSize>
 800b4f8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a7b      	ldr	r2, [pc, #492]	@ (800b6ec <HAL_SPI_Init+0x23c>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d00c      	beq.n	800b51e <HAL_SPI_Init+0x6e>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a79      	ldr	r2, [pc, #484]	@ (800b6f0 <HAL_SPI_Init+0x240>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d007      	beq.n	800b51e <HAL_SPI_Init+0x6e>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a78      	ldr	r2, [pc, #480]	@ (800b6f4 <HAL_SPI_Init+0x244>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d002      	beq.n	800b51e <HAL_SPI_Init+0x6e>
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2b08      	cmp	r3, #8
 800b51c:	d811      	bhi.n	800b542 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b522:	4a72      	ldr	r2, [pc, #456]	@ (800b6ec <HAL_SPI_Init+0x23c>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d009      	beq.n	800b53c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a70      	ldr	r2, [pc, #448]	@ (800b6f0 <HAL_SPI_Init+0x240>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d004      	beq.n	800b53c <HAL_SPI_Init+0x8c>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a6f      	ldr	r2, [pc, #444]	@ (800b6f4 <HAL_SPI_Init+0x244>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d104      	bne.n	800b546 <HAL_SPI_Init+0x96>
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2b10      	cmp	r3, #16
 800b540:	d901      	bls.n	800b546 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	e0cd      	b.n	800b6e2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d106      	bne.n	800b560 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f7f6 fdde 	bl	800211c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2202      	movs	r2, #2
 800b564:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f022 0201 	bic.w	r2, r2, #1
 800b576:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b582:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	699b      	ldr	r3, [r3, #24]
 800b588:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b58c:	d119      	bne.n	800b5c2 <HAL_SPI_Init+0x112>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b596:	d103      	bne.n	800b5a0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d008      	beq.n	800b5b2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10c      	bne.n	800b5c2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5b0:	d107      	bne.n	800b5c2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b5c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00f      	beq.n	800b5ee <HAL_SPI_Init+0x13e>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	2b06      	cmp	r3, #6
 800b5d4:	d90b      	bls.n	800b5ee <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	430a      	orrs	r2, r1
 800b5ea:	601a      	str	r2, [r3, #0]
 800b5ec:	e007      	b.n	800b5fe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b5fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	69da      	ldr	r2, [r3, #28]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b606:	431a      	orrs	r2, r3
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	431a      	orrs	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b610:	ea42 0103 	orr.w	r1, r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	68da      	ldr	r2, [r3, #12]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	430a      	orrs	r2, r1
 800b61e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b628:	431a      	orrs	r2, r3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b62e:	431a      	orrs	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	699b      	ldr	r3, [r3, #24]
 800b634:	431a      	orrs	r2, r3
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	691b      	ldr	r3, [r3, #16]
 800b63a:	431a      	orrs	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	695b      	ldr	r3, [r3, #20]
 800b640:	431a      	orrs	r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a1b      	ldr	r3, [r3, #32]
 800b646:	431a      	orrs	r2, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	431a      	orrs	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b652:	431a      	orrs	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	431a      	orrs	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b65e:	ea42 0103 	orr.w	r1, r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	430a      	orrs	r2, r1
 800b66c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d113      	bne.n	800b69e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b688:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b69c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f022 0201 	bic.w	r2, r2, #1
 800b6ac:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d00a      	beq.n	800b6d0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	430a      	orrs	r2, r1
 800b6ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	40013000 	.word	0x40013000
 800b6f0:	40003800 	.word	0x40003800
 800b6f4:	40003c00 	.word	0x40003c00

0800b6f8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b088      	sub	sp, #32
 800b6fc:	af02      	add	r7, sp, #8
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	603b      	str	r3, [r7, #0]
 800b704:	4613      	mov	r3, r2
 800b706:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	3320      	adds	r3, #32
 800b70e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b710:	f7f7 f886 	bl	8002820 <HAL_GetTick>
 800b714:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d001      	beq.n	800b726 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b722:	2302      	movs	r3, #2
 800b724:	e1d1      	b.n	800baca <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d002      	beq.n	800b732 <HAL_SPI_Transmit+0x3a>
 800b72c:	88fb      	ldrh	r3, [r7, #6]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d101      	bne.n	800b736 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	e1c9      	b.n	800baca <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d101      	bne.n	800b744 <HAL_SPI_Transmit+0x4c>
 800b740:	2302      	movs	r3, #2
 800b742:	e1c2      	b.n	800baca <HAL_SPI_Transmit+0x3d2>
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2201      	movs	r2, #1
 800b748:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2203      	movs	r2, #3
 800b750:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2200      	movs	r2, #0
 800b758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	88fa      	ldrh	r2, [r7, #6]
 800b766:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	88fa      	ldrh	r2, [r7, #6]
 800b76e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2200      	movs	r2, #0
 800b784:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2200      	movs	r2, #0
 800b78c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2200      	movs	r2, #0
 800b792:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b79c:	d108      	bne.n	800b7b0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b7ac:	601a      	str	r2, [r3, #0]
 800b7ae:	e009      	b.n	800b7c4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b7c2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	685a      	ldr	r2, [r3, #4]
 800b7ca:	4b96      	ldr	r3, [pc, #600]	@ (800ba24 <HAL_SPI_Transmit+0x32c>)
 800b7cc:	4013      	ands	r3, r2
 800b7ce:	88f9      	ldrh	r1, [r7, #6]
 800b7d0:	68fa      	ldr	r2, [r7, #12]
 800b7d2:	6812      	ldr	r2, [r2, #0]
 800b7d4:	430b      	orrs	r3, r1
 800b7d6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f042 0201 	orr.w	r2, r2, #1
 800b7e6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b7f0:	d107      	bne.n	800b802 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b800:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	2b0f      	cmp	r3, #15
 800b808:	d947      	bls.n	800b89a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b80a:	e03f      	b.n	800b88c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	695b      	ldr	r3, [r3, #20]
 800b812:	f003 0302 	and.w	r3, r3, #2
 800b816:	2b02      	cmp	r3, #2
 800b818:	d114      	bne.n	800b844 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	6812      	ldr	r2, [r2, #0]
 800b824:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b82a:	1d1a      	adds	r2, r3, #4
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b836:	b29b      	uxth	r3, r3
 800b838:	3b01      	subs	r3, #1
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b842:	e023      	b.n	800b88c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b844:	f7f6 ffec 	bl	8002820 <HAL_GetTick>
 800b848:	4602      	mov	r2, r0
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	429a      	cmp	r2, r3
 800b852:	d803      	bhi.n	800b85c <HAL_SPI_Transmit+0x164>
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b85a:	d102      	bne.n	800b862 <HAL_SPI_Transmit+0x16a>
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d114      	bne.n	800b88c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f000 f936 	bl	800bad4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b86e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2200      	movs	r2, #0
 800b884:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b888:	2303      	movs	r3, #3
 800b88a:	e11e      	b.n	800baca <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b892:	b29b      	uxth	r3, r3
 800b894:	2b00      	cmp	r3, #0
 800b896:	d1b9      	bne.n	800b80c <HAL_SPI_Transmit+0x114>
 800b898:	e0f1      	b.n	800ba7e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	2b07      	cmp	r3, #7
 800b8a0:	f240 80e6 	bls.w	800ba70 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b8a4:	e05d      	b.n	800b962 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	695b      	ldr	r3, [r3, #20]
 800b8ac:	f003 0302 	and.w	r3, r3, #2
 800b8b0:	2b02      	cmp	r3, #2
 800b8b2:	d132      	bne.n	800b91a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d918      	bls.n	800b8f2 <HAL_SPI_Transmit+0x1fa>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d014      	beq.n	800b8f2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	6812      	ldr	r2, [r2, #0]
 800b8d2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8d8:	1d1a      	adds	r2, r3, #4
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	3b02      	subs	r3, #2
 800b8e8:	b29a      	uxth	r2, r3
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b8f0:	e037      	b.n	800b962 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8f6:	881a      	ldrh	r2, [r3, #0]
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b900:	1c9a      	adds	r2, r3, #2
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	3b01      	subs	r3, #1
 800b910:	b29a      	uxth	r2, r3
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b918:	e023      	b.n	800b962 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b91a:	f7f6 ff81 	bl	8002820 <HAL_GetTick>
 800b91e:	4602      	mov	r2, r0
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	1ad3      	subs	r3, r2, r3
 800b924:	683a      	ldr	r2, [r7, #0]
 800b926:	429a      	cmp	r2, r3
 800b928:	d803      	bhi.n	800b932 <HAL_SPI_Transmit+0x23a>
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b930:	d102      	bne.n	800b938 <HAL_SPI_Transmit+0x240>
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d114      	bne.n	800b962 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f000 f8cb 	bl	800bad4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b944:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2201      	movs	r2, #1
 800b952:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2200      	movs	r2, #0
 800b95a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b95e:	2303      	movs	r3, #3
 800b960:	e0b3      	b.n	800baca <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b968:	b29b      	uxth	r3, r3
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d19b      	bne.n	800b8a6 <HAL_SPI_Transmit+0x1ae>
 800b96e:	e086      	b.n	800ba7e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	695b      	ldr	r3, [r3, #20]
 800b976:	f003 0302 	and.w	r3, r3, #2
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d154      	bne.n	800ba28 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b984:	b29b      	uxth	r3, r3
 800b986:	2b03      	cmp	r3, #3
 800b988:	d918      	bls.n	800b9bc <HAL_SPI_Transmit+0x2c4>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b98e:	2b40      	cmp	r3, #64	@ 0x40
 800b990:	d914      	bls.n	800b9bc <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	6812      	ldr	r2, [r2, #0]
 800b99c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9a2:	1d1a      	adds	r2, r3, #4
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	3b04      	subs	r3, #4
 800b9b2:	b29a      	uxth	r2, r3
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b9ba:	e059      	b.n	800ba70 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d917      	bls.n	800b9f8 <HAL_SPI_Transmit+0x300>
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d013      	beq.n	800b9f8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9d4:	881a      	ldrh	r2, [r3, #0]
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9de:	1c9a      	adds	r2, r3, #2
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	3b02      	subs	r3, #2
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b9f6:	e03b      	b.n	800ba70 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	3320      	adds	r3, #32
 800ba02:	7812      	ldrb	r2, [r2, #0]
 800ba04:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba0a:	1c5a      	adds	r2, r3, #1
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ba22:	e025      	b.n	800ba70 <HAL_SPI_Transmit+0x378>
 800ba24:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba28:	f7f6 fefa 	bl	8002820 <HAL_GetTick>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	683a      	ldr	r2, [r7, #0]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d803      	bhi.n	800ba40 <HAL_SPI_Transmit+0x348>
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba3e:	d102      	bne.n	800ba46 <HAL_SPI_Transmit+0x34e>
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d114      	bne.n	800ba70 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ba46:	68f8      	ldr	r0, [r7, #12]
 800ba48:	f000 f844 	bl	800bad4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2200      	movs	r2, #0
 800ba68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ba6c:	2303      	movs	r3, #3
 800ba6e:	e02c      	b.n	800baca <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	f47f af79 	bne.w	800b970 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	9300      	str	r3, [sp, #0]
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	2200      	movs	r2, #0
 800ba86:	2108      	movs	r1, #8
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f000 f8c3 	bl	800bc14 <SPI_WaitOnFlagUntilTimeout>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d007      	beq.n	800baa4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba9a:	f043 0220 	orr.w	r2, r3, #32
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f000 f815 	bl	800bad4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2201      	movs	r2, #1
 800baae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d001      	beq.n	800bac8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800bac4:	2301      	movs	r3, #1
 800bac6:	e000      	b.n	800baca <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800bac8:	2300      	movs	r3, #0
  }
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3718      	adds	r7, #24
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop

0800bad4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b085      	sub	sp, #20
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	695b      	ldr	r3, [r3, #20]
 800bae2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	699a      	ldr	r2, [r3, #24]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f042 0208 	orr.w	r2, r2, #8
 800baf2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	699a      	ldr	r2, [r3, #24]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f042 0210 	orr.w	r2, r2, #16
 800bb02:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f022 0201 	bic.w	r2, r2, #1
 800bb12:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	6919      	ldr	r1, [r3, #16]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	4b3c      	ldr	r3, [pc, #240]	@ (800bc10 <SPI_CloseTransfer+0x13c>)
 800bb20:	400b      	ands	r3, r1
 800bb22:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	689a      	ldr	r2, [r3, #8]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bb32:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	2b04      	cmp	r3, #4
 800bb3e:	d014      	beq.n	800bb6a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f003 0320 	and.w	r3, r3, #32
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00f      	beq.n	800bb6a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb50:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	699a      	ldr	r2, [r3, #24]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f042 0220 	orr.w	r2, r2, #32
 800bb68:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	2b03      	cmp	r3, #3
 800bb74:	d014      	beq.n	800bba0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00f      	beq.n	800bba0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb86:	f043 0204 	orr.w	r2, r3, #4
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	699a      	ldr	r2, [r3, #24]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bb9e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00f      	beq.n	800bbca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbb0:	f043 0201 	orr.w	r2, r3, #1
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	699a      	ldr	r2, [r3, #24]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bbc8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00f      	beq.n	800bbf4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbda:	f043 0208 	orr.w	r2, r3, #8
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	699a      	ldr	r2, [r3, #24]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bbf2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800bc04:	bf00      	nop
 800bc06:	3714      	adds	r7, #20
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr
 800bc10:	fffffc90 	.word	0xfffffc90

0800bc14 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	603b      	str	r3, [r7, #0]
 800bc20:	4613      	mov	r3, r2
 800bc22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bc24:	e010      	b.n	800bc48 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc26:	f7f6 fdfb 	bl	8002820 <HAL_GetTick>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	683a      	ldr	r2, [r7, #0]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d803      	bhi.n	800bc3e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc3c:	d102      	bne.n	800bc44 <SPI_WaitOnFlagUntilTimeout+0x30>
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d101      	bne.n	800bc48 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800bc44:	2303      	movs	r3, #3
 800bc46:	e00f      	b.n	800bc68 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	695a      	ldr	r2, [r3, #20]
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	4013      	ands	r3, r2
 800bc52:	68ba      	ldr	r2, [r7, #8]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	bf0c      	ite	eq
 800bc58:	2301      	moveq	r3, #1
 800bc5a:	2300      	movne	r3, #0
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	461a      	mov	r2, r3
 800bc60:	79fb      	ldrb	r3, [r7, #7]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d0df      	beq.n	800bc26 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800bc66:	2300      	movs	r3, #0
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3710      	adds	r7, #16
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc7c:	095b      	lsrs	r3, r3, #5
 800bc7e:	3301      	adds	r3, #1
 800bc80:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	3301      	adds	r3, #1
 800bc88:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	3307      	adds	r3, #7
 800bc8e:	08db      	lsrs	r3, r3, #3
 800bc90:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	fb02 f303 	mul.w	r3, r2, r3
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b082      	sub	sp, #8
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d101      	bne.n	800bcb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e049      	b.n	800bd4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d106      	bne.n	800bcd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f7f6 fab3 	bl	8002238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2202      	movs	r2, #2
 800bcd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	3304      	adds	r3, #4
 800bce2:	4619      	mov	r1, r3
 800bce4:	4610      	mov	r0, r2
 800bce6:	f000 fe4f 	bl	800c988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2201      	movs	r2, #1
 800bcee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2201      	movs	r2, #1
 800bd06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2201      	movs	r2, #1
 800bd16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2201      	movs	r2, #1
 800bd26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2201      	movs	r2, #1
 800bd36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2201      	movs	r2, #1
 800bd46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bd4a:	2300      	movs	r3, #0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3708      	adds	r7, #8
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b085      	sub	sp, #20
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d001      	beq.n	800bd6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e05e      	b.n	800be2a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2202      	movs	r2, #2
 800bd70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	68da      	ldr	r2, [r3, #12]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f042 0201 	orr.w	r2, r2, #1
 800bd82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a2b      	ldr	r2, [pc, #172]	@ (800be38 <HAL_TIM_Base_Start_IT+0xe4>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d02c      	beq.n	800bde8 <HAL_TIM_Base_Start_IT+0x94>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd96:	d027      	beq.n	800bde8 <HAL_TIM_Base_Start_IT+0x94>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4a27      	ldr	r2, [pc, #156]	@ (800be3c <HAL_TIM_Base_Start_IT+0xe8>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d022      	beq.n	800bde8 <HAL_TIM_Base_Start_IT+0x94>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4a26      	ldr	r2, [pc, #152]	@ (800be40 <HAL_TIM_Base_Start_IT+0xec>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d01d      	beq.n	800bde8 <HAL_TIM_Base_Start_IT+0x94>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a24      	ldr	r2, [pc, #144]	@ (800be44 <HAL_TIM_Base_Start_IT+0xf0>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d018      	beq.n	800bde8 <HAL_TIM_Base_Start_IT+0x94>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a23      	ldr	r2, [pc, #140]	@ (800be48 <HAL_TIM_Base_Start_IT+0xf4>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d013      	beq.n	800bde8 <HAL_TIM_Base_Start_IT+0x94>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a21      	ldr	r2, [pc, #132]	@ (800be4c <HAL_TIM_Base_Start_IT+0xf8>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d00e      	beq.n	800bde8 <HAL_TIM_Base_Start_IT+0x94>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a20      	ldr	r2, [pc, #128]	@ (800be50 <HAL_TIM_Base_Start_IT+0xfc>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d009      	beq.n	800bde8 <HAL_TIM_Base_Start_IT+0x94>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a1e      	ldr	r2, [pc, #120]	@ (800be54 <HAL_TIM_Base_Start_IT+0x100>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d004      	beq.n	800bde8 <HAL_TIM_Base_Start_IT+0x94>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a1d      	ldr	r2, [pc, #116]	@ (800be58 <HAL_TIM_Base_Start_IT+0x104>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d115      	bne.n	800be14 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	689a      	ldr	r2, [r3, #8]
 800bdee:	4b1b      	ldr	r3, [pc, #108]	@ (800be5c <HAL_TIM_Base_Start_IT+0x108>)
 800bdf0:	4013      	ands	r3, r2
 800bdf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b06      	cmp	r3, #6
 800bdf8:	d015      	beq.n	800be26 <HAL_TIM_Base_Start_IT+0xd2>
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be00:	d011      	beq.n	800be26 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	681a      	ldr	r2, [r3, #0]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f042 0201 	orr.w	r2, r2, #1
 800be10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be12:	e008      	b.n	800be26 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f042 0201 	orr.w	r2, r2, #1
 800be22:	601a      	str	r2, [r3, #0]
 800be24:	e000      	b.n	800be28 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3714      	adds	r7, #20
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop
 800be38:	40010000 	.word	0x40010000
 800be3c:	40000400 	.word	0x40000400
 800be40:	40000800 	.word	0x40000800
 800be44:	40000c00 	.word	0x40000c00
 800be48:	40010400 	.word	0x40010400
 800be4c:	40001800 	.word	0x40001800
 800be50:	40014000 	.word	0x40014000
 800be54:	4000e000 	.word	0x4000e000
 800be58:	4000e400 	.word	0x4000e400
 800be5c:	00010007 	.word	0x00010007

0800be60 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d101      	bne.n	800be72 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800be6e:	2301      	movs	r3, #1
 800be70:	e049      	b.n	800bf06 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d106      	bne.n	800be8c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2200      	movs	r2, #0
 800be82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 f841 	bl	800bf0e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2202      	movs	r2, #2
 800be90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	3304      	adds	r3, #4
 800be9c:	4619      	mov	r1, r3
 800be9e:	4610      	mov	r0, r2
 800bea0:	f000 fd72 	bl	800c988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2201      	movs	r2, #1
 800bea8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2201      	movs	r2, #1
 800beb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2201      	movs	r2, #1
 800beb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2201      	movs	r2, #1
 800bec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2201      	movs	r2, #1
 800bec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2201      	movs	r2, #1
 800bed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2201      	movs	r2, #1
 800bed8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2201      	movs	r2, #1
 800bee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2201      	movs	r2, #1
 800bee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2201      	movs	r2, #1
 800bef0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2201      	movs	r2, #1
 800bf00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3708      	adds	r7, #8
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800bf0e:	b480      	push	{r7}
 800bf10:	b083      	sub	sp, #12
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800bf16:	bf00      	nop
 800bf18:	370c      	adds	r7, #12
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr

0800bf22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b082      	sub	sp, #8
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d101      	bne.n	800bf34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bf30:	2301      	movs	r3, #1
 800bf32:	e049      	b.n	800bfc8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d106      	bne.n	800bf4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 f841 	bl	800bfd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2202      	movs	r2, #2
 800bf52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	3304      	adds	r3, #4
 800bf5e:	4619      	mov	r1, r3
 800bf60:	4610      	mov	r0, r2
 800bf62:	f000 fd11 	bl	800c988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2201      	movs	r2, #1
 800bf72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2201      	movs	r2, #1
 800bf7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2201      	movs	r2, #1
 800bf82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2201      	movs	r2, #1
 800bf8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2201      	movs	r2, #1
 800bf92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bfd8:	bf00      	nop
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d109      	bne.n	800c008 <HAL_TIM_PWM_Start+0x24>
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	bf14      	ite	ne
 800c000:	2301      	movne	r3, #1
 800c002:	2300      	moveq	r3, #0
 800c004:	b2db      	uxtb	r3, r3
 800c006:	e03c      	b.n	800c082 <HAL_TIM_PWM_Start+0x9e>
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	2b04      	cmp	r3, #4
 800c00c:	d109      	bne.n	800c022 <HAL_TIM_PWM_Start+0x3e>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c014:	b2db      	uxtb	r3, r3
 800c016:	2b01      	cmp	r3, #1
 800c018:	bf14      	ite	ne
 800c01a:	2301      	movne	r3, #1
 800c01c:	2300      	moveq	r3, #0
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	e02f      	b.n	800c082 <HAL_TIM_PWM_Start+0x9e>
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b08      	cmp	r3, #8
 800c026:	d109      	bne.n	800c03c <HAL_TIM_PWM_Start+0x58>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	2b01      	cmp	r3, #1
 800c032:	bf14      	ite	ne
 800c034:	2301      	movne	r3, #1
 800c036:	2300      	moveq	r3, #0
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	e022      	b.n	800c082 <HAL_TIM_PWM_Start+0x9e>
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	2b0c      	cmp	r3, #12
 800c040:	d109      	bne.n	800c056 <HAL_TIM_PWM_Start+0x72>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	bf14      	ite	ne
 800c04e:	2301      	movne	r3, #1
 800c050:	2300      	moveq	r3, #0
 800c052:	b2db      	uxtb	r3, r3
 800c054:	e015      	b.n	800c082 <HAL_TIM_PWM_Start+0x9e>
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	2b10      	cmp	r3, #16
 800c05a:	d109      	bne.n	800c070 <HAL_TIM_PWM_Start+0x8c>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c062:	b2db      	uxtb	r3, r3
 800c064:	2b01      	cmp	r3, #1
 800c066:	bf14      	ite	ne
 800c068:	2301      	movne	r3, #1
 800c06a:	2300      	moveq	r3, #0
 800c06c:	b2db      	uxtb	r3, r3
 800c06e:	e008      	b.n	800c082 <HAL_TIM_PWM_Start+0x9e>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c076:	b2db      	uxtb	r3, r3
 800c078:	2b01      	cmp	r3, #1
 800c07a:	bf14      	ite	ne
 800c07c:	2301      	movne	r3, #1
 800c07e:	2300      	moveq	r3, #0
 800c080:	b2db      	uxtb	r3, r3
 800c082:	2b00      	cmp	r3, #0
 800c084:	d001      	beq.n	800c08a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	e0ab      	b.n	800c1e2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d104      	bne.n	800c09a <HAL_TIM_PWM_Start+0xb6>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2202      	movs	r2, #2
 800c094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c098:	e023      	b.n	800c0e2 <HAL_TIM_PWM_Start+0xfe>
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	2b04      	cmp	r3, #4
 800c09e:	d104      	bne.n	800c0aa <HAL_TIM_PWM_Start+0xc6>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2202      	movs	r2, #2
 800c0a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c0a8:	e01b      	b.n	800c0e2 <HAL_TIM_PWM_Start+0xfe>
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	2b08      	cmp	r3, #8
 800c0ae:	d104      	bne.n	800c0ba <HAL_TIM_PWM_Start+0xd6>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2202      	movs	r2, #2
 800c0b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c0b8:	e013      	b.n	800c0e2 <HAL_TIM_PWM_Start+0xfe>
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	2b0c      	cmp	r3, #12
 800c0be:	d104      	bne.n	800c0ca <HAL_TIM_PWM_Start+0xe6>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2202      	movs	r2, #2
 800c0c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c0c8:	e00b      	b.n	800c0e2 <HAL_TIM_PWM_Start+0xfe>
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	2b10      	cmp	r3, #16
 800c0ce:	d104      	bne.n	800c0da <HAL_TIM_PWM_Start+0xf6>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2202      	movs	r2, #2
 800c0d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c0d8:	e003      	b.n	800c0e2 <HAL_TIM_PWM_Start+0xfe>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2202      	movs	r2, #2
 800c0de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	6839      	ldr	r1, [r7, #0]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f001 f86c 	bl	800d1c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a3d      	ldr	r2, [pc, #244]	@ (800c1ec <HAL_TIM_PWM_Start+0x208>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d013      	beq.n	800c122 <HAL_TIM_PWM_Start+0x13e>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4a3c      	ldr	r2, [pc, #240]	@ (800c1f0 <HAL_TIM_PWM_Start+0x20c>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d00e      	beq.n	800c122 <HAL_TIM_PWM_Start+0x13e>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a3a      	ldr	r2, [pc, #232]	@ (800c1f4 <HAL_TIM_PWM_Start+0x210>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d009      	beq.n	800c122 <HAL_TIM_PWM_Start+0x13e>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4a39      	ldr	r2, [pc, #228]	@ (800c1f8 <HAL_TIM_PWM_Start+0x214>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d004      	beq.n	800c122 <HAL_TIM_PWM_Start+0x13e>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a37      	ldr	r2, [pc, #220]	@ (800c1fc <HAL_TIM_PWM_Start+0x218>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d101      	bne.n	800c126 <HAL_TIM_PWM_Start+0x142>
 800c122:	2301      	movs	r3, #1
 800c124:	e000      	b.n	800c128 <HAL_TIM_PWM_Start+0x144>
 800c126:	2300      	movs	r3, #0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d007      	beq.n	800c13c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c13a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a2a      	ldr	r2, [pc, #168]	@ (800c1ec <HAL_TIM_PWM_Start+0x208>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d02c      	beq.n	800c1a0 <HAL_TIM_PWM_Start+0x1bc>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c14e:	d027      	beq.n	800c1a0 <HAL_TIM_PWM_Start+0x1bc>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a2a      	ldr	r2, [pc, #168]	@ (800c200 <HAL_TIM_PWM_Start+0x21c>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d022      	beq.n	800c1a0 <HAL_TIM_PWM_Start+0x1bc>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a29      	ldr	r2, [pc, #164]	@ (800c204 <HAL_TIM_PWM_Start+0x220>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d01d      	beq.n	800c1a0 <HAL_TIM_PWM_Start+0x1bc>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4a27      	ldr	r2, [pc, #156]	@ (800c208 <HAL_TIM_PWM_Start+0x224>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d018      	beq.n	800c1a0 <HAL_TIM_PWM_Start+0x1bc>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a1f      	ldr	r2, [pc, #124]	@ (800c1f0 <HAL_TIM_PWM_Start+0x20c>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d013      	beq.n	800c1a0 <HAL_TIM_PWM_Start+0x1bc>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4a23      	ldr	r2, [pc, #140]	@ (800c20c <HAL_TIM_PWM_Start+0x228>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d00e      	beq.n	800c1a0 <HAL_TIM_PWM_Start+0x1bc>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a1b      	ldr	r2, [pc, #108]	@ (800c1f4 <HAL_TIM_PWM_Start+0x210>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d009      	beq.n	800c1a0 <HAL_TIM_PWM_Start+0x1bc>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a1f      	ldr	r2, [pc, #124]	@ (800c210 <HAL_TIM_PWM_Start+0x22c>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d004      	beq.n	800c1a0 <HAL_TIM_PWM_Start+0x1bc>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a1e      	ldr	r2, [pc, #120]	@ (800c214 <HAL_TIM_PWM_Start+0x230>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d115      	bne.n	800c1cc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	689a      	ldr	r2, [r3, #8]
 800c1a6:	4b1c      	ldr	r3, [pc, #112]	@ (800c218 <HAL_TIM_PWM_Start+0x234>)
 800c1a8:	4013      	ands	r3, r2
 800c1aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2b06      	cmp	r3, #6
 800c1b0:	d015      	beq.n	800c1de <HAL_TIM_PWM_Start+0x1fa>
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1b8:	d011      	beq.n	800c1de <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f042 0201 	orr.w	r2, r2, #1
 800c1c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1ca:	e008      	b.n	800c1de <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f042 0201 	orr.w	r2, r2, #1
 800c1da:	601a      	str	r2, [r3, #0]
 800c1dc:	e000      	b.n	800c1e0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	40010000 	.word	0x40010000
 800c1f0:	40010400 	.word	0x40010400
 800c1f4:	40014000 	.word	0x40014000
 800c1f8:	40014400 	.word	0x40014400
 800c1fc:	40014800 	.word	0x40014800
 800c200:	40000400 	.word	0x40000400
 800c204:	40000800 	.word	0x40000800
 800c208:	40000c00 	.word	0x40000c00
 800c20c:	40001800 	.word	0x40001800
 800c210:	4000e000 	.word	0x4000e000
 800c214:	4000e400 	.word	0x4000e400
 800c218:	00010007 	.word	0x00010007

0800c21c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	f003 0302 	and.w	r3, r3, #2
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d020      	beq.n	800c280 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f003 0302 	and.w	r3, r3, #2
 800c244:	2b00      	cmp	r3, #0
 800c246:	d01b      	beq.n	800c280 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f06f 0202 	mvn.w	r2, #2
 800c250:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2201      	movs	r2, #1
 800c256:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	699b      	ldr	r3, [r3, #24]
 800c25e:	f003 0303 	and.w	r3, r3, #3
 800c262:	2b00      	cmp	r3, #0
 800c264:	d003      	beq.n	800c26e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fb70 	bl	800c94c <HAL_TIM_IC_CaptureCallback>
 800c26c:	e005      	b.n	800c27a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 fb62 	bl	800c938 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 fb73 	bl	800c960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	f003 0304 	and.w	r3, r3, #4
 800c286:	2b00      	cmp	r3, #0
 800c288:	d020      	beq.n	800c2cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	f003 0304 	and.w	r3, r3, #4
 800c290:	2b00      	cmp	r3, #0
 800c292:	d01b      	beq.n	800c2cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f06f 0204 	mvn.w	r2, #4
 800c29c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2202      	movs	r2, #2
 800c2a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	699b      	ldr	r3, [r3, #24]
 800c2aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d003      	beq.n	800c2ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 fb4a 	bl	800c94c <HAL_TIM_IC_CaptureCallback>
 800c2b8:	e005      	b.n	800c2c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 fb3c 	bl	800c938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 fb4d 	bl	800c960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	f003 0308 	and.w	r3, r3, #8
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d020      	beq.n	800c318 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f003 0308 	and.w	r3, r3, #8
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d01b      	beq.n	800c318 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f06f 0208 	mvn.w	r2, #8
 800c2e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2204      	movs	r2, #4
 800c2ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	69db      	ldr	r3, [r3, #28]
 800c2f6:	f003 0303 	and.w	r3, r3, #3
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d003      	beq.n	800c306 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fb24 	bl	800c94c <HAL_TIM_IC_CaptureCallback>
 800c304:	e005      	b.n	800c312 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 fb16 	bl	800c938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 fb27 	bl	800c960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2200      	movs	r2, #0
 800c316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	f003 0310 	and.w	r3, r3, #16
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d020      	beq.n	800c364 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f003 0310 	and.w	r3, r3, #16
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d01b      	beq.n	800c364 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f06f 0210 	mvn.w	r2, #16
 800c334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2208      	movs	r2, #8
 800c33a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	69db      	ldr	r3, [r3, #28]
 800c342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c346:	2b00      	cmp	r3, #0
 800c348:	d003      	beq.n	800c352 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 fafe 	bl	800c94c <HAL_TIM_IC_CaptureCallback>
 800c350:	e005      	b.n	800c35e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 faf0 	bl	800c938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 fb01 	bl	800c960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	f003 0301 	and.w	r3, r3, #1
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00c      	beq.n	800c388 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f003 0301 	and.w	r3, r3, #1
 800c374:	2b00      	cmp	r3, #0
 800c376:	d007      	beq.n	800c388 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f06f 0201 	mvn.w	r2, #1
 800c380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f7f5 fa06 	bl	8001794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d104      	bne.n	800c39c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d00c      	beq.n	800c3b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d007      	beq.n	800c3b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c3ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 ffd5 	bl	800d360 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00c      	beq.n	800c3da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d007      	beq.n	800c3da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c3d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f000 ffcd 	bl	800d374 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00c      	beq.n	800c3fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d007      	beq.n	800c3fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c3f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 fabb 	bl	800c974 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	f003 0320 	and.w	r3, r3, #32
 800c404:	2b00      	cmp	r3, #0
 800c406:	d00c      	beq.n	800c422 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f003 0320 	and.w	r3, r3, #32
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d007      	beq.n	800c422 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f06f 0220 	mvn.w	r2, #32
 800c41a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 ff95 	bl	800d34c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c422:	bf00      	nop
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
	...

0800c42c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	60b9      	str	r1, [r7, #8]
 800c436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c438:	2300      	movs	r3, #0
 800c43a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c442:	2b01      	cmp	r3, #1
 800c444:	d101      	bne.n	800c44a <HAL_TIM_OC_ConfigChannel+0x1e>
 800c446:	2302      	movs	r3, #2
 800c448:	e066      	b.n	800c518 <HAL_TIM_OC_ConfigChannel+0xec>
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2201      	movs	r2, #1
 800c44e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2b14      	cmp	r3, #20
 800c456:	d857      	bhi.n	800c508 <HAL_TIM_OC_ConfigChannel+0xdc>
 800c458:	a201      	add	r2, pc, #4	@ (adr r2, 800c460 <HAL_TIM_OC_ConfigChannel+0x34>)
 800c45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c45e:	bf00      	nop
 800c460:	0800c4b5 	.word	0x0800c4b5
 800c464:	0800c509 	.word	0x0800c509
 800c468:	0800c509 	.word	0x0800c509
 800c46c:	0800c509 	.word	0x0800c509
 800c470:	0800c4c3 	.word	0x0800c4c3
 800c474:	0800c509 	.word	0x0800c509
 800c478:	0800c509 	.word	0x0800c509
 800c47c:	0800c509 	.word	0x0800c509
 800c480:	0800c4d1 	.word	0x0800c4d1
 800c484:	0800c509 	.word	0x0800c509
 800c488:	0800c509 	.word	0x0800c509
 800c48c:	0800c509 	.word	0x0800c509
 800c490:	0800c4df 	.word	0x0800c4df
 800c494:	0800c509 	.word	0x0800c509
 800c498:	0800c509 	.word	0x0800c509
 800c49c:	0800c509 	.word	0x0800c509
 800c4a0:	0800c4ed 	.word	0x0800c4ed
 800c4a4:	0800c509 	.word	0x0800c509
 800c4a8:	0800c509 	.word	0x0800c509
 800c4ac:	0800c509 	.word	0x0800c509
 800c4b0:	0800c4fb 	.word	0x0800c4fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	68b9      	ldr	r1, [r7, #8]
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f000 fb10 	bl	800cae0 <TIM_OC1_SetConfig>
      break;
 800c4c0:	e025      	b.n	800c50e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	68b9      	ldr	r1, [r7, #8]
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f000 fb99 	bl	800cc00 <TIM_OC2_SetConfig>
      break;
 800c4ce:	e01e      	b.n	800c50e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	68b9      	ldr	r1, [r7, #8]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f000 fc1c 	bl	800cd14 <TIM_OC3_SetConfig>
      break;
 800c4dc:	e017      	b.n	800c50e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	68b9      	ldr	r1, [r7, #8]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f000 fc9d 	bl	800ce24 <TIM_OC4_SetConfig>
      break;
 800c4ea:	e010      	b.n	800c50e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	68b9      	ldr	r1, [r7, #8]
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f000 fd00 	bl	800cef8 <TIM_OC5_SetConfig>
      break;
 800c4f8:	e009      	b.n	800c50e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	68b9      	ldr	r1, [r7, #8]
 800c500:	4618      	mov	r0, r3
 800c502:	f000 fd5d 	bl	800cfc0 <TIM_OC6_SetConfig>
      break;
 800c506:	e002      	b.n	800c50e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800c508:	2301      	movs	r3, #1
 800c50a:	75fb      	strb	r3, [r7, #23]
      break;
 800c50c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2200      	movs	r2, #0
 800c512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c516:	7dfb      	ldrb	r3, [r7, #23]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3718      	adds	r7, #24
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b086      	sub	sp, #24
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c536:	2b01      	cmp	r3, #1
 800c538:	d101      	bne.n	800c53e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c53a:	2302      	movs	r3, #2
 800c53c:	e0ff      	b.n	800c73e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2201      	movs	r2, #1
 800c542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2b14      	cmp	r3, #20
 800c54a:	f200 80f0 	bhi.w	800c72e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c54e:	a201      	add	r2, pc, #4	@ (adr r2, 800c554 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c554:	0800c5a9 	.word	0x0800c5a9
 800c558:	0800c72f 	.word	0x0800c72f
 800c55c:	0800c72f 	.word	0x0800c72f
 800c560:	0800c72f 	.word	0x0800c72f
 800c564:	0800c5e9 	.word	0x0800c5e9
 800c568:	0800c72f 	.word	0x0800c72f
 800c56c:	0800c72f 	.word	0x0800c72f
 800c570:	0800c72f 	.word	0x0800c72f
 800c574:	0800c62b 	.word	0x0800c62b
 800c578:	0800c72f 	.word	0x0800c72f
 800c57c:	0800c72f 	.word	0x0800c72f
 800c580:	0800c72f 	.word	0x0800c72f
 800c584:	0800c66b 	.word	0x0800c66b
 800c588:	0800c72f 	.word	0x0800c72f
 800c58c:	0800c72f 	.word	0x0800c72f
 800c590:	0800c72f 	.word	0x0800c72f
 800c594:	0800c6ad 	.word	0x0800c6ad
 800c598:	0800c72f 	.word	0x0800c72f
 800c59c:	0800c72f 	.word	0x0800c72f
 800c5a0:	0800c72f 	.word	0x0800c72f
 800c5a4:	0800c6ed 	.word	0x0800c6ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68b9      	ldr	r1, [r7, #8]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f000 fa96 	bl	800cae0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	699a      	ldr	r2, [r3, #24]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f042 0208 	orr.w	r2, r2, #8
 800c5c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	699a      	ldr	r2, [r3, #24]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f022 0204 	bic.w	r2, r2, #4
 800c5d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	6999      	ldr	r1, [r3, #24]
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	691a      	ldr	r2, [r3, #16]
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	430a      	orrs	r2, r1
 800c5e4:	619a      	str	r2, [r3, #24]
      break;
 800c5e6:	e0a5      	b.n	800c734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	68b9      	ldr	r1, [r7, #8]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f000 fb06 	bl	800cc00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	699a      	ldr	r2, [r3, #24]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	699a      	ldr	r2, [r3, #24]
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	6999      	ldr	r1, [r3, #24]
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	021a      	lsls	r2, r3, #8
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	430a      	orrs	r2, r1
 800c626:	619a      	str	r2, [r3, #24]
      break;
 800c628:	e084      	b.n	800c734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	68b9      	ldr	r1, [r7, #8]
 800c630:	4618      	mov	r0, r3
 800c632:	f000 fb6f 	bl	800cd14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	69da      	ldr	r2, [r3, #28]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f042 0208 	orr.w	r2, r2, #8
 800c644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	69da      	ldr	r2, [r3, #28]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f022 0204 	bic.w	r2, r2, #4
 800c654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	69d9      	ldr	r1, [r3, #28]
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	691a      	ldr	r2, [r3, #16]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	430a      	orrs	r2, r1
 800c666:	61da      	str	r2, [r3, #28]
      break;
 800c668:	e064      	b.n	800c734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	68b9      	ldr	r1, [r7, #8]
 800c670:	4618      	mov	r0, r3
 800c672:	f000 fbd7 	bl	800ce24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	69da      	ldr	r2, [r3, #28]
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	69da      	ldr	r2, [r3, #28]
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	69d9      	ldr	r1, [r3, #28]
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	021a      	lsls	r2, r3, #8
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	430a      	orrs	r2, r1
 800c6a8:	61da      	str	r2, [r3, #28]
      break;
 800c6aa:	e043      	b.n	800c734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	68b9      	ldr	r1, [r7, #8]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f000 fc20 	bl	800cef8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f042 0208 	orr.w	r2, r2, #8
 800c6c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f022 0204 	bic.w	r2, r2, #4
 800c6d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	691a      	ldr	r2, [r3, #16]
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	430a      	orrs	r2, r1
 800c6e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c6ea:	e023      	b.n	800c734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	68b9      	ldr	r1, [r7, #8]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f000 fc64 	bl	800cfc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c706:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c716:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	021a      	lsls	r2, r3, #8
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	430a      	orrs	r2, r1
 800c72a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c72c:	e002      	b.n	800c734 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c72e:	2301      	movs	r3, #1
 800c730:	75fb      	strb	r3, [r7, #23]
      break;
 800c732:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2200      	movs	r2, #0
 800c738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c73c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3718      	adds	r7, #24
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop

0800c748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c752:	2300      	movs	r3, #0
 800c754:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d101      	bne.n	800c764 <HAL_TIM_ConfigClockSource+0x1c>
 800c760:	2302      	movs	r3, #2
 800c762:	e0dc      	b.n	800c91e <HAL_TIM_ConfigClockSource+0x1d6>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2202      	movs	r2, #2
 800c770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	4b6a      	ldr	r3, [pc, #424]	@ (800c928 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c780:	4013      	ands	r3, r2
 800c782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c78a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	68ba      	ldr	r2, [r7, #8]
 800c792:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a64      	ldr	r2, [pc, #400]	@ (800c92c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	f000 80a9 	beq.w	800c8f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c7a0:	4a62      	ldr	r2, [pc, #392]	@ (800c92c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	f200 80ae 	bhi.w	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7a8:	4a61      	ldr	r2, [pc, #388]	@ (800c930 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	f000 80a1 	beq.w	800c8f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c7b0:	4a5f      	ldr	r2, [pc, #380]	@ (800c930 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	f200 80a6 	bhi.w	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7b8:	4a5e      	ldr	r2, [pc, #376]	@ (800c934 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	f000 8099 	beq.w	800c8f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c7c0:	4a5c      	ldr	r2, [pc, #368]	@ (800c934 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	f200 809e 	bhi.w	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c7cc:	f000 8091 	beq.w	800c8f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c7d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c7d4:	f200 8096 	bhi.w	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c7dc:	f000 8089 	beq.w	800c8f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c7e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c7e4:	f200 808e 	bhi.w	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7ec:	d03e      	beq.n	800c86c <HAL_TIM_ConfigClockSource+0x124>
 800c7ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7f2:	f200 8087 	bhi.w	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c7f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7fa:	f000 8086 	beq.w	800c90a <HAL_TIM_ConfigClockSource+0x1c2>
 800c7fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c802:	d87f      	bhi.n	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c804:	2b70      	cmp	r3, #112	@ 0x70
 800c806:	d01a      	beq.n	800c83e <HAL_TIM_ConfigClockSource+0xf6>
 800c808:	2b70      	cmp	r3, #112	@ 0x70
 800c80a:	d87b      	bhi.n	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c80c:	2b60      	cmp	r3, #96	@ 0x60
 800c80e:	d050      	beq.n	800c8b2 <HAL_TIM_ConfigClockSource+0x16a>
 800c810:	2b60      	cmp	r3, #96	@ 0x60
 800c812:	d877      	bhi.n	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c814:	2b50      	cmp	r3, #80	@ 0x50
 800c816:	d03c      	beq.n	800c892 <HAL_TIM_ConfigClockSource+0x14a>
 800c818:	2b50      	cmp	r3, #80	@ 0x50
 800c81a:	d873      	bhi.n	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c81c:	2b40      	cmp	r3, #64	@ 0x40
 800c81e:	d058      	beq.n	800c8d2 <HAL_TIM_ConfigClockSource+0x18a>
 800c820:	2b40      	cmp	r3, #64	@ 0x40
 800c822:	d86f      	bhi.n	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c824:	2b30      	cmp	r3, #48	@ 0x30
 800c826:	d064      	beq.n	800c8f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c828:	2b30      	cmp	r3, #48	@ 0x30
 800c82a:	d86b      	bhi.n	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c82c:	2b20      	cmp	r3, #32
 800c82e:	d060      	beq.n	800c8f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c830:	2b20      	cmp	r3, #32
 800c832:	d867      	bhi.n	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
 800c834:	2b00      	cmp	r3, #0
 800c836:	d05c      	beq.n	800c8f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c838:	2b10      	cmp	r3, #16
 800c83a:	d05a      	beq.n	800c8f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c83c:	e062      	b.n	800c904 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c84e:	f000 fc9b 	bl	800d188 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c860:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	68ba      	ldr	r2, [r7, #8]
 800c868:	609a      	str	r2, [r3, #8]
      break;
 800c86a:	e04f      	b.n	800c90c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c87c:	f000 fc84 	bl	800d188 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	689a      	ldr	r2, [r3, #8]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c88e:	609a      	str	r2, [r3, #8]
      break;
 800c890:	e03c      	b.n	800c90c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c89e:	461a      	mov	r2, r3
 800c8a0:	f000 fbf4 	bl	800d08c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2150      	movs	r1, #80	@ 0x50
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f000 fc4e 	bl	800d14c <TIM_ITRx_SetConfig>
      break;
 800c8b0:	e02c      	b.n	800c90c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c8be:	461a      	mov	r2, r3
 800c8c0:	f000 fc13 	bl	800d0ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2160      	movs	r1, #96	@ 0x60
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f000 fc3e 	bl	800d14c <TIM_ITRx_SetConfig>
      break;
 800c8d0:	e01c      	b.n	800c90c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8de:	461a      	mov	r2, r3
 800c8e0:	f000 fbd4 	bl	800d08c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2140      	movs	r1, #64	@ 0x40
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f000 fc2e 	bl	800d14c <TIM_ITRx_SetConfig>
      break;
 800c8f0:	e00c      	b.n	800c90c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	f000 fc25 	bl	800d14c <TIM_ITRx_SetConfig>
      break;
 800c902:	e003      	b.n	800c90c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c904:	2301      	movs	r3, #1
 800c906:	73fb      	strb	r3, [r7, #15]
      break;
 800c908:	e000      	b.n	800c90c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c90a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2201      	movs	r2, #1
 800c910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3710      	adds	r7, #16
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	ffceff88 	.word	0xffceff88
 800c92c:	00100040 	.word	0x00100040
 800c930:	00100030 	.word	0x00100030
 800c934:	00100020 	.word	0x00100020

0800c938 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c940:	bf00      	nop
 800c942:	370c      	adds	r7, #12
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c954:	bf00      	nop
 800c956:	370c      	adds	r7, #12
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c968:	bf00      	nop
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c97c:	bf00      	nop
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	4a47      	ldr	r2, [pc, #284]	@ (800cab8 <TIM_Base_SetConfig+0x130>)
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d013      	beq.n	800c9c8 <TIM_Base_SetConfig+0x40>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9a6:	d00f      	beq.n	800c9c8 <TIM_Base_SetConfig+0x40>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4a44      	ldr	r2, [pc, #272]	@ (800cabc <TIM_Base_SetConfig+0x134>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d00b      	beq.n	800c9c8 <TIM_Base_SetConfig+0x40>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4a43      	ldr	r2, [pc, #268]	@ (800cac0 <TIM_Base_SetConfig+0x138>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d007      	beq.n	800c9c8 <TIM_Base_SetConfig+0x40>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	4a42      	ldr	r2, [pc, #264]	@ (800cac4 <TIM_Base_SetConfig+0x13c>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d003      	beq.n	800c9c8 <TIM_Base_SetConfig+0x40>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	4a41      	ldr	r2, [pc, #260]	@ (800cac8 <TIM_Base_SetConfig+0x140>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d108      	bne.n	800c9da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4a36      	ldr	r2, [pc, #216]	@ (800cab8 <TIM_Base_SetConfig+0x130>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d027      	beq.n	800ca32 <TIM_Base_SetConfig+0xaa>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9e8:	d023      	beq.n	800ca32 <TIM_Base_SetConfig+0xaa>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	4a33      	ldr	r2, [pc, #204]	@ (800cabc <TIM_Base_SetConfig+0x134>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d01f      	beq.n	800ca32 <TIM_Base_SetConfig+0xaa>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4a32      	ldr	r2, [pc, #200]	@ (800cac0 <TIM_Base_SetConfig+0x138>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d01b      	beq.n	800ca32 <TIM_Base_SetConfig+0xaa>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	4a31      	ldr	r2, [pc, #196]	@ (800cac4 <TIM_Base_SetConfig+0x13c>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d017      	beq.n	800ca32 <TIM_Base_SetConfig+0xaa>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4a30      	ldr	r2, [pc, #192]	@ (800cac8 <TIM_Base_SetConfig+0x140>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d013      	beq.n	800ca32 <TIM_Base_SetConfig+0xaa>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	4a2f      	ldr	r2, [pc, #188]	@ (800cacc <TIM_Base_SetConfig+0x144>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d00f      	beq.n	800ca32 <TIM_Base_SetConfig+0xaa>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	4a2e      	ldr	r2, [pc, #184]	@ (800cad0 <TIM_Base_SetConfig+0x148>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d00b      	beq.n	800ca32 <TIM_Base_SetConfig+0xaa>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4a2d      	ldr	r2, [pc, #180]	@ (800cad4 <TIM_Base_SetConfig+0x14c>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d007      	beq.n	800ca32 <TIM_Base_SetConfig+0xaa>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	4a2c      	ldr	r2, [pc, #176]	@ (800cad8 <TIM_Base_SetConfig+0x150>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d003      	beq.n	800ca32 <TIM_Base_SetConfig+0xaa>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4a2b      	ldr	r2, [pc, #172]	@ (800cadc <TIM_Base_SetConfig+0x154>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d108      	bne.n	800ca44 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ca38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	68fa      	ldr	r2, [r7, #12]
 800ca40:	4313      	orrs	r3, r2
 800ca42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	695b      	ldr	r3, [r3, #20]
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	689a      	ldr	r2, [r3, #8]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4a14      	ldr	r2, [pc, #80]	@ (800cab8 <TIM_Base_SetConfig+0x130>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d00f      	beq.n	800ca8a <TIM_Base_SetConfig+0x102>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a16      	ldr	r2, [pc, #88]	@ (800cac8 <TIM_Base_SetConfig+0x140>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d00b      	beq.n	800ca8a <TIM_Base_SetConfig+0x102>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4a15      	ldr	r2, [pc, #84]	@ (800cacc <TIM_Base_SetConfig+0x144>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d007      	beq.n	800ca8a <TIM_Base_SetConfig+0x102>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	4a14      	ldr	r2, [pc, #80]	@ (800cad0 <TIM_Base_SetConfig+0x148>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d003      	beq.n	800ca8a <TIM_Base_SetConfig+0x102>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	4a13      	ldr	r2, [pc, #76]	@ (800cad4 <TIM_Base_SetConfig+0x14c>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d103      	bne.n	800ca92 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	691a      	ldr	r2, [r3, #16]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f043 0204 	orr.w	r2, r3, #4
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2201      	movs	r2, #1
 800caa2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	68fa      	ldr	r2, [r7, #12]
 800caa8:	601a      	str	r2, [r3, #0]
}
 800caaa:	bf00      	nop
 800caac:	3714      	adds	r7, #20
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr
 800cab6:	bf00      	nop
 800cab8:	40010000 	.word	0x40010000
 800cabc:	40000400 	.word	0x40000400
 800cac0:	40000800 	.word	0x40000800
 800cac4:	40000c00 	.word	0x40000c00
 800cac8:	40010400 	.word	0x40010400
 800cacc:	40014000 	.word	0x40014000
 800cad0:	40014400 	.word	0x40014400
 800cad4:	40014800 	.word	0x40014800
 800cad8:	4000e000 	.word	0x4000e000
 800cadc:	4000e400 	.word	0x4000e400

0800cae0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b087      	sub	sp, #28
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6a1b      	ldr	r3, [r3, #32]
 800caee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6a1b      	ldr	r3, [r3, #32]
 800caf4:	f023 0201 	bic.w	r2, r3, #1
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	699b      	ldr	r3, [r3, #24]
 800cb06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	4b37      	ldr	r3, [pc, #220]	@ (800cbe8 <TIM_OC1_SetConfig+0x108>)
 800cb0c:	4013      	ands	r3, r2
 800cb0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	f023 0303 	bic.w	r3, r3, #3
 800cb16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	f023 0302 	bic.w	r3, r3, #2
 800cb28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	697a      	ldr	r2, [r7, #20]
 800cb30:	4313      	orrs	r3, r2
 800cb32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a2d      	ldr	r2, [pc, #180]	@ (800cbec <TIM_OC1_SetConfig+0x10c>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d00f      	beq.n	800cb5c <TIM_OC1_SetConfig+0x7c>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a2c      	ldr	r2, [pc, #176]	@ (800cbf0 <TIM_OC1_SetConfig+0x110>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d00b      	beq.n	800cb5c <TIM_OC1_SetConfig+0x7c>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4a2b      	ldr	r2, [pc, #172]	@ (800cbf4 <TIM_OC1_SetConfig+0x114>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d007      	beq.n	800cb5c <TIM_OC1_SetConfig+0x7c>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4a2a      	ldr	r2, [pc, #168]	@ (800cbf8 <TIM_OC1_SetConfig+0x118>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d003      	beq.n	800cb5c <TIM_OC1_SetConfig+0x7c>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4a29      	ldr	r2, [pc, #164]	@ (800cbfc <TIM_OC1_SetConfig+0x11c>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d10c      	bne.n	800cb76 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	f023 0308 	bic.w	r3, r3, #8
 800cb62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	697a      	ldr	r2, [r7, #20]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	f023 0304 	bic.w	r3, r3, #4
 800cb74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a1c      	ldr	r2, [pc, #112]	@ (800cbec <TIM_OC1_SetConfig+0x10c>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d00f      	beq.n	800cb9e <TIM_OC1_SetConfig+0xbe>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a1b      	ldr	r2, [pc, #108]	@ (800cbf0 <TIM_OC1_SetConfig+0x110>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d00b      	beq.n	800cb9e <TIM_OC1_SetConfig+0xbe>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4a1a      	ldr	r2, [pc, #104]	@ (800cbf4 <TIM_OC1_SetConfig+0x114>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d007      	beq.n	800cb9e <TIM_OC1_SetConfig+0xbe>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a19      	ldr	r2, [pc, #100]	@ (800cbf8 <TIM_OC1_SetConfig+0x118>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d003      	beq.n	800cb9e <TIM_OC1_SetConfig+0xbe>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4a18      	ldr	r2, [pc, #96]	@ (800cbfc <TIM_OC1_SetConfig+0x11c>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d111      	bne.n	800cbc2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cbac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	695b      	ldr	r3, [r3, #20]
 800cbb2:	693a      	ldr	r2, [r7, #16]
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	699b      	ldr	r3, [r3, #24]
 800cbbc:	693a      	ldr	r2, [r7, #16]
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	693a      	ldr	r2, [r7, #16]
 800cbc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	68fa      	ldr	r2, [r7, #12]
 800cbcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	685a      	ldr	r2, [r3, #4]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	697a      	ldr	r2, [r7, #20]
 800cbda:	621a      	str	r2, [r3, #32]
}
 800cbdc:	bf00      	nop
 800cbde:	371c      	adds	r7, #28
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr
 800cbe8:	fffeff8f 	.word	0xfffeff8f
 800cbec:	40010000 	.word	0x40010000
 800cbf0:	40010400 	.word	0x40010400
 800cbf4:	40014000 	.word	0x40014000
 800cbf8:	40014400 	.word	0x40014400
 800cbfc:	40014800 	.word	0x40014800

0800cc00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b087      	sub	sp, #28
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6a1b      	ldr	r3, [r3, #32]
 800cc0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6a1b      	ldr	r3, [r3, #32]
 800cc14:	f023 0210 	bic.w	r2, r3, #16
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	699b      	ldr	r3, [r3, #24]
 800cc26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cc28:	68fa      	ldr	r2, [r7, #12]
 800cc2a:	4b34      	ldr	r3, [pc, #208]	@ (800ccfc <TIM_OC2_SetConfig+0xfc>)
 800cc2c:	4013      	ands	r3, r2
 800cc2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cc36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	021b      	lsls	r3, r3, #8
 800cc3e:	68fa      	ldr	r2, [r7, #12]
 800cc40:	4313      	orrs	r3, r2
 800cc42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	f023 0320 	bic.w	r3, r3, #32
 800cc4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	689b      	ldr	r3, [r3, #8]
 800cc50:	011b      	lsls	r3, r3, #4
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	4313      	orrs	r3, r2
 800cc56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	4a29      	ldr	r2, [pc, #164]	@ (800cd00 <TIM_OC2_SetConfig+0x100>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d003      	beq.n	800cc68 <TIM_OC2_SetConfig+0x68>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	4a28      	ldr	r2, [pc, #160]	@ (800cd04 <TIM_OC2_SetConfig+0x104>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d10d      	bne.n	800cc84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	011b      	lsls	r3, r3, #4
 800cc76:	697a      	ldr	r2, [r7, #20]
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4a1e      	ldr	r2, [pc, #120]	@ (800cd00 <TIM_OC2_SetConfig+0x100>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d00f      	beq.n	800ccac <TIM_OC2_SetConfig+0xac>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	4a1d      	ldr	r2, [pc, #116]	@ (800cd04 <TIM_OC2_SetConfig+0x104>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d00b      	beq.n	800ccac <TIM_OC2_SetConfig+0xac>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	4a1c      	ldr	r2, [pc, #112]	@ (800cd08 <TIM_OC2_SetConfig+0x108>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d007      	beq.n	800ccac <TIM_OC2_SetConfig+0xac>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	4a1b      	ldr	r2, [pc, #108]	@ (800cd0c <TIM_OC2_SetConfig+0x10c>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d003      	beq.n	800ccac <TIM_OC2_SetConfig+0xac>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	4a1a      	ldr	r2, [pc, #104]	@ (800cd10 <TIM_OC2_SetConfig+0x110>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d113      	bne.n	800ccd4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ccb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ccba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	695b      	ldr	r3, [r3, #20]
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	693a      	ldr	r2, [r7, #16]
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	699b      	ldr	r3, [r3, #24]
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	693a      	ldr	r2, [r7, #16]
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	693a      	ldr	r2, [r7, #16]
 800ccd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	68fa      	ldr	r2, [r7, #12]
 800ccde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	685a      	ldr	r2, [r3, #4]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	697a      	ldr	r2, [r7, #20]
 800ccec:	621a      	str	r2, [r3, #32]
}
 800ccee:	bf00      	nop
 800ccf0:	371c      	adds	r7, #28
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf8:	4770      	bx	lr
 800ccfa:	bf00      	nop
 800ccfc:	feff8fff 	.word	0xfeff8fff
 800cd00:	40010000 	.word	0x40010000
 800cd04:	40010400 	.word	0x40010400
 800cd08:	40014000 	.word	0x40014000
 800cd0c:	40014400 	.word	0x40014400
 800cd10:	40014800 	.word	0x40014800

0800cd14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cd14:	b480      	push	{r7}
 800cd16:	b087      	sub	sp, #28
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6a1b      	ldr	r3, [r3, #32]
 800cd22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6a1b      	ldr	r3, [r3, #32]
 800cd28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	69db      	ldr	r3, [r3, #28]
 800cd3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	4b33      	ldr	r3, [pc, #204]	@ (800ce0c <TIM_OC3_SetConfig+0xf8>)
 800cd40:	4013      	ands	r3, r2
 800cd42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f023 0303 	bic.w	r3, r3, #3
 800cd4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	68fa      	ldr	r2, [r7, #12]
 800cd52:	4313      	orrs	r3, r2
 800cd54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cd5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	021b      	lsls	r3, r3, #8
 800cd64:	697a      	ldr	r2, [r7, #20]
 800cd66:	4313      	orrs	r3, r2
 800cd68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	4a28      	ldr	r2, [pc, #160]	@ (800ce10 <TIM_OC3_SetConfig+0xfc>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d003      	beq.n	800cd7a <TIM_OC3_SetConfig+0x66>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	4a27      	ldr	r2, [pc, #156]	@ (800ce14 <TIM_OC3_SetConfig+0x100>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d10d      	bne.n	800cd96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cd80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	68db      	ldr	r3, [r3, #12]
 800cd86:	021b      	lsls	r3, r3, #8
 800cd88:	697a      	ldr	r2, [r7, #20]
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cd94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	4a1d      	ldr	r2, [pc, #116]	@ (800ce10 <TIM_OC3_SetConfig+0xfc>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d00f      	beq.n	800cdbe <TIM_OC3_SetConfig+0xaa>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	4a1c      	ldr	r2, [pc, #112]	@ (800ce14 <TIM_OC3_SetConfig+0x100>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d00b      	beq.n	800cdbe <TIM_OC3_SetConfig+0xaa>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	4a1b      	ldr	r2, [pc, #108]	@ (800ce18 <TIM_OC3_SetConfig+0x104>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d007      	beq.n	800cdbe <TIM_OC3_SetConfig+0xaa>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	4a1a      	ldr	r2, [pc, #104]	@ (800ce1c <TIM_OC3_SetConfig+0x108>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d003      	beq.n	800cdbe <TIM_OC3_SetConfig+0xaa>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	4a19      	ldr	r2, [pc, #100]	@ (800ce20 <TIM_OC3_SetConfig+0x10c>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d113      	bne.n	800cde6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cdc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cdcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	695b      	ldr	r3, [r3, #20]
 800cdd2:	011b      	lsls	r3, r3, #4
 800cdd4:	693a      	ldr	r2, [r7, #16]
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	699b      	ldr	r3, [r3, #24]
 800cdde:	011b      	lsls	r3, r3, #4
 800cde0:	693a      	ldr	r2, [r7, #16]
 800cde2:	4313      	orrs	r3, r2
 800cde4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	693a      	ldr	r2, [r7, #16]
 800cdea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	68fa      	ldr	r2, [r7, #12]
 800cdf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	685a      	ldr	r2, [r3, #4]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	697a      	ldr	r2, [r7, #20]
 800cdfe:	621a      	str	r2, [r3, #32]
}
 800ce00:	bf00      	nop
 800ce02:	371c      	adds	r7, #28
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr
 800ce0c:	fffeff8f 	.word	0xfffeff8f
 800ce10:	40010000 	.word	0x40010000
 800ce14:	40010400 	.word	0x40010400
 800ce18:	40014000 	.word	0x40014000
 800ce1c:	40014400 	.word	0x40014400
 800ce20:	40014800 	.word	0x40014800

0800ce24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b087      	sub	sp, #28
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6a1b      	ldr	r3, [r3, #32]
 800ce32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6a1b      	ldr	r3, [r3, #32]
 800ce38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	69db      	ldr	r3, [r3, #28]
 800ce4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ce4c:	68fa      	ldr	r2, [r7, #12]
 800ce4e:	4b24      	ldr	r3, [pc, #144]	@ (800cee0 <TIM_OC4_SetConfig+0xbc>)
 800ce50:	4013      	ands	r3, r2
 800ce52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ce5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	021b      	lsls	r3, r3, #8
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	4313      	orrs	r3, r2
 800ce66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ce6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	031b      	lsls	r3, r3, #12
 800ce76:	693a      	ldr	r2, [r7, #16]
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	4a19      	ldr	r2, [pc, #100]	@ (800cee4 <TIM_OC4_SetConfig+0xc0>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d00f      	beq.n	800cea4 <TIM_OC4_SetConfig+0x80>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	4a18      	ldr	r2, [pc, #96]	@ (800cee8 <TIM_OC4_SetConfig+0xc4>)
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d00b      	beq.n	800cea4 <TIM_OC4_SetConfig+0x80>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	4a17      	ldr	r2, [pc, #92]	@ (800ceec <TIM_OC4_SetConfig+0xc8>)
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d007      	beq.n	800cea4 <TIM_OC4_SetConfig+0x80>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	4a16      	ldr	r2, [pc, #88]	@ (800cef0 <TIM_OC4_SetConfig+0xcc>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d003      	beq.n	800cea4 <TIM_OC4_SetConfig+0x80>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	4a15      	ldr	r2, [pc, #84]	@ (800cef4 <TIM_OC4_SetConfig+0xd0>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d109      	bne.n	800ceb8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ceaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	695b      	ldr	r3, [r3, #20]
 800ceb0:	019b      	lsls	r3, r3, #6
 800ceb2:	697a      	ldr	r2, [r7, #20]
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	697a      	ldr	r2, [r7, #20]
 800cebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	68fa      	ldr	r2, [r7, #12]
 800cec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	685a      	ldr	r2, [r3, #4]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	693a      	ldr	r2, [r7, #16]
 800ced0:	621a      	str	r2, [r3, #32]
}
 800ced2:	bf00      	nop
 800ced4:	371c      	adds	r7, #28
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	feff8fff 	.word	0xfeff8fff
 800cee4:	40010000 	.word	0x40010000
 800cee8:	40010400 	.word	0x40010400
 800ceec:	40014000 	.word	0x40014000
 800cef0:	40014400 	.word	0x40014400
 800cef4:	40014800 	.word	0x40014800

0800cef8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b087      	sub	sp, #28
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6a1b      	ldr	r3, [r3, #32]
 800cf06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6a1b      	ldr	r3, [r3, #32]
 800cf0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cf20:	68fa      	ldr	r2, [r7, #12]
 800cf22:	4b21      	ldr	r3, [pc, #132]	@ (800cfa8 <TIM_OC5_SetConfig+0xb0>)
 800cf24:	4013      	ands	r3, r2
 800cf26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	68fa      	ldr	r2, [r7, #12]
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cf38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	689b      	ldr	r3, [r3, #8]
 800cf3e:	041b      	lsls	r3, r3, #16
 800cf40:	693a      	ldr	r2, [r7, #16]
 800cf42:	4313      	orrs	r3, r2
 800cf44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	4a18      	ldr	r2, [pc, #96]	@ (800cfac <TIM_OC5_SetConfig+0xb4>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d00f      	beq.n	800cf6e <TIM_OC5_SetConfig+0x76>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	4a17      	ldr	r2, [pc, #92]	@ (800cfb0 <TIM_OC5_SetConfig+0xb8>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d00b      	beq.n	800cf6e <TIM_OC5_SetConfig+0x76>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4a16      	ldr	r2, [pc, #88]	@ (800cfb4 <TIM_OC5_SetConfig+0xbc>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d007      	beq.n	800cf6e <TIM_OC5_SetConfig+0x76>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4a15      	ldr	r2, [pc, #84]	@ (800cfb8 <TIM_OC5_SetConfig+0xc0>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d003      	beq.n	800cf6e <TIM_OC5_SetConfig+0x76>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a14      	ldr	r2, [pc, #80]	@ (800cfbc <TIM_OC5_SetConfig+0xc4>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d109      	bne.n	800cf82 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cf74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	695b      	ldr	r3, [r3, #20]
 800cf7a:	021b      	lsls	r3, r3, #8
 800cf7c:	697a      	ldr	r2, [r7, #20]
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	697a      	ldr	r2, [r7, #20]
 800cf86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	68fa      	ldr	r2, [r7, #12]
 800cf8c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	685a      	ldr	r2, [r3, #4]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	693a      	ldr	r2, [r7, #16]
 800cf9a:	621a      	str	r2, [r3, #32]
}
 800cf9c:	bf00      	nop
 800cf9e:	371c      	adds	r7, #28
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr
 800cfa8:	fffeff8f 	.word	0xfffeff8f
 800cfac:	40010000 	.word	0x40010000
 800cfb0:	40010400 	.word	0x40010400
 800cfb4:	40014000 	.word	0x40014000
 800cfb8:	40014400 	.word	0x40014400
 800cfbc:	40014800 	.word	0x40014800

0800cfc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b087      	sub	sp, #28
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6a1b      	ldr	r3, [r3, #32]
 800cfce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6a1b      	ldr	r3, [r3, #32]
 800cfd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	685b      	ldr	r3, [r3, #4]
 800cfe0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cfe8:	68fa      	ldr	r2, [r7, #12]
 800cfea:	4b22      	ldr	r3, [pc, #136]	@ (800d074 <TIM_OC6_SetConfig+0xb4>)
 800cfec:	4013      	ands	r3, r2
 800cfee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	021b      	lsls	r3, r3, #8
 800cff6:	68fa      	ldr	r2, [r7, #12]
 800cff8:	4313      	orrs	r3, r2
 800cffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	051b      	lsls	r3, r3, #20
 800d00a:	693a      	ldr	r2, [r7, #16]
 800d00c:	4313      	orrs	r3, r2
 800d00e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4a19      	ldr	r2, [pc, #100]	@ (800d078 <TIM_OC6_SetConfig+0xb8>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d00f      	beq.n	800d038 <TIM_OC6_SetConfig+0x78>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4a18      	ldr	r2, [pc, #96]	@ (800d07c <TIM_OC6_SetConfig+0xbc>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d00b      	beq.n	800d038 <TIM_OC6_SetConfig+0x78>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	4a17      	ldr	r2, [pc, #92]	@ (800d080 <TIM_OC6_SetConfig+0xc0>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d007      	beq.n	800d038 <TIM_OC6_SetConfig+0x78>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	4a16      	ldr	r2, [pc, #88]	@ (800d084 <TIM_OC6_SetConfig+0xc4>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d003      	beq.n	800d038 <TIM_OC6_SetConfig+0x78>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	4a15      	ldr	r2, [pc, #84]	@ (800d088 <TIM_OC6_SetConfig+0xc8>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d109      	bne.n	800d04c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d03e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	695b      	ldr	r3, [r3, #20]
 800d044:	029b      	lsls	r3, r3, #10
 800d046:	697a      	ldr	r2, [r7, #20]
 800d048:	4313      	orrs	r3, r2
 800d04a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	697a      	ldr	r2, [r7, #20]
 800d050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	685a      	ldr	r2, [r3, #4]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	693a      	ldr	r2, [r7, #16]
 800d064:	621a      	str	r2, [r3, #32]
}
 800d066:	bf00      	nop
 800d068:	371c      	adds	r7, #28
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	feff8fff 	.word	0xfeff8fff
 800d078:	40010000 	.word	0x40010000
 800d07c:	40010400 	.word	0x40010400
 800d080:	40014000 	.word	0x40014000
 800d084:	40014400 	.word	0x40014400
 800d088:	40014800 	.word	0x40014800

0800d08c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b087      	sub	sp, #28
 800d090:	af00      	add	r7, sp, #0
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	60b9      	str	r1, [r7, #8]
 800d096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	6a1b      	ldr	r3, [r3, #32]
 800d09c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	6a1b      	ldr	r3, [r3, #32]
 800d0a2:	f023 0201 	bic.w	r2, r3, #1
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	699b      	ldr	r3, [r3, #24]
 800d0ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d0b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	011b      	lsls	r3, r3, #4
 800d0bc:	693a      	ldr	r2, [r7, #16]
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	f023 030a 	bic.w	r3, r3, #10
 800d0c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d0ca:	697a      	ldr	r2, [r7, #20]
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	693a      	ldr	r2, [r7, #16]
 800d0d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	697a      	ldr	r2, [r7, #20]
 800d0dc:	621a      	str	r2, [r3, #32]
}
 800d0de:	bf00      	nop
 800d0e0:	371c      	adds	r7, #28
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e8:	4770      	bx	lr

0800d0ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d0ea:	b480      	push	{r7}
 800d0ec:	b087      	sub	sp, #28
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	60f8      	str	r0, [r7, #12]
 800d0f2:	60b9      	str	r1, [r7, #8]
 800d0f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	6a1b      	ldr	r3, [r3, #32]
 800d0fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	6a1b      	ldr	r3, [r3, #32]
 800d100:	f023 0210 	bic.w	r2, r3, #16
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	699b      	ldr	r3, [r3, #24]
 800d10c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d114:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	031b      	lsls	r3, r3, #12
 800d11a:	693a      	ldr	r2, [r7, #16]
 800d11c:	4313      	orrs	r3, r2
 800d11e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d126:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	011b      	lsls	r3, r3, #4
 800d12c:	697a      	ldr	r2, [r7, #20]
 800d12e:	4313      	orrs	r3, r2
 800d130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	693a      	ldr	r2, [r7, #16]
 800d136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	697a      	ldr	r2, [r7, #20]
 800d13c:	621a      	str	r2, [r3, #32]
}
 800d13e:	bf00      	nop
 800d140:	371c      	adds	r7, #28
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr
	...

0800d14c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b085      	sub	sp, #20
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	4b09      	ldr	r3, [pc, #36]	@ (800d184 <TIM_ITRx_SetConfig+0x38>)
 800d160:	4013      	ands	r3, r2
 800d162:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d164:	683a      	ldr	r2, [r7, #0]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	4313      	orrs	r3, r2
 800d16a:	f043 0307 	orr.w	r3, r3, #7
 800d16e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	68fa      	ldr	r2, [r7, #12]
 800d174:	609a      	str	r2, [r3, #8]
}
 800d176:	bf00      	nop
 800d178:	3714      	adds	r7, #20
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr
 800d182:	bf00      	nop
 800d184:	ffcfff8f 	.word	0xffcfff8f

0800d188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d188:	b480      	push	{r7}
 800d18a:	b087      	sub	sp, #28
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	60b9      	str	r1, [r7, #8]
 800d192:	607a      	str	r2, [r7, #4]
 800d194:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d1a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	021a      	lsls	r2, r3, #8
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	431a      	orrs	r2, r3
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	4313      	orrs	r3, r2
 800d1b0:	697a      	ldr	r2, [r7, #20]
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	697a      	ldr	r2, [r7, #20]
 800d1ba:	609a      	str	r2, [r3, #8]
}
 800d1bc:	bf00      	nop
 800d1be:	371c      	adds	r7, #28
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b087      	sub	sp, #28
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	f003 031f 	and.w	r3, r3, #31
 800d1da:	2201      	movs	r2, #1
 800d1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d1e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	6a1a      	ldr	r2, [r3, #32]
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	43db      	mvns	r3, r3
 800d1ea:	401a      	ands	r2, r3
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	6a1a      	ldr	r2, [r3, #32]
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	f003 031f 	and.w	r3, r3, #31
 800d1fa:	6879      	ldr	r1, [r7, #4]
 800d1fc:	fa01 f303 	lsl.w	r3, r1, r3
 800d200:	431a      	orrs	r2, r3
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	621a      	str	r2, [r3, #32]
}
 800d206:	bf00      	nop
 800d208:	371c      	adds	r7, #28
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr
	...

0800d214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d214:	b480      	push	{r7}
 800d216:	b085      	sub	sp, #20
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d224:	2b01      	cmp	r3, #1
 800d226:	d101      	bne.n	800d22c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d228:	2302      	movs	r3, #2
 800d22a:	e077      	b.n	800d31c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2201      	movs	r2, #1
 800d230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2202      	movs	r2, #2
 800d238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	689b      	ldr	r3, [r3, #8]
 800d24a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4a35      	ldr	r2, [pc, #212]	@ (800d328 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d004      	beq.n	800d260 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	4a34      	ldr	r2, [pc, #208]	@ (800d32c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d108      	bne.n	800d272 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d266:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	4313      	orrs	r3, r2
 800d270:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d278:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	68fa      	ldr	r2, [r7, #12]
 800d280:	4313      	orrs	r3, r2
 800d282:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	68fa      	ldr	r2, [r7, #12]
 800d28a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a25      	ldr	r2, [pc, #148]	@ (800d328 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d02c      	beq.n	800d2f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d29e:	d027      	beq.n	800d2f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4a22      	ldr	r2, [pc, #136]	@ (800d330 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d022      	beq.n	800d2f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a21      	ldr	r2, [pc, #132]	@ (800d334 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d01d      	beq.n	800d2f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a1f      	ldr	r2, [pc, #124]	@ (800d338 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d018      	beq.n	800d2f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4a1a      	ldr	r2, [pc, #104]	@ (800d32c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d013      	beq.n	800d2f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a1b      	ldr	r2, [pc, #108]	@ (800d33c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d00e      	beq.n	800d2f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4a1a      	ldr	r2, [pc, #104]	@ (800d340 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d009      	beq.n	800d2f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a18      	ldr	r2, [pc, #96]	@ (800d344 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d004      	beq.n	800d2f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a17      	ldr	r2, [pc, #92]	@ (800d348 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d10c      	bne.n	800d30a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d2f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	689b      	ldr	r3, [r3, #8]
 800d2fc:	68ba      	ldr	r2, [r7, #8]
 800d2fe:	4313      	orrs	r3, r2
 800d300:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	68ba      	ldr	r2, [r7, #8]
 800d308:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2201      	movs	r2, #1
 800d30e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2200      	movs	r2, #0
 800d316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d31a:	2300      	movs	r3, #0
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3714      	adds	r7, #20
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr
 800d328:	40010000 	.word	0x40010000
 800d32c:	40010400 	.word	0x40010400
 800d330:	40000400 	.word	0x40000400
 800d334:	40000800 	.word	0x40000800
 800d338:	40000c00 	.word	0x40000c00
 800d33c:	40001800 	.word	0x40001800
 800d340:	40014000 	.word	0x40014000
 800d344:	4000e000 	.word	0x4000e000
 800d348:	4000e400 	.word	0x4000e400

0800d34c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d354:	bf00      	nop
 800d356:	370c      	adds	r7, #12
 800d358:	46bd      	mov	sp, r7
 800d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35e:	4770      	bx	lr

0800d360 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d360:	b480      	push	{r7}
 800d362:	b083      	sub	sp, #12
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d368:	bf00      	nop
 800d36a:	370c      	adds	r7, #12
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr

0800d374 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d374:	b480      	push	{r7}
 800d376:	b083      	sub	sp, #12
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d37c:	bf00      	nop
 800d37e:	370c      	adds	r7, #12
 800d380:	46bd      	mov	sp, r7
 800d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d386:	4770      	bx	lr

0800d388 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800d388:	b480      	push	{r7}
 800d38a:	b083      	sub	sp, #12
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
    {
 800d390:	4a04      	ldr	r2, [pc, #16]	@ (800d3a4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	601a      	str	r2, [r3, #0]
    }
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4618      	mov	r0, r3
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr
 800d3a4:	0800fe34 	.word	0x0800fe34

0800d3a8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
    }
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f7ff ffe9 	bl	800d388 <_ZN8touchgfx4FontD1Ev>
 800d3b6:	2114      	movs	r1, #20
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f001 fb6c 	bl	800ea96 <_ZdlPvj>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3708      	adds	r7, #8
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800d3c8:	b590      	push	{r4, r7, lr}
 800d3ca:	b087      	sub	sp, #28
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800d3d4:	887b      	ldrh	r3, [r7, #2]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d101      	bne.n	800d3de <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	e010      	b.n	800d400 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	3308      	adds	r3, #8
 800d3ec:	681c      	ldr	r4, [r3, #0]
 800d3ee:	f107 030f 	add.w	r3, r7, #15
 800d3f2:	f107 0210 	add.w	r2, r7, #16
 800d3f6:	8879      	ldrh	r1, [r7, #2]
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	47a0      	blx	r4
 800d3fc:	6178      	str	r0, [r7, #20]
        return glyph;
 800d3fe:	697b      	ldr	r3, [r7, #20]
    }
 800d400:	4618      	mov	r0, r3
 800d402:	371c      	adds	r7, #28
 800d404:	46bd      	mov	sp, r7
 800d406:	bd90      	pop	{r4, r7, pc}

0800d408 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800d408:	b480      	push	{r7}
 800d40a:	b083      	sub	sp, #12
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	89db      	ldrh	r3, [r3, #14]
    }
 800d414:	4618      	mov	r0, r3
 800d416:	370c      	adds	r7, #12
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	8a1b      	ldrh	r3, [r3, #16]
    }
 800d42c:	4618      	mov	r0, r3
 800d42e:	370c      	adds	r7, #12
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	88db      	ldrh	r3, [r3, #6]
    }
 800d444:	4618      	mov	r0, r3
 800d446:	370c      	adds	r7, #12
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	889b      	ldrh	r3, [r3, #4]
    }
 800d45c:	4618      	mov	r0, r3
 800d45e:	370c      	adds	r7, #12
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr

0800d468 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	7a9b      	ldrb	r3, [r3, #10]
 800d474:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800d478:	b2db      	uxtb	r3, r3
    }
 800d47a:	4618      	mov	r0, r3
 800d47c:	370c      	adds	r7, #12
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr

0800d486 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800d486:	b480      	push	{r7}
 800d488:	b083      	sub	sp, #12
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	7a9b      	ldrb	r3, [r3, #10]
 800d492:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d496:	b2db      	uxtb	r3, r3
    }
 800d498:	4618      	mov	r0, r3
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
    {
        return false;
 800d4ac:	2300      	movs	r3, #0
    }
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	370c      	adds	r7, #12
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr

0800d4ba <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800d4ba:	b480      	push	{r7}
 800d4bc:	b083      	sub	sp, #12
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800d4c2:	f04f 0300 	mov.w	r3, #0
 800d4c6:	ee07 3a90 	vmov	s15, r3
    }
 800d4ca:	eeb0 0a67 	vmov.f32	s0, s15
 800d4ce:	370c      	adds	r7, #12
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	4a05      	ldr	r2, [pc, #20]	@ (800d4f8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	601a      	str	r2, [r3, #0]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7ff ff4d 	bl	800d388 <_ZN8touchgfx4FontD1Ev>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3708      	adds	r7, #8
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	0800fe98 	.word	0x0800fe98

0800d4fc <_ZN8touchgfx9ConstFontD0Ev>:
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f7ff ffe7 	bl	800d4d8 <_ZN8touchgfx9ConstFontD1Ev>
 800d50a:	211c      	movs	r1, #28
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f001 fac2 	bl	800ea96 <_ZdlPvj>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	4618      	mov	r0, r3
 800d516:	3708      	adds	r7, #8
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	4a05      	ldr	r2, [pc, #20]	@ (800d53c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	601a      	str	r2, [r3, #0]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7ff ffd3 	bl	800d4d8 <_ZN8touchgfx9ConstFontD1Ev>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4618      	mov	r0, r3
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	0800fdcc 	.word	0x0800fdcc

0800d540 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f7ff ffe7 	bl	800d51c <_ZN8touchgfx13GeneratedFontD1Ev>
 800d54e:	212c      	movs	r1, #44	@ 0x2c
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f001 faa0 	bl	800ea96 <_ZdlPvj>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	4618      	mov	r0, r3
 800d55a:	3708      	adds	r7, #8
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800d560:	b480      	push	{r7}
 800d562:	b083      	sub	sp, #12
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800d56c:	4618      	mov	r0, r3
 800d56e:	370c      	adds	r7, #12
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr

0800d578 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800d584:	4618      	mov	r0, r3
 800d586:	370c      	adds	r7, #12
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <math.h>
#include <stddef.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800d590:	b580      	push	{r7, lr}
 800d592:	b08e      	sub	sp, #56	@ 0x38
 800d594:	af0a      	add	r7, sp, #40	@ 0x28
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	4611      	mov	r1, r2
 800d59c:	461a      	mov	r2, r3
 800d59e:	460b      	mov	r3, r1
 800d5a0:	80fb      	strh	r3, [r7, #6]
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	88b9      	ldrh	r1, [r7, #4]
 800d5aa:	88fa      	ldrh	r2, [r7, #6]
 800d5ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d5b0:	9308      	str	r3, [sp, #32]
 800d5b2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d5b4:	9307      	str	r3, [sp, #28]
 800d5b6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800d5ba:	9306      	str	r3, [sp, #24]
 800d5bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d5c0:	9305      	str	r3, [sp, #20]
 800d5c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d5c6:	9304      	str	r3, [sp, #16]
 800d5c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d5cc:	9303      	str	r3, [sp, #12]
 800d5ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d5d2:	9302      	str	r3, [sp, #8]
 800d5d4:	7f3b      	ldrb	r3, [r7, #28]
 800d5d6:	9301      	str	r3, [sp, #4]
 800d5d8:	8b3b      	ldrh	r3, [r7, #24]
 800d5da:	9300      	str	r3, [sp, #0]
 800d5dc:	460b      	mov	r3, r1
 800d5de:	68b9      	ldr	r1, [r7, #8]
 800d5e0:	f000 fcb4 	bl	800df4c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800d5e4:	4a09      	ldr	r2, [pc, #36]	@ (800d60c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5ee:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d5f4:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5fa:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d600:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	4618      	mov	r0, r3
 800d606:	3710      	adds	r7, #16
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	0800fdcc 	.word	0x0800fdcc

0800d610 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800d610:	b480      	push	{r7}
 800d612:	b087      	sub	sp, #28
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	617b      	str	r3, [r7, #20]
    uint32_t offset = dataOffset[0];
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	881b      	ldrh	r3, [r3, #0]
 800d622:	b29b      	uxth	r3, r3
 800d624:	613b      	str	r3, [r7, #16]
    offset |= dataOffset[1] << 16;
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	3302      	adds	r3, #2
 800d62a:	881b      	ldrh	r3, [r3, #0]
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	041b      	lsls	r3, r3, #16
 800d630:	461a      	mov	r2, r3
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	4313      	orrs	r3, r2
 800d636:	613b      	str	r3, [r7, #16]

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	69db      	ldr	r3, [r3, #28]
 800d63c:	60fb      	str	r3, [r7, #12]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	889b      	ldrh	r3, [r3, #4]
 800d642:	0adb      	lsrs	r3, r3, #11
 800d644:	b29b      	uxth	r3, r3
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	68fa      	ldr	r2, [r7, #12]
 800d64a:	4413      	add	r3, r2
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	60bb      	str	r3, [r7, #8]
    return pixels + offset;
 800d650:	68ba      	ldr	r2, [r7, #8]
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	4413      	add	r3, r2
}
 800d656:	4618      	mov	r0, r3
 800d658:	371c      	adds	r7, #28
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr

0800d662 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800d662:	b480      	push	{r7}
 800d664:	b089      	sub	sp, #36	@ 0x24
 800d666:	af00      	add	r7, sp, #0
 800d668:	60f8      	str	r0, [r7, #12]
 800d66a:	460b      	mov	r3, r1
 800d66c:	607a      	str	r2, [r7, #4]
 800d66e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d003      	beq.n	800d67e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	7b1b      	ldrb	r3, [r3, #12]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d101      	bne.n	800d682 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800d67e:	2300      	movs	r3, #0
 800d680:	e032      	b.n	800d6e8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	6a1a      	ldr	r2, [r3, #32]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	7b5b      	ldrb	r3, [r3, #13]
 800d68e:	b21b      	sxth	r3, r3
 800d690:	021b      	lsls	r3, r3, #8
 800d692:	b21b      	sxth	r3, r3
 800d694:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d698:	b219      	sxth	r1, r3
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	7adb      	ldrb	r3, [r3, #11]
 800d69e:	b21b      	sxth	r3, r3
 800d6a0:	430b      	orrs	r3, r1
 800d6a2:	b21b      	sxth	r3, r3
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	4413      	add	r3, r2
 800d6aa:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	7b1b      	ldrb	r3, [r3, #12]
 800d6b0:	837b      	strh	r3, [r7, #26]
 800d6b2:	e013      	b.n	800d6dc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7a>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	881b      	ldrh	r3, [r3, #0]
 800d6b8:	897a      	ldrh	r2, [r7, #10]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d103      	bne.n	800d6c6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x64>
        {
            return kerndata->distance;
 800d6be:	69fb      	ldr	r3, [r7, #28]
 800d6c0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d6c4:	e010      	b.n	800d6e8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x86>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	881b      	ldrh	r3, [r3, #0]
 800d6ca:	897a      	ldrh	r2, [r7, #10]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d309      	bcc.n	800d6e4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d6d0:	8b7b      	ldrh	r3, [r7, #26]
 800d6d2:	3b01      	subs	r3, #1
 800d6d4:	837b      	strh	r3, [r7, #26]
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	3304      	adds	r3, #4
 800d6da:	61fb      	str	r3, [r7, #28]
 800d6dc:	8b7b      	ldrh	r3, [r7, #26]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1e8      	bne.n	800d6b4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x52>
 800d6e2:	e000      	b.n	800d6e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        {
            break;
 800d6e4:	bf00      	nop
        }
    }
    return 0;
 800d6e6:	2300      	movs	r3, #0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3724      	adds	r7, #36	@ 0x24
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_consola_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_consola_20_4bpp();

touchgfx::GeneratedFont& getFont_consola_20_4bpp()
{
    static touchgfx::GeneratedFont consola_20_4bpp(glyphs_consola_20_4bpp, 12, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_consola_20_4bpp, kerning_consola_20_4bpp, 63, 0, 0, 0);
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	4801      	ldr	r0, [pc, #4]	@ (800d700 <__tcf_0+0xc>)
 800d6fa:	f7ff ff0f 	bl	800d51c <_ZN8touchgfx13GeneratedFontD1Ev>
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	24000644 	.word	0x24000644

0800d704 <_Z23getFont_consola_20_4bppv>:
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b08e      	sub	sp, #56	@ 0x38
 800d708:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont consola_20_4bpp(glyphs_consola_20_4bpp, 12, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_consola_20_4bpp, kerning_consola_20_4bpp, 63, 0, 0, 0);
 800d70a:	4b21      	ldr	r3, [pc, #132]	@ (800d790 <_Z23getFont_consola_20_4bppv+0x8c>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f3bf 8f5b 	dmb	ish
 800d712:	f003 0301 	and.w	r3, r3, #1
 800d716:	2b00      	cmp	r3, #0
 800d718:	bf0c      	ite	eq
 800d71a:	2301      	moveq	r3, #1
 800d71c:	2300      	movne	r3, #0
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	2b00      	cmp	r3, #0
 800d722:	d030      	beq.n	800d786 <_Z23getFont_consola_20_4bppv+0x82>
 800d724:	481a      	ldr	r0, [pc, #104]	@ (800d790 <_Z23getFont_consola_20_4bppv+0x8c>)
 800d726:	f001 f9b8 	bl	800ea9a <__cxa_guard_acquire>
 800d72a:	4603      	mov	r3, r0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	bf14      	ite	ne
 800d730:	2301      	movne	r3, #1
 800d732:	2300      	moveq	r3, #0
 800d734:	b2db      	uxtb	r3, r3
 800d736:	2b00      	cmp	r3, #0
 800d738:	d025      	beq.n	800d786 <_Z23getFont_consola_20_4bppv+0x82>
 800d73a:	2300      	movs	r3, #0
 800d73c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d73e:	2300      	movs	r3, #0
 800d740:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d742:	2300      	movs	r3, #0
 800d744:	930a      	str	r3, [sp, #40]	@ 0x28
 800d746:	233f      	movs	r3, #63	@ 0x3f
 800d748:	9309      	str	r3, [sp, #36]	@ 0x24
 800d74a:	4b12      	ldr	r3, [pc, #72]	@ (800d794 <_Z23getFont_consola_20_4bppv+0x90>)
 800d74c:	9308      	str	r3, [sp, #32]
 800d74e:	4b12      	ldr	r3, [pc, #72]	@ (800d798 <_Z23getFont_consola_20_4bppv+0x94>)
 800d750:	9307      	str	r3, [sp, #28]
 800d752:	2300      	movs	r3, #0
 800d754:	9306      	str	r3, [sp, #24]
 800d756:	2300      	movs	r3, #0
 800d758:	9305      	str	r3, [sp, #20]
 800d75a:	2301      	movs	r3, #1
 800d75c:	9304      	str	r3, [sp, #16]
 800d75e:	2304      	movs	r3, #4
 800d760:	9303      	str	r3, [sp, #12]
 800d762:	2300      	movs	r3, #0
 800d764:	9302      	str	r3, [sp, #8]
 800d766:	2300      	movs	r3, #0
 800d768:	9301      	str	r3, [sp, #4]
 800d76a:	2314      	movs	r3, #20
 800d76c:	9300      	str	r3, [sp, #0]
 800d76e:	2314      	movs	r3, #20
 800d770:	220c      	movs	r2, #12
 800d772:	490a      	ldr	r1, [pc, #40]	@ (800d79c <_Z23getFont_consola_20_4bppv+0x98>)
 800d774:	480a      	ldr	r0, [pc, #40]	@ (800d7a0 <_Z23getFont_consola_20_4bppv+0x9c>)
 800d776:	f7ff ff0b 	bl	800d590 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d77a:	480a      	ldr	r0, [pc, #40]	@ (800d7a4 <_Z23getFont_consola_20_4bppv+0xa0>)
 800d77c:	f001 f9d8 	bl	800eb30 <atexit>
 800d780:	4803      	ldr	r0, [pc, #12]	@ (800d790 <_Z23getFont_consola_20_4bppv+0x8c>)
 800d782:	f001 f996 	bl	800eab2 <__cxa_guard_release>
    return consola_20_4bpp;
 800d786:	4b06      	ldr	r3, [pc, #24]	@ (800d7a0 <_Z23getFont_consola_20_4bppv+0x9c>)
}
 800d788:	4618      	mov	r0, r3
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	24000670 	.word	0x24000670
 800d794:	08011230 	.word	0x08011230
 800d798:	08011244 	.word	0x08011244
 800d79c:	08010f6c 	.word	0x08010f6c
 800d7a0:	24000644 	.word	0x24000644
 800d7a4:	0800d6f5 	.word	0x0800d6f5

0800d7a8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_consolab_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_consolab_20_4bpp();

touchgfx::GeneratedFont& getFont_consolab_20_4bpp()
{
    static touchgfx::GeneratedFont consolab_20_4bpp(glyphs_consolab_20_4bpp, 25, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_consolab_20_4bpp, kerning_consolab_20_4bpp, 63, 0, 0, 0);
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	4801      	ldr	r0, [pc, #4]	@ (800d7b4 <__tcf_0+0xc>)
 800d7ae:	f7ff feb5 	bl	800d51c <_ZN8touchgfx13GeneratedFontD1Ev>
 800d7b2:	bd80      	pop	{r7, pc}
 800d7b4:	24000674 	.word	0x24000674

0800d7b8 <_Z24getFont_consolab_20_4bppv>:
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b08e      	sub	sp, #56	@ 0x38
 800d7bc:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont consolab_20_4bpp(glyphs_consolab_20_4bpp, 25, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_consolab_20_4bpp, kerning_consolab_20_4bpp, 63, 0, 0, 0);
 800d7be:	4b21      	ldr	r3, [pc, #132]	@ (800d844 <_Z24getFont_consolab_20_4bppv+0x8c>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f3bf 8f5b 	dmb	ish
 800d7c6:	f003 0301 	and.w	r3, r3, #1
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	bf0c      	ite	eq
 800d7ce:	2301      	moveq	r3, #1
 800d7d0:	2300      	movne	r3, #0
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d030      	beq.n	800d83a <_Z24getFont_consolab_20_4bppv+0x82>
 800d7d8:	481a      	ldr	r0, [pc, #104]	@ (800d844 <_Z24getFont_consolab_20_4bppv+0x8c>)
 800d7da:	f001 f95e 	bl	800ea9a <__cxa_guard_acquire>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	bf14      	ite	ne
 800d7e4:	2301      	movne	r3, #1
 800d7e6:	2300      	moveq	r3, #0
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d025      	beq.n	800d83a <_Z24getFont_consolab_20_4bppv+0x82>
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	930c      	str	r3, [sp, #48]	@ 0x30
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d7fa:	233f      	movs	r3, #63	@ 0x3f
 800d7fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7fe:	4b12      	ldr	r3, [pc, #72]	@ (800d848 <_Z24getFont_consolab_20_4bppv+0x90>)
 800d800:	9308      	str	r3, [sp, #32]
 800d802:	4b12      	ldr	r3, [pc, #72]	@ (800d84c <_Z24getFont_consolab_20_4bppv+0x94>)
 800d804:	9307      	str	r3, [sp, #28]
 800d806:	2300      	movs	r3, #0
 800d808:	9306      	str	r3, [sp, #24]
 800d80a:	2300      	movs	r3, #0
 800d80c:	9305      	str	r3, [sp, #20]
 800d80e:	2301      	movs	r3, #1
 800d810:	9304      	str	r3, [sp, #16]
 800d812:	2304      	movs	r3, #4
 800d814:	9303      	str	r3, [sp, #12]
 800d816:	2300      	movs	r3, #0
 800d818:	9302      	str	r3, [sp, #8]
 800d81a:	2300      	movs	r3, #0
 800d81c:	9301      	str	r3, [sp, #4]
 800d81e:	2314      	movs	r3, #20
 800d820:	9300      	str	r3, [sp, #0]
 800d822:	2314      	movs	r3, #20
 800d824:	2219      	movs	r2, #25
 800d826:	490a      	ldr	r1, [pc, #40]	@ (800d850 <_Z24getFont_consolab_20_4bppv+0x98>)
 800d828:	480a      	ldr	r0, [pc, #40]	@ (800d854 <_Z24getFont_consolab_20_4bppv+0x9c>)
 800d82a:	f7ff feb1 	bl	800d590 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d82e:	480a      	ldr	r0, [pc, #40]	@ (800d858 <_Z24getFont_consolab_20_4bppv+0xa0>)
 800d830:	f001 f97e 	bl	800eb30 <atexit>
 800d834:	4803      	ldr	r0, [pc, #12]	@ (800d844 <_Z24getFont_consolab_20_4bppv+0x8c>)
 800d836:	f001 f93c 	bl	800eab2 <__cxa_guard_release>
    return consolab_20_4bpp;
 800d83a:	4b06      	ldr	r3, [pc, #24]	@ (800d854 <_Z24getFont_consolab_20_4bppv+0x9c>)
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	240006a0 	.word	0x240006a0
 800d848:	08011234 	.word	0x08011234
 800d84c:	08011248 	.word	0x08011248
 800d850:	08011014 	.word	0x08011014
 800d854:	24000674 	.word	0x24000674
 800d858:	0800d7a9 	.word	0x0800d7a9

0800d85c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_consolab_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_consolab_30_4bpp();

touchgfx::GeneratedFont& getFont_consolab_30_4bpp()
{
    static touchgfx::GeneratedFont consolab_30_4bpp(glyphs_consolab_30_4bpp, 11, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_consolab_30_4bpp, kerning_consolab_30_4bpp, 63, 0, 0, 0);
 800d85c:	b580      	push	{r7, lr}
 800d85e:	af00      	add	r7, sp, #0
 800d860:	4801      	ldr	r0, [pc, #4]	@ (800d868 <__tcf_0+0xc>)
 800d862:	f7ff fe5b 	bl	800d51c <_ZN8touchgfx13GeneratedFontD1Ev>
 800d866:	bd80      	pop	{r7, pc}
 800d868:	240006a4 	.word	0x240006a4

0800d86c <_Z24getFont_consolab_30_4bppv>:
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b08e      	sub	sp, #56	@ 0x38
 800d870:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont consolab_30_4bpp(glyphs_consolab_30_4bpp, 11, 30, 30, 0, 0, 4, 1, 0, 0, unicodes_consolab_30_4bpp, kerning_consolab_30_4bpp, 63, 0, 0, 0);
 800d872:	4b21      	ldr	r3, [pc, #132]	@ (800d8f8 <_Z24getFont_consolab_30_4bppv+0x8c>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f3bf 8f5b 	dmb	ish
 800d87a:	f003 0301 	and.w	r3, r3, #1
 800d87e:	2b00      	cmp	r3, #0
 800d880:	bf0c      	ite	eq
 800d882:	2301      	moveq	r3, #1
 800d884:	2300      	movne	r3, #0
 800d886:	b2db      	uxtb	r3, r3
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d030      	beq.n	800d8ee <_Z24getFont_consolab_30_4bppv+0x82>
 800d88c:	481a      	ldr	r0, [pc, #104]	@ (800d8f8 <_Z24getFont_consolab_30_4bppv+0x8c>)
 800d88e:	f001 f904 	bl	800ea9a <__cxa_guard_acquire>
 800d892:	4603      	mov	r3, r0
 800d894:	2b00      	cmp	r3, #0
 800d896:	bf14      	ite	ne
 800d898:	2301      	movne	r3, #1
 800d89a:	2300      	moveq	r3, #0
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d025      	beq.n	800d8ee <_Z24getFont_consolab_30_4bppv+0x82>
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	930c      	str	r3, [sp, #48]	@ 0x30
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8ae:	233f      	movs	r3, #63	@ 0x3f
 800d8b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8b2:	4b12      	ldr	r3, [pc, #72]	@ (800d8fc <_Z24getFont_consolab_30_4bppv+0x90>)
 800d8b4:	9308      	str	r3, [sp, #32]
 800d8b6:	4b12      	ldr	r3, [pc, #72]	@ (800d900 <_Z24getFont_consolab_30_4bppv+0x94>)
 800d8b8:	9307      	str	r3, [sp, #28]
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	9306      	str	r3, [sp, #24]
 800d8be:	2300      	movs	r3, #0
 800d8c0:	9305      	str	r3, [sp, #20]
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	9304      	str	r3, [sp, #16]
 800d8c6:	2304      	movs	r3, #4
 800d8c8:	9303      	str	r3, [sp, #12]
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	9302      	str	r3, [sp, #8]
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	9301      	str	r3, [sp, #4]
 800d8d2:	231e      	movs	r3, #30
 800d8d4:	9300      	str	r3, [sp, #0]
 800d8d6:	231e      	movs	r3, #30
 800d8d8:	220b      	movs	r2, #11
 800d8da:	490a      	ldr	r1, [pc, #40]	@ (800d904 <_Z24getFont_consolab_30_4bppv+0x98>)
 800d8dc:	480a      	ldr	r0, [pc, #40]	@ (800d908 <_Z24getFont_consolab_30_4bppv+0x9c>)
 800d8de:	f7ff fe57 	bl	800d590 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d8e2:	480a      	ldr	r0, [pc, #40]	@ (800d90c <_Z24getFont_consolab_30_4bppv+0xa0>)
 800d8e4:	f001 f924 	bl	800eb30 <atexit>
 800d8e8:	4803      	ldr	r0, [pc, #12]	@ (800d8f8 <_Z24getFont_consolab_30_4bppv+0x8c>)
 800d8ea:	f001 f8e2 	bl	800eab2 <__cxa_guard_release>
    return consolab_30_4bpp;
 800d8ee:	4b06      	ldr	r3, [pc, #24]	@ (800d908 <_Z24getFont_consolab_30_4bppv+0x9c>)
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	240006d0 	.word	0x240006d0
 800d8fc:	08011238 	.word	0x08011238
 800d900:	0801124c 	.word	0x0801124c
 800d904:	08011174 	.word	0x08011174
 800d908:	240006a4 	.word	0x240006a4
 800d90c:	0800d85d 	.word	0x0800d85d

0800d910 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800d910:	b580      	push	{r7, lr}
 800d912:	af00      	add	r7, sp, #0
 800d914:	4801      	ldr	r0, [pc, #4]	@ (800d91c <__tcf_0+0xc>)
 800d916:	f7ff fe01 	bl	800d51c <_ZN8touchgfx13GeneratedFontD1Ev>
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	240006d4 	.word	0x240006d4

0800d920 <_Z23getFont_verdana_10_4bppv>:
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b08e      	sub	sp, #56	@ 0x38
 800d924:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800d926:	4b21      	ldr	r3, [pc, #132]	@ (800d9ac <_Z23getFont_verdana_10_4bppv+0x8c>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	f3bf 8f5b 	dmb	ish
 800d92e:	f003 0301 	and.w	r3, r3, #1
 800d932:	2b00      	cmp	r3, #0
 800d934:	bf0c      	ite	eq
 800d936:	2301      	moveq	r3, #1
 800d938:	2300      	movne	r3, #0
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d030      	beq.n	800d9a2 <_Z23getFont_verdana_10_4bppv+0x82>
 800d940:	481a      	ldr	r0, [pc, #104]	@ (800d9ac <_Z23getFont_verdana_10_4bppv+0x8c>)
 800d942:	f001 f8aa 	bl	800ea9a <__cxa_guard_acquire>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	bf14      	ite	ne
 800d94c:	2301      	movne	r3, #1
 800d94e:	2300      	moveq	r3, #0
 800d950:	b2db      	uxtb	r3, r3
 800d952:	2b00      	cmp	r3, #0
 800d954:	d025      	beq.n	800d9a2 <_Z23getFont_verdana_10_4bppv+0x82>
 800d956:	2300      	movs	r3, #0
 800d958:	930c      	str	r3, [sp, #48]	@ 0x30
 800d95a:	2300      	movs	r3, #0
 800d95c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d95e:	2300      	movs	r3, #0
 800d960:	930a      	str	r3, [sp, #40]	@ 0x28
 800d962:	233f      	movs	r3, #63	@ 0x3f
 800d964:	9309      	str	r3, [sp, #36]	@ 0x24
 800d966:	4b12      	ldr	r3, [pc, #72]	@ (800d9b0 <_Z23getFont_verdana_10_4bppv+0x90>)
 800d968:	9308      	str	r3, [sp, #32]
 800d96a:	4b12      	ldr	r3, [pc, #72]	@ (800d9b4 <_Z23getFont_verdana_10_4bppv+0x94>)
 800d96c:	9307      	str	r3, [sp, #28]
 800d96e:	2300      	movs	r3, #0
 800d970:	9306      	str	r3, [sp, #24]
 800d972:	2300      	movs	r3, #0
 800d974:	9305      	str	r3, [sp, #20]
 800d976:	2301      	movs	r3, #1
 800d978:	9304      	str	r3, [sp, #16]
 800d97a:	2304      	movs	r3, #4
 800d97c:	9303      	str	r3, [sp, #12]
 800d97e:	2300      	movs	r3, #0
 800d980:	9302      	str	r3, [sp, #8]
 800d982:	2300      	movs	r3, #0
 800d984:	9301      	str	r3, [sp, #4]
 800d986:	230a      	movs	r3, #10
 800d988:	9300      	str	r3, [sp, #0]
 800d98a:	230a      	movs	r3, #10
 800d98c:	2201      	movs	r2, #1
 800d98e:	490a      	ldr	r1, [pc, #40]	@ (800d9b8 <_Z23getFont_verdana_10_4bppv+0x98>)
 800d990:	480a      	ldr	r0, [pc, #40]	@ (800d9bc <_Z23getFont_verdana_10_4bppv+0x9c>)
 800d992:	f7ff fdfd 	bl	800d590 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d996:	480a      	ldr	r0, [pc, #40]	@ (800d9c0 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800d998:	f001 f8ca 	bl	800eb30 <atexit>
 800d99c:	4803      	ldr	r0, [pc, #12]	@ (800d9ac <_Z23getFont_verdana_10_4bppv+0x8c>)
 800d99e:	f001 f888 	bl	800eab2 <__cxa_guard_release>
    return verdana_10_4bpp;
 800d9a2:	4b06      	ldr	r3, [pc, #24]	@ (800d9bc <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	bf00      	nop
 800d9ac:	24000700 	.word	0x24000700
 800d9b0:	0801123c 	.word	0x0801123c
 800d9b4:	08011250 	.word	0x08011250
 800d9b8:	08011210 	.word	0x08011210
 800d9bc:	240006d4 	.word	0x240006d4
 800d9c0:	0800d911 	.word	0x0800d911

0800d9c4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	4801      	ldr	r0, [pc, #4]	@ (800d9d0 <__tcf_0+0xc>)
 800d9ca:	f7ff fda7 	bl	800d51c <_ZN8touchgfx13GeneratedFontD1Ev>
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	24000704 	.word	0x24000704

0800d9d4 <_Z23getFont_verdana_40_4bppv>:
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b08e      	sub	sp, #56	@ 0x38
 800d9d8:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800d9da:	4b21      	ldr	r3, [pc, #132]	@ (800da60 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f3bf 8f5b 	dmb	ish
 800d9e2:	f003 0301 	and.w	r3, r3, #1
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	bf0c      	ite	eq
 800d9ea:	2301      	moveq	r3, #1
 800d9ec:	2300      	movne	r3, #0
 800d9ee:	b2db      	uxtb	r3, r3
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d030      	beq.n	800da56 <_Z23getFont_verdana_40_4bppv+0x82>
 800d9f4:	481a      	ldr	r0, [pc, #104]	@ (800da60 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800d9f6:	f001 f850 	bl	800ea9a <__cxa_guard_acquire>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	bf14      	ite	ne
 800da00:	2301      	movne	r3, #1
 800da02:	2300      	moveq	r3, #0
 800da04:	b2db      	uxtb	r3, r3
 800da06:	2b00      	cmp	r3, #0
 800da08:	d025      	beq.n	800da56 <_Z23getFont_verdana_40_4bppv+0x82>
 800da0a:	2300      	movs	r3, #0
 800da0c:	930c      	str	r3, [sp, #48]	@ 0x30
 800da0e:	2300      	movs	r3, #0
 800da10:	930b      	str	r3, [sp, #44]	@ 0x2c
 800da12:	2300      	movs	r3, #0
 800da14:	930a      	str	r3, [sp, #40]	@ 0x28
 800da16:	233f      	movs	r3, #63	@ 0x3f
 800da18:	9309      	str	r3, [sp, #36]	@ 0x24
 800da1a:	4b12      	ldr	r3, [pc, #72]	@ (800da64 <_Z23getFont_verdana_40_4bppv+0x90>)
 800da1c:	9308      	str	r3, [sp, #32]
 800da1e:	4b12      	ldr	r3, [pc, #72]	@ (800da68 <_Z23getFont_verdana_40_4bppv+0x94>)
 800da20:	9307      	str	r3, [sp, #28]
 800da22:	2300      	movs	r3, #0
 800da24:	9306      	str	r3, [sp, #24]
 800da26:	2300      	movs	r3, #0
 800da28:	9305      	str	r3, [sp, #20]
 800da2a:	2301      	movs	r3, #1
 800da2c:	9304      	str	r3, [sp, #16]
 800da2e:	2304      	movs	r3, #4
 800da30:	9303      	str	r3, [sp, #12]
 800da32:	2300      	movs	r3, #0
 800da34:	9302      	str	r3, [sp, #8]
 800da36:	2300      	movs	r3, #0
 800da38:	9301      	str	r3, [sp, #4]
 800da3a:	2328      	movs	r3, #40	@ 0x28
 800da3c:	9300      	str	r3, [sp, #0]
 800da3e:	2328      	movs	r3, #40	@ 0x28
 800da40:	2201      	movs	r2, #1
 800da42:	490a      	ldr	r1, [pc, #40]	@ (800da6c <_Z23getFont_verdana_40_4bppv+0x98>)
 800da44:	480a      	ldr	r0, [pc, #40]	@ (800da70 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800da46:	f7ff fda3 	bl	800d590 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800da4a:	480a      	ldr	r0, [pc, #40]	@ (800da74 <_Z23getFont_verdana_40_4bppv+0xa0>)
 800da4c:	f001 f870 	bl	800eb30 <atexit>
 800da50:	4803      	ldr	r0, [pc, #12]	@ (800da60 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800da52:	f001 f82e 	bl	800eab2 <__cxa_guard_release>
    return verdana_40_4bpp;
 800da56:	4b06      	ldr	r3, [pc, #24]	@ (800da70 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800da58:	4618      	mov	r0, r3
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	24000730 	.word	0x24000730
 800da64:	08011240 	.word	0x08011240
 800da68:	08011254 	.word	0x08011254
 800da6c:	08011220 	.word	0x08011220
 800da70:	24000704 	.word	0x24000704
 800da74:	0800d9c5 	.word	0x0800d9c5

0800da78 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800da78:	b480      	push	{r7}
 800da7a:	b085      	sub	sp, #20
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	460b      	mov	r3, r1
 800da82:	607a      	str	r2, [r7, #4]
 800da84:	817b      	strh	r3, [r7, #10]
        return 0;
 800da86:	2300      	movs	r3, #0
    }
 800da88:	4618      	mov	r0, r3
 800da8a:	3714      	adds	r7, #20
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr

0800da94 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 800da94:	b480      	push	{r7}
 800da96:	b083      	sub	sp, #12
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
        return 0;
 800da9c:	2300      	movs	r3, #0
    }
 800da9e:	4618      	mov	r0, r3
 800daa0:	370c      	adds	r7, #12
 800daa2:	46bd      	mov	sp, r7
 800daa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa8:	4770      	bx	lr

0800daaa <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800daaa:	b480      	push	{r7}
 800daac:	b083      	sub	sp, #12
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
        return 0;
 800dab2:	2300      	movs	r3, #0
    }
 800dab4:	4618      	mov	r0, r3
 800dab6:	370c      	adds	r7, #12
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr

0800dac0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800dac0:	b40e      	push	{r1, r2, r3}
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b085      	sub	sp, #20
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800daca:	f107 0320 	add.w	r3, r7, #32
 800dace:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	69fa      	ldr	r2, [r7, #28]
 800dad4:	2100      	movs	r1, #0
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f000 f90c 	bl	800dcf4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800dadc:	4603      	mov	r3, r0
 800dade:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800dae0:	89fb      	ldrh	r3, [r7, #14]
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3714      	adds	r7, #20
 800dae6:	46bd      	mov	sp, r7
 800dae8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800daec:	b003      	add	sp, #12
 800daee:	4770      	bx	lr

0800daf0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800daf0:	b40c      	push	{r2, r3}
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b084      	sub	sp, #16
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
 800dafa:	460b      	mov	r3, r1
 800dafc:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800dafe:	f107 031c 	add.w	r3, r7, #28
 800db02:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800db04:	78f9      	ldrb	r1, [r7, #3]
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	69ba      	ldr	r2, [r7, #24]
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f000 f8f2 	bl	800dcf4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800db10:	4603      	mov	r3, r0
 800db12:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800db14:	89fb      	ldrh	r3, [r7, #14]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3710      	adds	r7, #16
 800db1a:	46bd      	mov	sp, r7
 800db1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800db20:	b002      	add	sp, #8
 800db22:	4770      	bx	lr

0800db24 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b08a      	sub	sp, #40	@ 0x28
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	460b      	mov	r3, r1
 800db2e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db34:	2b00      	cmp	r3, #0
 800db36:	d016      	beq.n	800db66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	3322      	adds	r3, #34	@ 0x22
 800db3c:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800db3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db40:	8adb      	ldrh	r3, [r3, #22]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d105      	bne.n	800db52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800db46:	4b43      	ldr	r3, [pc, #268]	@ (800dc54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800db48:	4a43      	ldr	r2, [pc, #268]	@ (800dc58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800db4a:	21c5      	movs	r1, #197	@ 0xc5
 800db4c:	4843      	ldr	r0, [pc, #268]	@ (800dc5c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800db4e:	f000 ffd1 	bl	800eaf4 <__assert_func>
            return buffer[pos];
 800db52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db54:	8a9b      	ldrh	r3, [r3, #20]
 800db56:	461a      	mov	r2, r3
 800db58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db5a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d001      	beq.n	800db66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800db62:	2301      	movs	r3, #1
 800db64:	e000      	b.n	800db68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800db66:	2300      	movs	r3, #0
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d06a      	beq.n	800dc42 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f000 ff73 	bl	800ea58 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	3322      	adds	r3, #34	@ 0x22
 800db76:	623b      	str	r3, [r7, #32]
 800db78:	2301      	movs	r3, #1
 800db7a:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800db7c:	6a3b      	ldr	r3, [r7, #32]
 800db7e:	8adb      	ldrh	r3, [r3, #22]
 800db80:	8bfa      	ldrh	r2, [r7, #30]
 800db82:	429a      	cmp	r2, r3
 800db84:	d305      	bcc.n	800db92 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800db86:	4b36      	ldr	r3, [pc, #216]	@ (800dc60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800db88:	4a36      	ldr	r2, [pc, #216]	@ (800dc64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800db8a:	21cb      	movs	r1, #203	@ 0xcb
 800db8c:	4833      	ldr	r0, [pc, #204]	@ (800dc5c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800db8e:	f000 ffb1 	bl	800eaf4 <__assert_func>
            const uint16_t index = pos + offset;
 800db92:	6a3b      	ldr	r3, [r7, #32]
 800db94:	8a9a      	ldrh	r2, [r3, #20]
 800db96:	8bfb      	ldrh	r3, [r7, #30]
 800db98:	4413      	add	r3, r2
 800db9a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800db9c:	8bbb      	ldrh	r3, [r7, #28]
 800db9e:	2b09      	cmp	r3, #9
 800dba0:	d801      	bhi.n	800dba6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800dba2:	8bbb      	ldrh	r3, [r7, #28]
 800dba4:	e001      	b.n	800dbaa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800dba6:	8bbb      	ldrh	r3, [r7, #28]
 800dba8:	3b0a      	subs	r3, #10
 800dbaa:	6a3a      	ldr	r2, [r7, #32]
 800dbac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbb0:	f640 123f 	movw	r2, #2367	@ 0x93f
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	bf0c      	ite	eq
 800dbb8:	2301      	moveq	r3, #1
 800dbba:	2300      	movne	r3, #0
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d03f      	beq.n	800dc42 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	3322      	adds	r3, #34	@ 0x22
 800dbc6:	687a      	ldr	r2, [r7, #4]
 800dbc8:	3222      	adds	r2, #34	@ 0x22
 800dbca:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800dbcc:	68ba      	ldr	r2, [r7, #8]
 800dbce:	8ad2      	ldrh	r2, [r2, #22]
 800dbd0:	2a00      	cmp	r2, #0
 800dbd2:	d105      	bne.n	800dbe0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800dbd4:	4b1f      	ldr	r3, [pc, #124]	@ (800dc54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800dbd6:	4a20      	ldr	r2, [pc, #128]	@ (800dc58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800dbd8:	21c5      	movs	r1, #197	@ 0xc5
 800dbda:	4820      	ldr	r0, [pc, #128]	@ (800dc5c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800dbdc:	f000 ff8a 	bl	800eaf4 <__assert_func>
            return buffer[pos];
 800dbe0:	68ba      	ldr	r2, [r7, #8]
 800dbe2:	8a92      	ldrh	r2, [r2, #20]
 800dbe4:	4611      	mov	r1, r2
 800dbe6:	68ba      	ldr	r2, [r7, #8]
 800dbe8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800dbec:	613b      	str	r3, [r7, #16]
 800dbee:	4613      	mov	r3, r2
 800dbf0:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	8adb      	ldrh	r3, [r3, #22]
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d806      	bhi.n	800dc08 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800dbfa:	4b1b      	ldr	r3, [pc, #108]	@ (800dc68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800dbfc:	4a1b      	ldr	r2, [pc, #108]	@ (800dc6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800dbfe:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800dc02:	4816      	ldr	r0, [pc, #88]	@ (800dc5c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800dc04:	f000 ff76 	bl	800eaf4 <__assert_func>
            const uint16_t index = pos + 1;
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	8a9b      	ldrh	r3, [r3, #20]
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800dc10:	89bb      	ldrh	r3, [r7, #12]
 800dc12:	2b09      	cmp	r3, #9
 800dc14:	d801      	bhi.n	800dc1a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800dc16:	89bb      	ldrh	r3, [r7, #12]
 800dc18:	e000      	b.n	800dc1c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	693a      	ldr	r2, [r7, #16]
 800dc1e:	89f9      	ldrh	r1, [r7, #14]
 800dc20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800dc24:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	3322      	adds	r3, #34	@ 0x22
 800dc2a:	61bb      	str	r3, [r7, #24]
 800dc2c:	f640 133f 	movw	r3, #2367	@ 0x93f
 800dc30:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800dc32:	69bb      	ldr	r3, [r7, #24]
 800dc34:	8a9b      	ldrh	r3, [r3, #20]
 800dc36:	4619      	mov	r1, r3
 800dc38:	69bb      	ldr	r3, [r7, #24]
 800dc3a:	8afa      	ldrh	r2, [r7, #22]
 800dc3c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800dc40:	bf00      	nop
        }
    }
    return getNextChar();
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 fe0a 	bl	800e85c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dc48:	4603      	mov	r3, r0
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3728      	adds	r7, #40	@ 0x28
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	bf00      	nop
 800dc54:	0800fb10 	.word	0x0800fb10
 800dc58:	0800fb1c 	.word	0x0800fb1c
 800dc5c:	0800fbc8 	.word	0x0800fbc8
 800dc60:	0800fc10 	.word	0x0800fc10
 800dc64:	0800fc20 	.word	0x0800fc20
 800dc68:	0800fcf4 	.word	0x0800fcf4
 800dc6c:	0800fd00 	.word	0x0800fd00

0800dc70 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f000 fdb8 	bl	800e7ee <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800dc7e:	bf00      	nop
 800dc80:	3708      	adds	r7, #8
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
	...

0800dc88 <_Z41__static_initialization_and_destruction_0v>:
    case 4:
        touchgfx_fonts[4] = &(getFont_consolab_30_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	af00      	add	r7, sp, #0
    &(getFont_consolab_20_4bpp()),
 800dc8c:	f7ff fd94 	bl	800d7b8 <_Z24getFont_consolab_20_4bppv>
 800dc90:	4603      	mov	r3, r0
};
 800dc92:	4a0c      	ldr	r2, [pc, #48]	@ (800dcc4 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800dc94:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800dc96:	f7ff fe9d 	bl	800d9d4 <_Z23getFont_verdana_40_4bppv>
 800dc9a:	4603      	mov	r3, r0
};
 800dc9c:	4a09      	ldr	r2, [pc, #36]	@ (800dcc4 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800dc9e:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 800dca0:	f7ff fe3e 	bl	800d920 <_Z23getFont_verdana_10_4bppv>
 800dca4:	4603      	mov	r3, r0
};
 800dca6:	4a07      	ldr	r2, [pc, #28]	@ (800dcc4 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800dca8:	6093      	str	r3, [r2, #8]
    &(getFont_consola_20_4bpp()),
 800dcaa:	f7ff fd2b 	bl	800d704 <_Z23getFont_consola_20_4bppv>
 800dcae:	4603      	mov	r3, r0
};
 800dcb0:	4a04      	ldr	r2, [pc, #16]	@ (800dcc4 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800dcb2:	60d3      	str	r3, [r2, #12]
    &(getFont_consolab_30_4bpp())
 800dcb4:	f7ff fdda 	bl	800d86c <_Z24getFont_consolab_30_4bppv>
 800dcb8:	4603      	mov	r3, r0
};
 800dcba:	4a02      	ldr	r2, [pc, #8]	@ (800dcc4 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800dcbc:	6113      	str	r3, [r2, #16]
} // namespace TypedTextDatabase
 800dcbe:	bf00      	nop
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	24000734 	.word	0x24000734

0800dcc8 <_GLOBAL__sub_I_touchgfx_fonts>:
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	f7ff ffdc 	bl	800dc88 <_Z41__static_initialization_and_destruction_0v>
 800dcd0:	bd80      	pop	{r7, pc}
	...

0800dcd4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800dcd4:	4b01      	ldr	r3, [pc, #4]	@ (800dcdc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	601a      	str	r2, [r3, #0]
 800dcda:	4770      	bx	lr
 800dcdc:	24000748 	.word	0x24000748

0800dce0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800dce0:	4b03      	ldr	r3, [pc, #12]	@ (800dcf0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800dce2:	2200      	movs	r2, #0
 800dce4:	801a      	strh	r2, [r3, #0]
 800dce6:	805a      	strh	r2, [r3, #2]
 800dce8:	809a      	strh	r2, [r3, #4]
 800dcea:	80da      	strh	r2, [r3, #6]
 800dcec:	4770      	bx	lr
 800dcee:	bf00      	nop
 800dcf0:	2400074c 	.word	0x2400074c

0800dcf4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800dcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf8:	b09d      	sub	sp, #116	@ 0x74
 800dcfa:	4606      	mov	r6, r0
 800dcfc:	4614      	mov	r4, r2
 800dcfe:	468a      	mov	sl, r1
 800dd00:	a803      	add	r0, sp, #12
 800dd02:	461d      	mov	r5, r3
 800dd04:	f000 f9b4 	bl	800e070 <_ZN8touchgfx12TextProviderC1Ev>
 800dd08:	6833      	ldr	r3, [r6, #0]
 800dd0a:	4630      	mov	r0, r6
 800dd0c:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 800dd10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd12:	4798      	blx	r3
 800dd14:	6833      	ldr	r3, [r6, #0]
 800dd16:	4607      	mov	r7, r0
 800dd18:	4630      	mov	r0, r6
 800dd1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd1c:	4798      	blx	r3
 800dd1e:	462a      	mov	r2, r5
 800dd20:	2500      	movs	r5, #0
 800dd22:	4621      	mov	r1, r4
 800dd24:	9000      	str	r0, [sp, #0]
 800dd26:	463b      	mov	r3, r7
 800dd28:	462c      	mov	r4, r5
 800dd2a:	46a9      	mov	r9, r5
 800dd2c:	46a8      	mov	r8, r5
 800dd2e:	a803      	add	r0, sp, #12
 800dd30:	f000 f9f1 	bl	800e116 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800dd34:	2300      	movs	r3, #0
 800dd36:	9302      	str	r3, [sp, #8]
 800dd38:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800dd3c:	429c      	cmp	r4, r3
 800dd3e:	d002      	beq.n	800dd46 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800dd40:	455c      	cmp	r4, fp
 800dd42:	bf18      	it	ne
 800dd44:	4625      	movne	r5, r4
 800dd46:	ab02      	add	r3, sp, #8
 800dd48:	4632      	mov	r2, r6
 800dd4a:	4651      	mov	r1, sl
 800dd4c:	a803      	add	r0, sp, #12
 800dd4e:	f000 fd05 	bl	800e75c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800dd52:	4604      	mov	r4, r0
 800dd54:	b108      	cbz	r0, 800dd5a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800dd56:	280a      	cmp	r0, #10
 800dd58:	d10a      	bne.n	800dd70 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800dd5a:	45c1      	cmp	r9, r8
 800dd5c:	bf38      	it	cc
 800dd5e:	46c1      	movcc	r9, r8
 800dd60:	f04f 0800 	mov.w	r8, #0
 800dd64:	2c00      	cmp	r4, #0
 800dd66:	d1e5      	bne.n	800dd34 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800dd68:	4648      	mov	r0, r9
 800dd6a:	b01d      	add	sp, #116	@ 0x74
 800dd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd70:	9a02      	ldr	r2, [sp, #8]
 800dd72:	2a00      	cmp	r2, #0
 800dd74:	d0de      	beq.n	800dd34 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800dd76:	7b57      	ldrb	r7, [r2, #13]
 800dd78:	4629      	mov	r1, r5
 800dd7a:	6833      	ldr	r3, [r6, #0]
 800dd7c:	007f      	lsls	r7, r7, #1
 800dd7e:	8894      	ldrh	r4, [r2, #4]
 800dd80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd82:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 800dd86:	7a97      	ldrb	r7, [r2, #10]
 800dd88:	4307      	orrs	r7, r0
 800dd8a:	4630      	mov	r0, r6
 800dd8c:	4798      	blx	r3
 800dd8e:	4438      	add	r0, r7
 800dd90:	4480      	add	r8, r0
 800dd92:	fa1f f888 	uxth.w	r8, r8
 800dd96:	e7e5      	b.n	800dd64 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800dd98 <_ZNK8touchgfx4Font12getCharWidthEt>:
 800dd98:	b508      	push	{r3, lr}
 800dd9a:	6803      	ldr	r3, [r0, #0]
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	4798      	blx	r3
 800dda0:	b128      	cbz	r0, 800ddae <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800dda2:	7b43      	ldrb	r3, [r0, #13]
 800dda4:	7a80      	ldrb	r0, [r0, #10]
 800dda6:	005b      	lsls	r3, r3, #1
 800dda8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ddac:	4318      	orrs	r0, r3
 800ddae:	bd08      	pop	{r3, pc}

0800ddb0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800ddb0:	b40e      	push	{r1, r2, r3}
 800ddb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddb4:	b09e      	sub	sp, #120	@ 0x78
 800ddb6:	4605      	mov	r5, r0
 800ddb8:	ab23      	add	r3, sp, #140	@ 0x8c
 800ddba:	a805      	add	r0, sp, #20
 800ddbc:	f853 4b04 	ldr.w	r4, [r3], #4
 800ddc0:	9303      	str	r3, [sp, #12]
 800ddc2:	f000 f955 	bl	800e070 <_ZN8touchgfx12TextProviderC1Ev>
 800ddc6:	682b      	ldr	r3, [r5, #0]
 800ddc8:	4628      	mov	r0, r5
 800ddca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ddcc:	4798      	blx	r3
 800ddce:	682b      	ldr	r3, [r5, #0]
 800ddd0:	4606      	mov	r6, r0
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddd6:	4798      	blx	r3
 800ddd8:	4633      	mov	r3, r6
 800ddda:	4621      	mov	r1, r4
 800dddc:	ae1e      	add	r6, sp, #120	@ 0x78
 800ddde:	2400      	movs	r4, #0
 800dde0:	9000      	str	r0, [sp, #0]
 800dde2:	9a03      	ldr	r2, [sp, #12]
 800dde4:	a805      	add	r0, sp, #20
 800dde6:	f000 f996 	bl	800e116 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800ddea:	f846 4d68 	str.w	r4, [r6, #-104]!
 800ddee:	462a      	mov	r2, r5
 800ddf0:	4633      	mov	r3, r6
 800ddf2:	4621      	mov	r1, r4
 800ddf4:	a805      	add	r0, sp, #20
 800ddf6:	f000 fcb1 	bl	800e75c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ddfa:	b300      	cbz	r0, 800de3e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 800ddfc:	280a      	cmp	r0, #10
 800ddfe:	d01a      	beq.n	800de36 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800de00:	9f04      	ldr	r7, [sp, #16]
 800de02:	b1c7      	cbz	r7, 800de36 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 800de04:	7b78      	ldrb	r0, [r7, #13]
 800de06:	7a3b      	ldrb	r3, [r7, #8]
 800de08:	00c1      	lsls	r1, r0, #3
 800de0a:	88ea      	ldrh	r2, [r5, #6]
 800de0c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800de10:	4319      	orrs	r1, r3
 800de12:	0643      	lsls	r3, r0, #25
 800de14:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800de18:	bf48      	it	mi
 800de1a:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 800de1e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800de22:	bf48      	it	mi
 800de24:	b219      	sxthmi	r1, r3
 800de26:	79fb      	ldrb	r3, [r7, #7]
 800de28:	4303      	orrs	r3, r0
 800de2a:	4413      	add	r3, r2
 800de2c:	1a5b      	subs	r3, r3, r1
 800de2e:	b21b      	sxth	r3, r3
 800de30:	429c      	cmp	r4, r3
 800de32:	bfb8      	it	lt
 800de34:	461c      	movlt	r4, r3
 800de36:	4633      	mov	r3, r6
 800de38:	462a      	mov	r2, r5
 800de3a:	2100      	movs	r1, #0
 800de3c:	e7da      	b.n	800ddf4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800de3e:	b2a0      	uxth	r0, r4
 800de40:	b01e      	add	sp, #120	@ 0x78
 800de42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800de46:	b003      	add	sp, #12
 800de48:	4770      	bx	lr

0800de4a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800de4a:	7a43      	ldrb	r3, [r0, #9]
 800de4c:	8880      	ldrh	r0, [r0, #4]
 800de4e:	4418      	add	r0, r3
 800de50:	b280      	uxth	r0, r0
 800de52:	4770      	bx	lr

0800de54 <_ZNK8touchgfx4Font13getFontHeightEv>:
 800de54:	6803      	ldr	r3, [r0, #0]
 800de56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de58:	4718      	bx	r3

0800de5a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800de5a:	b40e      	push	{r1, r2, r3}
 800de5c:	b570      	push	{r4, r5, r6, lr}
 800de5e:	b09d      	sub	sp, #116	@ 0x74
 800de60:	4604      	mov	r4, r0
 800de62:	ab21      	add	r3, sp, #132	@ 0x84
 800de64:	a803      	add	r0, sp, #12
 800de66:	f853 5b04 	ldr.w	r5, [r3], #4
 800de6a:	9302      	str	r3, [sp, #8]
 800de6c:	f000 f900 	bl	800e070 <_ZN8touchgfx12TextProviderC1Ev>
 800de70:	6823      	ldr	r3, [r4, #0]
 800de72:	4620      	mov	r0, r4
 800de74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de76:	4798      	blx	r3
 800de78:	6823      	ldr	r3, [r4, #0]
 800de7a:	4606      	mov	r6, r0
 800de7c:	4620      	mov	r0, r4
 800de7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de80:	2401      	movs	r4, #1
 800de82:	4798      	blx	r3
 800de84:	4633      	mov	r3, r6
 800de86:	9000      	str	r0, [sp, #0]
 800de88:	4629      	mov	r1, r5
 800de8a:	9a02      	ldr	r2, [sp, #8]
 800de8c:	a803      	add	r0, sp, #12
 800de8e:	f000 f942 	bl	800e116 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800de92:	a803      	add	r0, sp, #12
 800de94:	f000 fce2 	bl	800e85c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800de98:	b2a3      	uxth	r3, r4
 800de9a:	b138      	cbz	r0, 800deac <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 800de9c:	280a      	cmp	r0, #10
 800de9e:	a803      	add	r0, sp, #12
 800dea0:	bf04      	itt	eq
 800dea2:	3301      	addeq	r3, #1
 800dea4:	b21c      	sxtheq	r4, r3
 800dea6:	f000 fcd9 	bl	800e85c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800deaa:	e7f5      	b.n	800de98 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800deac:	4618      	mov	r0, r3
 800deae:	b01d      	add	sp, #116	@ 0x74
 800deb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800deb4:	b003      	add	sp, #12
 800deb6:	4770      	bx	lr

0800deb8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800deb8:	b40e      	push	{r1, r2, r3}
 800deba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800debc:	b09e      	sub	sp, #120	@ 0x78
 800debe:	4604      	mov	r4, r0
 800dec0:	ab23      	add	r3, sp, #140	@ 0x8c
 800dec2:	a805      	add	r0, sp, #20
 800dec4:	f853 5b04 	ldr.w	r5, [r3], #4
 800dec8:	9303      	str	r3, [sp, #12]
 800deca:	f000 f8d1 	bl	800e070 <_ZN8touchgfx12TextProviderC1Ev>
 800dece:	6823      	ldr	r3, [r4, #0]
 800ded0:	4620      	mov	r0, r4
 800ded2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ded4:	4798      	blx	r3
 800ded6:	6823      	ldr	r3, [r4, #0]
 800ded8:	4606      	mov	r6, r0
 800deda:	4620      	mov	r0, r4
 800dedc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dede:	4798      	blx	r3
 800dee0:	4633      	mov	r3, r6
 800dee2:	4629      	mov	r1, r5
 800dee4:	9000      	str	r0, [sp, #0]
 800dee6:	9a03      	ldr	r2, [sp, #12]
 800dee8:	a805      	add	r0, sp, #20
 800deea:	f000 f914 	bl	800e116 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800deee:	ad1e      	add	r5, sp, #120	@ 0x78
 800def0:	2100      	movs	r1, #0
 800def2:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 800def6:	4622      	mov	r2, r4
 800def8:	a805      	add	r0, sp, #20
 800defa:	f845 1d68 	str.w	r1, [r5, #-104]!
 800defe:	462b      	mov	r3, r5
 800df00:	f000 fc2c 	bl	800e75c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800df04:	b1d8      	cbz	r0, 800df3e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800df06:	280a      	cmp	r0, #10
 800df08:	d012      	beq.n	800df30 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800df0a:	9804      	ldr	r0, [sp, #16]
 800df0c:	b180      	cbz	r0, 800df30 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800df0e:	7b47      	ldrb	r7, [r0, #13]
 800df10:	88e2      	ldrh	r2, [r4, #6]
 800df12:	00fb      	lsls	r3, r7, #3
 800df14:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800df18:	7a03      	ldrb	r3, [r0, #8]
 800df1a:	430b      	orrs	r3, r1
 800df1c:	0679      	lsls	r1, r7, #25
 800df1e:	bf44      	itt	mi
 800df20:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800df24:	b21b      	sxthmi	r3, r3
 800df26:	1ad3      	subs	r3, r2, r3
 800df28:	b21b      	sxth	r3, r3
 800df2a:	429e      	cmp	r6, r3
 800df2c:	bfa8      	it	ge
 800df2e:	461e      	movge	r6, r3
 800df30:	462b      	mov	r3, r5
 800df32:	4622      	mov	r2, r4
 800df34:	2100      	movs	r1, #0
 800df36:	a805      	add	r0, sp, #20
 800df38:	f000 fc10 	bl	800e75c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800df3c:	e7e2      	b.n	800df04 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800df3e:	4630      	mov	r0, r6
 800df40:	b01e      	add	sp, #120	@ 0x78
 800df42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800df46:	b003      	add	sp, #12
 800df48:	4770      	bx	lr
	...

0800df4c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800df4c:	b530      	push	{r4, r5, lr}
 800df4e:	8083      	strh	r3, [r0, #4]
 800df50:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800df54:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800df58:	80c3      	strh	r3, [r0, #6]
 800df5a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800df5e:	6141      	str	r1, [r0, #20]
 800df60:	7203      	strb	r3, [r0, #8]
 800df62:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800df66:	8302      	strh	r2, [r0, #24]
 800df68:	7243      	strb	r3, [r0, #9]
 800df6a:	7a83      	ldrb	r3, [r0, #10]
 800df6c:	f365 0306 	bfi	r3, r5, #0, #7
 800df70:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800df74:	f365 13c7 	bfi	r3, r5, #7, #1
 800df78:	7283      	strb	r3, [r0, #10]
 800df7a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800df7e:	72c3      	strb	r3, [r0, #11]
 800df80:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800df84:	7303      	strb	r3, [r0, #12]
 800df86:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800df8a:	81c3      	strh	r3, [r0, #14]
 800df8c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800df90:	8203      	strh	r3, [r0, #16]
 800df92:	4b01      	ldr	r3, [pc, #4]	@ (800df98 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800df94:	6003      	str	r3, [r0, #0]
 800df96:	bd30      	pop	{r4, r5, pc}
 800df98:	0800fe98 	.word	0x0800fe98

0800df9c <_ZNK8touchgfx9ConstFont4findEt>:
 800df9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df9e:	6944      	ldr	r4, [r0, #20]
 800dfa0:	b3bc      	cbz	r4, 800e012 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dfa2:	88a3      	ldrh	r3, [r4, #4]
 800dfa4:	8b02      	ldrh	r2, [r0, #24]
 800dfa6:	1acb      	subs	r3, r1, r3
 800dfa8:	f102 32ff 	add.w	r2, r2, #4294967295
 800dfac:	d431      	bmi.n	800e012 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	dd0c      	ble.n	800dfcc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800dfb2:	230e      	movs	r3, #14
 800dfb4:	fb03 4302 	mla	r3, r3, r2, r4
 800dfb8:	889b      	ldrh	r3, [r3, #4]
 800dfba:	1a5b      	subs	r3, r3, r1
 800dfbc:	1ad3      	subs	r3, r2, r3
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	db27      	blt.n	800e012 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	bfbc      	itt	lt
 800dfc6:	2302      	movlt	r3, #2
 800dfc8:	fb92 f3f3 	sdivlt	r3, r2, r3
 800dfcc:	2500      	movs	r5, #0
 800dfce:	260e      	movs	r6, #14
 800dfd0:	4295      	cmp	r5, r2
 800dfd2:	dc1e      	bgt.n	800e012 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dfd4:	fb06 4003 	mla	r0, r6, r3, r4
 800dfd8:	8887      	ldrh	r7, [r0, #4]
 800dfda:	42b9      	cmp	r1, r7
 800dfdc:	d01a      	beq.n	800e014 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800dfde:	d20d      	bcs.n	800dffc <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800dfe0:	1e5a      	subs	r2, r3, #1
 800dfe2:	4295      	cmp	r5, r2
 800dfe4:	dc15      	bgt.n	800e012 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dfe6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800dfea:	1a5b      	subs	r3, r3, r1
 800dfec:	1ad3      	subs	r3, r2, r3
 800dfee:	429a      	cmp	r2, r3
 800dff0:	db0f      	blt.n	800e012 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800dff2:	429d      	cmp	r5, r3
 800dff4:	ddec      	ble.n	800dfd0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800dff6:	1953      	adds	r3, r2, r5
 800dff8:	105b      	asrs	r3, r3, #1
 800dffa:	e7e9      	b.n	800dfd0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800dffc:	1c5d      	adds	r5, r3, #1
 800dffe:	42aa      	cmp	r2, r5
 800e000:	db07      	blt.n	800e012 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e002:	8a43      	ldrh	r3, [r0, #18]
 800e004:	1acb      	subs	r3, r1, r3
 800e006:	442b      	add	r3, r5
 800e008:	429d      	cmp	r5, r3
 800e00a:	dc02      	bgt.n	800e012 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800e00c:	429a      	cmp	r2, r3
 800e00e:	dadf      	bge.n	800dfd0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800e010:	e7f1      	b.n	800dff6 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800e012:	2000      	movs	r0, #0
 800e014:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e016 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800e016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e018:	4604      	mov	r4, r0
 800e01a:	4617      	mov	r7, r2
 800e01c:	461e      	mov	r6, r3
 800e01e:	b911      	cbnz	r1, 800e026 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800e020:	2500      	movs	r5, #0
 800e022:	4628      	mov	r0, r5
 800e024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e026:	290a      	cmp	r1, #10
 800e028:	d0fa      	beq.n	800e020 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e02a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800e02e:	4291      	cmp	r1, r2
 800e030:	d0f6      	beq.n	800e020 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e032:	f242 020b 	movw	r2, #8203	@ 0x200b
 800e036:	4291      	cmp	r1, r2
 800e038:	d0f2      	beq.n	800e020 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e03a:	f7ff ffaf 	bl	800df9c <_ZNK8touchgfx9ConstFont4findEt>
 800e03e:	4605      	mov	r5, r0
 800e040:	b950      	cbnz	r0, 800e058 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800e042:	6823      	ldr	r3, [r4, #0]
 800e044:	4620      	mov	r0, r4
 800e046:	691b      	ldr	r3, [r3, #16]
 800e048:	4798      	blx	r3
 800e04a:	4601      	mov	r1, r0
 800e04c:	4620      	mov	r0, r4
 800e04e:	f7ff ffa5 	bl	800df9c <_ZNK8touchgfx9ConstFont4findEt>
 800e052:	4605      	mov	r5, r0
 800e054:	2800      	cmp	r0, #0
 800e056:	d0e3      	beq.n	800e020 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800e058:	6823      	ldr	r3, [r4, #0]
 800e05a:	4629      	mov	r1, r5
 800e05c:	4620      	mov	r0, r4
 800e05e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e060:	4798      	blx	r3
 800e062:	6038      	str	r0, [r7, #0]
 800e064:	6823      	ldr	r3, [r4, #0]
 800e066:	4620      	mov	r0, r4
 800e068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e06a:	4798      	blx	r3
 800e06c:	7030      	strb	r0, [r6, #0]
 800e06e:	e7d8      	b.n	800e022 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800e070 <_ZN8touchgfx12TextProviderC1Ev>:
 800e070:	b538      	push	{r3, r4, r5, lr}
 800e072:	2500      	movs	r5, #0
 800e074:	2302      	movs	r3, #2
 800e076:	4604      	mov	r4, r0
 800e078:	220e      	movs	r2, #14
 800e07a:	7403      	strb	r3, [r0, #16]
 800e07c:	4629      	mov	r1, r5
 800e07e:	6145      	str	r5, [r0, #20]
 800e080:	7605      	strb	r5, [r0, #24]
 800e082:	83c5      	strh	r5, [r0, #30]
 800e084:	8405      	strh	r5, [r0, #32]
 800e086:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800e088:	8705      	strh	r5, [r0, #56]	@ 0x38
 800e08a:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 800e08c:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 800e090:	e9c0 5500 	strd	r5, r5, [r0]
 800e094:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 800e098:	304c      	adds	r0, #76	@ 0x4c
 800e09a:	f000 ff24 	bl	800eee6 <memset>
 800e09e:	2301      	movs	r3, #1
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800e0a6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e0aa:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 800e0ae:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 800e0b2:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800e0b6:	f7ff fddb 	bl	800dc70 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	bd38      	pop	{r3, r4, r5, pc}

0800e0be <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800e0be:	b530      	push	{r4, r5, lr}
 800e0c0:	2500      	movs	r5, #0
 800e0c2:	2401      	movs	r4, #1
 800e0c4:	6843      	ldr	r3, [r0, #4]
 800e0c6:	b913      	cbnz	r3, 800e0ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800e0c8:	6803      	ldr	r3, [r0, #0]
 800e0ca:	b313      	cbz	r3, 800e112 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e0cc:	6043      	str	r3, [r0, #4]
 800e0ce:	7e03      	ldrb	r3, [r0, #24]
 800e0d0:	b143      	cbz	r3, 800e0e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800e0d2:	6943      	ldr	r3, [r0, #20]
 800e0d4:	b12b      	cbz	r3, 800e0e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e0d6:	881a      	ldrh	r2, [r3, #0]
 800e0d8:	b11a      	cbz	r2, 800e0e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e0da:	1c9a      	adds	r2, r3, #2
 800e0dc:	6142      	str	r2, [r0, #20]
 800e0de:	8818      	ldrh	r0, [r3, #0]
 800e0e0:	bd30      	pop	{r4, r5, pc}
 800e0e2:	7605      	strb	r5, [r0, #24]
 800e0e4:	6843      	ldr	r3, [r0, #4]
 800e0e6:	8819      	ldrh	r1, [r3, #0]
 800e0e8:	b199      	cbz	r1, 800e112 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e0ea:	1c9a      	adds	r2, r3, #2
 800e0ec:	2902      	cmp	r1, #2
 800e0ee:	6042      	str	r2, [r0, #4]
 800e0f0:	d1f5      	bne.n	800e0de <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800e0f2:	7c03      	ldrb	r3, [r0, #16]
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d8e5      	bhi.n	800e0c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e0f8:	1c5a      	adds	r2, r3, #1
 800e0fa:	3302      	adds	r3, #2
 800e0fc:	7402      	strb	r2, [r0, #16]
 800e0fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e102:	6143      	str	r3, [r0, #20]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d0dd      	beq.n	800e0c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e108:	881b      	ldrh	r3, [r3, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d0da      	beq.n	800e0c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e10e:	7604      	strb	r4, [r0, #24]
 800e110:	e7d8      	b.n	800e0c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e112:	2000      	movs	r0, #0
 800e114:	e7e4      	b.n	800e0e0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800e116 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800e116:	6001      	str	r1, [r0, #0]
 800e118:	2100      	movs	r1, #0
 800e11a:	b430      	push	{r4, r5}
 800e11c:	6041      	str	r1, [r0, #4]
 800e11e:	6815      	ldr	r5, [r2, #0]
 800e120:	6085      	str	r5, [r0, #8]
 800e122:	6852      	ldr	r2, [r2, #4]
 800e124:	6443      	str	r3, [r0, #68]	@ 0x44
 800e126:	9b02      	ldr	r3, [sp, #8]
 800e128:	60c2      	str	r2, [r0, #12]
 800e12a:	7401      	strb	r1, [r0, #16]
 800e12c:	6141      	str	r1, [r0, #20]
 800e12e:	7601      	strb	r1, [r0, #24]
 800e130:	8701      	strh	r1, [r0, #56]	@ 0x38
 800e132:	8401      	strh	r1, [r0, #32]
 800e134:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 800e138:	6483      	str	r3, [r0, #72]	@ 0x48
 800e13a:	bc30      	pop	{r4, r5}
 800e13c:	f7ff bd98 	b.w	800dc70 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800e140 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800e140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e142:	4605      	mov	r5, r0
 800e144:	4608      	mov	r0, r1
 800e146:	b1f1      	cbz	r1, 800e186 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 800e148:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 800e14c:	460b      	mov	r3, r1
 800e14e:	f101 0708 	add.w	r7, r1, #8
 800e152:	4622      	mov	r2, r4
 800e154:	6818      	ldr	r0, [r3, #0]
 800e156:	3308      	adds	r3, #8
 800e158:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e15c:	4626      	mov	r6, r4
 800e15e:	42bb      	cmp	r3, r7
 800e160:	c603      	stmia	r6!, {r0, r1}
 800e162:	4634      	mov	r4, r6
 800e164:	d1f6      	bne.n	800e154 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800e166:	6818      	ldr	r0, [r3, #0]
 800e168:	6030      	str	r0, [r6, #0]
 800e16a:	4610      	mov	r0, r2
 800e16c:	889b      	ldrh	r3, [r3, #4]
 800e16e:	80b3      	strh	r3, [r6, #4]
 800e170:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800e174:	015b      	lsls	r3, r3, #5
 800e176:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800e17a:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 800e17e:	430b      	orrs	r3, r1
 800e180:	425b      	negs	r3, r3
 800e182:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800e186:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e188 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800e188:	b538      	push	{r3, r4, r5, lr}
 800e18a:	460c      	mov	r4, r1
 800e18c:	6811      	ldr	r1, [r2, #0]
 800e18e:	4610      	mov	r0, r2
 800e190:	68cd      	ldr	r5, [r1, #12]
 800e192:	4619      	mov	r1, r3
 800e194:	47a8      	blx	r5
 800e196:	2800      	cmp	r0, #0
 800e198:	bf08      	it	eq
 800e19a:	4620      	moveq	r0, r4
 800e19c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e1a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800e1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1a4:	468c      	mov	ip, r1
 800e1a6:	4605      	mov	r5, r0
 800e1a8:	4614      	mov	r4, r2
 800e1aa:	b942      	cbnz	r2, 800e1be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 800e1ac:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800e1b0:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 800e1b4:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1be:	7b50      	ldrb	r0, [r2, #13]
 800e1c0:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 800e1c4:	8893      	ldrh	r3, [r2, #4]
 800e1c6:	0106      	lsls	r6, r0, #4
 800e1c8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800e1cc:	79e6      	ldrb	r6, [r4, #7]
 800e1ce:	4316      	orrs	r6, r2
 800e1d0:	185a      	adds	r2, r3, r1
 800e1d2:	b291      	uxth	r1, r2
 800e1d4:	b2b7      	uxth	r7, r6
 800e1d6:	291d      	cmp	r1, #29
 800e1d8:	d87f      	bhi.n	800e2da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 800e1da:	2201      	movs	r2, #1
 800e1dc:	10f6      	asrs	r6, r6, #3
 800e1de:	408a      	lsls	r2, r1
 800e1e0:	498b      	ldr	r1, [pc, #556]	@ (800e410 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 800e1e2:	420a      	tst	r2, r1
 800e1e4:	d12e      	bne.n	800e244 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800e1e6:	f412 7f60 	tst.w	r2, #896	@ 0x380
 800e1ea:	d076      	beq.n	800e2da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 800e1ec:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e1f0:	4623      	mov	r3, r4
 800e1f2:	f104 0e08 	add.w	lr, r4, #8
 800e1f6:	4614      	mov	r4, r2
 800e1f8:	6818      	ldr	r0, [r3, #0]
 800e1fa:	3308      	adds	r3, #8
 800e1fc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e200:	4694      	mov	ip, r2
 800e202:	4573      	cmp	r3, lr
 800e204:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800e208:	4662      	mov	r2, ip
 800e20a:	d1f5      	bne.n	800e1f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 800e20c:	6818      	ldr	r0, [r3, #0]
 800e20e:	f8cc 0000 	str.w	r0, [ip]
 800e212:	889b      	ldrh	r3, [r3, #4]
 800e214:	f8ac 3004 	strh.w	r3, [ip, #4]
 800e218:	b2b3      	uxth	r3, r6
 800e21a:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 800e21e:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 800e222:	1aca      	subs	r2, r1, r3
 800e224:	1bcf      	subs	r7, r1, r7
 800e226:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 800e22a:	b292      	uxth	r2, r2
 800e22c:	1afb      	subs	r3, r7, r3
 800e22e:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 800e232:	10d2      	asrs	r2, r2, #3
 800e234:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 800e238:	4302      	orrs	r2, r0
 800e23a:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 800e23e:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 800e242:	e7b9      	b.n	800e1b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800e244:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e248:	4623      	mov	r3, r4
 800e24a:	f104 0808 	add.w	r8, r4, #8
 800e24e:	4614      	mov	r4, r2
 800e250:	6818      	ldr	r0, [r3, #0]
 800e252:	3308      	adds	r3, #8
 800e254:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800e258:	4696      	mov	lr, r2
 800e25a:	4543      	cmp	r3, r8
 800e25c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e260:	4672      	mov	r2, lr
 800e262:	d1f5      	bne.n	800e250 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 800e264:	6818      	ldr	r0, [r3, #0]
 800e266:	f8ce 0000 	str.w	r0, [lr]
 800e26a:	889b      	ldrh	r3, [r3, #4]
 800e26c:	f8ae 3004 	strh.w	r3, [lr, #4]
 800e270:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 800e272:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800e276:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800e278:	f640 6333 	movw	r3, #3635	@ 0xe33
 800e27c:	4299      	cmp	r1, r3
 800e27e:	d111      	bne.n	800e2a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 800e280:	f8dc 3000 	ldr.w	r3, [ip]
 800e284:	4660      	mov	r0, ip
 800e286:	68db      	ldr	r3, [r3, #12]
 800e288:	4798      	blx	r3
 800e28a:	7b41      	ldrb	r1, [r0, #13]
 800e28c:	00cb      	lsls	r3, r1, #3
 800e28e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e292:	7a03      	ldrb	r3, [r0, #8]
 800e294:	4313      	orrs	r3, r2
 800e296:	064a      	lsls	r2, r1, #25
 800e298:	bf44      	itt	mi
 800e29a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e29e:	b21b      	sxthmi	r3, r3
 800e2a0:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e2a4:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 800e2a8:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 800e2ac:	443b      	add	r3, r7
 800e2ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800e2b2:	4433      	add	r3, r6
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e2ba:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 800e2be:	10db      	asrs	r3, r3, #3
 800e2c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e2c4:	4313      	orrs	r3, r2
 800e2c6:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 800e2ca:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 800e2ce:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 800e2d2:	1a9b      	subs	r3, r3, r2
 800e2d4:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800e2d8:	e76e      	b.n	800e1b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800e2da:	f023 0204 	bic.w	r2, r3, #4
 800e2de:	f640 611b 	movw	r1, #3611	@ 0xe1b
 800e2e2:	428a      	cmp	r2, r1
 800e2e4:	d003      	beq.n	800e2ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 800e2e6:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	d138      	bne.n	800e360 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 800e2ee:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 800e2f2:	4622      	mov	r2, r4
 800e2f4:	f104 0808 	add.w	r8, r4, #8
 800e2f8:	4634      	mov	r4, r6
 800e2fa:	6810      	ldr	r0, [r2, #0]
 800e2fc:	3208      	adds	r2, #8
 800e2fe:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800e302:	46b6      	mov	lr, r6
 800e304:	4542      	cmp	r2, r8
 800e306:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e30a:	4676      	mov	r6, lr
 800e30c:	d1f5      	bne.n	800e2fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 800e30e:	6810      	ldr	r0, [r2, #0]
 800e310:	3b01      	subs	r3, #1
 800e312:	4621      	mov	r1, r4
 800e314:	f8ce 0000 	str.w	r0, [lr]
 800e318:	b29b      	uxth	r3, r3
 800e31a:	8892      	ldrh	r2, [r2, #4]
 800e31c:	4628      	mov	r0, r5
 800e31e:	f8ae 2004 	strh.w	r2, [lr, #4]
 800e322:	4662      	mov	r2, ip
 800e324:	f7ff ff30 	bl	800e188 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800e328:	7b41      	ldrb	r1, [r0, #13]
 800e32a:	00cb      	lsls	r3, r1, #3
 800e32c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e330:	7a03      	ldrb	r3, [r0, #8]
 800e332:	0648      	lsls	r0, r1, #25
 800e334:	ea43 0302 	orr.w	r3, r3, r2
 800e338:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 800e33c:	bf44      	itt	mi
 800e33e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e342:	b21b      	sxthmi	r3, r3
 800e344:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 800e348:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800e34c:	005b      	lsls	r3, r3, #1
 800e34e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e352:	4313      	orrs	r3, r2
 800e354:	115a      	asrs	r2, r3, #5
 800e356:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800e35a:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 800e35e:	e047      	b.n	800e3f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 800e360:	00c2      	lsls	r2, r0, #3
 800e362:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 800e366:	7a22      	ldrb	r2, [r4, #8]
 800e368:	430a      	orrs	r2, r1
 800e36a:	0641      	lsls	r1, r0, #25
 800e36c:	f640 6109 	movw	r1, #3593	@ 0xe09
 800e370:	bf44      	itt	mi
 800e372:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 800e376:	b212      	sxthmi	r2, r2
 800e378:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 800e37c:	f023 0210 	bic.w	r2, r3, #16
 800e380:	428a      	cmp	r2, r1
 800e382:	d003      	beq.n	800e38c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 800e384:	f640 6213 	movw	r2, #3603	@ 0xe13
 800e388:	4293      	cmp	r3, r2
 800e38a:	d13e      	bne.n	800e40a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 800e38c:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 800e390:	f104 0808 	add.w	r8, r4, #8
 800e394:	4696      	mov	lr, r2
 800e396:	6820      	ldr	r0, [r4, #0]
 800e398:	3408      	adds	r4, #8
 800e39a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800e39e:	4616      	mov	r6, r2
 800e3a0:	4544      	cmp	r4, r8
 800e3a2:	c603      	stmia	r6!, {r0, r1}
 800e3a4:	4632      	mov	r2, r6
 800e3a6:	d1f6      	bne.n	800e396 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 800e3a8:	6820      	ldr	r0, [r4, #0]
 800e3aa:	6030      	str	r0, [r6, #0]
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	88a1      	ldrh	r1, [r4, #4]
 800e3b0:	4674      	mov	r4, lr
 800e3b2:	80b1      	strh	r1, [r6, #4]
 800e3b4:	4671      	mov	r1, lr
 800e3b6:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 800e3ba:	0076      	lsls	r6, r6, #1
 800e3bc:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800e3c0:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 800e3c4:	4316      	orrs	r6, r2
 800e3c6:	f640 6213 	movw	r2, #3603	@ 0xe13
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	4662      	mov	r2, ip
 800e3ce:	bf16      	itet	ne
 800e3d0:	f103 33ff 	addne.w	r3, r3, #4294967295
 800e3d4:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 800e3d8:	b29b      	uxthne	r3, r3
 800e3da:	f7ff fed5 	bl	800e188 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800e3de:	7b43      	ldrb	r3, [r0, #13]
 800e3e0:	7a82      	ldrb	r2, [r0, #10]
 800e3e2:	005b      	lsls	r3, r3, #1
 800e3e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	1af6      	subs	r6, r6, r3
 800e3ec:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 800e3f0:	7b61      	ldrb	r1, [r4, #13]
 800e3f2:	00cb      	lsls	r3, r1, #3
 800e3f4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e3f8:	7a23      	ldrb	r3, [r4, #8]
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	064a      	lsls	r2, r1, #25
 800e3fe:	bf44      	itt	mi
 800e400:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e404:	b21b      	sxthmi	r3, r3
 800e406:	1bdb      	subs	r3, r3, r7
 800e408:	e719      	b.n	800e23e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800e40a:	2300      	movs	r3, #0
 800e40c:	e7a5      	b.n	800e35a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 800e40e:	bf00      	nop
 800e410:	3fc00079 	.word	0x3fc00079

0800e414 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800e414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e418:	4604      	mov	r4, r0
 800e41a:	b942      	cbnz	r2, 800e42e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800e41c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e420:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 800e424:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800e428:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800e42c:	e047      	b.n	800e4be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800e42e:	7b51      	ldrb	r1, [r2, #13]
 800e430:	8893      	ldrh	r3, [r2, #4]
 800e432:	010d      	lsls	r5, r1, #4
 800e434:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 800e438:	79d5      	ldrb	r5, [r2, #7]
 800e43a:	4305      	orrs	r5, r0
 800e43c:	2d04      	cmp	r5, #4
 800e43e:	bfcc      	ite	gt
 800e440:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800e444:	f04f 0e01 	movle.w	lr, #1
 800e448:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 800e44c:	f200 80ab 	bhi.w	800e5a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800e450:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 800e454:	4283      	cmp	r3, r0
 800e456:	d216      	bcs.n	800e486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e458:	f240 605b 	movw	r0, #1627	@ 0x65b
 800e45c:	4283      	cmp	r3, r0
 800e45e:	d859      	bhi.n	800e514 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800e460:	f240 6057 	movw	r0, #1623	@ 0x657
 800e464:	4283      	cmp	r3, r0
 800e466:	d20e      	bcs.n	800e486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e468:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800e46c:	d24a      	bcs.n	800e504 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800e46e:	f240 604e 	movw	r0, #1614	@ 0x64e
 800e472:	4283      	cmp	r3, r0
 800e474:	d207      	bcs.n	800e486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e476:	f240 601a 	movw	r0, #1562	@ 0x61a
 800e47a:	4283      	cmp	r3, r0
 800e47c:	d02a      	beq.n	800e4d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e47e:	d821      	bhi.n	800e4c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800e480:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 800e484:	d35b      	bcc.n	800e53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800e486:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 800e48a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800e48e:	f040 80d0 	bne.w	800e632 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800e492:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 800e496:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800e49a:	f040 80ca 	bne.w	800e632 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800e49e:	00cb      	lsls	r3, r1, #3
 800e4a0:	0649      	lsls	r1, r1, #25
 800e4a2:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800e4a6:	7a13      	ldrb	r3, [r2, #8]
 800e4a8:	ea43 0300 	orr.w	r3, r3, r0
 800e4ac:	bf44      	itt	mi
 800e4ae:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e4b2:	b21b      	sxthmi	r3, r3
 800e4b4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800e4b8:	1b5d      	subs	r5, r3, r5
 800e4ba:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e4be:	4610      	mov	r0, r2
 800e4c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4c4:	f240 604b 	movw	r0, #1611	@ 0x64b
 800e4c8:	4283      	cmp	r3, r0
 800e4ca:	d338      	bcc.n	800e53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800e4cc:	f240 604c 	movw	r0, #1612	@ 0x64c
 800e4d0:	4283      	cmp	r3, r0
 800e4d2:	d9d8      	bls.n	800e486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e4d4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 800e4d8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 800e4dc:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800e4e0:	f040 80f3 	bne.w	800e6ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800e4e4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800e4e8:	f040 80ef 	bne.w	800e6ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 800e4ec:	00cb      	lsls	r3, r1, #3
 800e4ee:	064e      	lsls	r6, r1, #25
 800e4f0:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800e4f4:	7a13      	ldrb	r3, [r2, #8]
 800e4f6:	ea43 0300 	orr.w	r3, r3, r0
 800e4fa:	bf44      	itt	mi
 800e4fc:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e500:	b21b      	sxthmi	r3, r3
 800e502:	e7d9      	b.n	800e4b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800e504:	f240 6054 	movw	r0, #1620	@ 0x654
 800e508:	4283      	cmp	r3, r0
 800e50a:	d8e3      	bhi.n	800e4d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e50c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800e510:	d9e0      	bls.n	800e4d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e512:	e7b8      	b.n	800e486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e514:	f240 6074 	movw	r0, #1652	@ 0x674
 800e518:	4283      	cmp	r3, r0
 800e51a:	d0b4      	beq.n	800e486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e51c:	d82d      	bhi.n	800e57a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800e51e:	f240 605e 	movw	r0, #1630	@ 0x65e
 800e522:	4283      	cmp	r3, r0
 800e524:	d804      	bhi.n	800e530 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800e526:	f240 605d 	movw	r0, #1629	@ 0x65d
 800e52a:	4283      	cmp	r3, r0
 800e52c:	d3d2      	bcc.n	800e4d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e52e:	e7aa      	b.n	800e486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e530:	f240 605f 	movw	r0, #1631	@ 0x65f
 800e534:	4283      	cmp	r3, r0
 800e536:	d0cd      	beq.n	800e4d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e538:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 800e53c:	d0a3      	beq.n	800e486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e53e:	00cb      	lsls	r3, r1, #3
 800e540:	0649      	lsls	r1, r1, #25
 800e542:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800e546:	7a13      	ldrb	r3, [r2, #8]
 800e548:	ea43 0300 	orr.w	r3, r3, r0
 800e54c:	bf44      	itt	mi
 800e54e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e552:	b21b      	sxthmi	r3, r3
 800e554:	1b5d      	subs	r5, r3, r5
 800e556:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800e55a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e55e:	7b53      	ldrb	r3, [r2, #13]
 800e560:	015b      	lsls	r3, r3, #5
 800e562:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800e566:	7993      	ldrb	r3, [r2, #6]
 800e568:	430b      	orrs	r3, r1
 800e56a:	2105      	movs	r1, #5
 800e56c:	005b      	lsls	r3, r3, #1
 800e56e:	fb93 f3f1 	sdiv	r3, r3, r1
 800e572:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800e576:	440b      	add	r3, r1
 800e578:	e756      	b.n	800e428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800e57a:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 800e57e:	4283      	cmp	r3, r0
 800e580:	d809      	bhi.n	800e596 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800e582:	f240 60df 	movw	r0, #1759	@ 0x6df
 800e586:	4283      	cmp	r3, r0
 800e588:	f4bf af7d 	bcs.w	800e486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e58c:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 800e590:	2b05      	cmp	r3, #5
 800e592:	d8d4      	bhi.n	800e53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800e594:	e777      	b.n	800e486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e596:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 800e59a:	4283      	cmp	r3, r0
 800e59c:	d09a      	beq.n	800e4d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e59e:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800e5a2:	4283      	cmp	r3, r0
 800e5a4:	e7ca      	b.n	800e53c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800e5a6:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 800e5aa:	d22b      	bcs.n	800e604 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800e5ac:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 800e5b0:	4283      	cmp	r3, r0
 800e5b2:	d28f      	bcs.n	800e4d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e5b4:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800e5b8:	4283      	cmp	r3, r0
 800e5ba:	d816      	bhi.n	800e5ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800e5bc:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 800e5c0:	4283      	cmp	r3, r0
 800e5c2:	f4bf af60 	bcs.w	800e486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e5c6:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 800e5ca:	4283      	cmp	r3, r0
 800e5cc:	d80a      	bhi.n	800e5e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800e5ce:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800e5d2:	4283      	cmp	r3, r0
 800e5d4:	f4bf af57 	bcs.w	800e486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e5d8:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 800e5dc:	4283      	cmp	r3, r0
 800e5de:	f43f af79 	beq.w	800e4d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e5e2:	e7ac      	b.n	800e53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800e5e4:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 800e5e8:	e7f8      	b.n	800e5dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800e5ea:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800e5ee:	4283      	cmp	r3, r0
 800e5f0:	d802      	bhi.n	800e5f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800e5f2:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800e5f6:	e798      	b.n	800e52a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800e5f8:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 800e5fc:	4283      	cmp	r3, r0
 800e5fe:	f47f af42 	bne.w	800e486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e602:	e767      	b.n	800e4d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e604:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 800e608:	4283      	cmp	r3, r0
 800e60a:	f43f af63 	beq.w	800e4d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e60e:	d802      	bhi.n	800e616 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800e610:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 800e614:	e7f2      	b.n	800e5fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800e616:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 800e61a:	4283      	cmp	r3, r0
 800e61c:	d805      	bhi.n	800e62a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800e61e:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 800e622:	4283      	cmp	r3, r0
 800e624:	f4ff af2f 	bcc.w	800e486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800e628:	e754      	b.n	800e4d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800e62a:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 800e62e:	4283      	cmp	r3, r0
 800e630:	e7af      	b.n	800e592 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800e632:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800e636:	4617      	mov	r7, r2
 800e638:	f102 0808 	add.w	r8, r2, #8
 800e63c:	4666      	mov	r6, ip
 800e63e:	6838      	ldr	r0, [r7, #0]
 800e640:	3708      	adds	r7, #8
 800e642:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800e646:	46e6      	mov	lr, ip
 800e648:	4547      	cmp	r7, r8
 800e64a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800e64e:	46f4      	mov	ip, lr
 800e650:	d1f5      	bne.n	800e63e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800e652:	6838      	ldr	r0, [r7, #0]
 800e654:	f8ce 0000 	str.w	r0, [lr]
 800e658:	88b9      	ldrh	r1, [r7, #4]
 800e65a:	f8ae 1004 	strh.w	r1, [lr, #4]
 800e65e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800e662:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800e666:	d009      	beq.n	800e67c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 800e668:	7b51      	ldrb	r1, [r2, #13]
 800e66a:	7992      	ldrb	r2, [r2, #6]
 800e66c:	0149      	lsls	r1, r1, #5
 800e66e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800e672:	4311      	orrs	r1, r2
 800e674:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800e678:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800e67c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800e680:	b2ad      	uxth	r5, r5
 800e682:	d00d      	beq.n	800e6a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 800e684:	442b      	add	r3, r5
 800e686:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800e690:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800e694:	10db      	asrs	r3, r3, #3
 800e696:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e69a:	4313      	orrs	r3, r2
 800e69c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800e6a0:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800e6a4:	00cb      	lsls	r3, r1, #3
 800e6a6:	064f      	lsls	r7, r1, #25
 800e6a8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e6ac:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800e6b0:	ea43 0302 	orr.w	r3, r3, r2
 800e6b4:	bf44      	itt	mi
 800e6b6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e6ba:	b21b      	sxthmi	r3, r3
 800e6bc:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800e6c0:	1b5b      	subs	r3, r3, r5
 800e6c2:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800e6c6:	4632      	mov	r2, r6
 800e6c8:	e6f9      	b.n	800e4be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800e6ca:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800e6ce:	4617      	mov	r7, r2
 800e6d0:	f102 0908 	add.w	r9, r2, #8
 800e6d4:	4666      	mov	r6, ip
 800e6d6:	6838      	ldr	r0, [r7, #0]
 800e6d8:	3708      	adds	r7, #8
 800e6da:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800e6de:	46e0      	mov	r8, ip
 800e6e0:	454f      	cmp	r7, r9
 800e6e2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800e6e6:	46c4      	mov	ip, r8
 800e6e8:	d1f5      	bne.n	800e6d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 800e6ea:	6838      	ldr	r0, [r7, #0]
 800e6ec:	f8c8 0000 	str.w	r0, [r8]
 800e6f0:	88b9      	ldrh	r1, [r7, #4]
 800e6f2:	f8a8 1004 	strh.w	r1, [r8, #4]
 800e6f6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800e6fa:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800e6fe:	d009      	beq.n	800e714 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 800e700:	7b51      	ldrb	r1, [r2, #13]
 800e702:	7992      	ldrb	r2, [r2, #6]
 800e704:	0149      	lsls	r1, r1, #5
 800e706:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800e70a:	4311      	orrs	r1, r2
 800e70c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800e710:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800e714:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800e718:	d00e      	beq.n	800e738 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 800e71a:	eba3 030e 	sub.w	r3, r3, lr
 800e71e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800e722:	b29b      	uxth	r3, r3
 800e724:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800e728:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800e72c:	10db      	asrs	r3, r3, #3
 800e72e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e732:	4313      	orrs	r3, r2
 800e734:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800e738:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800e73c:	00cb      	lsls	r3, r1, #3
 800e73e:	0648      	lsls	r0, r1, #25
 800e740:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e744:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800e748:	ea43 0302 	orr.w	r3, r3, r2
 800e74c:	bf44      	itt	mi
 800e74e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800e752:	b21b      	sxthmi	r3, r3
 800e754:	1b5d      	subs	r5, r3, r5
 800e756:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e75a:	e7b4      	b.n	800e6c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0800e75c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800e75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e760:	461e      	mov	r6, r3
 800e762:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800e764:	4604      	mov	r4, r0
 800e766:	4617      	mov	r7, r2
 800e768:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e76c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800e770:	f7ff f9d8 	bl	800db24 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800e774:	4605      	mov	r5, r0
 800e776:	b918      	cbnz	r0, 800e780 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800e778:	6030      	str	r0, [r6, #0]
 800e77a:	4628      	mov	r0, r5
 800e77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	4601      	mov	r1, r0
 800e784:	4638      	mov	r0, r7
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	4798      	blx	r3
 800e78a:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800e78e:	4602      	mov	r2, r0
 800e790:	6030      	str	r0, [r6, #0]
 800e792:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e796:	d213      	bcs.n	800e7c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800e798:	4643      	mov	r3, r8
 800e79a:	4639      	mov	r1, r7
 800e79c:	4620      	mov	r0, r4
 800e79e:	f7ff fe39 	bl	800e414 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800e7a2:	6030      	str	r0, [r6, #0]
 800e7a4:	6833      	ldr	r3, [r6, #0]
 800e7a6:	b143      	cbz	r3, 800e7ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800e7a8:	7b5a      	ldrb	r2, [r3, #13]
 800e7aa:	7a9b      	ldrb	r3, [r3, #10]
 800e7ac:	0052      	lsls	r2, r2, #1
 800e7ae:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800e7b2:	4313      	orrs	r3, r2
 800e7b4:	bf0c      	ite	eq
 800e7b6:	2301      	moveq	r3, #1
 800e7b8:	2300      	movne	r3, #0
 800e7ba:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800e7be:	e7dc      	b.n	800e77a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800e7c0:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	2b7f      	cmp	r3, #127	@ 0x7f
 800e7c8:	d804      	bhi.n	800e7d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800e7ca:	4639      	mov	r1, r7
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	f7ff fce7 	bl	800e1a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800e7d2:	e7e6      	b.n	800e7a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800e7d4:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d0e3      	beq.n	800e7a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800e7dc:	f640 1302 	movw	r3, #2306	@ 0x902
 800e7e0:	429d      	cmp	r5, r3
 800e7e2:	d1df      	bne.n	800e7a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800e7e4:	4601      	mov	r1, r0
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	f7ff fcaa 	bl	800e140 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800e7ec:	e7d9      	b.n	800e7a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800e7ee <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800e7ee:	b510      	push	{r4, lr}
 800e7f0:	4604      	mov	r4, r0
 800e7f2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800e7f6:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800e7f8:	b1e1      	cbz	r1, 800e834 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800e7fa:	2b0a      	cmp	r3, #10
 800e7fc:	d02d      	beq.n	800e85a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800e7fe:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800e800:	3901      	subs	r1, #1
 800e802:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800e806:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800e808:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 800e80c:	1c51      	adds	r1, r2, #1
 800e80e:	b289      	uxth	r1, r1
 800e810:	2901      	cmp	r1, #1
 800e812:	bf8a      	itet	hi
 800e814:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e818:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 800e81a:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 800e81c:	1c5a      	adds	r2, r3, #1
 800e81e:	8722      	strh	r2, [r4, #56]	@ 0x38
 800e820:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800e822:	4413      	add	r3, r2
 800e824:	b29b      	uxth	r3, r3
 800e826:	2b09      	cmp	r3, #9
 800e828:	bf88      	it	hi
 800e82a:	3b0a      	subhi	r3, #10
 800e82c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800e830:	8458      	strh	r0, [r3, #34]	@ 0x22
 800e832:	e7de      	b.n	800e7f2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800e834:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800e836:	2b0a      	cmp	r3, #10
 800e838:	d00f      	beq.n	800e85a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 800e83a:	4620      	mov	r0, r4
 800e83c:	f7ff fc3f 	bl	800e0be <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800e840:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800e842:	1c5a      	adds	r2, r3, #1
 800e844:	8722      	strh	r2, [r4, #56]	@ 0x38
 800e846:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800e848:	4413      	add	r3, r2
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	2b09      	cmp	r3, #9
 800e84e:	bf88      	it	hi
 800e850:	3b0a      	subhi	r3, #10
 800e852:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800e856:	8458      	strh	r0, [r3, #34]	@ 0x22
 800e858:	e7ec      	b.n	800e834 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 800e85a:	bd10      	pop	{r4, pc}

0800e85c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800e85c:	b538      	push	{r3, r4, r5, lr}
 800e85e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800e860:	4604      	mov	r4, r0
 800e862:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800e866:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 800e868:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 800e86a:	3a01      	subs	r2, #1
 800e86c:	8702      	strh	r2, [r0, #56]	@ 0x38
 800e86e:	1c5a      	adds	r2, r3, #1
 800e870:	b292      	uxth	r2, r2
 800e872:	2a09      	cmp	r2, #9
 800e874:	bf8a      	itet	hi
 800e876:	3b09      	subhi	r3, #9
 800e878:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 800e87a:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 800e87c:	f7ff ffb7 	bl	800e7ee <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800e880:	8c23      	ldrh	r3, [r4, #32]
 800e882:	2b01      	cmp	r3, #1
 800e884:	bf9c      	itt	ls
 800e886:	3301      	addls	r3, #1
 800e888:	8423      	strhls	r3, [r4, #32]
 800e88a:	8be3      	ldrh	r3, [r4, #30]
 800e88c:	b90b      	cbnz	r3, 800e892 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800e88e:	2302      	movs	r3, #2
 800e890:	83e3      	strh	r3, [r4, #30]
 800e892:	8be3      	ldrh	r3, [r4, #30]
 800e894:	4628      	mov	r0, r5
 800e896:	3b01      	subs	r3, #1
 800e898:	b29b      	uxth	r3, r3
 800e89a:	83e3      	strh	r3, [r4, #30]
 800e89c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800e8a0:	8365      	strh	r5, [r4, #26]
 800e8a2:	bd38      	pop	{r3, r4, r5, pc}

0800e8a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800e8a4:	428a      	cmp	r2, r1
 800e8a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8aa:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 800e8ac:	d932      	bls.n	800e914 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 800e8ae:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 800e8b0:	1a54      	subs	r4, r2, r1
 800e8b2:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 800e8b6:	19ee      	adds	r6, r5, r7
 800e8b8:	fa1f fe84 	uxth.w	lr, r4
 800e8bc:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 800e8c0:	3e01      	subs	r6, #1
 800e8c2:	b2b4      	uxth	r4, r6
 800e8c4:	eba4 090e 	sub.w	r9, r4, lr
 800e8c8:	fa1f f989 	uxth.w	r9, r9
 800e8cc:	2c09      	cmp	r4, #9
 800e8ce:	4626      	mov	r6, r4
 800e8d0:	bf88      	it	hi
 800e8d2:	f1a4 060a 	subhi.w	r6, r4, #10
 800e8d6:	f1bc 0f00 	cmp.w	ip, #0
 800e8da:	f104 34ff 	add.w	r4, r4, #4294967295
 800e8de:	bf08      	it	eq
 800e8e0:	f04f 0c02 	moveq.w	ip, #2
 800e8e4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800e8e8:	b2a4      	uxth	r4, r4
 800e8ea:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e8ee:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800e8f2:	454c      	cmp	r4, r9
 800e8f4:	fa1f fc8c 	uxth.w	ip, ip
 800e8f8:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800e8fc:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 800e900:	d1e4      	bne.n	800e8cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800e902:	eba5 050e 	sub.w	r5, r5, lr
 800e906:	eb0e 0408 	add.w	r4, lr, r8
 800e90a:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 800e90e:	8705      	strh	r5, [r0, #56]	@ 0x38
 800e910:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 800e914:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800e916:	250a      	movs	r5, #10
 800e918:	1a64      	subs	r4, r4, r1
 800e91a:	4439      	add	r1, r7
 800e91c:	b289      	uxth	r1, r1
 800e91e:	8704      	strh	r4, [r0, #56]	@ 0x38
 800e920:	2909      	cmp	r1, #9
 800e922:	bf88      	it	hi
 800e924:	390a      	subhi	r1, #10
 800e926:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800e928:	b18a      	cbz	r2, 800e94e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 800e92a:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 800e92c:	3a01      	subs	r2, #1
 800e92e:	3101      	adds	r1, #1
 800e930:	b292      	uxth	r2, r2
 800e932:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800e936:	8701      	strh	r1, [r0, #56]	@ 0x38
 800e938:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800e93a:	b901      	cbnz	r1, 800e93e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 800e93c:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800e93e:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800e940:	3901      	subs	r1, #1
 800e942:	b289      	uxth	r1, r1
 800e944:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800e946:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800e94a:	844c      	strh	r4, [r1, #34]	@ 0x22
 800e94c:	e7ec      	b.n	800e928 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 800e94e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e952:	f7ff bf4c 	b.w	800e7ee <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800e956 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800e956:	b570      	push	{r4, r5, r6, lr}
 800e958:	2500      	movs	r5, #0
 800e95a:	4295      	cmp	r5, r2
 800e95c:	d011      	beq.n	800e982 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800e95e:	8bc4      	ldrh	r4, [r0, #30]
 800e960:	f831 6b02 	ldrh.w	r6, [r1], #2
 800e964:	4414      	add	r4, r2
 800e966:	3c01      	subs	r4, #1
 800e968:	1b64      	subs	r4, r4, r5
 800e96a:	b2a4      	uxth	r4, r4
 800e96c:	2c01      	cmp	r4, #1
 800e96e:	bf88      	it	hi
 800e970:	3c02      	subhi	r4, #2
 800e972:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800e976:	8b64      	ldrh	r4, [r4, #26]
 800e978:	42b4      	cmp	r4, r6
 800e97a:	d117      	bne.n	800e9ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800e97c:	3501      	adds	r5, #1
 800e97e:	b2ad      	uxth	r5, r5
 800e980:	e7eb      	b.n	800e95a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800e982:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800e986:	2400      	movs	r4, #0
 800e988:	4413      	add	r3, r2
 800e98a:	b2a2      	uxth	r2, r4
 800e98c:	429a      	cmp	r2, r3
 800e98e:	da0f      	bge.n	800e9b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800e990:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 800e992:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800e996:	3401      	adds	r4, #1
 800e998:	4432      	add	r2, r6
 800e99a:	b292      	uxth	r2, r2
 800e99c:	2a09      	cmp	r2, #9
 800e99e:	bf88      	it	hi
 800e9a0:	3a0a      	subhi	r2, #10
 800e9a2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800e9a6:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800e9a8:	42aa      	cmp	r2, r5
 800e9aa:	d0ee      	beq.n	800e98a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800e9ac:	2000      	movs	r0, #0
 800e9ae:	bd70      	pop	{r4, r5, r6, pc}
 800e9b0:	2001      	movs	r0, #1
 800e9b2:	e7fc      	b.n	800e9ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800e9b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800e9b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b8:	4605      	mov	r5, r0
 800e9ba:	4616      	mov	r6, r2
 800e9bc:	1c8c      	adds	r4, r1, #2
 800e9be:	8809      	ldrh	r1, [r1, #0]
 800e9c0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800e9c4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800e9c8:	42b3      	cmp	r3, r6
 800e9ca:	d124      	bne.n	800ea16 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800e9cc:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800e9d0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800e9d4:	f001 070f 	and.w	r7, r1, #15
 800e9d8:	4652      	mov	r2, sl
 800e9da:	f8cd 8000 	str.w	r8, [sp]
 800e9de:	464b      	mov	r3, r9
 800e9e0:	4621      	mov	r1, r4
 800e9e2:	4628      	mov	r0, r5
 800e9e4:	f7ff ffb7 	bl	800e956 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800e9e8:	4683      	mov	fp, r0
 800e9ea:	b168      	cbz	r0, 800ea08 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800e9ec:	eb0a 0109 	add.w	r1, sl, r9
 800e9f0:	463a      	mov	r2, r7
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	4441      	add	r1, r8
 800e9f6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800e9fa:	4649      	mov	r1, r9
 800e9fc:	f7ff ff52 	bl	800e8a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800ea00:	4658      	mov	r0, fp
 800ea02:	b003      	add	sp, #12
 800ea04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea08:	eb07 010a 	add.w	r1, r7, sl
 800ea0c:	4449      	add	r1, r9
 800ea0e:	4441      	add	r1, r8
 800ea10:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800ea14:	e7d2      	b.n	800e9bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800ea16:	f04f 0b00 	mov.w	fp, #0
 800ea1a:	e7f1      	b.n	800ea00 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800ea1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800ea1c:	b570      	push	{r4, r5, r6, lr}
 800ea1e:	8810      	ldrh	r0, [r2, #0]
 800ea20:	4298      	cmp	r0, r3
 800ea22:	d817      	bhi.n	800ea54 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800ea24:	1e48      	subs	r0, r1, #1
 800ea26:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800ea2a:	4298      	cmp	r0, r3
 800ea2c:	d312      	bcc.n	800ea54 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800ea2e:	2400      	movs	r4, #0
 800ea30:	428c      	cmp	r4, r1
 800ea32:	d20f      	bcs.n	800ea54 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800ea34:	1860      	adds	r0, r4, r1
 800ea36:	1040      	asrs	r0, r0, #1
 800ea38:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800ea3c:	0085      	lsls	r5, r0, #2
 800ea3e:	42b3      	cmp	r3, r6
 800ea40:	d902      	bls.n	800ea48 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800ea42:	3001      	adds	r0, #1
 800ea44:	b284      	uxth	r4, r0
 800ea46:	e7f3      	b.n	800ea30 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800ea48:	d201      	bcs.n	800ea4e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800ea4a:	b281      	uxth	r1, r0
 800ea4c:	e7f0      	b.n	800ea30 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800ea4e:	442a      	add	r2, r5
 800ea50:	8850      	ldrh	r0, [r2, #2]
 800ea52:	bd70      	pop	{r4, r5, r6, pc}
 800ea54:	2000      	movs	r0, #0
 800ea56:	e7fc      	b.n	800ea52 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800ea58 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800ea58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea5c:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800ea5e:	4604      	mov	r4, r0
 800ea60:	260b      	movs	r6, #11
 800ea62:	886f      	ldrh	r7, [r5, #2]
 800ea64:	087f      	lsrs	r7, r7, #1
 800ea66:	3e01      	subs	r6, #1
 800ea68:	d013      	beq.n	800ea92 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800ea6a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800ea6c:	462a      	mov	r2, r5
 800ea6e:	4639      	mov	r1, r7
 800ea70:	4620      	mov	r0, r4
 800ea72:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800ea76:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800ea7a:	4643      	mov	r3, r8
 800ea7c:	f7ff ffce 	bl	800ea1c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800ea80:	b138      	cbz	r0, 800ea92 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800ea82:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800ea86:	4642      	mov	r2, r8
 800ea88:	4620      	mov	r0, r4
 800ea8a:	f7ff ff93 	bl	800e9b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800ea8e:	2800      	cmp	r0, #0
 800ea90:	d1e9      	bne.n	800ea66 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800ea92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ea96 <_ZdlPvj>:
 800ea96:	f000 b812 	b.w	800eabe <_ZdlPv>

0800ea9a <__cxa_guard_acquire>:
 800ea9a:	6802      	ldr	r2, [r0, #0]
 800ea9c:	07d2      	lsls	r2, r2, #31
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	d405      	bmi.n	800eaae <__cxa_guard_acquire+0x14>
 800eaa2:	7842      	ldrb	r2, [r0, #1]
 800eaa4:	b102      	cbz	r2, 800eaa8 <__cxa_guard_acquire+0xe>
 800eaa6:	deff      	udf	#255	@ 0xff
 800eaa8:	2001      	movs	r0, #1
 800eaaa:	7058      	strb	r0, [r3, #1]
 800eaac:	4770      	bx	lr
 800eaae:	2000      	movs	r0, #0
 800eab0:	4770      	bx	lr

0800eab2 <__cxa_guard_release>:
 800eab2:	2301      	movs	r3, #1
 800eab4:	6003      	str	r3, [r0, #0]
 800eab6:	4770      	bx	lr

0800eab8 <__cxa_pure_virtual>:
 800eab8:	b508      	push	{r3, lr}
 800eaba:	f000 f80f 	bl	800eadc <_ZSt9terminatev>

0800eabe <_ZdlPv>:
 800eabe:	f000 b845 	b.w	800eb4c <free>

0800eac2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800eac2:	b508      	push	{r3, lr}
 800eac4:	4780      	blx	r0
 800eac6:	f000 f80e 	bl	800eae6 <abort>
	...

0800eacc <_ZSt13get_terminatev>:
 800eacc:	4b02      	ldr	r3, [pc, #8]	@ (800ead8 <_ZSt13get_terminatev+0xc>)
 800eace:	6818      	ldr	r0, [r3, #0]
 800ead0:	f3bf 8f5b 	dmb	ish
 800ead4:	4770      	bx	lr
 800ead6:	bf00      	nop
 800ead8:	240001c0 	.word	0x240001c0

0800eadc <_ZSt9terminatev>:
 800eadc:	b508      	push	{r3, lr}
 800eade:	f7ff fff5 	bl	800eacc <_ZSt13get_terminatev>
 800eae2:	f7ff ffee 	bl	800eac2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800eae6 <abort>:
 800eae6:	b508      	push	{r3, lr}
 800eae8:	2006      	movs	r0, #6
 800eaea:	f000 fa2d 	bl	800ef48 <raise>
 800eaee:	2001      	movs	r0, #1
 800eaf0:	f7f3 fc8e 	bl	8002410 <_exit>

0800eaf4 <__assert_func>:
 800eaf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eaf6:	4614      	mov	r4, r2
 800eaf8:	461a      	mov	r2, r3
 800eafa:	4b09      	ldr	r3, [pc, #36]	@ (800eb20 <__assert_func+0x2c>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	4605      	mov	r5, r0
 800eb00:	68d8      	ldr	r0, [r3, #12]
 800eb02:	b14c      	cbz	r4, 800eb18 <__assert_func+0x24>
 800eb04:	4b07      	ldr	r3, [pc, #28]	@ (800eb24 <__assert_func+0x30>)
 800eb06:	9100      	str	r1, [sp, #0]
 800eb08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb0c:	4906      	ldr	r1, [pc, #24]	@ (800eb28 <__assert_func+0x34>)
 800eb0e:	462b      	mov	r3, r5
 800eb10:	f000 f976 	bl	800ee00 <fiprintf>
 800eb14:	f7ff ffe7 	bl	800eae6 <abort>
 800eb18:	4b04      	ldr	r3, [pc, #16]	@ (800eb2c <__assert_func+0x38>)
 800eb1a:	461c      	mov	r4, r3
 800eb1c:	e7f3      	b.n	800eb06 <__assert_func+0x12>
 800eb1e:	bf00      	nop
 800eb20:	240001d0 	.word	0x240001d0
 800eb24:	0800fef8 	.word	0x0800fef8
 800eb28:	0800ff05 	.word	0x0800ff05
 800eb2c:	0800ff33 	.word	0x0800ff33

0800eb30 <atexit>:
 800eb30:	2300      	movs	r3, #0
 800eb32:	4601      	mov	r1, r0
 800eb34:	461a      	mov	r2, r3
 800eb36:	4618      	mov	r0, r3
 800eb38:	f000 baa6 	b.w	800f088 <__register_exitproc>

0800eb3c <malloc>:
 800eb3c:	4b02      	ldr	r3, [pc, #8]	@ (800eb48 <malloc+0xc>)
 800eb3e:	4601      	mov	r1, r0
 800eb40:	6818      	ldr	r0, [r3, #0]
 800eb42:	f000 b82d 	b.w	800eba0 <_malloc_r>
 800eb46:	bf00      	nop
 800eb48:	240001d0 	.word	0x240001d0

0800eb4c <free>:
 800eb4c:	4b02      	ldr	r3, [pc, #8]	@ (800eb58 <free+0xc>)
 800eb4e:	4601      	mov	r1, r0
 800eb50:	6818      	ldr	r0, [r3, #0]
 800eb52:	f000 baf5 	b.w	800f140 <_free_r>
 800eb56:	bf00      	nop
 800eb58:	240001d0 	.word	0x240001d0

0800eb5c <sbrk_aligned>:
 800eb5c:	b570      	push	{r4, r5, r6, lr}
 800eb5e:	4e0f      	ldr	r6, [pc, #60]	@ (800eb9c <sbrk_aligned+0x40>)
 800eb60:	460c      	mov	r4, r1
 800eb62:	6831      	ldr	r1, [r6, #0]
 800eb64:	4605      	mov	r5, r0
 800eb66:	b911      	cbnz	r1, 800eb6e <sbrk_aligned+0x12>
 800eb68:	f000 fa3e 	bl	800efe8 <_sbrk_r>
 800eb6c:	6030      	str	r0, [r6, #0]
 800eb6e:	4621      	mov	r1, r4
 800eb70:	4628      	mov	r0, r5
 800eb72:	f000 fa39 	bl	800efe8 <_sbrk_r>
 800eb76:	1c43      	adds	r3, r0, #1
 800eb78:	d103      	bne.n	800eb82 <sbrk_aligned+0x26>
 800eb7a:	f04f 34ff 	mov.w	r4, #4294967295
 800eb7e:	4620      	mov	r0, r4
 800eb80:	bd70      	pop	{r4, r5, r6, pc}
 800eb82:	1cc4      	adds	r4, r0, #3
 800eb84:	f024 0403 	bic.w	r4, r4, #3
 800eb88:	42a0      	cmp	r0, r4
 800eb8a:	d0f8      	beq.n	800eb7e <sbrk_aligned+0x22>
 800eb8c:	1a21      	subs	r1, r4, r0
 800eb8e:	4628      	mov	r0, r5
 800eb90:	f000 fa2a 	bl	800efe8 <_sbrk_r>
 800eb94:	3001      	adds	r0, #1
 800eb96:	d1f2      	bne.n	800eb7e <sbrk_aligned+0x22>
 800eb98:	e7ef      	b.n	800eb7a <sbrk_aligned+0x1e>
 800eb9a:	bf00      	nop
 800eb9c:	24000754 	.word	0x24000754

0800eba0 <_malloc_r>:
 800eba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eba4:	1ccd      	adds	r5, r1, #3
 800eba6:	f025 0503 	bic.w	r5, r5, #3
 800ebaa:	3508      	adds	r5, #8
 800ebac:	2d0c      	cmp	r5, #12
 800ebae:	bf38      	it	cc
 800ebb0:	250c      	movcc	r5, #12
 800ebb2:	2d00      	cmp	r5, #0
 800ebb4:	4606      	mov	r6, r0
 800ebb6:	db01      	blt.n	800ebbc <_malloc_r+0x1c>
 800ebb8:	42a9      	cmp	r1, r5
 800ebba:	d904      	bls.n	800ebc6 <_malloc_r+0x26>
 800ebbc:	230c      	movs	r3, #12
 800ebbe:	6033      	str	r3, [r6, #0]
 800ebc0:	2000      	movs	r0, #0
 800ebc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ec9c <_malloc_r+0xfc>
 800ebca:	f000 f869 	bl	800eca0 <__malloc_lock>
 800ebce:	f8d8 3000 	ldr.w	r3, [r8]
 800ebd2:	461c      	mov	r4, r3
 800ebd4:	bb44      	cbnz	r4, 800ec28 <_malloc_r+0x88>
 800ebd6:	4629      	mov	r1, r5
 800ebd8:	4630      	mov	r0, r6
 800ebda:	f7ff ffbf 	bl	800eb5c <sbrk_aligned>
 800ebde:	1c43      	adds	r3, r0, #1
 800ebe0:	4604      	mov	r4, r0
 800ebe2:	d158      	bne.n	800ec96 <_malloc_r+0xf6>
 800ebe4:	f8d8 4000 	ldr.w	r4, [r8]
 800ebe8:	4627      	mov	r7, r4
 800ebea:	2f00      	cmp	r7, #0
 800ebec:	d143      	bne.n	800ec76 <_malloc_r+0xd6>
 800ebee:	2c00      	cmp	r4, #0
 800ebf0:	d04b      	beq.n	800ec8a <_malloc_r+0xea>
 800ebf2:	6823      	ldr	r3, [r4, #0]
 800ebf4:	4639      	mov	r1, r7
 800ebf6:	4630      	mov	r0, r6
 800ebf8:	eb04 0903 	add.w	r9, r4, r3
 800ebfc:	f000 f9f4 	bl	800efe8 <_sbrk_r>
 800ec00:	4581      	cmp	r9, r0
 800ec02:	d142      	bne.n	800ec8a <_malloc_r+0xea>
 800ec04:	6821      	ldr	r1, [r4, #0]
 800ec06:	1a6d      	subs	r5, r5, r1
 800ec08:	4629      	mov	r1, r5
 800ec0a:	4630      	mov	r0, r6
 800ec0c:	f7ff ffa6 	bl	800eb5c <sbrk_aligned>
 800ec10:	3001      	adds	r0, #1
 800ec12:	d03a      	beq.n	800ec8a <_malloc_r+0xea>
 800ec14:	6823      	ldr	r3, [r4, #0]
 800ec16:	442b      	add	r3, r5
 800ec18:	6023      	str	r3, [r4, #0]
 800ec1a:	f8d8 3000 	ldr.w	r3, [r8]
 800ec1e:	685a      	ldr	r2, [r3, #4]
 800ec20:	bb62      	cbnz	r2, 800ec7c <_malloc_r+0xdc>
 800ec22:	f8c8 7000 	str.w	r7, [r8]
 800ec26:	e00f      	b.n	800ec48 <_malloc_r+0xa8>
 800ec28:	6822      	ldr	r2, [r4, #0]
 800ec2a:	1b52      	subs	r2, r2, r5
 800ec2c:	d420      	bmi.n	800ec70 <_malloc_r+0xd0>
 800ec2e:	2a0b      	cmp	r2, #11
 800ec30:	d917      	bls.n	800ec62 <_malloc_r+0xc2>
 800ec32:	1961      	adds	r1, r4, r5
 800ec34:	42a3      	cmp	r3, r4
 800ec36:	6025      	str	r5, [r4, #0]
 800ec38:	bf18      	it	ne
 800ec3a:	6059      	strne	r1, [r3, #4]
 800ec3c:	6863      	ldr	r3, [r4, #4]
 800ec3e:	bf08      	it	eq
 800ec40:	f8c8 1000 	streq.w	r1, [r8]
 800ec44:	5162      	str	r2, [r4, r5]
 800ec46:	604b      	str	r3, [r1, #4]
 800ec48:	4630      	mov	r0, r6
 800ec4a:	f000 f82f 	bl	800ecac <__malloc_unlock>
 800ec4e:	f104 000b 	add.w	r0, r4, #11
 800ec52:	1d23      	adds	r3, r4, #4
 800ec54:	f020 0007 	bic.w	r0, r0, #7
 800ec58:	1ac2      	subs	r2, r0, r3
 800ec5a:	bf1c      	itt	ne
 800ec5c:	1a1b      	subne	r3, r3, r0
 800ec5e:	50a3      	strne	r3, [r4, r2]
 800ec60:	e7af      	b.n	800ebc2 <_malloc_r+0x22>
 800ec62:	6862      	ldr	r2, [r4, #4]
 800ec64:	42a3      	cmp	r3, r4
 800ec66:	bf0c      	ite	eq
 800ec68:	f8c8 2000 	streq.w	r2, [r8]
 800ec6c:	605a      	strne	r2, [r3, #4]
 800ec6e:	e7eb      	b.n	800ec48 <_malloc_r+0xa8>
 800ec70:	4623      	mov	r3, r4
 800ec72:	6864      	ldr	r4, [r4, #4]
 800ec74:	e7ae      	b.n	800ebd4 <_malloc_r+0x34>
 800ec76:	463c      	mov	r4, r7
 800ec78:	687f      	ldr	r7, [r7, #4]
 800ec7a:	e7b6      	b.n	800ebea <_malloc_r+0x4a>
 800ec7c:	461a      	mov	r2, r3
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	42a3      	cmp	r3, r4
 800ec82:	d1fb      	bne.n	800ec7c <_malloc_r+0xdc>
 800ec84:	2300      	movs	r3, #0
 800ec86:	6053      	str	r3, [r2, #4]
 800ec88:	e7de      	b.n	800ec48 <_malloc_r+0xa8>
 800ec8a:	230c      	movs	r3, #12
 800ec8c:	6033      	str	r3, [r6, #0]
 800ec8e:	4630      	mov	r0, r6
 800ec90:	f000 f80c 	bl	800ecac <__malloc_unlock>
 800ec94:	e794      	b.n	800ebc0 <_malloc_r+0x20>
 800ec96:	6005      	str	r5, [r0, #0]
 800ec98:	e7d6      	b.n	800ec48 <_malloc_r+0xa8>
 800ec9a:	bf00      	nop
 800ec9c:	24000758 	.word	0x24000758

0800eca0 <__malloc_lock>:
 800eca0:	4801      	ldr	r0, [pc, #4]	@ (800eca8 <__malloc_lock+0x8>)
 800eca2:	f000 b9ee 	b.w	800f082 <__retarget_lock_acquire_recursive>
 800eca6:	bf00      	nop
 800eca8:	2400089c 	.word	0x2400089c

0800ecac <__malloc_unlock>:
 800ecac:	4801      	ldr	r0, [pc, #4]	@ (800ecb4 <__malloc_unlock+0x8>)
 800ecae:	f000 b9e9 	b.w	800f084 <__retarget_lock_release_recursive>
 800ecb2:	bf00      	nop
 800ecb4:	2400089c 	.word	0x2400089c

0800ecb8 <std>:
 800ecb8:	2300      	movs	r3, #0
 800ecba:	b510      	push	{r4, lr}
 800ecbc:	4604      	mov	r4, r0
 800ecbe:	e9c0 3300 	strd	r3, r3, [r0]
 800ecc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ecc6:	6083      	str	r3, [r0, #8]
 800ecc8:	8181      	strh	r1, [r0, #12]
 800ecca:	6643      	str	r3, [r0, #100]	@ 0x64
 800eccc:	81c2      	strh	r2, [r0, #14]
 800ecce:	6183      	str	r3, [r0, #24]
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	2208      	movs	r2, #8
 800ecd4:	305c      	adds	r0, #92	@ 0x5c
 800ecd6:	f000 f906 	bl	800eee6 <memset>
 800ecda:	4b0d      	ldr	r3, [pc, #52]	@ (800ed10 <std+0x58>)
 800ecdc:	6263      	str	r3, [r4, #36]	@ 0x24
 800ecde:	4b0d      	ldr	r3, [pc, #52]	@ (800ed14 <std+0x5c>)
 800ece0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ece2:	4b0d      	ldr	r3, [pc, #52]	@ (800ed18 <std+0x60>)
 800ece4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ece6:	4b0d      	ldr	r3, [pc, #52]	@ (800ed1c <std+0x64>)
 800ece8:	6323      	str	r3, [r4, #48]	@ 0x30
 800ecea:	4b0d      	ldr	r3, [pc, #52]	@ (800ed20 <std+0x68>)
 800ecec:	6224      	str	r4, [r4, #32]
 800ecee:	429c      	cmp	r4, r3
 800ecf0:	d006      	beq.n	800ed00 <std+0x48>
 800ecf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ecf6:	4294      	cmp	r4, r2
 800ecf8:	d002      	beq.n	800ed00 <std+0x48>
 800ecfa:	33d0      	adds	r3, #208	@ 0xd0
 800ecfc:	429c      	cmp	r4, r3
 800ecfe:	d105      	bne.n	800ed0c <std+0x54>
 800ed00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ed04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed08:	f000 b9ba 	b.w	800f080 <__retarget_lock_init_recursive>
 800ed0c:	bd10      	pop	{r4, pc}
 800ed0e:	bf00      	nop
 800ed10:	0800ee61 	.word	0x0800ee61
 800ed14:	0800ee83 	.word	0x0800ee83
 800ed18:	0800eebb 	.word	0x0800eebb
 800ed1c:	0800eedf 	.word	0x0800eedf
 800ed20:	2400075c 	.word	0x2400075c

0800ed24 <stdio_exit_handler>:
 800ed24:	4a02      	ldr	r2, [pc, #8]	@ (800ed30 <stdio_exit_handler+0xc>)
 800ed26:	4903      	ldr	r1, [pc, #12]	@ (800ed34 <stdio_exit_handler+0x10>)
 800ed28:	4803      	ldr	r0, [pc, #12]	@ (800ed38 <stdio_exit_handler+0x14>)
 800ed2a:	f000 b87b 	b.w	800ee24 <_fwalk_sglue>
 800ed2e:	bf00      	nop
 800ed30:	240001c4 	.word	0x240001c4
 800ed34:	0800f879 	.word	0x0800f879
 800ed38:	240001d4 	.word	0x240001d4

0800ed3c <cleanup_stdio>:
 800ed3c:	6841      	ldr	r1, [r0, #4]
 800ed3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ed70 <cleanup_stdio+0x34>)
 800ed40:	4299      	cmp	r1, r3
 800ed42:	b510      	push	{r4, lr}
 800ed44:	4604      	mov	r4, r0
 800ed46:	d001      	beq.n	800ed4c <cleanup_stdio+0x10>
 800ed48:	f000 fd96 	bl	800f878 <_fflush_r>
 800ed4c:	68a1      	ldr	r1, [r4, #8]
 800ed4e:	4b09      	ldr	r3, [pc, #36]	@ (800ed74 <cleanup_stdio+0x38>)
 800ed50:	4299      	cmp	r1, r3
 800ed52:	d002      	beq.n	800ed5a <cleanup_stdio+0x1e>
 800ed54:	4620      	mov	r0, r4
 800ed56:	f000 fd8f 	bl	800f878 <_fflush_r>
 800ed5a:	68e1      	ldr	r1, [r4, #12]
 800ed5c:	4b06      	ldr	r3, [pc, #24]	@ (800ed78 <cleanup_stdio+0x3c>)
 800ed5e:	4299      	cmp	r1, r3
 800ed60:	d004      	beq.n	800ed6c <cleanup_stdio+0x30>
 800ed62:	4620      	mov	r0, r4
 800ed64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed68:	f000 bd86 	b.w	800f878 <_fflush_r>
 800ed6c:	bd10      	pop	{r4, pc}
 800ed6e:	bf00      	nop
 800ed70:	2400075c 	.word	0x2400075c
 800ed74:	240007c4 	.word	0x240007c4
 800ed78:	2400082c 	.word	0x2400082c

0800ed7c <global_stdio_init.part.0>:
 800ed7c:	b510      	push	{r4, lr}
 800ed7e:	4b0b      	ldr	r3, [pc, #44]	@ (800edac <global_stdio_init.part.0+0x30>)
 800ed80:	4c0b      	ldr	r4, [pc, #44]	@ (800edb0 <global_stdio_init.part.0+0x34>)
 800ed82:	4a0c      	ldr	r2, [pc, #48]	@ (800edb4 <global_stdio_init.part.0+0x38>)
 800ed84:	601a      	str	r2, [r3, #0]
 800ed86:	4620      	mov	r0, r4
 800ed88:	2200      	movs	r2, #0
 800ed8a:	2104      	movs	r1, #4
 800ed8c:	f7ff ff94 	bl	800ecb8 <std>
 800ed90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ed94:	2201      	movs	r2, #1
 800ed96:	2109      	movs	r1, #9
 800ed98:	f7ff ff8e 	bl	800ecb8 <std>
 800ed9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eda0:	2202      	movs	r2, #2
 800eda2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eda6:	2112      	movs	r1, #18
 800eda8:	f7ff bf86 	b.w	800ecb8 <std>
 800edac:	24000894 	.word	0x24000894
 800edb0:	2400075c 	.word	0x2400075c
 800edb4:	0800ed25 	.word	0x0800ed25

0800edb8 <__sfp_lock_acquire>:
 800edb8:	4801      	ldr	r0, [pc, #4]	@ (800edc0 <__sfp_lock_acquire+0x8>)
 800edba:	f000 b962 	b.w	800f082 <__retarget_lock_acquire_recursive>
 800edbe:	bf00      	nop
 800edc0:	2400089e 	.word	0x2400089e

0800edc4 <__sfp_lock_release>:
 800edc4:	4801      	ldr	r0, [pc, #4]	@ (800edcc <__sfp_lock_release+0x8>)
 800edc6:	f000 b95d 	b.w	800f084 <__retarget_lock_release_recursive>
 800edca:	bf00      	nop
 800edcc:	2400089e 	.word	0x2400089e

0800edd0 <__sinit>:
 800edd0:	b510      	push	{r4, lr}
 800edd2:	4604      	mov	r4, r0
 800edd4:	f7ff fff0 	bl	800edb8 <__sfp_lock_acquire>
 800edd8:	6a23      	ldr	r3, [r4, #32]
 800edda:	b11b      	cbz	r3, 800ede4 <__sinit+0x14>
 800eddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ede0:	f7ff bff0 	b.w	800edc4 <__sfp_lock_release>
 800ede4:	4b04      	ldr	r3, [pc, #16]	@ (800edf8 <__sinit+0x28>)
 800ede6:	6223      	str	r3, [r4, #32]
 800ede8:	4b04      	ldr	r3, [pc, #16]	@ (800edfc <__sinit+0x2c>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d1f5      	bne.n	800eddc <__sinit+0xc>
 800edf0:	f7ff ffc4 	bl	800ed7c <global_stdio_init.part.0>
 800edf4:	e7f2      	b.n	800eddc <__sinit+0xc>
 800edf6:	bf00      	nop
 800edf8:	0800ed3d 	.word	0x0800ed3d
 800edfc:	24000894 	.word	0x24000894

0800ee00 <fiprintf>:
 800ee00:	b40e      	push	{r1, r2, r3}
 800ee02:	b503      	push	{r0, r1, lr}
 800ee04:	4601      	mov	r1, r0
 800ee06:	ab03      	add	r3, sp, #12
 800ee08:	4805      	ldr	r0, [pc, #20]	@ (800ee20 <fiprintf+0x20>)
 800ee0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee0e:	6800      	ldr	r0, [r0, #0]
 800ee10:	9301      	str	r3, [sp, #4]
 800ee12:	f000 fa09 	bl	800f228 <_vfiprintf_r>
 800ee16:	b002      	add	sp, #8
 800ee18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee1c:	b003      	add	sp, #12
 800ee1e:	4770      	bx	lr
 800ee20:	240001d0 	.word	0x240001d0

0800ee24 <_fwalk_sglue>:
 800ee24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee28:	4607      	mov	r7, r0
 800ee2a:	4688      	mov	r8, r1
 800ee2c:	4614      	mov	r4, r2
 800ee2e:	2600      	movs	r6, #0
 800ee30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee34:	f1b9 0901 	subs.w	r9, r9, #1
 800ee38:	d505      	bpl.n	800ee46 <_fwalk_sglue+0x22>
 800ee3a:	6824      	ldr	r4, [r4, #0]
 800ee3c:	2c00      	cmp	r4, #0
 800ee3e:	d1f7      	bne.n	800ee30 <_fwalk_sglue+0xc>
 800ee40:	4630      	mov	r0, r6
 800ee42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee46:	89ab      	ldrh	r3, [r5, #12]
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d907      	bls.n	800ee5c <_fwalk_sglue+0x38>
 800ee4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee50:	3301      	adds	r3, #1
 800ee52:	d003      	beq.n	800ee5c <_fwalk_sglue+0x38>
 800ee54:	4629      	mov	r1, r5
 800ee56:	4638      	mov	r0, r7
 800ee58:	47c0      	blx	r8
 800ee5a:	4306      	orrs	r6, r0
 800ee5c:	3568      	adds	r5, #104	@ 0x68
 800ee5e:	e7e9      	b.n	800ee34 <_fwalk_sglue+0x10>

0800ee60 <__sread>:
 800ee60:	b510      	push	{r4, lr}
 800ee62:	460c      	mov	r4, r1
 800ee64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee68:	f000 f898 	bl	800ef9c <_read_r>
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	bfab      	itete	ge
 800ee70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ee72:	89a3      	ldrhlt	r3, [r4, #12]
 800ee74:	181b      	addge	r3, r3, r0
 800ee76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ee7a:	bfac      	ite	ge
 800ee7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ee7e:	81a3      	strhlt	r3, [r4, #12]
 800ee80:	bd10      	pop	{r4, pc}

0800ee82 <__swrite>:
 800ee82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee86:	461f      	mov	r7, r3
 800ee88:	898b      	ldrh	r3, [r1, #12]
 800ee8a:	05db      	lsls	r3, r3, #23
 800ee8c:	4605      	mov	r5, r0
 800ee8e:	460c      	mov	r4, r1
 800ee90:	4616      	mov	r6, r2
 800ee92:	d505      	bpl.n	800eea0 <__swrite+0x1e>
 800ee94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee98:	2302      	movs	r3, #2
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f000 f86c 	bl	800ef78 <_lseek_r>
 800eea0:	89a3      	ldrh	r3, [r4, #12]
 800eea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eea6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eeaa:	81a3      	strh	r3, [r4, #12]
 800eeac:	4632      	mov	r2, r6
 800eeae:	463b      	mov	r3, r7
 800eeb0:	4628      	mov	r0, r5
 800eeb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eeb6:	f000 b8a7 	b.w	800f008 <_write_r>

0800eeba <__sseek>:
 800eeba:	b510      	push	{r4, lr}
 800eebc:	460c      	mov	r4, r1
 800eebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eec2:	f000 f859 	bl	800ef78 <_lseek_r>
 800eec6:	1c43      	adds	r3, r0, #1
 800eec8:	89a3      	ldrh	r3, [r4, #12]
 800eeca:	bf15      	itete	ne
 800eecc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eece:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eed2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eed6:	81a3      	strheq	r3, [r4, #12]
 800eed8:	bf18      	it	ne
 800eeda:	81a3      	strhne	r3, [r4, #12]
 800eedc:	bd10      	pop	{r4, pc}

0800eede <__sclose>:
 800eede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eee2:	f000 b839 	b.w	800ef58 <_close_r>

0800eee6 <memset>:
 800eee6:	4402      	add	r2, r0
 800eee8:	4603      	mov	r3, r0
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d100      	bne.n	800eef0 <memset+0xa>
 800eeee:	4770      	bx	lr
 800eef0:	f803 1b01 	strb.w	r1, [r3], #1
 800eef4:	e7f9      	b.n	800eeea <memset+0x4>

0800eef6 <_raise_r>:
 800eef6:	291f      	cmp	r1, #31
 800eef8:	b538      	push	{r3, r4, r5, lr}
 800eefa:	4605      	mov	r5, r0
 800eefc:	460c      	mov	r4, r1
 800eefe:	d904      	bls.n	800ef0a <_raise_r+0x14>
 800ef00:	2316      	movs	r3, #22
 800ef02:	6003      	str	r3, [r0, #0]
 800ef04:	f04f 30ff 	mov.w	r0, #4294967295
 800ef08:	bd38      	pop	{r3, r4, r5, pc}
 800ef0a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ef0c:	b112      	cbz	r2, 800ef14 <_raise_r+0x1e>
 800ef0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef12:	b94b      	cbnz	r3, 800ef28 <_raise_r+0x32>
 800ef14:	4628      	mov	r0, r5
 800ef16:	f000 f865 	bl	800efe4 <_getpid_r>
 800ef1a:	4622      	mov	r2, r4
 800ef1c:	4601      	mov	r1, r0
 800ef1e:	4628      	mov	r0, r5
 800ef20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef24:	f000 b84c 	b.w	800efc0 <_kill_r>
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	d00a      	beq.n	800ef42 <_raise_r+0x4c>
 800ef2c:	1c59      	adds	r1, r3, #1
 800ef2e:	d103      	bne.n	800ef38 <_raise_r+0x42>
 800ef30:	2316      	movs	r3, #22
 800ef32:	6003      	str	r3, [r0, #0]
 800ef34:	2001      	movs	r0, #1
 800ef36:	e7e7      	b.n	800ef08 <_raise_r+0x12>
 800ef38:	2100      	movs	r1, #0
 800ef3a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ef3e:	4620      	mov	r0, r4
 800ef40:	4798      	blx	r3
 800ef42:	2000      	movs	r0, #0
 800ef44:	e7e0      	b.n	800ef08 <_raise_r+0x12>
	...

0800ef48 <raise>:
 800ef48:	4b02      	ldr	r3, [pc, #8]	@ (800ef54 <raise+0xc>)
 800ef4a:	4601      	mov	r1, r0
 800ef4c:	6818      	ldr	r0, [r3, #0]
 800ef4e:	f7ff bfd2 	b.w	800eef6 <_raise_r>
 800ef52:	bf00      	nop
 800ef54:	240001d0 	.word	0x240001d0

0800ef58 <_close_r>:
 800ef58:	b538      	push	{r3, r4, r5, lr}
 800ef5a:	4d06      	ldr	r5, [pc, #24]	@ (800ef74 <_close_r+0x1c>)
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	4604      	mov	r4, r0
 800ef60:	4608      	mov	r0, r1
 800ef62:	602b      	str	r3, [r5, #0]
 800ef64:	f7f3 fa98 	bl	8002498 <_close>
 800ef68:	1c43      	adds	r3, r0, #1
 800ef6a:	d102      	bne.n	800ef72 <_close_r+0x1a>
 800ef6c:	682b      	ldr	r3, [r5, #0]
 800ef6e:	b103      	cbz	r3, 800ef72 <_close_r+0x1a>
 800ef70:	6023      	str	r3, [r4, #0]
 800ef72:	bd38      	pop	{r3, r4, r5, pc}
 800ef74:	24000898 	.word	0x24000898

0800ef78 <_lseek_r>:
 800ef78:	b538      	push	{r3, r4, r5, lr}
 800ef7a:	4d07      	ldr	r5, [pc, #28]	@ (800ef98 <_lseek_r+0x20>)
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	4608      	mov	r0, r1
 800ef80:	4611      	mov	r1, r2
 800ef82:	2200      	movs	r2, #0
 800ef84:	602a      	str	r2, [r5, #0]
 800ef86:	461a      	mov	r2, r3
 800ef88:	f7f3 faad 	bl	80024e6 <_lseek>
 800ef8c:	1c43      	adds	r3, r0, #1
 800ef8e:	d102      	bne.n	800ef96 <_lseek_r+0x1e>
 800ef90:	682b      	ldr	r3, [r5, #0]
 800ef92:	b103      	cbz	r3, 800ef96 <_lseek_r+0x1e>
 800ef94:	6023      	str	r3, [r4, #0]
 800ef96:	bd38      	pop	{r3, r4, r5, pc}
 800ef98:	24000898 	.word	0x24000898

0800ef9c <_read_r>:
 800ef9c:	b538      	push	{r3, r4, r5, lr}
 800ef9e:	4d07      	ldr	r5, [pc, #28]	@ (800efbc <_read_r+0x20>)
 800efa0:	4604      	mov	r4, r0
 800efa2:	4608      	mov	r0, r1
 800efa4:	4611      	mov	r1, r2
 800efa6:	2200      	movs	r2, #0
 800efa8:	602a      	str	r2, [r5, #0]
 800efaa:	461a      	mov	r2, r3
 800efac:	f7f3 fa3b 	bl	8002426 <_read>
 800efb0:	1c43      	adds	r3, r0, #1
 800efb2:	d102      	bne.n	800efba <_read_r+0x1e>
 800efb4:	682b      	ldr	r3, [r5, #0]
 800efb6:	b103      	cbz	r3, 800efba <_read_r+0x1e>
 800efb8:	6023      	str	r3, [r4, #0]
 800efba:	bd38      	pop	{r3, r4, r5, pc}
 800efbc:	24000898 	.word	0x24000898

0800efc0 <_kill_r>:
 800efc0:	b538      	push	{r3, r4, r5, lr}
 800efc2:	4d07      	ldr	r5, [pc, #28]	@ (800efe0 <_kill_r+0x20>)
 800efc4:	2300      	movs	r3, #0
 800efc6:	4604      	mov	r4, r0
 800efc8:	4608      	mov	r0, r1
 800efca:	4611      	mov	r1, r2
 800efcc:	602b      	str	r3, [r5, #0]
 800efce:	f7f3 fa0f 	bl	80023f0 <_kill>
 800efd2:	1c43      	adds	r3, r0, #1
 800efd4:	d102      	bne.n	800efdc <_kill_r+0x1c>
 800efd6:	682b      	ldr	r3, [r5, #0]
 800efd8:	b103      	cbz	r3, 800efdc <_kill_r+0x1c>
 800efda:	6023      	str	r3, [r4, #0]
 800efdc:	bd38      	pop	{r3, r4, r5, pc}
 800efde:	bf00      	nop
 800efe0:	24000898 	.word	0x24000898

0800efe4 <_getpid_r>:
 800efe4:	f7f3 b9fc 	b.w	80023e0 <_getpid>

0800efe8 <_sbrk_r>:
 800efe8:	b538      	push	{r3, r4, r5, lr}
 800efea:	4d06      	ldr	r5, [pc, #24]	@ (800f004 <_sbrk_r+0x1c>)
 800efec:	2300      	movs	r3, #0
 800efee:	4604      	mov	r4, r0
 800eff0:	4608      	mov	r0, r1
 800eff2:	602b      	str	r3, [r5, #0]
 800eff4:	f7f3 fa84 	bl	8002500 <_sbrk>
 800eff8:	1c43      	adds	r3, r0, #1
 800effa:	d102      	bne.n	800f002 <_sbrk_r+0x1a>
 800effc:	682b      	ldr	r3, [r5, #0]
 800effe:	b103      	cbz	r3, 800f002 <_sbrk_r+0x1a>
 800f000:	6023      	str	r3, [r4, #0]
 800f002:	bd38      	pop	{r3, r4, r5, pc}
 800f004:	24000898 	.word	0x24000898

0800f008 <_write_r>:
 800f008:	b538      	push	{r3, r4, r5, lr}
 800f00a:	4d07      	ldr	r5, [pc, #28]	@ (800f028 <_write_r+0x20>)
 800f00c:	4604      	mov	r4, r0
 800f00e:	4608      	mov	r0, r1
 800f010:	4611      	mov	r1, r2
 800f012:	2200      	movs	r2, #0
 800f014:	602a      	str	r2, [r5, #0]
 800f016:	461a      	mov	r2, r3
 800f018:	f7f3 fa22 	bl	8002460 <_write>
 800f01c:	1c43      	adds	r3, r0, #1
 800f01e:	d102      	bne.n	800f026 <_write_r+0x1e>
 800f020:	682b      	ldr	r3, [r5, #0]
 800f022:	b103      	cbz	r3, 800f026 <_write_r+0x1e>
 800f024:	6023      	str	r3, [r4, #0]
 800f026:	bd38      	pop	{r3, r4, r5, pc}
 800f028:	24000898 	.word	0x24000898

0800f02c <__errno>:
 800f02c:	4b01      	ldr	r3, [pc, #4]	@ (800f034 <__errno+0x8>)
 800f02e:	6818      	ldr	r0, [r3, #0]
 800f030:	4770      	bx	lr
 800f032:	bf00      	nop
 800f034:	240001d0 	.word	0x240001d0

0800f038 <__libc_init_array>:
 800f038:	b570      	push	{r4, r5, r6, lr}
 800f03a:	4d0d      	ldr	r5, [pc, #52]	@ (800f070 <__libc_init_array+0x38>)
 800f03c:	4c0d      	ldr	r4, [pc, #52]	@ (800f074 <__libc_init_array+0x3c>)
 800f03e:	1b64      	subs	r4, r4, r5
 800f040:	10a4      	asrs	r4, r4, #2
 800f042:	2600      	movs	r6, #0
 800f044:	42a6      	cmp	r6, r4
 800f046:	d109      	bne.n	800f05c <__libc_init_array+0x24>
 800f048:	4d0b      	ldr	r5, [pc, #44]	@ (800f078 <__libc_init_array+0x40>)
 800f04a:	4c0c      	ldr	r4, [pc, #48]	@ (800f07c <__libc_init_array+0x44>)
 800f04c:	f000 fd54 	bl	800faf8 <_init>
 800f050:	1b64      	subs	r4, r4, r5
 800f052:	10a4      	asrs	r4, r4, #2
 800f054:	2600      	movs	r6, #0
 800f056:	42a6      	cmp	r6, r4
 800f058:	d105      	bne.n	800f066 <__libc_init_array+0x2e>
 800f05a:	bd70      	pop	{r4, r5, r6, pc}
 800f05c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f060:	4798      	blx	r3
 800f062:	3601      	adds	r6, #1
 800f064:	e7ee      	b.n	800f044 <__libc_init_array+0xc>
 800f066:	f855 3b04 	ldr.w	r3, [r5], #4
 800f06a:	4798      	blx	r3
 800f06c:	3601      	adds	r6, #1
 800f06e:	e7f2      	b.n	800f056 <__libc_init_array+0x1e>
 800f070:	08011260 	.word	0x08011260
 800f074:	08011260 	.word	0x08011260
 800f078:	08011260 	.word	0x08011260
 800f07c:	08011270 	.word	0x08011270

0800f080 <__retarget_lock_init_recursive>:
 800f080:	4770      	bx	lr

0800f082 <__retarget_lock_acquire_recursive>:
 800f082:	4770      	bx	lr

0800f084 <__retarget_lock_release_recursive>:
 800f084:	4770      	bx	lr
	...

0800f088 <__register_exitproc>:
 800f088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f08c:	4d27      	ldr	r5, [pc, #156]	@ (800f12c <__register_exitproc+0xa4>)
 800f08e:	4607      	mov	r7, r0
 800f090:	6828      	ldr	r0, [r5, #0]
 800f092:	4691      	mov	r9, r2
 800f094:	460e      	mov	r6, r1
 800f096:	4698      	mov	r8, r3
 800f098:	f7ff fff3 	bl	800f082 <__retarget_lock_acquire_recursive>
 800f09c:	4a24      	ldr	r2, [pc, #144]	@ (800f130 <__register_exitproc+0xa8>)
 800f09e:	6814      	ldr	r4, [r2, #0]
 800f0a0:	b93c      	cbnz	r4, 800f0b2 <__register_exitproc+0x2a>
 800f0a2:	4b24      	ldr	r3, [pc, #144]	@ (800f134 <__register_exitproc+0xac>)
 800f0a4:	6013      	str	r3, [r2, #0]
 800f0a6:	4a24      	ldr	r2, [pc, #144]	@ (800f138 <__register_exitproc+0xb0>)
 800f0a8:	b112      	cbz	r2, 800f0b0 <__register_exitproc+0x28>
 800f0aa:	6812      	ldr	r2, [r2, #0]
 800f0ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800f0b0:	4c20      	ldr	r4, [pc, #128]	@ (800f134 <__register_exitproc+0xac>)
 800f0b2:	6863      	ldr	r3, [r4, #4]
 800f0b4:	2b1f      	cmp	r3, #31
 800f0b6:	dd06      	ble.n	800f0c6 <__register_exitproc+0x3e>
 800f0b8:	6828      	ldr	r0, [r5, #0]
 800f0ba:	f7ff ffe3 	bl	800f084 <__retarget_lock_release_recursive>
 800f0be:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0c6:	b32f      	cbz	r7, 800f114 <__register_exitproc+0x8c>
 800f0c8:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800f0cc:	b968      	cbnz	r0, 800f0ea <__register_exitproc+0x62>
 800f0ce:	4b1b      	ldr	r3, [pc, #108]	@ (800f13c <__register_exitproc+0xb4>)
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d0f1      	beq.n	800f0b8 <__register_exitproc+0x30>
 800f0d4:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800f0d8:	f7ff fd30 	bl	800eb3c <malloc>
 800f0dc:	2800      	cmp	r0, #0
 800f0de:	d0eb      	beq.n	800f0b8 <__register_exitproc+0x30>
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 800f0e6:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 800f0ea:	6863      	ldr	r3, [r4, #4]
 800f0ec:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800f0f0:	2201      	movs	r2, #1
 800f0f2:	409a      	lsls	r2, r3
 800f0f4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800f0f8:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 800f0fc:	4313      	orrs	r3, r2
 800f0fe:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 800f102:	2f02      	cmp	r7, #2
 800f104:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 800f108:	bf02      	ittt	eq
 800f10a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 800f10e:	4313      	orreq	r3, r2
 800f110:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 800f114:	6863      	ldr	r3, [r4, #4]
 800f116:	6828      	ldr	r0, [r5, #0]
 800f118:	1c5a      	adds	r2, r3, #1
 800f11a:	3302      	adds	r3, #2
 800f11c:	6062      	str	r2, [r4, #4]
 800f11e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800f122:	f7ff ffaf 	bl	800f084 <__retarget_lock_release_recursive>
 800f126:	2000      	movs	r0, #0
 800f128:	e7cb      	b.n	800f0c2 <__register_exitproc+0x3a>
 800f12a:	bf00      	nop
 800f12c:	24000220 	.word	0x24000220
 800f130:	2400092c 	.word	0x2400092c
 800f134:	240008a0 	.word	0x240008a0
 800f138:	0800ff68 	.word	0x0800ff68
 800f13c:	0800eb3d 	.word	0x0800eb3d

0800f140 <_free_r>:
 800f140:	b538      	push	{r3, r4, r5, lr}
 800f142:	4605      	mov	r5, r0
 800f144:	2900      	cmp	r1, #0
 800f146:	d041      	beq.n	800f1cc <_free_r+0x8c>
 800f148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f14c:	1f0c      	subs	r4, r1, #4
 800f14e:	2b00      	cmp	r3, #0
 800f150:	bfb8      	it	lt
 800f152:	18e4      	addlt	r4, r4, r3
 800f154:	f7ff fda4 	bl	800eca0 <__malloc_lock>
 800f158:	4a1d      	ldr	r2, [pc, #116]	@ (800f1d0 <_free_r+0x90>)
 800f15a:	6813      	ldr	r3, [r2, #0]
 800f15c:	b933      	cbnz	r3, 800f16c <_free_r+0x2c>
 800f15e:	6063      	str	r3, [r4, #4]
 800f160:	6014      	str	r4, [r2, #0]
 800f162:	4628      	mov	r0, r5
 800f164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f168:	f7ff bda0 	b.w	800ecac <__malloc_unlock>
 800f16c:	42a3      	cmp	r3, r4
 800f16e:	d908      	bls.n	800f182 <_free_r+0x42>
 800f170:	6820      	ldr	r0, [r4, #0]
 800f172:	1821      	adds	r1, r4, r0
 800f174:	428b      	cmp	r3, r1
 800f176:	bf01      	itttt	eq
 800f178:	6819      	ldreq	r1, [r3, #0]
 800f17a:	685b      	ldreq	r3, [r3, #4]
 800f17c:	1809      	addeq	r1, r1, r0
 800f17e:	6021      	streq	r1, [r4, #0]
 800f180:	e7ed      	b.n	800f15e <_free_r+0x1e>
 800f182:	461a      	mov	r2, r3
 800f184:	685b      	ldr	r3, [r3, #4]
 800f186:	b10b      	cbz	r3, 800f18c <_free_r+0x4c>
 800f188:	42a3      	cmp	r3, r4
 800f18a:	d9fa      	bls.n	800f182 <_free_r+0x42>
 800f18c:	6811      	ldr	r1, [r2, #0]
 800f18e:	1850      	adds	r0, r2, r1
 800f190:	42a0      	cmp	r0, r4
 800f192:	d10b      	bne.n	800f1ac <_free_r+0x6c>
 800f194:	6820      	ldr	r0, [r4, #0]
 800f196:	4401      	add	r1, r0
 800f198:	1850      	adds	r0, r2, r1
 800f19a:	4283      	cmp	r3, r0
 800f19c:	6011      	str	r1, [r2, #0]
 800f19e:	d1e0      	bne.n	800f162 <_free_r+0x22>
 800f1a0:	6818      	ldr	r0, [r3, #0]
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	6053      	str	r3, [r2, #4]
 800f1a6:	4408      	add	r0, r1
 800f1a8:	6010      	str	r0, [r2, #0]
 800f1aa:	e7da      	b.n	800f162 <_free_r+0x22>
 800f1ac:	d902      	bls.n	800f1b4 <_free_r+0x74>
 800f1ae:	230c      	movs	r3, #12
 800f1b0:	602b      	str	r3, [r5, #0]
 800f1b2:	e7d6      	b.n	800f162 <_free_r+0x22>
 800f1b4:	6820      	ldr	r0, [r4, #0]
 800f1b6:	1821      	adds	r1, r4, r0
 800f1b8:	428b      	cmp	r3, r1
 800f1ba:	bf04      	itt	eq
 800f1bc:	6819      	ldreq	r1, [r3, #0]
 800f1be:	685b      	ldreq	r3, [r3, #4]
 800f1c0:	6063      	str	r3, [r4, #4]
 800f1c2:	bf04      	itt	eq
 800f1c4:	1809      	addeq	r1, r1, r0
 800f1c6:	6021      	streq	r1, [r4, #0]
 800f1c8:	6054      	str	r4, [r2, #4]
 800f1ca:	e7ca      	b.n	800f162 <_free_r+0x22>
 800f1cc:	bd38      	pop	{r3, r4, r5, pc}
 800f1ce:	bf00      	nop
 800f1d0:	24000758 	.word	0x24000758

0800f1d4 <__sfputc_r>:
 800f1d4:	6893      	ldr	r3, [r2, #8]
 800f1d6:	3b01      	subs	r3, #1
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	b410      	push	{r4}
 800f1dc:	6093      	str	r3, [r2, #8]
 800f1de:	da08      	bge.n	800f1f2 <__sfputc_r+0x1e>
 800f1e0:	6994      	ldr	r4, [r2, #24]
 800f1e2:	42a3      	cmp	r3, r4
 800f1e4:	db01      	blt.n	800f1ea <__sfputc_r+0x16>
 800f1e6:	290a      	cmp	r1, #10
 800f1e8:	d103      	bne.n	800f1f2 <__sfputc_r+0x1e>
 800f1ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1ee:	f000 bb6b 	b.w	800f8c8 <__swbuf_r>
 800f1f2:	6813      	ldr	r3, [r2, #0]
 800f1f4:	1c58      	adds	r0, r3, #1
 800f1f6:	6010      	str	r0, [r2, #0]
 800f1f8:	7019      	strb	r1, [r3, #0]
 800f1fa:	4608      	mov	r0, r1
 800f1fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f200:	4770      	bx	lr

0800f202 <__sfputs_r>:
 800f202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f204:	4606      	mov	r6, r0
 800f206:	460f      	mov	r7, r1
 800f208:	4614      	mov	r4, r2
 800f20a:	18d5      	adds	r5, r2, r3
 800f20c:	42ac      	cmp	r4, r5
 800f20e:	d101      	bne.n	800f214 <__sfputs_r+0x12>
 800f210:	2000      	movs	r0, #0
 800f212:	e007      	b.n	800f224 <__sfputs_r+0x22>
 800f214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f218:	463a      	mov	r2, r7
 800f21a:	4630      	mov	r0, r6
 800f21c:	f7ff ffda 	bl	800f1d4 <__sfputc_r>
 800f220:	1c43      	adds	r3, r0, #1
 800f222:	d1f3      	bne.n	800f20c <__sfputs_r+0xa>
 800f224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f228 <_vfiprintf_r>:
 800f228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f22c:	460d      	mov	r5, r1
 800f22e:	b09d      	sub	sp, #116	@ 0x74
 800f230:	4614      	mov	r4, r2
 800f232:	4698      	mov	r8, r3
 800f234:	4606      	mov	r6, r0
 800f236:	b118      	cbz	r0, 800f240 <_vfiprintf_r+0x18>
 800f238:	6a03      	ldr	r3, [r0, #32]
 800f23a:	b90b      	cbnz	r3, 800f240 <_vfiprintf_r+0x18>
 800f23c:	f7ff fdc8 	bl	800edd0 <__sinit>
 800f240:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f242:	07d9      	lsls	r1, r3, #31
 800f244:	d405      	bmi.n	800f252 <_vfiprintf_r+0x2a>
 800f246:	89ab      	ldrh	r3, [r5, #12]
 800f248:	059a      	lsls	r2, r3, #22
 800f24a:	d402      	bmi.n	800f252 <_vfiprintf_r+0x2a>
 800f24c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f24e:	f7ff ff18 	bl	800f082 <__retarget_lock_acquire_recursive>
 800f252:	89ab      	ldrh	r3, [r5, #12]
 800f254:	071b      	lsls	r3, r3, #28
 800f256:	d501      	bpl.n	800f25c <_vfiprintf_r+0x34>
 800f258:	692b      	ldr	r3, [r5, #16]
 800f25a:	b99b      	cbnz	r3, 800f284 <_vfiprintf_r+0x5c>
 800f25c:	4629      	mov	r1, r5
 800f25e:	4630      	mov	r0, r6
 800f260:	f000 fb70 	bl	800f944 <__swsetup_r>
 800f264:	b170      	cbz	r0, 800f284 <_vfiprintf_r+0x5c>
 800f266:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f268:	07dc      	lsls	r4, r3, #31
 800f26a:	d504      	bpl.n	800f276 <_vfiprintf_r+0x4e>
 800f26c:	f04f 30ff 	mov.w	r0, #4294967295
 800f270:	b01d      	add	sp, #116	@ 0x74
 800f272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f276:	89ab      	ldrh	r3, [r5, #12]
 800f278:	0598      	lsls	r0, r3, #22
 800f27a:	d4f7      	bmi.n	800f26c <_vfiprintf_r+0x44>
 800f27c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f27e:	f7ff ff01 	bl	800f084 <__retarget_lock_release_recursive>
 800f282:	e7f3      	b.n	800f26c <_vfiprintf_r+0x44>
 800f284:	2300      	movs	r3, #0
 800f286:	9309      	str	r3, [sp, #36]	@ 0x24
 800f288:	2320      	movs	r3, #32
 800f28a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f28e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f292:	2330      	movs	r3, #48	@ 0x30
 800f294:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f444 <_vfiprintf_r+0x21c>
 800f298:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f29c:	f04f 0901 	mov.w	r9, #1
 800f2a0:	4623      	mov	r3, r4
 800f2a2:	469a      	mov	sl, r3
 800f2a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2a8:	b10a      	cbz	r2, 800f2ae <_vfiprintf_r+0x86>
 800f2aa:	2a25      	cmp	r2, #37	@ 0x25
 800f2ac:	d1f9      	bne.n	800f2a2 <_vfiprintf_r+0x7a>
 800f2ae:	ebba 0b04 	subs.w	fp, sl, r4
 800f2b2:	d00b      	beq.n	800f2cc <_vfiprintf_r+0xa4>
 800f2b4:	465b      	mov	r3, fp
 800f2b6:	4622      	mov	r2, r4
 800f2b8:	4629      	mov	r1, r5
 800f2ba:	4630      	mov	r0, r6
 800f2bc:	f7ff ffa1 	bl	800f202 <__sfputs_r>
 800f2c0:	3001      	adds	r0, #1
 800f2c2:	f000 80a7 	beq.w	800f414 <_vfiprintf_r+0x1ec>
 800f2c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2c8:	445a      	add	r2, fp
 800f2ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800f2cc:	f89a 3000 	ldrb.w	r3, [sl]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	f000 809f 	beq.w	800f414 <_vfiprintf_r+0x1ec>
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800f2dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2e0:	f10a 0a01 	add.w	sl, sl, #1
 800f2e4:	9304      	str	r3, [sp, #16]
 800f2e6:	9307      	str	r3, [sp, #28]
 800f2e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f2ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800f2ee:	4654      	mov	r4, sl
 800f2f0:	2205      	movs	r2, #5
 800f2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2f6:	4853      	ldr	r0, [pc, #332]	@ (800f444 <_vfiprintf_r+0x21c>)
 800f2f8:	f7f1 f80a 	bl	8000310 <memchr>
 800f2fc:	9a04      	ldr	r2, [sp, #16]
 800f2fe:	b9d8      	cbnz	r0, 800f338 <_vfiprintf_r+0x110>
 800f300:	06d1      	lsls	r1, r2, #27
 800f302:	bf44      	itt	mi
 800f304:	2320      	movmi	r3, #32
 800f306:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f30a:	0713      	lsls	r3, r2, #28
 800f30c:	bf44      	itt	mi
 800f30e:	232b      	movmi	r3, #43	@ 0x2b
 800f310:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f314:	f89a 3000 	ldrb.w	r3, [sl]
 800f318:	2b2a      	cmp	r3, #42	@ 0x2a
 800f31a:	d015      	beq.n	800f348 <_vfiprintf_r+0x120>
 800f31c:	9a07      	ldr	r2, [sp, #28]
 800f31e:	4654      	mov	r4, sl
 800f320:	2000      	movs	r0, #0
 800f322:	f04f 0c0a 	mov.w	ip, #10
 800f326:	4621      	mov	r1, r4
 800f328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f32c:	3b30      	subs	r3, #48	@ 0x30
 800f32e:	2b09      	cmp	r3, #9
 800f330:	d94b      	bls.n	800f3ca <_vfiprintf_r+0x1a2>
 800f332:	b1b0      	cbz	r0, 800f362 <_vfiprintf_r+0x13a>
 800f334:	9207      	str	r2, [sp, #28]
 800f336:	e014      	b.n	800f362 <_vfiprintf_r+0x13a>
 800f338:	eba0 0308 	sub.w	r3, r0, r8
 800f33c:	fa09 f303 	lsl.w	r3, r9, r3
 800f340:	4313      	orrs	r3, r2
 800f342:	9304      	str	r3, [sp, #16]
 800f344:	46a2      	mov	sl, r4
 800f346:	e7d2      	b.n	800f2ee <_vfiprintf_r+0xc6>
 800f348:	9b03      	ldr	r3, [sp, #12]
 800f34a:	1d19      	adds	r1, r3, #4
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	9103      	str	r1, [sp, #12]
 800f350:	2b00      	cmp	r3, #0
 800f352:	bfbb      	ittet	lt
 800f354:	425b      	neglt	r3, r3
 800f356:	f042 0202 	orrlt.w	r2, r2, #2
 800f35a:	9307      	strge	r3, [sp, #28]
 800f35c:	9307      	strlt	r3, [sp, #28]
 800f35e:	bfb8      	it	lt
 800f360:	9204      	strlt	r2, [sp, #16]
 800f362:	7823      	ldrb	r3, [r4, #0]
 800f364:	2b2e      	cmp	r3, #46	@ 0x2e
 800f366:	d10a      	bne.n	800f37e <_vfiprintf_r+0x156>
 800f368:	7863      	ldrb	r3, [r4, #1]
 800f36a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f36c:	d132      	bne.n	800f3d4 <_vfiprintf_r+0x1ac>
 800f36e:	9b03      	ldr	r3, [sp, #12]
 800f370:	1d1a      	adds	r2, r3, #4
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	9203      	str	r2, [sp, #12]
 800f376:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f37a:	3402      	adds	r4, #2
 800f37c:	9305      	str	r3, [sp, #20]
 800f37e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f454 <_vfiprintf_r+0x22c>
 800f382:	7821      	ldrb	r1, [r4, #0]
 800f384:	2203      	movs	r2, #3
 800f386:	4650      	mov	r0, sl
 800f388:	f7f0 ffc2 	bl	8000310 <memchr>
 800f38c:	b138      	cbz	r0, 800f39e <_vfiprintf_r+0x176>
 800f38e:	9b04      	ldr	r3, [sp, #16]
 800f390:	eba0 000a 	sub.w	r0, r0, sl
 800f394:	2240      	movs	r2, #64	@ 0x40
 800f396:	4082      	lsls	r2, r0
 800f398:	4313      	orrs	r3, r2
 800f39a:	3401      	adds	r4, #1
 800f39c:	9304      	str	r3, [sp, #16]
 800f39e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3a2:	4829      	ldr	r0, [pc, #164]	@ (800f448 <_vfiprintf_r+0x220>)
 800f3a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f3a8:	2206      	movs	r2, #6
 800f3aa:	f7f0 ffb1 	bl	8000310 <memchr>
 800f3ae:	2800      	cmp	r0, #0
 800f3b0:	d03f      	beq.n	800f432 <_vfiprintf_r+0x20a>
 800f3b2:	4b26      	ldr	r3, [pc, #152]	@ (800f44c <_vfiprintf_r+0x224>)
 800f3b4:	bb1b      	cbnz	r3, 800f3fe <_vfiprintf_r+0x1d6>
 800f3b6:	9b03      	ldr	r3, [sp, #12]
 800f3b8:	3307      	adds	r3, #7
 800f3ba:	f023 0307 	bic.w	r3, r3, #7
 800f3be:	3308      	adds	r3, #8
 800f3c0:	9303      	str	r3, [sp, #12]
 800f3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3c4:	443b      	add	r3, r7
 800f3c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f3c8:	e76a      	b.n	800f2a0 <_vfiprintf_r+0x78>
 800f3ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3ce:	460c      	mov	r4, r1
 800f3d0:	2001      	movs	r0, #1
 800f3d2:	e7a8      	b.n	800f326 <_vfiprintf_r+0xfe>
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	3401      	adds	r4, #1
 800f3d8:	9305      	str	r3, [sp, #20]
 800f3da:	4619      	mov	r1, r3
 800f3dc:	f04f 0c0a 	mov.w	ip, #10
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3e6:	3a30      	subs	r2, #48	@ 0x30
 800f3e8:	2a09      	cmp	r2, #9
 800f3ea:	d903      	bls.n	800f3f4 <_vfiprintf_r+0x1cc>
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d0c6      	beq.n	800f37e <_vfiprintf_r+0x156>
 800f3f0:	9105      	str	r1, [sp, #20]
 800f3f2:	e7c4      	b.n	800f37e <_vfiprintf_r+0x156>
 800f3f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3f8:	4604      	mov	r4, r0
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	e7f0      	b.n	800f3e0 <_vfiprintf_r+0x1b8>
 800f3fe:	ab03      	add	r3, sp, #12
 800f400:	9300      	str	r3, [sp, #0]
 800f402:	462a      	mov	r2, r5
 800f404:	4b12      	ldr	r3, [pc, #72]	@ (800f450 <_vfiprintf_r+0x228>)
 800f406:	a904      	add	r1, sp, #16
 800f408:	4630      	mov	r0, r6
 800f40a:	f3af 8000 	nop.w
 800f40e:	4607      	mov	r7, r0
 800f410:	1c78      	adds	r0, r7, #1
 800f412:	d1d6      	bne.n	800f3c2 <_vfiprintf_r+0x19a>
 800f414:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f416:	07d9      	lsls	r1, r3, #31
 800f418:	d405      	bmi.n	800f426 <_vfiprintf_r+0x1fe>
 800f41a:	89ab      	ldrh	r3, [r5, #12]
 800f41c:	059a      	lsls	r2, r3, #22
 800f41e:	d402      	bmi.n	800f426 <_vfiprintf_r+0x1fe>
 800f420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f422:	f7ff fe2f 	bl	800f084 <__retarget_lock_release_recursive>
 800f426:	89ab      	ldrh	r3, [r5, #12]
 800f428:	065b      	lsls	r3, r3, #25
 800f42a:	f53f af1f 	bmi.w	800f26c <_vfiprintf_r+0x44>
 800f42e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f430:	e71e      	b.n	800f270 <_vfiprintf_r+0x48>
 800f432:	ab03      	add	r3, sp, #12
 800f434:	9300      	str	r3, [sp, #0]
 800f436:	462a      	mov	r2, r5
 800f438:	4b05      	ldr	r3, [pc, #20]	@ (800f450 <_vfiprintf_r+0x228>)
 800f43a:	a904      	add	r1, sp, #16
 800f43c:	4630      	mov	r0, r6
 800f43e:	f000 f879 	bl	800f534 <_printf_i>
 800f442:	e7e4      	b.n	800f40e <_vfiprintf_r+0x1e6>
 800f444:	0800ff34 	.word	0x0800ff34
 800f448:	0800ff3e 	.word	0x0800ff3e
 800f44c:	00000000 	.word	0x00000000
 800f450:	0800f203 	.word	0x0800f203
 800f454:	0800ff3a 	.word	0x0800ff3a

0800f458 <_printf_common>:
 800f458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f45c:	4616      	mov	r6, r2
 800f45e:	4698      	mov	r8, r3
 800f460:	688a      	ldr	r2, [r1, #8]
 800f462:	690b      	ldr	r3, [r1, #16]
 800f464:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f468:	4293      	cmp	r3, r2
 800f46a:	bfb8      	it	lt
 800f46c:	4613      	movlt	r3, r2
 800f46e:	6033      	str	r3, [r6, #0]
 800f470:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f474:	4607      	mov	r7, r0
 800f476:	460c      	mov	r4, r1
 800f478:	b10a      	cbz	r2, 800f47e <_printf_common+0x26>
 800f47a:	3301      	adds	r3, #1
 800f47c:	6033      	str	r3, [r6, #0]
 800f47e:	6823      	ldr	r3, [r4, #0]
 800f480:	0699      	lsls	r1, r3, #26
 800f482:	bf42      	ittt	mi
 800f484:	6833      	ldrmi	r3, [r6, #0]
 800f486:	3302      	addmi	r3, #2
 800f488:	6033      	strmi	r3, [r6, #0]
 800f48a:	6825      	ldr	r5, [r4, #0]
 800f48c:	f015 0506 	ands.w	r5, r5, #6
 800f490:	d106      	bne.n	800f4a0 <_printf_common+0x48>
 800f492:	f104 0a19 	add.w	sl, r4, #25
 800f496:	68e3      	ldr	r3, [r4, #12]
 800f498:	6832      	ldr	r2, [r6, #0]
 800f49a:	1a9b      	subs	r3, r3, r2
 800f49c:	42ab      	cmp	r3, r5
 800f49e:	dc26      	bgt.n	800f4ee <_printf_common+0x96>
 800f4a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f4a4:	6822      	ldr	r2, [r4, #0]
 800f4a6:	3b00      	subs	r3, #0
 800f4a8:	bf18      	it	ne
 800f4aa:	2301      	movne	r3, #1
 800f4ac:	0692      	lsls	r2, r2, #26
 800f4ae:	d42b      	bmi.n	800f508 <_printf_common+0xb0>
 800f4b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f4b4:	4641      	mov	r1, r8
 800f4b6:	4638      	mov	r0, r7
 800f4b8:	47c8      	blx	r9
 800f4ba:	3001      	adds	r0, #1
 800f4bc:	d01e      	beq.n	800f4fc <_printf_common+0xa4>
 800f4be:	6823      	ldr	r3, [r4, #0]
 800f4c0:	6922      	ldr	r2, [r4, #16]
 800f4c2:	f003 0306 	and.w	r3, r3, #6
 800f4c6:	2b04      	cmp	r3, #4
 800f4c8:	bf02      	ittt	eq
 800f4ca:	68e5      	ldreq	r5, [r4, #12]
 800f4cc:	6833      	ldreq	r3, [r6, #0]
 800f4ce:	1aed      	subeq	r5, r5, r3
 800f4d0:	68a3      	ldr	r3, [r4, #8]
 800f4d2:	bf0c      	ite	eq
 800f4d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f4d8:	2500      	movne	r5, #0
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	bfc4      	itt	gt
 800f4de:	1a9b      	subgt	r3, r3, r2
 800f4e0:	18ed      	addgt	r5, r5, r3
 800f4e2:	2600      	movs	r6, #0
 800f4e4:	341a      	adds	r4, #26
 800f4e6:	42b5      	cmp	r5, r6
 800f4e8:	d11a      	bne.n	800f520 <_printf_common+0xc8>
 800f4ea:	2000      	movs	r0, #0
 800f4ec:	e008      	b.n	800f500 <_printf_common+0xa8>
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	4652      	mov	r2, sl
 800f4f2:	4641      	mov	r1, r8
 800f4f4:	4638      	mov	r0, r7
 800f4f6:	47c8      	blx	r9
 800f4f8:	3001      	adds	r0, #1
 800f4fa:	d103      	bne.n	800f504 <_printf_common+0xac>
 800f4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f504:	3501      	adds	r5, #1
 800f506:	e7c6      	b.n	800f496 <_printf_common+0x3e>
 800f508:	18e1      	adds	r1, r4, r3
 800f50a:	1c5a      	adds	r2, r3, #1
 800f50c:	2030      	movs	r0, #48	@ 0x30
 800f50e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f512:	4422      	add	r2, r4
 800f514:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f518:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f51c:	3302      	adds	r3, #2
 800f51e:	e7c7      	b.n	800f4b0 <_printf_common+0x58>
 800f520:	2301      	movs	r3, #1
 800f522:	4622      	mov	r2, r4
 800f524:	4641      	mov	r1, r8
 800f526:	4638      	mov	r0, r7
 800f528:	47c8      	blx	r9
 800f52a:	3001      	adds	r0, #1
 800f52c:	d0e6      	beq.n	800f4fc <_printf_common+0xa4>
 800f52e:	3601      	adds	r6, #1
 800f530:	e7d9      	b.n	800f4e6 <_printf_common+0x8e>
	...

0800f534 <_printf_i>:
 800f534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f538:	7e0f      	ldrb	r7, [r1, #24]
 800f53a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f53c:	2f78      	cmp	r7, #120	@ 0x78
 800f53e:	4691      	mov	r9, r2
 800f540:	4680      	mov	r8, r0
 800f542:	460c      	mov	r4, r1
 800f544:	469a      	mov	sl, r3
 800f546:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f54a:	d807      	bhi.n	800f55c <_printf_i+0x28>
 800f54c:	2f62      	cmp	r7, #98	@ 0x62
 800f54e:	d80a      	bhi.n	800f566 <_printf_i+0x32>
 800f550:	2f00      	cmp	r7, #0
 800f552:	f000 80d1 	beq.w	800f6f8 <_printf_i+0x1c4>
 800f556:	2f58      	cmp	r7, #88	@ 0x58
 800f558:	f000 80b8 	beq.w	800f6cc <_printf_i+0x198>
 800f55c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f560:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f564:	e03a      	b.n	800f5dc <_printf_i+0xa8>
 800f566:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f56a:	2b15      	cmp	r3, #21
 800f56c:	d8f6      	bhi.n	800f55c <_printf_i+0x28>
 800f56e:	a101      	add	r1, pc, #4	@ (adr r1, 800f574 <_printf_i+0x40>)
 800f570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f574:	0800f5cd 	.word	0x0800f5cd
 800f578:	0800f5e1 	.word	0x0800f5e1
 800f57c:	0800f55d 	.word	0x0800f55d
 800f580:	0800f55d 	.word	0x0800f55d
 800f584:	0800f55d 	.word	0x0800f55d
 800f588:	0800f55d 	.word	0x0800f55d
 800f58c:	0800f5e1 	.word	0x0800f5e1
 800f590:	0800f55d 	.word	0x0800f55d
 800f594:	0800f55d 	.word	0x0800f55d
 800f598:	0800f55d 	.word	0x0800f55d
 800f59c:	0800f55d 	.word	0x0800f55d
 800f5a0:	0800f6df 	.word	0x0800f6df
 800f5a4:	0800f60b 	.word	0x0800f60b
 800f5a8:	0800f699 	.word	0x0800f699
 800f5ac:	0800f55d 	.word	0x0800f55d
 800f5b0:	0800f55d 	.word	0x0800f55d
 800f5b4:	0800f701 	.word	0x0800f701
 800f5b8:	0800f55d 	.word	0x0800f55d
 800f5bc:	0800f60b 	.word	0x0800f60b
 800f5c0:	0800f55d 	.word	0x0800f55d
 800f5c4:	0800f55d 	.word	0x0800f55d
 800f5c8:	0800f6a1 	.word	0x0800f6a1
 800f5cc:	6833      	ldr	r3, [r6, #0]
 800f5ce:	1d1a      	adds	r2, r3, #4
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	6032      	str	r2, [r6, #0]
 800f5d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f5d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f5dc:	2301      	movs	r3, #1
 800f5de:	e09c      	b.n	800f71a <_printf_i+0x1e6>
 800f5e0:	6833      	ldr	r3, [r6, #0]
 800f5e2:	6820      	ldr	r0, [r4, #0]
 800f5e4:	1d19      	adds	r1, r3, #4
 800f5e6:	6031      	str	r1, [r6, #0]
 800f5e8:	0606      	lsls	r6, r0, #24
 800f5ea:	d501      	bpl.n	800f5f0 <_printf_i+0xbc>
 800f5ec:	681d      	ldr	r5, [r3, #0]
 800f5ee:	e003      	b.n	800f5f8 <_printf_i+0xc4>
 800f5f0:	0645      	lsls	r5, r0, #25
 800f5f2:	d5fb      	bpl.n	800f5ec <_printf_i+0xb8>
 800f5f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f5f8:	2d00      	cmp	r5, #0
 800f5fa:	da03      	bge.n	800f604 <_printf_i+0xd0>
 800f5fc:	232d      	movs	r3, #45	@ 0x2d
 800f5fe:	426d      	negs	r5, r5
 800f600:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f604:	4858      	ldr	r0, [pc, #352]	@ (800f768 <_printf_i+0x234>)
 800f606:	230a      	movs	r3, #10
 800f608:	e011      	b.n	800f62e <_printf_i+0xfa>
 800f60a:	6821      	ldr	r1, [r4, #0]
 800f60c:	6833      	ldr	r3, [r6, #0]
 800f60e:	0608      	lsls	r0, r1, #24
 800f610:	f853 5b04 	ldr.w	r5, [r3], #4
 800f614:	d402      	bmi.n	800f61c <_printf_i+0xe8>
 800f616:	0649      	lsls	r1, r1, #25
 800f618:	bf48      	it	mi
 800f61a:	b2ad      	uxthmi	r5, r5
 800f61c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f61e:	4852      	ldr	r0, [pc, #328]	@ (800f768 <_printf_i+0x234>)
 800f620:	6033      	str	r3, [r6, #0]
 800f622:	bf14      	ite	ne
 800f624:	230a      	movne	r3, #10
 800f626:	2308      	moveq	r3, #8
 800f628:	2100      	movs	r1, #0
 800f62a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f62e:	6866      	ldr	r6, [r4, #4]
 800f630:	60a6      	str	r6, [r4, #8]
 800f632:	2e00      	cmp	r6, #0
 800f634:	db05      	blt.n	800f642 <_printf_i+0x10e>
 800f636:	6821      	ldr	r1, [r4, #0]
 800f638:	432e      	orrs	r6, r5
 800f63a:	f021 0104 	bic.w	r1, r1, #4
 800f63e:	6021      	str	r1, [r4, #0]
 800f640:	d04b      	beq.n	800f6da <_printf_i+0x1a6>
 800f642:	4616      	mov	r6, r2
 800f644:	fbb5 f1f3 	udiv	r1, r5, r3
 800f648:	fb03 5711 	mls	r7, r3, r1, r5
 800f64c:	5dc7      	ldrb	r7, [r0, r7]
 800f64e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f652:	462f      	mov	r7, r5
 800f654:	42bb      	cmp	r3, r7
 800f656:	460d      	mov	r5, r1
 800f658:	d9f4      	bls.n	800f644 <_printf_i+0x110>
 800f65a:	2b08      	cmp	r3, #8
 800f65c:	d10b      	bne.n	800f676 <_printf_i+0x142>
 800f65e:	6823      	ldr	r3, [r4, #0]
 800f660:	07df      	lsls	r7, r3, #31
 800f662:	d508      	bpl.n	800f676 <_printf_i+0x142>
 800f664:	6923      	ldr	r3, [r4, #16]
 800f666:	6861      	ldr	r1, [r4, #4]
 800f668:	4299      	cmp	r1, r3
 800f66a:	bfde      	ittt	le
 800f66c:	2330      	movle	r3, #48	@ 0x30
 800f66e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f672:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f676:	1b92      	subs	r2, r2, r6
 800f678:	6122      	str	r2, [r4, #16]
 800f67a:	f8cd a000 	str.w	sl, [sp]
 800f67e:	464b      	mov	r3, r9
 800f680:	aa03      	add	r2, sp, #12
 800f682:	4621      	mov	r1, r4
 800f684:	4640      	mov	r0, r8
 800f686:	f7ff fee7 	bl	800f458 <_printf_common>
 800f68a:	3001      	adds	r0, #1
 800f68c:	d14a      	bne.n	800f724 <_printf_i+0x1f0>
 800f68e:	f04f 30ff 	mov.w	r0, #4294967295
 800f692:	b004      	add	sp, #16
 800f694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f698:	6823      	ldr	r3, [r4, #0]
 800f69a:	f043 0320 	orr.w	r3, r3, #32
 800f69e:	6023      	str	r3, [r4, #0]
 800f6a0:	4832      	ldr	r0, [pc, #200]	@ (800f76c <_printf_i+0x238>)
 800f6a2:	2778      	movs	r7, #120	@ 0x78
 800f6a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f6a8:	6823      	ldr	r3, [r4, #0]
 800f6aa:	6831      	ldr	r1, [r6, #0]
 800f6ac:	061f      	lsls	r7, r3, #24
 800f6ae:	f851 5b04 	ldr.w	r5, [r1], #4
 800f6b2:	d402      	bmi.n	800f6ba <_printf_i+0x186>
 800f6b4:	065f      	lsls	r7, r3, #25
 800f6b6:	bf48      	it	mi
 800f6b8:	b2ad      	uxthmi	r5, r5
 800f6ba:	6031      	str	r1, [r6, #0]
 800f6bc:	07d9      	lsls	r1, r3, #31
 800f6be:	bf44      	itt	mi
 800f6c0:	f043 0320 	orrmi.w	r3, r3, #32
 800f6c4:	6023      	strmi	r3, [r4, #0]
 800f6c6:	b11d      	cbz	r5, 800f6d0 <_printf_i+0x19c>
 800f6c8:	2310      	movs	r3, #16
 800f6ca:	e7ad      	b.n	800f628 <_printf_i+0xf4>
 800f6cc:	4826      	ldr	r0, [pc, #152]	@ (800f768 <_printf_i+0x234>)
 800f6ce:	e7e9      	b.n	800f6a4 <_printf_i+0x170>
 800f6d0:	6823      	ldr	r3, [r4, #0]
 800f6d2:	f023 0320 	bic.w	r3, r3, #32
 800f6d6:	6023      	str	r3, [r4, #0]
 800f6d8:	e7f6      	b.n	800f6c8 <_printf_i+0x194>
 800f6da:	4616      	mov	r6, r2
 800f6dc:	e7bd      	b.n	800f65a <_printf_i+0x126>
 800f6de:	6833      	ldr	r3, [r6, #0]
 800f6e0:	6825      	ldr	r5, [r4, #0]
 800f6e2:	6961      	ldr	r1, [r4, #20]
 800f6e4:	1d18      	adds	r0, r3, #4
 800f6e6:	6030      	str	r0, [r6, #0]
 800f6e8:	062e      	lsls	r6, r5, #24
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	d501      	bpl.n	800f6f2 <_printf_i+0x1be>
 800f6ee:	6019      	str	r1, [r3, #0]
 800f6f0:	e002      	b.n	800f6f8 <_printf_i+0x1c4>
 800f6f2:	0668      	lsls	r0, r5, #25
 800f6f4:	d5fb      	bpl.n	800f6ee <_printf_i+0x1ba>
 800f6f6:	8019      	strh	r1, [r3, #0]
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	6123      	str	r3, [r4, #16]
 800f6fc:	4616      	mov	r6, r2
 800f6fe:	e7bc      	b.n	800f67a <_printf_i+0x146>
 800f700:	6833      	ldr	r3, [r6, #0]
 800f702:	1d1a      	adds	r2, r3, #4
 800f704:	6032      	str	r2, [r6, #0]
 800f706:	681e      	ldr	r6, [r3, #0]
 800f708:	6862      	ldr	r2, [r4, #4]
 800f70a:	2100      	movs	r1, #0
 800f70c:	4630      	mov	r0, r6
 800f70e:	f7f0 fdff 	bl	8000310 <memchr>
 800f712:	b108      	cbz	r0, 800f718 <_printf_i+0x1e4>
 800f714:	1b80      	subs	r0, r0, r6
 800f716:	6060      	str	r0, [r4, #4]
 800f718:	6863      	ldr	r3, [r4, #4]
 800f71a:	6123      	str	r3, [r4, #16]
 800f71c:	2300      	movs	r3, #0
 800f71e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f722:	e7aa      	b.n	800f67a <_printf_i+0x146>
 800f724:	6923      	ldr	r3, [r4, #16]
 800f726:	4632      	mov	r2, r6
 800f728:	4649      	mov	r1, r9
 800f72a:	4640      	mov	r0, r8
 800f72c:	47d0      	blx	sl
 800f72e:	3001      	adds	r0, #1
 800f730:	d0ad      	beq.n	800f68e <_printf_i+0x15a>
 800f732:	6823      	ldr	r3, [r4, #0]
 800f734:	079b      	lsls	r3, r3, #30
 800f736:	d413      	bmi.n	800f760 <_printf_i+0x22c>
 800f738:	68e0      	ldr	r0, [r4, #12]
 800f73a:	9b03      	ldr	r3, [sp, #12]
 800f73c:	4298      	cmp	r0, r3
 800f73e:	bfb8      	it	lt
 800f740:	4618      	movlt	r0, r3
 800f742:	e7a6      	b.n	800f692 <_printf_i+0x15e>
 800f744:	2301      	movs	r3, #1
 800f746:	4632      	mov	r2, r6
 800f748:	4649      	mov	r1, r9
 800f74a:	4640      	mov	r0, r8
 800f74c:	47d0      	blx	sl
 800f74e:	3001      	adds	r0, #1
 800f750:	d09d      	beq.n	800f68e <_printf_i+0x15a>
 800f752:	3501      	adds	r5, #1
 800f754:	68e3      	ldr	r3, [r4, #12]
 800f756:	9903      	ldr	r1, [sp, #12]
 800f758:	1a5b      	subs	r3, r3, r1
 800f75a:	42ab      	cmp	r3, r5
 800f75c:	dcf2      	bgt.n	800f744 <_printf_i+0x210>
 800f75e:	e7eb      	b.n	800f738 <_printf_i+0x204>
 800f760:	2500      	movs	r5, #0
 800f762:	f104 0619 	add.w	r6, r4, #25
 800f766:	e7f5      	b.n	800f754 <_printf_i+0x220>
 800f768:	0800ff45 	.word	0x0800ff45
 800f76c:	0800ff56 	.word	0x0800ff56

0800f770 <__sflush_r>:
 800f770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f778:	0716      	lsls	r6, r2, #28
 800f77a:	4605      	mov	r5, r0
 800f77c:	460c      	mov	r4, r1
 800f77e:	d454      	bmi.n	800f82a <__sflush_r+0xba>
 800f780:	684b      	ldr	r3, [r1, #4]
 800f782:	2b00      	cmp	r3, #0
 800f784:	dc02      	bgt.n	800f78c <__sflush_r+0x1c>
 800f786:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f788:	2b00      	cmp	r3, #0
 800f78a:	dd48      	ble.n	800f81e <__sflush_r+0xae>
 800f78c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f78e:	2e00      	cmp	r6, #0
 800f790:	d045      	beq.n	800f81e <__sflush_r+0xae>
 800f792:	2300      	movs	r3, #0
 800f794:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f798:	682f      	ldr	r7, [r5, #0]
 800f79a:	6a21      	ldr	r1, [r4, #32]
 800f79c:	602b      	str	r3, [r5, #0]
 800f79e:	d030      	beq.n	800f802 <__sflush_r+0x92>
 800f7a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f7a2:	89a3      	ldrh	r3, [r4, #12]
 800f7a4:	0759      	lsls	r1, r3, #29
 800f7a6:	d505      	bpl.n	800f7b4 <__sflush_r+0x44>
 800f7a8:	6863      	ldr	r3, [r4, #4]
 800f7aa:	1ad2      	subs	r2, r2, r3
 800f7ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f7ae:	b10b      	cbz	r3, 800f7b4 <__sflush_r+0x44>
 800f7b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f7b2:	1ad2      	subs	r2, r2, r3
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f7b8:	6a21      	ldr	r1, [r4, #32]
 800f7ba:	4628      	mov	r0, r5
 800f7bc:	47b0      	blx	r6
 800f7be:	1c43      	adds	r3, r0, #1
 800f7c0:	89a3      	ldrh	r3, [r4, #12]
 800f7c2:	d106      	bne.n	800f7d2 <__sflush_r+0x62>
 800f7c4:	6829      	ldr	r1, [r5, #0]
 800f7c6:	291d      	cmp	r1, #29
 800f7c8:	d82b      	bhi.n	800f822 <__sflush_r+0xb2>
 800f7ca:	4a2a      	ldr	r2, [pc, #168]	@ (800f874 <__sflush_r+0x104>)
 800f7cc:	40ca      	lsrs	r2, r1
 800f7ce:	07d6      	lsls	r6, r2, #31
 800f7d0:	d527      	bpl.n	800f822 <__sflush_r+0xb2>
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	6062      	str	r2, [r4, #4]
 800f7d6:	04d9      	lsls	r1, r3, #19
 800f7d8:	6922      	ldr	r2, [r4, #16]
 800f7da:	6022      	str	r2, [r4, #0]
 800f7dc:	d504      	bpl.n	800f7e8 <__sflush_r+0x78>
 800f7de:	1c42      	adds	r2, r0, #1
 800f7e0:	d101      	bne.n	800f7e6 <__sflush_r+0x76>
 800f7e2:	682b      	ldr	r3, [r5, #0]
 800f7e4:	b903      	cbnz	r3, 800f7e8 <__sflush_r+0x78>
 800f7e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f7e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f7ea:	602f      	str	r7, [r5, #0]
 800f7ec:	b1b9      	cbz	r1, 800f81e <__sflush_r+0xae>
 800f7ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f7f2:	4299      	cmp	r1, r3
 800f7f4:	d002      	beq.n	800f7fc <__sflush_r+0x8c>
 800f7f6:	4628      	mov	r0, r5
 800f7f8:	f7ff fca2 	bl	800f140 <_free_r>
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800f800:	e00d      	b.n	800f81e <__sflush_r+0xae>
 800f802:	2301      	movs	r3, #1
 800f804:	4628      	mov	r0, r5
 800f806:	47b0      	blx	r6
 800f808:	4602      	mov	r2, r0
 800f80a:	1c50      	adds	r0, r2, #1
 800f80c:	d1c9      	bne.n	800f7a2 <__sflush_r+0x32>
 800f80e:	682b      	ldr	r3, [r5, #0]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d0c6      	beq.n	800f7a2 <__sflush_r+0x32>
 800f814:	2b1d      	cmp	r3, #29
 800f816:	d001      	beq.n	800f81c <__sflush_r+0xac>
 800f818:	2b16      	cmp	r3, #22
 800f81a:	d11e      	bne.n	800f85a <__sflush_r+0xea>
 800f81c:	602f      	str	r7, [r5, #0]
 800f81e:	2000      	movs	r0, #0
 800f820:	e022      	b.n	800f868 <__sflush_r+0xf8>
 800f822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f826:	b21b      	sxth	r3, r3
 800f828:	e01b      	b.n	800f862 <__sflush_r+0xf2>
 800f82a:	690f      	ldr	r7, [r1, #16]
 800f82c:	2f00      	cmp	r7, #0
 800f82e:	d0f6      	beq.n	800f81e <__sflush_r+0xae>
 800f830:	0793      	lsls	r3, r2, #30
 800f832:	680e      	ldr	r6, [r1, #0]
 800f834:	bf08      	it	eq
 800f836:	694b      	ldreq	r3, [r1, #20]
 800f838:	600f      	str	r7, [r1, #0]
 800f83a:	bf18      	it	ne
 800f83c:	2300      	movne	r3, #0
 800f83e:	eba6 0807 	sub.w	r8, r6, r7
 800f842:	608b      	str	r3, [r1, #8]
 800f844:	f1b8 0f00 	cmp.w	r8, #0
 800f848:	dde9      	ble.n	800f81e <__sflush_r+0xae>
 800f84a:	6a21      	ldr	r1, [r4, #32]
 800f84c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f84e:	4643      	mov	r3, r8
 800f850:	463a      	mov	r2, r7
 800f852:	4628      	mov	r0, r5
 800f854:	47b0      	blx	r6
 800f856:	2800      	cmp	r0, #0
 800f858:	dc08      	bgt.n	800f86c <__sflush_r+0xfc>
 800f85a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f85e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f862:	81a3      	strh	r3, [r4, #12]
 800f864:	f04f 30ff 	mov.w	r0, #4294967295
 800f868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f86c:	4407      	add	r7, r0
 800f86e:	eba8 0800 	sub.w	r8, r8, r0
 800f872:	e7e7      	b.n	800f844 <__sflush_r+0xd4>
 800f874:	20400001 	.word	0x20400001

0800f878 <_fflush_r>:
 800f878:	b538      	push	{r3, r4, r5, lr}
 800f87a:	690b      	ldr	r3, [r1, #16]
 800f87c:	4605      	mov	r5, r0
 800f87e:	460c      	mov	r4, r1
 800f880:	b913      	cbnz	r3, 800f888 <_fflush_r+0x10>
 800f882:	2500      	movs	r5, #0
 800f884:	4628      	mov	r0, r5
 800f886:	bd38      	pop	{r3, r4, r5, pc}
 800f888:	b118      	cbz	r0, 800f892 <_fflush_r+0x1a>
 800f88a:	6a03      	ldr	r3, [r0, #32]
 800f88c:	b90b      	cbnz	r3, 800f892 <_fflush_r+0x1a>
 800f88e:	f7ff fa9f 	bl	800edd0 <__sinit>
 800f892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d0f3      	beq.n	800f882 <_fflush_r+0xa>
 800f89a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f89c:	07d0      	lsls	r0, r2, #31
 800f89e:	d404      	bmi.n	800f8aa <_fflush_r+0x32>
 800f8a0:	0599      	lsls	r1, r3, #22
 800f8a2:	d402      	bmi.n	800f8aa <_fflush_r+0x32>
 800f8a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f8a6:	f7ff fbec 	bl	800f082 <__retarget_lock_acquire_recursive>
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	4621      	mov	r1, r4
 800f8ae:	f7ff ff5f 	bl	800f770 <__sflush_r>
 800f8b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f8b4:	07da      	lsls	r2, r3, #31
 800f8b6:	4605      	mov	r5, r0
 800f8b8:	d4e4      	bmi.n	800f884 <_fflush_r+0xc>
 800f8ba:	89a3      	ldrh	r3, [r4, #12]
 800f8bc:	059b      	lsls	r3, r3, #22
 800f8be:	d4e1      	bmi.n	800f884 <_fflush_r+0xc>
 800f8c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f8c2:	f7ff fbdf 	bl	800f084 <__retarget_lock_release_recursive>
 800f8c6:	e7dd      	b.n	800f884 <_fflush_r+0xc>

0800f8c8 <__swbuf_r>:
 800f8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ca:	460e      	mov	r6, r1
 800f8cc:	4614      	mov	r4, r2
 800f8ce:	4605      	mov	r5, r0
 800f8d0:	b118      	cbz	r0, 800f8da <__swbuf_r+0x12>
 800f8d2:	6a03      	ldr	r3, [r0, #32]
 800f8d4:	b90b      	cbnz	r3, 800f8da <__swbuf_r+0x12>
 800f8d6:	f7ff fa7b 	bl	800edd0 <__sinit>
 800f8da:	69a3      	ldr	r3, [r4, #24]
 800f8dc:	60a3      	str	r3, [r4, #8]
 800f8de:	89a3      	ldrh	r3, [r4, #12]
 800f8e0:	071a      	lsls	r2, r3, #28
 800f8e2:	d501      	bpl.n	800f8e8 <__swbuf_r+0x20>
 800f8e4:	6923      	ldr	r3, [r4, #16]
 800f8e6:	b943      	cbnz	r3, 800f8fa <__swbuf_r+0x32>
 800f8e8:	4621      	mov	r1, r4
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	f000 f82a 	bl	800f944 <__swsetup_r>
 800f8f0:	b118      	cbz	r0, 800f8fa <__swbuf_r+0x32>
 800f8f2:	f04f 37ff 	mov.w	r7, #4294967295
 800f8f6:	4638      	mov	r0, r7
 800f8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8fa:	6823      	ldr	r3, [r4, #0]
 800f8fc:	6922      	ldr	r2, [r4, #16]
 800f8fe:	1a98      	subs	r0, r3, r2
 800f900:	6963      	ldr	r3, [r4, #20]
 800f902:	b2f6      	uxtb	r6, r6
 800f904:	4283      	cmp	r3, r0
 800f906:	4637      	mov	r7, r6
 800f908:	dc05      	bgt.n	800f916 <__swbuf_r+0x4e>
 800f90a:	4621      	mov	r1, r4
 800f90c:	4628      	mov	r0, r5
 800f90e:	f7ff ffb3 	bl	800f878 <_fflush_r>
 800f912:	2800      	cmp	r0, #0
 800f914:	d1ed      	bne.n	800f8f2 <__swbuf_r+0x2a>
 800f916:	68a3      	ldr	r3, [r4, #8]
 800f918:	3b01      	subs	r3, #1
 800f91a:	60a3      	str	r3, [r4, #8]
 800f91c:	6823      	ldr	r3, [r4, #0]
 800f91e:	1c5a      	adds	r2, r3, #1
 800f920:	6022      	str	r2, [r4, #0]
 800f922:	701e      	strb	r6, [r3, #0]
 800f924:	6962      	ldr	r2, [r4, #20]
 800f926:	1c43      	adds	r3, r0, #1
 800f928:	429a      	cmp	r2, r3
 800f92a:	d004      	beq.n	800f936 <__swbuf_r+0x6e>
 800f92c:	89a3      	ldrh	r3, [r4, #12]
 800f92e:	07db      	lsls	r3, r3, #31
 800f930:	d5e1      	bpl.n	800f8f6 <__swbuf_r+0x2e>
 800f932:	2e0a      	cmp	r6, #10
 800f934:	d1df      	bne.n	800f8f6 <__swbuf_r+0x2e>
 800f936:	4621      	mov	r1, r4
 800f938:	4628      	mov	r0, r5
 800f93a:	f7ff ff9d 	bl	800f878 <_fflush_r>
 800f93e:	2800      	cmp	r0, #0
 800f940:	d0d9      	beq.n	800f8f6 <__swbuf_r+0x2e>
 800f942:	e7d6      	b.n	800f8f2 <__swbuf_r+0x2a>

0800f944 <__swsetup_r>:
 800f944:	b538      	push	{r3, r4, r5, lr}
 800f946:	4b29      	ldr	r3, [pc, #164]	@ (800f9ec <__swsetup_r+0xa8>)
 800f948:	4605      	mov	r5, r0
 800f94a:	6818      	ldr	r0, [r3, #0]
 800f94c:	460c      	mov	r4, r1
 800f94e:	b118      	cbz	r0, 800f958 <__swsetup_r+0x14>
 800f950:	6a03      	ldr	r3, [r0, #32]
 800f952:	b90b      	cbnz	r3, 800f958 <__swsetup_r+0x14>
 800f954:	f7ff fa3c 	bl	800edd0 <__sinit>
 800f958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f95c:	0719      	lsls	r1, r3, #28
 800f95e:	d422      	bmi.n	800f9a6 <__swsetup_r+0x62>
 800f960:	06da      	lsls	r2, r3, #27
 800f962:	d407      	bmi.n	800f974 <__swsetup_r+0x30>
 800f964:	2209      	movs	r2, #9
 800f966:	602a      	str	r2, [r5, #0]
 800f968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f96c:	81a3      	strh	r3, [r4, #12]
 800f96e:	f04f 30ff 	mov.w	r0, #4294967295
 800f972:	e033      	b.n	800f9dc <__swsetup_r+0x98>
 800f974:	0758      	lsls	r0, r3, #29
 800f976:	d512      	bpl.n	800f99e <__swsetup_r+0x5a>
 800f978:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f97a:	b141      	cbz	r1, 800f98e <__swsetup_r+0x4a>
 800f97c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f980:	4299      	cmp	r1, r3
 800f982:	d002      	beq.n	800f98a <__swsetup_r+0x46>
 800f984:	4628      	mov	r0, r5
 800f986:	f7ff fbdb 	bl	800f140 <_free_r>
 800f98a:	2300      	movs	r3, #0
 800f98c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f98e:	89a3      	ldrh	r3, [r4, #12]
 800f990:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f994:	81a3      	strh	r3, [r4, #12]
 800f996:	2300      	movs	r3, #0
 800f998:	6063      	str	r3, [r4, #4]
 800f99a:	6923      	ldr	r3, [r4, #16]
 800f99c:	6023      	str	r3, [r4, #0]
 800f99e:	89a3      	ldrh	r3, [r4, #12]
 800f9a0:	f043 0308 	orr.w	r3, r3, #8
 800f9a4:	81a3      	strh	r3, [r4, #12]
 800f9a6:	6923      	ldr	r3, [r4, #16]
 800f9a8:	b94b      	cbnz	r3, 800f9be <__swsetup_r+0x7a>
 800f9aa:	89a3      	ldrh	r3, [r4, #12]
 800f9ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f9b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f9b4:	d003      	beq.n	800f9be <__swsetup_r+0x7a>
 800f9b6:	4621      	mov	r1, r4
 800f9b8:	4628      	mov	r0, r5
 800f9ba:	f000 f83f 	bl	800fa3c <__smakebuf_r>
 800f9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9c2:	f013 0201 	ands.w	r2, r3, #1
 800f9c6:	d00a      	beq.n	800f9de <__swsetup_r+0x9a>
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	60a2      	str	r2, [r4, #8]
 800f9cc:	6962      	ldr	r2, [r4, #20]
 800f9ce:	4252      	negs	r2, r2
 800f9d0:	61a2      	str	r2, [r4, #24]
 800f9d2:	6922      	ldr	r2, [r4, #16]
 800f9d4:	b942      	cbnz	r2, 800f9e8 <__swsetup_r+0xa4>
 800f9d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f9da:	d1c5      	bne.n	800f968 <__swsetup_r+0x24>
 800f9dc:	bd38      	pop	{r3, r4, r5, pc}
 800f9de:	0799      	lsls	r1, r3, #30
 800f9e0:	bf58      	it	pl
 800f9e2:	6962      	ldrpl	r2, [r4, #20]
 800f9e4:	60a2      	str	r2, [r4, #8]
 800f9e6:	e7f4      	b.n	800f9d2 <__swsetup_r+0x8e>
 800f9e8:	2000      	movs	r0, #0
 800f9ea:	e7f7      	b.n	800f9dc <__swsetup_r+0x98>
 800f9ec:	240001d0 	.word	0x240001d0

0800f9f0 <__swhatbuf_r>:
 800f9f0:	b570      	push	{r4, r5, r6, lr}
 800f9f2:	460c      	mov	r4, r1
 800f9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9f8:	2900      	cmp	r1, #0
 800f9fa:	b096      	sub	sp, #88	@ 0x58
 800f9fc:	4615      	mov	r5, r2
 800f9fe:	461e      	mov	r6, r3
 800fa00:	da0d      	bge.n	800fa1e <__swhatbuf_r+0x2e>
 800fa02:	89a3      	ldrh	r3, [r4, #12]
 800fa04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fa08:	f04f 0100 	mov.w	r1, #0
 800fa0c:	bf14      	ite	ne
 800fa0e:	2340      	movne	r3, #64	@ 0x40
 800fa10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fa14:	2000      	movs	r0, #0
 800fa16:	6031      	str	r1, [r6, #0]
 800fa18:	602b      	str	r3, [r5, #0]
 800fa1a:	b016      	add	sp, #88	@ 0x58
 800fa1c:	bd70      	pop	{r4, r5, r6, pc}
 800fa1e:	466a      	mov	r2, sp
 800fa20:	f000 f848 	bl	800fab4 <_fstat_r>
 800fa24:	2800      	cmp	r0, #0
 800fa26:	dbec      	blt.n	800fa02 <__swhatbuf_r+0x12>
 800fa28:	9901      	ldr	r1, [sp, #4]
 800fa2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fa2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fa32:	4259      	negs	r1, r3
 800fa34:	4159      	adcs	r1, r3
 800fa36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fa3a:	e7eb      	b.n	800fa14 <__swhatbuf_r+0x24>

0800fa3c <__smakebuf_r>:
 800fa3c:	898b      	ldrh	r3, [r1, #12]
 800fa3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa40:	079d      	lsls	r5, r3, #30
 800fa42:	4606      	mov	r6, r0
 800fa44:	460c      	mov	r4, r1
 800fa46:	d507      	bpl.n	800fa58 <__smakebuf_r+0x1c>
 800fa48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fa4c:	6023      	str	r3, [r4, #0]
 800fa4e:	6123      	str	r3, [r4, #16]
 800fa50:	2301      	movs	r3, #1
 800fa52:	6163      	str	r3, [r4, #20]
 800fa54:	b003      	add	sp, #12
 800fa56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa58:	ab01      	add	r3, sp, #4
 800fa5a:	466a      	mov	r2, sp
 800fa5c:	f7ff ffc8 	bl	800f9f0 <__swhatbuf_r>
 800fa60:	9f00      	ldr	r7, [sp, #0]
 800fa62:	4605      	mov	r5, r0
 800fa64:	4639      	mov	r1, r7
 800fa66:	4630      	mov	r0, r6
 800fa68:	f7ff f89a 	bl	800eba0 <_malloc_r>
 800fa6c:	b948      	cbnz	r0, 800fa82 <__smakebuf_r+0x46>
 800fa6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa72:	059a      	lsls	r2, r3, #22
 800fa74:	d4ee      	bmi.n	800fa54 <__smakebuf_r+0x18>
 800fa76:	f023 0303 	bic.w	r3, r3, #3
 800fa7a:	f043 0302 	orr.w	r3, r3, #2
 800fa7e:	81a3      	strh	r3, [r4, #12]
 800fa80:	e7e2      	b.n	800fa48 <__smakebuf_r+0xc>
 800fa82:	89a3      	ldrh	r3, [r4, #12]
 800fa84:	6020      	str	r0, [r4, #0]
 800fa86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa8a:	81a3      	strh	r3, [r4, #12]
 800fa8c:	9b01      	ldr	r3, [sp, #4]
 800fa8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fa92:	b15b      	cbz	r3, 800faac <__smakebuf_r+0x70>
 800fa94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa98:	4630      	mov	r0, r6
 800fa9a:	f000 f81d 	bl	800fad8 <_isatty_r>
 800fa9e:	b128      	cbz	r0, 800faac <__smakebuf_r+0x70>
 800faa0:	89a3      	ldrh	r3, [r4, #12]
 800faa2:	f023 0303 	bic.w	r3, r3, #3
 800faa6:	f043 0301 	orr.w	r3, r3, #1
 800faaa:	81a3      	strh	r3, [r4, #12]
 800faac:	89a3      	ldrh	r3, [r4, #12]
 800faae:	431d      	orrs	r5, r3
 800fab0:	81a5      	strh	r5, [r4, #12]
 800fab2:	e7cf      	b.n	800fa54 <__smakebuf_r+0x18>

0800fab4 <_fstat_r>:
 800fab4:	b538      	push	{r3, r4, r5, lr}
 800fab6:	4d07      	ldr	r5, [pc, #28]	@ (800fad4 <_fstat_r+0x20>)
 800fab8:	2300      	movs	r3, #0
 800faba:	4604      	mov	r4, r0
 800fabc:	4608      	mov	r0, r1
 800fabe:	4611      	mov	r1, r2
 800fac0:	602b      	str	r3, [r5, #0]
 800fac2:	f7f2 fcf5 	bl	80024b0 <_fstat>
 800fac6:	1c43      	adds	r3, r0, #1
 800fac8:	d102      	bne.n	800fad0 <_fstat_r+0x1c>
 800faca:	682b      	ldr	r3, [r5, #0]
 800facc:	b103      	cbz	r3, 800fad0 <_fstat_r+0x1c>
 800face:	6023      	str	r3, [r4, #0]
 800fad0:	bd38      	pop	{r3, r4, r5, pc}
 800fad2:	bf00      	nop
 800fad4:	24000898 	.word	0x24000898

0800fad8 <_isatty_r>:
 800fad8:	b538      	push	{r3, r4, r5, lr}
 800fada:	4d06      	ldr	r5, [pc, #24]	@ (800faf4 <_isatty_r+0x1c>)
 800fadc:	2300      	movs	r3, #0
 800fade:	4604      	mov	r4, r0
 800fae0:	4608      	mov	r0, r1
 800fae2:	602b      	str	r3, [r5, #0]
 800fae4:	f7f2 fcf4 	bl	80024d0 <_isatty>
 800fae8:	1c43      	adds	r3, r0, #1
 800faea:	d102      	bne.n	800faf2 <_isatty_r+0x1a>
 800faec:	682b      	ldr	r3, [r5, #0]
 800faee:	b103      	cbz	r3, 800faf2 <_isatty_r+0x1a>
 800faf0:	6023      	str	r3, [r4, #0]
 800faf2:	bd38      	pop	{r3, r4, r5, pc}
 800faf4:	24000898 	.word	0x24000898

0800faf8 <_init>:
 800faf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fafa:	bf00      	nop
 800fafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fafe:	bc08      	pop	{r3}
 800fb00:	469e      	mov	lr, r3
 800fb02:	4770      	bx	lr

0800fb04 <_fini>:
 800fb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb06:	bf00      	nop
 800fb08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb0a:	bc08      	pop	{r3}
 800fb0c:	469e      	mov	lr, r3
 800fb0e:	4770      	bx	lr
