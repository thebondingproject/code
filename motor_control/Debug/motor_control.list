
motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092ec  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08009478  08009478  0000a478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009518  08009518  0000b068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009518  08009518  0000b068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009518  08009518  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009518  08009518  0000a518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800951c  0800951c  0000a51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009520  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000068  08009588  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08009588  0000b3dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cb9  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c5  00000000  00000000  0001bd51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  0001e418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca2  00000000  00000000  0001f450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001caae  00000000  00000000  000200f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148f7  00000000  00000000  0003cba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9978  00000000  00000000  00051497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fae0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bbc  00000000  00000000  000fae54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000ffa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800945c 	.word	0x0800945c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	0800945c 	.word	0x0800945c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <PI_controller>:
 * @param feedback  current value
 * @param parameter loop parameters
 * @return current value to actuate
 */
float PI_controller(float setpoint, float feedback, struct loop_parameters *parameter)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b08b      	sub	sp, #44	@ 0x2c
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	ed87 0a03 	vstr	s0, [r7, #12]
 8000b9a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000b9e:	6078      	str	r0, [r7, #4]
	float error = setpoint - feedback;
 8000ba0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ba4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bac:	edc7 7a06 	vstr	s15, [r7, #24]

	float proportional = error * parameter->P;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	edd3 7a00 	vldr	s15, [r3]
 8000bb6:	ed97 7a06 	vldr	s14, [r7, #24]
 8000bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bbe:	edc7 7a05 	vstr	s15, [r7, #20]
	parameter->integral = parameter->integral + proportional * parameter->I * parameter->T;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	ed93 7a04 	vldr	s14, [r3, #16]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	edd3 6a01 	vldr	s13, [r3, #4]
 8000bce:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bd2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	edd3 7a05 	vldr	s15, [r3, #20]
 8000bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	edc3 7a04 	vstr	s15, [r3, #16]

	// Dynamic Anti-wind-up limits calculation
	float limMaxInt, limMinInt;

	if (parameter->LimMax > proportional)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	edd3 7a02 	vldr	s15, [r3, #8]
 8000bf0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000bf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bfc:	d509      	bpl.n	8000c12 <PI_controller+0x82>
		limMaxInt = parameter->LimMax - proportional;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	ed93 7a02 	vldr	s14, [r3, #8]
 8000c04:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c0c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8000c10:	e002      	b.n	8000c18 <PI_controller+0x88>
	else
		limMaxInt = 0;
 8000c12:	f04f 0300 	mov.w	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24

	if (parameter->LimMin < proportional)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c2a:	dd09      	ble.n	8000c40 <PI_controller+0xb0>
		limMinInt = parameter->LimMin - proportional;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	ed93 7a03 	vldr	s14, [r3, #12]
 8000c32:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c3a:	edc7 7a08 	vstr	s15, [r7, #32]
 8000c3e:	e002      	b.n	8000c46 <PI_controller+0xb6>
	else
		limMinInt = 0;
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]

	// Clamp integral
	if (parameter->integral > limMaxInt)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c4c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000c50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c58:	d503      	bpl.n	8000c62 <PI_controller+0xd2>
		parameter->integral = limMaxInt;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	e00c      	b.n	8000c7c <PI_controller+0xec>
	else if (parameter->integral < limMinInt)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c68:	ed97 7a08 	vldr	s14, [r7, #32]
 8000c6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c74:	dd02      	ble.n	8000c7c <PI_controller+0xec>
		parameter->integral = limMinInt;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a3a      	ldr	r2, [r7, #32]
 8000c7a:	611a      	str	r2, [r3, #16]

	float output = proportional + parameter->integral;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c82:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c8a:	edc7 7a07 	vstr	s15, [r7, #28]

	// Output saturation
	if (output > parameter->LimMax)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c94:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca0:	dd03      	ble.n	8000caa <PI_controller+0x11a>
		output = parameter->LimMax;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	61fb      	str	r3, [r7, #28]
 8000ca8:	e00c      	b.n	8000cc4 <PI_controller+0x134>
	else if (output < parameter->LimMin)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	edd3 7a03 	vldr	s15, [r3, #12]
 8000cb0:	ed97 7a07 	vldr	s14, [r7, #28]
 8000cb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cbc:	d502      	bpl.n	8000cc4 <PI_controller+0x134>
		output = parameter->LimMin;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	61fb      	str	r3, [r7, #28]

	return output;
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	ee07 3a90 	vmov	s15, r3
}
 8000cca:	eeb0 0a67 	vmov.f32	s0, s15
 8000cce:	372c      	adds	r7, #44	@ 0x2c
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <controller_variables_init>:

/**
 * @brief Initializes the PI controller parameters.
 */
void controller_variables_init(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b093      	sub	sp, #76	@ 0x4c
 8000cdc:	af00      	add	r7, sp, #0
	L = 0.00113f;
#endif

#if MOTOR_AXIS == 2 //Z motor (23062025 DONE)
	// Loop paramaters
	loop_parameters_current = (struct loop_parameters
 8000cde:	4b31      	ldr	r3, [pc, #196]	@ (8000da4 <controller_variables_init+0xcc>)
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	6053      	str	r3, [r2, #4]
 8000ce8:	6093      	str	r3, [r2, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
 8000cec:	6113      	str	r3, [r2, #16]
 8000cee:	6153      	str	r3, [r2, #20]
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8000da4 <controller_variables_init+0xcc>)
 8000cf2:	4a2d      	ldr	r2, [pc, #180]	@ (8000da8 <controller_variables_init+0xd0>)
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8000da4 <controller_variables_init+0xcc>)
 8000cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8000dac <controller_variables_init+0xd4>)
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	4b29      	ldr	r3, [pc, #164]	@ (8000da4 <controller_variables_init+0xcc>)
 8000cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8000db0 <controller_variables_init+0xd8>)
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	4b28      	ldr	r3, [pc, #160]	@ (8000da4 <controller_variables_init+0xcc>)
 8000d04:	4a2b      	ldr	r2, [pc, #172]	@ (8000db4 <controller_variables_init+0xdc>)
 8000d06:	615a      	str	r2, [r3, #20]
	)
					{ .P = 37.7f, .I = 1000.0f, .LimMax = 12, .LimMin = 0, .T = 0.0000639f };
	loop_parameters_speed = (struct loop_parameters
 8000d08:	4b2b      	ldr	r3, [pc, #172]	@ (8000db8 <controller_variables_init+0xe0>)
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	6053      	str	r3, [r2, #4]
 8000d12:	6093      	str	r3, [r2, #8]
 8000d14:	60d3      	str	r3, [r2, #12]
 8000d16:	6113      	str	r3, [r2, #16]
 8000d18:	6153      	str	r3, [r2, #20]
 8000d1a:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <controller_variables_init+0xe0>)
 8000d1c:	4a27      	ldr	r2, [pc, #156]	@ (8000dbc <controller_variables_init+0xe4>)
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	4b25      	ldr	r3, [pc, #148]	@ (8000db8 <controller_variables_init+0xe0>)
 8000d22:	4a27      	ldr	r2, [pc, #156]	@ (8000dc0 <controller_variables_init+0xe8>)
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	4b24      	ldr	r3, [pc, #144]	@ (8000db8 <controller_variables_init+0xe0>)
 8000d28:	4a26      	ldr	r2, [pc, #152]	@ (8000dc4 <controller_variables_init+0xec>)
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	4b22      	ldr	r3, [pc, #136]	@ (8000db8 <controller_variables_init+0xe0>)
 8000d2e:	4a26      	ldr	r2, [pc, #152]	@ (8000dc8 <controller_variables_init+0xf0>)
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	4b21      	ldr	r3, [pc, #132]	@ (8000db8 <controller_variables_init+0xe0>)
 8000d34:	4a25      	ldr	r2, [pc, #148]	@ (8000dcc <controller_variables_init+0xf4>)
 8000d36:	615a      	str	r2, [r3, #20]
	)
					{ .P = 0.23909f, .I = 50.265f, .LimMax = 1.8, .LimMin = -1.8, .T = 0.00031969f };
	loop_parameters_position = (struct loop_parameters
 8000d38:	4b25      	ldr	r3, [pc, #148]	@ (8000dd0 <controller_variables_init+0xf8>)
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	6053      	str	r3, [r2, #4]
 8000d42:	6093      	str	r3, [r2, #8]
 8000d44:	60d3      	str	r3, [r2, #12]
 8000d46:	6113      	str	r3, [r2, #16]
 8000d48:	6153      	str	r3, [r2, #20]
 8000d4a:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <controller_variables_init+0xf8>)
 8000d4c:	4a21      	ldr	r2, [pc, #132]	@ (8000dd4 <controller_variables_init+0xfc>)
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <controller_variables_init+0xf8>)
 8000d52:	4a21      	ldr	r2, [pc, #132]	@ (8000dd8 <controller_variables_init+0x100>)
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <controller_variables_init+0xf8>)
 8000d58:	4a20      	ldr	r2, [pc, #128]	@ (8000ddc <controller_variables_init+0x104>)
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <controller_variables_init+0xf8>)
 8000d5e:	4a20      	ldr	r2, [pc, #128]	@ (8000de0 <controller_variables_init+0x108>)
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd0 <controller_variables_init+0xf8>)
 8000d64:	4a1f      	ldr	r2, [pc, #124]	@ (8000de4 <controller_variables_init+0x10c>)
 8000d66:	615a      	str	r2, [r3, #20]
	)
					{ .P = 100.0f, .I = 0.1f, .LimMax = 3, .LimMin = -3, .T = 0.00063939f };

	spring_compensation_current = -0.6; // 0.6
 8000d68:	4b1f      	ldr	r3, [pc, #124]	@ (8000de8 <controller_variables_init+0x110>)
 8000d6a:	4a20      	ldr	r2, [pc, #128]	@ (8000dec <controller_variables_init+0x114>)
 8000d6c:	601a      	str	r2, [r3, #0]
	R = 6;
 8000d6e:	4b20      	ldr	r3, [pc, #128]	@ (8000df0 <controller_variables_init+0x118>)
 8000d70:	4a20      	ldr	r2, [pc, #128]	@ (8000df4 <controller_variables_init+0x11c>)
 8000d72:	601a      	str	r2, [r3, #0]
	L = 0.006f;
 8000d74:	4b20      	ldr	r3, [pc, #128]	@ (8000df8 <controller_variables_init+0x120>)
 8000d76:	4a21      	ldr	r2, [pc, #132]	@ (8000dfc <controller_variables_init+0x124>)
 8000d78:	601a      	str	r2, [r3, #0]

	spring_compensation_current = 0; //-0.45f
	R = 5.2;
	L = 0.0064f;
#endif
	motor_halt_min = false;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <controller_variables_init+0x128>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
	interrupt_counter = 0;
 8000d80:	4b20      	ldr	r3, [pc, #128]	@ (8000e04 <controller_variables_init+0x12c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
	old_position = 0.0f;
 8000d86:	4b20      	ldr	r3, [pc, #128]	@ (8000e08 <controller_variables_init+0x130>)
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
	setpoint_position = 0.0f;
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <controller_variables_init+0x134>)
 8000d90:	f04f 0200 	mov.w	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
}
 8000d96:	bf00      	nop
 8000d98:	374c      	adds	r7, #76	@ 0x4c
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000084 	.word	0x20000084
 8000da8:	4216cccd 	.word	0x4216cccd
 8000dac:	447a0000 	.word	0x447a0000
 8000db0:	41400000 	.word	0x41400000
 8000db4:	3886020d 	.word	0x3886020d
 8000db8:	2000009c 	.word	0x2000009c
 8000dbc:	3e74d402 	.word	0x3e74d402
 8000dc0:	42490f5c 	.word	0x42490f5c
 8000dc4:	3fe66666 	.word	0x3fe66666
 8000dc8:	bfe66666 	.word	0xbfe66666
 8000dcc:	39a79c11 	.word	0x39a79c11
 8000dd0:	200000b4 	.word	0x200000b4
 8000dd4:	42c80000 	.word	0x42c80000
 8000dd8:	3dcccccd 	.word	0x3dcccccd
 8000ddc:	40400000 	.word	0x40400000
 8000de0:	c0400000 	.word	0xc0400000
 8000de4:	3a279cbd 	.word	0x3a279cbd
 8000de8:	2000010c 	.word	0x2000010c
 8000dec:	bf19999a 	.word	0xbf19999a
 8000df0:	20000110 	.word	0x20000110
 8000df4:	40c00000 	.word	0x40c00000
 8000df8:	20000114 	.word	0x20000114
 8000dfc:	3bc49ba6 	.word	0x3bc49ba6
 8000e00:	200000d5 	.word	0x200000d5
 8000e04:	200000d8 	.word	0x200000d8
 8000e08:	200000e0 	.word	0x200000e0
 8000e0c:	200000e8 	.word	0x200000e8

08000e10 <motion_profile>:
 * @return calculated motor position
 *
 * @note This function was derived from this article: https://www.ctrlaltftc.com/advanced/motion-profiling
 */
float motion_profile(float max_acceleration, float max_velocity, float target_position, float position_at_call, float current_time, float time_at_call)
{
 8000e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e14:	b096      	sub	sp, #88	@ 0x58
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	ed87 0a07 	vstr	s0, [r7, #28]
 8000e1c:	edc7 0a06 	vstr	s1, [r7, #24]
 8000e20:	ed87 1a05 	vstr	s2, [r7, #20]
 8000e24:	edc7 1a04 	vstr	s3, [r7, #16]
 8000e28:	ed87 2a03 	vstr	s4, [r7, #12]
 8000e2c:	edc7 2a02 	vstr	s5, [r7, #8]
	float distance = target_position - position_at_call;
 8000e30:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e34:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e3c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	/*
	 * Don't perform any calculations if the motor movement is 0.
	 * Otherwise the function returns NaN and everything breaks.
	 */

	if(distance == 0)
 8000e40:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000e44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4c:	d102      	bne.n	8000e54 <motion_profile+0x44>
		return position_at_call;
 8000e4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e52:	e211      	b.n	8001278 <motion_profile+0x468>

	float elapsed_time = (current_time - time_at_call)/1000.0;
 8000e54:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e58:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e60:	eddf 6abd 	vldr	s13, [pc, #756]	@ 8001158 <motion_profile+0x348>
 8000e64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e68:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

	float sign;
	// Gets the sign of the distance
	if (distance >= 0)
 8000e6c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000e70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e78:	db03      	blt.n	8000e82 <motion_profile+0x72>
		sign = 1;
 8000e7a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000e7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8000e80:	e001      	b.n	8000e86 <motion_profile+0x76>
	else
		sign = -1;
 8000e82:	4bb6      	ldr	r3, [pc, #728]	@ (800115c <motion_profile+0x34c>)
 8000e84:	657b      	str	r3, [r7, #84]	@ 0x54
	 * in order not to fuck up the calculations.
	 *
	 * If the distance at call is negative, the function will
	 * return a negative value (see the "sign*" at the function returns).
	 */
	float distance_abs = sign * distance;
 8000e86:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8000e8a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e92:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

	// Calculate the time it takes to accelerate to max velocity
	float acceleration_dt = max_velocity / max_acceleration;
 8000e96:	edd7 6a06 	vldr	s13, [r7, #24]
 8000e9a:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ea2:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

	// If we can't accelerate to max velocity in the given distance, we'll accelerate as much as possible
	float halfway_distance = distance_abs / 2;
 8000ea6:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000eaa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000eae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eb2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	float acceleration_distance = 0.5 * max_acceleration * pow(acceleration_dt, 2);
 8000eb6:	69f8      	ldr	r0, [r7, #28]
 8000eb8:	f7ff faea 	bl	8000490 <__aeabi_f2d>
 8000ebc:	f04f 0200 	mov.w	r2, #0
 8000ec0:	4ba7      	ldr	r3, [pc, #668]	@ (8001160 <motion_profile+0x350>)
 8000ec2:	f7ff fb3d 	bl	8000540 <__aeabi_dmul>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4614      	mov	r4, r2
 8000ecc:	461d      	mov	r5, r3
 8000ece:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000ed0:	f7ff fade 	bl	8000490 <__aeabi_f2d>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	ed9f 1b9d 	vldr	d1, [pc, #628]	@ 8001150 <motion_profile+0x340>
 8000edc:	ec43 2b10 	vmov	d0, r2, r3
 8000ee0:	f007 f982 	bl	80081e8 <pow>
 8000ee4:	ec53 2b10 	vmov	r2, r3, d0
 8000ee8:	4620      	mov	r0, r4
 8000eea:	4629      	mov	r1, r5
 8000eec:	f7ff fb28 	bl	8000540 <__aeabi_dmul>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f7ff fdfa 	bl	8000af0 <__aeabi_d2f>
 8000efc:	4603      	mov	r3, r0
 8000efe:	63fb      	str	r3, [r7, #60]	@ 0x3c

	if (acceleration_distance > halfway_distance)
 8000f00:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000f04:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000f08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f10:	dd24      	ble.n	8000f5c <motion_profile+0x14c>
		acceleration_dt = sqrt(halfway_distance / (0.5 * max_acceleration));
 8000f12:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000f14:	f7ff fabc 	bl	8000490 <__aeabi_f2d>
 8000f18:	4604      	mov	r4, r0
 8000f1a:	460d      	mov	r5, r1
 8000f1c:	69f8      	ldr	r0, [r7, #28]
 8000f1e:	f7ff fab7 	bl	8000490 <__aeabi_f2d>
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	4b8e      	ldr	r3, [pc, #568]	@ (8001160 <motion_profile+0x350>)
 8000f28:	f7ff fb0a 	bl	8000540 <__aeabi_dmul>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4620      	mov	r0, r4
 8000f32:	4629      	mov	r1, r5
 8000f34:	f7ff fc2e 	bl	8000794 <__aeabi_ddiv>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	ec43 2b17 	vmov	d7, r2, r3
 8000f40:	eeb0 0a47 	vmov.f32	s0, s14
 8000f44:	eef0 0a67 	vmov.f32	s1, s15
 8000f48:	f007 f9be 	bl	80082c8 <sqrt>
 8000f4c:	ec53 2b10 	vmov	r2, r3, d0
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fdcc 	bl	8000af0 <__aeabi_d2f>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	653b      	str	r3, [r7, #80]	@ 0x50

	acceleration_distance = 0.5 * max_acceleration * pow(acceleration_dt, 2);
 8000f5c:	69f8      	ldr	r0, [r7, #28]
 8000f5e:	f7ff fa97 	bl	8000490 <__aeabi_f2d>
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	4b7e      	ldr	r3, [pc, #504]	@ (8001160 <motion_profile+0x350>)
 8000f68:	f7ff faea 	bl	8000540 <__aeabi_dmul>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4614      	mov	r4, r2
 8000f72:	461d      	mov	r5, r3
 8000f74:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000f76:	f7ff fa8b 	bl	8000490 <__aeabi_f2d>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 8001150 <motion_profile+0x340>
 8000f82:	ec43 2b10 	vmov	d0, r2, r3
 8000f86:	f007 f92f 	bl	80081e8 <pow>
 8000f8a:	ec53 2b10 	vmov	r2, r3, d0
 8000f8e:	4620      	mov	r0, r4
 8000f90:	4629      	mov	r1, r5
 8000f92:	f7ff fad5 	bl	8000540 <__aeabi_dmul>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f7ff fda7 	bl	8000af0 <__aeabi_d2f>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c

	// recalculate max velocity based on the time we have to accelerate and decelerate
	max_velocity = max_acceleration * acceleration_dt;
 8000fa6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000faa:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb2:	edc7 7a06 	vstr	s15, [r7, #24]

	// we decelerate at the same rate as we accelerate
	float deceleration_dt = acceleration_dt;
 8000fb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000fb8:	63bb      	str	r3, [r7, #56]	@ 0x38

	// calculate the time that we're at max velocity
	float cruise_distance = distance_abs - 2 * acceleration_distance;
 8000fba:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000fbe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fc2:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float cruise_dt = cruise_distance / max_velocity;
 8000fce:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8000fd2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fda:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float deceleration_time = acceleration_dt + cruise_dt;
 8000fde:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000fe2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fea:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// check if we're still in the motion profile
	float entire_dt = acceleration_dt + cruise_dt + deceleration_dt;
 8000fee:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8000ff2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffa:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001002:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	if (elapsed_time > entire_dt)
 8001006:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800100a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800100e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001016:	dd0a      	ble.n	800102e <motion_profile+0x21e>
		return position_at_call + sign * distance_abs;
 8001018:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800101c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001020:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001024:	edd7 7a04 	vldr	s15, [r7, #16]
 8001028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102c:	e124      	b.n	8001278 <motion_profile+0x468>

	// if we're accelerating
	if (elapsed_time < acceleration_dt)
 800102e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001032:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001036:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800103a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103e:	d53d      	bpl.n	80010bc <motion_profile+0x2ac>
	{
		// use the kinematic equation for acceleration
		return position_at_call + sign * 0.5 * max_acceleration * pow(elapsed_time, 2);
 8001040:	6938      	ldr	r0, [r7, #16]
 8001042:	f7ff fa25 	bl	8000490 <__aeabi_f2d>
 8001046:	4604      	mov	r4, r0
 8001048:	460d      	mov	r5, r1
 800104a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800104c:	f7ff fa20 	bl	8000490 <__aeabi_f2d>
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	4b42      	ldr	r3, [pc, #264]	@ (8001160 <motion_profile+0x350>)
 8001056:	f7ff fa73 	bl	8000540 <__aeabi_dmul>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4690      	mov	r8, r2
 8001060:	4699      	mov	r9, r3
 8001062:	69f8      	ldr	r0, [r7, #28]
 8001064:	f7ff fa14 	bl	8000490 <__aeabi_f2d>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4640      	mov	r0, r8
 800106e:	4649      	mov	r1, r9
 8001070:	f7ff fa66 	bl	8000540 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4690      	mov	r8, r2
 800107a:	4699      	mov	r9, r3
 800107c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800107e:	f7ff fa07 	bl	8000490 <__aeabi_f2d>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	ed9f 1b32 	vldr	d1, [pc, #200]	@ 8001150 <motion_profile+0x340>
 800108a:	ec43 2b10 	vmov	d0, r2, r3
 800108e:	f007 f8ab 	bl	80081e8 <pow>
 8001092:	ec53 2b10 	vmov	r2, r3, d0
 8001096:	4640      	mov	r0, r8
 8001098:	4649      	mov	r1, r9
 800109a:	f7ff fa51 	bl	8000540 <__aeabi_dmul>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4620      	mov	r0, r4
 80010a4:	4629      	mov	r1, r5
 80010a6:	f7ff f895 	bl	80001d4 <__adddf3>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4610      	mov	r0, r2
 80010b0:	4619      	mov	r1, r3
 80010b2:	f7ff fd1d 	bl	8000af0 <__aeabi_d2f>
 80010b6:	ee07 0a90 	vmov	s15, r0
 80010ba:	e0dd      	b.n	8001278 <motion_profile+0x468>
	}

	// if we're cruising
	else if (elapsed_time < deceleration_time)
 80010bc:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80010c0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80010c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010cc:	d54a      	bpl.n	8001164 <motion_profile+0x354>
	{
		acceleration_distance = 0.5 * max_acceleration * pow(acceleration_dt, 2);
 80010ce:	69f8      	ldr	r0, [r7, #28]
 80010d0:	f7ff f9de 	bl	8000490 <__aeabi_f2d>
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <motion_profile+0x350>)
 80010da:	f7ff fa31 	bl	8000540 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4614      	mov	r4, r2
 80010e4:	461d      	mov	r5, r3
 80010e6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80010e8:	f7ff f9d2 	bl	8000490 <__aeabi_f2d>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	ed9f 1b17 	vldr	d1, [pc, #92]	@ 8001150 <motion_profile+0x340>
 80010f4:	ec43 2b10 	vmov	d0, r2, r3
 80010f8:	f007 f876 	bl	80081e8 <pow>
 80010fc:	ec53 2b10 	vmov	r2, r3, d0
 8001100:	4620      	mov	r0, r4
 8001102:	4629      	mov	r1, r5
 8001104:	f7ff fa1c 	bl	8000540 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fcee 	bl	8000af0 <__aeabi_d2f>
 8001114:	4603      	mov	r3, r0
 8001116:	63fb      	str	r3, [r7, #60]	@ 0x3c
		float cruise_current_dt = elapsed_time - acceleration_dt;
 8001118:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800111c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001124:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

		// use the kinematic equation for constant velocity
		return position_at_call + sign * (acceleration_distance + max_velocity * cruise_current_dt);
 8001128:	ed97 7a06 	vldr	s14, [r7, #24]
 800112c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001134:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001138:	ee37 7a27 	vadd.f32	s14, s14, s15
 800113c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001140:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001144:	edd7 7a04 	vldr	s15, [r7, #16]
 8001148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800114c:	e094      	b.n	8001278 <motion_profile+0x468>
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000
 8001154:	40000000 	.word	0x40000000
 8001158:	447a0000 	.word	0x447a0000
 800115c:	bf800000 	.word	0xbf800000
 8001160:	3fe00000 	.word	0x3fe00000
	}

	// if we're decelerating
	else
	{
		acceleration_distance = 0.5 * max_acceleration * pow(acceleration_dt, 2);
 8001164:	69f8      	ldr	r0, [r7, #28]
 8001166:	f7ff f993 	bl	8000490 <__aeabi_f2d>
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	4b48      	ldr	r3, [pc, #288]	@ (8001290 <motion_profile+0x480>)
 8001170:	f7ff f9e6 	bl	8000540 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4614      	mov	r4, r2
 800117a:	461d      	mov	r5, r3
 800117c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800117e:	f7ff f987 	bl	8000490 <__aeabi_f2d>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	ed9f 1b40 	vldr	d1, [pc, #256]	@ 8001288 <motion_profile+0x478>
 800118a:	ec43 2b10 	vmov	d0, r2, r3
 800118e:	f007 f82b 	bl	80081e8 <pow>
 8001192:	ec53 2b10 	vmov	r2, r3, d0
 8001196:	4620      	mov	r0, r4
 8001198:	4629      	mov	r1, r5
 800119a:	f7ff f9d1 	bl	8000540 <__aeabi_dmul>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff fca3 	bl	8000af0 <__aeabi_d2f>
 80011aa:	4603      	mov	r3, r0
 80011ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
		cruise_distance = max_velocity * cruise_dt;
 80011ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80011b2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80011b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ba:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		deceleration_time = elapsed_time - deceleration_time;
 80011be:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80011c2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80011c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ca:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// use the kinematic equations to calculate the instantaneous desired position
		return position_at_call + sign
 80011ce:	6938      	ldr	r0, [r7, #16]
 80011d0:	f7ff f95e 	bl	8000490 <__aeabi_f2d>
 80011d4:	4604      	mov	r4, r0
 80011d6:	460d      	mov	r5, r1
				* (acceleration_distance + cruise_distance + max_velocity * deceleration_time
 80011d8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80011da:	f7ff f959 	bl	8000490 <__aeabi_f2d>
 80011de:	4680      	mov	r8, r0
 80011e0:	4689      	mov	r9, r1
 80011e2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80011e6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80011ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011ee:	edd7 6a06 	vldr	s13, [r7, #24]
 80011f2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80011f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fe:	ee17 0a90 	vmov	r0, s15
 8001202:	f7ff f945 	bl	8000490 <__aeabi_f2d>
 8001206:	4682      	mov	sl, r0
 8001208:	468b      	mov	fp, r1
						- 0.5 * max_acceleration * pow(deceleration_time, 2));
 800120a:	69f8      	ldr	r0, [r7, #28]
 800120c:	f7ff f940 	bl	8000490 <__aeabi_f2d>
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <motion_profile+0x480>)
 8001216:	f7ff f993 	bl	8000540 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	e9c7 2300 	strd	r2, r3, [r7]
 8001222:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001224:	f7ff f934 	bl	8000490 <__aeabi_f2d>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8001288 <motion_profile+0x478>
 8001230:	ec43 2b10 	vmov	d0, r2, r3
 8001234:	f006 ffd8 	bl	80081e8 <pow>
 8001238:	ec53 2b10 	vmov	r2, r3, d0
 800123c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001240:	f7ff f97e 	bl	8000540 <__aeabi_dmul>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4650      	mov	r0, sl
 800124a:	4659      	mov	r1, fp
 800124c:	f7fe ffc0 	bl	80001d0 <__aeabi_dsub>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
				* (acceleration_distance + cruise_distance + max_velocity * deceleration_time
 8001254:	4640      	mov	r0, r8
 8001256:	4649      	mov	r1, r9
 8001258:	f7ff f972 	bl	8000540 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
		return position_at_call + sign
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7fe ffb6 	bl	80001d4 <__adddf3>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fc3e 	bl	8000af0 <__aeabi_d2f>
 8001274:	ee07 0a90 	vmov	s15, r0
	}
}
 8001278:	eeb0 0a67 	vmov.f32	s0, s15
 800127c:	3758      	adds	r7, #88	@ 0x58
 800127e:	46bd      	mov	sp, r7
 8001280:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001284:	f3af 8000 	nop.w
 8001288:	00000000 	.word	0x00000000
 800128c:	40000000 	.word	0x40000000
 8001290:	3fe00000 	.word	0x3fe00000

08001294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001298:	f001 fa16 	bl	80026c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129c:	f000 f8a6 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a0:	f000 faa8 	bl	80017f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80012a4:	f000 f8fe 	bl	80014a4 <MX_ADC1_Init>
  MX_TIM1_Init();
 80012a8:	f000 f99a 	bl	80015e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012ac:	f000 fa4e 	bl	800174c <MX_TIM2_Init>
  MX_I2C1_Init();
 80012b0:	f000 f956 	bl	8001560 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	// Starts the motor encoders
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 80012b4:	2100      	movs	r1, #0
 80012b6:	483d      	ldr	r0, [pc, #244]	@ (80013ac <main+0x118>)
 80012b8:	f006 f90e 	bl	80074d8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);
 80012bc:	2104      	movs	r1, #4
 80012be:	483b      	ldr	r0, [pc, #236]	@ (80013ac <main+0x118>)
 80012c0:	f006 f90a 	bl	80074d8 <HAL_TIM_Encoder_Start>
	// Starts the timers for PWM generation
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012c4:	2100      	movs	r1, #0
 80012c6:	483a      	ldr	r0, [pc, #232]	@ (80013b0 <main+0x11c>)
 80012c8:	f005 ff7a 	bl	80071c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80012cc:	2104      	movs	r1, #4
 80012ce:	4838      	ldr	r0, [pc, #224]	@ (80013b0 <main+0x11c>)
 80012d0:	f005 ff76 	bl	80071c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80012d4:	2108      	movs	r1, #8
 80012d6:	4836      	ldr	r0, [pc, #216]	@ (80013b0 <main+0x11c>)
 80012d8:	f005 ff72 	bl	80071c0 <HAL_TIM_PWM_Start>

	// Global variables initialization
	serial_communication_variable_init();
 80012dc:	f000 ffac 	bl	8002238 <serial_communication_variable_init>
	controller_variables_init();
 80012e0:	f7ff fcfa 	bl	8000cd8 <controller_variables_init>

	// Allows for the motor controller to properly initialize at startup
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80012e4:	4b32      	ldr	r3, [pc, #200]	@ (80013b0 <main+0x11c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2200      	movs	r2, #0
 80012ea:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80012ec:	4b30      	ldr	r3, [pc, #192]	@ (80013b0 <main+0x11c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2200      	movs	r2, #0
 80012f2:	639a      	str	r2, [r3, #56]	@ 0x38
	// See p. 10 of the MAX22201.pdf datasheet. We need to give time to the motor driver to properly startup
	HAL_Delay(1);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f001 fa4d 	bl	8002794 <HAL_Delay>

	// Check if the motor has already engaged a limit switch
	if (HAL_GPIO_ReadPin(LIMB_GPIO_Port, LIMB_Pin)) {
 80012fa:	2140      	movs	r1, #64	@ 0x40
 80012fc:	482d      	ldr	r0, [pc, #180]	@ (80013b4 <main+0x120>)
 80012fe:	f002 fd33 	bl	8003d68 <HAL_GPIO_ReadPin>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <main+0x7a>
		motor_halt_max = 1;
 8001308:	4b2b      	ldr	r3, [pc, #172]	@ (80013b8 <main+0x124>)
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(LIMA_GPIO_Port, LIMA_Pin)) {
 800130e:	2120      	movs	r1, #32
 8001310:	4828      	ldr	r0, [pc, #160]	@ (80013b4 <main+0x120>)
 8001312:	f002 fd29 	bl	8003d68 <HAL_GPIO_ReadPin>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <main+0x8e>
		motor_halt_min = 1;
 800131c:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <main+0x128>)
 800131e:	2201      	movs	r2, #1
 8001320:	701a      	strb	r2, [r3, #0]
	}

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001322:	2100      	movs	r1, #0
 8001324:	4826      	ldr	r0, [pc, #152]	@ (80013c0 <main+0x12c>)
 8001326:	f001 fe3b 	bl	8002fa0 <HAL_ADCEx_Calibration_Start>

	// WATCH OUT: this must be ALWAYS put AFTER the motor controller initialization delay!!!
	HAL_ADC_Start_IT(&hadc1);
 800132a:	4825      	ldr	r0, [pc, #148]	@ (80013c0 <main+0x12c>)
 800132c:	f001 fbf0 	bl	8002b10 <HAL_ADC_Start_IT>

	// Properly initializes the motion_profile function parameters
	target_position = 0;
 8001330:	4b24      	ldr	r3, [pc, #144]	@ (80013c4 <main+0x130>)
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
	position_at_call = measured_position;
 8001338:	4b23      	ldr	r3, [pc, #140]	@ (80013c8 <main+0x134>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a23      	ldr	r2, [pc, #140]	@ (80013cc <main+0x138>)
 800133e:	6013      	str	r3, [r2, #0]
	time_at_call = HAL_GetTick();
 8001340:	f001 fa1c 	bl	800277c <HAL_GetTick>
 8001344:	4603      	mov	r3, r0
 8001346:	4a22      	ldr	r2, [pc, #136]	@ (80013d0 <main+0x13c>)
 8001348:	6013      	str	r3, [r2, #0]

	// All initializations are okay. Turn on the ALIVE status LED
	HAL_GPIO_WritePin(ALIVE_LED_GPIO_Port, ALIVE_LED_Pin, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001350:	4820      	ldr	r0, [pc, #128]	@ (80013d4 <main+0x140>)
 8001352:	f002 fd21 	bl	8003d98 <HAL_GPIO_WritePin>

	HAL_I2C_EnableListen_IT(&hi2c1);
 8001356:	4820      	ldr	r0, [pc, #128]	@ (80013d8 <main+0x144>)
 8001358:	f002 ff68 	bl	800422c <HAL_I2C_EnableListen_IT>
	//
	//	target_position = -0.1f;
	//		position_at_call = measured_position;
	//		time_at_call = HAL_GetTick();

	HAL_GPIO_WritePin(DEBUG_OUT_GPIO_Port, DEBUG_OUT_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001362:	4814      	ldr	r0, [pc, #80]	@ (80013b4 <main+0x120>)
 8001364:	f002 fd18 	bl	8003d98 <HAL_GPIO_WritePin>
		 *
		 * The motor start moving when we command a new velocity in the opposite
		 * direction wrt the location of the limit switch.
		 */
		// POBLEM: switch bounces when disengaged
		if (motor_halt_max == 1 && is_switch_pressed_debounced(LIMB_GPIO_Port, LIMB_Pin, &last_state_B, &last_time_B)) {
 8001368:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <main+0x124>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00b      	beq.n	8001388 <main+0xf4>
 8001370:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <main+0x148>)
 8001372:	4a1b      	ldr	r2, [pc, #108]	@ (80013e0 <main+0x14c>)
 8001374:	2140      	movs	r1, #64	@ 0x40
 8001376:	480f      	ldr	r0, [pc, #60]	@ (80013b4 <main+0x120>)
 8001378:	f000 ff1e 	bl	80021b8 <is_switch_pressed_debounced>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d002      	beq.n	8001388 <main+0xf4>
			motor_halt_max = 0;
 8001382:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <main+0x124>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
		}
		if (motor_halt_min == 1 && is_switch_pressed_debounced(LIMA_GPIO_Port, LIMA_Pin, &last_state_A, &last_time_A)) {
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <main+0x128>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0eb      	beq.n	8001368 <main+0xd4>
 8001390:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <main+0x150>)
 8001392:	4a15      	ldr	r2, [pc, #84]	@ (80013e8 <main+0x154>)
 8001394:	2120      	movs	r1, #32
 8001396:	4807      	ldr	r0, [pc, #28]	@ (80013b4 <main+0x120>)
 8001398:	f000 ff0e 	bl	80021b8 <is_switch_pressed_debounced>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0e2      	beq.n	8001368 <main+0xd4>
			motor_halt_min = 0;
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <main+0x128>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
		if (motor_halt_max == 1 && is_switch_pressed_debounced(LIMB_GPIO_Port, LIMB_Pin, &last_state_B, &last_time_B)) {
 80013a8:	e7de      	b.n	8001368 <main+0xd4>
 80013aa:	bf00      	nop
 80013ac:	20000208 	.word	0x20000208
 80013b0:	200001bc 	.word	0x200001bc
 80013b4:	48000400 	.word	0x48000400
 80013b8:	200000d4 	.word	0x200000d4
 80013bc:	200000d5 	.word	0x200000d5
 80013c0:	20000118 	.word	0x20000118
 80013c4:	200000e4 	.word	0x200000e4
 80013c8:	200000dc 	.word	0x200000dc
 80013cc:	20000108 	.word	0x20000108
 80013d0:	20000104 	.word	0x20000104
 80013d4:	48000800 	.word	0x48000800
 80013d8:	20000168 	.word	0x20000168
 80013dc:	20000288 	.word	0x20000288
 80013e0:	2000028d 	.word	0x2000028d
 80013e4:	20000284 	.word	0x20000284
 80013e8:	2000028c 	.word	0x2000028c

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b09c      	sub	sp, #112	@ 0x70
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013f6:	2228      	movs	r2, #40	@ 0x28
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f007 fffc 	bl	80093f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001410:	463b      	mov	r3, r7
 8001412:	2234      	movs	r2, #52	@ 0x34
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f007 ffee 	bl	80093f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141c:	2302      	movs	r3, #2
 800141e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001420:	2301      	movs	r3, #1
 8001422:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001424:	2310      	movs	r3, #16
 8001426:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001428:	2302      	movs	r3, #2
 800142a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800142c:	2300      	movs	r3, #0
 800142e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001430:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8001434:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001436:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800143a:	4618      	mov	r0, r3
 800143c:	f004 faa8 	bl	8005990 <HAL_RCC_OscConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001446:	f000 fee5 	bl	8002214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144a:	230f      	movs	r3, #15
 800144c:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144e:	2302      	movs	r3, #2
 8001450:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001456:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800145a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001460:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001464:	2101      	movs	r1, #1
 8001466:	4618      	mov	r0, r3
 8001468:	f005 faa0 	bl	80069ac <HAL_RCC_ClockConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001472:	f000 fecf 	bl	8002214 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 8001476:	f44f 5385 	mov.w	r3, #4256	@ 0x10a0
 800147a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8001484:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001488:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800148a:	463b      	mov	r3, r7
 800148c:	4618      	mov	r0, r3
 800148e:	f005 fc4f 	bl	8006d30 <HAL_RCCEx_PeriphCLKConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001498:	f000 febc 	bl	8002214 <Error_Handler>
  }
}
 800149c:	bf00      	nop
 800149e:	3770      	adds	r7, #112	@ 0x70
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014aa:	463b      	mov	r3, r7
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
 80014b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014ba:	4b28      	ldr	r3, [pc, #160]	@ (800155c <MX_ADC1_Init+0xb8>)
 80014bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80014c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014c2:	4b26      	ldr	r3, [pc, #152]	@ (800155c <MX_ADC1_Init+0xb8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014c8:	4b24      	ldr	r3, [pc, #144]	@ (800155c <MX_ADC1_Init+0xb8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014ce:	4b23      	ldr	r3, [pc, #140]	@ (800155c <MX_ADC1_Init+0xb8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014d4:	4b21      	ldr	r3, [pc, #132]	@ (800155c <MX_ADC1_Init+0xb8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014da:	4b20      	ldr	r3, [pc, #128]	@ (800155c <MX_ADC1_Init+0xb8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <MX_ADC1_Init+0xb8>)
 80014e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80014ea:	4b1c      	ldr	r3, [pc, #112]	@ (800155c <MX_ADC1_Init+0xb8>)
 80014ec:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80014f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	@ (800155c <MX_ADC1_Init+0xb8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014f8:	4b18      	ldr	r3, [pc, #96]	@ (800155c <MX_ADC1_Init+0xb8>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014fe:	4b17      	ldr	r3, [pc, #92]	@ (800155c <MX_ADC1_Init+0xb8>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <MX_ADC1_Init+0xb8>)
 8001508:	2204      	movs	r2, #4
 800150a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800150c:	4b13      	ldr	r3, [pc, #76]	@ (800155c <MX_ADC1_Init+0xb8>)
 800150e:	2200      	movs	r2, #0
 8001510:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001512:	4b12      	ldr	r3, [pc, #72]	@ (800155c <MX_ADC1_Init+0xb8>)
 8001514:	2200      	movs	r2, #0
 8001516:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001518:	4810      	ldr	r0, [pc, #64]	@ (800155c <MX_ADC1_Init+0xb8>)
 800151a:	f001 f973 	bl	8002804 <HAL_ADC_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 8001524:	f000 fe76 	bl	8002214 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001528:	2305      	movs	r3, #5
 800152a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800152c:	2301      	movs	r3, #1
 800152e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001540:	463b      	mov	r3, r7
 8001542:	4619      	mov	r1, r3
 8001544:	4805      	ldr	r0, [pc, #20]	@ (800155c <MX_ADC1_Init+0xb8>)
 8001546:	f001 fdc5 	bl	80030d4 <HAL_ADC_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001550:	f000 fe60 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000118 	.word	0x20000118

08001560 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001564:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <MX_I2C1_Init+0x74>)
 8001566:	4a1c      	ldr	r2, [pc, #112]	@ (80015d8 <MX_I2C1_Init+0x78>)
 8001568:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800156a:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <MX_I2C1_Init+0x74>)
 800156c:	4a1b      	ldr	r2, [pc, #108]	@ (80015dc <MX_I2C1_Init+0x7c>)
 800156e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = SLAVE_ADDRESS;
 8001570:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <MX_I2C1_Init+0x74>)
 8001572:	222c      	movs	r2, #44	@ 0x2c
 8001574:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001576:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <MX_I2C1_Init+0x74>)
 8001578:	2201      	movs	r2, #1
 800157a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800157c:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <MX_I2C1_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001582:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <MX_I2C1_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <MX_I2C1_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <MX_I2C1_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <MX_I2C1_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800159a:	480e      	ldr	r0, [pc, #56]	@ (80015d4 <MX_I2C1_Init+0x74>)
 800159c:	f002 fc46 	bl	8003e2c <HAL_I2C_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015a6:	f000 fe35 	bl	8002214 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015aa:	2100      	movs	r1, #0
 80015ac:	4809      	ldr	r0, [pc, #36]	@ (80015d4 <MX_I2C1_Init+0x74>)
 80015ae:	f004 f957 	bl	8005860 <HAL_I2CEx_ConfigAnalogFilter>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015b8:	f000 fe2c 	bl	8002214 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015bc:	2100      	movs	r1, #0
 80015be:	4805      	ldr	r0, [pc, #20]	@ (80015d4 <MX_I2C1_Init+0x74>)
 80015c0:	f004 f999 	bl	80058f6 <HAL_I2CEx_ConfigDigitalFilter>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015ca:	f000 fe23 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000168 	.word	0x20000168
 80015d8:	40005400 	.word	0x40005400
 80015dc:	2000090e 	.word	0x2000090e

080015e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b096      	sub	sp, #88	@ 0x58
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]
 8001602:	615a      	str	r2, [r3, #20]
 8001604:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	222c      	movs	r2, #44	@ 0x2c
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f007 fef3 	bl	80093f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001612:	4b4c      	ldr	r3, [pc, #304]	@ (8001744 <MX_TIM1_Init+0x164>)
 8001614:	4a4c      	ldr	r2, [pc, #304]	@ (8001748 <MX_TIM1_Init+0x168>)
 8001616:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001618:	4b4a      	ldr	r3, [pc, #296]	@ (8001744 <MX_TIM1_Init+0x164>)
 800161a:	2200      	movs	r2, #0
 800161c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800161e:	4b49      	ldr	r3, [pc, #292]	@ (8001744 <MX_TIM1_Init+0x164>)
 8001620:	2220      	movs	r2, #32
 8001622:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001624:	4b47      	ldr	r3, [pc, #284]	@ (8001744 <MX_TIM1_Init+0x164>)
 8001626:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800162a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162c:	4b45      	ldr	r3, [pc, #276]	@ (8001744 <MX_TIM1_Init+0x164>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001632:	4b44      	ldr	r3, [pc, #272]	@ (8001744 <MX_TIM1_Init+0x164>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001638:	4b42      	ldr	r3, [pc, #264]	@ (8001744 <MX_TIM1_Init+0x164>)
 800163a:	2280      	movs	r2, #128	@ 0x80
 800163c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800163e:	4841      	ldr	r0, [pc, #260]	@ (8001744 <MX_TIM1_Init+0x164>)
 8001640:	f005 fd67 	bl	8007112 <HAL_TIM_PWM_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800164a:	f000 fde3 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800164e:	483d      	ldr	r0, [pc, #244]	@ (8001744 <MX_TIM1_Init+0x164>)
 8001650:	f005 fcfe 	bl	8007050 <HAL_TIM_OC_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800165a:	f000 fddb 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 800165e:	2360      	movs	r3, #96	@ 0x60
 8001660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800166a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800166e:	4619      	mov	r1, r3
 8001670:	4834      	ldr	r0, [pc, #208]	@ (8001744 <MX_TIM1_Init+0x164>)
 8001672:	f006 fc93 	bl	8007f9c <HAL_TIMEx_MasterConfigSynchronization>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 800167c:	f000 fdca 	bl	8002214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001680:	2360      	movs	r3, #96	@ 0x60
 8001682:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001688:	2302      	movs	r3, #2
 800168a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800168c:	2300      	movs	r3, #0
 800168e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001694:	2300      	movs	r3, #0
 8001696:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800169c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016a0:	2200      	movs	r2, #0
 80016a2:	4619      	mov	r1, r3
 80016a4:	4827      	ldr	r0, [pc, #156]	@ (8001744 <MX_TIM1_Init+0x164>)
 80016a6:	f006 f81f 	bl	80076e8 <HAL_TIM_PWM_ConfigChannel>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80016b0:	f000 fdb0 	bl	8002214 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016b8:	2204      	movs	r2, #4
 80016ba:	4619      	mov	r1, r3
 80016bc:	4821      	ldr	r0, [pc, #132]	@ (8001744 <MX_TIM1_Init+0x164>)
 80016be:	f006 f813 	bl	80076e8 <HAL_TIM_PWM_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80016c8:	f000 fda4 	bl	8002214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80016cc:	2330      	movs	r3, #48	@ 0x30
 80016ce:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d4:	2300      	movs	r3, #0
 80016d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016dc:	2208      	movs	r2, #8
 80016de:	4619      	mov	r1, r3
 80016e0:	4818      	ldr	r0, [pc, #96]	@ (8001744 <MX_TIM1_Init+0x164>)
 80016e2:	f005 ff87 	bl	80075f4 <HAL_TIM_OC_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80016ec:	f000 fd92 	bl	8002214 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001704:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001708:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001712:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	4619      	mov	r1, r3
 8001724:	4807      	ldr	r0, [pc, #28]	@ (8001744 <MX_TIM1_Init+0x164>)
 8001726:	f006 fc9f 	bl	8008068 <HAL_TIMEx_ConfigBreakDeadTime>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 8001730:	f000 fd70 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001734:	4803      	ldr	r0, [pc, #12]	@ (8001744 <MX_TIM1_Init+0x164>)
 8001736:	f000 fefb 	bl	8002530 <HAL_TIM_MspPostInit>

}
 800173a:	bf00      	nop
 800173c:	3758      	adds	r7, #88	@ 0x58
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200001bc 	.word	0x200001bc
 8001748:	40012c00 	.word	0x40012c00

0800174c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	@ 0x30
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	2224      	movs	r2, #36	@ 0x24
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f007 fe4c 	bl	80093f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	463b      	mov	r3, r7
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800176a:	4b21      	ldr	r3, [pc, #132]	@ (80017f0 <MX_TIM2_Init+0xa4>)
 800176c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001770:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001772:	4b1f      	ldr	r3, [pc, #124]	@ (80017f0 <MX_TIM2_Init+0xa4>)
 8001774:	2200      	movs	r2, #0
 8001776:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001778:	4b1d      	ldr	r3, [pc, #116]	@ (80017f0 <MX_TIM2_Init+0xa4>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800177e:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <MX_TIM2_Init+0xa4>)
 8001780:	f04f 32ff 	mov.w	r2, #4294967295
 8001784:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001786:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <MX_TIM2_Init+0xa4>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178c:	4b18      	ldr	r3, [pc, #96]	@ (80017f0 <MX_TIM2_Init+0xa4>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001792:	2303      	movs	r3, #3
 8001794:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800179a:	2301      	movs	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017aa:	2301      	movs	r3, #1
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	4619      	mov	r1, r3
 80017bc:	480c      	ldr	r0, [pc, #48]	@ (80017f0 <MX_TIM2_Init+0xa4>)
 80017be:	f005 fde5 	bl	800738c <HAL_TIM_Encoder_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80017c8:	f000 fd24 	bl	8002214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017d4:	463b      	mov	r3, r7
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	@ (80017f0 <MX_TIM2_Init+0xa4>)
 80017da:	f006 fbdf 	bl	8007f9c <HAL_TIMEx_MasterConfigSynchronization>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80017e4:	f000 fd16 	bl	8002214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	3730      	adds	r7, #48	@ 0x30
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000208 	.word	0x20000208

080017f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	@ 0x28
 80017f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	4b59      	ldr	r3, [pc, #356]	@ (8001970 <MX_GPIO_Init+0x17c>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	4a58      	ldr	r2, [pc, #352]	@ (8001970 <MX_GPIO_Init+0x17c>)
 8001810:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001814:	6153      	str	r3, [r2, #20]
 8001816:	4b56      	ldr	r3, [pc, #344]	@ (8001970 <MX_GPIO_Init+0x17c>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001822:	4b53      	ldr	r3, [pc, #332]	@ (8001970 <MX_GPIO_Init+0x17c>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	4a52      	ldr	r2, [pc, #328]	@ (8001970 <MX_GPIO_Init+0x17c>)
 8001828:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800182c:	6153      	str	r3, [r2, #20]
 800182e:	4b50      	ldr	r3, [pc, #320]	@ (8001970 <MX_GPIO_Init+0x17c>)
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b4d      	ldr	r3, [pc, #308]	@ (8001970 <MX_GPIO_Init+0x17c>)
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	4a4c      	ldr	r2, [pc, #304]	@ (8001970 <MX_GPIO_Init+0x17c>)
 8001840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001844:	6153      	str	r3, [r2, #20]
 8001846:	4b4a      	ldr	r3, [pc, #296]	@ (8001970 <MX_GPIO_Init+0x17c>)
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	4b47      	ldr	r3, [pc, #284]	@ (8001970 <MX_GPIO_Init+0x17c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	4a46      	ldr	r2, [pc, #280]	@ (8001970 <MX_GPIO_Init+0x17c>)
 8001858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800185c:	6153      	str	r3, [r2, #20]
 800185e:	4b44      	ldr	r3, [pc, #272]	@ (8001970 <MX_GPIO_Init+0x17c>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_OUT_GPIO_Port, DEBUG_OUT_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001870:	4840      	ldr	r0, [pc, #256]	@ (8001974 <MX_GPIO_Init+0x180>)
 8001872:	f002 fa91 	bl	8003d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ALIVE_LED_Pin|COM_LED_Pin|FAULT_LED_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 800187c:	483e      	ldr	r0, [pc, #248]	@ (8001978 <MX_GPIO_Init+0x184>)
 800187e:	f002 fa8b 	bl	8003d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FAULTB_Pin FAULTA_Pin */
  GPIO_InitStruct.Pin = FAULTB_Pin|FAULTA_Pin;
 8001882:	230c      	movs	r3, #12
 8001884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001886:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800188a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188c:	2301      	movs	r3, #1
 800188e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	4838      	ldr	r0, [pc, #224]	@ (8001978 <MX_GPIO_Init+0x184>)
 8001898:	f002 f8f4 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800189c:	230c      	movs	r3, #12
 800189e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ac:	2307      	movs	r3, #7
 80018ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ba:	f002 f8e3 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_OUT_Pin */
  GPIO_InitStruct.Pin = DEBUG_OUT_Pin;
 80018be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DEBUG_OUT_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	4827      	ldr	r0, [pc, #156]	@ (8001974 <MX_GPIO_Init+0x180>)
 80018d8:	f002 f8d4 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018dc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ea:	2303      	movs	r3, #3
 80018ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018ee:	2305      	movs	r3, #5
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018fc:	f002 f8c2 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ALIVE_LED_Pin COM_LED_Pin */
  GPIO_InitStruct.Pin = ALIVE_LED_Pin|COM_LED_Pin;
 8001900:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4817      	ldr	r0, [pc, #92]	@ (8001978 <MX_GPIO_Init+0x184>)
 800191a:	f002 f8b3 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_LED_Pin */
  GPIO_InitStruct.Pin = FAULT_LED_Pin;
 800191e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FAULT_LED_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	4810      	ldr	r0, [pc, #64]	@ (8001978 <MX_GPIO_Init+0x184>)
 8001938:	f002 f8a4 	bl	8003a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMA_Pin LIMB_Pin */
  GPIO_InitStruct.Pin = LIMA_Pin|LIMB_Pin;
 800193c:	2360      	movs	r3, #96	@ 0x60
 800193e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001940:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001946:	2301      	movs	r3, #1
 8001948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	4808      	ldr	r0, [pc, #32]	@ (8001974 <MX_GPIO_Init+0x180>)
 8001952:	f002 f897 	bl	8003a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	2017      	movs	r0, #23
 800195c:	f002 f811 	bl	8003982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001960:	2017      	movs	r0, #23
 8001962:	f002 f82a 	bl	80039ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001966:	bf00      	nop
 8001968:	3728      	adds	r7, #40	@ 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	48000400 	.word	0x48000400
 8001978:	48000800 	.word	0x48000800

0800197c <execute_read_command>:

/* USER CODE BEGIN 4 */
int execute_read_command(uint8_t read_address)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
	int ret_val = COMM_ERR;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	617b      	str	r3, [r7, #20]
	ui32_to_f conv;
	uint16_t packet_size;

	switch (read_address)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	2b03      	cmp	r3, #3
 8001990:	d002      	beq.n	8001998 <execute_read_command+0x1c>
 8001992:	2b04      	cmp	r3, #4
 8001994:	d015      	beq.n	80019c2 <execute_read_command+0x46>
 8001996:	e029      	b.n	80019ec <execute_read_command+0x70>
	{
	case VIRTUAL_MEM_POSITION_MEAS:
		conv.f = measured_position;
 8001998:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <execute_read_command+0x84>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]
		packet_size = prepare_WRITE_packet(tx_buffer, read_address, conv.ui32);
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	4619      	mov	r1, r3
 80019a4:	4817      	ldr	r0, [pc, #92]	@ (8001a04 <execute_read_command+0x88>)
 80019a6:	f000 fc59 	bl	800225c <prepare_WRITE_packet>
 80019aa:	4603      	mov	r3, r0
 80019ac:	827b      	strh	r3, [r7, #18]
		// Sends the read data back to the master
		//HAL_I2C_Slave_Transmit_DMA(&hi2c1, tx_buffer, MAX_COMM_BUFFER_SIZE);
		//HAL_I2C_Slave_Transmit_IT(&hi2c1, tx_buffer, MAX_COMM_BUFFER_SIZE);
		HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, tx_buffer, MAX_COMM_BUFFER_SIZE, I2C_FIRST_AND_LAST_FRAME);
 80019ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019b2:	2207      	movs	r2, #7
 80019b4:	4913      	ldr	r1, [pc, #76]	@ (8001a04 <execute_read_command+0x88>)
 80019b6:	4814      	ldr	r0, [pc, #80]	@ (8001a08 <execute_read_command+0x8c>)
 80019b8:	f002 fad4 	bl	8003f64 <HAL_I2C_Slave_Seq_Transmit_IT>
		ret_val = COMM_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
		break;
 80019c0:	e018      	b.n	80019f4 <execute_read_command+0x78>
	case VIRTUAL_MEM_SPEED_MEAS:
		conv.f = measured_speed;
 80019c2:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <execute_read_command+0x90>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	60fb      	str	r3, [r7, #12]
		packet_size = prepare_WRITE_packet(tx_buffer, read_address, conv.ui32);
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	4619      	mov	r1, r3
 80019ce:	480d      	ldr	r0, [pc, #52]	@ (8001a04 <execute_read_command+0x88>)
 80019d0:	f000 fc44 	bl	800225c <prepare_WRITE_packet>
 80019d4:	4603      	mov	r3, r0
 80019d6:	827b      	strh	r3, [r7, #18]
		// Sends the read data back to the master
		//HAL_I2C_Slave_Transmit_DMA(&hi2c1, tx_buffer, MAX_COMM_BUFFER_SIZE);
		//HAL_I2C_Slave_Transmit_IT(&hi2c1, tx_buffer, MAX_COMM_BUFFER_SIZE);
		HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, tx_buffer, MAX_COMM_BUFFER_SIZE, I2C_FIRST_AND_LAST_FRAME);
 80019d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019dc:	2207      	movs	r2, #7
 80019de:	4909      	ldr	r1, [pc, #36]	@ (8001a04 <execute_read_command+0x88>)
 80019e0:	4809      	ldr	r0, [pc, #36]	@ (8001a08 <execute_read_command+0x8c>)
 80019e2:	f002 fabf 	bl	8003f64 <HAL_I2C_Slave_Seq_Transmit_IT>
		ret_val = COMM_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
		break;
 80019ea:	e003      	b.n	80019f4 <execute_read_command+0x78>
	default:
		ret_val = COMM_ERR;
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295
 80019f0:	617b      	str	r3, [r7, #20]
		break;
 80019f2:	bf00      	nop
	}

	return ret_val;
 80019f4:	697b      	ldr	r3, [r7, #20]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200000dc 	.word	0x200000dc
 8001a04:	20000290 	.word	0x20000290
 8001a08:	20000168 	.word	0x20000168
 8001a0c:	200000ec 	.word	0x200000ec

08001a10 <execute_write_command>:

int execute_write_command(uint8_t write_address, uint32_t data)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
	int ret_val = COMM_ERR;
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	60fb      	str	r3, [r7, #12]
	ui32_to_f conv;
	conv.ui32 = data;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	60bb      	str	r3, [r7, #8]

	switch (write_address)
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d01b      	beq.n	8001a64 <execute_write_command+0x54>
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	dc26      	bgt.n	8001a7e <execute_write_command+0x6e>
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <execute_write_command+0x2a>
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d00f      	beq.n	8001a58 <execute_write_command+0x48>
 8001a38:	e021      	b.n	8001a7e <execute_write_command+0x6e>
		 */
		/** @todo set proper precision */

		//if (fabs(target_position - measured_position) < 0.01 && control_mode == FULL_MODE)
		//{
		target_position = conv.f;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	4a14      	ldr	r2, [pc, #80]	@ (8001a90 <execute_write_command+0x80>)
 8001a3e:	6013      	str	r3, [r2, #0]
		position_at_call = measured_position;
 8001a40:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <execute_write_command+0x84>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a14      	ldr	r2, [pc, #80]	@ (8001a98 <execute_write_command+0x88>)
 8001a46:	6013      	str	r3, [r2, #0]
		time_at_call = HAL_GetTick();
 8001a48:	f000 fe98 	bl	800277c <HAL_GetTick>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4a13      	ldr	r2, [pc, #76]	@ (8001a9c <execute_write_command+0x8c>)
 8001a50:	6013      	str	r3, [r2, #0]
		//}
		ret_val = COMM_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
		break;
 8001a56:	e016      	b.n	8001a86 <execute_write_command+0x76>

	case VIRTUAL_MEM_SPEED:
		setpoint_speed = conv.f;
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4a11      	ldr	r2, [pc, #68]	@ (8001aa0 <execute_write_command+0x90>)
 8001a5c:	6013      	str	r3, [r2, #0]
		ret_val = COMM_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
		break;
 8001a62:	e010      	b.n	8001a86 <execute_write_command+0x76>

	case VIRTUAL_MEM_MODE:
		control_mode = data;
 8001a64:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa4 <execute_write_command+0x94>)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	6013      	str	r3, [r2, #0]
		if(data == SPD_MODE)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d103      	bne.n	8001a78 <execute_write_command+0x68>
			setpoint_speed = 0;
 8001a70:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <execute_write_command+0x90>)
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
		ret_val = COMM_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
		break;
 8001a7c:	e003      	b.n	8001a86 <execute_write_command+0x76>

	default:
		ret_val = COMM_ERR;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	60fb      	str	r3, [r7, #12]
		break;
 8001a84:	bf00      	nop
	}

	return ret_val;
 8001a86:	68fb      	ldr	r3, [r7, #12]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200000e4 	.word	0x200000e4
 8001a94:	200000dc 	.word	0x200000dc
 8001a98:	20000108 	.word	0x20000108
 8001a9c:	20000104 	.word	0x20000104
 8001aa0:	200000f0 	.word	0x200000f0
 8001aa4:	2000026c 	.word	0x2000026c

08001aa8 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback (I2C_HandleTypeDef *hi2c1)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(COM_LED_GPIO_Port, COM_LED_Pin);
 8001ab0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ab4:	4816      	ldr	r0, [pc, #88]	@ (8001b10 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8001ab6:	f002 f987 	bl	8003dc8 <HAL_GPIO_TogglePin>
	//Perform different actions based on the received command
	switch (rx_buffer[0])
 8001aba:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d017      	beq.n	8001af2 <HAL_I2C_SlaveRxCpltCallback+0x4a>
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	dc20      	bgt.n	8001b08 <HAL_I2C_SlaveRxCpltCallback+0x60>
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d018      	beq.n	8001afc <HAL_I2C_SlaveRxCpltCallback+0x54>
 8001aca:	2b05      	cmp	r3, #5
 8001acc:	d11c      	bne.n	8001b08 <HAL_I2C_SlaveRxCpltCallback+0x60>
	{
	case COMMAND_WRITE:
		read_data_from_WRITE_command(rx_buffer, &received_address, &received_data);
 8001ace:	4a12      	ldr	r2, [pc, #72]	@ (8001b18 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001ad0:	4912      	ldr	r1, [pc, #72]	@ (8001b1c <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8001ad2:	4810      	ldr	r0, [pc, #64]	@ (8001b14 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8001ad4:	f000 fbf0 	bl	80022b8 <read_data_from_WRITE_command>
		execute_write_command(received_address, received_data);
 8001ad8:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4a0e      	ldr	r2, [pc, #56]	@ (8001b18 <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ff94 	bl	8001a10 <execute_write_command>
		// Restore the halt mode
		Halt_command = 1.0f;
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b20 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8001aea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001aee:	601a      	str	r2, [r3, #0]
		 packet_size = prepare_ACK_packet(tx_buffer);
		 else
		 packet_size = prepare_NACK_packet(tx_buffer);
		 HAL_I2C_Slave_Transmit(&hi2c1, tx_buffer, packet_size, 10);
		 */
		break;
 8001af0:	e009      	b.n	8001b06 <HAL_I2C_SlaveRxCpltCallback+0x5e>
	case COMMAND_READ:
		received_address = rx_buffer[2];
 8001af2:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8001af4:	789a      	ldrb	r2, [r3, #2]
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8001af8:	701a      	strb	r2, [r3, #0]
		//execute_read_command(received_address);
		break;
 8001afa:	e004      	b.n	8001b06 <HAL_I2C_SlaveRxCpltCallback+0x5e>
	case COMMAND_STOP:
		// halt the motor
		Halt_command = 0.0f;
 8001afc:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
		break;
 8001b04:	bf00      	nop
	}

	return;
 8001b06:	bf00      	nop
 8001b08:	bf00      	nop
}
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	48000800 	.word	0x48000800
 8001b14:	20000298 	.word	0x20000298
 8001b18:	20000254 	.word	0x20000254
 8001b1c:	20000258 	.word	0x20000258
 8001b20:	20000008 	.word	0x20000008

08001b24 <read_position_from_encoder>:

/** @brief Converts the encoder AB data to a motor position in radians */
float read_position_from_encoder(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
	 * (2 * 3.14f / (PPR_ENCODER * 4) = impulses per revolution in 4x mode, converted into radians
	 *      PPR_ENCODER: base number of impulses per revolution
	 * 		* 4 : encoder is in x4 mode (we count both the rising and falling edges)
	 * 		2*pi: converts into radians
	 */
	return (int32_t) (__HAL_TIM_GET_COUNTER(&htim2)) * (2 * 3.14f / (PPR_ENCODER * 4));
 8001b28:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <read_position_from_encoder+0x28>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2e:	ee07 3a90 	vmov	s15, r3
 8001b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b36:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001b50 <read_position_from_encoder+0x2c>
 8001b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000208 	.word	0x20000208
 8001b50:	3ac8f5c3 	.word	0x3ac8f5c3

08001b54 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief Handles the GPIO callback
 * @param GPIO_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LIMA_Pin)
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	2b20      	cmp	r3, #32
 8001b62:	d115      	bne.n	8001b90 <HAL_GPIO_EXTI_Callback+0x3c>
		//		// Halts the motor immediately
		//		motor_halt_min = true;

		// When limit is reached force the velocity to 0 and save the current position
		// For debounce the halt flag is cleared in software after xx ms
		if(motor_halt_min == 0) {
 8001b64:	4b1e      	ldr	r3, [pc, #120]	@ (8001be0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	f083 0301 	eor.w	r3, r3, #1
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00e      	beq.n	8001b90 <HAL_GPIO_EXTI_Callback+0x3c>
			motor_halt_min = 1;
 8001b72:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
			time_at_max_halt = HAL_GetTick();
 8001b78:	f000 fe00 	bl	800277c <HAL_GetTick>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4a19      	ldr	r2, [pc, #100]	@ (8001be4 <HAL_GPIO_EXTI_Callback+0x90>)
 8001b80:	6013      	str	r3, [r2, #0]
			last_position_min = read_position_from_encoder();
 8001b82:	f7ff ffcf 	bl	8001b24 <read_position_from_encoder>
 8001b86:	eef0 7a40 	vmov.f32	s15, s0
 8001b8a:	4b17      	ldr	r3, [pc, #92]	@ (8001be8 <HAL_GPIO_EXTI_Callback+0x94>)
 8001b8c:	edc3 7a00 	vstr	s15, [r3]
		}
	}

	if (GPIO_Pin == LIMB_Pin)
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	2b40      	cmp	r3, #64	@ 0x40
 8001b94:	d115      	bne.n	8001bc2 <HAL_GPIO_EXTI_Callback+0x6e>
	{
		//		last_position_max = read_position_from_encoder();
		//		setpoint_position = last_position_max;
		//		motor_halt_max = true;

		if(motor_halt_max == 0) {
 8001b96:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <HAL_GPIO_EXTI_Callback+0x98>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	f083 0301 	eor.w	r3, r3, #1
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00e      	beq.n	8001bc2 <HAL_GPIO_EXTI_Callback+0x6e>
			motor_halt_max = 1;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <HAL_GPIO_EXTI_Callback+0x98>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
			time_at_min_halt = HAL_GetTick();
 8001baa:	f000 fde7 	bl	800277c <HAL_GetTick>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a0f      	ldr	r2, [pc, #60]	@ (8001bf0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001bb2:	6013      	str	r3, [r2, #0]
			last_position_max = read_position_from_encoder();
 8001bb4:	f7ff ffb6 	bl	8001b24 <read_position_from_encoder>
 8001bb8:	eef0 7a40 	vmov.f32	s15, s0
 8001bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001bbe:	edc3 7a00 	vstr	s15, [r3]
		}
	}

	if (GPIO_Pin == FAULTA_Pin)
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d101      	bne.n	8001bcc <HAL_GPIO_EXTI_Callback+0x78>
	{
		Error_Handler();
 8001bc8:	f000 fb24 	bl	8002214 <Error_Handler>
	}

	if (GPIO_Pin == FAULTB_Pin)
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d101      	bne.n	8001bd6 <HAL_GPIO_EXTI_Callback+0x82>
	{
		Error_Handler();
 8001bd2:	f000 fb1f 	bl	8002214 <Error_Handler>
	}
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200000d5 	.word	0x200000d5
 8001be4:	20000280 	.word	0x20000280
 8001be8:	200000d0 	.word	0x200000d0
 8001bec:	200000d4 	.word	0x200000d4
 8001bf0:	2000027c 	.word	0x2000027c
 8001bf4:	200000cc 	.word	0x200000cc

08001bf8 <HAL_ADC_ConvCpltCallback>:
 * @brief Handles the ADC end of conversion callback
 *
 * @param hadc ADC handler object
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	ed2d 8b04 	vpush	{d8-d9}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DEBUG_OUT_GPIO_Port, DEBUG_OUT_Pin, GPIO_PIN_SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c0a:	4899      	ldr	r0, [pc, #612]	@ (8001e70 <HAL_ADC_ConvCpltCallback+0x278>)
 8001c0c:	f002 f8c4 	bl	8003d98 <HAL_GPIO_WritePin>
	bool direction;
	//uint32_t ADC_value;

	//Per prima cosa calcoliamo la corrente nel motore
	ADC_value = HAL_ADC_GetValue(hadc);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f001 f815 	bl	8002c40 <HAL_ADC_GetValue>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4a96      	ldr	r2, [pc, #600]	@ (8001e74 <HAL_ADC_ConvCpltCallback+0x27c>)
 8001c1a:	6013      	str	r3, [r2, #0]
	 *  - 4095.0f: we have a 12 bit ADC
	 *  - 5.0f: is the internal gain of the amplifier inside the motor driver
	 *  - 0.1f: is the value of the shunt resistor
	 */
	//measured_current = ADC_value * 3.3f/4095.0f/5.0f/0.1f;
	measured_current = ADC_value * 3.3f/4095.0f/0.1f;
 8001c1c:	4b95      	ldr	r3, [pc, #596]	@ (8001e74 <HAL_ADC_ConvCpltCallback+0x27c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	ee07 3a90 	vmov	s15, r3
 8001c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c28:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8001e78 <HAL_ADC_ConvCpltCallback+0x280>
 8001c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c30:	eddf 6a92 	vldr	s13, [pc, #584]	@ 8001e7c <HAL_ADC_ConvCpltCallback+0x284>
 8001c34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c38:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8001e80 <HAL_ADC_ConvCpltCallback+0x288>
 8001c3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c40:	4b90      	ldr	r3, [pc, #576]	@ (8001e84 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001c42:	edc3 7a00 	vstr	s15, [r3]


	/* Position control loop */
	//Eseguo il loop di velocità ogni tot iterazioni del loop di corrente
	interrupt_counter++;
 8001c46:	4b90      	ldr	r3, [pc, #576]	@ (8001e88 <HAL_ADC_ConvCpltCallback+0x290>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	4a8e      	ldr	r2, [pc, #568]	@ (8001e88 <HAL_ADC_ConvCpltCallback+0x290>)
 8001c4e:	6013      	str	r3, [r2, #0]

	if (interrupt_counter % 10 == 0)
 8001c50:	4b8d      	ldr	r3, [pc, #564]	@ (8001e88 <HAL_ADC_ConvCpltCallback+0x290>)
 8001c52:	6819      	ldr	r1, [r3, #0]
 8001c54:	4b8d      	ldr	r3, [pc, #564]	@ (8001e8c <HAL_ADC_ConvCpltCallback+0x294>)
 8001c56:	fba3 2301 	umull	r2, r3, r3, r1
 8001c5a:	08da      	lsrs	r2, r3, #3
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	1aca      	subs	r2, r1, r3
 8001c66:	2a00      	cmp	r2, #0
 8001c68:	d147      	bne.n	8001cfa <HAL_ADC_ConvCpltCallback+0x102>
	{
		if (control_mode == POS_MODE)
 8001c6a:	4b89      	ldr	r3, [pc, #548]	@ (8001e90 <HAL_ADC_ConvCpltCallback+0x298>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d143      	bne.n	8001cfa <HAL_ADC_ConvCpltCallback+0x102>
		{
			//Motion Profiling
			setpoint_position = motion_profile(maxacc, maxvel, target_position, position_at_call, HAL_GetTick(), time_at_call);
 8001c72:	4b88      	ldr	r3, [pc, #544]	@ (8001e94 <HAL_ADC_ConvCpltCallback+0x29c>)
 8001c74:	ed93 8a00 	vldr	s16, [r3]
 8001c78:	4b87      	ldr	r3, [pc, #540]	@ (8001e98 <HAL_ADC_ConvCpltCallback+0x2a0>)
 8001c7a:	edd3 8a00 	vldr	s17, [r3]
 8001c7e:	4b87      	ldr	r3, [pc, #540]	@ (8001e9c <HAL_ADC_ConvCpltCallback+0x2a4>)
 8001c80:	ed93 9a00 	vldr	s18, [r3]
 8001c84:	4b86      	ldr	r3, [pc, #536]	@ (8001ea0 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8001c86:	edd3 9a00 	vldr	s19, [r3]
 8001c8a:	f000 fd77 	bl	800277c <HAL_GetTick>
 8001c8e:	ee07 0a90 	vmov	s15, r0
 8001c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c96:	4b83      	ldr	r3, [pc, #524]	@ (8001ea4 <HAL_ADC_ConvCpltCallback+0x2ac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	ee07 3a10 	vmov	s14, r3
 8001c9e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001ca2:	eef0 2a47 	vmov.f32	s5, s14
 8001ca6:	eeb0 2a67 	vmov.f32	s4, s15
 8001caa:	eef0 1a69 	vmov.f32	s3, s19
 8001cae:	eeb0 1a49 	vmov.f32	s2, s18
 8001cb2:	eef0 0a68 	vmov.f32	s1, s17
 8001cb6:	eeb0 0a48 	vmov.f32	s0, s16
 8001cba:	f7ff f8a9 	bl	8000e10 <motion_profile>
 8001cbe:	eef0 7a40 	vmov.f32	s15, s0
 8001cc2:	4b79      	ldr	r3, [pc, #484]	@ (8001ea8 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8001cc4:	edc3 7a00 	vstr	s15, [r3]
			// Salvo posizione
			measured_position = read_position_from_encoder();
 8001cc8:	f7ff ff2c 	bl	8001b24 <read_position_from_encoder>
 8001ccc:	eef0 7a40 	vmov.f32	s15, s0
 8001cd0:	4b76      	ldr	r3, [pc, #472]	@ (8001eac <HAL_ADC_ConvCpltCallback+0x2b4>)
 8001cd2:	edc3 7a00 	vstr	s15, [r3]

			setpoint_speed = PI_controller(setpoint_position, measured_position, &loop_parameters_position);
 8001cd6:	4b74      	ldr	r3, [pc, #464]	@ (8001ea8 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8001cd8:	edd3 7a00 	vldr	s15, [r3]
 8001cdc:	4b73      	ldr	r3, [pc, #460]	@ (8001eac <HAL_ADC_ConvCpltCallback+0x2b4>)
 8001cde:	ed93 7a00 	vldr	s14, [r3]
 8001ce2:	4873      	ldr	r0, [pc, #460]	@ (8001eb0 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8001ce4:	eef0 0a47 	vmov.f32	s1, s14
 8001ce8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cec:	f7fe ff50 	bl	8000b90 <PI_controller>
 8001cf0:	eef0 7a40 	vmov.f32	s15, s0
 8001cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8001eb4 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8001cf6:	edc3 7a00 	vstr	s15, [r3]
		}
		//If in SPD_MODE, speed gets set by execute_write_command
	}

	/* Speed control loop */
	if (interrupt_counter % 5 == 0)
 8001cfa:	4b63      	ldr	r3, [pc, #396]	@ (8001e88 <HAL_ADC_ConvCpltCallback+0x290>)
 8001cfc:	6819      	ldr	r1, [r3, #0]
 8001cfe:	4b63      	ldr	r3, [pc, #396]	@ (8001e8c <HAL_ADC_ConvCpltCallback+0x294>)
 8001d00:	fba3 2301 	umull	r2, r3, r3, r1
 8001d04:	089a      	lsrs	r2, r3, #2
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	1aca      	subs	r2, r1, r3
 8001d0e:	2a00      	cmp	r2, #0
 8001d10:	f040 808f 	bne.w	8001e32 <HAL_ADC_ConvCpltCallback+0x23a>
	{
		if (control_mode == POS_MODE || control_mode == SPD_MODE)
 8001d14:	4b5e      	ldr	r3, [pc, #376]	@ (8001e90 <HAL_ADC_ConvCpltCallback+0x298>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d004      	beq.n	8001d26 <HAL_ADC_ConvCpltCallback+0x12e>
 8001d1c:	4b5c      	ldr	r3, [pc, #368]	@ (8001e90 <HAL_ADC_ConvCpltCallback+0x298>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	f040 8086 	bne.w	8001e32 <HAL_ADC_ConvCpltCallback+0x23a>
		{
			measured_position = (int32_t) (__HAL_TIM_GET_COUNTER(&htim2)) * (2 * 3.14f / (PPR_ENCODER * 4));
 8001d26:	4b64      	ldr	r3, [pc, #400]	@ (8001eb8 <HAL_ADC_ConvCpltCallback+0x2c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2c:	ee07 3a90 	vmov	s15, r3
 8001d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d34:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8001ebc <HAL_ADC_ConvCpltCallback+0x2c4>
 8001d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3c:	4b5b      	ldr	r3, [pc, #364]	@ (8001eac <HAL_ADC_ConvCpltCallback+0x2b4>)
 8001d3e:	edc3 7a00 	vstr	s15, [r3]

			// calculation in rad/sec
			measured_speed = (measured_position - old_position) / loop_parameters_speed.T;
 8001d42:	4b5a      	ldr	r3, [pc, #360]	@ (8001eac <HAL_ADC_ConvCpltCallback+0x2b4>)
 8001d44:	ed93 7a00 	vldr	s14, [r3]
 8001d48:	4b5d      	ldr	r3, [pc, #372]	@ (8001ec0 <HAL_ADC_ConvCpltCallback+0x2c8>)
 8001d4a:	edd3 7a00 	vldr	s15, [r3]
 8001d4e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d52:	4b5c      	ldr	r3, [pc, #368]	@ (8001ec4 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8001d54:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d5c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ec8 <HAL_ADC_ConvCpltCallback+0x2d0>)
 8001d5e:	edc3 7a00 	vstr	s15, [r3]

			if(motor_halt_min){
 8001d62:	4b5a      	ldr	r3, [pc, #360]	@ (8001ecc <HAL_ADC_ConvCpltCallback+0x2d4>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d011      	beq.n	8001d8e <HAL_ADC_ConvCpltCallback+0x196>
				if(setpoint_speed > 0)
 8001d6a:	4b52      	ldr	r3, [pc, #328]	@ (8001eb4 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d78:	dd04      	ble.n	8001d84 <HAL_ADC_ConvCpltCallback+0x18c>
					setpoint_speed_in = setpoint_speed;
 8001d7a:	4b4e      	ldr	r3, [pc, #312]	@ (8001eb4 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a54      	ldr	r2, [pc, #336]	@ (8001ed0 <HAL_ADC_ConvCpltCallback+0x2d8>)
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e01e      	b.n	8001dc2 <HAL_ADC_ConvCpltCallback+0x1ca>
				else
					setpoint_speed_in = 0;
 8001d84:	4b52      	ldr	r3, [pc, #328]	@ (8001ed0 <HAL_ADC_ConvCpltCallback+0x2d8>)
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	e019      	b.n	8001dc2 <HAL_ADC_ConvCpltCallback+0x1ca>
			}
			else if(motor_halt_max){
 8001d8e:	4b51      	ldr	r3, [pc, #324]	@ (8001ed4 <HAL_ADC_ConvCpltCallback+0x2dc>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d011      	beq.n	8001dba <HAL_ADC_ConvCpltCallback+0x1c2>
				if(setpoint_speed < 0)
 8001d96:	4b47      	ldr	r3, [pc, #284]	@ (8001eb4 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da4:	d504      	bpl.n	8001db0 <HAL_ADC_ConvCpltCallback+0x1b8>
					setpoint_speed_in = setpoint_speed;
 8001da6:	4b43      	ldr	r3, [pc, #268]	@ (8001eb4 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a49      	ldr	r2, [pc, #292]	@ (8001ed0 <HAL_ADC_ConvCpltCallback+0x2d8>)
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e008      	b.n	8001dc2 <HAL_ADC_ConvCpltCallback+0x1ca>
				else
					setpoint_speed_in = 0;
 8001db0:	4b47      	ldr	r3, [pc, #284]	@ (8001ed0 <HAL_ADC_ConvCpltCallback+0x2d8>)
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	e003      	b.n	8001dc2 <HAL_ADC_ConvCpltCallback+0x1ca>
			}
			else
			{
				setpoint_speed_in = setpoint_speed;
 8001dba:	4b3e      	ldr	r3, [pc, #248]	@ (8001eb4 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a44      	ldr	r2, [pc, #272]	@ (8001ed0 <HAL_ADC_ConvCpltCallback+0x2d8>)
 8001dc0:	6013      	str	r3, [r2, #0]
			}

			setpoint_speed_in = setpoint_speed_in * Halt_command;
 8001dc2:	4b43      	ldr	r3, [pc, #268]	@ (8001ed0 <HAL_ADC_ConvCpltCallback+0x2d8>)
 8001dc4:	ed93 7a00 	vldr	s14, [r3]
 8001dc8:	4b43      	ldr	r3, [pc, #268]	@ (8001ed8 <HAL_ADC_ConvCpltCallback+0x2e0>)
 8001dca:	edd3 7a00 	vldr	s15, [r3]
 8001dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ed0 <HAL_ADC_ConvCpltCallback+0x2d8>)
 8001dd4:	edc3 7a00 	vstr	s15, [r3]

			// Filtro velocity
			filtered_speed = ALPHA * measured_speed + (1 - ALPHA) * filtered_speed;
 8001dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec8 <HAL_ADC_ConvCpltCallback+0x2d0>)
 8001dda:	edd3 7a00 	vldr	s15, [r3]
 8001dde:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001edc <HAL_ADC_ConvCpltCallback+0x2e4>
 8001de2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001de6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee0 <HAL_ADC_ConvCpltCallback+0x2e8>)
 8001de8:	edd3 7a00 	vldr	s15, [r3]
 8001dec:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001ee4 <HAL_ADC_ConvCpltCallback+0x2ec>
 8001df0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df8:	4b39      	ldr	r3, [pc, #228]	@ (8001ee0 <HAL_ADC_ConvCpltCallback+0x2e8>)
 8001dfa:	edc3 7a00 	vstr	s15, [r3]

			// Filtro velocity
			//filtered_speed = 0.3758f * measured_speed + 0.3758f * measured_speed_old + 0.2484f * filtered_speed;

			measured_speed_old = measured_speed;
 8001dfe:	4b32      	ldr	r3, [pc, #200]	@ (8001ec8 <HAL_ADC_ConvCpltCallback+0x2d0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a39      	ldr	r2, [pc, #228]	@ (8001ee8 <HAL_ADC_ConvCpltCallback+0x2f0>)
 8001e04:	6013      	str	r3, [r2, #0]

			setpoint_current_vel = PI_controller(setpoint_speed_in, filtered_speed, &loop_parameters_speed);
 8001e06:	4b32      	ldr	r3, [pc, #200]	@ (8001ed0 <HAL_ADC_ConvCpltCallback+0x2d8>)
 8001e08:	edd3 7a00 	vldr	s15, [r3]
 8001e0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ee0 <HAL_ADC_ConvCpltCallback+0x2e8>)
 8001e0e:	ed93 7a00 	vldr	s14, [r3]
 8001e12:	482c      	ldr	r0, [pc, #176]	@ (8001ec4 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8001e14:	eef0 0a47 	vmov.f32	s1, s14
 8001e18:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1c:	f7fe feb8 	bl	8000b90 <PI_controller>
 8001e20:	eef0 7a40 	vmov.f32	s15, s0
 8001e24:	4b31      	ldr	r3, [pc, #196]	@ (8001eec <HAL_ADC_ConvCpltCallback+0x2f4>)
 8001e26:	edc3 7a00 	vstr	s15, [r3]

			old_position = measured_position;
 8001e2a:	4b20      	ldr	r3, [pc, #128]	@ (8001eac <HAL_ADC_ConvCpltCallback+0x2b4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a24      	ldr	r2, [pc, #144]	@ (8001ec0 <HAL_ADC_ConvCpltCallback+0x2c8>)
 8001e30:	6013      	str	r3, [r2, #0]
		}
	}

	// Aggiungo feedforward di coppia
	setpoint_current  = setpoint_current_vel + spring_compensation_current + setpoint_position*K_SPRING;
 8001e32:	4b2e      	ldr	r3, [pc, #184]	@ (8001eec <HAL_ADC_ConvCpltCallback+0x2f4>)
 8001e34:	ed93 7a00 	vldr	s14, [r3]
 8001e38:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef0 <HAL_ADC_ConvCpltCallback+0x2f8>)
 8001e3a:	edd3 7a00 	vldr	s15, [r3]
 8001e3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e42:	4b19      	ldr	r3, [pc, #100]	@ (8001ea8 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8001e44:	edd3 7a00 	vldr	s15, [r3]
 8001e48:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8001ef4 <HAL_ADC_ConvCpltCallback+0x2fc>
 8001e4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e54:	4b28      	ldr	r3, [pc, #160]	@ (8001ef8 <HAL_ADC_ConvCpltCallback+0x300>)
 8001e56:	edc3 7a00 	vstr	s15, [r3]

	if (setpoint_current > 0)
 8001e5a:	4b27      	ldr	r3, [pc, #156]	@ (8001ef8 <HAL_ADC_ConvCpltCallback+0x300>)
 8001e5c:	edd3 7a00 	vldr	s15, [r3]
 8001e60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e68:	dd48      	ble.n	8001efc <HAL_ADC_ConvCpltCallback+0x304>
		direction = 1;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	e04f      	b.n	8001f10 <HAL_ADC_ConvCpltCallback+0x318>
 8001e70:	48000400 	.word	0x48000400
 8001e74:	2000025c 	.word	0x2000025c
 8001e78:	40533333 	.word	0x40533333
 8001e7c:	457ff000 	.word	0x457ff000
 8001e80:	3dcccccd 	.word	0x3dcccccd
 8001e84:	200000f8 	.word	0x200000f8
 8001e88:	200000d8 	.word	0x200000d8
 8001e8c:	cccccccd 	.word	0xcccccccd
 8001e90:	2000026c 	.word	0x2000026c
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000004 	.word	0x20000004
 8001e9c:	200000e4 	.word	0x200000e4
 8001ea0:	20000108 	.word	0x20000108
 8001ea4:	20000104 	.word	0x20000104
 8001ea8:	200000e8 	.word	0x200000e8
 8001eac:	200000dc 	.word	0x200000dc
 8001eb0:	200000b4 	.word	0x200000b4
 8001eb4:	200000f0 	.word	0x200000f0
 8001eb8:	20000208 	.word	0x20000208
 8001ebc:	3ac8f5c3 	.word	0x3ac8f5c3
 8001ec0:	200000e0 	.word	0x200000e0
 8001ec4:	2000009c 	.word	0x2000009c
 8001ec8:	200000ec 	.word	0x200000ec
 8001ecc:	200000d5 	.word	0x200000d5
 8001ed0:	20000278 	.word	0x20000278
 8001ed4:	200000d4 	.word	0x200000d4
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	3d4ccccd 	.word	0x3d4ccccd
 8001ee0:	200000f4 	.word	0x200000f4
 8001ee4:	3f733333 	.word	0x3f733333
 8001ee8:	20000274 	.word	0x20000274
 8001eec:	20000270 	.word	0x20000270
 8001ef0:	2000010c 	.word	0x2000010c
 8001ef4:	00000000 	.word	0x00000000
 8001ef8:	200000fc 	.word	0x200000fc
	else if (setpoint_current < 0)
 8001efc:	4b7c      	ldr	r3, [pc, #496]	@ (80020f0 <HAL_ADC_ConvCpltCallback+0x4f8>)
 8001efe:	edd3 7a00 	vldr	s15, [r3]
 8001f02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0a:	d501      	bpl.n	8001f10 <HAL_ADC_ConvCpltCallback+0x318>
		direction = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	73fb      	strb	r3, [r7, #15]

	// Se il valore pwm precedente è zero, calcola la corrente dal modello utilizzando la corrente precedentemente
	// misurata dal ADC

	if((output_current / 12.0f * 1023) <= 20)
 8001f10:	4b78      	ldr	r3, [pc, #480]	@ (80020f4 <HAL_ADC_ConvCpltCallback+0x4fc>)
 8001f12:	ed93 7a00 	vldr	s14, [r3]
 8001f16:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8001f1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f1e:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80020f8 <HAL_ADC_ConvCpltCallback+0x500>
 8001f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f26:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f32:	d847      	bhi.n	8001fc4 <HAL_ADC_ConvCpltCallback+0x3cc>
	{
		measured_current = I_peak * exp(-(R / L) * t_decay);
 8001f34:	4b71      	ldr	r3, [pc, #452]	@ (80020fc <HAL_ADC_ConvCpltCallback+0x504>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe faa9 	bl	8000490 <__aeabi_f2d>
 8001f3e:	4604      	mov	r4, r0
 8001f40:	460d      	mov	r5, r1
 8001f42:	4b6f      	ldr	r3, [pc, #444]	@ (8002100 <HAL_ADC_ConvCpltCallback+0x508>)
 8001f44:	edd3 6a00 	vldr	s13, [r3]
 8001f48:	4b6e      	ldr	r3, [pc, #440]	@ (8002104 <HAL_ADC_ConvCpltCallback+0x50c>)
 8001f4a:	ed93 7a00 	vldr	s14, [r3]
 8001f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f52:	eeb1 7a67 	vneg.f32	s14, s15
 8001f56:	4b6c      	ldr	r3, [pc, #432]	@ (8002108 <HAL_ADC_ConvCpltCallback+0x510>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f60:	ee17 0a90 	vmov	r0, s15
 8001f64:	f7fe fa94 	bl	8000490 <__aeabi_f2d>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	ec43 2b10 	vmov	d0, r2, r3
 8001f70:	f006 f8f2 	bl	8008158 <exp>
 8001f74:	ec53 2b10 	vmov	r2, r3, d0
 8001f78:	4620      	mov	r0, r4
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	f7fe fae0 	bl	8000540 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7fe fdb2 	bl	8000af0 <__aeabi_d2f>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4a5f      	ldr	r2, [pc, #380]	@ (800210c <HAL_ADC_ConvCpltCallback+0x514>)
 8001f90:	6013      	str	r3, [r2, #0]
		t_decay += loop_parameters_current.T * (1 - output_current / 12.0f);
 8001f92:	4b5f      	ldr	r3, [pc, #380]	@ (8002110 <HAL_ADC_ConvCpltCallback+0x518>)
 8001f94:	ed93 7a05 	vldr	s14, [r3, #20]
 8001f98:	4b56      	ldr	r3, [pc, #344]	@ (80020f4 <HAL_ADC_ConvCpltCallback+0x4fc>)
 8001f9a:	edd3 6a00 	vldr	s13, [r3]
 8001f9e:	eeb2 6a08 	vmov.f32	s12, #40	@ 0x41400000  12.0
 8001fa2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001faa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb2:	4b55      	ldr	r3, [pc, #340]	@ (8002108 <HAL_ADC_ConvCpltCallback+0x510>)
 8001fb4:	edd3 7a00 	vldr	s15, [r3]
 8001fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbc:	4b52      	ldr	r3, [pc, #328]	@ (8002108 <HAL_ADC_ConvCpltCallback+0x510>)
 8001fbe:	edc3 7a00 	vstr	s15, [r3]
 8001fc2:	e043      	b.n	800204c <HAL_ADC_ConvCpltCallback+0x454>
	}
	else
	{
		t_decay = loop_parameters_current.T * (1 - output_current / 12.0f);
 8001fc4:	4b52      	ldr	r3, [pc, #328]	@ (8002110 <HAL_ADC_ConvCpltCallback+0x518>)
 8001fc6:	ed93 7a05 	vldr	s14, [r3, #20]
 8001fca:	4b4a      	ldr	r3, [pc, #296]	@ (80020f4 <HAL_ADC_ConvCpltCallback+0x4fc>)
 8001fcc:	edd3 6a00 	vldr	s13, [r3]
 8001fd0:	eeb2 6a08 	vmov.f32	s12, #40	@ 0x41400000  12.0
 8001fd4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001fd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fdc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe4:	4b48      	ldr	r3, [pc, #288]	@ (8002108 <HAL_ADC_ConvCpltCallback+0x510>)
 8001fe6:	edc3 7a00 	vstr	s15, [r3]

		// 2. Compute current slope during high-side ON
		//float di_dt = (V_bus - V_emf - I_mid * R) / L;
		di_dt = (12 - measured_current * R) / L;
 8001fea:	4b48      	ldr	r3, [pc, #288]	@ (800210c <HAL_ADC_ConvCpltCallback+0x514>)
 8001fec:	ed93 7a00 	vldr	s14, [r3]
 8001ff0:	4b43      	ldr	r3, [pc, #268]	@ (8002100 <HAL_ADC_ConvCpltCallback+0x508>)
 8001ff2:	edd3 7a00 	vldr	s15, [r3]
 8001ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffa:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8001ffe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002002:	4b40      	ldr	r3, [pc, #256]	@ (8002104 <HAL_ADC_ConvCpltCallback+0x50c>)
 8002004:	ed93 7a00 	vldr	s14, [r3]
 8002008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800200c:	4b41      	ldr	r3, [pc, #260]	@ (8002114 <HAL_ADC_ConvCpltCallback+0x51c>)
 800200e:	edc3 7a00 	vstr	s15, [r3]

		// 3. Estimate peak current at end of high-side ON
		I_peak = measured_current + di_dt * (output_current / 12.0f * loop_parameters_current.T / 2);
 8002012:	4b38      	ldr	r3, [pc, #224]	@ (80020f4 <HAL_ADC_ConvCpltCallback+0x4fc>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 800201c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002020:	4b3b      	ldr	r3, [pc, #236]	@ (8002110 <HAL_ADC_ConvCpltCallback+0x518>)
 8002022:	edd3 7a05 	vldr	s15, [r3, #20]
 8002026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800202e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002032:	4b38      	ldr	r3, [pc, #224]	@ (8002114 <HAL_ADC_ConvCpltCallback+0x51c>)
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	ee27 7a27 	vmul.f32	s14, s14, s15
 800203c:	4b33      	ldr	r3, [pc, #204]	@ (800210c <HAL_ADC_ConvCpltCallback+0x514>)
 800203e:	edd3 7a00 	vldr	s15, [r3]
 8002042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002046:	4b2d      	ldr	r3, [pc, #180]	@ (80020fc <HAL_ADC_ConvCpltCallback+0x504>)
 8002048:	edc3 7a00 	vstr	s15, [r3]
	}

	/* Current control loop */
	// Parametri calcolati per 12volt output
	// Per funzionare la corrente deve essere scalata al valore pwm
	output_current = PI_controller(fabs(setpoint_current), measured_current, &loop_parameters_current);
 800204c:	4b28      	ldr	r3, [pc, #160]	@ (80020f0 <HAL_ADC_ConvCpltCallback+0x4f8>)
 800204e:	edd3 7a00 	vldr	s15, [r3]
 8002052:	eef0 7ae7 	vabs.f32	s15, s15
 8002056:	4b2d      	ldr	r3, [pc, #180]	@ (800210c <HAL_ADC_ConvCpltCallback+0x514>)
 8002058:	ed93 7a00 	vldr	s14, [r3]
 800205c:	482c      	ldr	r0, [pc, #176]	@ (8002110 <HAL_ADC_ConvCpltCallback+0x518>)
 800205e:	eef0 0a47 	vmov.f32	s1, s14
 8002062:	eeb0 0a67 	vmov.f32	s0, s15
 8002066:	f7fe fd93 	bl	8000b90 <PI_controller>
 800206a:	eef0 7a40 	vmov.f32	s15, s0
 800206e:	4b21      	ldr	r3, [pc, #132]	@ (80020f4 <HAL_ADC_ConvCpltCallback+0x4fc>)
 8002070:	edc3 7a00 	vstr	s15, [r3]
	 */
	//if (!(motor_halt_max || motor_halt_min))
	if (true)
	{
		// pilotaggio pwm
		if (direction)
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d017      	beq.n	80020aa <HAL_ADC_ConvCpltCallback+0x4b2>
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (int16_t )(output_current / 12.0f * 1023));
 800207a:	4b1e      	ldr	r3, [pc, #120]	@ (80020f4 <HAL_ADC_ConvCpltCallback+0x4fc>)
 800207c:	ed93 7a00 	vldr	s14, [r3]
 8002080:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8002084:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002088:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80020f8 <HAL_ADC_ConvCpltCallback+0x500>
 800208c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002090:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002094:	ee17 3a90 	vmov	r3, s15
 8002098:	b21a      	sxth	r2, r3
 800209a:	4b1f      	ldr	r3, [pc, #124]	@ (8002118 <HAL_ADC_ConvCpltCallback+0x520>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80020a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002118 <HAL_ADC_ConvCpltCallback+0x520>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2200      	movs	r2, #0
 80020a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80020a8:	e016      	b.n	80020d8 <HAL_ADC_ConvCpltCallback+0x4e0>
		}
		else
		{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80020aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002118 <HAL_ADC_ConvCpltCallback+0x520>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2200      	movs	r2, #0
 80020b0:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (int16_t )(output_current / 12.0f * 1023));
 80020b2:	4b10      	ldr	r3, [pc, #64]	@ (80020f4 <HAL_ADC_ConvCpltCallback+0x4fc>)
 80020b4:	ed93 7a00 	vldr	s14, [r3]
 80020b8:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 80020bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c0:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80020f8 <HAL_ADC_ConvCpltCallback+0x500>
 80020c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020cc:	ee17 3a90 	vmov	r3, s15
 80020d0:	b21a      	sxth	r2, r3
 80020d2:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <HAL_ADC_ConvCpltCallback+0x520>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	639a      	str	r2, [r3, #56]	@ 0x38
	else
	{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
	}
	HAL_GPIO_WritePin(DEBUG_OUT_GPIO_Port, DEBUG_OUT_Pin, GPIO_PIN_RESET);
 80020d8:	2200      	movs	r2, #0
 80020da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020de:	480f      	ldr	r0, [pc, #60]	@ (800211c <HAL_ADC_ConvCpltCallback+0x524>)
 80020e0:	f001 fe5a 	bl	8003d98 <HAL_GPIO_WritePin>
}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	ecbd 8b04 	vpop	{d8-d9}
 80020ee:	bdb0      	pop	{r4, r5, r7, pc}
 80020f0:	200000fc 	.word	0x200000fc
 80020f4:	20000100 	.word	0x20000100
 80020f8:	447fc000 	.word	0x447fc000
 80020fc:	20000268 	.word	0x20000268
 8002100:	20000110 	.word	0x20000110
 8002104:	20000114 	.word	0x20000114
 8002108:	20000264 	.word	0x20000264
 800210c:	200000f8 	.word	0x200000f8
 8002110:	20000084 	.word	0x20000084
 8002114:	20000260 	.word	0x20000260
 8002118:	200001bc 	.word	0x200001bc
 800211c:	48000400 	.word	0x48000400

08002120 <HAL_I2C_ListenCpltCallback>:


void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef *hi2c)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	// Re-enable i2c listen
	HAL_I2C_EnableListen_IT(hi2c);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f002 f87f 	bl	800422c <HAL_I2C_EnableListen_IT>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
 8002144:	4613      	mov	r3, r2
 8002146:	803b      	strh	r3, [r7, #0]
	if(TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10c      	bne.n	8002168 <HAL_I2C_AddrCallback+0x30>
	{
		//HAL_I2C_Slave_Sequential_Receive_IT(hi2c, rx_buffer, 32, I2C_FIRST_AND_LAST_FRAME);
		if(HAL_I2C_Slave_Sequential_Receive_IT(hi2c, rx_buffer, MAX_COMM_BUFFER_SIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 800214e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002152:	2207      	movs	r2, #7
 8002154:	4909      	ldr	r1, [pc, #36]	@ (800217c <HAL_I2C_AddrCallback+0x44>)
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f001 ffb6 	bl	80040c8 <HAL_I2C_Slave_Seq_Receive_IT>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <HAL_I2C_AddrCallback+0x3a>
		{
			Error_Handler();
 8002162:	f000 f857 	bl	8002214 <Error_Handler>
	}
	else  // master requesting the data
	{
		execute_read_command(received_address);
	}
}
 8002166:	e004      	b.n	8002172 <HAL_I2C_AddrCallback+0x3a>
		execute_read_command(received_address);
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <HAL_I2C_AddrCallback+0x48>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fc05 	bl	800197c <execute_read_command>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000298 	.word	0x20000298
 8002180:	20000258 	.word	0x20000258

08002184 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	//HAL_I2C_EnableListen_IT(hi2c);
	HAL_GPIO_WritePin(FAULT_LED_GPIO_Port, FAULT_LED_Pin, 1);
 80021a0:	2201      	movs	r2, #1
 80021a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021a6:	4803      	ldr	r0, [pc, #12]	@ (80021b4 <HAL_I2C_ErrorCallback+0x1c>)
 80021a8:	f001 fdf6 	bl	8003d98 <HAL_GPIO_WritePin>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	48000800 	.word	0x48000800

080021b8 <is_switch_pressed_debounced>:

uint8_t is_switch_pressed_debounced(GPIO_TypeDef* port, uint16_t pin, uint8_t *last_state, uint32_t *last_time) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	460b      	mov	r3, r1
 80021c6:	817b      	strh	r3, [r7, #10]
	uint8_t current_state = HAL_GPIO_ReadPin(port, pin);
 80021c8:	897b      	ldrh	r3, [r7, #10]
 80021ca:	4619      	mov	r1, r3
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f001 fdcb 	bl	8003d68 <HAL_GPIO_ReadPin>
 80021d2:	4603      	mov	r3, r0
 80021d4:	75fb      	strb	r3, [r7, #23]
	uint32_t current_tick = HAL_GetTick();
 80021d6:	f000 fad1 	bl	800277c <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

	if (current_state != *last_state) {
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	7dfa      	ldrb	r2, [r7, #23]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d005      	beq.n	80021f2 <is_switch_pressed_debounced+0x3a>
		*last_time = current_tick;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	601a      	str	r2, [r3, #0]
		*last_state = current_state;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	7dfa      	ldrb	r2, [r7, #23]
 80021f0:	701a      	strb	r2, [r3, #0]
	}

	return ((current_tick - *last_time) >= 5) && !current_state;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d904      	bls.n	8002208 <is_switch_pressed_debounced+0x50>
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <is_switch_pressed_debounced+0x50>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <is_switch_pressed_debounced+0x52>
 8002208:	2300      	movs	r3, #0
 800220a:	b2db      	uxtb	r3, r3
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002218:	b672      	cpsid	i
}
 800221a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(FAULT_LED_GPIO_Port, FAULT_LED_Pin);
 800221c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002220:	4804      	ldr	r0, [pc, #16]	@ (8002234 <Error_Handler+0x20>)
 8002222:	f001 fdd1 	bl	8003dc8 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8002226:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800222a:	f000 fab3 	bl	8002794 <HAL_Delay>
		HAL_GPIO_TogglePin(FAULT_LED_GPIO_Port, FAULT_LED_Pin);
 800222e:	bf00      	nop
 8002230:	e7f4      	b.n	800221c <Error_Handler+0x8>
 8002232:	bf00      	nop
 8002234:	48000800 	.word	0x48000800

08002238 <serial_communication_variable_init>:
 **********************************************************************************************/
/**
 * Zeroes the tx and rx buffers
 */
void serial_communication_variable_init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
	memset(tx_buffer, 0x00, MAX_COMM_BUFFER_SIZE);
 800223c:	2207      	movs	r2, #7
 800223e:	2100      	movs	r1, #0
 8002240:	4804      	ldr	r0, [pc, #16]	@ (8002254 <serial_communication_variable_init+0x1c>)
 8002242:	f007 f8d9 	bl	80093f8 <memset>
	memset(rx_buffer, 0x00, MAX_COMM_BUFFER_SIZE);
 8002246:	2207      	movs	r2, #7
 8002248:	2100      	movs	r1, #0
 800224a:	4803      	ldr	r0, [pc, #12]	@ (8002258 <serial_communication_variable_init+0x20>)
 800224c:	f007 f8d4 	bl	80093f8 <memset>
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000290 	.word	0x20000290
 8002258:	20000298 	.word	0x20000298

0800225c <prepare_WRITE_packet>:
 *
 * @param buffer tx buffer pointer
 * @return total message length
 */
uint16_t prepare_WRITE_packet(uint8_t * buffer, uint8_t virtual_memory_address, uint32_t value)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	460b      	mov	r3, r1
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	72fb      	strb	r3, [r7, #11]
	uint16_t packet_size = 7;
 800226a:	2307      	movs	r3, #7
 800226c:	82fb      	strh	r3, [r7, #22]
	ui32_to_ui8 conversion_union;

	conversion_union.ui32 = value;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	613b      	str	r3, [r7, #16]

	buffer[0] = COMMAND_WRITE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2205      	movs	r2, #5
 8002276:	701a      	strb	r2, [r3, #0]
	buffer[1] = packet_size;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3301      	adds	r3, #1
 800227c:	8afa      	ldrh	r2, [r7, #22]
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]
	buffer[2] = virtual_memory_address;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3302      	adds	r3, #2
 8002286:	7afa      	ldrb	r2, [r7, #11]
 8002288:	701a      	strb	r2, [r3, #0]
	buffer[3] = conversion_union.ui8[0];
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	3303      	adds	r3, #3
 800228e:	7c3a      	ldrb	r2, [r7, #16]
 8002290:	701a      	strb	r2, [r3, #0]
	buffer[4] = conversion_union.ui8[1];
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	3304      	adds	r3, #4
 8002296:	7c7a      	ldrb	r2, [r7, #17]
 8002298:	701a      	strb	r2, [r3, #0]
	buffer[5] = conversion_union.ui8[2];
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3305      	adds	r3, #5
 800229e:	7cba      	ldrb	r2, [r7, #18]
 80022a0:	701a      	strb	r2, [r3, #0]
	buffer[6] = conversion_union.ui8[3];
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3306      	adds	r3, #6
 80022a6:	7cfa      	ldrb	r2, [r7, #19]
 80022a8:	701a      	strb	r2, [r3, #0]
	return packet_size;
 80022aa:	8afb      	ldrh	r3, [r7, #22]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	371c      	adds	r7, #28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <read_data_from_WRITE_command>:
 * @param buffer pointer to the input buffer (it contains the received WRITE command)
 * @param read_address address at which the WRITE command is directed
 * @param data received uint32_t word
 */
void read_data_from_WRITE_command(uint8_t * buffer, uint8_t * read_address, uint32_t * data)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
	ui32_to_ui8 conversion_union;
	(*read_address) = buffer[2];
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	789a      	ldrb	r2, [r3, #2]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	701a      	strb	r2, [r3, #0]
	conversion_union.ui8[0] = buffer[3];
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	78db      	ldrb	r3, [r3, #3]
 80022d0:	753b      	strb	r3, [r7, #20]
	conversion_union.ui8[1] = buffer[4];
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	791b      	ldrb	r3, [r3, #4]
 80022d6:	757b      	strb	r3, [r7, #21]
	conversion_union.ui8[2] = buffer[5];
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	795b      	ldrb	r3, [r3, #5]
 80022dc:	75bb      	strb	r3, [r7, #22]
	conversion_union.ui8[3] = buffer[6];
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	799b      	ldrb	r3, [r3, #6]
 80022e2:	75fb      	strb	r3, [r7, #23]
	(*data) = conversion_union.ui32;
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	601a      	str	r2, [r3, #0]

	return;
 80022ea:	bf00      	nop
}
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fe:	4b0f      	ldr	r3, [pc, #60]	@ (800233c <HAL_MspInit+0x44>)
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	4a0e      	ldr	r2, [pc, #56]	@ (800233c <HAL_MspInit+0x44>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6193      	str	r3, [r2, #24]
 800230a:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <HAL_MspInit+0x44>)
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	4b09      	ldr	r3, [pc, #36]	@ (800233c <HAL_MspInit+0x44>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	4a08      	ldr	r2, [pc, #32]	@ (800233c <HAL_MspInit+0x44>)
 800231c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002320:	61d3      	str	r3, [r2, #28]
 8002322:	4b06      	ldr	r3, [pc, #24]	@ (800233c <HAL_MspInit+0x44>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800232e:	2007      	movs	r0, #7
 8002330:	f001 fb1c 	bl	800396c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000

08002340 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	@ 0x28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002360:	d12c      	bne.n	80023bc <HAL_ADC_MspInit+0x7c>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002362:	4b18      	ldr	r3, [pc, #96]	@ (80023c4 <HAL_ADC_MspInit+0x84>)
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	4a17      	ldr	r2, [pc, #92]	@ (80023c4 <HAL_ADC_MspInit+0x84>)
 8002368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800236c:	6153      	str	r3, [r2, #20]
 800236e:	4b15      	ldr	r3, [pc, #84]	@ (80023c4 <HAL_ADC_MspInit+0x84>)
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237a:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <HAL_ADC_MspInit+0x84>)
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	4a11      	ldr	r2, [pc, #68]	@ (80023c4 <HAL_ADC_MspInit+0x84>)
 8002380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002384:	6153      	str	r3, [r2, #20]
 8002386:	4b0f      	ldr	r3, [pc, #60]	@ (80023c4 <HAL_ADC_MspInit+0x84>)
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8002392:	2311      	movs	r3, #17
 8002394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002396:	2303      	movs	r3, #3
 8002398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4619      	mov	r1, r3
 80023a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023a8:	f001 fb6c 	bl	8003a84 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 1);
 80023ac:	2201      	movs	r2, #1
 80023ae:	2100      	movs	r1, #0
 80023b0:	2012      	movs	r0, #18
 80023b2:	f001 fae6 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80023b6:	2012      	movs	r0, #18
 80023b8:	f001 faff 	bl	80039ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80023bc:	bf00      	nop
 80023be:	3728      	adds	r7, #40	@ 0x28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000

080023c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	@ 0x28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002464 <HAL_I2C_MspInit+0x9c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d138      	bne.n	800245c <HAL_I2C_MspInit+0x94>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002468 <HAL_I2C_MspInit+0xa0>)
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002468 <HAL_I2C_MspInit+0xa0>)
 80023f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023f4:	6153      	str	r3, [r2, #20]
 80023f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002468 <HAL_I2C_MspInit+0xa0>)
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002402:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002408:	2312      	movs	r3, #18
 800240a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002410:	2303      	movs	r3, #3
 8002412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002414:	2304      	movs	r3, #4
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	4619      	mov	r1, r3
 800241e:	4813      	ldr	r0, [pc, #76]	@ (800246c <HAL_I2C_MspInit+0xa4>)
 8002420:	f001 fb30 	bl	8003a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002424:	4b10      	ldr	r3, [pc, #64]	@ (8002468 <HAL_I2C_MspInit+0xa0>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	4a0f      	ldr	r2, [pc, #60]	@ (8002468 <HAL_I2C_MspInit+0xa0>)
 800242a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800242e:	61d3      	str	r3, [r2, #28]
 8002430:	4b0d      	ldr	r3, [pc, #52]	@ (8002468 <HAL_I2C_MspInit+0xa0>)
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800243c:	2200      	movs	r2, #0
 800243e:	2100      	movs	r1, #0
 8002440:	201f      	movs	r0, #31
 8002442:	f001 fa9e 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002446:	201f      	movs	r0, #31
 8002448:	f001 fab7 	bl	80039ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800244c:	2200      	movs	r2, #0
 800244e:	2100      	movs	r1, #0
 8002450:	2020      	movs	r0, #32
 8002452:	f001 fa96 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002456:	2020      	movs	r0, #32
 8002458:	f001 faaf 	bl	80039ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800245c:	bf00      	nop
 800245e:	3728      	adds	r7, #40	@ 0x28
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40005400 	.word	0x40005400
 8002468:	40021000 	.word	0x40021000
 800246c:	48000400 	.word	0x48000400

08002470 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0a      	ldr	r2, [pc, #40]	@ (80024a8 <HAL_TIM_PWM_MspInit+0x38>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d10b      	bne.n	800249a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002482:	4b0a      	ldr	r3, [pc, #40]	@ (80024ac <HAL_TIM_PWM_MspInit+0x3c>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	4a09      	ldr	r2, [pc, #36]	@ (80024ac <HAL_TIM_PWM_MspInit+0x3c>)
 8002488:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800248c:	6193      	str	r3, [r2, #24]
 800248e:	4b07      	ldr	r3, [pc, #28]	@ (80024ac <HAL_TIM_PWM_MspInit+0x3c>)
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40012c00 	.word	0x40012c00
 80024ac:	40021000 	.word	0x40021000

080024b0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	@ 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024d0:	d128      	bne.n	8002524 <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024d2:	4b16      	ldr	r3, [pc, #88]	@ (800252c <HAL_TIM_Encoder_MspInit+0x7c>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	4a15      	ldr	r2, [pc, #84]	@ (800252c <HAL_TIM_Encoder_MspInit+0x7c>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	61d3      	str	r3, [r2, #28]
 80024de:	4b13      	ldr	r3, [pc, #76]	@ (800252c <HAL_TIM_Encoder_MspInit+0x7c>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	4b10      	ldr	r3, [pc, #64]	@ (800252c <HAL_TIM_Encoder_MspInit+0x7c>)
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	4a0f      	ldr	r2, [pc, #60]	@ (800252c <HAL_TIM_Encoder_MspInit+0x7c>)
 80024f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024f4:	6153      	str	r3, [r2, #20]
 80024f6:	4b0d      	ldr	r3, [pc, #52]	@ (800252c <HAL_TIM_Encoder_MspInit+0x7c>)
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002502:	2322      	movs	r3, #34	@ 0x22
 8002504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800250a:	2301      	movs	r3, #1
 800250c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002512:	2301      	movs	r3, #1
 8002514:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002520:	f001 fab0 	bl	8003a84 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002524:	bf00      	nop
 8002526:	3728      	adds	r7, #40	@ 0x28
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40021000 	.word	0x40021000

08002530 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a11      	ldr	r2, [pc, #68]	@ (8002594 <HAL_TIM_MspPostInit+0x64>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d11b      	bne.n	800258a <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002552:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <HAL_TIM_MspPostInit+0x68>)
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	4a10      	ldr	r2, [pc, #64]	@ (8002598 <HAL_TIM_MspPostInit+0x68>)
 8002558:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800255c:	6153      	str	r3, [r2, #20]
 800255e:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <HAL_TIM_MspPostInit+0x68>)
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800256a:	2303      	movs	r3, #3
 800256c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800257a:	2302      	movs	r3, #2
 800257c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800257e:	f107 030c 	add.w	r3, r7, #12
 8002582:	4619      	mov	r1, r3
 8002584:	4805      	ldr	r0, [pc, #20]	@ (800259c <HAL_TIM_MspPostInit+0x6c>)
 8002586:	f001 fa7d 	bl	8003a84 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800258a:	bf00      	nop
 800258c:	3720      	adds	r7, #32
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40012c00 	.word	0x40012c00
 8002598:	40021000 	.word	0x40021000
 800259c:	48000800 	.word	0x48000800

080025a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <NMI_Handler+0x4>

080025a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <HardFault_Handler+0x4>

080025b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <MemManage_Handler+0x4>

080025b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <BusFault_Handler+0x4>

080025c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <UsageFault_Handler+0x4>

080025c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025f6:	f000 f8ad 	bl	8002754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002604:	4802      	ldr	r0, [pc, #8]	@ (8002610 <ADC1_IRQHandler+0x10>)
 8002606:	f000 fb29 	bl	8002c5c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000118 	.word	0x20000118

08002614 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMA_Pin);
 8002618:	2020      	movs	r0, #32
 800261a:	f001 fbef 	bl	8003dfc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMB_Pin);
 800261e:	2040      	movs	r0, #64	@ 0x40
 8002620:	f001 fbec 	bl	8003dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}

08002628 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800262c:	4802      	ldr	r0, [pc, #8]	@ (8002638 <I2C1_EV_IRQHandler+0x10>)
 800262e:	f001 fe1d 	bl	800426c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000168 	.word	0x20000168

0800263c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002640:	4802      	ldr	r0, [pc, #8]	@ (800264c <I2C1_ER_IRQHandler+0x10>)
 8002642:	f001 fe2d 	bl	80042a0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000168 	.word	0x20000168

08002650 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002654:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <SystemInit+0x20>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265a:	4a05      	ldr	r2, [pc, #20]	@ (8002670 <SystemInit+0x20>)
 800265c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002660:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002674:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002678:	f7ff ffea 	bl	8002650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800267c:	480c      	ldr	r0, [pc, #48]	@ (80026b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800267e:	490d      	ldr	r1, [pc, #52]	@ (80026b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002680:	4a0d      	ldr	r2, [pc, #52]	@ (80026b8 <LoopForever+0xe>)
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002684:	e002      	b.n	800268c <LoopCopyDataInit>

08002686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268a:	3304      	adds	r3, #4

0800268c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800268c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800268e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002690:	d3f9      	bcc.n	8002686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002692:	4a0a      	ldr	r2, [pc, #40]	@ (80026bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002694:	4c0a      	ldr	r4, [pc, #40]	@ (80026c0 <LoopForever+0x16>)
  movs r3, #0
 8002696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002698:	e001      	b.n	800269e <LoopFillZerobss>

0800269a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800269c:	3204      	adds	r2, #4

0800269e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800269e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a0:	d3fb      	bcc.n	800269a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026a2:	f006 feb7 	bl	8009414 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026a6:	f7fe fdf5 	bl	8001294 <main>

080026aa <LoopForever>:

LoopForever:
    b LoopForever
 80026aa:	e7fe      	b.n	80026aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026ac:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80026b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80026b8:	08009520 	.word	0x08009520
  ldr r2, =_sbss
 80026bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80026c0:	200003dc 	.word	0x200003dc

080026c4 <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026c4:	e7fe      	b.n	80026c4 <CAN_RX1_IRQHandler>
	...

080026c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026cc:	4b08      	ldr	r3, [pc, #32]	@ (80026f0 <HAL_Init+0x28>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a07      	ldr	r2, [pc, #28]	@ (80026f0 <HAL_Init+0x28>)
 80026d2:	f043 0310 	orr.w	r3, r3, #16
 80026d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d8:	2003      	movs	r0, #3
 80026da:	f001 f947 	bl	800396c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026de:	2000      	movs	r0, #0
 80026e0:	f000 f808 	bl	80026f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026e4:	f7ff fe08 	bl	80022f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40022000 	.word	0x40022000

080026f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026fc:	4b12      	ldr	r3, [pc, #72]	@ (8002748 <HAL_InitTick+0x54>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b12      	ldr	r3, [pc, #72]	@ (800274c <HAL_InitTick+0x58>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4619      	mov	r1, r3
 8002706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800270a:	fbb3 f3f1 	udiv	r3, r3, r1
 800270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002712:	4618      	mov	r0, r3
 8002714:	f001 f95f 	bl	80039d6 <HAL_SYSTICK_Config>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e00e      	b.n	8002740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b0f      	cmp	r3, #15
 8002726:	d80a      	bhi.n	800273e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002728:	2200      	movs	r2, #0
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	f04f 30ff 	mov.w	r0, #4294967295
 8002730:	f001 f927 	bl	8003982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002734:	4a06      	ldr	r2, [pc, #24]	@ (8002750 <HAL_InitTick+0x5c>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
}
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	2000000c 	.word	0x2000000c
 800274c:	20000014 	.word	0x20000014
 8002750:	20000010 	.word	0x20000010

08002754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002758:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <HAL_IncTick+0x20>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <HAL_IncTick+0x24>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4413      	add	r3, r2
 8002764:	4a04      	ldr	r2, [pc, #16]	@ (8002778 <HAL_IncTick+0x24>)
 8002766:	6013      	str	r3, [r2, #0]
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	20000014 	.word	0x20000014
 8002778:	200002a0 	.word	0x200002a0

0800277c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002780:	4b03      	ldr	r3, [pc, #12]	@ (8002790 <HAL_GetTick+0x14>)
 8002782:	681b      	ldr	r3, [r3, #0]
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	200002a0 	.word	0x200002a0

08002794 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800279c:	f7ff ffee 	bl	800277c <HAL_GetTick>
 80027a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d005      	beq.n	80027ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ae:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <HAL_Delay+0x44>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4413      	add	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80027ba:	bf00      	nop
 80027bc:	f7ff ffde 	bl	800277c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d8f7      	bhi.n	80027bc <HAL_Delay+0x28>
  {
  }
}
 80027cc:	bf00      	nop
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000014 	.word	0x20000014

080027dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b09a      	sub	sp, #104	@ 0x68
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e169      	b.n	8002af8 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	d176      	bne.n	8002924 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d152      	bne.n	80028e4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff fd71 	bl	8002340 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d13b      	bne.n	80028e4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 ff47 	bl	8003700 <ADC_Disable>
 8002872:	4603      	mov	r3, r0
 8002874:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b00      	cmp	r3, #0
 8002882:	d12f      	bne.n	80028e4 <HAL_ADC_Init+0xe0>
 8002884:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002888:	2b00      	cmp	r3, #0
 800288a:	d12b      	bne.n	80028e4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002894:	f023 0302 	bic.w	r3, r3, #2
 8002898:	f043 0202 	orr.w	r2, r3, #2
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80028ae:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80028be:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028c0:	4b8f      	ldr	r3, [pc, #572]	@ (8002b00 <HAL_ADC_Init+0x2fc>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a8f      	ldr	r2, [pc, #572]	@ (8002b04 <HAL_ADC_Init+0x300>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0c9a      	lsrs	r2, r3, #18
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028d6:	e002      	b.n	80028de <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	3b01      	subs	r3, #1
 80028dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f9      	bne.n	80028d8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d007      	beq.n	8002902 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80028fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002900:	d110      	bne.n	8002924 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	f023 0312 	bic.w	r3, r3, #18
 800290a:	f043 0210 	orr.w	r2, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002916:	f043 0201 	orr.w	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	f040 80d6 	bne.w	8002ade <HAL_ADC_Init+0x2da>
 8002932:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002936:	2b00      	cmp	r3, #0
 8002938:	f040 80d1 	bne.w	8002ade <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002946:	2b00      	cmp	r3, #0
 8002948:	f040 80c9 	bne.w	8002ade <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002954:	f043 0202 	orr.w	r2, r3, #2
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800295c:	4b6a      	ldr	r3, [pc, #424]	@ (8002b08 <HAL_ADC_Init+0x304>)
 800295e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b01      	cmp	r3, #1
 8002970:	d108      	bne.n	8002984 <HAL_ADC_Init+0x180>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_ADC_Init+0x180>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_ADC_Init+0x182>
 8002984:	2300      	movs	r3, #0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d11c      	bne.n	80029c4 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800298a:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800298c:	2b00      	cmp	r3, #0
 800298e:	d010      	beq.n	80029b2 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d107      	bne.n	80029ac <HAL_ADC_Init+0x1a8>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_ADC_Init+0x1a8>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <HAL_ADC_Init+0x1aa>
 80029ac:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d108      	bne.n	80029c4 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80029b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	431a      	orrs	r2, r3
 80029c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029c2:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	7e5b      	ldrb	r3, [r3, #25]
 80029c8:	035b      	lsls	r3, r3, #13
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029ce:	2a01      	cmp	r2, #1
 80029d0:	d002      	beq.n	80029d8 <HAL_ADC_Init+0x1d4>
 80029d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029d6:	e000      	b.n	80029da <HAL_ADC_Init+0x1d6>
 80029d8:	2200      	movs	r2, #0
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80029ea:	4313      	orrs	r3, r2
 80029ec:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d11b      	bne.n	8002a30 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	7e5b      	ldrb	r3, [r3, #25]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d109      	bne.n	8002a14 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	3b01      	subs	r3, #1
 8002a06:	045a      	lsls	r2, r3, #17
 8002a08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a10:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a12:	e00d      	b.n	8002a30 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002a1c:	f043 0220 	orr.w	r2, r3, #32
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a28:	f043 0201 	orr.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d007      	beq.n	8002a48 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	4313      	orrs	r3, r2
 8002a42:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a44:	4313      	orrs	r3, r2
 8002a46:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d114      	bne.n	8002a80 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a64:	f023 0302 	bic.w	r3, r3, #2
 8002a68:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	7e1b      	ldrb	r3, [r3, #24]
 8002a6e:	039a      	lsls	r2, r3, #14
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	4b21      	ldr	r3, [pc, #132]	@ (8002b0c <HAL_ADC_Init+0x308>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002a90:	430b      	orrs	r3, r1
 8002a92:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d10c      	bne.n	8002ab6 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	f023 010f 	bic.w	r1, r3, #15
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	1e5a      	subs	r2, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ab4:	e007      	b.n	8002ac6 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 020f 	bic.w	r2, r2, #15
 8002ac4:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	f023 0303 	bic.w	r3, r3, #3
 8002ad4:	f043 0201 	orr.w	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	641a      	str	r2, [r3, #64]	@ 0x40
 8002adc:	e00a      	b.n	8002af4 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	f023 0312 	bic.w	r3, r3, #18
 8002ae6:	f043 0210 	orr.w	r2, r3, #16
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002aee:	2301      	movs	r3, #1
 8002af0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002af4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3768      	adds	r7, #104	@ 0x68
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	2000000c 	.word	0x2000000c
 8002b04:	431bde83 	.word	0x431bde83
 8002b08:	50000300 	.word	0x50000300
 8002b0c:	fff0c007 	.word	0xfff0c007

08002b10 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f040 8083 	bne.w	8002c32 <HAL_ADC_Start_IT+0x122>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_ADC_Start_IT+0x2a>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e07e      	b.n	8002c38 <HAL_ADC_Start_IT+0x128>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fd78 	bl	8003638 <ADC_Enable>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d16a      	bne.n	8002c28 <HAL_ADC_Start_IT+0x118>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	641a      	str	r2, [r3, #64]	@ 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d007      	beq.n	8002b90 <HAL_ADC_Start_IT+0x80>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b84:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b88:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	641a      	str	r2, [r3, #64]	@ 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b9c:	d106      	bne.n	8002bac <HAL_ADC_Start_IT+0x9c>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba2:	f023 0206 	bic.w	r2, r3, #6
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	645a      	str	r2, [r3, #68]	@ 0x44
 8002baa:	e002      	b.n	8002bb2 <HAL_ADC_Start_IT+0xa2>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	221c      	movs	r2, #28
 8002bc0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d110      	bne.n	8002bec <HAL_ADC_Start_IT+0xdc>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0204 	bic.w	r2, r2, #4
 8002bd8:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0208 	orr.w	r2, r2, #8
 8002be8:	605a      	str	r2, [r3, #4]
          break;
 8002bea:	e008      	b.n	8002bfe <HAL_ADC_Start_IT+0xee>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 020c 	orr.w	r2, r2, #12
 8002bfa:	605a      	str	r2, [r3, #4]
          break;
 8002bfc:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d107      	bne.n	8002c16 <HAL_ADC_Start_IT+0x106>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0210 	bic.w	r2, r2, #16
 8002c14:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0204 	orr.w	r2, r2, #4
 8002c24:	609a      	str	r2, [r3, #8]
 8002c26:	e006      	b.n	8002c36 <HAL_ADC_Start_IT+0x126>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002c30:	e001      	b.n	8002c36 <HAL_ADC_Start_IT+0x126>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c32:	2302      	movs	r3, #2
 8002c34:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d004      	beq.n	8002c94 <HAL_ADC_IRQHandler+0x38>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <HAL_ADC_IRQHandler+0x4c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d05a      	beq.n	8002d54 <HAL_ADC_IRQHandler+0xf8>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d055      	beq.n	8002d54 <HAL_ADC_IRQHandler+0xf8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d105      	bne.n	8002cc0 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d137      	bne.n	8002d46 <HAL_ADC_IRQHandler+0xea>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d132      	bne.n	8002d46 <HAL_ADC_IRQHandler+0xea>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d02d      	beq.n	8002d46 <HAL_ADC_IRQHandler+0xea>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d11a      	bne.n	8002d2e <HAL_ADC_IRQHandler+0xd2>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 020c 	bic.w	r2, r2, #12
 8002d06:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d112      	bne.n	8002d46 <HAL_ADC_IRQHandler+0xea>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	f043 0201 	orr.w	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d2c:	e00b      	b.n	8002d46 <HAL_ADC_IRQHandler+0xea>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	f043 0210 	orr.w	r2, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3e:	f043 0201 	orr.w	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fe ff56 	bl	8001bf8 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	220c      	movs	r2, #12
 8002d52:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d004      	beq.n	8002d68 <HAL_ADC_IRQHandler+0x10c>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_ADC_IRQHandler+0x120>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d069      	beq.n	8002e46 <HAL_ADC_IRQHandler+0x1ea>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d064      	beq.n	8002e46 <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d14c      	bne.n	8002e38 <HAL_ADC_IRQHandler+0x1dc>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00b      	beq.n	8002dc0 <HAL_ADC_IRQHandler+0x164>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d140      	bne.n	8002e38 <HAL_ADC_IRQHandler+0x1dc>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d13b      	bne.n	8002e38 <HAL_ADC_IRQHandler+0x1dc>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d036      	beq.n	8002e38 <HAL_ADC_IRQHandler+0x1dc>
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d12d      	bne.n	8002e38 <HAL_ADC_IRQHandler+0x1dc>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d11a      	bne.n	8002e20 <HAL_ADC_IRQHandler+0x1c4>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002df8:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d112      	bne.n	8002e38 <HAL_ADC_IRQHandler+0x1dc>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e1e:	e00b      	b.n	8002e38 <HAL_ADC_IRQHandler+0x1dc>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	f043 0210 	orr.w	r2, r3, #16
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e30:	f043 0201 	orr.w	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f923 	bl	8003084 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2260      	movs	r2, #96	@ 0x60
 8002e44:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d011      	beq.n	8002e74 <HAL_ADC_IRQHandler+0x218>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00c      	beq.n	8002e74 <HAL_ADC_IRQHandler+0x218>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff fcb8 	bl	80027dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2280      	movs	r2, #128	@ 0x80
 8002e72:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d012      	beq.n	8002ea4 <HAL_ADC_IRQHandler+0x248>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00d      	beq.n	8002ea4 <HAL_ADC_IRQHandler+0x248>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f909 	bl	80030ac <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ea2:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d012      	beq.n	8002ed4 <HAL_ADC_IRQHandler+0x278>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00d      	beq.n	8002ed4 <HAL_ADC_IRQHandler+0x278>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f8fb 	bl	80030c0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ed2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d03b      	beq.n	8002f56 <HAL_ADC_IRQHandler+0x2fa>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d036      	beq.n	8002f56 <HAL_ADC_IRQHandler+0x2fa>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d102      	bne.n	8002ef6 <HAL_ADC_IRQHandler+0x29a>
    {
      overrun_error = 1U;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	e019      	b.n	8002f2a <HAL_ADC_IRQHandler+0x2ce>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ef6:	4b29      	ldr	r3, [pc, #164]	@ (8002f9c <HAL_ADC_IRQHandler+0x340>)
 8002ef8:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_ADC_IRQHandler+0x2be>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d10a      	bne.n	8002f2a <HAL_ADC_IRQHandler+0x2ce>
        {
          overrun_error = 1U;  
 8002f14:	2301      	movs	r3, #1
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	e007      	b.n	8002f2a <HAL_ADC_IRQHandler+0x2ce>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_ADC_IRQHandler+0x2ce>
        {
          overrun_error = 1U;  
 8002f26:	2301      	movs	r3, #1
 8002f28:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d10e      	bne.n	8002f4e <HAL_ADC_IRQHandler+0x2f2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f40:	f043 0202 	orr.w	r2, r3, #2
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff fc51 	bl	80027f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2210      	movs	r2, #16
 8002f54:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d018      	beq.n	8002f92 <HAL_ADC_IRQHandler+0x336>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d013      	beq.n	8002f92 <HAL_ADC_IRQHandler+0x336>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7a:	f043 0208 	orr.w	r2, r3, #8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f8a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f883 	bl	8003098 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002f92:	bf00      	nop
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	50000300 	.word	0x50000300

08002fa0 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_ADCEx_Calibration_Start+0x1c>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e05f      	b.n	800307c <HAL_ADCEx_Calibration_Start+0xdc>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 fb9b 	bl	8003700 <ADC_Disable>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d14e      	bne.n	8003072 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8002fe8:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d107      	bne.n	8003000 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ffe:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800300e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003010:	f7ff fbb4 	bl	800277c <HAL_GetTick>
 8003014:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003016:	e01c      	b.n	8003052 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003018:	f7ff fbb0 	bl	800277c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b0a      	cmp	r3, #10
 8003024:	d915      	bls.n	8003052 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003030:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003034:	d10d      	bne.n	8003052 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	f023 0312 	bic.w	r3, r3, #18
 800303e:	f043 0210 	orr.w	r2, r3, #16
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e014      	b.n	800307c <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800305c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003060:	d0da      	beq.n	8003018 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	f023 0303 	bic.w	r3, r3, #3
 800306a:	f043 0201 	orr.w	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800307a:	7bfb      	ldrb	r3, [r7, #15]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b09b      	sub	sp, #108	@ 0x6c
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x22>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e295      	b.n	8003622 <HAL_ADC_ConfigChannel+0x54e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	f040 8279 	bne.w	8003600 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b04      	cmp	r3, #4
 8003114:	d81c      	bhi.n	8003150 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	461a      	mov	r2, r3
 800312a:	231f      	movs	r3, #31
 800312c:	4093      	lsls	r3, r2
 800312e:	43db      	mvns	r3, r3
 8003130:	4019      	ands	r1, r3
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4413      	add	r3, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	fa00 f203 	lsl.w	r2, r0, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	631a      	str	r2, [r3, #48]	@ 0x30
 800314e:	e063      	b.n	8003218 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b09      	cmp	r3, #9
 8003156:	d81e      	bhi.n	8003196 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4413      	add	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	3b1e      	subs	r3, #30
 800316c:	221f      	movs	r2, #31
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	4019      	ands	r1, r3
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4413      	add	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	3b1e      	subs	r3, #30
 8003188:	fa00 f203 	lsl.w	r2, r0, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	635a      	str	r2, [r3, #52]	@ 0x34
 8003194:	e040      	b.n	8003218 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b0e      	cmp	r3, #14
 800319c:	d81e      	bhi.n	80031dc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	3b3c      	subs	r3, #60	@ 0x3c
 80031b2:	221f      	movs	r2, #31
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	4019      	ands	r1, r3
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	3b3c      	subs	r3, #60	@ 0x3c
 80031ce:	fa00 f203 	lsl.w	r2, r0, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80031da:	e01d      	b.n	8003218 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	3b5a      	subs	r3, #90	@ 0x5a
 80031f0:	221f      	movs	r2, #31
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	4019      	ands	r1, r3
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	3b5a      	subs	r3, #90	@ 0x5a
 800320c:	fa00 f203 	lsl.w	r2, r0, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b00      	cmp	r3, #0
 8003224:	f040 80e5 	bne.w	80033f2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b09      	cmp	r3, #9
 800322e:	d91c      	bls.n	800326a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6999      	ldr	r1, [r3, #24]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4613      	mov	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	4413      	add	r3, r2
 8003240:	3b1e      	subs	r3, #30
 8003242:	2207      	movs	r2, #7
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	4019      	ands	r1, r3
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	6898      	ldr	r0, [r3, #8]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	3b1e      	subs	r3, #30
 800325c:	fa00 f203 	lsl.w	r2, r0, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	619a      	str	r2, [r3, #24]
 8003268:	e019      	b.n	800329e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6959      	ldr	r1, [r3, #20]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	4613      	mov	r3, r2
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4413      	add	r3, r2
 800327a:	2207      	movs	r2, #7
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	4019      	ands	r1, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6898      	ldr	r0, [r3, #8]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	fa00 f203 	lsl.w	r2, r0, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	08db      	lsrs	r3, r3, #3
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d84f      	bhi.n	8003360 <HAL_ADC_ConfigChannel+0x28c>
 80032c0:	a201      	add	r2, pc, #4	@ (adr r2, 80032c8 <HAL_ADC_ConfigChannel+0x1f4>)
 80032c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c6:	bf00      	nop
 80032c8:	080032d9 	.word	0x080032d9
 80032cc:	080032fb 	.word	0x080032fb
 80032d0:	0800331d 	.word	0x0800331d
 80032d4:	0800333f 	.word	0x0800333f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80032de:	4b97      	ldr	r3, [pc, #604]	@ (800353c <HAL_ADC_ConfigChannel+0x468>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	0691      	lsls	r1, r2, #26
 80032e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80032ea:	430a      	orrs	r2, r1
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80032f6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80032f8:	e07b      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003300:	4b8e      	ldr	r3, [pc, #568]	@ (800353c <HAL_ADC_ConfigChannel+0x468>)
 8003302:	4013      	ands	r3, r2
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	0691      	lsls	r1, r2, #26
 800330a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800330c:	430a      	orrs	r2, r1
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003318:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800331a:	e06a      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003322:	4b86      	ldr	r3, [pc, #536]	@ (800353c <HAL_ADC_ConfigChannel+0x468>)
 8003324:	4013      	ands	r3, r2
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	0691      	lsls	r1, r2, #26
 800332c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800332e:	430a      	orrs	r2, r1
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800333a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800333c:	e059      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003344:	4b7d      	ldr	r3, [pc, #500]	@ (800353c <HAL_ADC_ConfigChannel+0x468>)
 8003346:	4013      	ands	r3, r2
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	0691      	lsls	r1, r2, #26
 800334e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003350:	430a      	orrs	r2, r1
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800335c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800335e:	e048      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003366:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	069b      	lsls	r3, r3, #26
 8003370:	429a      	cmp	r2, r3
 8003372:	d107      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003382:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800338a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	069b      	lsls	r3, r3, #26
 8003394:	429a      	cmp	r2, r3
 8003396:	d107      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80033a6:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	069b      	lsls	r3, r3, #26
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d107      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80033ca:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	069b      	lsls	r3, r3, #26
 80033dc:	429a      	cmp	r2, r3
 80033de:	d107      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80033ee:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80033f0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d108      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x33e>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x33e>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_ADC_ConfigChannel+0x340>
 8003412:	2300      	movs	r3, #0
 8003414:	2b00      	cmp	r3, #0
 8003416:	f040 80fe 	bne.w	8003616 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d00f      	beq.n	8003442 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2201      	movs	r2, #1
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43da      	mvns	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	400a      	ands	r2, r1
 800343c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8003440:	e049      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2201      	movs	r2, #1
 8003450:	409a      	lsls	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b09      	cmp	r3, #9
 8003462:	d91c      	bls.n	800349e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6999      	ldr	r1, [r3, #24]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4613      	mov	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4413      	add	r3, r2
 8003474:	3b1b      	subs	r3, #27
 8003476:	2207      	movs	r2, #7
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	4019      	ands	r1, r3
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	6898      	ldr	r0, [r3, #8]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4613      	mov	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	4413      	add	r3, r2
 800348e:	3b1b      	subs	r3, #27
 8003490:	fa00 f203 	lsl.w	r2, r0, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	619a      	str	r2, [r3, #24]
 800349c:	e01b      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6959      	ldr	r1, [r3, #20]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	4613      	mov	r3, r2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	4413      	add	r3, r2
 80034b0:	2207      	movs	r2, #7
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	4019      	ands	r1, r3
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6898      	ldr	r0, [r3, #8]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	4613      	mov	r3, r2
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	4413      	add	r3, r2
 80034ca:	fa00 f203 	lsl.w	r2, r0, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003540 <HAL_ADC_ConfigChannel+0x46c>)
 80034d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d105      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80034e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d014      	beq.n	8003518 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80034f2:	2b11      	cmp	r3, #17
 80034f4:	d105      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80034f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003506:	2b12      	cmp	r3, #18
 8003508:	f040 8085 	bne.w	8003616 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800350c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003514:	2b00      	cmp	r3, #0
 8003516:	d17e      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b01      	cmp	r3, #1
 8003528:	d10c      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x470>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b01      	cmp	r3, #1
 8003536:	d105      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x470>
 8003538:	2301      	movs	r3, #1
 800353a:	e004      	b.n	8003546 <HAL_ADC_ConfigChannel+0x472>
 800353c:	83fff000 	.word	0x83fff000
 8003540:	50000300 	.word	0x50000300
 8003544:	2300      	movs	r3, #0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d150      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800354a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800354c:	2b00      	cmp	r3, #0
 800354e:	d010      	beq.n	8003572 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b01      	cmp	r3, #1
 800355a:	d107      	bne.n	800356c <HAL_ADC_ConfigChannel+0x498>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_ADC_ConfigChannel+0x498>
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <HAL_ADC_ConfigChannel+0x49a>
 800356c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800356e:	2b00      	cmp	r3, #0
 8003570:	d13c      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b10      	cmp	r3, #16
 8003578:	d11d      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x4e2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003582:	d118      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003584:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800358c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800358e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003590:	4b27      	ldr	r3, [pc, #156]	@ (8003630 <HAL_ADC_ConfigChannel+0x55c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a27      	ldr	r2, [pc, #156]	@ (8003634 <HAL_ADC_ConfigChannel+0x560>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	0c9a      	lsrs	r2, r3, #18
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035a6:	e002      	b.n	80035ae <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f9      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80035b4:	e02e      	b.n	8003614 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b11      	cmp	r3, #17
 80035bc:	d10b      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x502>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035c6:	d106      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80035c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80035d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035d2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80035d4:	e01e      	b.n	8003614 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b12      	cmp	r3, #18
 80035dc:	d11a      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80035de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80035e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035e8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80035ea:	e013      	b.n	8003614 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	f043 0220 	orr.w	r2, r3, #32
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80035fe:	e00a      	b.n	8003616 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003612:	e000      	b.n	8003616 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003614:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800361e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003622:	4618      	mov	r0, r3
 8003624:	376c      	adds	r7, #108	@ 0x6c
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	2000000c 	.word	0x2000000c
 8003634:	431bde83 	.word	0x431bde83

08003638 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	2b01      	cmp	r3, #1
 8003650:	d108      	bne.n	8003664 <ADC_Enable+0x2c>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <ADC_Enable+0x2c>
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <ADC_Enable+0x2e>
 8003664:	2300      	movs	r3, #0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d143      	bne.n	80036f2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	4b22      	ldr	r3, [pc, #136]	@ (80036fc <ADC_Enable+0xc4>)
 8003672:	4013      	ands	r3, r2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00d      	beq.n	8003694 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	f043 0210 	orr.w	r2, r3, #16
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003688:	f043 0201 	orr.w	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e02f      	b.n	80036f4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80036a4:	f7ff f86a 	bl	800277c <HAL_GetTick>
 80036a8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80036aa:	e01b      	b.n	80036e4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036ac:	f7ff f866 	bl	800277c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d914      	bls.n	80036e4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d00d      	beq.n	80036e4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	f043 0210 	orr.w	r2, r3, #16
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d8:	f043 0201 	orr.w	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e007      	b.n	80036f4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d1dc      	bne.n	80036ac <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	8000003f 	.word	0x8000003f

08003700 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d108      	bne.n	800372c <ADC_Disable+0x2c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <ADC_Disable+0x2c>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <ADC_Disable+0x2e>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d047      	beq.n	80037c2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 030d 	and.w	r3, r3, #13
 800373c:	2b01      	cmp	r3, #1
 800373e:	d10f      	bne.n	8003760 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0202 	orr.w	r2, r2, #2
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2203      	movs	r2, #3
 8003756:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003758:	f7ff f810 	bl	800277c <HAL_GetTick>
 800375c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800375e:	e029      	b.n	80037b4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003764:	f043 0210 	orr.w	r2, r3, #16
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003770:	f043 0201 	orr.w	r2, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e023      	b.n	80037c4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800377c:	f7fe fffe 	bl	800277c <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d914      	bls.n	80037b4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b01      	cmp	r3, #1
 8003796:	d10d      	bne.n	80037b4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	f043 0210 	orr.w	r2, r3, #16
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a8:	f043 0201 	orr.w	r2, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e007      	b.n	80037c4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d0dc      	beq.n	800377c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <__NVIC_SetPriorityGrouping+0x44>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037e8:	4013      	ands	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037fe:	4a04      	ldr	r2, [pc, #16]	@ (8003810 <__NVIC_SetPriorityGrouping+0x44>)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	60d3      	str	r3, [r2, #12]
}
 8003804:	bf00      	nop
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003818:	4b04      	ldr	r3, [pc, #16]	@ (800382c <__NVIC_GetPriorityGrouping+0x18>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	0a1b      	lsrs	r3, r3, #8
 800381e:	f003 0307 	and.w	r3, r3, #7
}
 8003822:	4618      	mov	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	2b00      	cmp	r3, #0
 8003840:	db0b      	blt.n	800385a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	f003 021f 	and.w	r2, r3, #31
 8003848:	4907      	ldr	r1, [pc, #28]	@ (8003868 <__NVIC_EnableIRQ+0x38>)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	2001      	movs	r0, #1
 8003852:	fa00 f202 	lsl.w	r2, r0, r2
 8003856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	e000e100 	.word	0xe000e100

0800386c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	6039      	str	r1, [r7, #0]
 8003876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387c:	2b00      	cmp	r3, #0
 800387e:	db0a      	blt.n	8003896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	b2da      	uxtb	r2, r3
 8003884:	490c      	ldr	r1, [pc, #48]	@ (80038b8 <__NVIC_SetPriority+0x4c>)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	0112      	lsls	r2, r2, #4
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	440b      	add	r3, r1
 8003890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003894:	e00a      	b.n	80038ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	4908      	ldr	r1, [pc, #32]	@ (80038bc <__NVIC_SetPriority+0x50>)
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	3b04      	subs	r3, #4
 80038a4:	0112      	lsls	r2, r2, #4
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	440b      	add	r3, r1
 80038aa:	761a      	strb	r2, [r3, #24]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	e000e100 	.word	0xe000e100
 80038bc:	e000ed00 	.word	0xe000ed00

080038c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b089      	sub	sp, #36	@ 0x24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f1c3 0307 	rsb	r3, r3, #7
 80038da:	2b04      	cmp	r3, #4
 80038dc:	bf28      	it	cs
 80038de:	2304      	movcs	r3, #4
 80038e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3304      	adds	r3, #4
 80038e6:	2b06      	cmp	r3, #6
 80038e8:	d902      	bls.n	80038f0 <NVIC_EncodePriority+0x30>
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3b03      	subs	r3, #3
 80038ee:	e000      	b.n	80038f2 <NVIC_EncodePriority+0x32>
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f4:	f04f 32ff 	mov.w	r2, #4294967295
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43da      	mvns	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	401a      	ands	r2, r3
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003908:	f04f 31ff 	mov.w	r1, #4294967295
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fa01 f303 	lsl.w	r3, r1, r3
 8003912:	43d9      	mvns	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003918:	4313      	orrs	r3, r2
         );
}
 800391a:	4618      	mov	r0, r3
 800391c:	3724      	adds	r7, #36	@ 0x24
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3b01      	subs	r3, #1
 8003934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003938:	d301      	bcc.n	800393e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800393a:	2301      	movs	r3, #1
 800393c:	e00f      	b.n	800395e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800393e:	4a0a      	ldr	r2, [pc, #40]	@ (8003968 <SysTick_Config+0x40>)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3b01      	subs	r3, #1
 8003944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003946:	210f      	movs	r1, #15
 8003948:	f04f 30ff 	mov.w	r0, #4294967295
 800394c:	f7ff ff8e 	bl	800386c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003950:	4b05      	ldr	r3, [pc, #20]	@ (8003968 <SysTick_Config+0x40>)
 8003952:	2200      	movs	r2, #0
 8003954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003956:	4b04      	ldr	r3, [pc, #16]	@ (8003968 <SysTick_Config+0x40>)
 8003958:	2207      	movs	r2, #7
 800395a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	e000e010 	.word	0xe000e010

0800396c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ff29 	bl	80037cc <__NVIC_SetPriorityGrouping>
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	4603      	mov	r3, r0
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003994:	f7ff ff3e 	bl	8003814 <__NVIC_GetPriorityGrouping>
 8003998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	6978      	ldr	r0, [r7, #20]
 80039a0:	f7ff ff8e 	bl	80038c0 <NVIC_EncodePriority>
 80039a4:	4602      	mov	r2, r0
 80039a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff5d 	bl	800386c <__NVIC_SetPriority>
}
 80039b2:	bf00      	nop
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4603      	mov	r3, r0
 80039c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff ff31 	bl	8003830 <__NVIC_EnableIRQ>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff ffa2 	bl	8003928 <SysTick_Config>
 80039e4:	4603      	mov	r3, r0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d005      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2204      	movs	r2, #4
 8003a08:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	73fb      	strb	r3, [r7, #15]
 8003a0e:	e027      	b.n	8003a60 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 020e 	bic.w	r2, r2, #14
 8003a1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0201 	bic.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a38:	2101      	movs	r1, #1
 8003a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	4798      	blx	r3
    }
  }
  return status;
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a92:	e14e      	b.n	8003d32 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	2101      	movs	r1, #1
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 8140 	beq.w	8003d2c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d005      	beq.n	8003ac4 <HAL_GPIO_Init+0x40>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d130      	bne.n	8003b26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	2203      	movs	r2, #3
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003afa:	2201      	movs	r2, #1
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43db      	mvns	r3, r3
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4013      	ands	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	091b      	lsrs	r3, r3, #4
 8003b10:	f003 0201 	and.w	r2, r3, #1
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d017      	beq.n	8003b62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4013      	ands	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d123      	bne.n	8003bb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	08da      	lsrs	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3208      	adds	r2, #8
 8003b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	220f      	movs	r2, #15
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	08da      	lsrs	r2, r3, #3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3208      	adds	r2, #8
 8003bb0:	6939      	ldr	r1, [r7, #16]
 8003bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	2203      	movs	r2, #3
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 0203 	and.w	r2, r3, #3
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 809a 	beq.w	8003d2c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf8:	4b55      	ldr	r3, [pc, #340]	@ (8003d50 <HAL_GPIO_Init+0x2cc>)
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	4a54      	ldr	r2, [pc, #336]	@ (8003d50 <HAL_GPIO_Init+0x2cc>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	6193      	str	r3, [r2, #24]
 8003c04:	4b52      	ldr	r3, [pc, #328]	@ (8003d50 <HAL_GPIO_Init+0x2cc>)
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c10:	4a50      	ldr	r2, [pc, #320]	@ (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	089b      	lsrs	r3, r3, #2
 8003c16:	3302      	adds	r3, #2
 8003c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	220f      	movs	r2, #15
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4013      	ands	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003c3a:	d013      	beq.n	8003c64 <HAL_GPIO_Init+0x1e0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a46      	ldr	r2, [pc, #280]	@ (8003d58 <HAL_GPIO_Init+0x2d4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00d      	beq.n	8003c60 <HAL_GPIO_Init+0x1dc>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a45      	ldr	r2, [pc, #276]	@ (8003d5c <HAL_GPIO_Init+0x2d8>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d007      	beq.n	8003c5c <HAL_GPIO_Init+0x1d8>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a44      	ldr	r2, [pc, #272]	@ (8003d60 <HAL_GPIO_Init+0x2dc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d101      	bne.n	8003c58 <HAL_GPIO_Init+0x1d4>
 8003c54:	2303      	movs	r3, #3
 8003c56:	e006      	b.n	8003c66 <HAL_GPIO_Init+0x1e2>
 8003c58:	2305      	movs	r3, #5
 8003c5a:	e004      	b.n	8003c66 <HAL_GPIO_Init+0x1e2>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e002      	b.n	8003c66 <HAL_GPIO_Init+0x1e2>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <HAL_GPIO_Init+0x1e2>
 8003c64:	2300      	movs	r3, #0
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	f002 0203 	and.w	r2, r2, #3
 8003c6c:	0092      	lsls	r2, r2, #2
 8003c6e:	4093      	lsls	r3, r2
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c76:	4937      	ldr	r1, [pc, #220]	@ (8003d54 <HAL_GPIO_Init+0x2d0>)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	089b      	lsrs	r3, r3, #2
 8003c7c:	3302      	adds	r3, #2
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c84:	4b37      	ldr	r3, [pc, #220]	@ (8003d64 <HAL_GPIO_Init+0x2e0>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003ca8:	4a2e      	ldr	r2, [pc, #184]	@ (8003d64 <HAL_GPIO_Init+0x2e0>)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cae:	4b2d      	ldr	r3, [pc, #180]	@ (8003d64 <HAL_GPIO_Init+0x2e0>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003cd2:	4a24      	ldr	r2, [pc, #144]	@ (8003d64 <HAL_GPIO_Init+0x2e0>)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cd8:	4b22      	ldr	r3, [pc, #136]	@ (8003d64 <HAL_GPIO_Init+0x2e0>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003cfc:	4a19      	ldr	r2, [pc, #100]	@ (8003d64 <HAL_GPIO_Init+0x2e0>)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d02:	4b18      	ldr	r3, [pc, #96]	@ (8003d64 <HAL_GPIO_Init+0x2e0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d26:	4a0f      	ldr	r2, [pc, #60]	@ (8003d64 <HAL_GPIO_Init+0x2e0>)
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f47f aea9 	bne.w	8003a94 <HAL_GPIO_Init+0x10>
  }
}
 8003d42:	bf00      	nop
 8003d44:	bf00      	nop
 8003d46:	371c      	adds	r7, #28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40010000 	.word	0x40010000
 8003d58:	48000400 	.word	0x48000400
 8003d5c:	48000800 	.word	0x48000800
 8003d60:	48000c00 	.word	0x48000c00
 8003d64:	40010400 	.word	0x40010400

08003d68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	887b      	ldrh	r3, [r7, #2]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
 8003d84:	e001      	b.n	8003d8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d86:	2300      	movs	r3, #0
 8003d88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	807b      	strh	r3, [r7, #2]
 8003da4:	4613      	mov	r3, r2
 8003da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003da8:	787b      	ldrb	r3, [r7, #1]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dae:	887a      	ldrh	r2, [r7, #2]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003db4:	e002      	b.n	8003dbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003db6:	887a      	ldrh	r2, [r7, #2]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dda:	887a      	ldrh	r2, [r7, #2]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4013      	ands	r3, r2
 8003de0:	041a      	lsls	r2, r3, #16
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	43d9      	mvns	r1, r3
 8003de6:	887b      	ldrh	r3, [r7, #2]
 8003de8:	400b      	ands	r3, r1
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	619a      	str	r2, [r3, #24]
}
 8003df0:	bf00      	nop
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e06:	4b08      	ldr	r3, [pc, #32]	@ (8003e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d006      	beq.n	8003e20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e12:	4a05      	ldr	r2, [pc, #20]	@ (8003e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e14:	88fb      	ldrh	r3, [r7, #6]
 8003e16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fd fe9a 	bl	8001b54 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40010400 	.word	0x40010400

08003e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e08d      	b.n	8003f5a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fe fab8 	bl	80023c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2224      	movs	r2, #36	@ 0x24
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0201 	bic.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003e7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d107      	bne.n	8003ea6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	e006      	b.n	8003eb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003eb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d108      	bne.n	8003ece <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	e007      	b.n	8003ede <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003edc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6812      	ldr	r2, [r2, #0]
 8003ee8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003eec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ef0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691a      	ldr	r2, [r3, #16]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69d9      	ldr	r1, [r3, #28]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1a      	ldr	r2, [r3, #32]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	4613      	mov	r3, r2
 8003f72:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f80:	2b28      	cmp	r3, #40	@ 0x28
 8003f82:	f040 8098 	bne.w	80040b6 <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8003f8c:	88fb      	ldrh	r3, [r7, #6]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d105      	bne.n	8003f9e <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f98:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e08c      	b.n	80040b8 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003f9e:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f001 fbfe 	bl	80057a4 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e080      	b.n	80040b8 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fc8:	d12a      	bne.n	8004020 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003fca:	2102      	movs	r1, #2
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f001 fbe9 	bl	80057a4 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fe0:	d11e      	bne.n	8004020 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ff0:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d012      	beq.n	8004020 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffe:	4a30      	ldr	r2, [pc, #192]	@ (80040c0 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8004000:	635a      	str	r2, [r3, #52]	@ 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff fcf1 	bl	80039ee <HAL_DMA_Abort_IT>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d006      	beq.n	8004020 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800401c:	4610      	mov	r0, r2
 800401e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2229      	movs	r2, #41	@ 0x29
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004044:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	88fa      	ldrh	r2, [r7, #6]
 8004050:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4a17      	ldr	r2, [pc, #92]	@ (80040c4 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8004066:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b08      	cmp	r3, #8
 8004074:	bf0c      	ite	eq
 8004076:	2301      	moveq	r3, #1
 8004078:	2300      	movne	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	0c1b      	lsrs	r3, r3, #16
 8004086:	b2db      	uxtb	r3, r3
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	d106      	bne.n	80040a0 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8004092:	7dfb      	ldrb	r3, [r7, #23]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2208      	movs	r2, #8
 800409e:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80040a8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f001 faf5 	bl	800569c <I2C_Enable_IRQ>

    return HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e000      	b.n	80040b8 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
  }
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	080055fb 	.word	0x080055fb
 80040c4:	080043c7 	.word	0x080043c7

080040c8 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80040e4:	2b28      	cmp	r3, #40	@ 0x28
 80040e6:	f040 8098 	bne.w	800421a <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 80040f0:	88fb      	ldrh	r3, [r7, #6]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d105      	bne.n	8004102 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040fc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e08c      	b.n	800421c <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004102:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f001 fb4c 	bl	80057a4 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8004116:	2302      	movs	r3, #2
 8004118:	e080      	b.n	800421c <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b29      	cmp	r3, #41	@ 0x29
 800412c:	d12a      	bne.n	8004184 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800412e:	2101      	movs	r1, #1
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f001 fb37 	bl	80057a4 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004140:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004144:	d11e      	bne.n	8004184 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004154:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415a:	2b00      	cmp	r3, #0
 800415c:	d012      	beq.n	8004184 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004162:	4a30      	ldr	r2, [pc, #192]	@ (8004224 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8004164:	635a      	str	r2, [r3, #52]	@ 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff fc3f 	bl	80039ee <HAL_DMA_Abort_IT>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d006      	beq.n	8004184 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004180:	4610      	mov	r0, r2
 8004182:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	222a      	movs	r2, #42	@ 0x2a
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041a8:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	88fa      	ldrh	r2, [r7, #6]
 80041b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4a17      	ldr	r2, [pc, #92]	@ (8004228 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 80041ca:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	bf0c      	ite	eq
 80041da:	2301      	moveq	r3, #1
 80041dc:	2300      	movne	r3, #0
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	0c1b      	lsrs	r3, r3, #16
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2208      	movs	r2, #8
 8004202:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 800420c:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f001 fa43 	bl	800569c <I2C_Enable_IRQ>

    return HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	e000      	b.n	800421c <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
  }
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	080055fb 	.word	0x080055fb
 8004228:	080043c7 	.word	0x080043c7

0800422c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b20      	cmp	r3, #32
 800423e:	d10d      	bne.n	800425c <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2228      	movs	r2, #40	@ 0x28
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a07      	ldr	r2, [pc, #28]	@ (8004268 <HAL_I2C_EnableListen_IT+0x3c>)
 800424c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800424e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f001 fa22 	bl	800569c <I2C_Enable_IRQ>

    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 800425c:	2302      	movs	r3, #2
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	080043c7 	.word	0x080043c7

0800426c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	68f9      	ldr	r1, [r7, #12]
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4798      	blx	r3
  }
}
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	0a1b      	lsrs	r3, r3, #8
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d010      	beq.n	80042e6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	09db      	lsrs	r3, r3, #7
 80042c8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d4:	f043 0201 	orr.w	r2, r3, #1
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042e4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	0a9b      	lsrs	r3, r3, #10
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d010      	beq.n	8004314 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	09db      	lsrs	r3, r3, #7
 80042f6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004302:	f043 0208 	orr.w	r2, r3, #8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004312:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	0a5b      	lsrs	r3, r3, #9
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d010      	beq.n	8004342 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	09db      	lsrs	r3, r3, #7
 8004324:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004330:	f043 0202 	orr.w	r2, r3, #2
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004340:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004346:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 030b 	and.w	r3, r3, #11
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004352:	68f9      	ldr	r1, [r7, #12]
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f001 f815 	bl	8005384 <I2C_ITError>
  }
}
 800435a:	bf00      	nop
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b086      	sub	sp, #24
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <I2C_Slave_ISR_IT+0x24>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e0ed      	b.n	80045c6 <I2C_Slave_ISR_IT+0x200>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	095b      	lsrs	r3, r3, #5
 8004402:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004406:	2b00      	cmp	r3, #0
 8004408:	d004      	beq.n	8004414 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800440a:	6939      	ldr	r1, [r7, #16]
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fdf9 	bl	8005004 <I2C_ITSlaveCplt>
 8004412:	e0d3      	b.n	80045bc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	091b      	lsrs	r3, r3, #4
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d04d      	beq.n	80044bc <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	091b      	lsrs	r3, r3, #4
 8004424:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004428:	2b00      	cmp	r3, #0
 800442a:	d047      	beq.n	80044bc <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d128      	bne.n	8004488 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b28      	cmp	r3, #40	@ 0x28
 8004440:	d108      	bne.n	8004454 <I2C_Slave_ISR_IT+0x8e>
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004448:	d104      	bne.n	8004454 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800444a:	6939      	ldr	r1, [r7, #16]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 ff43 	bl	80052d8 <I2C_ITListenCplt>
 8004452:	e032      	b.n	80044ba <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b29      	cmp	r3, #41	@ 0x29
 800445e:	d10e      	bne.n	800447e <I2C_Slave_ISR_IT+0xb8>
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004466:	d00a      	beq.n	800447e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2210      	movs	r2, #16
 800446e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f001 f89e 	bl	80055b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fc9c 	bl	8004db4 <I2C_ITSlaveSeqCplt>
 800447c:	e01d      	b.n	80044ba <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2210      	movs	r2, #16
 8004484:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004486:	e096      	b.n	80045b6 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2210      	movs	r2, #16
 800448e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004494:	f043 0204 	orr.w	r2, r3, #4
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d004      	beq.n	80044ac <I2C_Slave_ISR_IT+0xe6>
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044a8:	f040 8085 	bne.w	80045b6 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b0:	4619      	mov	r1, r3
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 ff66 	bl	8005384 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80044b8:	e07d      	b.n	80045b6 <I2C_Slave_ISR_IT+0x1f0>
 80044ba:	e07c      	b.n	80045b6 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	089b      	lsrs	r3, r3, #2
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d030      	beq.n	800452a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d02a      	beq.n	800452a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d018      	beq.n	8004510 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d14f      	bne.n	80045ba <I2C_Slave_ISR_IT+0x1f4>
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004520:	d04b      	beq.n	80045ba <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fc46 	bl	8004db4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004528:	e047      	b.n	80045ba <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	08db      	lsrs	r3, r3, #3
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	08db      	lsrs	r3, r3, #3
 800453a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004542:	6939      	ldr	r1, [r7, #16]
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fb74 	bl	8004c32 <I2C_ITAddrCplt>
 800454a:	e037      	b.n	80045bc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	085b      	lsrs	r3, r3, #1
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d031      	beq.n	80045bc <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	085b      	lsrs	r3, r3, #1
 800455c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004560:	2b00      	cmp	r3, #0
 8004562:	d02b      	beq.n	80045bc <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d018      	beq.n	80045a0 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004572:	781a      	ldrb	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800459e:	e00d      	b.n	80045bc <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045a6:	d002      	beq.n	80045ae <I2C_Slave_ISR_IT+0x1e8>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d106      	bne.n	80045bc <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fc00 	bl	8004db4 <I2C_ITSlaveSeqCplt>
 80045b4:	e002      	b.n	80045bc <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80045b6:	bf00      	nop
 80045b8:	e000      	b.n	80045bc <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80045ba:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b088      	sub	sp, #32
 80045d2:	af02      	add	r7, sp, #8
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <I2C_Master_ISR_DMA+0x1a>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e0f0      	b.n	80047ca <I2C_Master_ISR_DMA+0x1fc>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	091b      	lsrs	r3, r3, #4
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d017      	beq.n	800462c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	091b      	lsrs	r3, r3, #4
 8004600:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004604:	2b00      	cmp	r3, #0
 8004606:	d011      	beq.n	800462c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2210      	movs	r2, #16
 800460e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004614:	f043 0204 	orr.w	r2, r3, #4
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800461c:	2120      	movs	r1, #32
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f001 f83c 	bl	800569c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 ffc4 	bl	80055b2 <I2C_Flush_TXDR>
 800462a:	e0c9      	b.n	80047c0 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	09db      	lsrs	r3, r3, #7
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 8081 	beq.w	800473c <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	099b      	lsrs	r3, r3, #6
 800463e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004642:	2b00      	cmp	r3, #0
 8004644:	d07a      	beq.n	800473c <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004654:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d05c      	beq.n	800471a <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	b29b      	uxth	r3, r3
 8004668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800466c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	2bff      	cmp	r3, #255	@ 0xff
 8004676:	d914      	bls.n	80046a2 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	0c1b      	lsrs	r3, r3, #16
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d103      	bne.n	8004694 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004692:	e002      	b.n	800469a <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	22ff      	movs	r2, #255	@ 0xff
 8004698:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800469a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	e010      	b.n	80046c4 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046b4:	d003      	beq.n	80046be <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	e002      	b.n	80046c4 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80046be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046c2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	8a79      	ldrh	r1, [r7, #18]
 80046cc:	2300      	movs	r3, #0
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 ffb0 	bl	8005638 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b22      	cmp	r3, #34	@ 0x22
 80046f4:	d108      	bne.n	8004708 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004704:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004706:	e05b      	b.n	80047c0 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004716:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004718:	e052      	b.n	80047c0 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004724:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004728:	d003      	beq.n	8004732 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fb05 	bl	8004d3a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004730:	e046      	b.n	80047c0 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004732:	2140      	movs	r1, #64	@ 0x40
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 fe25 	bl	8005384 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800473a:	e041      	b.n	80047c0 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	099b      	lsrs	r3, r3, #6
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d029      	beq.n	800479c <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	099b      	lsrs	r3, r3, #6
 800474c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004750:	2b00      	cmp	r3, #0
 8004752:	d023      	beq.n	800479c <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d119      	bne.n	8004792 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004768:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800476c:	d027      	beq.n	80047be <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004772:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004776:	d108      	bne.n	800478a <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004786:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004788:	e019      	b.n	80047be <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 fad5 	bl	8004d3a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004790:	e015      	b.n	80047be <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004792:	2140      	movs	r1, #64	@ 0x40
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 fdf5 	bl	8005384 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800479a:	e010      	b.n	80047be <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00b      	beq.n	80047c0 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fb5a 	bl	8004e70 <I2C_ITMasterCplt>
 80047bc:	e000      	b.n	80047c0 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 80047be:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af02      	add	r7, sp, #8
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80047e0:	4b94      	ldr	r3, [pc, #592]	@ (8004a34 <I2C_Mem_ISR_DMA+0x260>)
 80047e2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d101      	bne.n	80047f2 <I2C_Mem_ISR_DMA+0x1e>
 80047ee:	2302      	movs	r3, #2
 80047f0:	e139      	b.n	8004a66 <I2C_Mem_ISR_DMA+0x292>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d017      	beq.n	8004836 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	091b      	lsrs	r3, r3, #4
 800480a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800480e:	2b00      	cmp	r3, #0
 8004810:	d011      	beq.n	8004836 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2210      	movs	r2, #16
 8004818:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481e:	f043 0204 	orr.w	r2, r3, #4
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004826:	2120      	movs	r1, #32
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 ff37 	bl	800569c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 febf 	bl	80055b2 <I2C_Flush_TXDR>
 8004834:	e112      	b.n	8004a5c <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	085b      	lsrs	r3, r3, #1
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00f      	beq.n	8004862 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	085b      	lsrs	r3, r3, #1
 8004846:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800484a:	2b00      	cmp	r3, #0
 800484c:	d009      	beq.n	8004862 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004856:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f04f 32ff 	mov.w	r2, #4294967295
 800485e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004860:	e0fc      	b.n	8004a5c <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	09db      	lsrs	r3, r3, #7
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d06e      	beq.n	800494c <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	099b      	lsrs	r3, r3, #6
 8004872:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004876:	2b00      	cmp	r3, #0
 8004878:	d068      	beq.n	800494c <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800487a:	2101      	movs	r1, #1
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 ff91 	bl	80057a4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004882:	2110      	movs	r1, #16
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 ff09 	bl	800569c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d056      	beq.n	8004942 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	2bff      	cmp	r3, #255	@ 0xff
 800489c:	d91e      	bls.n	80048dc <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	0c1b      	lsrs	r3, r3, #16
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d103      	bne.n	80048ba <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80048b8:	e002      	b.n	80048c0 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	22ff      	movs	r2, #255	@ 0xff
 80048be:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048c4:	b299      	uxth	r1, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	2300      	movs	r3, #0
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 feaf 	bl	8005638 <I2C_TransferConfig>
 80048da:	e011      	b.n	8004900 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ea:	b299      	uxth	r1, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	2300      	movs	r3, #0
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fe9c 	bl	8005638 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b22      	cmp	r3, #34	@ 0x22
 800491c:	d108      	bne.n	8004930 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800492c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800492e:	e095      	b.n	8004a5c <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800493e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004940:	e08c      	b.n	8004a5c <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004942:	2140      	movs	r1, #64	@ 0x40
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 fd1d 	bl	8005384 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800494a:	e087      	b.n	8004a5c <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	099b      	lsrs	r3, r3, #6
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d071      	beq.n	8004a3c <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	099b      	lsrs	r3, r3, #6
 800495c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004960:	2b00      	cmp	r3, #0
 8004962:	d06b      	beq.n	8004a3c <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004964:	2101      	movs	r1, #1
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 ff1c 	bl	80057a4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800496c:	2110      	movs	r1, #16
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 fe94 	bl	800569c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b22      	cmp	r3, #34	@ 0x22
 800497e:	d101      	bne.n	8004984 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8004980:	4b2d      	ldr	r3, [pc, #180]	@ (8004a38 <I2C_Mem_ISR_DMA+0x264>)
 8004982:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004988:	b29b      	uxth	r3, r3
 800498a:	2bff      	cmp	r3, #255	@ 0xff
 800498c:	d91e      	bls.n	80049cc <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	0c1b      	lsrs	r3, r3, #16
 8004996:	b2db      	uxtb	r3, r3
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d103      	bne.n	80049aa <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80049a8:	e002      	b.n	80049b0 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	22ff      	movs	r2, #255	@ 0xff
 80049ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049b4:	b299      	uxth	r1, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fe37 	bl	8005638 <I2C_TransferConfig>
 80049ca:	e011      	b.n	80049f0 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049da:	b299      	uxth	r1, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 fe24 	bl	8005638 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b22      	cmp	r3, #34	@ 0x22
 8004a0c:	d108      	bne.n	8004a20 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a1c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a1e:	e01d      	b.n	8004a5c <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a2e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a30:	e014      	b.n	8004a5c <I2C_Mem_ISR_DMA+0x288>
 8004a32:	bf00      	nop
 8004a34:	80002000 	.word	0x80002000
 8004a38:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d009      	beq.n	8004a5c <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 fa0a 	bl	8004e70 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop

08004a70 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a80:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <I2C_Slave_ISR_DMA+0x24>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e0ca      	b.n	8004c2a <I2C_Slave_ISR_DMA+0x1ba>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 faa4 	bl	8005004 <I2C_ITSlaveCplt>
 8004abc:	e0b0      	b.n	8004c20 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 809a 	beq.w	8004c00 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	091b      	lsrs	r3, r3, #4
 8004ad0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 8093 	beq.w	8004c00 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	0b9b      	lsrs	r3, r3, #14
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d105      	bne.n	8004af2 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	0bdb      	lsrs	r3, r3, #15
 8004aea:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d07f      	beq.n	8004bf2 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00d      	beq.n	8004b16 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	0bdb      	lsrs	r3, r3, #15
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8004b12:	2301      	movs	r3, #1
 8004b14:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00d      	beq.n	8004b3a <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	0b9b      	lsrs	r3, r3, #14
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8004b36:	2301      	movs	r3, #1
 8004b38:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d128      	bne.n	8004b92 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b28      	cmp	r3, #40	@ 0x28
 8004b4a:	d108      	bne.n	8004b5e <I2C_Slave_ISR_DMA+0xee>
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b52:	d104      	bne.n	8004b5e <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 fbbe 	bl	80052d8 <I2C_ITListenCplt>
 8004b5c:	e048      	b.n	8004bf0 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b29      	cmp	r3, #41	@ 0x29
 8004b68:	d10e      	bne.n	8004b88 <I2C_Slave_ISR_DMA+0x118>
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b70:	d00a      	beq.n	8004b88 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2210      	movs	r2, #16
 8004b78:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fd19 	bl	80055b2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f917 	bl	8004db4 <I2C_ITSlaveSeqCplt>
 8004b86:	e033      	b.n	8004bf0 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004b90:	e034      	b.n	8004bfc <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2210      	movs	r2, #16
 8004b98:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9e:	f043 0204 	orr.w	r2, r3, #4
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bac:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <I2C_Slave_ISR_DMA+0x14c>
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bba:	d11f      	bne.n	8004bfc <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bbc:	7dfb      	ldrb	r3, [r7, #23]
 8004bbe:	2b21      	cmp	r3, #33	@ 0x21
 8004bc0:	d002      	beq.n	8004bc8 <I2C_Slave_ISR_DMA+0x158>
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
 8004bc4:	2b29      	cmp	r3, #41	@ 0x29
 8004bc6:	d103      	bne.n	8004bd0 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2221      	movs	r2, #33	@ 0x21
 8004bcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8004bce:	e008      	b.n	8004be2 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
 8004bd2:	2b22      	cmp	r3, #34	@ 0x22
 8004bd4:	d002      	beq.n	8004bdc <I2C_Slave_ISR_DMA+0x16c>
 8004bd6:	7dfb      	ldrb	r3, [r7, #23]
 8004bd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bda:	d102      	bne.n	8004be2 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2222      	movs	r2, #34	@ 0x22
 8004be0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be6:	4619      	mov	r1, r3
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fbcb 	bl	8005384 <I2C_ITError>
      if (treatdmanack == 1U)
 8004bee:	e005      	b.n	8004bfc <I2C_Slave_ISR_DMA+0x18c>
 8004bf0:	e004      	b.n	8004bfc <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2210      	movs	r2, #16
 8004bf8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004bfa:	e011      	b.n	8004c20 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8004bfc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004bfe:	e00f      	b.n	8004c20 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	08db      	lsrs	r3, r3, #3
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d009      	beq.n	8004c20 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	08db      	lsrs	r3, r3, #3
 8004c10:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f809 	bl	8004c32 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c48:	2b28      	cmp	r3, #40	@ 0x28
 8004c4a:	d16a      	bne.n	8004d22 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	0c1b      	lsrs	r3, r3, #16
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	0c1b      	lsrs	r3, r3, #16
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004c6a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c78:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004c86:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d138      	bne.n	8004d02 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004c90:	897b      	ldrh	r3, [r7, #10]
 8004c92:	09db      	lsrs	r3, r3, #7
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	89bb      	ldrh	r3, [r7, #12]
 8004c98:	4053      	eors	r3, r2
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f003 0306 	and.w	r3, r3, #6
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d11c      	bne.n	8004cde <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004ca4:	897b      	ldrh	r3, [r7, #10]
 8004ca6:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d13b      	bne.n	8004d32 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004cd0:	89ba      	ldrh	r2, [r7, #12]
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7fd fa2e 	bl	8002138 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004cdc:	e029      	b.n	8004d32 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004cde:	893b      	ldrh	r3, [r7, #8]
 8004ce0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ce2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fd5c 	bl	80057a4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004cf4:	89ba      	ldrh	r2, [r7, #12]
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fd fa1c 	bl	8002138 <HAL_I2C_AddrCallback>
}
 8004d00:	e017      	b.n	8004d32 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fd4c 	bl	80057a4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d14:	89ba      	ldrh	r2, [r7, #12]
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fd fa0c 	bl	8002138 <HAL_I2C_AddrCallback>
}
 8004d20:	e007      	b.n	8004d32 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2208      	movs	r2, #8
 8004d28:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004d32:	bf00      	nop
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b21      	cmp	r3, #33	@ 0x21
 8004d54:	d115      	bne.n	8004d82 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2211      	movs	r2, #17
 8004d62:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fd19 	bl	80057a4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff faf1 	bl	8004362 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d80:	e014      	b.n	8004dac <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2212      	movs	r2, #18
 8004d8e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004d96:	2102      	movs	r1, #2
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fd03 	bl	80057a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7ff fae5 	bl	8004376 <HAL_I2C_MasterRxCpltCallback>
}
 8004dac:	bf00      	nop
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	0b9b      	lsrs	r3, r3, #14
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d008      	beq.n	8004dea <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e00d      	b.n	8004e06 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	0bdb      	lsrs	r3, r3, #15
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d007      	beq.n	8004e06 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e04:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b29      	cmp	r3, #41	@ 0x29
 8004e10:	d112      	bne.n	8004e38 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2228      	movs	r2, #40	@ 0x28
 8004e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2221      	movs	r2, #33	@ 0x21
 8004e1e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004e20:	2101      	movs	r1, #1
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fcbe 	bl	80057a4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7fd f9a7 	bl	8002184 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e36:	e017      	b.n	8004e68 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e42:	d111      	bne.n	8004e68 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2228      	movs	r2, #40	@ 0x28
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2222      	movs	r2, #34	@ 0x22
 8004e50:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004e52:	2102      	movs	r1, #2
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fca5 	bl	80057a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fc fe20 	bl	8001aa8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e68:	bf00      	nop
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2220      	movs	r2, #32
 8004e84:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b21      	cmp	r3, #33	@ 0x21
 8004e90:	d107      	bne.n	8004ea2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004e92:	2101      	movs	r1, #1
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fc85 	bl	80057a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2211      	movs	r2, #17
 8004e9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ea0:	e00c      	b.n	8004ebc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b22      	cmp	r3, #34	@ 0x22
 8004eac:	d106      	bne.n	8004ebc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004eae:	2102      	movs	r1, #2
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fc77 	bl	80057a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2212      	movs	r2, #18
 8004eba:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6859      	ldr	r1, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	4b4d      	ldr	r3, [pc, #308]	@ (8004ffc <I2C_ITMasterCplt+0x18c>)
 8004ec8:	400b      	ands	r3, r1
 8004eca:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8005000 <I2C_ITMasterCplt+0x190>)
 8004ed6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	091b      	lsrs	r3, r3, #4
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d009      	beq.n	8004ef8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2210      	movs	r2, #16
 8004eea:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef0:	f043 0204 	orr.w	r2, r3, #4
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b60      	cmp	r3, #96	@ 0x60
 8004f02:	d10b      	bne.n	8004f1c <I2C_ITMasterCplt+0xac>
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	089b      	lsrs	r3, r3, #2
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fb48 	bl	80055b2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f26:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b60      	cmp	r3, #96	@ 0x60
 8004f32:	d002      	beq.n	8004f3a <I2C_ITMasterCplt+0xca>
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d006      	beq.n	8004f48 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f3e:	4619      	mov	r1, r3
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fa1f 	bl	8005384 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f46:	e054      	b.n	8004ff2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b21      	cmp	r3, #33	@ 0x21
 8004f52:	d124      	bne.n	8004f9e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b40      	cmp	r3, #64	@ 0x40
 8004f6c:	d10b      	bne.n	8004f86 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff fa03 	bl	800438a <HAL_I2C_MemTxCpltCallback>
}
 8004f84:	e035      	b.n	8004ff2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff f9e3 	bl	8004362 <HAL_I2C_MasterTxCpltCallback>
}
 8004f9c:	e029      	b.n	8004ff2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b22      	cmp	r3, #34	@ 0x22
 8004fa8:	d123      	bne.n	8004ff2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b40      	cmp	r3, #64	@ 0x40
 8004fc2:	d10b      	bne.n	8004fdc <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff f9e2 	bl	800439e <HAL_I2C_MemRxCpltCallback>
}
 8004fda:	e00a      	b.n	8004ff2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff f9c2 	bl	8004376 <HAL_I2C_MasterRxCpltCallback>
}
 8004ff2:	bf00      	nop
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	fe00e800 	.word	0xfe00e800
 8005000:	ffff0000 	.word	0xffff0000

08005004 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005026:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2220      	movs	r2, #32
 800502e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005030:	7afb      	ldrb	r3, [r7, #11]
 8005032:	2b21      	cmp	r3, #33	@ 0x21
 8005034:	d002      	beq.n	800503c <I2C_ITSlaveCplt+0x38>
 8005036:	7afb      	ldrb	r3, [r7, #11]
 8005038:	2b29      	cmp	r3, #41	@ 0x29
 800503a:	d108      	bne.n	800504e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800503c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fbaf 	bl	80057a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2221      	movs	r2, #33	@ 0x21
 800504a:	631a      	str	r2, [r3, #48]	@ 0x30
 800504c:	e019      	b.n	8005082 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800504e:	7afb      	ldrb	r3, [r7, #11]
 8005050:	2b22      	cmp	r3, #34	@ 0x22
 8005052:	d002      	beq.n	800505a <I2C_ITSlaveCplt+0x56>
 8005054:	7afb      	ldrb	r3, [r7, #11]
 8005056:	2b2a      	cmp	r3, #42	@ 0x2a
 8005058:	d108      	bne.n	800506c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800505a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fba0 	bl	80057a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2222      	movs	r2, #34	@ 0x22
 8005068:	631a      	str	r2, [r3, #48]	@ 0x30
 800506a:	e00a      	b.n	8005082 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800506c:	7afb      	ldrb	r3, [r7, #11]
 800506e:	2b28      	cmp	r3, #40	@ 0x28
 8005070:	d107      	bne.n	8005082 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005072:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fb94 	bl	80057a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005090:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6859      	ldr	r1, [r3, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	4b8c      	ldr	r3, [pc, #560]	@ (80052d0 <I2C_ITSlaveCplt+0x2cc>)
 800509e:	400b      	ands	r3, r1
 80050a0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fa85 	bl	80055b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	0b9b      	lsrs	r3, r3, #14
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d013      	beq.n	80050dc <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050c2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d020      	beq.n	800510e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050da:	e018      	b.n	800510e <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	0bdb      	lsrs	r3, r3, #15
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d012      	beq.n	800510e <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050f6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d006      	beq.n	800510e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	b29a      	uxth	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	089b      	lsrs	r3, r3, #2
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d020      	beq.n	800515c <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f023 0304 	bic.w	r3, r3, #4
 8005120:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00c      	beq.n	800515c <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005152:	b29b      	uxth	r3, r3
 8005154:	3b01      	subs	r3, #1
 8005156:	b29a      	uxth	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d005      	beq.n	8005172 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516a:	f043 0204 	orr.w	r2, r3, #4
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d04a      	beq.n	8005214 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005186:	2b00      	cmp	r3, #0
 8005188:	d044      	beq.n	8005214 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800518e:	b29b      	uxth	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d128      	bne.n	80051e6 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b28      	cmp	r3, #40	@ 0x28
 800519e:	d108      	bne.n	80051b2 <I2C_ITSlaveCplt+0x1ae>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051a6:	d104      	bne.n	80051b2 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80051a8:	6979      	ldr	r1, [r7, #20]
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f894 	bl	80052d8 <I2C_ITListenCplt>
 80051b0:	e030      	b.n	8005214 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b29      	cmp	r3, #41	@ 0x29
 80051bc:	d10e      	bne.n	80051dc <I2C_ITSlaveCplt+0x1d8>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051c4:	d00a      	beq.n	80051dc <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2210      	movs	r2, #16
 80051cc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f9ef 	bl	80055b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7ff fded 	bl	8004db4 <I2C_ITSlaveSeqCplt>
 80051da:	e01b      	b.n	8005214 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2210      	movs	r2, #16
 80051e2:	61da      	str	r2, [r3, #28]
 80051e4:	e016      	b.n	8005214 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2210      	movs	r2, #16
 80051ec:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f2:	f043 0204 	orr.w	r2, r3, #4
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <I2C_ITSlaveCplt+0x204>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005206:	d105      	bne.n	8005214 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520c:	4619      	mov	r1, r3
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f8b8 	bl	8005384 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005226:	2b00      	cmp	r3, #0
 8005228:	d010      	beq.n	800524c <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522e:	4619      	mov	r1, r3
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f8a7 	bl	8005384 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b28      	cmp	r3, #40	@ 0x28
 8005240:	d141      	bne.n	80052c6 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005242:	6979      	ldr	r1, [r7, #20]
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f847 	bl	80052d8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800524a:	e03c      	b.n	80052c6 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005250:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005254:	d014      	beq.n	8005280 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff fdac 	bl	8004db4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a1d      	ldr	r2, [pc, #116]	@ (80052d4 <I2C_ITSlaveCplt+0x2d0>)
 8005260:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7fc ff51 	bl	8002120 <HAL_I2C_ListenCpltCallback>
}
 800527e:	e022      	b.n	80052c6 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b22      	cmp	r3, #34	@ 0x22
 800528a:	d10e      	bne.n	80052aa <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2220      	movs	r2, #32
 8005290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fc fc00 	bl	8001aa8 <HAL_I2C_SlaveRxCpltCallback>
}
 80052a8:	e00d      	b.n	80052c6 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7fc ff5f 	bl	8002184 <HAL_I2C_SlaveTxCpltCallback>
}
 80052c6:	bf00      	nop
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	fe00e800 	.word	0xfe00e800
 80052d4:	ffff0000 	.word	0xffff0000

080052d8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a26      	ldr	r2, [pc, #152]	@ (8005380 <I2C_ITListenCplt+0xa8>)
 80052e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	089b      	lsrs	r3, r3, #2
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d022      	beq.n	8005356 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800532c:	2b00      	cmp	r3, #0
 800532e:	d012      	beq.n	8005356 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005340:	b29b      	uxth	r3, r3
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534e:	f043 0204 	orr.w	r2, r3, #4
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005356:	f248 0103 	movw	r1, #32771	@ 0x8003
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fa22 	bl	80057a4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2210      	movs	r2, #16
 8005366:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7fc fed5 	bl	8002120 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005376:	bf00      	nop
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	ffff0000 	.word	0xffff0000

08005384 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005394:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a6d      	ldr	r2, [pc, #436]	@ (8005558 <I2C_ITError+0x1d4>)
 80053a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
 80053b8:	2b28      	cmp	r3, #40	@ 0x28
 80053ba:	d005      	beq.n	80053c8 <I2C_ITError+0x44>
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	2b29      	cmp	r3, #41	@ 0x29
 80053c0:	d002      	beq.n	80053c8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80053c6:	d10b      	bne.n	80053e0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80053c8:	2103      	movs	r1, #3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f9ea 	bl	80057a4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2228      	movs	r2, #40	@ 0x28
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a60      	ldr	r2, [pc, #384]	@ (800555c <I2C_ITError+0x1d8>)
 80053dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80053de:	e030      	b.n	8005442 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80053e0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f9dd 	bl	80057a4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f8e1 	bl	80055b2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b60      	cmp	r3, #96	@ 0x60
 80053fa:	d01f      	beq.n	800543c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2220      	movs	r2, #32
 8005400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b20      	cmp	r3, #32
 8005410:	d114      	bne.n	800543c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	f003 0310 	and.w	r3, r3, #16
 800541c:	2b10      	cmp	r3, #16
 800541e:	d109      	bne.n	8005434 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2210      	movs	r2, #16
 8005426:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800542c:	f043 0204 	orr.w	r2, r3, #4
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2220      	movs	r2, #32
 800543a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005446:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544c:	2b00      	cmp	r3, #0
 800544e:	d039      	beq.n	80054c4 <I2C_ITError+0x140>
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b11      	cmp	r3, #17
 8005454:	d002      	beq.n	800545c <I2C_ITError+0xd8>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b21      	cmp	r3, #33	@ 0x21
 800545a:	d133      	bne.n	80054c4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005466:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800546a:	d107      	bne.n	800547c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800547a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe faf2 	bl	8003a6a <HAL_DMA_GetState>
 8005486:	4603      	mov	r3, r0
 8005488:	2b01      	cmp	r3, #1
 800548a:	d017      	beq.n	80054bc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005490:	4a33      	ldr	r2, [pc, #204]	@ (8005560 <I2C_ITError+0x1dc>)
 8005492:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fe faa4 	bl	80039ee <HAL_DMA_Abort_IT>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d04d      	beq.n	8005548 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80054b6:	4610      	mov	r0, r2
 80054b8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80054ba:	e045      	b.n	8005548 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f851 	bl	8005564 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80054c2:	e041      	b.n	8005548 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d039      	beq.n	8005540 <I2C_ITError+0x1bc>
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b12      	cmp	r3, #18
 80054d0:	d002      	beq.n	80054d8 <I2C_ITError+0x154>
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2b22      	cmp	r3, #34	@ 0x22
 80054d6:	d133      	bne.n	8005540 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054e6:	d107      	bne.n	80054f8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fe fab4 	bl	8003a6a <HAL_DMA_GetState>
 8005502:	4603      	mov	r3, r0
 8005504:	2b01      	cmp	r3, #1
 8005506:	d017      	beq.n	8005538 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550c:	4a14      	ldr	r2, [pc, #80]	@ (8005560 <I2C_ITError+0x1dc>)
 800550e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800551c:	4618      	mov	r0, r3
 800551e:	f7fe fa66 	bl	80039ee <HAL_DMA_Abort_IT>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d011      	beq.n	800554c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005532:	4610      	mov	r0, r2
 8005534:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005536:	e009      	b.n	800554c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f813 	bl	8005564 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800553e:	e005      	b.n	800554c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f80f 	bl	8005564 <I2C_TreatErrorCallback>
  }
}
 8005546:	e002      	b.n	800554e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005548:	bf00      	nop
 800554a:	e000      	b.n	800554e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800554c:	bf00      	nop
}
 800554e:	bf00      	nop
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	ffff0000 	.word	0xffff0000
 800555c:	080043c7 	.word	0x080043c7
 8005560:	080055fb 	.word	0x080055fb

08005564 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b60      	cmp	r3, #96	@ 0x60
 8005576:	d10e      	bne.n	8005596 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fe ff0f 	bl	80043b2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005594:	e009      	b.n	80055aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7fc fdf7 	bl	8002198 <HAL_I2C_ErrorCallback>
}
 80055aa:	bf00      	nop
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d103      	bne.n	80055d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2200      	movs	r2, #0
 80055ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d007      	beq.n	80055ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699a      	ldr	r2, [r3, #24]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0201 	orr.w	r2, r2, #1
 80055ec:	619a      	str	r2, [r3, #24]
  }
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005614:	2200      	movs	r2, #0
 8005616:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005624:	2200      	movs	r2, #0
 8005626:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f7ff ff9b 	bl	8005564 <I2C_TreatErrorCallback>
}
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	607b      	str	r3, [r7, #4]
 8005642:	460b      	mov	r3, r1
 8005644:	817b      	strh	r3, [r7, #10]
 8005646:	4613      	mov	r3, r2
 8005648:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800564a:	897b      	ldrh	r3, [r7, #10]
 800564c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005650:	7a7b      	ldrb	r3, [r7, #9]
 8005652:	041b      	lsls	r3, r3, #16
 8005654:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005658:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	4313      	orrs	r3, r2
 8005662:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005666:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	0d5b      	lsrs	r3, r3, #21
 8005672:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005676:	4b08      	ldr	r3, [pc, #32]	@ (8005698 <I2C_TransferConfig+0x60>)
 8005678:	430b      	orrs	r3, r1
 800567a:	43db      	mvns	r3, r3
 800567c:	ea02 0103 	and.w	r1, r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	430a      	orrs	r2, r1
 8005688:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800568a:	bf00      	nop
 800568c:	371c      	adds	r7, #28
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	03ff63ff 	.word	0x03ff63ff

0800569c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b0:	4a39      	ldr	r2, [pc, #228]	@ (8005798 <I2C_Enable_IRQ+0xfc>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d032      	beq.n	800571c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80056ba:	4a38      	ldr	r2, [pc, #224]	@ (800579c <I2C_Enable_IRQ+0x100>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d02d      	beq.n	800571c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80056c4:	4a36      	ldr	r2, [pc, #216]	@ (80057a0 <I2C_Enable_IRQ+0x104>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d028      	beq.n	800571c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80056ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	da03      	bge.n	80056da <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80056d8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80056da:	887b      	ldrh	r3, [r7, #2]
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80056ea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80056ec:	887b      	ldrh	r3, [r7, #2]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80056fc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80056fe:	887b      	ldrh	r3, [r7, #2]
 8005700:	2b10      	cmp	r3, #16
 8005702:	d103      	bne.n	800570c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800570a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800570c:	887b      	ldrh	r3, [r7, #2]
 800570e:	2b20      	cmp	r3, #32
 8005710:	d133      	bne.n	800577a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f043 0320 	orr.w	r3, r3, #32
 8005718:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800571a:	e02e      	b.n	800577a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800571c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005720:	2b00      	cmp	r3, #0
 8005722:	da03      	bge.n	800572c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800572a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800572c:	887b      	ldrh	r3, [r7, #2]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800573c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800573e:	887b      	ldrh	r3, [r7, #2]
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800574e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005750:	887b      	ldrh	r3, [r7, #2]
 8005752:	2b10      	cmp	r3, #16
 8005754:	d103      	bne.n	800575e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800575c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800575e:	887b      	ldrh	r3, [r7, #2]
 8005760:	2b20      	cmp	r3, #32
 8005762:	d103      	bne.n	800576c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800576a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800576c:	887b      	ldrh	r3, [r7, #2]
 800576e:	2b40      	cmp	r3, #64	@ 0x40
 8005770:	d103      	bne.n	800577a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005778:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6819      	ldr	r1, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	430a      	orrs	r2, r1
 8005788:	601a      	str	r2, [r3, #0]
}
 800578a:	bf00      	nop
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	080045cf 	.word	0x080045cf
 800579c:	08004a71 	.word	0x08004a71
 80057a0:	080047d5 	.word	0x080047d5

080057a4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	460b      	mov	r3, r1
 80057ae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80057b4:	887b      	ldrh	r3, [r7, #2]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00f      	beq.n	80057de <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80057c4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80057d2:	2b28      	cmp	r3, #40	@ 0x28
 80057d4:	d003      	beq.n	80057de <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80057dc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80057de:	887b      	ldrh	r3, [r7, #2]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00f      	beq.n	8005808 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80057ee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80057fc:	2b28      	cmp	r3, #40	@ 0x28
 80057fe:	d003      	beq.n	8005808 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005806:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005808:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800580c:	2b00      	cmp	r3, #0
 800580e:	da03      	bge.n	8005818 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005816:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005818:	887b      	ldrh	r3, [r7, #2]
 800581a:	2b10      	cmp	r3, #16
 800581c:	d103      	bne.n	8005826 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005824:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005826:	887b      	ldrh	r3, [r7, #2]
 8005828:	2b20      	cmp	r3, #32
 800582a:	d103      	bne.n	8005834 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f043 0320 	orr.w	r3, r3, #32
 8005832:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005834:	887b      	ldrh	r3, [r7, #2]
 8005836:	2b40      	cmp	r3, #64	@ 0x40
 8005838:	d103      	bne.n	8005842 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005840:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6819      	ldr	r1, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	43da      	mvns	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	400a      	ands	r2, r1
 8005852:	601a      	str	r2, [r3, #0]
}
 8005854:	bf00      	nop
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b20      	cmp	r3, #32
 8005874:	d138      	bne.n	80058e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005880:	2302      	movs	r3, #2
 8005882:	e032      	b.n	80058ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2224      	movs	r2, #36	@ 0x24
 8005890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0201 	bic.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80058b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6819      	ldr	r1, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0201 	orr.w	r2, r2, #1
 80058d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	e000      	b.n	80058ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058e8:	2302      	movs	r3, #2
  }
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b085      	sub	sp, #20
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b20      	cmp	r3, #32
 800590a:	d139      	bne.n	8005980 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005916:	2302      	movs	r3, #2
 8005918:	e033      	b.n	8005982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2224      	movs	r2, #36	@ 0x24
 8005926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0201 	bic.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005948:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0201 	orr.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	e000      	b.n	8005982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005980:	2302      	movs	r3, #2
  }
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
	...

08005990 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8005996:	af00      	add	r7, sp, #0
 8005998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800599c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80059a0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d102      	bne.n	80059b6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	f000 bff4 	b.w	800699e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 816d 	beq.w	8005ca6 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80059cc:	4bb4      	ldr	r3, [pc, #720]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f003 030c 	and.w	r3, r3, #12
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d00c      	beq.n	80059f2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80059d8:	4bb1      	ldr	r3, [pc, #708]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f003 030c 	and.w	r3, r3, #12
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d157      	bne.n	8005a94 <HAL_RCC_OscConfig+0x104>
 80059e4:	4bae      	ldr	r3, [pc, #696]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059f0:	d150      	bne.n	8005a94 <HAL_RCC_OscConfig+0x104>
 80059f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80059f6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80059fe:	fa93 f3a3 	rbit	r3, r3
 8005a02:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005a06:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a0a:	fab3 f383 	clz	r3, r3
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b3f      	cmp	r3, #63	@ 0x3f
 8005a12:	d802      	bhi.n	8005a1a <HAL_RCC_OscConfig+0x8a>
 8005a14:	4ba2      	ldr	r3, [pc, #648]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	e015      	b.n	8005a46 <HAL_RCC_OscConfig+0xb6>
 8005a1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a1e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a22:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8005a26:	fa93 f3a3 	rbit	r3, r3
 8005a2a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8005a2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a32:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8005a36:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8005a3a:	fa93 f3a3 	rbit	r3, r3
 8005a3e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8005a42:	4b97      	ldr	r3, [pc, #604]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005a4a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8005a4e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8005a52:	fa92 f2a2 	rbit	r2, r2
 8005a56:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8005a5a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8005a5e:	fab2 f282 	clz	r2, r2
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	f042 0220 	orr.w	r2, r2, #32
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	f002 021f 	and.w	r2, r2, #31
 8005a6e:	2101      	movs	r1, #1
 8005a70:	fa01 f202 	lsl.w	r2, r1, r2
 8005a74:	4013      	ands	r3, r2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 8114 	beq.w	8005ca4 <HAL_RCC_OscConfig+0x314>
 8005a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f040 810b 	bne.w	8005ca4 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f000 bf85 	b.w	800699e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aa4:	d106      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x124>
 8005aa6:	4b7e      	ldr	r3, [pc, #504]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a7d      	ldr	r2, [pc, #500]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	e036      	b.n	8005b22 <HAL_RCC_OscConfig+0x192>
 8005ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ab8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10c      	bne.n	8005ade <HAL_RCC_OscConfig+0x14e>
 8005ac4:	4b76      	ldr	r3, [pc, #472]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a75      	ldr	r2, [pc, #468]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	4b73      	ldr	r3, [pc, #460]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a72      	ldr	r2, [pc, #456]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005ad6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ada:	6013      	str	r3, [r2, #0]
 8005adc:	e021      	b.n	8005b22 <HAL_RCC_OscConfig+0x192>
 8005ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ae2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005aee:	d10c      	bne.n	8005b0a <HAL_RCC_OscConfig+0x17a>
 8005af0:	4b6b      	ldr	r3, [pc, #428]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a6a      	ldr	r2, [pc, #424]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005af6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	4b68      	ldr	r3, [pc, #416]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a67      	ldr	r2, [pc, #412]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005b02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	e00b      	b.n	8005b22 <HAL_RCC_OscConfig+0x192>
 8005b0a:	4b65      	ldr	r3, [pc, #404]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a64      	ldr	r2, [pc, #400]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	4b62      	ldr	r3, [pc, #392]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a61      	ldr	r2, [pc, #388]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005b1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b20:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b22:	4b5f      	ldr	r3, [pc, #380]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b26:	f023 020f 	bic.w	r2, r3, #15
 8005b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	495a      	ldr	r1, [pc, #360]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d054      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b4c:	f7fc fe16 	bl	800277c <HAL_GetTick>
 8005b50:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b54:	e00a      	b.n	8005b6c <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b56:	f7fc fe11 	bl	800277c <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b64      	cmp	r3, #100	@ 0x64
 8005b64:	d902      	bls.n	8005b6c <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	f000 bf19 	b.w	800699e <HAL_RCC_OscConfig+0x100e>
 8005b6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b70:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b74:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8005b78:	fa93 f3a3 	rbit	r3, r3
 8005b7c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8005b80:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b84:	fab3 f383 	clz	r3, r3
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8005b8c:	d802      	bhi.n	8005b94 <HAL_RCC_OscConfig+0x204>
 8005b8e:	4b44      	ldr	r3, [pc, #272]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	e015      	b.n	8005bc0 <HAL_RCC_OscConfig+0x230>
 8005b94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b98:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b9c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8005ba0:	fa93 f3a3 	rbit	r3, r3
 8005ba4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005ba8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005bac:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005bb0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005bb4:	fa93 f3a3 	rbit	r3, r3
 8005bb8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8005bbc:	4b38      	ldr	r3, [pc, #224]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005bc4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8005bc8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8005bcc:	fa92 f2a2 	rbit	r2, r2
 8005bd0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8005bd4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8005bd8:	fab2 f282 	clz	r2, r2
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	f042 0220 	orr.w	r2, r2, #32
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	f002 021f 	and.w	r2, r2, #31
 8005be8:	2101      	movs	r1, #1
 8005bea:	fa01 f202 	lsl.w	r2, r1, r2
 8005bee:	4013      	ands	r3, r2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0b0      	beq.n	8005b56 <HAL_RCC_OscConfig+0x1c6>
 8005bf4:	e057      	b.n	8005ca6 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf6:	f7fc fdc1 	bl	800277c <HAL_GetTick>
 8005bfa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bfe:	e00a      	b.n	8005c16 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c00:	f7fc fdbc 	bl	800277c <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b64      	cmp	r3, #100	@ 0x64
 8005c0e:	d902      	bls.n	8005c16 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	f000 bec4 	b.w	800699e <HAL_RCC_OscConfig+0x100e>
 8005c16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c1a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c1e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005c22:	fa93 f3a3 	rbit	r3, r3
 8005c26:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8005c2a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c2e:	fab3 f383 	clz	r3, r3
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b3f      	cmp	r3, #63	@ 0x3f
 8005c36:	d802      	bhi.n	8005c3e <HAL_RCC_OscConfig+0x2ae>
 8005c38:	4b19      	ldr	r3, [pc, #100]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	e015      	b.n	8005c6a <HAL_RCC_OscConfig+0x2da>
 8005c3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c42:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c46:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8005c4a:	fa93 f3a3 	rbit	r3, r3
 8005c4e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005c52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005c56:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8005c5a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8005c5e:	fa93 f3a3 	rbit	r3, r3
 8005c62:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8005c66:	4b0e      	ldr	r3, [pc, #56]	@ (8005ca0 <HAL_RCC_OscConfig+0x310>)
 8005c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005c6e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8005c72:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8005c76:	fa92 f2a2 	rbit	r2, r2
 8005c7a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8005c7e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8005c82:	fab2 f282 	clz	r2, r2
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	f042 0220 	orr.w	r2, r2, #32
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	f002 021f 	and.w	r2, r2, #31
 8005c92:	2101      	movs	r1, #1
 8005c94:	fa01 f202 	lsl.w	r2, r1, r2
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1b0      	bne.n	8005c00 <HAL_RCC_OscConfig+0x270>
 8005c9e:	e002      	b.n	8005ca6 <HAL_RCC_OscConfig+0x316>
 8005ca0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005caa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 816c 	beq.w	8005f94 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005cbc:	4bcc      	ldr	r3, [pc, #816]	@ (8005ff0 <HAL_RCC_OscConfig+0x660>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f003 030c 	and.w	r3, r3, #12
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00b      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005cc8:	4bc9      	ldr	r3, [pc, #804]	@ (8005ff0 <HAL_RCC_OscConfig+0x660>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f003 030c 	and.w	r3, r3, #12
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d16d      	bne.n	8005db0 <HAL_RCC_OscConfig+0x420>
 8005cd4:	4bc6      	ldr	r3, [pc, #792]	@ (8005ff0 <HAL_RCC_OscConfig+0x660>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d167      	bne.n	8005db0 <HAL_RCC_OscConfig+0x420>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8005cea:	fa93 f3a3 	rbit	r3, r3
 8005cee:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8005cf2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cf6:	fab3 f383 	clz	r3, r3
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b3f      	cmp	r3, #63	@ 0x3f
 8005cfe:	d802      	bhi.n	8005d06 <HAL_RCC_OscConfig+0x376>
 8005d00:	4bbb      	ldr	r3, [pc, #748]	@ (8005ff0 <HAL_RCC_OscConfig+0x660>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	e013      	b.n	8005d2e <HAL_RCC_OscConfig+0x39e>
 8005d06:	2302      	movs	r3, #2
 8005d08:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d0c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8005d10:	fa93 f3a3 	rbit	r3, r3
 8005d14:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8005d18:	2302      	movs	r3, #2
 8005d1a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8005d1e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005d22:	fa93 f3a3 	rbit	r3, r3
 8005d26:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8005d2a:	4bb1      	ldr	r3, [pc, #708]	@ (8005ff0 <HAL_RCC_OscConfig+0x660>)
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8005d34:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8005d38:	fa92 f2a2 	rbit	r2, r2
 8005d3c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8005d40:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8005d44:	fab2 f282 	clz	r2, r2
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	f042 0220 	orr.w	r2, r2, #32
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	f002 021f 	and.w	r2, r2, #31
 8005d54:	2101      	movs	r1, #1
 8005d56:	fa01 f202 	lsl.w	r2, r1, r2
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <HAL_RCC_OscConfig+0x3e6>
 8005d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d002      	beq.n	8005d76 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	f000 be14 	b.w	800699e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d76:	4b9e      	ldr	r3, [pc, #632]	@ (8005ff0 <HAL_RCC_OscConfig+0x660>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	21f8      	movs	r1, #248	@ 0xf8
 8005d8c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d90:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8005d94:	fa91 f1a1 	rbit	r1, r1
 8005d98:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8005d9c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8005da0:	fab1 f181 	clz	r1, r1
 8005da4:	b2c9      	uxtb	r1, r1
 8005da6:	408b      	lsls	r3, r1
 8005da8:	4991      	ldr	r1, [pc, #580]	@ (8005ff0 <HAL_RCC_OscConfig+0x660>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dae:	e0f1      	b.n	8005f94 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005db4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 8083 	beq.w	8005ec8 <HAL_RCC_OscConfig+0x538>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8005dcc:	fa93 f3a3 	rbit	r3, r3
 8005dd0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8005dd4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dd8:	fab3 f383 	clz	r3, r3
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005de2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	461a      	mov	r2, r3
 8005dea:	2301      	movs	r3, #1
 8005dec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dee:	f7fc fcc5 	bl	800277c <HAL_GetTick>
 8005df2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df6:	e00a      	b.n	8005e0e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005df8:	f7fc fcc0 	bl	800277c <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d902      	bls.n	8005e0e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	f000 bdc8 	b.w	800699e <HAL_RCC_OscConfig+0x100e>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e14:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8005e18:	fa93 f3a3 	rbit	r3, r3
 8005e1c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8005e20:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e24:	fab3 f383 	clz	r3, r3
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8005e2c:	d802      	bhi.n	8005e34 <HAL_RCC_OscConfig+0x4a4>
 8005e2e:	4b70      	ldr	r3, [pc, #448]	@ (8005ff0 <HAL_RCC_OscConfig+0x660>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	e013      	b.n	8005e5c <HAL_RCC_OscConfig+0x4cc>
 8005e34:	2302      	movs	r3, #2
 8005e36:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8005e3e:	fa93 f3a3 	rbit	r3, r3
 8005e42:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8005e46:	2302      	movs	r3, #2
 8005e48:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8005e4c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8005e50:	fa93 f3a3 	rbit	r3, r3
 8005e54:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8005e58:	4b65      	ldr	r3, [pc, #404]	@ (8005ff0 <HAL_RCC_OscConfig+0x660>)
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8005e62:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8005e66:	fa92 f2a2 	rbit	r2, r2
 8005e6a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8005e6e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8005e72:	fab2 f282 	clz	r2, r2
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	f042 0220 	orr.w	r2, r2, #32
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	f002 021f 	and.w	r2, r2, #31
 8005e82:	2101      	movs	r1, #1
 8005e84:	fa01 f202 	lsl.w	r2, r1, r2
 8005e88:	4013      	ands	r3, r2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0b4      	beq.n	8005df8 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e8e:	4b58      	ldr	r3, [pc, #352]	@ (8005ff0 <HAL_RCC_OscConfig+0x660>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	21f8      	movs	r1, #248	@ 0xf8
 8005ea4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005eac:	fa91 f1a1 	rbit	r1, r1
 8005eb0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8005eb4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8005eb8:	fab1 f181 	clz	r1, r1
 8005ebc:	b2c9      	uxtb	r1, r1
 8005ebe:	408b      	lsls	r3, r1
 8005ec0:	494b      	ldr	r1, [pc, #300]	@ (8005ff0 <HAL_RCC_OscConfig+0x660>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	600b      	str	r3, [r1, #0]
 8005ec6:	e065      	b.n	8005f94 <HAL_RCC_OscConfig+0x604>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ece:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005ed2:	fa93 f3a3 	rbit	r3, r3
 8005ed6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8005eda:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ede:	fab3 f383 	clz	r3, r3
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005ee8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	461a      	mov	r2, r3
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef4:	f7fc fc42 	bl	800277c <HAL_GetTick>
 8005ef8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005efc:	e00a      	b.n	8005f14 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005efe:	f7fc fc3d 	bl	800277c <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d902      	bls.n	8005f14 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	f000 bd45 	b.w	800699e <HAL_RCC_OscConfig+0x100e>
 8005f14:	2302      	movs	r3, #2
 8005f16:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f1a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f1e:	fa93 f3a3 	rbit	r3, r3
 8005f22:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8005f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f2a:	fab3 f383 	clz	r3, r3
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b3f      	cmp	r3, #63	@ 0x3f
 8005f32:	d802      	bhi.n	8005f3a <HAL_RCC_OscConfig+0x5aa>
 8005f34:	4b2e      	ldr	r3, [pc, #184]	@ (8005ff0 <HAL_RCC_OscConfig+0x660>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	e013      	b.n	8005f62 <HAL_RCC_OscConfig+0x5d2>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f44:	fa93 f3a3 	rbit	r3, r3
 8005f48:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005f52:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f56:	fa93 f3a3 	rbit	r3, r3
 8005f5a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005f5e:	4b24      	ldr	r3, [pc, #144]	@ (8005ff0 <HAL_RCC_OscConfig+0x660>)
 8005f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f62:	2202      	movs	r2, #2
 8005f64:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8005f68:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005f6c:	fa92 f2a2 	rbit	r2, r2
 8005f70:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8005f74:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005f78:	fab2 f282 	clz	r2, r2
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	f042 0220 	orr.w	r2, r2, #32
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	f002 021f 	and.w	r2, r2, #31
 8005f88:	2101      	movs	r1, #1
 8005f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f8e:	4013      	ands	r3, r2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1b4      	bne.n	8005efe <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0308 	and.w	r3, r3, #8
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8115 	beq.w	80061d4 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005fae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d07e      	beq.n	80060b8 <HAL_RCC_OscConfig+0x728>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005fc4:	fa93 f3a3 	rbit	r3, r3
 8005fc8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8005fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fd0:	fab3 f383 	clz	r3, r3
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4b06      	ldr	r3, [pc, #24]	@ (8005ff4 <HAL_RCC_OscConfig+0x664>)
 8005fda:	4413      	add	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	461a      	mov	r2, r3
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe4:	f7fc fbca 	bl	800277c <HAL_GetTick>
 8005fe8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fec:	e00f      	b.n	800600e <HAL_RCC_OscConfig+0x67e>
 8005fee:	bf00      	nop
 8005ff0:	40021000 	.word	0x40021000
 8005ff4:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ff8:	f7fc fbc0 	bl	800277c <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d902      	bls.n	800600e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	f000 bcc8 	b.w	800699e <HAL_RCC_OscConfig+0x100e>
 800600e:	2302      	movs	r3, #2
 8006010:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006014:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006018:	fa93 f3a3 	rbit	r3, r3
 800601c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006024:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006028:	2202      	movs	r2, #2
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006030:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	fa93 f2a3 	rbit	r2, r3
 800603a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800603e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800604c:	2202      	movs	r2, #2
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	fa93 f2a3 	rbit	r2, r3
 800605e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006062:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006066:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006068:	4bb0      	ldr	r3, [pc, #704]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 800606a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800606c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006070:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006074:	2102      	movs	r1, #2
 8006076:	6019      	str	r1, [r3, #0]
 8006078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800607c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	fa93 f1a3 	rbit	r1, r3
 8006086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800608a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800608e:	6019      	str	r1, [r3, #0]
  return result;
 8006090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006094:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	fab3 f383 	clz	r3, r3
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	f003 031f 	and.w	r3, r3, #31
 80060aa:	2101      	movs	r1, #1
 80060ac:	fa01 f303 	lsl.w	r3, r1, r3
 80060b0:	4013      	ands	r3, r2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0a0      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x668>
 80060b6:	e08d      	b.n	80061d4 <HAL_RCC_OscConfig+0x844>
 80060b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060bc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80060c0:	2201      	movs	r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060c8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	fa93 f2a3 	rbit	r2, r3
 80060d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060d6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80060da:	601a      	str	r2, [r3, #0]
  return result;
 80060dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060e0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80060e4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060e6:	fab3 f383 	clz	r3, r3
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	4b90      	ldr	r3, [pc, #576]	@ (8006330 <HAL_RCC_OscConfig+0x9a0>)
 80060f0:	4413      	add	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	461a      	mov	r2, r3
 80060f6:	2300      	movs	r3, #0
 80060f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060fa:	f7fc fb3f 	bl	800277c <HAL_GetTick>
 80060fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006102:	e00a      	b.n	800611a <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006104:	f7fc fb3a 	bl	800277c <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d902      	bls.n	800611a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	f000 bc42 	b.w	800699e <HAL_RCC_OscConfig+0x100e>
 800611a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800611e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8006122:	2202      	movs	r2, #2
 8006124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800612a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	fa93 f2a3 	rbit	r2, r3
 8006134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006138:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006142:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006146:	2202      	movs	r2, #2
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800614e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	fa93 f2a3 	rbit	r2, r3
 8006158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800615c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006166:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800616a:	2202      	movs	r2, #2
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006172:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	fa93 f2a3 	rbit	r2, r3
 800617c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006180:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006184:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006186:	4b69      	ldr	r3, [pc, #420]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 8006188:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800618a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800618e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006192:	2102      	movs	r1, #2
 8006194:	6019      	str	r1, [r3, #0]
 8006196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800619a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	fa93 f1a3 	rbit	r1, r3
 80061a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80061ac:	6019      	str	r1, [r3, #0]
  return result;
 80061ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061b2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	fab3 f383 	clz	r3, r3
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	f003 031f 	and.w	r3, r3, #31
 80061c8:	2101      	movs	r1, #1
 80061ca:	fa01 f303 	lsl.w	r3, r1, r3
 80061ce:	4013      	ands	r3, r2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d197      	bne.n	8006104 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 819e 	beq.w	8006526 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061ea:	2300      	movs	r3, #0
 80061ec:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061f0:	4b4e      	ldr	r3, [pc, #312]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d116      	bne.n	800622a <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061fc:	4b4b      	ldr	r3, [pc, #300]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	4a4a      	ldr	r2, [pc, #296]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 8006202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006206:	61d3      	str	r3, [r2, #28]
 8006208:	4b48      	ldr	r3, [pc, #288]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8006210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006214:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800621e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8006222:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006224:	2301      	movs	r3, #1
 8006226:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800622a:	4b42      	ldr	r3, [pc, #264]	@ (8006334 <HAL_RCC_OscConfig+0x9a4>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006232:	2b00      	cmp	r3, #0
 8006234:	d11a      	bne.n	800626c <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006236:	4b3f      	ldr	r3, [pc, #252]	@ (8006334 <HAL_RCC_OscConfig+0x9a4>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a3e      	ldr	r2, [pc, #248]	@ (8006334 <HAL_RCC_OscConfig+0x9a4>)
 800623c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006240:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006242:	f7fc fa9b 	bl	800277c <HAL_GetTick>
 8006246:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800624a:	e009      	b.n	8006260 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800624c:	f7fc fa96 	bl	800277c <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b64      	cmp	r3, #100	@ 0x64
 800625a:	d901      	bls.n	8006260 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e39e      	b.n	800699e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006260:	4b34      	ldr	r3, [pc, #208]	@ (8006334 <HAL_RCC_OscConfig+0x9a4>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0ef      	beq.n	800624c <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800626c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006270:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d106      	bne.n	800628a <HAL_RCC_OscConfig+0x8fa>
 800627c:	4b2b      	ldr	r3, [pc, #172]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	4a2a      	ldr	r2, [pc, #168]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 8006282:	f043 0301 	orr.w	r3, r3, #1
 8006286:	6213      	str	r3, [r2, #32]
 8006288:	e035      	b.n	80062f6 <HAL_RCC_OscConfig+0x966>
 800628a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800628e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10c      	bne.n	80062b4 <HAL_RCC_OscConfig+0x924>
 800629a:	4b24      	ldr	r3, [pc, #144]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	4a23      	ldr	r2, [pc, #140]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 80062a0:	f023 0301 	bic.w	r3, r3, #1
 80062a4:	6213      	str	r3, [r2, #32]
 80062a6:	4b21      	ldr	r3, [pc, #132]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	4a20      	ldr	r2, [pc, #128]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 80062ac:	f023 0304 	bic.w	r3, r3, #4
 80062b0:	6213      	str	r3, [r2, #32]
 80062b2:	e020      	b.n	80062f6 <HAL_RCC_OscConfig+0x966>
 80062b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	2b05      	cmp	r3, #5
 80062c2:	d10c      	bne.n	80062de <HAL_RCC_OscConfig+0x94e>
 80062c4:	4b19      	ldr	r3, [pc, #100]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	4a18      	ldr	r2, [pc, #96]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 80062ca:	f043 0304 	orr.w	r3, r3, #4
 80062ce:	6213      	str	r3, [r2, #32]
 80062d0:	4b16      	ldr	r3, [pc, #88]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	4a15      	ldr	r2, [pc, #84]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 80062d6:	f043 0301 	orr.w	r3, r3, #1
 80062da:	6213      	str	r3, [r2, #32]
 80062dc:	e00b      	b.n	80062f6 <HAL_RCC_OscConfig+0x966>
 80062de:	4b13      	ldr	r3, [pc, #76]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	4a12      	ldr	r2, [pc, #72]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 80062e4:	f023 0301 	bic.w	r3, r3, #1
 80062e8:	6213      	str	r3, [r2, #32]
 80062ea:	4b10      	ldr	r3, [pc, #64]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	4a0f      	ldr	r2, [pc, #60]	@ (800632c <HAL_RCC_OscConfig+0x99c>)
 80062f0:	f023 0304 	bic.w	r3, r3, #4
 80062f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 8087 	beq.w	8006416 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006308:	f7fc fa38 	bl	800277c <HAL_GetTick>
 800630c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006310:	e012      	b.n	8006338 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006312:	f7fc fa33 	bl	800277c <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006322:	4293      	cmp	r3, r2
 8006324:	d908      	bls.n	8006338 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e339      	b.n	800699e <HAL_RCC_OscConfig+0x100e>
 800632a:	bf00      	nop
 800632c:	40021000 	.word	0x40021000
 8006330:	10908120 	.word	0x10908120
 8006334:	40007000 	.word	0x40007000
 8006338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800633c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8006340:	2202      	movs	r2, #2
 8006342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006348:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	fa93 f2a3 	rbit	r2, r3
 8006352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006356:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006360:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006364:	2202      	movs	r2, #2
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800636c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	fa93 f2a3 	rbit	r2, r3
 8006376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800637a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800637e:	601a      	str	r2, [r3, #0]
  return result;
 8006380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006384:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8006388:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800638a:	fab3 f383 	clz	r3, r3
 800638e:	b2db      	uxtb	r3, r3
 8006390:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d102      	bne.n	80063a0 <HAL_RCC_OscConfig+0xa10>
 800639a:	4b98      	ldr	r3, [pc, #608]	@ (80065fc <HAL_RCC_OscConfig+0xc6c>)
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	e013      	b.n	80063c8 <HAL_RCC_OscConfig+0xa38>
 80063a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063a4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80063a8:	2202      	movs	r2, #2
 80063aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063b0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	fa93 f2a3 	rbit	r2, r3
 80063ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80063be:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	4b8d      	ldr	r3, [pc, #564]	@ (80065fc <HAL_RCC_OscConfig+0xc6c>)
 80063c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063cc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80063d0:	2102      	movs	r1, #2
 80063d2:	6011      	str	r1, [r2, #0]
 80063d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063d8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80063dc:	6812      	ldr	r2, [r2, #0]
 80063de:	fa92 f1a2 	rbit	r1, r2
 80063e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063e6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80063ea:	6011      	str	r1, [r2, #0]
  return result;
 80063ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80063f0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80063f4:	6812      	ldr	r2, [r2, #0]
 80063f6:	fab2 f282 	clz	r2, r2
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	f002 021f 	and.w	r2, r2, #31
 8006406:	2101      	movs	r1, #1
 8006408:	fa01 f202 	lsl.w	r2, r1, r2
 800640c:	4013      	ands	r3, r2
 800640e:	2b00      	cmp	r3, #0
 8006410:	f43f af7f 	beq.w	8006312 <HAL_RCC_OscConfig+0x982>
 8006414:	e07d      	b.n	8006512 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006416:	f7fc f9b1 	bl	800277c <HAL_GetTick>
 800641a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800641e:	e00b      	b.n	8006438 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006420:	f7fc f9ac 	bl	800277c <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006430:	4293      	cmp	r3, r2
 8006432:	d901      	bls.n	8006438 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e2b2      	b.n	800699e <HAL_RCC_OscConfig+0x100e>
 8006438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800643c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8006440:	2202      	movs	r2, #2
 8006442:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006448:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	fa93 f2a3 	rbit	r2, r3
 8006452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006456:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006460:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006464:	2202      	movs	r2, #2
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800646c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	fa93 f2a3 	rbit	r2, r3
 8006476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800647a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800647e:	601a      	str	r2, [r3, #0]
  return result;
 8006480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006484:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8006488:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800648a:	fab3 f383 	clz	r3, r3
 800648e:	b2db      	uxtb	r3, r3
 8006490:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d102      	bne.n	80064a0 <HAL_RCC_OscConfig+0xb10>
 800649a:	4b58      	ldr	r3, [pc, #352]	@ (80065fc <HAL_RCC_OscConfig+0xc6c>)
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	e013      	b.n	80064c8 <HAL_RCC_OscConfig+0xb38>
 80064a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064a4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80064a8:	2202      	movs	r2, #2
 80064aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064b0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	fa93 f2a3 	rbit	r2, r3
 80064ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80064be:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	4b4d      	ldr	r3, [pc, #308]	@ (80065fc <HAL_RCC_OscConfig+0xc6c>)
 80064c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064cc:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80064d0:	2102      	movs	r1, #2
 80064d2:	6011      	str	r1, [r2, #0]
 80064d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064d8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	fa92 f1a2 	rbit	r1, r2
 80064e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064e6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80064ea:	6011      	str	r1, [r2, #0]
  return result;
 80064ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80064f0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80064f4:	6812      	ldr	r2, [r2, #0]
 80064f6:	fab2 f282 	clz	r2, r2
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	f002 021f 	and.w	r2, r2, #31
 8006506:	2101      	movs	r1, #1
 8006508:	fa01 f202 	lsl.w	r2, r1, r2
 800650c:	4013      	ands	r3, r2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d186      	bne.n	8006420 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006512:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8006516:	2b01      	cmp	r3, #1
 8006518:	d105      	bne.n	8006526 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800651a:	4b38      	ldr	r3, [pc, #224]	@ (80065fc <HAL_RCC_OscConfig+0xc6c>)
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	4a37      	ldr	r2, [pc, #220]	@ (80065fc <HAL_RCC_OscConfig+0xc6c>)
 8006520:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006524:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800652a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 8232 	beq.w	800699c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006538:	4b30      	ldr	r3, [pc, #192]	@ (80065fc <HAL_RCC_OscConfig+0xc6c>)
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f003 030c 	and.w	r3, r3, #12
 8006540:	2b08      	cmp	r3, #8
 8006542:	f000 8201 	beq.w	8006948 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800654a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	2b02      	cmp	r3, #2
 8006554:	f040 8157 	bne.w	8006806 <HAL_RCC_OscConfig+0xe76>
 8006558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800655c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8006560:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800656a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	fa93 f2a3 	rbit	r2, r3
 8006574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006578:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800657c:	601a      	str	r2, [r3, #0]
  return result;
 800657e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006582:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8006586:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006588:	fab3 f383 	clz	r3, r3
 800658c:	b2db      	uxtb	r3, r3
 800658e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006592:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	461a      	mov	r2, r3
 800659a:	2300      	movs	r3, #0
 800659c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800659e:	f7fc f8ed 	bl	800277c <HAL_GetTick>
 80065a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065a6:	e009      	b.n	80065bc <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065a8:	f7fc f8e8 	bl	800277c <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d901      	bls.n	80065bc <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e1f0      	b.n	800699e <HAL_RCC_OscConfig+0x100e>
 80065bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065c0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80065c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80065c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065ce:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	fa93 f2a3 	rbit	r2, r3
 80065d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065dc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80065e0:	601a      	str	r2, [r3, #0]
  return result;
 80065e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80065e6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80065ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065ec:	fab3 f383 	clz	r3, r3
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80065f4:	d804      	bhi.n	8006600 <HAL_RCC_OscConfig+0xc70>
 80065f6:	4b01      	ldr	r3, [pc, #4]	@ (80065fc <HAL_RCC_OscConfig+0xc6c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	e029      	b.n	8006650 <HAL_RCC_OscConfig+0xcc0>
 80065fc:	40021000 	.word	0x40021000
 8006600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006604:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006608:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800660c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800660e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006612:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	fa93 f2a3 	rbit	r2, r3
 800661c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006620:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800662a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800662e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006638:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	fa93 f2a3 	rbit	r2, r3
 8006642:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006646:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	4bc3      	ldr	r3, [pc, #780]	@ (800695c <HAL_RCC_OscConfig+0xfcc>)
 800664e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006650:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006654:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006658:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800665c:	6011      	str	r1, [r2, #0]
 800665e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006662:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8006666:	6812      	ldr	r2, [r2, #0]
 8006668:	fa92 f1a2 	rbit	r1, r2
 800666c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006670:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8006674:	6011      	str	r1, [r2, #0]
  return result;
 8006676:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800667a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800667e:	6812      	ldr	r2, [r2, #0]
 8006680:	fab2 f282 	clz	r2, r2
 8006684:	b2d2      	uxtb	r2, r2
 8006686:	f042 0220 	orr.w	r2, r2, #32
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	f002 021f 	and.w	r2, r2, #31
 8006690:	2101      	movs	r1, #1
 8006692:	fa01 f202 	lsl.w	r2, r1, r2
 8006696:	4013      	ands	r3, r2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d185      	bne.n	80065a8 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800669c:	4baf      	ldr	r3, [pc, #700]	@ (800695c <HAL_RCC_OscConfig+0xfcc>)
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80066a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80066b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	430b      	orrs	r3, r1
 80066be:	49a7      	ldr	r1, [pc, #668]	@ (800695c <HAL_RCC_OscConfig+0xfcc>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	604b      	str	r3, [r1, #4]
 80066c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066c8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80066cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066d6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	fa93 f2a3 	rbit	r2, r3
 80066e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066e4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80066e8:	601a      	str	r2, [r3, #0]
  return result;
 80066ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80066ee:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80066f2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066f4:	fab3 f383 	clz	r3, r3
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80066fe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	461a      	mov	r2, r3
 8006706:	2301      	movs	r3, #1
 8006708:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800670a:	f7fc f837 	bl	800277c <HAL_GetTick>
 800670e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006712:	e009      	b.n	8006728 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006714:	f7fc f832 	bl	800277c <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e13a      	b.n	800699e <HAL_RCC_OscConfig+0x100e>
 8006728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800672c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006730:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800673a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	fa93 f2a3 	rbit	r2, r3
 8006744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006748:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800674c:	601a      	str	r2, [r3, #0]
  return result;
 800674e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006752:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8006756:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006758:	fab3 f383 	clz	r3, r3
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006760:	d802      	bhi.n	8006768 <HAL_RCC_OscConfig+0xdd8>
 8006762:	4b7e      	ldr	r3, [pc, #504]	@ (800695c <HAL_RCC_OscConfig+0xfcc>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	e027      	b.n	80067b8 <HAL_RCC_OscConfig+0xe28>
 8006768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800676c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006770:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006774:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800677a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	fa93 f2a3 	rbit	r2, r3
 8006784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006788:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006792:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8006796:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067a0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	fa93 f2a3 	rbit	r2, r3
 80067aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80067ae:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	4b69      	ldr	r3, [pc, #420]	@ (800695c <HAL_RCC_OscConfig+0xfcc>)
 80067b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067bc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80067c0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80067c4:	6011      	str	r1, [r2, #0]
 80067c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067ca:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80067ce:	6812      	ldr	r2, [r2, #0]
 80067d0:	fa92 f1a2 	rbit	r1, r2
 80067d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067d8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80067dc:	6011      	str	r1, [r2, #0]
  return result;
 80067de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80067e2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80067e6:	6812      	ldr	r2, [r2, #0]
 80067e8:	fab2 f282 	clz	r2, r2
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	f042 0220 	orr.w	r2, r2, #32
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	f002 021f 	and.w	r2, r2, #31
 80067f8:	2101      	movs	r1, #1
 80067fa:	fa01 f202 	lsl.w	r2, r1, r2
 80067fe:	4013      	ands	r3, r2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d087      	beq.n	8006714 <HAL_RCC_OscConfig+0xd84>
 8006804:	e0ca      	b.n	800699c <HAL_RCC_OscConfig+0x100c>
 8006806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800680a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800680e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006818:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	fa93 f2a3 	rbit	r2, r3
 8006822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006826:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800682a:	601a      	str	r2, [r3, #0]
  return result;
 800682c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006830:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006834:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006836:	fab3 f383 	clz	r3, r3
 800683a:	b2db      	uxtb	r3, r3
 800683c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006840:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	461a      	mov	r2, r3
 8006848:	2300      	movs	r3, #0
 800684a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800684c:	f7fb ff96 	bl	800277c <HAL_GetTick>
 8006850:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006854:	e009      	b.n	800686a <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006856:	f7fb ff91 	bl	800277c <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	2b02      	cmp	r3, #2
 8006864:	d901      	bls.n	800686a <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e099      	b.n	800699e <HAL_RCC_OscConfig+0x100e>
 800686a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800686e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006872:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800687c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	fa93 f2a3 	rbit	r2, r3
 8006886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800688a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800688e:	601a      	str	r2, [r3, #0]
  return result;
 8006890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006894:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8006898:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800689a:	fab3 f383 	clz	r3, r3
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80068a2:	d802      	bhi.n	80068aa <HAL_RCC_OscConfig+0xf1a>
 80068a4:	4b2d      	ldr	r3, [pc, #180]	@ (800695c <HAL_RCC_OscConfig+0xfcc>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	e027      	b.n	80068fa <HAL_RCC_OscConfig+0xf6a>
 80068aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068ae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80068b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068bc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	fa93 f2a3 	rbit	r2, r3
 80068c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068ca:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068d4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80068d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068e2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	fa93 f2a3 	rbit	r2, r3
 80068ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80068f0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	4b19      	ldr	r3, [pc, #100]	@ (800695c <HAL_RCC_OscConfig+0xfcc>)
 80068f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80068fe:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006902:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006906:	6011      	str	r1, [r2, #0]
 8006908:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800690c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006910:	6812      	ldr	r2, [r2, #0]
 8006912:	fa92 f1a2 	rbit	r1, r2
 8006916:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800691a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800691e:	6011      	str	r1, [r2, #0]
  return result;
 8006920:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006924:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006928:	6812      	ldr	r2, [r2, #0]
 800692a:	fab2 f282 	clz	r2, r2
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	f042 0220 	orr.w	r2, r2, #32
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	f002 021f 	and.w	r2, r2, #31
 800693a:	2101      	movs	r1, #1
 800693c:	fa01 f202 	lsl.w	r2, r1, r2
 8006940:	4013      	ands	r3, r2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d187      	bne.n	8006856 <HAL_RCC_OscConfig+0xec6>
 8006946:	e029      	b.n	800699c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800694c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	69db      	ldr	r3, [r3, #28]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d103      	bne.n	8006960 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e020      	b.n	800699e <HAL_RCC_OscConfig+0x100e>
 800695c:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006960:	4b11      	ldr	r3, [pc, #68]	@ (80069a8 <HAL_RCC_OscConfig+0x1018>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006968:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800696c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006974:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	429a      	cmp	r2, r3
 800697e:	d10b      	bne.n	8006998 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006980:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006984:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800698c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006994:	429a      	cmp	r2, r3
 8006996:	d001      	beq.n	800699c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e000      	b.n	800699e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	40021000 	.word	0x40021000

080069ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b09e      	sub	sp, #120	@ 0x78
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e154      	b.n	8006c6e <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069c4:	4b89      	ldr	r3, [pc, #548]	@ (8006bec <HAL_RCC_ClockConfig+0x240>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d910      	bls.n	80069f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069d2:	4b86      	ldr	r3, [pc, #536]	@ (8006bec <HAL_RCC_ClockConfig+0x240>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f023 0207 	bic.w	r2, r3, #7
 80069da:	4984      	ldr	r1, [pc, #528]	@ (8006bec <HAL_RCC_ClockConfig+0x240>)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	4313      	orrs	r3, r2
 80069e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069e2:	4b82      	ldr	r3, [pc, #520]	@ (8006bec <HAL_RCC_ClockConfig+0x240>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d001      	beq.n	80069f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e13c      	b.n	8006c6e <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d008      	beq.n	8006a12 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a00:	4b7b      	ldr	r3, [pc, #492]	@ (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	4978      	ldr	r1, [pc, #480]	@ (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 80cd 	beq.w	8006bba <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d137      	bne.n	8006a98 <HAL_RCC_ClockConfig+0xec>
 8006a28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a30:	fa93 f3a3 	rbit	r3, r3
 8006a34:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006a36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a38:	fab3 f383 	clz	r3, r3
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006a40:	d802      	bhi.n	8006a48 <HAL_RCC_ClockConfig+0x9c>
 8006a42:	4b6b      	ldr	r3, [pc, #428]	@ (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	e00f      	b.n	8006a68 <HAL_RCC_ClockConfig+0xbc>
 8006a48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a50:	fa93 f3a3 	rbit	r3, r3
 8006a54:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a5e:	fa93 f3a3 	rbit	r3, r3
 8006a62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a64:	4b62      	ldr	r3, [pc, #392]	@ (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a68:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006a6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006a6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a70:	fa92 f2a2 	rbit	r2, r2
 8006a74:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8006a76:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006a78:	fab2 f282 	clz	r2, r2
 8006a7c:	b2d2      	uxtb	r2, r2
 8006a7e:	f042 0220 	orr.w	r2, r2, #32
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	f002 021f 	and.w	r2, r2, #31
 8006a88:	2101      	movs	r1, #1
 8006a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8006a8e:	4013      	ands	r3, r2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d171      	bne.n	8006b78 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e0ea      	b.n	8006c6e <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d137      	bne.n	8006b10 <HAL_RCC_ClockConfig+0x164>
 8006aa0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006aa4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006aa8:	fa93 f3a3 	rbit	r3, r3
 8006aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ab0:	fab3 f383 	clz	r3, r3
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b3f      	cmp	r3, #63	@ 0x3f
 8006ab8:	d802      	bhi.n	8006ac0 <HAL_RCC_ClockConfig+0x114>
 8006aba:	4b4d      	ldr	r3, [pc, #308]	@ (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	e00f      	b.n	8006ae0 <HAL_RCC_ClockConfig+0x134>
 8006ac0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ac8:	fa93 f3a3 	rbit	r3, r3
 8006acc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ace:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ad2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ad6:	fa93 f3a3 	rbit	r3, r3
 8006ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006adc:	4b44      	ldr	r3, [pc, #272]	@ (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006ae4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006ae6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ae8:	fa92 f2a2 	rbit	r2, r2
 8006aec:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8006aee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006af0:	fab2 f282 	clz	r2, r2
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	f042 0220 	orr.w	r2, r2, #32
 8006afa:	b2d2      	uxtb	r2, r2
 8006afc:	f002 021f 	and.w	r2, r2, #31
 8006b00:	2101      	movs	r1, #1
 8006b02:	fa01 f202 	lsl.w	r2, r1, r2
 8006b06:	4013      	ands	r3, r2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d135      	bne.n	8006b78 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e0ae      	b.n	8006c6e <HAL_RCC_ClockConfig+0x2c2>
 8006b10:	2302      	movs	r3, #2
 8006b12:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b16:	fa93 f3a3 	rbit	r3, r3
 8006b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b1e:	fab3 f383 	clz	r3, r3
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b3f      	cmp	r3, #63	@ 0x3f
 8006b26:	d802      	bhi.n	8006b2e <HAL_RCC_ClockConfig+0x182>
 8006b28:	4b31      	ldr	r3, [pc, #196]	@ (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	e00d      	b.n	8006b4a <HAL_RCC_ClockConfig+0x19e>
 8006b2e:	2302      	movs	r3, #2
 8006b30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b34:	fa93 f3a3 	rbit	r3, r3
 8006b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	623b      	str	r3, [r7, #32]
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	fa93 f3a3 	rbit	r3, r3
 8006b44:	61fb      	str	r3, [r7, #28]
 8006b46:	4b2a      	ldr	r3, [pc, #168]	@ (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	61ba      	str	r2, [r7, #24]
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	fa92 f2a2 	rbit	r2, r2
 8006b54:	617a      	str	r2, [r7, #20]
  return result;
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	fab2 f282 	clz	r2, r2
 8006b5c:	b2d2      	uxtb	r2, r2
 8006b5e:	f042 0220 	orr.w	r2, r2, #32
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	f002 021f 	and.w	r2, r2, #31
 8006b68:	2101      	movs	r1, #1
 8006b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b6e:	4013      	ands	r3, r2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e07a      	b.n	8006c6e <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b78:	4b1d      	ldr	r3, [pc, #116]	@ (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f023 0203 	bic.w	r2, r3, #3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	491a      	ldr	r1, [pc, #104]	@ (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b8a:	f7fb fdf7 	bl	800277c <HAL_GetTick>
 8006b8e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b90:	e00a      	b.n	8006ba8 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b92:	f7fb fdf3 	bl	800277c <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d901      	bls.n	8006ba8 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e062      	b.n	8006c6e <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ba8:	4b11      	ldr	r3, [pc, #68]	@ (8006bf0 <HAL_RCC_ClockConfig+0x244>)
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f003 020c 	and.w	r2, r3, #12
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d1eb      	bne.n	8006b92 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bba:	4b0c      	ldr	r3, [pc, #48]	@ (8006bec <HAL_RCC_ClockConfig+0x240>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0307 	and.w	r3, r3, #7
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d215      	bcs.n	8006bf4 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bc8:	4b08      	ldr	r3, [pc, #32]	@ (8006bec <HAL_RCC_ClockConfig+0x240>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f023 0207 	bic.w	r2, r3, #7
 8006bd0:	4906      	ldr	r1, [pc, #24]	@ (8006bec <HAL_RCC_ClockConfig+0x240>)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bd8:	4b04      	ldr	r3, [pc, #16]	@ (8006bec <HAL_RCC_ClockConfig+0x240>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0307 	and.w	r3, r3, #7
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d006      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e041      	b.n	8006c6e <HAL_RCC_ClockConfig+0x2c2>
 8006bea:	bf00      	nop
 8006bec:	40022000 	.word	0x40022000
 8006bf0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d008      	beq.n	8006c12 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c00:	4b1d      	ldr	r3, [pc, #116]	@ (8006c78 <HAL_RCC_ClockConfig+0x2cc>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	491a      	ldr	r1, [pc, #104]	@ (8006c78 <HAL_RCC_ClockConfig+0x2cc>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d009      	beq.n	8006c32 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c1e:	4b16      	ldr	r3, [pc, #88]	@ (8006c78 <HAL_RCC_ClockConfig+0x2cc>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	4912      	ldr	r1, [pc, #72]	@ (8006c78 <HAL_RCC_ClockConfig+0x2cc>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006c32:	f000 f829 	bl	8006c88 <HAL_RCC_GetSysClockFreq>
 8006c36:	4601      	mov	r1, r0
 8006c38:	4b0f      	ldr	r3, [pc, #60]	@ (8006c78 <HAL_RCC_ClockConfig+0x2cc>)
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c40:	22f0      	movs	r2, #240	@ 0xf0
 8006c42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	fa92 f2a2 	rbit	r2, r2
 8006c4a:	60fa      	str	r2, [r7, #12]
  return result;
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	fab2 f282 	clz	r2, r2
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	40d3      	lsrs	r3, r2
 8006c56:	4a09      	ldr	r2, [pc, #36]	@ (8006c7c <HAL_RCC_ClockConfig+0x2d0>)
 8006c58:	5cd3      	ldrb	r3, [r2, r3]
 8006c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8006c5e:	4a08      	ldr	r2, [pc, #32]	@ (8006c80 <HAL_RCC_ClockConfig+0x2d4>)
 8006c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006c62:	4b08      	ldr	r3, [pc, #32]	@ (8006c84 <HAL_RCC_ClockConfig+0x2d8>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fb fd44 	bl	80026f4 <HAL_InitTick>
  
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3778      	adds	r7, #120	@ 0x78
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	08009478 	.word	0x08009478
 8006c80:	2000000c 	.word	0x2000000c
 8006c84:	20000010 	.word	0x20000010

08006c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	2300      	movs	r3, #0
 8006c94:	60bb      	str	r3, [r7, #8]
 8006c96:	2300      	movs	r3, #0
 8006c98:	617b      	str	r3, [r7, #20]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8006d1c <HAL_RCC_GetSysClockFreq+0x94>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f003 030c 	and.w	r3, r3, #12
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d002      	beq.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x30>
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d003      	beq.n	8006cbe <HAL_RCC_GetSysClockFreq+0x36>
 8006cb6:	e026      	b.n	8006d06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006cb8:	4b19      	ldr	r3, [pc, #100]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8006cba:	613b      	str	r3, [r7, #16]
      break;
 8006cbc:	e026      	b.n	8006d0c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	0c9b      	lsrs	r3, r3, #18
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	4a17      	ldr	r2, [pc, #92]	@ (8006d24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006cc8:	5cd3      	ldrb	r3, [r2, r3]
 8006cca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006ccc:	4b13      	ldr	r3, [pc, #76]	@ (8006d1c <HAL_RCC_GetSysClockFreq+0x94>)
 8006cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd0:	f003 030f 	and.w	r3, r3, #15
 8006cd4:	4a14      	ldr	r2, [pc, #80]	@ (8006d28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006cd6:	5cd3      	ldrb	r3, [r2, r3]
 8006cd8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d008      	beq.n	8006cf6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006ce4:	4a0e      	ldr	r2, [pc, #56]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	fb02 f303 	mul.w	r3, r2, r3
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	e004      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8006d2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8006cfa:	fb02 f303 	mul.w	r3, r2, r3
 8006cfe:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	613b      	str	r3, [r7, #16]
      break;
 8006d04:	e002      	b.n	8006d0c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d06:	4b06      	ldr	r3, [pc, #24]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d08:	613b      	str	r3, [r7, #16]
      break;
 8006d0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d0c:	693b      	ldr	r3, [r7, #16]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	371c      	adds	r7, #28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	40021000 	.word	0x40021000
 8006d20:	007a1200 	.word	0x007a1200
 8006d24:	08009488 	.word	0x08009488
 8006d28:	08009498 	.word	0x08009498
 8006d2c:	003d0900 	.word	0x003d0900

08006d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b092      	sub	sp, #72	@ 0x48
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006d40:	2300      	movs	r3, #0
 8006d42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 80d2 	beq.w	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d54:	4b4d      	ldr	r3, [pc, #308]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10e      	bne.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d60:	4b4a      	ldr	r3, [pc, #296]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	4a49      	ldr	r2, [pc, #292]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d6a:	61d3      	str	r3, [r2, #28]
 8006d6c:	4b47      	ldr	r3, [pc, #284]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d74:	60bb      	str	r3, [r7, #8]
 8006d76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d7e:	4b44      	ldr	r3, [pc, #272]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d118      	bne.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d8a:	4b41      	ldr	r3, [pc, #260]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a40      	ldr	r2, [pc, #256]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d96:	f7fb fcf1 	bl	800277c <HAL_GetTick>
 8006d9a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d9c:	e008      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d9e:	f7fb fced 	bl	800277c <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b64      	cmp	r3, #100	@ 0x64
 8006daa:	d901      	bls.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e149      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x314>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006db0:	4b37      	ldr	r3, [pc, #220]	@ (8006e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0f0      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006dbc:	4b33      	ldr	r3, [pc, #204]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 8082 	beq.w	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dd6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d07a      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006de6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006dea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dee:	fa93 f3a3 	rbit	r3, r3
 8006df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006df6:	fab3 f383 	clz	r3, r3
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	4b25      	ldr	r3, [pc, #148]	@ (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e00:	4413      	add	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	461a      	mov	r2, r3
 8006e06:	2301      	movs	r3, #1
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e12:	fa93 f3a3 	rbit	r3, r3
 8006e16:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e1a:	fab3 f383 	clz	r3, r3
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	461a      	mov	r2, r3
 8006e22:	4b1c      	ldr	r3, [pc, #112]	@ (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	461a      	mov	r2, r3
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006e2e:	4a17      	ldr	r2, [pc, #92]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e32:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d049      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e3e:	f7fb fc9d 	bl	800277c <HAL_GetTick>
 8006e42:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e44:	e00a      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e46:	f7fb fc99 	bl	800277c <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d901      	bls.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e0f3      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e62:	fa93 f3a3 	rbit	r3, r3
 8006e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e68:	2302      	movs	r3, #2
 8006e6a:	623b      	str	r3, [r7, #32]
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	fa93 f3a3 	rbit	r3, r3
 8006e72:	61fb      	str	r3, [r7, #28]
  return result;
 8006e74:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e76:	fab3 f383 	clz	r3, r3
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d108      	bne.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006e86:	4b01      	ldr	r3, [pc, #4]	@ (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	e00d      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8006e8c:	40021000 	.word	0x40021000
 8006e90:	40007000 	.word	0x40007000
 8006e94:	10908100 	.word	0x10908100
 8006e98:	2302      	movs	r3, #2
 8006e9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	fa93 f3a3 	rbit	r3, r3
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	4b69      	ldr	r3, [pc, #420]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	613a      	str	r2, [r7, #16]
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	fa92 f2a2 	rbit	r2, r2
 8006eb2:	60fa      	str	r2, [r7, #12]
  return result;
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	fab2 f282 	clz	r2, r2
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	f002 021f 	and.w	r2, r2, #31
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8006ecc:	4013      	ands	r3, r2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0b9      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006ed2:	4b5e      	ldr	r3, [pc, #376]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	495b      	ldr	r1, [pc, #364]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006ee4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d105      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eec:	4b57      	ldr	r3, [pc, #348]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	4a56      	ldr	r2, [pc, #344]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006ef2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ef6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d008      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f04:	4b51      	ldr	r3, [pc, #324]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f08:	f023 0203 	bic.w	r2, r3, #3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	494e      	ldr	r1, [pc, #312]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d008      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f22:	4b4a      	ldr	r3, [pc, #296]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f26:	f023 0210 	bic.w	r2, r3, #16
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	4947      	ldr	r1, [pc, #284]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d008      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006f40:	4b42      	ldr	r3, [pc, #264]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f4c:	493f      	ldr	r1, [pc, #252]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d008      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f62:	f023 0220 	bic.w	r2, r3, #32
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	4938      	ldr	r1, [pc, #224]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d008      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f7c:	4b33      	ldr	r3, [pc, #204]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f80:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	4930      	ldr	r1, [pc, #192]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d008      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	4929      	ldr	r1, [pc, #164]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d008      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8006fb8:	4b24      	ldr	r3, [pc, #144]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	4921      	ldr	r1, [pc, #132]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d008      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fda:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	491a      	ldr	r1, [pc, #104]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d008      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006ff4:	4b15      	ldr	r3, [pc, #84]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007000:	4912      	ldr	r1, [pc, #72]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007002:	4313      	orrs	r3, r2
 8007004:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d008      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8007012:	4b0e      	ldr	r3, [pc, #56]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007016:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701e:	490b      	ldr	r1, [pc, #44]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007020:	4313      	orrs	r3, r2
 8007022:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d008      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8007030:	4b06      	ldr	r3, [pc, #24]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007034:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703c:	4903      	ldr	r1, [pc, #12]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800703e:	4313      	orrs	r3, r2
 8007040:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3748      	adds	r7, #72	@ 0x48
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	40021000 	.word	0x40021000

08007050 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e049      	b.n	80070f6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d106      	bne.n	800707c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f841 	bl	80070fe <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2202      	movs	r2, #2
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3304      	adds	r3, #4
 800708c:	4619      	mov	r1, r3
 800708e:	4610      	mov	r0, r2
 8007090:	f000 fc3e 	bl	8007910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3708      	adds	r7, #8
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b082      	sub	sp, #8
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e049      	b.n	80071b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	d106      	bne.n	800713e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7fb f999 	bl	8002470 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2202      	movs	r2, #2
 8007142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3304      	adds	r3, #4
 800714e:	4619      	mov	r1, r3
 8007150:	4610      	mov	r0, r2
 8007152:	f000 fbdd 	bl	8007910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d109      	bne.n	80071e4 <HAL_TIM_PWM_Start+0x24>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b01      	cmp	r3, #1
 80071da:	bf14      	ite	ne
 80071dc:	2301      	movne	r3, #1
 80071de:	2300      	moveq	r3, #0
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	e03c      	b.n	800725e <HAL_TIM_PWM_Start+0x9e>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2b04      	cmp	r3, #4
 80071e8:	d109      	bne.n	80071fe <HAL_TIM_PWM_Start+0x3e>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	bf14      	ite	ne
 80071f6:	2301      	movne	r3, #1
 80071f8:	2300      	moveq	r3, #0
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	e02f      	b.n	800725e <HAL_TIM_PWM_Start+0x9e>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b08      	cmp	r3, #8
 8007202:	d109      	bne.n	8007218 <HAL_TIM_PWM_Start+0x58>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b01      	cmp	r3, #1
 800720e:	bf14      	ite	ne
 8007210:	2301      	movne	r3, #1
 8007212:	2300      	moveq	r3, #0
 8007214:	b2db      	uxtb	r3, r3
 8007216:	e022      	b.n	800725e <HAL_TIM_PWM_Start+0x9e>
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2b0c      	cmp	r3, #12
 800721c:	d109      	bne.n	8007232 <HAL_TIM_PWM_Start+0x72>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b01      	cmp	r3, #1
 8007228:	bf14      	ite	ne
 800722a:	2301      	movne	r3, #1
 800722c:	2300      	moveq	r3, #0
 800722e:	b2db      	uxtb	r3, r3
 8007230:	e015      	b.n	800725e <HAL_TIM_PWM_Start+0x9e>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b10      	cmp	r3, #16
 8007236:	d109      	bne.n	800724c <HAL_TIM_PWM_Start+0x8c>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	bf14      	ite	ne
 8007244:	2301      	movne	r3, #1
 8007246:	2300      	moveq	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	e008      	b.n	800725e <HAL_TIM_PWM_Start+0x9e>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b01      	cmp	r3, #1
 8007256:	bf14      	ite	ne
 8007258:	2301      	movne	r3, #1
 800725a:	2300      	moveq	r3, #0
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e083      	b.n	800736e <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d104      	bne.n	8007276 <HAL_TIM_PWM_Start+0xb6>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007274:	e023      	b.n	80072be <HAL_TIM_PWM_Start+0xfe>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	2b04      	cmp	r3, #4
 800727a:	d104      	bne.n	8007286 <HAL_TIM_PWM_Start+0xc6>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007284:	e01b      	b.n	80072be <HAL_TIM_PWM_Start+0xfe>
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b08      	cmp	r3, #8
 800728a:	d104      	bne.n	8007296 <HAL_TIM_PWM_Start+0xd6>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007294:	e013      	b.n	80072be <HAL_TIM_PWM_Start+0xfe>
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b0c      	cmp	r3, #12
 800729a:	d104      	bne.n	80072a6 <HAL_TIM_PWM_Start+0xe6>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2202      	movs	r2, #2
 80072a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072a4:	e00b      	b.n	80072be <HAL_TIM_PWM_Start+0xfe>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b10      	cmp	r3, #16
 80072aa:	d104      	bne.n	80072b6 <HAL_TIM_PWM_Start+0xf6>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072b4:	e003      	b.n	80072be <HAL_TIM_PWM_Start+0xfe>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2202      	movs	r2, #2
 80072ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2201      	movs	r2, #1
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 fe42 	bl	8007f50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a29      	ldr	r2, [pc, #164]	@ (8007378 <HAL_TIM_PWM_Start+0x1b8>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d00e      	beq.n	80072f4 <HAL_TIM_PWM_Start+0x134>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a28      	ldr	r2, [pc, #160]	@ (800737c <HAL_TIM_PWM_Start+0x1bc>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d009      	beq.n	80072f4 <HAL_TIM_PWM_Start+0x134>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a26      	ldr	r2, [pc, #152]	@ (8007380 <HAL_TIM_PWM_Start+0x1c0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d004      	beq.n	80072f4 <HAL_TIM_PWM_Start+0x134>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a25      	ldr	r2, [pc, #148]	@ (8007384 <HAL_TIM_PWM_Start+0x1c4>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d101      	bne.n	80072f8 <HAL_TIM_PWM_Start+0x138>
 80072f4:	2301      	movs	r3, #1
 80072f6:	e000      	b.n	80072fa <HAL_TIM_PWM_Start+0x13a>
 80072f8:	2300      	movs	r3, #0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d007      	beq.n	800730e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800730c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a19      	ldr	r2, [pc, #100]	@ (8007378 <HAL_TIM_PWM_Start+0x1b8>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d009      	beq.n	800732c <HAL_TIM_PWM_Start+0x16c>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007320:	d004      	beq.n	800732c <HAL_TIM_PWM_Start+0x16c>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a15      	ldr	r2, [pc, #84]	@ (800737c <HAL_TIM_PWM_Start+0x1bc>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d115      	bne.n	8007358 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	4b15      	ldr	r3, [pc, #84]	@ (8007388 <HAL_TIM_PWM_Start+0x1c8>)
 8007334:	4013      	ands	r3, r2
 8007336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2b06      	cmp	r3, #6
 800733c:	d015      	beq.n	800736a <HAL_TIM_PWM_Start+0x1aa>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007344:	d011      	beq.n	800736a <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f042 0201 	orr.w	r2, r2, #1
 8007354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007356:	e008      	b.n	800736a <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0201 	orr.w	r2, r2, #1
 8007366:	601a      	str	r2, [r3, #0]
 8007368:	e000      	b.n	800736c <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800736a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	40012c00 	.word	0x40012c00
 800737c:	40014000 	.word	0x40014000
 8007380:	40014400 	.word	0x40014400
 8007384:	40014800 	.word	0x40014800
 8007388:	00010007 	.word	0x00010007

0800738c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e097      	b.n	80074d0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d106      	bne.n	80073ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7fb f87b 	bl	80024b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2202      	movs	r2, #2
 80073be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6812      	ldr	r2, [r2, #0]
 80073cc:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80073d0:	f023 0307 	bic.w	r3, r3, #7
 80073d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3304      	adds	r3, #4
 80073de:	4619      	mov	r1, r3
 80073e0:	4610      	mov	r0, r2
 80073e2:	f000 fa95 	bl	8007910 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6a1b      	ldr	r3, [r3, #32]
 80073fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	4313      	orrs	r3, r2
 8007406:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800740e:	f023 0303 	bic.w	r3, r3, #3
 8007412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	021b      	lsls	r3, r3, #8
 800741e:	4313      	orrs	r3, r2
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	4313      	orrs	r3, r2
 8007424:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800742c:	f023 030c 	bic.w	r3, r3, #12
 8007430:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007438:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800743c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	68da      	ldr	r2, [r3, #12]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	021b      	lsls	r3, r3, #8
 8007448:	4313      	orrs	r3, r2
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	4313      	orrs	r3, r2
 800744e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	011a      	lsls	r2, r3, #4
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	031b      	lsls	r3, r3, #12
 800745c:	4313      	orrs	r3, r2
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	4313      	orrs	r3, r2
 8007462:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800746a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007472:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	011b      	lsls	r3, r3, #4
 800747e:	4313      	orrs	r3, r2
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80074f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007500:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d110      	bne.n	800752a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d102      	bne.n	8007514 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800750e:	7b7b      	ldrb	r3, [r7, #13]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d001      	beq.n	8007518 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e069      	b.n	80075ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007528:	e031      	b.n	800758e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b04      	cmp	r3, #4
 800752e:	d110      	bne.n	8007552 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d102      	bne.n	800753c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007536:	7b3b      	ldrb	r3, [r7, #12]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d001      	beq.n	8007540 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e055      	b.n	80075ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2202      	movs	r2, #2
 8007544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007550:	e01d      	b.n	800758e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d108      	bne.n	800756a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007558:	7bbb      	ldrb	r3, [r7, #14]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d105      	bne.n	800756a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800755e:	7b7b      	ldrb	r3, [r7, #13]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d102      	bne.n	800756a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007564:	7b3b      	ldrb	r3, [r7, #12]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d001      	beq.n	800756e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e03e      	b.n	80075ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2202      	movs	r2, #2
 8007572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2202      	movs	r2, #2
 800757a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2202      	movs	r2, #2
 8007582:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2202      	movs	r2, #2
 800758a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <HAL_TIM_Encoder_Start+0xc4>
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	2b04      	cmp	r3, #4
 8007598:	d008      	beq.n	80075ac <HAL_TIM_Encoder_Start+0xd4>
 800759a:	e00f      	b.n	80075bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2201      	movs	r2, #1
 80075a2:	2100      	movs	r1, #0
 80075a4:	4618      	mov	r0, r3
 80075a6:	f000 fcd3 	bl	8007f50 <TIM_CCxChannelCmd>
      break;
 80075aa:	e016      	b.n	80075da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2201      	movs	r2, #1
 80075b2:	2104      	movs	r1, #4
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 fccb 	bl	8007f50 <TIM_CCxChannelCmd>
      break;
 80075ba:	e00e      	b.n	80075da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2201      	movs	r2, #1
 80075c2:	2100      	movs	r1, #0
 80075c4:	4618      	mov	r0, r3
 80075c6:	f000 fcc3 	bl	8007f50 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2201      	movs	r2, #1
 80075d0:	2104      	movs	r1, #4
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 fcbc 	bl	8007f50 <TIM_CCxChannelCmd>
      break;
 80075d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f042 0201 	orr.w	r2, r2, #1
 80075e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800760a:	2b01      	cmp	r3, #1
 800760c:	d101      	bne.n	8007612 <HAL_TIM_OC_ConfigChannel+0x1e>
 800760e:	2302      	movs	r3, #2
 8007610:	e066      	b.n	80076e0 <HAL_TIM_OC_ConfigChannel+0xec>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b14      	cmp	r3, #20
 800761e:	d857      	bhi.n	80076d0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007620:	a201      	add	r2, pc, #4	@ (adr r2, 8007628 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007626:	bf00      	nop
 8007628:	0800767d 	.word	0x0800767d
 800762c:	080076d1 	.word	0x080076d1
 8007630:	080076d1 	.word	0x080076d1
 8007634:	080076d1 	.word	0x080076d1
 8007638:	0800768b 	.word	0x0800768b
 800763c:	080076d1 	.word	0x080076d1
 8007640:	080076d1 	.word	0x080076d1
 8007644:	080076d1 	.word	0x080076d1
 8007648:	08007699 	.word	0x08007699
 800764c:	080076d1 	.word	0x080076d1
 8007650:	080076d1 	.word	0x080076d1
 8007654:	080076d1 	.word	0x080076d1
 8007658:	080076a7 	.word	0x080076a7
 800765c:	080076d1 	.word	0x080076d1
 8007660:	080076d1 	.word	0x080076d1
 8007664:	080076d1 	.word	0x080076d1
 8007668:	080076b5 	.word	0x080076b5
 800766c:	080076d1 	.word	0x080076d1
 8007670:	080076d1 	.word	0x080076d1
 8007674:	080076d1 	.word	0x080076d1
 8007678:	080076c3 	.word	0x080076c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68b9      	ldr	r1, [r7, #8]
 8007682:	4618      	mov	r0, r3
 8007684:	f000 f9be 	bl	8007a04 <TIM_OC1_SetConfig>
      break;
 8007688:	e025      	b.n	80076d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68b9      	ldr	r1, [r7, #8]
 8007690:	4618      	mov	r0, r3
 8007692:	f000 fa3d 	bl	8007b10 <TIM_OC2_SetConfig>
      break;
 8007696:	e01e      	b.n	80076d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68b9      	ldr	r1, [r7, #8]
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 fab6 	bl	8007c10 <TIM_OC3_SetConfig>
      break;
 80076a4:	e017      	b.n	80076d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68b9      	ldr	r1, [r7, #8]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 fb2d 	bl	8007d0c <TIM_OC4_SetConfig>
      break;
 80076b2:	e010      	b.n	80076d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68b9      	ldr	r1, [r7, #8]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 fb8a 	bl	8007dd4 <TIM_OC5_SetConfig>
      break;
 80076c0:	e009      	b.n	80076d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68b9      	ldr	r1, [r7, #8]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 fbe1 	bl	8007e90 <TIM_OC6_SetConfig>
      break;
 80076ce:	e002      	b.n	80076d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	75fb      	strb	r3, [r7, #23]
      break;
 80076d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076de:	7dfb      	ldrb	r3, [r7, #23]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3718      	adds	r7, #24
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d101      	bne.n	8007706 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007702:	2302      	movs	r3, #2
 8007704:	e0ff      	b.n	8007906 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b14      	cmp	r3, #20
 8007712:	f200 80f0 	bhi.w	80078f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007716:	a201      	add	r2, pc, #4	@ (adr r2, 800771c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	08007771 	.word	0x08007771
 8007720:	080078f7 	.word	0x080078f7
 8007724:	080078f7 	.word	0x080078f7
 8007728:	080078f7 	.word	0x080078f7
 800772c:	080077b1 	.word	0x080077b1
 8007730:	080078f7 	.word	0x080078f7
 8007734:	080078f7 	.word	0x080078f7
 8007738:	080078f7 	.word	0x080078f7
 800773c:	080077f3 	.word	0x080077f3
 8007740:	080078f7 	.word	0x080078f7
 8007744:	080078f7 	.word	0x080078f7
 8007748:	080078f7 	.word	0x080078f7
 800774c:	08007833 	.word	0x08007833
 8007750:	080078f7 	.word	0x080078f7
 8007754:	080078f7 	.word	0x080078f7
 8007758:	080078f7 	.word	0x080078f7
 800775c:	08007875 	.word	0x08007875
 8007760:	080078f7 	.word	0x080078f7
 8007764:	080078f7 	.word	0x080078f7
 8007768:	080078f7 	.word	0x080078f7
 800776c:	080078b5 	.word	0x080078b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68b9      	ldr	r1, [r7, #8]
 8007776:	4618      	mov	r0, r3
 8007778:	f000 f944 	bl	8007a04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699a      	ldr	r2, [r3, #24]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f042 0208 	orr.w	r2, r2, #8
 800778a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	699a      	ldr	r2, [r3, #24]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f022 0204 	bic.w	r2, r2, #4
 800779a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6999      	ldr	r1, [r3, #24]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	691a      	ldr	r2, [r3, #16]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	619a      	str	r2, [r3, #24]
      break;
 80077ae:	e0a5      	b.n	80078fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68b9      	ldr	r1, [r7, #8]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 f9aa 	bl	8007b10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	699a      	ldr	r2, [r3, #24]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	699a      	ldr	r2, [r3, #24]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6999      	ldr	r1, [r3, #24]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	021a      	lsls	r2, r3, #8
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	619a      	str	r2, [r3, #24]
      break;
 80077f0:	e084      	b.n	80078fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68b9      	ldr	r1, [r7, #8]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 fa09 	bl	8007c10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	69da      	ldr	r2, [r3, #28]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f042 0208 	orr.w	r2, r2, #8
 800780c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	69da      	ldr	r2, [r3, #28]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 0204 	bic.w	r2, r2, #4
 800781c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	69d9      	ldr	r1, [r3, #28]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	691a      	ldr	r2, [r3, #16]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	61da      	str	r2, [r3, #28]
      break;
 8007830:	e064      	b.n	80078fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68b9      	ldr	r1, [r7, #8]
 8007838:	4618      	mov	r0, r3
 800783a:	f000 fa67 	bl	8007d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	69da      	ldr	r2, [r3, #28]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800784c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	69da      	ldr	r2, [r3, #28]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800785c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	69d9      	ldr	r1, [r3, #28]
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	021a      	lsls	r2, r3, #8
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	430a      	orrs	r2, r1
 8007870:	61da      	str	r2, [r3, #28]
      break;
 8007872:	e043      	b.n	80078fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68b9      	ldr	r1, [r7, #8]
 800787a:	4618      	mov	r0, r3
 800787c:	f000 faaa 	bl	8007dd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f042 0208 	orr.w	r2, r2, #8
 800788e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f022 0204 	bic.w	r2, r2, #4
 800789e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	691a      	ldr	r2, [r3, #16]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	430a      	orrs	r2, r1
 80078b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80078b2:	e023      	b.n	80078fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68b9      	ldr	r1, [r7, #8]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fae8 	bl	8007e90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	021a      	lsls	r2, r3, #8
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	430a      	orrs	r2, r1
 80078f2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80078f4:	e002      	b.n	80078fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	75fb      	strb	r3, [r7, #23]
      break;
 80078fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007904:	7dfb      	ldrb	r3, [r7, #23]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop

08007910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a34      	ldr	r2, [pc, #208]	@ (80079f4 <TIM_Base_SetConfig+0xe4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d003      	beq.n	8007930 <TIM_Base_SetConfig+0x20>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800792e:	d108      	bne.n	8007942 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4313      	orrs	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a2b      	ldr	r2, [pc, #172]	@ (80079f4 <TIM_Base_SetConfig+0xe4>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d00f      	beq.n	800796a <TIM_Base_SetConfig+0x5a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007950:	d00b      	beq.n	800796a <TIM_Base_SetConfig+0x5a>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a28      	ldr	r2, [pc, #160]	@ (80079f8 <TIM_Base_SetConfig+0xe8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d007      	beq.n	800796a <TIM_Base_SetConfig+0x5a>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a27      	ldr	r2, [pc, #156]	@ (80079fc <TIM_Base_SetConfig+0xec>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d003      	beq.n	800796a <TIM_Base_SetConfig+0x5a>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a26      	ldr	r2, [pc, #152]	@ (8007a00 <TIM_Base_SetConfig+0xf0>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d108      	bne.n	800797c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4313      	orrs	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	4313      	orrs	r3, r2
 8007988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a14      	ldr	r2, [pc, #80]	@ (80079f4 <TIM_Base_SetConfig+0xe4>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d00b      	beq.n	80079c0 <TIM_Base_SetConfig+0xb0>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a13      	ldr	r2, [pc, #76]	@ (80079f8 <TIM_Base_SetConfig+0xe8>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d007      	beq.n	80079c0 <TIM_Base_SetConfig+0xb0>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a12      	ldr	r2, [pc, #72]	@ (80079fc <TIM_Base_SetConfig+0xec>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d003      	beq.n	80079c0 <TIM_Base_SetConfig+0xb0>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a11      	ldr	r2, [pc, #68]	@ (8007a00 <TIM_Base_SetConfig+0xf0>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d103      	bne.n	80079c8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	691a      	ldr	r2, [r3, #16]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d105      	bne.n	80079e6 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	f023 0201 	bic.w	r2, r3, #1
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	611a      	str	r2, [r3, #16]
  }
}
 80079e6:	bf00      	nop
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	40012c00 	.word	0x40012c00
 80079f8:	40014000 	.word	0x40014000
 80079fc:	40014400 	.word	0x40014400
 8007a00:	40014800 	.word	0x40014800

08007a04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a1b      	ldr	r3, [r3, #32]
 8007a18:	f023 0201 	bic.w	r2, r3, #1
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f023 0303 	bic.w	r3, r3, #3
 8007a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f023 0302 	bic.w	r3, r3, #2
 8007a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a28      	ldr	r2, [pc, #160]	@ (8007b00 <TIM_OC1_SetConfig+0xfc>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d00b      	beq.n	8007a7c <TIM_OC1_SetConfig+0x78>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a27      	ldr	r2, [pc, #156]	@ (8007b04 <TIM_OC1_SetConfig+0x100>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d007      	beq.n	8007a7c <TIM_OC1_SetConfig+0x78>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a26      	ldr	r2, [pc, #152]	@ (8007b08 <TIM_OC1_SetConfig+0x104>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d003      	beq.n	8007a7c <TIM_OC1_SetConfig+0x78>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a25      	ldr	r2, [pc, #148]	@ (8007b0c <TIM_OC1_SetConfig+0x108>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d10c      	bne.n	8007a96 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f023 0308 	bic.w	r3, r3, #8
 8007a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f023 0304 	bic.w	r3, r3, #4
 8007a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a19      	ldr	r2, [pc, #100]	@ (8007b00 <TIM_OC1_SetConfig+0xfc>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00b      	beq.n	8007ab6 <TIM_OC1_SetConfig+0xb2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a18      	ldr	r2, [pc, #96]	@ (8007b04 <TIM_OC1_SetConfig+0x100>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d007      	beq.n	8007ab6 <TIM_OC1_SetConfig+0xb2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a17      	ldr	r2, [pc, #92]	@ (8007b08 <TIM_OC1_SetConfig+0x104>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d003      	beq.n	8007ab6 <TIM_OC1_SetConfig+0xb2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a16      	ldr	r2, [pc, #88]	@ (8007b0c <TIM_OC1_SetConfig+0x108>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d111      	bne.n	8007ada <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	621a      	str	r2, [r3, #32]
}
 8007af4:	bf00      	nop
 8007af6:	371c      	adds	r7, #28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	40012c00 	.word	0x40012c00
 8007b04:	40014000 	.word	0x40014000
 8007b08:	40014400 	.word	0x40014400
 8007b0c:	40014800 	.word	0x40014800

08007b10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b087      	sub	sp, #28
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a1b      	ldr	r3, [r3, #32]
 8007b24:	f023 0210 	bic.w	r2, r3, #16
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	021b      	lsls	r3, r3, #8
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f023 0320 	bic.w	r3, r3, #32
 8007b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	011b      	lsls	r3, r3, #4
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a24      	ldr	r2, [pc, #144]	@ (8007c00 <TIM_OC2_SetConfig+0xf0>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d10d      	bne.n	8007b90 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	011b      	lsls	r3, r3, #4
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a1b      	ldr	r2, [pc, #108]	@ (8007c00 <TIM_OC2_SetConfig+0xf0>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d00b      	beq.n	8007bb0 <TIM_OC2_SetConfig+0xa0>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8007c04 <TIM_OC2_SetConfig+0xf4>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d007      	beq.n	8007bb0 <TIM_OC2_SetConfig+0xa0>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a19      	ldr	r2, [pc, #100]	@ (8007c08 <TIM_OC2_SetConfig+0xf8>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d003      	beq.n	8007bb0 <TIM_OC2_SetConfig+0xa0>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a18      	ldr	r2, [pc, #96]	@ (8007c0c <TIM_OC2_SetConfig+0xfc>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d113      	bne.n	8007bd8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007bb6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007bbe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	621a      	str	r2, [r3, #32]
}
 8007bf2:	bf00      	nop
 8007bf4:	371c      	adds	r7, #28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	40012c00 	.word	0x40012c00
 8007c04:	40014000 	.word	0x40014000
 8007c08:	40014400 	.word	0x40014400
 8007c0c:	40014800 	.word	0x40014800

08007c10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b087      	sub	sp, #28
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a1b      	ldr	r3, [r3, #32]
 8007c24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 0303 	bic.w	r3, r3, #3
 8007c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	021b      	lsls	r3, r3, #8
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a23      	ldr	r2, [pc, #140]	@ (8007cfc <TIM_OC3_SetConfig+0xec>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d10d      	bne.n	8007c8e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	021b      	lsls	r3, r3, #8
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c8c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a1a      	ldr	r2, [pc, #104]	@ (8007cfc <TIM_OC3_SetConfig+0xec>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d00b      	beq.n	8007cae <TIM_OC3_SetConfig+0x9e>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a19      	ldr	r2, [pc, #100]	@ (8007d00 <TIM_OC3_SetConfig+0xf0>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d007      	beq.n	8007cae <TIM_OC3_SetConfig+0x9e>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a18      	ldr	r2, [pc, #96]	@ (8007d04 <TIM_OC3_SetConfig+0xf4>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d003      	beq.n	8007cae <TIM_OC3_SetConfig+0x9e>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a17      	ldr	r2, [pc, #92]	@ (8007d08 <TIM_OC3_SetConfig+0xf8>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d113      	bne.n	8007cd6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	011b      	lsls	r3, r3, #4
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	011b      	lsls	r3, r3, #4
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	621a      	str	r2, [r3, #32]
}
 8007cf0:	bf00      	nop
 8007cf2:	371c      	adds	r7, #28
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	40012c00 	.word	0x40012c00
 8007d00:	40014000 	.word	0x40014000
 8007d04:	40014400 	.word	0x40014400
 8007d08:	40014800 	.word	0x40014800

08007d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	021b      	lsls	r3, r3, #8
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	031b      	lsls	r3, r3, #12
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a16      	ldr	r2, [pc, #88]	@ (8007dc4 <TIM_OC4_SetConfig+0xb8>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d00b      	beq.n	8007d88 <TIM_OC4_SetConfig+0x7c>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a15      	ldr	r2, [pc, #84]	@ (8007dc8 <TIM_OC4_SetConfig+0xbc>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d007      	beq.n	8007d88 <TIM_OC4_SetConfig+0x7c>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a14      	ldr	r2, [pc, #80]	@ (8007dcc <TIM_OC4_SetConfig+0xc0>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d003      	beq.n	8007d88 <TIM_OC4_SetConfig+0x7c>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a13      	ldr	r2, [pc, #76]	@ (8007dd0 <TIM_OC4_SetConfig+0xc4>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d109      	bne.n	8007d9c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	019b      	lsls	r3, r3, #6
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	621a      	str	r2, [r3, #32]
}
 8007db6:	bf00      	nop
 8007db8:	371c      	adds	r7, #28
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	40012c00 	.word	0x40012c00
 8007dc8:	40014000 	.word	0x40014000
 8007dcc:	40014400 	.word	0x40014400
 8007dd0:	40014800 	.word	0x40014800

08007dd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a1b      	ldr	r3, [r3, #32]
 8007de8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007e18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	041b      	lsls	r3, r3, #16
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a15      	ldr	r2, [pc, #84]	@ (8007e80 <TIM_OC5_SetConfig+0xac>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d00b      	beq.n	8007e46 <TIM_OC5_SetConfig+0x72>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a14      	ldr	r2, [pc, #80]	@ (8007e84 <TIM_OC5_SetConfig+0xb0>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d007      	beq.n	8007e46 <TIM_OC5_SetConfig+0x72>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a13      	ldr	r2, [pc, #76]	@ (8007e88 <TIM_OC5_SetConfig+0xb4>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d003      	beq.n	8007e46 <TIM_OC5_SetConfig+0x72>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a12      	ldr	r2, [pc, #72]	@ (8007e8c <TIM_OC5_SetConfig+0xb8>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d109      	bne.n	8007e5a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	621a      	str	r2, [r3, #32]
}
 8007e74:	bf00      	nop
 8007e76:	371c      	adds	r7, #28
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	40012c00 	.word	0x40012c00
 8007e84:	40014000 	.word	0x40014000
 8007e88:	40014400 	.word	0x40014400
 8007e8c:	40014800 	.word	0x40014800

08007e90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b087      	sub	sp, #28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	051b      	lsls	r3, r3, #20
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a16      	ldr	r2, [pc, #88]	@ (8007f40 <TIM_OC6_SetConfig+0xb0>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d00b      	beq.n	8007f04 <TIM_OC6_SetConfig+0x74>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a15      	ldr	r2, [pc, #84]	@ (8007f44 <TIM_OC6_SetConfig+0xb4>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d007      	beq.n	8007f04 <TIM_OC6_SetConfig+0x74>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a14      	ldr	r2, [pc, #80]	@ (8007f48 <TIM_OC6_SetConfig+0xb8>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d003      	beq.n	8007f04 <TIM_OC6_SetConfig+0x74>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a13      	ldr	r2, [pc, #76]	@ (8007f4c <TIM_OC6_SetConfig+0xbc>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d109      	bne.n	8007f18 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	029b      	lsls	r3, r3, #10
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	621a      	str	r2, [r3, #32]
}
 8007f32:	bf00      	nop
 8007f34:	371c      	adds	r7, #28
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	40012c00 	.word	0x40012c00
 8007f44:	40014000 	.word	0x40014000
 8007f48:	40014400 	.word	0x40014400
 8007f4c:	40014800 	.word	0x40014800

08007f50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f003 031f 	and.w	r3, r3, #31
 8007f62:	2201      	movs	r2, #1
 8007f64:	fa02 f303 	lsl.w	r3, r2, r3
 8007f68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6a1a      	ldr	r2, [r3, #32]
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	43db      	mvns	r3, r3
 8007f72:	401a      	ands	r2, r3
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6a1a      	ldr	r2, [r3, #32]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	f003 031f 	and.w	r3, r3, #31
 8007f82:	6879      	ldr	r1, [r7, #4]
 8007f84:	fa01 f303 	lsl.w	r3, r1, r3
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	621a      	str	r2, [r3, #32]
}
 8007f8e:	bf00      	nop
 8007f90:	371c      	adds	r7, #28
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
	...

08007f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d101      	bne.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e04f      	b.n	8008054 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a21      	ldr	r2, [pc, #132]	@ (8008060 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d108      	bne.n	8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007fe4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a14      	ldr	r2, [pc, #80]	@ (8008060 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d009      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800801c:	d004      	beq.n	8008028 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a10      	ldr	r2, [pc, #64]	@ (8008064 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d10c      	bne.n	8008042 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800802e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	4313      	orrs	r3, r2
 8008038:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	40012c00 	.word	0x40012c00
 8008064:	40014000 	.word	0x40014000

08008068 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800807c:	2b01      	cmp	r3, #1
 800807e:	d101      	bne.n	8008084 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008080:	2302      	movs	r3, #2
 8008082:	e060      	b.n	8008146 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	4313      	orrs	r3, r2
 8008098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	695b      	ldr	r3, [r3, #20]
 80080dc:	4313      	orrs	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ea:	4313      	orrs	r3, r2
 80080ec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	041b      	lsls	r3, r3, #16
 80080fa:	4313      	orrs	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a14      	ldr	r2, [pc, #80]	@ (8008154 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d115      	bne.n	8008134 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008112:	051b      	lsls	r3, r3, #20
 8008114:	4313      	orrs	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	4313      	orrs	r3, r2
 8008124:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	4313      	orrs	r3, r2
 8008132:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	40012c00 	.word	0x40012c00

08008158 <exp>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	ed2d 8b02 	vpush	{d8}
 800815e:	ec55 4b10 	vmov	r4, r5, d0
 8008162:	f000 f9c1 	bl	80084e8 <__ieee754_exp>
 8008166:	eeb0 8a40 	vmov.f32	s16, s0
 800816a:	eef0 8a60 	vmov.f32	s17, s1
 800816e:	ec45 4b10 	vmov	d0, r4, r5
 8008172:	f000 f8d5 	bl	8008320 <finite>
 8008176:	b168      	cbz	r0, 8008194 <exp+0x3c>
 8008178:	a317      	add	r3, pc, #92	@ (adr r3, 80081d8 <exp+0x80>)
 800817a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817e:	4620      	mov	r0, r4
 8008180:	4629      	mov	r1, r5
 8008182:	f7f8 fc6d 	bl	8000a60 <__aeabi_dcmpgt>
 8008186:	b160      	cbz	r0, 80081a2 <exp+0x4a>
 8008188:	f001 f93e 	bl	8009408 <__errno>
 800818c:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 80081c8 <exp+0x70>
 8008190:	2322      	movs	r3, #34	@ 0x22
 8008192:	6003      	str	r3, [r0, #0]
 8008194:	eeb0 0a48 	vmov.f32	s0, s16
 8008198:	eef0 0a68 	vmov.f32	s1, s17
 800819c:	ecbd 8b02 	vpop	{d8}
 80081a0:	bd38      	pop	{r3, r4, r5, pc}
 80081a2:	a30f      	add	r3, pc, #60	@ (adr r3, 80081e0 <exp+0x88>)
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	4620      	mov	r0, r4
 80081aa:	4629      	mov	r1, r5
 80081ac:	f7f8 fc3a 	bl	8000a24 <__aeabi_dcmplt>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d0ef      	beq.n	8008194 <exp+0x3c>
 80081b4:	f001 f928 	bl	8009408 <__errno>
 80081b8:	2322      	movs	r3, #34	@ 0x22
 80081ba:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 80081d0 <exp+0x78>
 80081be:	6003      	str	r3, [r0, #0]
 80081c0:	e7e8      	b.n	8008194 <exp+0x3c>
 80081c2:	bf00      	nop
 80081c4:	f3af 8000 	nop.w
 80081c8:	00000000 	.word	0x00000000
 80081cc:	7ff00000 	.word	0x7ff00000
	...
 80081d8:	fefa39ef 	.word	0xfefa39ef
 80081dc:	40862e42 	.word	0x40862e42
 80081e0:	d52d3051 	.word	0xd52d3051
 80081e4:	c0874910 	.word	0xc0874910

080081e8 <pow>:
 80081e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ea:	ed2d 8b02 	vpush	{d8}
 80081ee:	eeb0 8a40 	vmov.f32	s16, s0
 80081f2:	eef0 8a60 	vmov.f32	s17, s1
 80081f6:	ec55 4b11 	vmov	r4, r5, d1
 80081fa:	f000 faf1 	bl	80087e0 <__ieee754_pow>
 80081fe:	4622      	mov	r2, r4
 8008200:	462b      	mov	r3, r5
 8008202:	4620      	mov	r0, r4
 8008204:	4629      	mov	r1, r5
 8008206:	ec57 6b10 	vmov	r6, r7, d0
 800820a:	f7f8 fc33 	bl	8000a74 <__aeabi_dcmpun>
 800820e:	2800      	cmp	r0, #0
 8008210:	d13b      	bne.n	800828a <pow+0xa2>
 8008212:	ec51 0b18 	vmov	r0, r1, d8
 8008216:	2200      	movs	r2, #0
 8008218:	2300      	movs	r3, #0
 800821a:	f7f8 fbf9 	bl	8000a10 <__aeabi_dcmpeq>
 800821e:	b1b8      	cbz	r0, 8008250 <pow+0x68>
 8008220:	2200      	movs	r2, #0
 8008222:	2300      	movs	r3, #0
 8008224:	4620      	mov	r0, r4
 8008226:	4629      	mov	r1, r5
 8008228:	f7f8 fbf2 	bl	8000a10 <__aeabi_dcmpeq>
 800822c:	2800      	cmp	r0, #0
 800822e:	d146      	bne.n	80082be <pow+0xd6>
 8008230:	ec45 4b10 	vmov	d0, r4, r5
 8008234:	f000 f874 	bl	8008320 <finite>
 8008238:	b338      	cbz	r0, 800828a <pow+0xa2>
 800823a:	2200      	movs	r2, #0
 800823c:	2300      	movs	r3, #0
 800823e:	4620      	mov	r0, r4
 8008240:	4629      	mov	r1, r5
 8008242:	f7f8 fbef 	bl	8000a24 <__aeabi_dcmplt>
 8008246:	b300      	cbz	r0, 800828a <pow+0xa2>
 8008248:	f001 f8de 	bl	8009408 <__errno>
 800824c:	2322      	movs	r3, #34	@ 0x22
 800824e:	e01b      	b.n	8008288 <pow+0xa0>
 8008250:	ec47 6b10 	vmov	d0, r6, r7
 8008254:	f000 f864 	bl	8008320 <finite>
 8008258:	b9e0      	cbnz	r0, 8008294 <pow+0xac>
 800825a:	eeb0 0a48 	vmov.f32	s0, s16
 800825e:	eef0 0a68 	vmov.f32	s1, s17
 8008262:	f000 f85d 	bl	8008320 <finite>
 8008266:	b1a8      	cbz	r0, 8008294 <pow+0xac>
 8008268:	ec45 4b10 	vmov	d0, r4, r5
 800826c:	f000 f858 	bl	8008320 <finite>
 8008270:	b180      	cbz	r0, 8008294 <pow+0xac>
 8008272:	4632      	mov	r2, r6
 8008274:	463b      	mov	r3, r7
 8008276:	4630      	mov	r0, r6
 8008278:	4639      	mov	r1, r7
 800827a:	f7f8 fbfb 	bl	8000a74 <__aeabi_dcmpun>
 800827e:	2800      	cmp	r0, #0
 8008280:	d0e2      	beq.n	8008248 <pow+0x60>
 8008282:	f001 f8c1 	bl	8009408 <__errno>
 8008286:	2321      	movs	r3, #33	@ 0x21
 8008288:	6003      	str	r3, [r0, #0]
 800828a:	ecbd 8b02 	vpop	{d8}
 800828e:	ec47 6b10 	vmov	d0, r6, r7
 8008292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008294:	2200      	movs	r2, #0
 8008296:	2300      	movs	r3, #0
 8008298:	4630      	mov	r0, r6
 800829a:	4639      	mov	r1, r7
 800829c:	f7f8 fbb8 	bl	8000a10 <__aeabi_dcmpeq>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d0f2      	beq.n	800828a <pow+0xa2>
 80082a4:	eeb0 0a48 	vmov.f32	s0, s16
 80082a8:	eef0 0a68 	vmov.f32	s1, s17
 80082ac:	f000 f838 	bl	8008320 <finite>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d0ea      	beq.n	800828a <pow+0xa2>
 80082b4:	ec45 4b10 	vmov	d0, r4, r5
 80082b8:	f000 f832 	bl	8008320 <finite>
 80082bc:	e7c3      	b.n	8008246 <pow+0x5e>
 80082be:	4f01      	ldr	r7, [pc, #4]	@ (80082c4 <pow+0xdc>)
 80082c0:	2600      	movs	r6, #0
 80082c2:	e7e2      	b.n	800828a <pow+0xa2>
 80082c4:	3ff00000 	.word	0x3ff00000

080082c8 <sqrt>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	ed2d 8b02 	vpush	{d8}
 80082ce:	ec55 4b10 	vmov	r4, r5, d0
 80082d2:	f000 f831 	bl	8008338 <__ieee754_sqrt>
 80082d6:	4622      	mov	r2, r4
 80082d8:	462b      	mov	r3, r5
 80082da:	4620      	mov	r0, r4
 80082dc:	4629      	mov	r1, r5
 80082de:	eeb0 8a40 	vmov.f32	s16, s0
 80082e2:	eef0 8a60 	vmov.f32	s17, s1
 80082e6:	f7f8 fbc5 	bl	8000a74 <__aeabi_dcmpun>
 80082ea:	b990      	cbnz	r0, 8008312 <sqrt+0x4a>
 80082ec:	2200      	movs	r2, #0
 80082ee:	2300      	movs	r3, #0
 80082f0:	4620      	mov	r0, r4
 80082f2:	4629      	mov	r1, r5
 80082f4:	f7f8 fb96 	bl	8000a24 <__aeabi_dcmplt>
 80082f8:	b158      	cbz	r0, 8008312 <sqrt+0x4a>
 80082fa:	f001 f885 	bl	8009408 <__errno>
 80082fe:	2321      	movs	r3, #33	@ 0x21
 8008300:	6003      	str	r3, [r0, #0]
 8008302:	2200      	movs	r2, #0
 8008304:	2300      	movs	r3, #0
 8008306:	4610      	mov	r0, r2
 8008308:	4619      	mov	r1, r3
 800830a:	f7f8 fa43 	bl	8000794 <__aeabi_ddiv>
 800830e:	ec41 0b18 	vmov	d8, r0, r1
 8008312:	eeb0 0a48 	vmov.f32	s0, s16
 8008316:	eef0 0a68 	vmov.f32	s1, s17
 800831a:	ecbd 8b02 	vpop	{d8}
 800831e:	bd38      	pop	{r3, r4, r5, pc}

08008320 <finite>:
 8008320:	b082      	sub	sp, #8
 8008322:	ed8d 0b00 	vstr	d0, [sp]
 8008326:	9801      	ldr	r0, [sp, #4]
 8008328:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800832c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008330:	0fc0      	lsrs	r0, r0, #31
 8008332:	b002      	add	sp, #8
 8008334:	4770      	bx	lr
	...

08008338 <__ieee754_sqrt>:
 8008338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833c:	4a66      	ldr	r2, [pc, #408]	@ (80084d8 <__ieee754_sqrt+0x1a0>)
 800833e:	ec55 4b10 	vmov	r4, r5, d0
 8008342:	43aa      	bics	r2, r5
 8008344:	462b      	mov	r3, r5
 8008346:	4621      	mov	r1, r4
 8008348:	d110      	bne.n	800836c <__ieee754_sqrt+0x34>
 800834a:	4622      	mov	r2, r4
 800834c:	4620      	mov	r0, r4
 800834e:	4629      	mov	r1, r5
 8008350:	f7f8 f8f6 	bl	8000540 <__aeabi_dmul>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	4620      	mov	r0, r4
 800835a:	4629      	mov	r1, r5
 800835c:	f7f7 ff3a 	bl	80001d4 <__adddf3>
 8008360:	4604      	mov	r4, r0
 8008362:	460d      	mov	r5, r1
 8008364:	ec45 4b10 	vmov	d0, r4, r5
 8008368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836c:	2d00      	cmp	r5, #0
 800836e:	dc0e      	bgt.n	800838e <__ieee754_sqrt+0x56>
 8008370:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008374:	4322      	orrs	r2, r4
 8008376:	d0f5      	beq.n	8008364 <__ieee754_sqrt+0x2c>
 8008378:	b19d      	cbz	r5, 80083a2 <__ieee754_sqrt+0x6a>
 800837a:	4622      	mov	r2, r4
 800837c:	4620      	mov	r0, r4
 800837e:	4629      	mov	r1, r5
 8008380:	f7f7 ff26 	bl	80001d0 <__aeabi_dsub>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	f7f8 fa04 	bl	8000794 <__aeabi_ddiv>
 800838c:	e7e8      	b.n	8008360 <__ieee754_sqrt+0x28>
 800838e:	152a      	asrs	r2, r5, #20
 8008390:	d115      	bne.n	80083be <__ieee754_sqrt+0x86>
 8008392:	2000      	movs	r0, #0
 8008394:	e009      	b.n	80083aa <__ieee754_sqrt+0x72>
 8008396:	0acb      	lsrs	r3, r1, #11
 8008398:	3a15      	subs	r2, #21
 800839a:	0549      	lsls	r1, r1, #21
 800839c:	2b00      	cmp	r3, #0
 800839e:	d0fa      	beq.n	8008396 <__ieee754_sqrt+0x5e>
 80083a0:	e7f7      	b.n	8008392 <__ieee754_sqrt+0x5a>
 80083a2:	462a      	mov	r2, r5
 80083a4:	e7fa      	b.n	800839c <__ieee754_sqrt+0x64>
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	3001      	adds	r0, #1
 80083aa:	02dc      	lsls	r4, r3, #11
 80083ac:	d5fb      	bpl.n	80083a6 <__ieee754_sqrt+0x6e>
 80083ae:	1e44      	subs	r4, r0, #1
 80083b0:	1b12      	subs	r2, r2, r4
 80083b2:	f1c0 0420 	rsb	r4, r0, #32
 80083b6:	fa21 f404 	lsr.w	r4, r1, r4
 80083ba:	4323      	orrs	r3, r4
 80083bc:	4081      	lsls	r1, r0
 80083be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083c2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80083c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083ca:	07d2      	lsls	r2, r2, #31
 80083cc:	bf5c      	itt	pl
 80083ce:	005b      	lslpl	r3, r3, #1
 80083d0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80083d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80083d8:	bf58      	it	pl
 80083da:	0049      	lslpl	r1, r1, #1
 80083dc:	2600      	movs	r6, #0
 80083de:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80083e2:	107f      	asrs	r7, r7, #1
 80083e4:	0049      	lsls	r1, r1, #1
 80083e6:	2016      	movs	r0, #22
 80083e8:	4632      	mov	r2, r6
 80083ea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80083ee:	1915      	adds	r5, r2, r4
 80083f0:	429d      	cmp	r5, r3
 80083f2:	bfde      	ittt	le
 80083f4:	192a      	addle	r2, r5, r4
 80083f6:	1b5b      	suble	r3, r3, r5
 80083f8:	1936      	addle	r6, r6, r4
 80083fa:	0fcd      	lsrs	r5, r1, #31
 80083fc:	3801      	subs	r0, #1
 80083fe:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008402:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008406:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800840a:	d1f0      	bne.n	80083ee <__ieee754_sqrt+0xb6>
 800840c:	4605      	mov	r5, r0
 800840e:	2420      	movs	r4, #32
 8008410:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008414:	4293      	cmp	r3, r2
 8008416:	eb0c 0e00 	add.w	lr, ip, r0
 800841a:	dc02      	bgt.n	8008422 <__ieee754_sqrt+0xea>
 800841c:	d113      	bne.n	8008446 <__ieee754_sqrt+0x10e>
 800841e:	458e      	cmp	lr, r1
 8008420:	d811      	bhi.n	8008446 <__ieee754_sqrt+0x10e>
 8008422:	f1be 0f00 	cmp.w	lr, #0
 8008426:	eb0e 000c 	add.w	r0, lr, ip
 800842a:	da3f      	bge.n	80084ac <__ieee754_sqrt+0x174>
 800842c:	2800      	cmp	r0, #0
 800842e:	db3d      	blt.n	80084ac <__ieee754_sqrt+0x174>
 8008430:	f102 0801 	add.w	r8, r2, #1
 8008434:	1a9b      	subs	r3, r3, r2
 8008436:	458e      	cmp	lr, r1
 8008438:	bf88      	it	hi
 800843a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800843e:	eba1 010e 	sub.w	r1, r1, lr
 8008442:	4465      	add	r5, ip
 8008444:	4642      	mov	r2, r8
 8008446:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800844a:	3c01      	subs	r4, #1
 800844c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008450:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008454:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008458:	d1dc      	bne.n	8008414 <__ieee754_sqrt+0xdc>
 800845a:	4319      	orrs	r1, r3
 800845c:	d01b      	beq.n	8008496 <__ieee754_sqrt+0x15e>
 800845e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80084dc <__ieee754_sqrt+0x1a4>
 8008462:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80084e0 <__ieee754_sqrt+0x1a8>
 8008466:	e9da 0100 	ldrd	r0, r1, [sl]
 800846a:	e9db 2300 	ldrd	r2, r3, [fp]
 800846e:	f7f7 feaf 	bl	80001d0 <__aeabi_dsub>
 8008472:	e9da 8900 	ldrd	r8, r9, [sl]
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	4640      	mov	r0, r8
 800847c:	4649      	mov	r1, r9
 800847e:	f7f8 fadb 	bl	8000a38 <__aeabi_dcmple>
 8008482:	b140      	cbz	r0, 8008496 <__ieee754_sqrt+0x15e>
 8008484:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008488:	e9da 0100 	ldrd	r0, r1, [sl]
 800848c:	e9db 2300 	ldrd	r2, r3, [fp]
 8008490:	d10e      	bne.n	80084b0 <__ieee754_sqrt+0x178>
 8008492:	3601      	adds	r6, #1
 8008494:	4625      	mov	r5, r4
 8008496:	1073      	asrs	r3, r6, #1
 8008498:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800849c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80084a0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80084a4:	086b      	lsrs	r3, r5, #1
 80084a6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80084aa:	e759      	b.n	8008360 <__ieee754_sqrt+0x28>
 80084ac:	4690      	mov	r8, r2
 80084ae:	e7c1      	b.n	8008434 <__ieee754_sqrt+0xfc>
 80084b0:	f7f7 fe90 	bl	80001d4 <__adddf3>
 80084b4:	e9da 8900 	ldrd	r8, r9, [sl]
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4640      	mov	r0, r8
 80084be:	4649      	mov	r1, r9
 80084c0:	f7f8 fab0 	bl	8000a24 <__aeabi_dcmplt>
 80084c4:	b120      	cbz	r0, 80084d0 <__ieee754_sqrt+0x198>
 80084c6:	1cab      	adds	r3, r5, #2
 80084c8:	bf08      	it	eq
 80084ca:	3601      	addeq	r6, #1
 80084cc:	3502      	adds	r5, #2
 80084ce:	e7e2      	b.n	8008496 <__ieee754_sqrt+0x15e>
 80084d0:	1c6b      	adds	r3, r5, #1
 80084d2:	f023 0501 	bic.w	r5, r3, #1
 80084d6:	e7de      	b.n	8008496 <__ieee754_sqrt+0x15e>
 80084d8:	7ff00000 	.word	0x7ff00000
 80084dc:	080094b0 	.word	0x080094b0
 80084e0:	080094a8 	.word	0x080094a8
 80084e4:	00000000 	.word	0x00000000

080084e8 <__ieee754_exp>:
 80084e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084ec:	ec55 4b10 	vmov	r4, r5, d0
 80084f0:	49b1      	ldr	r1, [pc, #708]	@ (80087b8 <__ieee754_exp+0x2d0>)
 80084f2:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80084f6:	428a      	cmp	r2, r1
 80084f8:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80084fc:	d936      	bls.n	800856c <__ieee754_exp+0x84>
 80084fe:	49af      	ldr	r1, [pc, #700]	@ (80087bc <__ieee754_exp+0x2d4>)
 8008500:	428a      	cmp	r2, r1
 8008502:	d914      	bls.n	800852e <__ieee754_exp+0x46>
 8008504:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008508:	4323      	orrs	r3, r4
 800850a:	4622      	mov	r2, r4
 800850c:	d007      	beq.n	800851e <__ieee754_exp+0x36>
 800850e:	462b      	mov	r3, r5
 8008510:	4620      	mov	r0, r4
 8008512:	4629      	mov	r1, r5
 8008514:	f7f7 fe5e 	bl	80001d4 <__adddf3>
 8008518:	4604      	mov	r4, r0
 800851a:	460d      	mov	r5, r1
 800851c:	e002      	b.n	8008524 <__ieee754_exp+0x3c>
 800851e:	2e00      	cmp	r6, #0
 8008520:	f040 8118 	bne.w	8008754 <__ieee754_exp+0x26c>
 8008524:	ec45 4b10 	vmov	d0, r4, r5
 8008528:	b004      	add	sp, #16
 800852a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800852e:	a38c      	add	r3, pc, #560	@ (adr r3, 8008760 <__ieee754_exp+0x278>)
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	4620      	mov	r0, r4
 8008536:	4629      	mov	r1, r5
 8008538:	f7f8 fa92 	bl	8000a60 <__aeabi_dcmpgt>
 800853c:	4607      	mov	r7, r0
 800853e:	b128      	cbz	r0, 800854c <__ieee754_exp+0x64>
 8008540:	2000      	movs	r0, #0
 8008542:	b004      	add	sp, #16
 8008544:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008548:	f000 bf4e 	b.w	80093e8 <__math_oflow>
 800854c:	a386      	add	r3, pc, #536	@ (adr r3, 8008768 <__ieee754_exp+0x280>)
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	4620      	mov	r0, r4
 8008554:	4629      	mov	r1, r5
 8008556:	f7f8 fa65 	bl	8000a24 <__aeabi_dcmplt>
 800855a:	2800      	cmp	r0, #0
 800855c:	f000 8087 	beq.w	800866e <__ieee754_exp+0x186>
 8008560:	4638      	mov	r0, r7
 8008562:	b004      	add	sp, #16
 8008564:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008568:	f000 bf36 	b.w	80093d8 <__math_uflow>
 800856c:	4b94      	ldr	r3, [pc, #592]	@ (80087c0 <__ieee754_exp+0x2d8>)
 800856e:	429a      	cmp	r2, r3
 8008570:	f240 80a9 	bls.w	80086c6 <__ieee754_exp+0x1de>
 8008574:	4b93      	ldr	r3, [pc, #588]	@ (80087c4 <__ieee754_exp+0x2dc>)
 8008576:	429a      	cmp	r2, r3
 8008578:	d879      	bhi.n	800866e <__ieee754_exp+0x186>
 800857a:	4b93      	ldr	r3, [pc, #588]	@ (80087c8 <__ieee754_exp+0x2e0>)
 800857c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008584:	4620      	mov	r0, r4
 8008586:	4629      	mov	r1, r5
 8008588:	f7f7 fe22 	bl	80001d0 <__aeabi_dsub>
 800858c:	4b8f      	ldr	r3, [pc, #572]	@ (80087cc <__ieee754_exp+0x2e4>)
 800858e:	00f7      	lsls	r7, r6, #3
 8008590:	443b      	add	r3, r7
 8008592:	ed93 7b00 	vldr	d7, [r3]
 8008596:	ed8d 7b00 	vstr	d7, [sp]
 800859a:	f086 0a01 	eor.w	sl, r6, #1
 800859e:	4680      	mov	r8, r0
 80085a0:	4689      	mov	r9, r1
 80085a2:	ebaa 0a06 	sub.w	sl, sl, r6
 80085a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085aa:	4640      	mov	r0, r8
 80085ac:	4649      	mov	r1, r9
 80085ae:	f7f7 fe0f 	bl	80001d0 <__aeabi_dsub>
 80085b2:	4604      	mov	r4, r0
 80085b4:	460d      	mov	r5, r1
 80085b6:	4622      	mov	r2, r4
 80085b8:	462b      	mov	r3, r5
 80085ba:	4620      	mov	r0, r4
 80085bc:	4629      	mov	r1, r5
 80085be:	f7f7 ffbf 	bl	8000540 <__aeabi_dmul>
 80085c2:	a36b      	add	r3, pc, #428	@ (adr r3, 8008770 <__ieee754_exp+0x288>)
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	4606      	mov	r6, r0
 80085ca:	460f      	mov	r7, r1
 80085cc:	f7f7 ffb8 	bl	8000540 <__aeabi_dmul>
 80085d0:	a369      	add	r3, pc, #420	@ (adr r3, 8008778 <__ieee754_exp+0x290>)
 80085d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d6:	f7f7 fdfb 	bl	80001d0 <__aeabi_dsub>
 80085da:	4632      	mov	r2, r6
 80085dc:	463b      	mov	r3, r7
 80085de:	f7f7 ffaf 	bl	8000540 <__aeabi_dmul>
 80085e2:	a367      	add	r3, pc, #412	@ (adr r3, 8008780 <__ieee754_exp+0x298>)
 80085e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e8:	f7f7 fdf4 	bl	80001d4 <__adddf3>
 80085ec:	4632      	mov	r2, r6
 80085ee:	463b      	mov	r3, r7
 80085f0:	f7f7 ffa6 	bl	8000540 <__aeabi_dmul>
 80085f4:	a364      	add	r3, pc, #400	@ (adr r3, 8008788 <__ieee754_exp+0x2a0>)
 80085f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fa:	f7f7 fde9 	bl	80001d0 <__aeabi_dsub>
 80085fe:	4632      	mov	r2, r6
 8008600:	463b      	mov	r3, r7
 8008602:	f7f7 ff9d 	bl	8000540 <__aeabi_dmul>
 8008606:	a362      	add	r3, pc, #392	@ (adr r3, 8008790 <__ieee754_exp+0x2a8>)
 8008608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860c:	f7f7 fde2 	bl	80001d4 <__adddf3>
 8008610:	4632      	mov	r2, r6
 8008612:	463b      	mov	r3, r7
 8008614:	f7f7 ff94 	bl	8000540 <__aeabi_dmul>
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	4620      	mov	r0, r4
 800861e:	4629      	mov	r1, r5
 8008620:	f7f7 fdd6 	bl	80001d0 <__aeabi_dsub>
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	4606      	mov	r6, r0
 800862a:	460f      	mov	r7, r1
 800862c:	4620      	mov	r0, r4
 800862e:	4629      	mov	r1, r5
 8008630:	f7f7 ff86 	bl	8000540 <__aeabi_dmul>
 8008634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008638:	f1ba 0f00 	cmp.w	sl, #0
 800863c:	d15c      	bne.n	80086f8 <__ieee754_exp+0x210>
 800863e:	2200      	movs	r2, #0
 8008640:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008644:	4630      	mov	r0, r6
 8008646:	4639      	mov	r1, r7
 8008648:	f7f7 fdc2 	bl	80001d0 <__aeabi_dsub>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008654:	f7f8 f89e 	bl	8000794 <__aeabi_ddiv>
 8008658:	4622      	mov	r2, r4
 800865a:	462b      	mov	r3, r5
 800865c:	f7f7 fdb8 	bl	80001d0 <__aeabi_dsub>
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	2000      	movs	r0, #0
 8008666:	495a      	ldr	r1, [pc, #360]	@ (80087d0 <__ieee754_exp+0x2e8>)
 8008668:	f7f7 fdb2 	bl	80001d0 <__aeabi_dsub>
 800866c:	e754      	b.n	8008518 <__ieee754_exp+0x30>
 800866e:	4b59      	ldr	r3, [pc, #356]	@ (80087d4 <__ieee754_exp+0x2ec>)
 8008670:	4620      	mov	r0, r4
 8008672:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008676:	4629      	mov	r1, r5
 8008678:	a347      	add	r3, pc, #284	@ (adr r3, 8008798 <__ieee754_exp+0x2b0>)
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	f7f7 ff5f 	bl	8000540 <__aeabi_dmul>
 8008682:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008686:	f7f7 fda5 	bl	80001d4 <__adddf3>
 800868a:	f7f8 fa09 	bl	8000aa0 <__aeabi_d2iz>
 800868e:	4682      	mov	sl, r0
 8008690:	f7f7 feec 	bl	800046c <__aeabi_i2d>
 8008694:	a342      	add	r3, pc, #264	@ (adr r3, 80087a0 <__ieee754_exp+0x2b8>)
 8008696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869a:	4606      	mov	r6, r0
 800869c:	460f      	mov	r7, r1
 800869e:	f7f7 ff4f 	bl	8000540 <__aeabi_dmul>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4620      	mov	r0, r4
 80086a8:	4629      	mov	r1, r5
 80086aa:	f7f7 fd91 	bl	80001d0 <__aeabi_dsub>
 80086ae:	a33e      	add	r3, pc, #248	@ (adr r3, 80087a8 <__ieee754_exp+0x2c0>)
 80086b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b4:	4680      	mov	r8, r0
 80086b6:	4689      	mov	r9, r1
 80086b8:	4630      	mov	r0, r6
 80086ba:	4639      	mov	r1, r7
 80086bc:	f7f7 ff40 	bl	8000540 <__aeabi_dmul>
 80086c0:	e9cd 0100 	strd	r0, r1, [sp]
 80086c4:	e76f      	b.n	80085a6 <__ieee754_exp+0xbe>
 80086c6:	4b44      	ldr	r3, [pc, #272]	@ (80087d8 <__ieee754_exp+0x2f0>)
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d810      	bhi.n	80086ee <__ieee754_exp+0x206>
 80086cc:	a338      	add	r3, pc, #224	@ (adr r3, 80087b0 <__ieee754_exp+0x2c8>)
 80086ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d2:	4620      	mov	r0, r4
 80086d4:	4629      	mov	r1, r5
 80086d6:	f7f7 fd7d 	bl	80001d4 <__adddf3>
 80086da:	4b3d      	ldr	r3, [pc, #244]	@ (80087d0 <__ieee754_exp+0x2e8>)
 80086dc:	2200      	movs	r2, #0
 80086de:	f7f8 f9bf 	bl	8000a60 <__aeabi_dcmpgt>
 80086e2:	b138      	cbz	r0, 80086f4 <__ieee754_exp+0x20c>
 80086e4:	4b3a      	ldr	r3, [pc, #232]	@ (80087d0 <__ieee754_exp+0x2e8>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	4620      	mov	r0, r4
 80086ea:	4629      	mov	r1, r5
 80086ec:	e712      	b.n	8008514 <__ieee754_exp+0x2c>
 80086ee:	f04f 0a00 	mov.w	sl, #0
 80086f2:	e760      	b.n	80085b6 <__ieee754_exp+0xce>
 80086f4:	4682      	mov	sl, r0
 80086f6:	e75e      	b.n	80085b6 <__ieee754_exp+0xce>
 80086f8:	4632      	mov	r2, r6
 80086fa:	463b      	mov	r3, r7
 80086fc:	2000      	movs	r0, #0
 80086fe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008702:	f7f7 fd65 	bl	80001d0 <__aeabi_dsub>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800870e:	f7f8 f841 	bl	8000794 <__aeabi_ddiv>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	e9dd 0100 	ldrd	r0, r1, [sp]
 800871a:	f7f7 fd59 	bl	80001d0 <__aeabi_dsub>
 800871e:	4642      	mov	r2, r8
 8008720:	464b      	mov	r3, r9
 8008722:	f7f7 fd55 	bl	80001d0 <__aeabi_dsub>
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	2000      	movs	r0, #0
 800872c:	4928      	ldr	r1, [pc, #160]	@ (80087d0 <__ieee754_exp+0x2e8>)
 800872e:	f7f7 fd4f 	bl	80001d0 <__aeabi_dsub>
 8008732:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 8008736:	4592      	cmp	sl, r2
 8008738:	db02      	blt.n	8008740 <__ieee754_exp+0x258>
 800873a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800873e:	e6eb      	b.n	8008518 <__ieee754_exp+0x30>
 8008740:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8008744:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8008748:	2200      	movs	r2, #0
 800874a:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 800874e:	f7f7 fef7 	bl	8000540 <__aeabi_dmul>
 8008752:	e6e1      	b.n	8008518 <__ieee754_exp+0x30>
 8008754:	2400      	movs	r4, #0
 8008756:	2500      	movs	r5, #0
 8008758:	e6e4      	b.n	8008524 <__ieee754_exp+0x3c>
 800875a:	bf00      	nop
 800875c:	f3af 8000 	nop.w
 8008760:	fefa39ef 	.word	0xfefa39ef
 8008764:	40862e42 	.word	0x40862e42
 8008768:	d52d3051 	.word	0xd52d3051
 800876c:	c0874910 	.word	0xc0874910
 8008770:	72bea4d0 	.word	0x72bea4d0
 8008774:	3e663769 	.word	0x3e663769
 8008778:	c5d26bf1 	.word	0xc5d26bf1
 800877c:	3ebbbd41 	.word	0x3ebbbd41
 8008780:	af25de2c 	.word	0xaf25de2c
 8008784:	3f11566a 	.word	0x3f11566a
 8008788:	16bebd93 	.word	0x16bebd93
 800878c:	3f66c16c 	.word	0x3f66c16c
 8008790:	5555553e 	.word	0x5555553e
 8008794:	3fc55555 	.word	0x3fc55555
 8008798:	652b82fe 	.word	0x652b82fe
 800879c:	3ff71547 	.word	0x3ff71547
 80087a0:	fee00000 	.word	0xfee00000
 80087a4:	3fe62e42 	.word	0x3fe62e42
 80087a8:	35793c76 	.word	0x35793c76
 80087ac:	3dea39ef 	.word	0x3dea39ef
 80087b0:	8800759c 	.word	0x8800759c
 80087b4:	7e37e43c 	.word	0x7e37e43c
 80087b8:	40862e41 	.word	0x40862e41
 80087bc:	7fefffff 	.word	0x7fefffff
 80087c0:	3fd62e42 	.word	0x3fd62e42
 80087c4:	3ff0a2b1 	.word	0x3ff0a2b1
 80087c8:	080094c8 	.word	0x080094c8
 80087cc:	080094b8 	.word	0x080094b8
 80087d0:	3ff00000 	.word	0x3ff00000
 80087d4:	080094d8 	.word	0x080094d8
 80087d8:	3defffff 	.word	0x3defffff
 80087dc:	00000000 	.word	0x00000000

080087e0 <__ieee754_pow>:
 80087e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e4:	b091      	sub	sp, #68	@ 0x44
 80087e6:	ed8d 1b00 	vstr	d1, [sp]
 80087ea:	e9dd 1900 	ldrd	r1, r9, [sp]
 80087ee:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80087f2:	ea5a 0001 	orrs.w	r0, sl, r1
 80087f6:	ec57 6b10 	vmov	r6, r7, d0
 80087fa:	d113      	bne.n	8008824 <__ieee754_pow+0x44>
 80087fc:	19b3      	adds	r3, r6, r6
 80087fe:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8008802:	4152      	adcs	r2, r2
 8008804:	4298      	cmp	r0, r3
 8008806:	4b9a      	ldr	r3, [pc, #616]	@ (8008a70 <__ieee754_pow+0x290>)
 8008808:	4193      	sbcs	r3, r2
 800880a:	f080 84ee 	bcs.w	80091ea <__ieee754_pow+0xa0a>
 800880e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008812:	4630      	mov	r0, r6
 8008814:	4639      	mov	r1, r7
 8008816:	f7f7 fcdd 	bl	80001d4 <__adddf3>
 800881a:	ec41 0b10 	vmov	d0, r0, r1
 800881e:	b011      	add	sp, #68	@ 0x44
 8008820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008824:	4a93      	ldr	r2, [pc, #588]	@ (8008a74 <__ieee754_pow+0x294>)
 8008826:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800882a:	4295      	cmp	r5, r2
 800882c:	46b8      	mov	r8, r7
 800882e:	4633      	mov	r3, r6
 8008830:	d80a      	bhi.n	8008848 <__ieee754_pow+0x68>
 8008832:	d104      	bne.n	800883e <__ieee754_pow+0x5e>
 8008834:	2e00      	cmp	r6, #0
 8008836:	d1ea      	bne.n	800880e <__ieee754_pow+0x2e>
 8008838:	45aa      	cmp	sl, r5
 800883a:	d8e8      	bhi.n	800880e <__ieee754_pow+0x2e>
 800883c:	e001      	b.n	8008842 <__ieee754_pow+0x62>
 800883e:	4592      	cmp	sl, r2
 8008840:	d802      	bhi.n	8008848 <__ieee754_pow+0x68>
 8008842:	4592      	cmp	sl, r2
 8008844:	d10f      	bne.n	8008866 <__ieee754_pow+0x86>
 8008846:	b171      	cbz	r1, 8008866 <__ieee754_pow+0x86>
 8008848:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800884c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008850:	ea58 0803 	orrs.w	r8, r8, r3
 8008854:	d1db      	bne.n	800880e <__ieee754_pow+0x2e>
 8008856:	e9dd 3200 	ldrd	r3, r2, [sp]
 800885a:	18db      	adds	r3, r3, r3
 800885c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008860:	4152      	adcs	r2, r2
 8008862:	4598      	cmp	r8, r3
 8008864:	e7cf      	b.n	8008806 <__ieee754_pow+0x26>
 8008866:	f1b8 0f00 	cmp.w	r8, #0
 800886a:	46ab      	mov	fp, r5
 800886c:	da43      	bge.n	80088f6 <__ieee754_pow+0x116>
 800886e:	4a82      	ldr	r2, [pc, #520]	@ (8008a78 <__ieee754_pow+0x298>)
 8008870:	4592      	cmp	sl, r2
 8008872:	d856      	bhi.n	8008922 <__ieee754_pow+0x142>
 8008874:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008878:	4592      	cmp	sl, r2
 800887a:	f240 84c5 	bls.w	8009208 <__ieee754_pow+0xa28>
 800887e:	ea4f 522a 	mov.w	r2, sl, asr #20
 8008882:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008886:	2a14      	cmp	r2, #20
 8008888:	dd18      	ble.n	80088bc <__ieee754_pow+0xdc>
 800888a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800888e:	fa21 f402 	lsr.w	r4, r1, r2
 8008892:	fa04 f202 	lsl.w	r2, r4, r2
 8008896:	428a      	cmp	r2, r1
 8008898:	f040 84b6 	bne.w	8009208 <__ieee754_pow+0xa28>
 800889c:	f004 0401 	and.w	r4, r4, #1
 80088a0:	f1c4 0402 	rsb	r4, r4, #2
 80088a4:	2900      	cmp	r1, #0
 80088a6:	d159      	bne.n	800895c <__ieee754_pow+0x17c>
 80088a8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80088ac:	d148      	bne.n	8008940 <__ieee754_pow+0x160>
 80088ae:	4632      	mov	r2, r6
 80088b0:	463b      	mov	r3, r7
 80088b2:	4630      	mov	r0, r6
 80088b4:	4639      	mov	r1, r7
 80088b6:	f7f7 fe43 	bl	8000540 <__aeabi_dmul>
 80088ba:	e7ae      	b.n	800881a <__ieee754_pow+0x3a>
 80088bc:	2900      	cmp	r1, #0
 80088be:	d14c      	bne.n	800895a <__ieee754_pow+0x17a>
 80088c0:	f1c2 0214 	rsb	r2, r2, #20
 80088c4:	fa4a f402 	asr.w	r4, sl, r2
 80088c8:	fa04 f202 	lsl.w	r2, r4, r2
 80088cc:	4552      	cmp	r2, sl
 80088ce:	f040 8498 	bne.w	8009202 <__ieee754_pow+0xa22>
 80088d2:	f004 0401 	and.w	r4, r4, #1
 80088d6:	f1c4 0402 	rsb	r4, r4, #2
 80088da:	4a68      	ldr	r2, [pc, #416]	@ (8008a7c <__ieee754_pow+0x29c>)
 80088dc:	4592      	cmp	sl, r2
 80088de:	d1e3      	bne.n	80088a8 <__ieee754_pow+0xc8>
 80088e0:	f1b9 0f00 	cmp.w	r9, #0
 80088e4:	f280 8489 	bge.w	80091fa <__ieee754_pow+0xa1a>
 80088e8:	4964      	ldr	r1, [pc, #400]	@ (8008a7c <__ieee754_pow+0x29c>)
 80088ea:	4632      	mov	r2, r6
 80088ec:	463b      	mov	r3, r7
 80088ee:	2000      	movs	r0, #0
 80088f0:	f7f7 ff50 	bl	8000794 <__aeabi_ddiv>
 80088f4:	e791      	b.n	800881a <__ieee754_pow+0x3a>
 80088f6:	2400      	movs	r4, #0
 80088f8:	bb81      	cbnz	r1, 800895c <__ieee754_pow+0x17c>
 80088fa:	4a5e      	ldr	r2, [pc, #376]	@ (8008a74 <__ieee754_pow+0x294>)
 80088fc:	4592      	cmp	sl, r2
 80088fe:	d1ec      	bne.n	80088da <__ieee754_pow+0xfa>
 8008900:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8008904:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008908:	431a      	orrs	r2, r3
 800890a:	f000 846e 	beq.w	80091ea <__ieee754_pow+0xa0a>
 800890e:	4b5c      	ldr	r3, [pc, #368]	@ (8008a80 <__ieee754_pow+0x2a0>)
 8008910:	429d      	cmp	r5, r3
 8008912:	d908      	bls.n	8008926 <__ieee754_pow+0x146>
 8008914:	f1b9 0f00 	cmp.w	r9, #0
 8008918:	f280 846b 	bge.w	80091f2 <__ieee754_pow+0xa12>
 800891c:	2000      	movs	r0, #0
 800891e:	2100      	movs	r1, #0
 8008920:	e77b      	b.n	800881a <__ieee754_pow+0x3a>
 8008922:	2402      	movs	r4, #2
 8008924:	e7e8      	b.n	80088f8 <__ieee754_pow+0x118>
 8008926:	f1b9 0f00 	cmp.w	r9, #0
 800892a:	f04f 0000 	mov.w	r0, #0
 800892e:	f04f 0100 	mov.w	r1, #0
 8008932:	f6bf af72 	bge.w	800881a <__ieee754_pow+0x3a>
 8008936:	e9dd 0300 	ldrd	r0, r3, [sp]
 800893a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800893e:	e76c      	b.n	800881a <__ieee754_pow+0x3a>
 8008940:	4a50      	ldr	r2, [pc, #320]	@ (8008a84 <__ieee754_pow+0x2a4>)
 8008942:	4591      	cmp	r9, r2
 8008944:	d10a      	bne.n	800895c <__ieee754_pow+0x17c>
 8008946:	f1b8 0f00 	cmp.w	r8, #0
 800894a:	db07      	blt.n	800895c <__ieee754_pow+0x17c>
 800894c:	ec47 6b10 	vmov	d0, r6, r7
 8008950:	b011      	add	sp, #68	@ 0x44
 8008952:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008956:	f7ff bcef 	b.w	8008338 <__ieee754_sqrt>
 800895a:	2400      	movs	r4, #0
 800895c:	ec47 6b10 	vmov	d0, r6, r7
 8008960:	9302      	str	r3, [sp, #8]
 8008962:	f000 fc87 	bl	8009274 <fabs>
 8008966:	9b02      	ldr	r3, [sp, #8]
 8008968:	ec51 0b10 	vmov	r0, r1, d0
 800896c:	bb43      	cbnz	r3, 80089c0 <__ieee754_pow+0x1e0>
 800896e:	4b43      	ldr	r3, [pc, #268]	@ (8008a7c <__ieee754_pow+0x29c>)
 8008970:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8008974:	429a      	cmp	r2, r3
 8008976:	d000      	beq.n	800897a <__ieee754_pow+0x19a>
 8008978:	bb15      	cbnz	r5, 80089c0 <__ieee754_pow+0x1e0>
 800897a:	f1b9 0f00 	cmp.w	r9, #0
 800897e:	da05      	bge.n	800898c <__ieee754_pow+0x1ac>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	2000      	movs	r0, #0
 8008986:	493d      	ldr	r1, [pc, #244]	@ (8008a7c <__ieee754_pow+0x29c>)
 8008988:	f7f7 ff04 	bl	8000794 <__aeabi_ddiv>
 800898c:	f1b8 0f00 	cmp.w	r8, #0
 8008990:	f6bf af43 	bge.w	800881a <__ieee754_pow+0x3a>
 8008994:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008998:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800899c:	4325      	orrs	r5, r4
 800899e:	d108      	bne.n	80089b2 <__ieee754_pow+0x1d2>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4610      	mov	r0, r2
 80089a6:	4619      	mov	r1, r3
 80089a8:	f7f7 fc12 	bl	80001d0 <__aeabi_dsub>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	e79e      	b.n	80088f0 <__ieee754_pow+0x110>
 80089b2:	2c01      	cmp	r4, #1
 80089b4:	f47f af31 	bne.w	800881a <__ieee754_pow+0x3a>
 80089b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80089bc:	4619      	mov	r1, r3
 80089be:	e72c      	b.n	800881a <__ieee754_pow+0x3a>
 80089c0:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 80089c4:	3b01      	subs	r3, #1
 80089c6:	ea53 0204 	orrs.w	r2, r3, r4
 80089ca:	d102      	bne.n	80089d2 <__ieee754_pow+0x1f2>
 80089cc:	4632      	mov	r2, r6
 80089ce:	463b      	mov	r3, r7
 80089d0:	e7e8      	b.n	80089a4 <__ieee754_pow+0x1c4>
 80089d2:	3c01      	subs	r4, #1
 80089d4:	431c      	orrs	r4, r3
 80089d6:	d016      	beq.n	8008a06 <__ieee754_pow+0x226>
 80089d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008a60 <__ieee754_pow+0x280>
 80089dc:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80089e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80089e4:	f240 8110 	bls.w	8008c08 <__ieee754_pow+0x428>
 80089e8:	4b27      	ldr	r3, [pc, #156]	@ (8008a88 <__ieee754_pow+0x2a8>)
 80089ea:	459a      	cmp	sl, r3
 80089ec:	4b24      	ldr	r3, [pc, #144]	@ (8008a80 <__ieee754_pow+0x2a0>)
 80089ee:	d916      	bls.n	8008a1e <__ieee754_pow+0x23e>
 80089f0:	429d      	cmp	r5, r3
 80089f2:	d80b      	bhi.n	8008a0c <__ieee754_pow+0x22c>
 80089f4:	f1b9 0f00 	cmp.w	r9, #0
 80089f8:	da0b      	bge.n	8008a12 <__ieee754_pow+0x232>
 80089fa:	2000      	movs	r0, #0
 80089fc:	b011      	add	sp, #68	@ 0x44
 80089fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a02:	f000 bcf1 	b.w	80093e8 <__math_oflow>
 8008a06:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8008a68 <__ieee754_pow+0x288>
 8008a0a:	e7e7      	b.n	80089dc <__ieee754_pow+0x1fc>
 8008a0c:	f1b9 0f00 	cmp.w	r9, #0
 8008a10:	dcf3      	bgt.n	80089fa <__ieee754_pow+0x21a>
 8008a12:	2000      	movs	r0, #0
 8008a14:	b011      	add	sp, #68	@ 0x44
 8008a16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1a:	f000 bcdd 	b.w	80093d8 <__math_uflow>
 8008a1e:	429d      	cmp	r5, r3
 8008a20:	d20c      	bcs.n	8008a3c <__ieee754_pow+0x25c>
 8008a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a26:	2200      	movs	r2, #0
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f7f7 fffb 	bl	8000a24 <__aeabi_dcmplt>
 8008a2e:	3800      	subs	r0, #0
 8008a30:	bf18      	it	ne
 8008a32:	2001      	movne	r0, #1
 8008a34:	f1b9 0f00 	cmp.w	r9, #0
 8008a38:	daec      	bge.n	8008a14 <__ieee754_pow+0x234>
 8008a3a:	e7df      	b.n	80089fc <__ieee754_pow+0x21c>
 8008a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8008a7c <__ieee754_pow+0x29c>)
 8008a3e:	429d      	cmp	r5, r3
 8008a40:	f04f 0200 	mov.w	r2, #0
 8008a44:	d922      	bls.n	8008a8c <__ieee754_pow+0x2ac>
 8008a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f7f7 ffea 	bl	8000a24 <__aeabi_dcmplt>
 8008a50:	3800      	subs	r0, #0
 8008a52:	bf18      	it	ne
 8008a54:	2001      	movne	r0, #1
 8008a56:	f1b9 0f00 	cmp.w	r9, #0
 8008a5a:	dccf      	bgt.n	80089fc <__ieee754_pow+0x21c>
 8008a5c:	e7da      	b.n	8008a14 <__ieee754_pow+0x234>
 8008a5e:	bf00      	nop
 8008a60:	00000000 	.word	0x00000000
 8008a64:	3ff00000 	.word	0x3ff00000
 8008a68:	00000000 	.word	0x00000000
 8008a6c:	bff00000 	.word	0xbff00000
 8008a70:	fff00000 	.word	0xfff00000
 8008a74:	7ff00000 	.word	0x7ff00000
 8008a78:	433fffff 	.word	0x433fffff
 8008a7c:	3ff00000 	.word	0x3ff00000
 8008a80:	3fefffff 	.word	0x3fefffff
 8008a84:	3fe00000 	.word	0x3fe00000
 8008a88:	43f00000 	.word	0x43f00000
 8008a8c:	4b5a      	ldr	r3, [pc, #360]	@ (8008bf8 <__ieee754_pow+0x418>)
 8008a8e:	f7f7 fb9f 	bl	80001d0 <__aeabi_dsub>
 8008a92:	a351      	add	r3, pc, #324	@ (adr r3, 8008bd8 <__ieee754_pow+0x3f8>)
 8008a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a98:	4604      	mov	r4, r0
 8008a9a:	460d      	mov	r5, r1
 8008a9c:	f7f7 fd50 	bl	8000540 <__aeabi_dmul>
 8008aa0:	a34f      	add	r3, pc, #316	@ (adr r3, 8008be0 <__ieee754_pow+0x400>)
 8008aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa6:	4606      	mov	r6, r0
 8008aa8:	460f      	mov	r7, r1
 8008aaa:	4620      	mov	r0, r4
 8008aac:	4629      	mov	r1, r5
 8008aae:	f7f7 fd47 	bl	8000540 <__aeabi_dmul>
 8008ab2:	4b52      	ldr	r3, [pc, #328]	@ (8008bfc <__ieee754_pow+0x41c>)
 8008ab4:	4682      	mov	sl, r0
 8008ab6:	468b      	mov	fp, r1
 8008ab8:	2200      	movs	r2, #0
 8008aba:	4620      	mov	r0, r4
 8008abc:	4629      	mov	r1, r5
 8008abe:	f7f7 fd3f 	bl	8000540 <__aeabi_dmul>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	a148      	add	r1, pc, #288	@ (adr r1, 8008be8 <__ieee754_pow+0x408>)
 8008ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008acc:	f7f7 fb80 	bl	80001d0 <__aeabi_dsub>
 8008ad0:	4622      	mov	r2, r4
 8008ad2:	462b      	mov	r3, r5
 8008ad4:	f7f7 fd34 	bl	8000540 <__aeabi_dmul>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	2000      	movs	r0, #0
 8008ade:	4948      	ldr	r1, [pc, #288]	@ (8008c00 <__ieee754_pow+0x420>)
 8008ae0:	f7f7 fb76 	bl	80001d0 <__aeabi_dsub>
 8008ae4:	4622      	mov	r2, r4
 8008ae6:	4680      	mov	r8, r0
 8008ae8:	4689      	mov	r9, r1
 8008aea:	462b      	mov	r3, r5
 8008aec:	4620      	mov	r0, r4
 8008aee:	4629      	mov	r1, r5
 8008af0:	f7f7 fd26 	bl	8000540 <__aeabi_dmul>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	4640      	mov	r0, r8
 8008afa:	4649      	mov	r1, r9
 8008afc:	f7f7 fd20 	bl	8000540 <__aeabi_dmul>
 8008b00:	a33b      	add	r3, pc, #236	@ (adr r3, 8008bf0 <__ieee754_pow+0x410>)
 8008b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b06:	f7f7 fd1b 	bl	8000540 <__aeabi_dmul>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4650      	mov	r0, sl
 8008b10:	4659      	mov	r1, fp
 8008b12:	f7f7 fb5d 	bl	80001d0 <__aeabi_dsub>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	4680      	mov	r8, r0
 8008b1c:	4689      	mov	r9, r1
 8008b1e:	4630      	mov	r0, r6
 8008b20:	4639      	mov	r1, r7
 8008b22:	f7f7 fb57 	bl	80001d4 <__adddf3>
 8008b26:	2400      	movs	r4, #0
 8008b28:	4632      	mov	r2, r6
 8008b2a:	463b      	mov	r3, r7
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	460d      	mov	r5, r1
 8008b30:	f7f7 fb4e 	bl	80001d0 <__aeabi_dsub>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4640      	mov	r0, r8
 8008b3a:	4649      	mov	r1, r9
 8008b3c:	f7f7 fb48 	bl	80001d0 <__aeabi_dsub>
 8008b40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b48:	2300      	movs	r3, #0
 8008b4a:	9304      	str	r3, [sp, #16]
 8008b4c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008b50:	4606      	mov	r6, r0
 8008b52:	460f      	mov	r7, r1
 8008b54:	465b      	mov	r3, fp
 8008b56:	4652      	mov	r2, sl
 8008b58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b5c:	f7f7 fb38 	bl	80001d0 <__aeabi_dsub>
 8008b60:	4622      	mov	r2, r4
 8008b62:	462b      	mov	r3, r5
 8008b64:	f7f7 fcec 	bl	8000540 <__aeabi_dmul>
 8008b68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b6c:	4680      	mov	r8, r0
 8008b6e:	4689      	mov	r9, r1
 8008b70:	4630      	mov	r0, r6
 8008b72:	4639      	mov	r1, r7
 8008b74:	f7f7 fce4 	bl	8000540 <__aeabi_dmul>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4640      	mov	r0, r8
 8008b7e:	4649      	mov	r1, r9
 8008b80:	f7f7 fb28 	bl	80001d4 <__adddf3>
 8008b84:	465b      	mov	r3, fp
 8008b86:	4606      	mov	r6, r0
 8008b88:	460f      	mov	r7, r1
 8008b8a:	4652      	mov	r2, sl
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	4629      	mov	r1, r5
 8008b90:	f7f7 fcd6 	bl	8000540 <__aeabi_dmul>
 8008b94:	460b      	mov	r3, r1
 8008b96:	4602      	mov	r2, r0
 8008b98:	4680      	mov	r8, r0
 8008b9a:	4689      	mov	r9, r1
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	f7f7 fb18 	bl	80001d4 <__adddf3>
 8008ba4:	4b17      	ldr	r3, [pc, #92]	@ (8008c04 <__ieee754_pow+0x424>)
 8008ba6:	4299      	cmp	r1, r3
 8008ba8:	4604      	mov	r4, r0
 8008baa:	460d      	mov	r5, r1
 8008bac:	468b      	mov	fp, r1
 8008bae:	f340 820b 	ble.w	8008fc8 <__ieee754_pow+0x7e8>
 8008bb2:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008bb6:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008bba:	4303      	orrs	r3, r0
 8008bbc:	f000 81ea 	beq.w	8008f94 <__ieee754_pow+0x7b4>
 8008bc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	f7f7 ff2c 	bl	8000a24 <__aeabi_dcmplt>
 8008bcc:	3800      	subs	r0, #0
 8008bce:	bf18      	it	ne
 8008bd0:	2001      	movne	r0, #1
 8008bd2:	e713      	b.n	80089fc <__ieee754_pow+0x21c>
 8008bd4:	f3af 8000 	nop.w
 8008bd8:	60000000 	.word	0x60000000
 8008bdc:	3ff71547 	.word	0x3ff71547
 8008be0:	f85ddf44 	.word	0xf85ddf44
 8008be4:	3e54ae0b 	.word	0x3e54ae0b
 8008be8:	55555555 	.word	0x55555555
 8008bec:	3fd55555 	.word	0x3fd55555
 8008bf0:	652b82fe 	.word	0x652b82fe
 8008bf4:	3ff71547 	.word	0x3ff71547
 8008bf8:	3ff00000 	.word	0x3ff00000
 8008bfc:	3fd00000 	.word	0x3fd00000
 8008c00:	3fe00000 	.word	0x3fe00000
 8008c04:	408fffff 	.word	0x408fffff
 8008c08:	4bd5      	ldr	r3, [pc, #852]	@ (8008f60 <__ieee754_pow+0x780>)
 8008c0a:	ea08 0303 	and.w	r3, r8, r3
 8008c0e:	2200      	movs	r2, #0
 8008c10:	b92b      	cbnz	r3, 8008c1e <__ieee754_pow+0x43e>
 8008c12:	4bd4      	ldr	r3, [pc, #848]	@ (8008f64 <__ieee754_pow+0x784>)
 8008c14:	f7f7 fc94 	bl	8000540 <__aeabi_dmul>
 8008c18:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008c1c:	468b      	mov	fp, r1
 8008c1e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008c22:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008c26:	4413      	add	r3, r2
 8008c28:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c2a:	4bcf      	ldr	r3, [pc, #828]	@ (8008f68 <__ieee754_pow+0x788>)
 8008c2c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008c30:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8008c34:	459b      	cmp	fp, r3
 8008c36:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008c3a:	dd08      	ble.n	8008c4e <__ieee754_pow+0x46e>
 8008c3c:	4bcb      	ldr	r3, [pc, #812]	@ (8008f6c <__ieee754_pow+0x78c>)
 8008c3e:	459b      	cmp	fp, r3
 8008c40:	f340 81a5 	ble.w	8008f8e <__ieee754_pow+0x7ae>
 8008c44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c46:	3301      	adds	r3, #1
 8008c48:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c4a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008c4e:	f04f 0a00 	mov.w	sl, #0
 8008c52:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008c56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c58:	4bc5      	ldr	r3, [pc, #788]	@ (8008f70 <__ieee754_pow+0x790>)
 8008c5a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c5e:	ed93 7b00 	vldr	d7, [r3]
 8008c62:	4629      	mov	r1, r5
 8008c64:	ec53 2b17 	vmov	r2, r3, d7
 8008c68:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c70:	f7f7 faae 	bl	80001d0 <__aeabi_dsub>
 8008c74:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c78:	4606      	mov	r6, r0
 8008c7a:	460f      	mov	r7, r1
 8008c7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c80:	f7f7 faa8 	bl	80001d4 <__adddf3>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	2000      	movs	r0, #0
 8008c8a:	49ba      	ldr	r1, [pc, #744]	@ (8008f74 <__ieee754_pow+0x794>)
 8008c8c:	f7f7 fd82 	bl	8000794 <__aeabi_ddiv>
 8008c90:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	4630      	mov	r0, r6
 8008c9a:	4639      	mov	r1, r7
 8008c9c:	f7f7 fc50 	bl	8000540 <__aeabi_dmul>
 8008ca0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ca4:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8008ca8:	106d      	asrs	r5, r5, #1
 8008caa:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008cae:	f04f 0b00 	mov.w	fp, #0
 8008cb2:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008cb6:	4661      	mov	r1, ip
 8008cb8:	2200      	movs	r2, #0
 8008cba:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008cbe:	4658      	mov	r0, fp
 8008cc0:	46e1      	mov	r9, ip
 8008cc2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8008cc6:	4614      	mov	r4, r2
 8008cc8:	461d      	mov	r5, r3
 8008cca:	f7f7 fc39 	bl	8000540 <__aeabi_dmul>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	4639      	mov	r1, r7
 8008cd6:	f7f7 fa7b 	bl	80001d0 <__aeabi_dsub>
 8008cda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008cde:	4606      	mov	r6, r0
 8008ce0:	460f      	mov	r7, r1
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	f7f7 fa73 	bl	80001d0 <__aeabi_dsub>
 8008cea:	4602      	mov	r2, r0
 8008cec:	460b      	mov	r3, r1
 8008cee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008cf2:	f7f7 fa6d 	bl	80001d0 <__aeabi_dsub>
 8008cf6:	465a      	mov	r2, fp
 8008cf8:	464b      	mov	r3, r9
 8008cfa:	f7f7 fc21 	bl	8000540 <__aeabi_dmul>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	4630      	mov	r0, r6
 8008d04:	4639      	mov	r1, r7
 8008d06:	f7f7 fa63 	bl	80001d0 <__aeabi_dsub>
 8008d0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008d0e:	f7f7 fc17 	bl	8000540 <__aeabi_dmul>
 8008d12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	f7f7 fc0f 	bl	8000540 <__aeabi_dmul>
 8008d22:	a37d      	add	r3, pc, #500	@ (adr r3, 8008f18 <__ieee754_pow+0x738>)
 8008d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d28:	4604      	mov	r4, r0
 8008d2a:	460d      	mov	r5, r1
 8008d2c:	f7f7 fc08 	bl	8000540 <__aeabi_dmul>
 8008d30:	a37b      	add	r3, pc, #492	@ (adr r3, 8008f20 <__ieee754_pow+0x740>)
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	f7f7 fa4d 	bl	80001d4 <__adddf3>
 8008d3a:	4622      	mov	r2, r4
 8008d3c:	462b      	mov	r3, r5
 8008d3e:	f7f7 fbff 	bl	8000540 <__aeabi_dmul>
 8008d42:	a379      	add	r3, pc, #484	@ (adr r3, 8008f28 <__ieee754_pow+0x748>)
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	f7f7 fa44 	bl	80001d4 <__adddf3>
 8008d4c:	4622      	mov	r2, r4
 8008d4e:	462b      	mov	r3, r5
 8008d50:	f7f7 fbf6 	bl	8000540 <__aeabi_dmul>
 8008d54:	a376      	add	r3, pc, #472	@ (adr r3, 8008f30 <__ieee754_pow+0x750>)
 8008d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5a:	f7f7 fa3b 	bl	80001d4 <__adddf3>
 8008d5e:	4622      	mov	r2, r4
 8008d60:	462b      	mov	r3, r5
 8008d62:	f7f7 fbed 	bl	8000540 <__aeabi_dmul>
 8008d66:	a374      	add	r3, pc, #464	@ (adr r3, 8008f38 <__ieee754_pow+0x758>)
 8008d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6c:	f7f7 fa32 	bl	80001d4 <__adddf3>
 8008d70:	4622      	mov	r2, r4
 8008d72:	462b      	mov	r3, r5
 8008d74:	f7f7 fbe4 	bl	8000540 <__aeabi_dmul>
 8008d78:	a371      	add	r3, pc, #452	@ (adr r3, 8008f40 <__ieee754_pow+0x760>)
 8008d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7e:	f7f7 fa29 	bl	80001d4 <__adddf3>
 8008d82:	4622      	mov	r2, r4
 8008d84:	4606      	mov	r6, r0
 8008d86:	460f      	mov	r7, r1
 8008d88:	462b      	mov	r3, r5
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	f7f7 fbd7 	bl	8000540 <__aeabi_dmul>
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	4630      	mov	r0, r6
 8008d98:	4639      	mov	r1, r7
 8008d9a:	f7f7 fbd1 	bl	8000540 <__aeabi_dmul>
 8008d9e:	465a      	mov	r2, fp
 8008da0:	4604      	mov	r4, r0
 8008da2:	460d      	mov	r5, r1
 8008da4:	464b      	mov	r3, r9
 8008da6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008daa:	f7f7 fa13 	bl	80001d4 <__adddf3>
 8008dae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008db2:	f7f7 fbc5 	bl	8000540 <__aeabi_dmul>
 8008db6:	4622      	mov	r2, r4
 8008db8:	462b      	mov	r3, r5
 8008dba:	f7f7 fa0b 	bl	80001d4 <__adddf3>
 8008dbe:	465a      	mov	r2, fp
 8008dc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008dc4:	464b      	mov	r3, r9
 8008dc6:	4658      	mov	r0, fp
 8008dc8:	4649      	mov	r1, r9
 8008dca:	f7f7 fbb9 	bl	8000540 <__aeabi_dmul>
 8008dce:	4b6a      	ldr	r3, [pc, #424]	@ (8008f78 <__ieee754_pow+0x798>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	4606      	mov	r6, r0
 8008dd4:	460f      	mov	r7, r1
 8008dd6:	f7f7 f9fd 	bl	80001d4 <__adddf3>
 8008dda:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008dde:	f7f7 f9f9 	bl	80001d4 <__adddf3>
 8008de2:	46d8      	mov	r8, fp
 8008de4:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008de8:	460d      	mov	r5, r1
 8008dea:	465a      	mov	r2, fp
 8008dec:	460b      	mov	r3, r1
 8008dee:	4640      	mov	r0, r8
 8008df0:	4649      	mov	r1, r9
 8008df2:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8008df6:	f7f7 fba3 	bl	8000540 <__aeabi_dmul>
 8008dfa:	465c      	mov	r4, fp
 8008dfc:	4680      	mov	r8, r0
 8008dfe:	4689      	mov	r9, r1
 8008e00:	4b5d      	ldr	r3, [pc, #372]	@ (8008f78 <__ieee754_pow+0x798>)
 8008e02:	2200      	movs	r2, #0
 8008e04:	4620      	mov	r0, r4
 8008e06:	4629      	mov	r1, r5
 8008e08:	f7f7 f9e2 	bl	80001d0 <__aeabi_dsub>
 8008e0c:	4632      	mov	r2, r6
 8008e0e:	463b      	mov	r3, r7
 8008e10:	f7f7 f9de 	bl	80001d0 <__aeabi_dsub>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008e1c:	f7f7 f9d8 	bl	80001d0 <__aeabi_dsub>
 8008e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e24:	f7f7 fb8c 	bl	8000540 <__aeabi_dmul>
 8008e28:	4622      	mov	r2, r4
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	460f      	mov	r7, r1
 8008e2e:	462b      	mov	r3, r5
 8008e30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e34:	f7f7 fb84 	bl	8000540 <__aeabi_dmul>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	4639      	mov	r1, r7
 8008e40:	f7f7 f9c8 	bl	80001d4 <__adddf3>
 8008e44:	4606      	mov	r6, r0
 8008e46:	460f      	mov	r7, r1
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	4640      	mov	r0, r8
 8008e4e:	4649      	mov	r1, r9
 8008e50:	f7f7 f9c0 	bl	80001d4 <__adddf3>
 8008e54:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008e58:	a33b      	add	r3, pc, #236	@ (adr r3, 8008f48 <__ieee754_pow+0x768>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	4658      	mov	r0, fp
 8008e60:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8008e64:	460d      	mov	r5, r1
 8008e66:	f7f7 fb6b 	bl	8000540 <__aeabi_dmul>
 8008e6a:	465c      	mov	r4, fp
 8008e6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e70:	4642      	mov	r2, r8
 8008e72:	464b      	mov	r3, r9
 8008e74:	4620      	mov	r0, r4
 8008e76:	4629      	mov	r1, r5
 8008e78:	f7f7 f9aa 	bl	80001d0 <__aeabi_dsub>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4630      	mov	r0, r6
 8008e82:	4639      	mov	r1, r7
 8008e84:	f7f7 f9a4 	bl	80001d0 <__aeabi_dsub>
 8008e88:	a331      	add	r3, pc, #196	@ (adr r3, 8008f50 <__ieee754_pow+0x770>)
 8008e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8e:	f7f7 fb57 	bl	8000540 <__aeabi_dmul>
 8008e92:	a331      	add	r3, pc, #196	@ (adr r3, 8008f58 <__ieee754_pow+0x778>)
 8008e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e98:	4606      	mov	r6, r0
 8008e9a:	460f      	mov	r7, r1
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	f7f7 fb4e 	bl	8000540 <__aeabi_dmul>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	4639      	mov	r1, r7
 8008eac:	f7f7 f992 	bl	80001d4 <__adddf3>
 8008eb0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008eb2:	4b32      	ldr	r3, [pc, #200]	@ (8008f7c <__ieee754_pow+0x79c>)
 8008eb4:	4413      	add	r3, r2
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	f7f7 f98b 	bl	80001d4 <__adddf3>
 8008ebe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ec2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008ec4:	f7f7 fad2 	bl	800046c <__aeabi_i2d>
 8008ec8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008eca:	4b2d      	ldr	r3, [pc, #180]	@ (8008f80 <__ieee754_pow+0x7a0>)
 8008ecc:	4413      	add	r3, r2
 8008ece:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ed8:	460f      	mov	r7, r1
 8008eda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ede:	f7f7 f979 	bl	80001d4 <__adddf3>
 8008ee2:	4642      	mov	r2, r8
 8008ee4:	464b      	mov	r3, r9
 8008ee6:	f7f7 f975 	bl	80001d4 <__adddf3>
 8008eea:	4632      	mov	r2, r6
 8008eec:	463b      	mov	r3, r7
 8008eee:	f7f7 f971 	bl	80001d4 <__adddf3>
 8008ef2:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8008ef6:	4632      	mov	r2, r6
 8008ef8:	463b      	mov	r3, r7
 8008efa:	4658      	mov	r0, fp
 8008efc:	460d      	mov	r5, r1
 8008efe:	f7f7 f967 	bl	80001d0 <__aeabi_dsub>
 8008f02:	4642      	mov	r2, r8
 8008f04:	464b      	mov	r3, r9
 8008f06:	f7f7 f963 	bl	80001d0 <__aeabi_dsub>
 8008f0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f0e:	f7f7 f95f 	bl	80001d0 <__aeabi_dsub>
 8008f12:	465c      	mov	r4, fp
 8008f14:	e036      	b.n	8008f84 <__ieee754_pow+0x7a4>
 8008f16:	bf00      	nop
 8008f18:	4a454eef 	.word	0x4a454eef
 8008f1c:	3fca7e28 	.word	0x3fca7e28
 8008f20:	93c9db65 	.word	0x93c9db65
 8008f24:	3fcd864a 	.word	0x3fcd864a
 8008f28:	a91d4101 	.word	0xa91d4101
 8008f2c:	3fd17460 	.word	0x3fd17460
 8008f30:	518f264d 	.word	0x518f264d
 8008f34:	3fd55555 	.word	0x3fd55555
 8008f38:	db6fabff 	.word	0xdb6fabff
 8008f3c:	3fdb6db6 	.word	0x3fdb6db6
 8008f40:	33333303 	.word	0x33333303
 8008f44:	3fe33333 	.word	0x3fe33333
 8008f48:	e0000000 	.word	0xe0000000
 8008f4c:	3feec709 	.word	0x3feec709
 8008f50:	dc3a03fd 	.word	0xdc3a03fd
 8008f54:	3feec709 	.word	0x3feec709
 8008f58:	145b01f5 	.word	0x145b01f5
 8008f5c:	be3e2fe0 	.word	0xbe3e2fe0
 8008f60:	7ff00000 	.word	0x7ff00000
 8008f64:	43400000 	.word	0x43400000
 8008f68:	0003988e 	.word	0x0003988e
 8008f6c:	000bb679 	.word	0x000bb679
 8008f70:	08009508 	.word	0x08009508
 8008f74:	3ff00000 	.word	0x3ff00000
 8008f78:	40080000 	.word	0x40080000
 8008f7c:	080094e8 	.word	0x080094e8
 8008f80:	080094f8 	.word	0x080094f8
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f8c:	e5d6      	b.n	8008b3c <__ieee754_pow+0x35c>
 8008f8e:	f04f 0a01 	mov.w	sl, #1
 8008f92:	e65e      	b.n	8008c52 <__ieee754_pow+0x472>
 8008f94:	a3b5      	add	r3, pc, #724	@ (adr r3, 800926c <__ieee754_pow+0xa8c>)
 8008f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	4639      	mov	r1, r7
 8008f9e:	f7f7 f919 	bl	80001d4 <__adddf3>
 8008fa2:	4642      	mov	r2, r8
 8008fa4:	e9cd 0100 	strd	r0, r1, [sp]
 8008fa8:	464b      	mov	r3, r9
 8008faa:	4620      	mov	r0, r4
 8008fac:	4629      	mov	r1, r5
 8008fae:	f7f7 f90f 	bl	80001d0 <__aeabi_dsub>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fba:	f7f7 fd51 	bl	8000a60 <__aeabi_dcmpgt>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	f47f adfe 	bne.w	8008bc0 <__ieee754_pow+0x3e0>
 8008fc4:	4ba2      	ldr	r3, [pc, #648]	@ (8009250 <__ieee754_pow+0xa70>)
 8008fc6:	e022      	b.n	800900e <__ieee754_pow+0x82e>
 8008fc8:	4ca2      	ldr	r4, [pc, #648]	@ (8009254 <__ieee754_pow+0xa74>)
 8008fca:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008fce:	42a3      	cmp	r3, r4
 8008fd0:	d919      	bls.n	8009006 <__ieee754_pow+0x826>
 8008fd2:	4ba1      	ldr	r3, [pc, #644]	@ (8009258 <__ieee754_pow+0xa78>)
 8008fd4:	440b      	add	r3, r1
 8008fd6:	4303      	orrs	r3, r0
 8008fd8:	d009      	beq.n	8008fee <__ieee754_pow+0x80e>
 8008fda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f7f7 fd1f 	bl	8000a24 <__aeabi_dcmplt>
 8008fe6:	3800      	subs	r0, #0
 8008fe8:	bf18      	it	ne
 8008fea:	2001      	movne	r0, #1
 8008fec:	e512      	b.n	8008a14 <__ieee754_pow+0x234>
 8008fee:	4642      	mov	r2, r8
 8008ff0:	464b      	mov	r3, r9
 8008ff2:	f7f7 f8ed 	bl	80001d0 <__aeabi_dsub>
 8008ff6:	4632      	mov	r2, r6
 8008ff8:	463b      	mov	r3, r7
 8008ffa:	f7f7 fd27 	bl	8000a4c <__aeabi_dcmpge>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d1eb      	bne.n	8008fda <__ieee754_pow+0x7fa>
 8009002:	4b96      	ldr	r3, [pc, #600]	@ (800925c <__ieee754_pow+0xa7c>)
 8009004:	e003      	b.n	800900e <__ieee754_pow+0x82e>
 8009006:	4a96      	ldr	r2, [pc, #600]	@ (8009260 <__ieee754_pow+0xa80>)
 8009008:	4293      	cmp	r3, r2
 800900a:	f240 80e7 	bls.w	80091dc <__ieee754_pow+0x9fc>
 800900e:	151b      	asrs	r3, r3, #20
 8009010:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8009014:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8009018:	fa4a fa03 	asr.w	sl, sl, r3
 800901c:	44da      	add	sl, fp
 800901e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009022:	4890      	ldr	r0, [pc, #576]	@ (8009264 <__ieee754_pow+0xa84>)
 8009024:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009028:	4108      	asrs	r0, r1
 800902a:	ea00 030a 	and.w	r3, r0, sl
 800902e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009032:	f1c1 0114 	rsb	r1, r1, #20
 8009036:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800903a:	fa4a fa01 	asr.w	sl, sl, r1
 800903e:	f1bb 0f00 	cmp.w	fp, #0
 8009042:	4640      	mov	r0, r8
 8009044:	4649      	mov	r1, r9
 8009046:	f04f 0200 	mov.w	r2, #0
 800904a:	bfb8      	it	lt
 800904c:	f1ca 0a00 	rsblt	sl, sl, #0
 8009050:	f7f7 f8be 	bl	80001d0 <__aeabi_dsub>
 8009054:	4680      	mov	r8, r0
 8009056:	4689      	mov	r9, r1
 8009058:	4632      	mov	r2, r6
 800905a:	463b      	mov	r3, r7
 800905c:	4640      	mov	r0, r8
 800905e:	4649      	mov	r1, r9
 8009060:	f7f7 f8b8 	bl	80001d4 <__adddf3>
 8009064:	2400      	movs	r4, #0
 8009066:	a36a      	add	r3, pc, #424	@ (adr r3, 8009210 <__ieee754_pow+0xa30>)
 8009068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906c:	4620      	mov	r0, r4
 800906e:	460d      	mov	r5, r1
 8009070:	f7f7 fa66 	bl	8000540 <__aeabi_dmul>
 8009074:	4642      	mov	r2, r8
 8009076:	e9cd 0100 	strd	r0, r1, [sp]
 800907a:	464b      	mov	r3, r9
 800907c:	4620      	mov	r0, r4
 800907e:	4629      	mov	r1, r5
 8009080:	f7f7 f8a6 	bl	80001d0 <__aeabi_dsub>
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	4630      	mov	r0, r6
 800908a:	4639      	mov	r1, r7
 800908c:	f7f7 f8a0 	bl	80001d0 <__aeabi_dsub>
 8009090:	a361      	add	r3, pc, #388	@ (adr r3, 8009218 <__ieee754_pow+0xa38>)
 8009092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009096:	f7f7 fa53 	bl	8000540 <__aeabi_dmul>
 800909a:	a361      	add	r3, pc, #388	@ (adr r3, 8009220 <__ieee754_pow+0xa40>)
 800909c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a0:	4680      	mov	r8, r0
 80090a2:	4689      	mov	r9, r1
 80090a4:	4620      	mov	r0, r4
 80090a6:	4629      	mov	r1, r5
 80090a8:	f7f7 fa4a 	bl	8000540 <__aeabi_dmul>
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	4640      	mov	r0, r8
 80090b2:	4649      	mov	r1, r9
 80090b4:	f7f7 f88e 	bl	80001d4 <__adddf3>
 80090b8:	4604      	mov	r4, r0
 80090ba:	460d      	mov	r5, r1
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090c4:	f7f7 f886 	bl	80001d4 <__adddf3>
 80090c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090cc:	4680      	mov	r8, r0
 80090ce:	4689      	mov	r9, r1
 80090d0:	f7f7 f87e 	bl	80001d0 <__aeabi_dsub>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4620      	mov	r0, r4
 80090da:	4629      	mov	r1, r5
 80090dc:	f7f7 f878 	bl	80001d0 <__aeabi_dsub>
 80090e0:	4642      	mov	r2, r8
 80090e2:	4606      	mov	r6, r0
 80090e4:	460f      	mov	r7, r1
 80090e6:	464b      	mov	r3, r9
 80090e8:	4640      	mov	r0, r8
 80090ea:	4649      	mov	r1, r9
 80090ec:	f7f7 fa28 	bl	8000540 <__aeabi_dmul>
 80090f0:	a34d      	add	r3, pc, #308	@ (adr r3, 8009228 <__ieee754_pow+0xa48>)
 80090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f6:	4604      	mov	r4, r0
 80090f8:	460d      	mov	r5, r1
 80090fa:	f7f7 fa21 	bl	8000540 <__aeabi_dmul>
 80090fe:	a34c      	add	r3, pc, #304	@ (adr r3, 8009230 <__ieee754_pow+0xa50>)
 8009100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009104:	f7f7 f864 	bl	80001d0 <__aeabi_dsub>
 8009108:	4622      	mov	r2, r4
 800910a:	462b      	mov	r3, r5
 800910c:	f7f7 fa18 	bl	8000540 <__aeabi_dmul>
 8009110:	a349      	add	r3, pc, #292	@ (adr r3, 8009238 <__ieee754_pow+0xa58>)
 8009112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009116:	f7f7 f85d 	bl	80001d4 <__adddf3>
 800911a:	4622      	mov	r2, r4
 800911c:	462b      	mov	r3, r5
 800911e:	f7f7 fa0f 	bl	8000540 <__aeabi_dmul>
 8009122:	a347      	add	r3, pc, #284	@ (adr r3, 8009240 <__ieee754_pow+0xa60>)
 8009124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009128:	f7f7 f852 	bl	80001d0 <__aeabi_dsub>
 800912c:	4622      	mov	r2, r4
 800912e:	462b      	mov	r3, r5
 8009130:	f7f7 fa06 	bl	8000540 <__aeabi_dmul>
 8009134:	a344      	add	r3, pc, #272	@ (adr r3, 8009248 <__ieee754_pow+0xa68>)
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	f7f7 f84b 	bl	80001d4 <__adddf3>
 800913e:	4622      	mov	r2, r4
 8009140:	462b      	mov	r3, r5
 8009142:	f7f7 f9fd 	bl	8000540 <__aeabi_dmul>
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	4640      	mov	r0, r8
 800914c:	4649      	mov	r1, r9
 800914e:	f7f7 f83f 	bl	80001d0 <__aeabi_dsub>
 8009152:	4604      	mov	r4, r0
 8009154:	460d      	mov	r5, r1
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	4640      	mov	r0, r8
 800915c:	4649      	mov	r1, r9
 800915e:	f7f7 f9ef 	bl	8000540 <__aeabi_dmul>
 8009162:	2200      	movs	r2, #0
 8009164:	e9cd 0100 	strd	r0, r1, [sp]
 8009168:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800916c:	4620      	mov	r0, r4
 800916e:	4629      	mov	r1, r5
 8009170:	f7f7 f82e 	bl	80001d0 <__aeabi_dsub>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	e9dd 0100 	ldrd	r0, r1, [sp]
 800917c:	f7f7 fb0a 	bl	8000794 <__aeabi_ddiv>
 8009180:	4632      	mov	r2, r6
 8009182:	4604      	mov	r4, r0
 8009184:	460d      	mov	r5, r1
 8009186:	463b      	mov	r3, r7
 8009188:	4640      	mov	r0, r8
 800918a:	4649      	mov	r1, r9
 800918c:	f7f7 f9d8 	bl	8000540 <__aeabi_dmul>
 8009190:	4632      	mov	r2, r6
 8009192:	463b      	mov	r3, r7
 8009194:	f7f7 f81e 	bl	80001d4 <__adddf3>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	4620      	mov	r0, r4
 800919e:	4629      	mov	r1, r5
 80091a0:	f7f7 f816 	bl	80001d0 <__aeabi_dsub>
 80091a4:	4642      	mov	r2, r8
 80091a6:	464b      	mov	r3, r9
 80091a8:	f7f7 f812 	bl	80001d0 <__aeabi_dsub>
 80091ac:	460b      	mov	r3, r1
 80091ae:	4602      	mov	r2, r0
 80091b0:	492d      	ldr	r1, [pc, #180]	@ (8009268 <__ieee754_pow+0xa88>)
 80091b2:	2000      	movs	r0, #0
 80091b4:	f7f7 f80c 	bl	80001d0 <__aeabi_dsub>
 80091b8:	ec41 0b10 	vmov	d0, r0, r1
 80091bc:	ee10 3a90 	vmov	r3, s1
 80091c0:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80091c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091c8:	da0b      	bge.n	80091e2 <__ieee754_pow+0xa02>
 80091ca:	4650      	mov	r0, sl
 80091cc:	f000 f85c 	bl	8009288 <scalbn>
 80091d0:	ec51 0b10 	vmov	r0, r1, d0
 80091d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091d8:	f7ff bb6d 	b.w	80088b6 <__ieee754_pow+0xd6>
 80091dc:	f8dd a010 	ldr.w	sl, [sp, #16]
 80091e0:	e73a      	b.n	8009058 <__ieee754_pow+0x878>
 80091e2:	ec51 0b10 	vmov	r0, r1, d0
 80091e6:	4619      	mov	r1, r3
 80091e8:	e7f4      	b.n	80091d4 <__ieee754_pow+0x9f4>
 80091ea:	491f      	ldr	r1, [pc, #124]	@ (8009268 <__ieee754_pow+0xa88>)
 80091ec:	2000      	movs	r0, #0
 80091ee:	f7ff bb14 	b.w	800881a <__ieee754_pow+0x3a>
 80091f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091f6:	f7ff bb10 	b.w	800881a <__ieee754_pow+0x3a>
 80091fa:	4630      	mov	r0, r6
 80091fc:	4639      	mov	r1, r7
 80091fe:	f7ff bb0c 	b.w	800881a <__ieee754_pow+0x3a>
 8009202:	460c      	mov	r4, r1
 8009204:	f7ff bb69 	b.w	80088da <__ieee754_pow+0xfa>
 8009208:	2400      	movs	r4, #0
 800920a:	f7ff bb4b 	b.w	80088a4 <__ieee754_pow+0xc4>
 800920e:	bf00      	nop
 8009210:	00000000 	.word	0x00000000
 8009214:	3fe62e43 	.word	0x3fe62e43
 8009218:	fefa39ef 	.word	0xfefa39ef
 800921c:	3fe62e42 	.word	0x3fe62e42
 8009220:	0ca86c39 	.word	0x0ca86c39
 8009224:	be205c61 	.word	0xbe205c61
 8009228:	72bea4d0 	.word	0x72bea4d0
 800922c:	3e663769 	.word	0x3e663769
 8009230:	c5d26bf1 	.word	0xc5d26bf1
 8009234:	3ebbbd41 	.word	0x3ebbbd41
 8009238:	af25de2c 	.word	0xaf25de2c
 800923c:	3f11566a 	.word	0x3f11566a
 8009240:	16bebd93 	.word	0x16bebd93
 8009244:	3f66c16c 	.word	0x3f66c16c
 8009248:	5555553e 	.word	0x5555553e
 800924c:	3fc55555 	.word	0x3fc55555
 8009250:	40900000 	.word	0x40900000
 8009254:	4090cbff 	.word	0x4090cbff
 8009258:	3f6f3400 	.word	0x3f6f3400
 800925c:	4090cc00 	.word	0x4090cc00
 8009260:	3fe00000 	.word	0x3fe00000
 8009264:	fff00000 	.word	0xfff00000
 8009268:	3ff00000 	.word	0x3ff00000
 800926c:	652b82fe 	.word	0x652b82fe
 8009270:	3c971547 	.word	0x3c971547

08009274 <fabs>:
 8009274:	ec51 0b10 	vmov	r0, r1, d0
 8009278:	4602      	mov	r2, r0
 800927a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800927e:	ec43 2b10 	vmov	d0, r2, r3
 8009282:	4770      	bx	lr
 8009284:	0000      	movs	r0, r0
	...

08009288 <scalbn>:
 8009288:	b570      	push	{r4, r5, r6, lr}
 800928a:	ec55 4b10 	vmov	r4, r5, d0
 800928e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009292:	4606      	mov	r6, r0
 8009294:	462b      	mov	r3, r5
 8009296:	b991      	cbnz	r1, 80092be <scalbn+0x36>
 8009298:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800929c:	4323      	orrs	r3, r4
 800929e:	d03b      	beq.n	8009318 <scalbn+0x90>
 80092a0:	4b33      	ldr	r3, [pc, #204]	@ (8009370 <scalbn+0xe8>)
 80092a2:	4620      	mov	r0, r4
 80092a4:	4629      	mov	r1, r5
 80092a6:	2200      	movs	r2, #0
 80092a8:	f7f7 f94a 	bl	8000540 <__aeabi_dmul>
 80092ac:	4b31      	ldr	r3, [pc, #196]	@ (8009374 <scalbn+0xec>)
 80092ae:	429e      	cmp	r6, r3
 80092b0:	4604      	mov	r4, r0
 80092b2:	460d      	mov	r5, r1
 80092b4:	da0f      	bge.n	80092d6 <scalbn+0x4e>
 80092b6:	a326      	add	r3, pc, #152	@ (adr r3, 8009350 <scalbn+0xc8>)
 80092b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092bc:	e01e      	b.n	80092fc <scalbn+0x74>
 80092be:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80092c2:	4291      	cmp	r1, r2
 80092c4:	d10b      	bne.n	80092de <scalbn+0x56>
 80092c6:	4622      	mov	r2, r4
 80092c8:	4620      	mov	r0, r4
 80092ca:	4629      	mov	r1, r5
 80092cc:	f7f6 ff82 	bl	80001d4 <__adddf3>
 80092d0:	4604      	mov	r4, r0
 80092d2:	460d      	mov	r5, r1
 80092d4:	e020      	b.n	8009318 <scalbn+0x90>
 80092d6:	460b      	mov	r3, r1
 80092d8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80092dc:	3936      	subs	r1, #54	@ 0x36
 80092de:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80092e2:	4296      	cmp	r6, r2
 80092e4:	dd0d      	ble.n	8009302 <scalbn+0x7a>
 80092e6:	2d00      	cmp	r5, #0
 80092e8:	a11b      	add	r1, pc, #108	@ (adr r1, 8009358 <scalbn+0xd0>)
 80092ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092ee:	da02      	bge.n	80092f6 <scalbn+0x6e>
 80092f0:	a11b      	add	r1, pc, #108	@ (adr r1, 8009360 <scalbn+0xd8>)
 80092f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092f6:	a318      	add	r3, pc, #96	@ (adr r3, 8009358 <scalbn+0xd0>)
 80092f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fc:	f7f7 f920 	bl	8000540 <__aeabi_dmul>
 8009300:	e7e6      	b.n	80092d0 <scalbn+0x48>
 8009302:	1872      	adds	r2, r6, r1
 8009304:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009308:	428a      	cmp	r2, r1
 800930a:	dcec      	bgt.n	80092e6 <scalbn+0x5e>
 800930c:	2a00      	cmp	r2, #0
 800930e:	dd06      	ble.n	800931e <scalbn+0x96>
 8009310:	f36f 531e 	bfc	r3, #20, #11
 8009314:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009318:	ec45 4b10 	vmov	d0, r4, r5
 800931c:	bd70      	pop	{r4, r5, r6, pc}
 800931e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009322:	da08      	bge.n	8009336 <scalbn+0xae>
 8009324:	2d00      	cmp	r5, #0
 8009326:	a10a      	add	r1, pc, #40	@ (adr r1, 8009350 <scalbn+0xc8>)
 8009328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800932c:	dac3      	bge.n	80092b6 <scalbn+0x2e>
 800932e:	a10e      	add	r1, pc, #56	@ (adr r1, 8009368 <scalbn+0xe0>)
 8009330:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009334:	e7bf      	b.n	80092b6 <scalbn+0x2e>
 8009336:	3236      	adds	r2, #54	@ 0x36
 8009338:	f36f 531e 	bfc	r3, #20, #11
 800933c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009340:	4620      	mov	r0, r4
 8009342:	4b0d      	ldr	r3, [pc, #52]	@ (8009378 <scalbn+0xf0>)
 8009344:	4629      	mov	r1, r5
 8009346:	2200      	movs	r2, #0
 8009348:	e7d8      	b.n	80092fc <scalbn+0x74>
 800934a:	bf00      	nop
 800934c:	f3af 8000 	nop.w
 8009350:	c2f8f359 	.word	0xc2f8f359
 8009354:	01a56e1f 	.word	0x01a56e1f
 8009358:	8800759c 	.word	0x8800759c
 800935c:	7e37e43c 	.word	0x7e37e43c
 8009360:	8800759c 	.word	0x8800759c
 8009364:	fe37e43c 	.word	0xfe37e43c
 8009368:	c2f8f359 	.word	0xc2f8f359
 800936c:	81a56e1f 	.word	0x81a56e1f
 8009370:	43500000 	.word	0x43500000
 8009374:	ffff3cb0 	.word	0xffff3cb0
 8009378:	3c900000 	.word	0x3c900000

0800937c <with_errno>:
 800937c:	b510      	push	{r4, lr}
 800937e:	ed2d 8b02 	vpush	{d8}
 8009382:	eeb0 8a40 	vmov.f32	s16, s0
 8009386:	eef0 8a60 	vmov.f32	s17, s1
 800938a:	4604      	mov	r4, r0
 800938c:	f000 f83c 	bl	8009408 <__errno>
 8009390:	eeb0 0a48 	vmov.f32	s0, s16
 8009394:	eef0 0a68 	vmov.f32	s1, s17
 8009398:	ecbd 8b02 	vpop	{d8}
 800939c:	6004      	str	r4, [r0, #0]
 800939e:	bd10      	pop	{r4, pc}

080093a0 <xflow>:
 80093a0:	4603      	mov	r3, r0
 80093a2:	b507      	push	{r0, r1, r2, lr}
 80093a4:	ec51 0b10 	vmov	r0, r1, d0
 80093a8:	b183      	cbz	r3, 80093cc <xflow+0x2c>
 80093aa:	4602      	mov	r2, r0
 80093ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80093b0:	e9cd 2300 	strd	r2, r3, [sp]
 80093b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093b8:	f7f7 f8c2 	bl	8000540 <__aeabi_dmul>
 80093bc:	ec41 0b10 	vmov	d0, r0, r1
 80093c0:	2022      	movs	r0, #34	@ 0x22
 80093c2:	b003      	add	sp, #12
 80093c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80093c8:	f7ff bfd8 	b.w	800937c <with_errno>
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	e7ee      	b.n	80093b0 <xflow+0x10>
 80093d2:	0000      	movs	r0, r0
 80093d4:	0000      	movs	r0, r0
	...

080093d8 <__math_uflow>:
 80093d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80093e0 <__math_uflow+0x8>
 80093dc:	f7ff bfe0 	b.w	80093a0 <xflow>
 80093e0:	00000000 	.word	0x00000000
 80093e4:	10000000 	.word	0x10000000

080093e8 <__math_oflow>:
 80093e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80093f0 <__math_oflow+0x8>
 80093ec:	f7ff bfd8 	b.w	80093a0 <xflow>
 80093f0:	00000000 	.word	0x00000000
 80093f4:	70000000 	.word	0x70000000

080093f8 <memset>:
 80093f8:	4402      	add	r2, r0
 80093fa:	4603      	mov	r3, r0
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d100      	bne.n	8009402 <memset+0xa>
 8009400:	4770      	bx	lr
 8009402:	f803 1b01 	strb.w	r1, [r3], #1
 8009406:	e7f9      	b.n	80093fc <memset+0x4>

08009408 <__errno>:
 8009408:	4b01      	ldr	r3, [pc, #4]	@ (8009410 <__errno+0x8>)
 800940a:	6818      	ldr	r0, [r3, #0]
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	20000018 	.word	0x20000018

08009414 <__libc_init_array>:
 8009414:	b570      	push	{r4, r5, r6, lr}
 8009416:	4d0d      	ldr	r5, [pc, #52]	@ (800944c <__libc_init_array+0x38>)
 8009418:	4c0d      	ldr	r4, [pc, #52]	@ (8009450 <__libc_init_array+0x3c>)
 800941a:	1b64      	subs	r4, r4, r5
 800941c:	10a4      	asrs	r4, r4, #2
 800941e:	2600      	movs	r6, #0
 8009420:	42a6      	cmp	r6, r4
 8009422:	d109      	bne.n	8009438 <__libc_init_array+0x24>
 8009424:	4d0b      	ldr	r5, [pc, #44]	@ (8009454 <__libc_init_array+0x40>)
 8009426:	4c0c      	ldr	r4, [pc, #48]	@ (8009458 <__libc_init_array+0x44>)
 8009428:	f000 f818 	bl	800945c <_init>
 800942c:	1b64      	subs	r4, r4, r5
 800942e:	10a4      	asrs	r4, r4, #2
 8009430:	2600      	movs	r6, #0
 8009432:	42a6      	cmp	r6, r4
 8009434:	d105      	bne.n	8009442 <__libc_init_array+0x2e>
 8009436:	bd70      	pop	{r4, r5, r6, pc}
 8009438:	f855 3b04 	ldr.w	r3, [r5], #4
 800943c:	4798      	blx	r3
 800943e:	3601      	adds	r6, #1
 8009440:	e7ee      	b.n	8009420 <__libc_init_array+0xc>
 8009442:	f855 3b04 	ldr.w	r3, [r5], #4
 8009446:	4798      	blx	r3
 8009448:	3601      	adds	r6, #1
 800944a:	e7f2      	b.n	8009432 <__libc_init_array+0x1e>
 800944c:	08009518 	.word	0x08009518
 8009450:	08009518 	.word	0x08009518
 8009454:	08009518 	.word	0x08009518
 8009458:	0800951c 	.word	0x0800951c

0800945c <_init>:
 800945c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945e:	bf00      	nop
 8009460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009462:	bc08      	pop	{r3}
 8009464:	469e      	mov	lr, r3
 8009466:	4770      	bx	lr

08009468 <_fini>:
 8009468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946a:	bf00      	nop
 800946c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946e:	bc08      	pop	{r3}
 8009470:	469e      	mov	lr, r3
 8009472:	4770      	bx	lr
