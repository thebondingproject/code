
Temperature_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d30  08003d30  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d38  08003d38  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d38  08003d38  00013d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d3c  08003d3c  00013d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08003d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  200001a0  08003ee0  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08003ee0  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd1a  00000000  00000000  000201c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a26  00000000  00000000  0002cee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002e910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  0002f450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d1f  00000000  00000000  0002fef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c04b  00000000  00000000  00045c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e800  00000000  00000000  00051c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0462  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f30  00000000  00000000  000e04b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001a0 	.word	0x200001a0
 8000158:	00000000 	.word	0x00000000
 800015c:	08003cf4 	.word	0x08003cf4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001a4 	.word	0x200001a4
 8000178:	08003cf4 	.word	0x08003cf4

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800047a:	f000 fd48 	bl	8000f0e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800047e:	f000 f88f 	bl	80005a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000482:	f000 fa41 	bl	8000908 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000486:	f000 fa15 	bl	80008b4 <MX_USART2_UART_Init>
	MX_ADC_Init();
 800048a:	f000 f8d7 	bl	800063c <MX_ADC_Init>
	MX_TIM2_Init();
 800048e:	f000 f92d 	bl	80006ec <MX_TIM2_Init>
	MX_TIM3_Init();
 8000492:	f000 f99b 	bl	80007cc <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8000496:	483a      	ldr	r0, [pc, #232]	; (8000580 <main+0x10c>)
 8000498:	f002 fa6c 	bl	8002974 <HAL_TIM_Base_Start_IT>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <main+0x32>
	{
		/* Starting Error */
		Error_Handler();
 80004a2:	f000 fbad 	bl	8000c00 <Error_Handler>
	}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80004a6:	2104      	movs	r1, #4
 80004a8:	4836      	ldr	r0, [pc, #216]	; (8000584 <main+0x110>)
 80004aa:	f002 fb45 	bl	8002b38 <HAL_TIM_PWM_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_ADC_Start(&hadc);
 80004ae:	4836      	ldr	r0, [pc, #216]	; (8000588 <main+0x114>)
 80004b0:	f000 fee2 	bl	8001278 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1000);
 80004b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004b8:	4833      	ldr	r0, [pc, #204]	; (8000588 <main+0x114>)
 80004ba:	f000 ff3d 	bl	8001338 <HAL_ADC_PollForConversion>

		ADC_value = HAL_ADC_GetValue(&hadc);
 80004be:	4832      	ldr	r0, [pc, #200]	; (8000588 <main+0x114>)
 80004c0:	f000 ffca 	bl	8001458 <HAL_ADC_GetValue>
 80004c4:	4603      	mov	r3, r0
 80004c6:	4a31      	ldr	r2, [pc, #196]	; (800058c <main+0x118>)
 80004c8:	6013      	str	r3, [r2, #0]
		//	ADC_value = 195;

		//if(ADC_value > 3204)
			//ADC_value = 3204;

		if(ADC_value <  ADC_MIN) {
 80004ca:	4b30      	ldr	r3, [pc, #192]	; (800058c <main+0x118>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 80004d2:	d204      	bcs.n	80004de <main+0x6a>
			ADC_value = ADC_MIN;
 80004d4:	4b2d      	ldr	r3, [pc, #180]	; (800058c <main+0x118>)
 80004d6:	f44f 7290 	mov.w	r2, #288	; 0x120
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	e008      	b.n	80004f0 <main+0x7c>
		}
		else if(ADC_value > ADC_MAX) {
 80004de:	4b2b      	ldr	r3, [pc, #172]	; (800058c <main+0x118>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 80004e6:	d903      	bls.n	80004f0 <main+0x7c>
			ADC_value = ADC_MAX;
 80004e8:	4b28      	ldr	r3, [pc, #160]	; (800058c <main+0x118>)
 80004ea:	f44f 6258 	mov.w	r2, #3456	; 0xd80
 80004ee:	601a      	str	r2, [r3, #0]

		//Read_temp = Tlook[ADC_value - 195];  //209

		// Interpolating...

		int16_t adc_index = (ADC_value >> DECIMATION) - (ADC_MIN >> DECIMATION);
 80004f0:	4b26      	ldr	r3, [pc, #152]	; (800058c <main+0x118>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	095b      	lsrs	r3, r3, #5
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	3b09      	subs	r3, #9
 80004fa:	b29b      	uxth	r3, r3
 80004fc:	81fb      	strh	r3, [r7, #14]

		int32_t delta_T = Tlook[adc_index + 1] - Tlook[adc_index];
 80004fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000502:	3301      	adds	r3, #1
 8000504:	4a22      	ldr	r2, [pc, #136]	; (8000590 <main+0x11c>)
 8000506:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800050a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800050e:	4920      	ldr	r1, [pc, #128]	; (8000590 <main+0x11c>)
 8000510:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	60bb      	str	r3, [r7, #8]

	    int16_t delta_ADC = ADC_value - ((adc_index + (ADC_MIN >> DECIMATION)) << DECIMATION);
 8000518:	4b1c      	ldr	r3, [pc, #112]	; (800058c <main+0x118>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	b29a      	uxth	r2, r3
 800051e:	89fb      	ldrh	r3, [r7, #14]
 8000520:	3309      	adds	r3, #9
 8000522:	b29b      	uxth	r3, r3
 8000524:	015b      	lsls	r3, r3, #5
 8000526:	b29b      	uxth	r3, r3
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	b29b      	uxth	r3, r3
 800052c:	80fb      	strh	r3, [r7, #6]

	    Read_temp = ((delta_T * delta_ADC) + (Tlook[adc_index] << DECIMATION)) >> DECIMATION;
 800052e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000532:	68ba      	ldr	r2, [r7, #8]
 8000534:	fb02 f203 	mul.w	r2, r2, r3
 8000538:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800053c:	4914      	ldr	r1, [pc, #80]	; (8000590 <main+0x11c>)
 800053e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000542:	015b      	lsls	r3, r3, #5
 8000544:	4413      	add	r3, r2
 8000546:	115b      	asrs	r3, r3, #5
 8000548:	4a12      	ldr	r2, [pc, #72]	; (8000594 <main+0x120>)
 800054a:	6013      	str	r3, [r2, #0]


		uint8_t rx_buff[4] = {};
 800054c:	2300      	movs	r3, #0
 800054e:	603b      	str	r3, [r7, #0]

		if(HAL_UART_Receive(&huart2, rx_buff, 4, 1000) == HAL_OK) //if transfer is successful
 8000550:	4639      	mov	r1, r7
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	2204      	movs	r2, #4
 8000558:	480f      	ldr	r0, [pc, #60]	; (8000598 <main+0x124>)
 800055a:	f003 f9ba 	bl	80038d2 <HAL_UART_Receive>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d1a4      	bne.n	80004ae <main+0x3a>
		{

			setpoint = (rx_buff[3] << 24) + (rx_buff[2] << 16) + (rx_buff[1] << 8) + rx_buff[0];
 8000564:	78fb      	ldrb	r3, [r7, #3]
 8000566:	061a      	lsls	r2, r3, #24
 8000568:	78bb      	ldrb	r3, [r7, #2]
 800056a:	041b      	lsls	r3, r3, #16
 800056c:	441a      	add	r2, r3
 800056e:	787b      	ldrb	r3, [r7, #1]
 8000570:	021b      	lsls	r3, r3, #8
 8000572:	4413      	add	r3, r2
 8000574:	783a      	ldrb	r2, [r7, #0]
 8000576:	4413      	add	r3, r2
 8000578:	4a08      	ldr	r2, [pc, #32]	; (800059c <main+0x128>)
 800057a:	6013      	str	r3, [r2, #0]
	{
 800057c:	e797      	b.n	80004ae <main+0x3a>
 800057e:	bf00      	nop
 8000580:	2000028c 	.word	0x2000028c
 8000584:	2000023c 	.word	0x2000023c
 8000588:	2000031c 	.word	0x2000031c
 800058c:	2000027c 	.word	0x2000027c
 8000590:	20000004 	.word	0x20000004
 8000594:	20000318 	.word	0x20000318
 8000598:	200002cc 	.word	0x200002cc
 800059c:	20000000 	.word	0x20000000

080005a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b092      	sub	sp, #72	; 0x48
 80005a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	2234      	movs	r2, #52	; 0x34
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fb98 	bl	8003ce4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	463b      	mov	r3, r7
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c2:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <SystemClock_Config+0x98>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80005ca:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <SystemClock_Config+0x98>)
 80005cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005d0:	6013      	str	r3, [r2, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d2:	2302      	movs	r3, #2
 80005d4:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d6:	2301      	movs	r3, #1
 80005d8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005da:	2310      	movs	r3, #16
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e2:	2300      	movs	r3, #0
 80005e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80005e6:	2300      	movs	r3, #0
 80005e8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80005ea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80005ee:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 fbb9 	bl	8001d6c <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x64>
	{
		Error_Handler();
 8000600:	f000 fafe 	bl	8000c00 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2303      	movs	r3, #3
 800060a:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000614:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061a:	463b      	mov	r3, r7
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fed4 	bl	80023cc <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x8e>
	{
		Error_Handler();
 800062a:	f000 fae9 	bl	8000c00 <Error_Handler>
	}
}
 800062e:	bf00      	nop
 8000630:	3748      	adds	r7, #72	; 0x48
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40007000 	.word	0x40007000

0800063c <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC_Init 1 */

	/* USER CODE END ADC_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <MX_ADC_Init+0xa8>)
 800064e:	4a26      	ldr	r2, [pc, #152]	; (80006e8 <MX_ADC_Init+0xac>)
 8000650:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000652:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <MX_ADC_Init+0xa8>)
 8000654:	2200      	movs	r2, #0
 8000656:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <MX_ADC_Init+0xa8>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065e:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <MX_ADC_Init+0xa8>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_ADC_Init+0xa8>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <MX_ADC_Init+0xa8>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <MX_ADC_Init+0xa8>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_ADC_Init+0xa8>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
	hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <MX_ADC_Init+0xa8>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
	hadc.Init.ContinuousConvMode = DISABLE;
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_ADC_Init+0xa8>)
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc.Init.NbrOfConversion = 1;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_ADC_Init+0xa8>)
 800068c:	2201      	movs	r2, #1
 800068e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_ADC_Init+0xa8>)
 8000692:	2200      	movs	r2, #0
 8000694:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_ADC_Init+0xa8>)
 800069a:	2210      	movs	r2, #16
 800069c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_ADC_Init+0xa8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.DMAContinuousRequests = DISABLE;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_ADC_Init+0xa8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006ac:	480d      	ldr	r0, [pc, #52]	; (80006e4 <MX_ADC_Init+0xa8>)
 80006ae:	f000 fc9d 	bl	8000fec <HAL_ADC_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC_Init+0x80>
	{
		Error_Handler();
 80006b8:	f000 faa2 	bl	8000c00 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c0:	2301      	movs	r3, #1
 80006c2:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	4619      	mov	r1, r3
 80006cc:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_ADC_Init+0xa8>)
 80006ce:	f000 fecf 	bl	8001470 <HAL_ADC_ConfigChannel>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC_Init+0xa0>
	{
		Error_Handler();
 80006d8:	f000 fa92 	bl	8000c00 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	2000031c 	.word	0x2000031c
 80006e8:	40012400 	.word	0x40012400

080006ec <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f2:	f107 0318 	add.w	r3, r7, #24
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000716:	4b2c      	ldr	r3, [pc, #176]	; (80007c8 <MX_TIM2_Init+0xdc>)
 8000718:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800071c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1600-1;
 800071e:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <MX_TIM2_Init+0xdc>)
 8000720:	f240 623f 	movw	r2, #1599	; 0x63f
 8000724:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <MX_TIM2_Init+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000-1;
 800072c:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <MX_TIM2_Init+0xdc>)
 800072e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000732:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <MX_TIM2_Init+0xdc>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <MX_TIM2_Init+0xdc>)
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000740:	4821      	ldr	r0, [pc, #132]	; (80007c8 <MX_TIM2_Init+0xdc>)
 8000742:	f002 f8d7 	bl	80028f4 <HAL_TIM_Base_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM2_Init+0x64>
	{
		Error_Handler();
 800074c:	f000 fa58 	bl	8000c00 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000756:	f107 0318 	add.w	r3, r7, #24
 800075a:	4619      	mov	r1, r3
 800075c:	481a      	ldr	r0, [pc, #104]	; (80007c8 <MX_TIM2_Init+0xdc>)
 800075e:	f002 fc7b 	bl	8003058 <HAL_TIM_ConfigClockSource>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM2_Init+0x80>
	{
		Error_Handler();
 8000768:	f000 fa4a 	bl	8000c00 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800076c:	4816      	ldr	r0, [pc, #88]	; (80007c8 <MX_TIM2_Init+0xdc>)
 800076e:	f002 f953 	bl	8002a18 <HAL_TIM_OC_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x90>
	{
		Error_Handler();
 8000778:	f000 fa42 	bl	8000c00 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	4619      	mov	r1, r3
 800078a:	480f      	ldr	r0, [pc, #60]	; (80007c8 <MX_TIM2_Init+0xdc>)
 800078c:	f002 ff70 	bl	8003670 <HAL_TIMEx_MasterConfigSynchronization>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM2_Init+0xae>
	{
		Error_Handler();
 8000796:	f000 fa33 	bl	8000c00 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007aa:	463b      	mov	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_TIM2_Init+0xdc>)
 80007b2:	f002 fb33 	bl	8002e1c <HAL_TIM_OC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0xd4>
	{
		Error_Handler();
 80007bc:	f000 fa20 	bl	8000c00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	3728      	adds	r7, #40	; 0x28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000028c 	.word	0x2000028c

080007cc <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d2:	f107 0318 	add.w	r3, r7, #24
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80007ea:	463b      	mov	r3, r7
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80007f6:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <MX_TIM3_Init+0xe0>)
 80007f8:	4a2d      	ldr	r2, [pc, #180]	; (80008b0 <MX_TIM3_Init+0xe4>)
 80007fa:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 16-1;
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <MX_TIM3_Init+0xe0>)
 80007fe:	220f      	movs	r2, #15
 8000800:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <MX_TIM3_Init+0xe0>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = OLMAX-1;
 8000808:	4b28      	ldr	r3, [pc, #160]	; (80008ac <MX_TIM3_Init+0xe0>)
 800080a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800080e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000810:	4b26      	ldr	r3, [pc, #152]	; (80008ac <MX_TIM3_Init+0xe0>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000816:	4b25      	ldr	r3, [pc, #148]	; (80008ac <MX_TIM3_Init+0xe0>)
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800081c:	4823      	ldr	r0, [pc, #140]	; (80008ac <MX_TIM3_Init+0xe0>)
 800081e:	f002 f869 	bl	80028f4 <HAL_TIM_Base_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM3_Init+0x60>
	{
		Error_Handler();
 8000828:	f000 f9ea 	bl	8000c00 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000830:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000832:	f107 0318 	add.w	r3, r7, #24
 8000836:	4619      	mov	r1, r3
 8000838:	481c      	ldr	r0, [pc, #112]	; (80008ac <MX_TIM3_Init+0xe0>)
 800083a:	f002 fc0d 	bl	8003058 <HAL_TIM_ConfigClockSource>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM3_Init+0x7c>
	{
		Error_Handler();
 8000844:	f000 f9dc 	bl	8000c00 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000848:	4818      	ldr	r0, [pc, #96]	; (80008ac <MX_TIM3_Init+0xe0>)
 800084a:	f002 f92d 	bl	8002aa8 <HAL_TIM_PWM_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8000854:	f000 f9d4 	bl	8000c00 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4619      	mov	r1, r3
 8000866:	4811      	ldr	r0, [pc, #68]	; (80008ac <MX_TIM3_Init+0xe0>)
 8000868:	f002 ff02 	bl	8003670 <HAL_TIMEx_MasterConfigSynchronization>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM3_Init+0xaa>
	{
		Error_Handler();
 8000872:	f000 f9c5 	bl	8000c00 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000876:	2360      	movs	r3, #96	; 0x60
 8000878:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000886:	463b      	mov	r3, r7
 8000888:	2204      	movs	r2, #4
 800088a:	4619      	mov	r1, r3
 800088c:	4807      	ldr	r0, [pc, #28]	; (80008ac <MX_TIM3_Init+0xe0>)
 800088e:	f002 fb21 	bl	8002ed4 <HAL_TIM_PWM_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM3_Init+0xd0>
	{
		Error_Handler();
 8000898:	f000 f9b2 	bl	8000c00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800089c:	4803      	ldr	r0, [pc, #12]	; (80008ac <MX_TIM3_Init+0xe0>)
 800089e:	f000 fa5d 	bl	8000d5c <HAL_TIM_MspPostInit>

}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000023c 	.word	0x2000023c
 80008b0:	40000400 	.word	0x40000400

080008b4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <MX_USART2_UART_Init+0x50>)
 80008bc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ec:	f002 ff1e 	bl	800372c <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80008f6:	f000 f983 	bl	8000c00 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200002cc 	.word	0x200002cc
 8000904:	40004400 	.word	0x40004400

08000908 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <MX_GPIO_Init+0xc0>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	4a29      	ldr	r2, [pc, #164]	; (80009c8 <MX_GPIO_Init+0xc0>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	61d3      	str	r3, [r2, #28]
 800092a:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <MX_GPIO_Init+0xc0>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MX_GPIO_Init+0xc0>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a23      	ldr	r2, [pc, #140]	; (80009c8 <MX_GPIO_Init+0xc0>)
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	61d3      	str	r3, [r2, #28]
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <MX_GPIO_Init+0xc0>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	f003 0320 	and.w	r3, r3, #32
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_GPIO_Init+0xc0>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4a1d      	ldr	r2, [pc, #116]	; (80009c8 <MX_GPIO_Init+0xc0>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	61d3      	str	r3, [r2, #28]
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_GPIO_Init+0xc0>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_GPIO_Init+0xc0>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <MX_GPIO_Init+0xc0>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	61d3      	str	r3, [r2, #28]
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_GPIO_Init+0xc0>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2120      	movs	r1, #32
 8000982:	4812      	ldr	r0, [pc, #72]	; (80009cc <MX_GPIO_Init+0xc4>)
 8000984:	f001 f9da 	bl	8001d3c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800098e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000992:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	480c      	ldr	r0, [pc, #48]	; (80009d0 <MX_GPIO_Init+0xc8>)
 80009a0:	f001 f83c 	bl	8001a1c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80009a4:	2320      	movs	r3, #32
 80009a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_GPIO_Init+0xc4>)
 80009bc:	f001 f82e 	bl	8001a1c <HAL_GPIO_Init>

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020800 	.word	0x40020800

080009d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	if(htim == &htim2) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a72      	ldr	r2, [pc, #456]	; (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	f040 80dc 	bne.w	8000b9e <HAL_TIM_PeriodElapsedCallback+0x1ca>

		/* PI Controller */

		//error = setpoint - feedback_pred;
		PI_error = setpoint - Read_temp;
 80009e6:	4b71      	ldr	r3, [pc, #452]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4b71      	ldr	r3, [pc, #452]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	4a70      	ldr	r2, [pc, #448]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80009f2:	6013      	str	r3, [r2, #0]

		proportional = Kp * PI_error;
 80009f4:	225a      	movs	r2, #90	; 0x5a
 80009f6:	4b6f      	ldr	r3, [pc, #444]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	fb03 f302 	mul.w	r3, r3, r2
 80009fe:	4a6e      	ldr	r2, [pc, #440]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000a00:	6013      	str	r3, [r2, #0]

		// Dynamic Anti-wind-up limits calculation
		if (PLMAX > proportional && proportional >= 0) {
 8000a02:	4b6d      	ldr	r3, [pc, #436]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a0a:	da0a      	bge.n	8000a22 <HAL_TIM_PeriodElapsedCallback+0x4e>
 8000a0c:	4b6a      	ldr	r3, [pc, #424]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db06      	blt.n	8000a22 <HAL_TIM_PeriodElapsedCallback+0x4e>
			limMaxInt = PLMAX - proportional;
 8000a14:	4b68      	ldr	r3, [pc, #416]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000a1c:	4a67      	ldr	r2, [pc, #412]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	e002      	b.n	8000a28 <HAL_TIM_PeriodElapsedCallback+0x54>
		}
		else {
			limMaxInt = 0;
 8000a22:	4b66      	ldr	r3, [pc, #408]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
		}

		integral = integral + Ki * Sample_time * (PI_prev_error + PI_error);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	fb02 f303 	mul.w	r3, r2, r3
 8000a30:	4a63      	ldr	r2, [pc, #396]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000a32:	6811      	ldr	r1, [r2, #0]
 8000a34:	4a5f      	ldr	r2, [pc, #380]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000a36:	6812      	ldr	r2, [r2, #0]
 8000a38:	440a      	add	r2, r1
 8000a3a:	fb02 f203 	mul.w	r2, r2, r3
 8000a3e:	4b61      	ldr	r3, [pc, #388]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a5f      	ldr	r2, [pc, #380]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000a46:	6013      	str	r3, [r2, #0]
		PI_prev_error = PI_error;
 8000a48:	4b5a      	ldr	r3, [pc, #360]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a5c      	ldr	r2, [pc, #368]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000a4e:	6013      	str	r3, [r2, #0]

		// Anti-wind-up integrator limits clamping
		if (integral > limMaxInt) {
 8000a50:	4b5c      	ldr	r3, [pc, #368]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b59      	ldr	r3, [pc, #356]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	dd04      	ble.n	8000a66 <HAL_TIM_PeriodElapsedCallback+0x92>
			integral = limMaxInt;
 8000a5c:	4b57      	ldr	r3, [pc, #348]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a58      	ldr	r2, [pc, #352]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	e009      	b.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0xa6>
		}
		else if (integral < limMinInt) {
 8000a66:	4b57      	ldr	r3, [pc, #348]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4b57      	ldr	r3, [pc, #348]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	da03      	bge.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0xa6>
			integral = limMinInt;
 8000a72:	4b55      	ldr	r3, [pc, #340]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a53      	ldr	r2, [pc, #332]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000a78:	6013      	str	r3, [r2, #0]
		}

		// output to PWM value conditioning
		PI_output = ((integral + proportional) >> 10) * 50;
 8000a7a:	4b52      	ldr	r3, [pc, #328]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	4b4e      	ldr	r3, [pc, #312]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	129b      	asrs	r3, r3, #10
 8000a86:	2232      	movs	r2, #50	; 0x32
 8000a88:	fb02 f303 	mul.w	r3, r2, r3
 8000a8c:	4a4f      	ldr	r2, [pc, #316]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000a8e:	6013      	str	r3, [r2, #0]

		if (PI_output > OLMAX) {
 8000a90:	4b4e      	ldr	r3, [pc, #312]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a98:	dd04      	ble.n	8000aa4 <HAL_TIM_PeriodElapsedCallback+0xd0>
			PI_output = 1000;
 8000a9a:	4b4c      	ldr	r3, [pc, #304]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000a9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	e006      	b.n	8000ab2 <HAL_TIM_PeriodElapsedCallback+0xde>
		}
		else if (PI_output < 0) {
 8000aa4:	4b49      	ldr	r3, [pc, #292]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	da02      	bge.n	8000ab2 <HAL_TIM_PeriodElapsedCallback+0xde>
			PI_output = 0;
 8000aac:	4b47      	ldr	r3, [pc, #284]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
		}
		/* End PI Controller */

		TIM3->CCR2 = PI_output;
 8000ab2:	4b46      	ldr	r3, [pc, #280]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4b46      	ldr	r3, [pc, #280]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000ab8:	639a      	str	r2, [r3, #56]	; 0x38

		/* Data Logger Serial transmission */

		uint8_t tx_buff[4] = {(ADC_value >> 24) & 0x000000FF, (ADC_value >> 16) & 0x000000FF, (ADC_value >> 8) & 0x000000FF, ADC_value & 0x000000FF};
 8000aba:	4b46      	ldr	r3, [pc, #280]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	0e1b      	lsrs	r3, r3, #24
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	733b      	strb	r3, [r7, #12]
 8000ac4:	4b43      	ldr	r3, [pc, #268]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	0c1b      	lsrs	r3, r3, #16
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	737b      	strb	r3, [r7, #13]
 8000ace:	4b41      	ldr	r3, [pc, #260]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	0a1b      	lsrs	r3, r3, #8
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	73bb      	strb	r3, [r7, #14]
 8000ad8:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	73fb      	strb	r3, [r7, #15]
		//uint8_t tx_buff[4] = {(Read_temp >> 24) & 0x000000FF, (Read_temp >> 16) & 0x000000FF, (Read_temp >> 8) & 0x000000FF, Read_temp & 0x000000FF};
		HAL_UART_Transmit(&huart2, tx_buff, 4, 1000);
 8000ae0:	f107 010c 	add.w	r1, r7, #12
 8000ae4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae8:	2204      	movs	r2, #4
 8000aea:	483b      	ldr	r0, [pc, #236]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000aec:	f002 fe6e 	bl	80037cc <HAL_UART_Transmit>

		/* End Data Logger Serial transmission */


		// Output diventa 2^10
		output2 = PI_output * 20;
 8000af0:	4b36      	ldr	r3, [pc, #216]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4613      	mov	r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4413      	add	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000b00:	601a      	str	r2, [r3, #0]

		// 2^20 -> 2^10
		in_model = (((output2 * output2) >> 10) * 82) >> 10;
 8000b02:	4b36      	ldr	r3, [pc, #216]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a35      	ldr	r2, [pc, #212]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000b08:	6812      	ldr	r2, [r2, #0]
 8000b0a:	fb02 f303 	mul.w	r3, r2, r3
 8000b0e:	129b      	asrs	r3, r3, #10
 8000b10:	2252      	movs	r2, #82	; 0x52
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	129b      	asrs	r3, r3, #10
 8000b18:	4a31      	ldr	r2, [pc, #196]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000b1a:	6013      	str	r3, [r2, #0]

		//L'uscita è 2^10
		out_model =  (out_model_prev * ad + bu * in_model + bd * in_model_prev) >> 16;
 8000b1c:	4b31      	ldr	r3, [pc, #196]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f64f 72c5 	movw	r2, #65477	; 0xffc5
 8000b24:	fb02 f203 	mul.w	r2, r2, r3
 8000b28:	21d1      	movs	r1, #209	; 0xd1
 8000b2a:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	fb03 f301 	mul.w	r3, r3, r1
 8000b32:	441a      	add	r2, r3
 8000b34:	21d1      	movs	r1, #209	; 0xd1
 8000b36:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	fb03 f301 	mul.w	r3, r3, r1
 8000b3e:	4413      	add	r3, r2
 8000b40:	141b      	asrs	r3, r3, #16
 8000b42:	4a2a      	ldr	r2, [pc, #168]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000b44:	6013      	str	r3, [r2, #0]

		in_model_prev = in_model;
 8000b46:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a27      	ldr	r2, [pc, #156]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000b4c:	6013      	str	r3, [r2, #0]
		out_model_prev = out_model;
 8000b4e:	4b27      	ldr	r3, [pc, #156]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a24      	ldr	r2, [pc, #144]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000b54:	6013      	str	r3, [r2, #0]

		// Prendo primo blocco
		out_delayed = delay_vect[index1];
 8000b56:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a26      	ldr	r2, [pc, #152]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b60:	4a25      	ldr	r2, [pc, #148]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000b62:	6013      	str	r3, [r2, #0]

		delay_vect[index1] = out_model;
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a20      	ldr	r2, [pc, #128]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000b6a:	6812      	ldr	r2, [r2, #0]
 8000b6c:	4921      	ldr	r1, [pc, #132]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		index1++;
 8000b72:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3301      	adds	r3, #1
 8000b78:	4a1d      	ldr	r2, [pc, #116]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000b7a:	6013      	str	r3, [r2, #0]

		if (index1 > 21)
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b15      	cmp	r3, #21
 8000b82:	d902      	bls.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x1b6>
			index1 = 0;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]


		 feedback_pred = Read_temp - out_delayed + out_model;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	1ad2      	subs	r2, r2, r3
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000b9c:	6013      	str	r3, [r2, #0]

	}
}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000028c 	.word	0x2000028c
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	20000318 	.word	0x20000318
 8000bb4:	20000288 	.word	0x20000288
 8000bb8:	20000284 	.word	0x20000284
 8000bbc:	200001c0 	.word	0x200001c0
 8000bc0:	200001bc 	.word	0x200001bc
 8000bc4:	20000370 	.word	0x20000370
 8000bc8:	200001c4 	.word	0x200001c4
 8000bcc:	20000238 	.word	0x20000238
 8000bd0:	40000400 	.word	0x40000400
 8000bd4:	2000027c 	.word	0x2000027c
 8000bd8:	200002cc 	.word	0x200002cc
 8000bdc:	20000314 	.word	0x20000314
 8000be0:	200001d0 	.word	0x200001d0
 8000be4:	200001cc 	.word	0x200001cc
 8000be8:	200001c8 	.word	0x200001c8
 8000bec:	200001d4 	.word	0x200001d4
 8000bf0:	20000230 	.word	0x20000230
 8000bf4:	200001d8 	.word	0x200001d8
 8000bf8:	20000280 	.word	0x20000280
 8000bfc:	20000234 	.word	0x20000234

08000c00 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c1c:	6253      	str	r3, [r2, #36]	; 0x24
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c2c:	6a1b      	ldr	r3, [r3, #32]
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6213      	str	r3, [r2, #32]
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c38:	6a1b      	ldr	r3, [r3, #32]
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	6253      	str	r3, [r2, #36]	; 0x24
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c5a:	2007      	movs	r0, #7
 8000c5c:	f000 fe9c 	bl	8001998 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a15      	ldr	r2, [pc, #84]	; (8000ce0 <HAL_ADC_MspInit+0x74>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d123      	bne.n	8000cd6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_ADC_MspInit+0x78>)
 8000c90:	6a1b      	ldr	r3, [r3, #32]
 8000c92:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <HAL_ADC_MspInit+0x78>)
 8000c94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c98:	6213      	str	r3, [r2, #32]
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_ADC_MspInit+0x78>)
 8000c9c:	6a1b      	ldr	r3, [r3, #32]
 8000c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <HAL_ADC_MspInit+0x78>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <HAL_ADC_MspInit+0x78>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	61d3      	str	r3, [r2, #28]
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <HAL_ADC_MspInit+0x78>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <HAL_ADC_MspInit+0x7c>)
 8000cd2:	f000 fea3 	bl	8001a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40012400 	.word	0x40012400
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000

08000cec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cfc:	d114      	bne.n	8000d28 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_TIM_Base_MspInit+0x68>)
 8000d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d02:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <HAL_TIM_Base_MspInit+0x68>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6253      	str	r3, [r2, #36]	; 0x24
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_TIM_Base_MspInit+0x68>)
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	201c      	movs	r0, #28
 8000d1c:	f000 fe47 	bl	80019ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d20:	201c      	movs	r0, #28
 8000d22:	f000 fe60 	bl	80019e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d26:	e010      	b.n	8000d4a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_TIM_Base_MspInit+0x6c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d10b      	bne.n	8000d4a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_TIM_Base_MspInit+0x68>)
 8000d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d36:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_TIM_Base_MspInit+0x68>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	6253      	str	r3, [r2, #36]	; 0x24
 8000d3e:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_TIM_Base_MspInit+0x68>)
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40000400 	.word	0x40000400

08000d5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <HAL_TIM_MspPostInit+0x64>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d11b      	bne.n	8000db6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_TIM_MspPostInit+0x68>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <HAL_TIM_MspPostInit+0x68>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	61d3      	str	r3, [r2, #28]
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_TIM_MspPostInit+0x68>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_TIM_MspPostInit+0x6c>)
 8000db2:	f000 fe33 	bl	8001a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3720      	adds	r7, #32
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40000400 	.word	0x40000400
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020800 	.word	0x40020800

08000dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <HAL_UART_MspInit+0x7c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d127      	bne.n	8000e3e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	4a16      	ldr	r2, [pc, #88]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df8:	6253      	str	r3, [r2, #36]	; 0x24
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	61d3      	str	r3, [r2, #28]
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e1e:	230c      	movs	r3, #12
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2e:	2307      	movs	r3, #7
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_UART_MspInit+0x84>)
 8000e3a:	f000 fdef 	bl	8001a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40004400 	.word	0x40004400
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <NMI_Handler+0x4>

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <MemManage_Handler+0x4>

08000e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9a:	f000 f88b 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <TIM2_IRQHandler+0x10>)
 8000eaa:	f001 fedb 	bl	8002c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */


  /* USER CODE END TIM2_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000028c 	.word	0x2000028c

08000eb8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec4:	f7ff fff8 	bl	8000eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eca:	490c      	ldr	r1, [pc, #48]	; (8000efc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	; (8000f00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a09      	ldr	r2, [pc, #36]	; (8000f04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ee0:	4c09      	ldr	r4, [pc, #36]	; (8000f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eee:	f002 fed5 	bl	8003c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ef2:	f7ff fabf 	bl	8000474 <main>
  bx lr
 8000ef6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8000f00:	08003d40 	.word	0x08003d40
  ldr r2, =_sbss
 8000f04:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8000f08:	20000378 	.word	0x20000378

08000f0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC1_IRQHandler>

08000f0e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 fd3d 	bl	8001998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 f80e 	bl	8000f40 <HAL_InitTick>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d002      	beq.n	8000f30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	71fb      	strb	r3, [r7, #7]
 8000f2e:	e001      	b.n	8000f34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f30:	f7ff fe6c 	bl	8000c0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f34:	79fb      	ldrb	r3, [r7, #7]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_InitTick+0x68>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d022      	beq.n	8000f9a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <HAL_InitTick+0x6c>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_InitTick+0x68>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 fd4a 	bl	8001a02 <HAL_SYSTICK_Config>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10f      	bne.n	8000f94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b0f      	cmp	r3, #15
 8000f78:	d809      	bhi.n	8000f8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f82:	f000 fd14 	bl	80019ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <HAL_InitTick+0x70>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	e007      	b.n	8000f9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e004      	b.n	8000f9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	e001      	b.n	8000f9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	2000019c 	.word	0x2000019c
 8000fac:	20000194 	.word	0x20000194
 8000fb0:	20000198 	.word	0x20000198

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <HAL_IncTick+0x1c>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <HAL_IncTick+0x1c>)
 8000fc4:	6013      	str	r3, [r2, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000374 	.word	0x20000374
 8000fd4:	2000019c 	.word	0x2000019c

08000fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b02      	ldr	r3, [pc, #8]	; (8000fe8 <HAL_GetTick+0x10>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	20000374 	.word	0x20000374

08000fec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08e      	sub	sp, #56	; 0x38
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e127      	b.n	800125c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	2b00      	cmp	r3, #0
 8001018:	d115      	bne.n	8001046 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001028:	4b8e      	ldr	r3, [pc, #568]	; (8001264 <HAL_ADC_Init+0x278>)
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	4a8d      	ldr	r2, [pc, #564]	; (8001264 <HAL_ADC_Init+0x278>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6213      	str	r3, [r2, #32]
 8001034:	4b8b      	ldr	r3, [pc, #556]	; (8001264 <HAL_ADC_Init+0x278>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff fe13 	bl	8000c6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	2b00      	cmp	r3, #0
 8001050:	f040 80ff 	bne.w	8001252 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001058:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800105c:	f023 0302 	bic.w	r3, r3, #2
 8001060:	f043 0202 	orr.w	r2, r3, #2
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001068:	4b7f      	ldr	r3, [pc, #508]	; (8001268 <HAL_ADC_Init+0x27c>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	497c      	ldr	r1, [pc, #496]	; (8001268 <HAL_ADC_Init+0x27c>)
 8001076:	4313      	orrs	r3, r2
 8001078:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001082:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800108a:	4619      	mov	r1, r3
 800108c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001090:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001092:	6a3b      	ldr	r3, [r7, #32]
 8001094:	fa93 f3a3 	rbit	r3, r3
 8001098:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fab3 f383 	clz	r3, r3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80010a6:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80010ac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010b4:	4619      	mov	r1, r3
 80010b6:	2302      	movs	r3, #2
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010bc:	fa93 f3a3 	rbit	r3, r3
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	fab3 f383 	clz	r3, r3
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80010ce:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80010d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010d2:	4313      	orrs	r3, r2
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010da:	2b10      	cmp	r3, #16
 80010dc:	d007      	beq.n	80010ee <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80010e6:	4313      	orrs	r3, r2
 80010e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ea:	4313      	orrs	r3, r2
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010f8:	2b40      	cmp	r3, #64	; 0x40
 80010fa:	d04f      	beq.n	800119c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001102:	4313      	orrs	r3, r2
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800110e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6912      	ldr	r2, [r2, #16]
 8001114:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001118:	d003      	beq.n	8001122 <HAL_ADC_Init+0x136>
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	6912      	ldr	r2, [r2, #16]
 800111e:	2a01      	cmp	r2, #1
 8001120:	d102      	bne.n	8001128 <HAL_ADC_Init+0x13c>
 8001122:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001126:	e000      	b.n	800112a <HAL_ADC_Init+0x13e>
 8001128:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800112a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800112c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800112e:	4313      	orrs	r3, r2
 8001130:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001138:	2b01      	cmp	r3, #1
 800113a:	d125      	bne.n	8001188 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001142:	2b00      	cmp	r3, #0
 8001144:	d114      	bne.n	8001170 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	3b01      	subs	r3, #1
 800114c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001150:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	fa92 f2a2 	rbit	r2, r2
 8001158:	617a      	str	r2, [r7, #20]
  return result;
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	fab2 f282 	clz	r2, r2
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	4093      	lsls	r3, r2
 8001164:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800116a:	4313      	orrs	r3, r2
 800116c:	633b      	str	r3, [r7, #48]	; 0x30
 800116e:	e00b      	b.n	8001188 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001174:	f043 0220 	orr.w	r2, r3, #32
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001180:	f043 0201 	orr.w	r2, r3, #1
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	4b37      	ldr	r3, [pc, #220]	; (800126c <HAL_ADC_Init+0x280>)
 8001190:	4013      	ands	r3, r2
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	6812      	ldr	r2, [r2, #0]
 8001196:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001198:	430b      	orrs	r3, r1
 800119a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	4b33      	ldr	r3, [pc, #204]	; (8001270 <HAL_ADC_Init+0x284>)
 80011a4:	4013      	ands	r3, r2
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	6812      	ldr	r2, [r2, #0]
 80011aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80011ac:	430b      	orrs	r3, r1
 80011ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011b8:	d003      	beq.n	80011c2 <HAL_ADC_Init+0x1d6>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d119      	bne.n	80011f6 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d0:	3b01      	subs	r3, #1
 80011d2:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80011d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	fa92 f2a2 	rbit	r2, r2
 80011de:	60fa      	str	r2, [r7, #12]
  return result;
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	fab2 f282 	clz	r2, r2
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	fa03 f202 	lsl.w	r2, r3, r2
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	631a      	str	r2, [r3, #48]	; 0x30
 80011f4:	e007      	b.n	8001206 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001204:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	4b19      	ldr	r3, [pc, #100]	; (8001274 <HAL_ADC_Init+0x288>)
 800120e:	4013      	ands	r3, r2
 8001210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001212:	429a      	cmp	r2, r3
 8001214:	d10b      	bne.n	800122e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001220:	f023 0303 	bic.w	r3, r3, #3
 8001224:	f043 0201 	orr.w	r2, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	64da      	str	r2, [r3, #76]	; 0x4c
 800122c:	e014      	b.n	8001258 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f023 0312 	bic.w	r3, r3, #18
 8001236:	f043 0210 	orr.w	r2, r3, #16
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001242:	f043 0201 	orr.w	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001250:	e002      	b.n	8001258 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001258:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800125c:	4618      	mov	r0, r3
 800125e:	3738      	adds	r7, #56	; 0x38
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40012700 	.word	0x40012700
 800126c:	fcfc16ff 	.word	0xfcfc16ff
 8001270:	c0fff189 	.word	0xc0fff189
 8001274:	bf80fffe 	.word	0xbf80fffe

08001278 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <HAL_ADC_Start+0x1a>
 800128e:	2302      	movs	r3, #2
 8001290:	e04e      	b.n	8001330 <HAL_ADC_Start+0xb8>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fa54 	bl	8001748 <ADC_Enable>
 80012a0:	4603      	mov	r3, r0
 80012a2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d141      	bne.n	800132e <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012b2:	f023 0301 	bic.w	r3, r3, #1
 80012b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d007      	beq.n	80012dc <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012e8:	d106      	bne.n	80012f8 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ee:	f023 0206 	bic.w	r2, r3, #6
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	651a      	str	r2, [r3, #80]	; 0x50
 80012f6:	e002      	b.n	80012fe <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800130e:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d107      	bne.n	800132e <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800132c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001354:	d113      	bne.n	800137e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001364:	d10b      	bne.n	800137e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f043 0220 	orr.w	r2, r3, #32
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e068      	b.n	8001450 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800137e:	f7ff fe2b 	bl	8000fd8 <HAL_GetTick>
 8001382:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001384:	e021      	b.n	80013ca <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138c:	d01d      	beq.n	80013ca <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d007      	beq.n	80013a4 <HAL_ADC_PollForConversion+0x6c>
 8001394:	f7ff fe20 	bl	8000fd8 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d212      	bcs.n	80013ca <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10b      	bne.n	80013ca <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	f043 0204 	orr.w	r2, r3, #4
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e042      	b.n	8001450 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0d6      	beq.n	8001386 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d104      	bne.n	80013ea <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f06f 0212 	mvn.w	r2, #18
 80013e8:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d124      	bne.n	800144e <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800140a:	2b00      	cmp	r3, #0
 800140c:	d11f      	bne.n	800144e <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001426:	2b00      	cmp	r3, #0
 8001428:	d111      	bne.n	800144e <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d105      	bne.n	800144e <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f043 0201 	orr.w	r2, r3, #1
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x20>
 800148c:	2302      	movs	r3, #2
 800148e:	e14f      	b.n	8001730 <HAL_ADC_ConfigChannel+0x2c0>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b06      	cmp	r3, #6
 800149e:	d81c      	bhi.n	80014da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	3b05      	subs	r3, #5
 80014b2:	221f      	movs	r2, #31
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	4019      	ands	r1, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	3b05      	subs	r3, #5
 80014cc:	fa00 f203 	lsl.w	r2, r0, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
 80014d8:	e07e      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b0c      	cmp	r3, #12
 80014e0:	d81c      	bhi.n	800151c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	3b23      	subs	r3, #35	; 0x23
 80014f4:	221f      	movs	r2, #31
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	4019      	ands	r1, r3
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	3b23      	subs	r3, #35	; 0x23
 800150e:	fa00 f203 	lsl.w	r2, r0, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	63da      	str	r2, [r3, #60]	; 0x3c
 800151a:	e05d      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b12      	cmp	r3, #18
 8001522:	d81c      	bhi.n	800155e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b41      	subs	r3, #65	; 0x41
 8001536:	221f      	movs	r2, #31
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	4019      	ands	r1, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	3b41      	subs	r3, #65	; 0x41
 8001550:	fa00 f203 	lsl.w	r2, r0, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	639a      	str	r2, [r3, #56]	; 0x38
 800155c:	e03c      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b18      	cmp	r3, #24
 8001564:	d81c      	bhi.n	80015a0 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3b5f      	subs	r3, #95	; 0x5f
 8001578:	221f      	movs	r2, #31
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	4019      	ands	r1, r3
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	3b5f      	subs	r3, #95	; 0x5f
 8001592:	fa00 f203 	lsl.w	r2, r0, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
 800159e:	e01b      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	3b7d      	subs	r3, #125	; 0x7d
 80015b2:	221f      	movs	r2, #31
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	4019      	ands	r1, r3
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	3b7d      	subs	r3, #125	; 0x7d
 80015cc:	fa00 f203 	lsl.w	r2, r0, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b09      	cmp	r3, #9
 80015de:	d81a      	bhi.n	8001616 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6959      	ldr	r1, [r3, #20]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	2207      	movs	r2, #7
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	4019      	ands	r1, r3
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	6898      	ldr	r0, [r3, #8]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	fa00 f203 	lsl.w	r2, r0, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	615a      	str	r2, [r3, #20]
 8001614:	e05d      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b13      	cmp	r3, #19
 800161c:	d81c      	bhi.n	8001658 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6919      	ldr	r1, [r3, #16]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	3b1e      	subs	r3, #30
 8001630:	2207      	movs	r2, #7
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	4019      	ands	r1, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	6898      	ldr	r0, [r3, #8]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	3b1e      	subs	r3, #30
 800164a:	fa00 f203 	lsl.w	r2, r0, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	611a      	str	r2, [r3, #16]
 8001656:	e03c      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b1d      	cmp	r3, #29
 800165e:	d81c      	bhi.n	800169a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68d9      	ldr	r1, [r3, #12]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	4413      	add	r3, r2
 8001670:	3b3c      	subs	r3, #60	; 0x3c
 8001672:	2207      	movs	r2, #7
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	4019      	ands	r1, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	6898      	ldr	r0, [r3, #8]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	3b3c      	subs	r3, #60	; 0x3c
 800168c:	fa00 f203 	lsl.w	r2, r0, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	e01b      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	3b5a      	subs	r3, #90	; 0x5a
 80016ac:	2207      	movs	r2, #7
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	4019      	ands	r1, r3
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	6898      	ldr	r0, [r3, #8]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	3b5a      	subs	r3, #90	; 0x5a
 80016c6:	fa00 f203 	lsl.w	r2, r0, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b10      	cmp	r3, #16
 80016d8:	d003      	beq.n	80016e2 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016de:	2b11      	cmp	r3, #17
 80016e0:	d121      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_ADC_ConfigChannel+0x2cc>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d11b      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80016ee:	4b13      	ldr	r3, [pc, #76]	; (800173c <HAL_ADC_ConfigChannel+0x2cc>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4a12      	ldr	r2, [pc, #72]	; (800173c <HAL_ADC_ConfigChannel+0x2cc>)
 80016f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016f8:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b10      	cmp	r3, #16
 8001700:	d111      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_ADC_ConfigChannel+0x2d0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <HAL_ADC_ConfigChannel+0x2d4>)
 8001708:	fba2 2303 	umull	r2, r3, r2, r3
 800170c:	0c9a      	lsrs	r2, r3, #18
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001718:	e002      	b.n	8001720 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	3b01      	subs	r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f9      	bne.n	800171a <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800172e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40012700 	.word	0x40012700
 8001740:	20000194 	.word	0x20000194
 8001744:	431bde83 	.word	0x431bde83

08001748 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001762:	2b40      	cmp	r3, #64	; 0x40
 8001764:	d043      	beq.n	80017ee <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f042 0201 	orr.w	r2, r2, #1
 8001774:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <ADC_Enable+0xb0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a20      	ldr	r2, [pc, #128]	; (80017fc <ADC_Enable+0xb4>)
 800177c:	fba2 2303 	umull	r2, r3, r2, r3
 8001780:	0c9a      	lsrs	r2, r3, #18
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800178a:	e002      	b.n	8001792 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	3b01      	subs	r3, #1
 8001790:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f9      	bne.n	800178c <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001798:	f7ff fc1e 	bl	8000fd8 <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800179e:	e01f      	b.n	80017e0 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80017a0:	f7ff fc1a 	bl	8000fd8 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d918      	bls.n	80017e0 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b8:	2b40      	cmp	r3, #64	; 0x40
 80017ba:	d011      	beq.n	80017e0 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c0:	f043 0210 	orr.w	r2, r3, #16
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017cc:	f043 0201 	orr.w	r2, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e007      	b.n	80017f0 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ea:	2b40      	cmp	r3, #64	; 0x40
 80017ec:	d1d8      	bne.n	80017a0 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000194 	.word	0x20000194
 80017fc:	431bde83 	.word	0x431bde83

08001800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800181c:	4013      	ands	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800182c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001832:	4a04      	ldr	r2, [pc, #16]	; (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	60d3      	str	r3, [r2, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <__NVIC_GetPriorityGrouping+0x18>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	f003 0307 	and.w	r3, r3, #7
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	2b00      	cmp	r3, #0
 8001874:	db0b      	blt.n	800188e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	4906      	ldr	r1, [pc, #24]	; (8001898 <__NVIC_EnableIRQ+0x34>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	2001      	movs	r0, #1
 8001886:	fa00 f202 	lsl.w	r2, r0, r2
 800188a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100

0800189c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	db0a      	blt.n	80018c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	490c      	ldr	r1, [pc, #48]	; (80018e8 <__NVIC_SetPriority+0x4c>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	440b      	add	r3, r1
 80018c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c4:	e00a      	b.n	80018dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4908      	ldr	r1, [pc, #32]	; (80018ec <__NVIC_SetPriority+0x50>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	3b04      	subs	r3, #4
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	440b      	add	r3, r1
 80018da:	761a      	strb	r2, [r3, #24]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000e100 	.word	0xe000e100
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	; 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f1c3 0307 	rsb	r3, r3, #7
 800190a:	2b04      	cmp	r3, #4
 800190c:	bf28      	it	cs
 800190e:	2304      	movcs	r3, #4
 8001910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3304      	adds	r3, #4
 8001916:	2b06      	cmp	r3, #6
 8001918:	d902      	bls.n	8001920 <NVIC_EncodePriority+0x30>
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3b03      	subs	r3, #3
 800191e:	e000      	b.n	8001922 <NVIC_EncodePriority+0x32>
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001938:	f04f 31ff 	mov.w	r1, #4294967295
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43d9      	mvns	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	4313      	orrs	r3, r2
         );
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	; 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001964:	d301      	bcc.n	800196a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001966:	2301      	movs	r3, #1
 8001968:	e00f      	b.n	800198a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <SysTick_Config+0x40>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001972:	210f      	movs	r1, #15
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	f7ff ff90 	bl	800189c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <SysTick_Config+0x40>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001982:	4b04      	ldr	r3, [pc, #16]	; (8001994 <SysTick_Config+0x40>)
 8001984:	2207      	movs	r2, #7
 8001986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	e000e010 	.word	0xe000e010

08001998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ff2d 	bl	8001800 <__NVIC_SetPriorityGrouping>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c0:	f7ff ff42 	bl	8001848 <__NVIC_GetPriorityGrouping>
 80019c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	6978      	ldr	r0, [r7, #20]
 80019cc:	f7ff ff90 	bl	80018f0 <NVIC_EncodePriority>
 80019d0:	4602      	mov	r2, r0
 80019d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff5f 	bl	800189c <__NVIC_SetPriority>
}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff35 	bl	8001864 <__NVIC_EnableIRQ>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffa2 	bl	8001954 <SysTick_Config>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a32:	e160      	b.n	8001cf6 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2101      	movs	r1, #1
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	4013      	ands	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8152 	beq.w	8001cf0 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d005      	beq.n	8001a64 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d130      	bne.n	8001ac6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	f003 0201 	and.w	r2, r3, #1
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d017      	beq.n	8001b02 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	2203      	movs	r2, #3
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d123      	bne.n	8001b56 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	08da      	lsrs	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	220f      	movs	r2, #15
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	08da      	lsrs	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3208      	adds	r2, #8
 8001b50:	6939      	ldr	r1, [r7, #16]
 8001b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0203 	and.w	r2, r3, #3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80ac 	beq.w	8001cf0 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b98:	4b5e      	ldr	r3, [pc, #376]	; (8001d14 <HAL_GPIO_Init+0x2f8>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4a5d      	ldr	r2, [pc, #372]	; (8001d14 <HAL_GPIO_Init+0x2f8>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6213      	str	r3, [r2, #32]
 8001ba4:	4b5b      	ldr	r3, [pc, #364]	; (8001d14 <HAL_GPIO_Init+0x2f8>)
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bb0:	4a59      	ldr	r2, [pc, #356]	; (8001d18 <HAL_GPIO_Init+0x2fc>)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a51      	ldr	r2, [pc, #324]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d025      	beq.n	8001c28 <HAL_GPIO_Init+0x20c>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a50      	ldr	r2, [pc, #320]	; (8001d20 <HAL_GPIO_Init+0x304>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d01f      	beq.n	8001c24 <HAL_GPIO_Init+0x208>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a4f      	ldr	r2, [pc, #316]	; (8001d24 <HAL_GPIO_Init+0x308>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d019      	beq.n	8001c20 <HAL_GPIO_Init+0x204>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a4e      	ldr	r2, [pc, #312]	; (8001d28 <HAL_GPIO_Init+0x30c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d013      	beq.n	8001c1c <HAL_GPIO_Init+0x200>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a4d      	ldr	r2, [pc, #308]	; (8001d2c <HAL_GPIO_Init+0x310>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d00d      	beq.n	8001c18 <HAL_GPIO_Init+0x1fc>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a4c      	ldr	r2, [pc, #304]	; (8001d30 <HAL_GPIO_Init+0x314>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d007      	beq.n	8001c14 <HAL_GPIO_Init+0x1f8>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a4b      	ldr	r2, [pc, #300]	; (8001d34 <HAL_GPIO_Init+0x318>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <HAL_GPIO_Init+0x1f4>
 8001c0c:	2306      	movs	r3, #6
 8001c0e:	e00c      	b.n	8001c2a <HAL_GPIO_Init+0x20e>
 8001c10:	2307      	movs	r3, #7
 8001c12:	e00a      	b.n	8001c2a <HAL_GPIO_Init+0x20e>
 8001c14:	2305      	movs	r3, #5
 8001c16:	e008      	b.n	8001c2a <HAL_GPIO_Init+0x20e>
 8001c18:	2304      	movs	r3, #4
 8001c1a:	e006      	b.n	8001c2a <HAL_GPIO_Init+0x20e>
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e004      	b.n	8001c2a <HAL_GPIO_Init+0x20e>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e002      	b.n	8001c2a <HAL_GPIO_Init+0x20e>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_GPIO_Init+0x20e>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	f002 0203 	and.w	r2, r2, #3
 8001c30:	0092      	lsls	r2, r2, #2
 8001c32:	4093      	lsls	r3, r2
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c3a:	4937      	ldr	r1, [pc, #220]	; (8001d18 <HAL_GPIO_Init+0x2fc>)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c48:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <HAL_GPIO_Init+0x31c>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c6c:	4a32      	ldr	r2, [pc, #200]	; (8001d38 <HAL_GPIO_Init+0x31c>)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c72:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <HAL_GPIO_Init+0x31c>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c96:	4a28      	ldr	r2, [pc, #160]	; (8001d38 <HAL_GPIO_Init+0x31c>)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c9c:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <HAL_GPIO_Init+0x31c>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cc0:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <HAL_GPIO_Init+0x31c>)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_GPIO_Init+0x31c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cea:	4a13      	ldr	r2, [pc, #76]	; (8001d38 <HAL_GPIO_Init+0x31c>)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f47f ae97 	bne.w	8001a34 <HAL_GPIO_Init+0x18>
  }
}
 8001d06:	bf00      	nop
 8001d08:	bf00      	nop
 8001d0a:	371c      	adds	r7, #28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40010000 	.word	0x40010000
 8001d1c:	40020000 	.word	0x40020000
 8001d20:	40020400 	.word	0x40020400
 8001d24:	40020800 	.word	0x40020800
 8001d28:	40020c00 	.word	0x40020c00
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40021400 	.word	0x40021400
 8001d34:	40021800 	.word	0x40021800
 8001d38:	40010400 	.word	0x40010400

08001d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d4c:	787b      	ldrb	r3, [r7, #1]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d52:	887a      	ldrh	r2, [r7, #2]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001d58:	e003      	b.n	8001d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001d5a:	887b      	ldrh	r3, [r7, #2]
 8001d5c:	041a      	lsls	r2, r3, #16
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	619a      	str	r2, [r3, #24]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e31d      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d7e:	4b94      	ldr	r3, [pc, #592]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d88:	4b91      	ldr	r3, [pc, #580]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d90:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d07b      	beq.n	8001e96 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d006      	beq.n	8001db2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	2b0c      	cmp	r3, #12
 8001da8:	d10f      	bne.n	8001dca <HAL_RCC_OscConfig+0x5e>
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db0:	d10b      	bne.n	8001dca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db2:	4b87      	ldr	r3, [pc, #540]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d06a      	beq.n	8001e94 <HAL_RCC_OscConfig+0x128>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d166      	bne.n	8001e94 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e2f7      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d106      	bne.n	8001de0 <HAL_RCC_OscConfig+0x74>
 8001dd2:	4b7f      	ldr	r3, [pc, #508]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a7e      	ldr	r2, [pc, #504]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e02d      	b.n	8001e3c <HAL_RCC_OscConfig+0xd0>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10c      	bne.n	8001e02 <HAL_RCC_OscConfig+0x96>
 8001de8:	4b79      	ldr	r3, [pc, #484]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a78      	ldr	r2, [pc, #480]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b76      	ldr	r3, [pc, #472]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a75      	ldr	r2, [pc, #468]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	e01c      	b.n	8001e3c <HAL_RCC_OscConfig+0xd0>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b05      	cmp	r3, #5
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0xb8>
 8001e0a:	4b71      	ldr	r3, [pc, #452]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a70      	ldr	r2, [pc, #448]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b6e      	ldr	r3, [pc, #440]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a6d      	ldr	r2, [pc, #436]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e00b      	b.n	8001e3c <HAL_RCC_OscConfig+0xd0>
 8001e24:	4b6a      	ldr	r3, [pc, #424]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a69      	ldr	r2, [pc, #420]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b67      	ldr	r3, [pc, #412]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a66      	ldr	r2, [pc, #408]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d013      	beq.n	8001e6c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff f8c8 	bl	8000fd8 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7ff f8c4 	bl	8000fd8 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e2ad      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e5e:	4b5c      	ldr	r3, [pc, #368]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0xe0>
 8001e6a:	e014      	b.n	8001e96 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8b4 	bl	8000fd8 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e74:	f7ff f8b0 	bl	8000fd8 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e299      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e86:	4b52      	ldr	r3, [pc, #328]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x108>
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d05a      	beq.n	8001f58 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b0c      	cmp	r3, #12
 8001eac:	d119      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x176>
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d116      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb4:	4b46      	ldr	r3, [pc, #280]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_OscConfig+0x160>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e276      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ecc:	4b40      	ldr	r3, [pc, #256]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	493d      	ldr	r1, [pc, #244]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee0:	e03a      	b.n	8001f58 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d020      	beq.n	8001f2c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eea:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <HAL_RCC_OscConfig+0x268>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff f872 	bl	8000fd8 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef8:	f7ff f86e 	bl	8000fd8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e257      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f0a:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f16:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	021b      	lsls	r3, r3, #8
 8001f24:	492a      	ldr	r1, [pc, #168]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	604b      	str	r3, [r1, #4]
 8001f2a:	e015      	b.n	8001f58 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f2c:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <HAL_RCC_OscConfig+0x268>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7ff f851 	bl	8000fd8 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f3a:	f7ff f84d 	bl	8000fd8 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e236      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f4c:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f0      	bne.n	8001f3a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80b8 	beq.w	80020d6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d170      	bne.n	800204e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f6c:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_OscConfig+0x218>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e21a      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1a      	ldr	r2, [r3, #32]
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d921      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fc4b 	bl	8002834 <RCC_SetFlashLatencyFromMSIRange>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e208      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4906      	ldr	r1, [pc, #24]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	061b      	lsls	r3, r3, #24
 8001fc8:	4901      	ldr	r1, [pc, #4]	; (8001fd0 <HAL_RCC_OscConfig+0x264>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]
 8001fce:	e020      	b.n	8002012 <HAL_RCC_OscConfig+0x2a6>
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd8:	4ba4      	ldr	r3, [pc, #656]	; (800226c <HAL_RCC_OscConfig+0x500>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	49a1      	ldr	r1, [pc, #644]	; (800226c <HAL_RCC_OscConfig+0x500>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fea:	4ba0      	ldr	r3, [pc, #640]	; (800226c <HAL_RCC_OscConfig+0x500>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	061b      	lsls	r3, r3, #24
 8001ff8:	499c      	ldr	r1, [pc, #624]	; (800226c <HAL_RCC_OscConfig+0x500>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	4618      	mov	r0, r3
 8002004:	f000 fc16 	bl	8002834 <RCC_SetFlashLatencyFromMSIRange>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e1d3      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	0b5b      	lsrs	r3, r3, #13
 8002018:	3301      	adds	r3, #1
 800201a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002022:	4a92      	ldr	r2, [pc, #584]	; (800226c <HAL_RCC_OscConfig+0x500>)
 8002024:	6892      	ldr	r2, [r2, #8]
 8002026:	0912      	lsrs	r2, r2, #4
 8002028:	f002 020f 	and.w	r2, r2, #15
 800202c:	4990      	ldr	r1, [pc, #576]	; (8002270 <HAL_RCC_OscConfig+0x504>)
 800202e:	5c8a      	ldrb	r2, [r1, r2]
 8002030:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002032:	4a90      	ldr	r2, [pc, #576]	; (8002274 <HAL_RCC_OscConfig+0x508>)
 8002034:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002036:	4b90      	ldr	r3, [pc, #576]	; (8002278 <HAL_RCC_OscConfig+0x50c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe ff80 	bl	8000f40 <HAL_InitTick>
 8002040:	4603      	mov	r3, r0
 8002042:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d045      	beq.n	80020d6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	e1b5      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d029      	beq.n	80020aa <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002056:	4b89      	ldr	r3, [pc, #548]	; (800227c <HAL_RCC_OscConfig+0x510>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7fe ffbc 	bl	8000fd8 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002064:	f7fe ffb8 	bl	8000fd8 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e1a1      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002076:	4b7d      	ldr	r3, [pc, #500]	; (800226c <HAL_RCC_OscConfig+0x500>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002082:	4b7a      	ldr	r3, [pc, #488]	; (800226c <HAL_RCC_OscConfig+0x500>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4977      	ldr	r1, [pc, #476]	; (800226c <HAL_RCC_OscConfig+0x500>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002094:	4b75      	ldr	r3, [pc, #468]	; (800226c <HAL_RCC_OscConfig+0x500>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	061b      	lsls	r3, r3, #24
 80020a2:	4972      	ldr	r1, [pc, #456]	; (800226c <HAL_RCC_OscConfig+0x500>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]
 80020a8:	e015      	b.n	80020d6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020aa:	4b74      	ldr	r3, [pc, #464]	; (800227c <HAL_RCC_OscConfig+0x510>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7fe ff92 	bl	8000fd8 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020b8:	f7fe ff8e 	bl	8000fd8 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e177      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80020ca:	4b68      	ldr	r3, [pc, #416]	; (800226c <HAL_RCC_OscConfig+0x500>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d030      	beq.n	8002144 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d016      	beq.n	8002118 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ea:	4b65      	ldr	r3, [pc, #404]	; (8002280 <HAL_RCC_OscConfig+0x514>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f0:	f7fe ff72 	bl	8000fd8 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f8:	f7fe ff6e 	bl	8000fd8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e157      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800210a:	4b58      	ldr	r3, [pc, #352]	; (800226c <HAL_RCC_OscConfig+0x500>)
 800210c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0x38c>
 8002116:	e015      	b.n	8002144 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002118:	4b59      	ldr	r3, [pc, #356]	; (8002280 <HAL_RCC_OscConfig+0x514>)
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211e:	f7fe ff5b 	bl	8000fd8 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002126:	f7fe ff57 	bl	8000fd8 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e140      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002138:	4b4c      	ldr	r3, [pc, #304]	; (800226c <HAL_RCC_OscConfig+0x500>)
 800213a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f0      	bne.n	8002126 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80b5 	beq.w	80022bc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002156:	4b45      	ldr	r3, [pc, #276]	; (800226c <HAL_RCC_OscConfig+0x500>)
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10d      	bne.n	800217e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	4b42      	ldr	r3, [pc, #264]	; (800226c <HAL_RCC_OscConfig+0x500>)
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	4a41      	ldr	r2, [pc, #260]	; (800226c <HAL_RCC_OscConfig+0x500>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216c:	6253      	str	r3, [r2, #36]	; 0x24
 800216e:	4b3f      	ldr	r3, [pc, #252]	; (800226c <HAL_RCC_OscConfig+0x500>)
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217a:	2301      	movs	r3, #1
 800217c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217e:	4b41      	ldr	r3, [pc, #260]	; (8002284 <HAL_RCC_OscConfig+0x518>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002186:	2b00      	cmp	r3, #0
 8002188:	d118      	bne.n	80021bc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800218a:	4b3e      	ldr	r3, [pc, #248]	; (8002284 <HAL_RCC_OscConfig+0x518>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a3d      	ldr	r2, [pc, #244]	; (8002284 <HAL_RCC_OscConfig+0x518>)
 8002190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002196:	f7fe ff1f 	bl	8000fd8 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219e:	f7fe ff1b 	bl	8000fd8 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b64      	cmp	r3, #100	; 0x64
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e104      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b0:	4b34      	ldr	r3, [pc, #208]	; (8002284 <HAL_RCC_OscConfig+0x518>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x466>
 80021c4:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_RCC_OscConfig+0x500>)
 80021c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c8:	4a28      	ldr	r2, [pc, #160]	; (800226c <HAL_RCC_OscConfig+0x500>)
 80021ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ce:	6353      	str	r3, [r2, #52]	; 0x34
 80021d0:	e02d      	b.n	800222e <HAL_RCC_OscConfig+0x4c2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x488>
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <HAL_RCC_OscConfig+0x500>)
 80021dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021de:	4a23      	ldr	r2, [pc, #140]	; (800226c <HAL_RCC_OscConfig+0x500>)
 80021e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021e4:	6353      	str	r3, [r2, #52]	; 0x34
 80021e6:	4b21      	ldr	r3, [pc, #132]	; (800226c <HAL_RCC_OscConfig+0x500>)
 80021e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ea:	4a20      	ldr	r2, [pc, #128]	; (800226c <HAL_RCC_OscConfig+0x500>)
 80021ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021f0:	6353      	str	r3, [r2, #52]	; 0x34
 80021f2:	e01c      	b.n	800222e <HAL_RCC_OscConfig+0x4c2>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b05      	cmp	r3, #5
 80021fa:	d10c      	bne.n	8002216 <HAL_RCC_OscConfig+0x4aa>
 80021fc:	4b1b      	ldr	r3, [pc, #108]	; (800226c <HAL_RCC_OscConfig+0x500>)
 80021fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002200:	4a1a      	ldr	r2, [pc, #104]	; (800226c <HAL_RCC_OscConfig+0x500>)
 8002202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002206:	6353      	str	r3, [r2, #52]	; 0x34
 8002208:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_RCC_OscConfig+0x500>)
 800220a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220c:	4a17      	ldr	r2, [pc, #92]	; (800226c <HAL_RCC_OscConfig+0x500>)
 800220e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002212:	6353      	str	r3, [r2, #52]	; 0x34
 8002214:	e00b      	b.n	800222e <HAL_RCC_OscConfig+0x4c2>
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_RCC_OscConfig+0x500>)
 8002218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800221a:	4a14      	ldr	r2, [pc, #80]	; (800226c <HAL_RCC_OscConfig+0x500>)
 800221c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002220:	6353      	str	r3, [r2, #52]	; 0x34
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_RCC_OscConfig+0x500>)
 8002224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002226:	4a11      	ldr	r2, [pc, #68]	; (800226c <HAL_RCC_OscConfig+0x500>)
 8002228:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800222c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d015      	beq.n	8002262 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002236:	f7fe fecf 	bl	8000fd8 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7fe fecb 	bl	8000fd8 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	; 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e0b2      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_RCC_OscConfig+0x500>)
 8002256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0ee      	beq.n	800223e <HAL_RCC_OscConfig+0x4d2>
 8002260:	e023      	b.n	80022aa <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002262:	f7fe feb9 	bl	8000fd8 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002268:	e019      	b.n	800229e <HAL_RCC_OscConfig+0x532>
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	08003d18 	.word	0x08003d18
 8002274:	20000194 	.word	0x20000194
 8002278:	20000198 	.word	0x20000198
 800227c:	42470020 	.word	0x42470020
 8002280:	42470680 	.word	0x42470680
 8002284:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002288:	f7fe fea6 	bl	8000fd8 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	; 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e08d      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800229e:	4b49      	ldr	r3, [pc, #292]	; (80023c4 <HAL_RCC_OscConfig+0x658>)
 80022a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1ee      	bne.n	8002288 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022aa:	7ffb      	ldrb	r3, [r7, #31]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d105      	bne.n	80022bc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b0:	4b44      	ldr	r3, [pc, #272]	; (80023c4 <HAL_RCC_OscConfig+0x658>)
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	4a43      	ldr	r2, [pc, #268]	; (80023c4 <HAL_RCC_OscConfig+0x658>)
 80022b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ba:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d079      	beq.n	80023b8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	2b0c      	cmp	r3, #12
 80022c8:	d056      	beq.n	8002378 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d13b      	bne.n	800234a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_RCC_OscConfig+0x65c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7fe fe7e 	bl	8000fd8 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e0:	f7fe fe7a 	bl	8000fd8 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e063      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022f2:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <HAL_RCC_OscConfig+0x658>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fe:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <HAL_RCC_OscConfig+0x658>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	4319      	orrs	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	430b      	orrs	r3, r1
 8002316:	492b      	ldr	r1, [pc, #172]	; (80023c4 <HAL_RCC_OscConfig+0x658>)
 8002318:	4313      	orrs	r3, r2
 800231a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800231c:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <HAL_RCC_OscConfig+0x65c>)
 800231e:	2201      	movs	r2, #1
 8002320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002322:	f7fe fe59 	bl	8000fd8 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800232a:	f7fe fe55 	bl	8000fd8 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e03e      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <HAL_RCC_OscConfig+0x658>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x5be>
 8002348:	e036      	b.n	80023b8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234a:	4b1f      	ldr	r3, [pc, #124]	; (80023c8 <HAL_RCC_OscConfig+0x65c>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7fe fe42 	bl	8000fd8 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe fe3e 	bl	8000fd8 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e027      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800236a:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <HAL_RCC_OscConfig+0x658>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x5ec>
 8002376:	e01f      	b.n	80023b8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e01a      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <HAL_RCC_OscConfig+0x658>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	429a      	cmp	r2, r3
 8002396:	d10d      	bne.n	80023b4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d106      	bne.n	80023b4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3720      	adds	r7, #32
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	42470060 	.word	0x42470060

080023cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e11a      	b.n	8002616 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023e0:	4b8f      	ldr	r3, [pc, #572]	; (8002620 <HAL_RCC_ClockConfig+0x254>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d919      	bls.n	8002422 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_RCC_ClockConfig+0x34>
 80023f4:	4b8a      	ldr	r3, [pc, #552]	; (8002620 <HAL_RCC_ClockConfig+0x254>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a89      	ldr	r2, [pc, #548]	; (8002620 <HAL_RCC_ClockConfig+0x254>)
 80023fa:	f043 0304 	orr.w	r3, r3, #4
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	4b87      	ldr	r3, [pc, #540]	; (8002620 <HAL_RCC_ClockConfig+0x254>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f023 0201 	bic.w	r2, r3, #1
 8002408:	4985      	ldr	r1, [pc, #532]	; (8002620 <HAL_RCC_ClockConfig+0x254>)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	4313      	orrs	r3, r2
 800240e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002410:	4b83      	ldr	r3, [pc, #524]	; (8002620 <HAL_RCC_ClockConfig+0x254>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d001      	beq.n	8002422 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e0f9      	b.n	8002616 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800242e:	4b7d      	ldr	r3, [pc, #500]	; (8002624 <HAL_RCC_ClockConfig+0x258>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	497a      	ldr	r1, [pc, #488]	; (8002624 <HAL_RCC_ClockConfig+0x258>)
 800243c:	4313      	orrs	r3, r2
 800243e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 808e 	beq.w	800256a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002456:	4b73      	ldr	r3, [pc, #460]	; (8002624 <HAL_RCC_ClockConfig+0x258>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d121      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0d7      	b.n	8002616 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800246e:	4b6d      	ldr	r3, [pc, #436]	; (8002624 <HAL_RCC_ClockConfig+0x258>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d115      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0cb      	b.n	8002616 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002486:	4b67      	ldr	r3, [pc, #412]	; (8002624 <HAL_RCC_ClockConfig+0x258>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0bf      	b.n	8002616 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002496:	4b63      	ldr	r3, [pc, #396]	; (8002624 <HAL_RCC_ClockConfig+0x258>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e0b7      	b.n	8002616 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a6:	4b5f      	ldr	r3, [pc, #380]	; (8002624 <HAL_RCC_ClockConfig+0x258>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f023 0203 	bic.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	495c      	ldr	r1, [pc, #368]	; (8002624 <HAL_RCC_ClockConfig+0x258>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b8:	f7fe fd8e 	bl	8000fd8 <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d112      	bne.n	80024ec <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024c6:	e00a      	b.n	80024de <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7fe fd86 	bl	8000fd8 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e09b      	b.n	8002616 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024de:	4b51      	ldr	r3, [pc, #324]	; (8002624 <HAL_RCC_ClockConfig+0x258>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d1ee      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xfc>
 80024ea:	e03e      	b.n	800256a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d112      	bne.n	800251a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f6:	f7fe fd6f 	bl	8000fd8 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	; 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e084      	b.n	8002616 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800250c:	4b45      	ldr	r3, [pc, #276]	; (8002624 <HAL_RCC_ClockConfig+0x258>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b0c      	cmp	r3, #12
 8002516:	d1ee      	bne.n	80024f6 <HAL_RCC_ClockConfig+0x12a>
 8002518:	e027      	b.n	800256a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d11d      	bne.n	800255e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002522:	e00a      	b.n	800253a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002524:	f7fe fd58 	bl	8000fd8 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e06d      	b.n	8002616 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800253a:	4b3a      	ldr	r3, [pc, #232]	; (8002624 <HAL_RCC_ClockConfig+0x258>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b04      	cmp	r3, #4
 8002544:	d1ee      	bne.n	8002524 <HAL_RCC_ClockConfig+0x158>
 8002546:	e010      	b.n	800256a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002548:	f7fe fd46 	bl	8000fd8 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	; 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e05b      	b.n	8002616 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800255e:	4b31      	ldr	r3, [pc, #196]	; (8002624 <HAL_RCC_ClockConfig+0x258>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1ee      	bne.n	8002548 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800256a:	4b2d      	ldr	r3, [pc, #180]	; (8002620 <HAL_RCC_ClockConfig+0x254>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d219      	bcs.n	80025ac <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d105      	bne.n	800258a <HAL_RCC_ClockConfig+0x1be>
 800257e:	4b28      	ldr	r3, [pc, #160]	; (8002620 <HAL_RCC_ClockConfig+0x254>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a27      	ldr	r2, [pc, #156]	; (8002620 <HAL_RCC_ClockConfig+0x254>)
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b25      	ldr	r3, [pc, #148]	; (8002620 <HAL_RCC_ClockConfig+0x254>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 0201 	bic.w	r2, r3, #1
 8002592:	4923      	ldr	r1, [pc, #140]	; (8002620 <HAL_RCC_ClockConfig+0x254>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_RCC_ClockConfig+0x254>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e034      	b.n	8002616 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <HAL_RCC_ClockConfig+0x258>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4917      	ldr	r1, [pc, #92]	; (8002624 <HAL_RCC_ClockConfig+0x258>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_RCC_ClockConfig+0x258>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	490f      	ldr	r1, [pc, #60]	; (8002624 <HAL_RCC_ClockConfig+0x258>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ea:	f000 f823 	bl	8002634 <HAL_RCC_GetSysClockFreq>
 80025ee:	4602      	mov	r2, r0
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <HAL_RCC_ClockConfig+0x258>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	490b      	ldr	r1, [pc, #44]	; (8002628 <HAL_RCC_ClockConfig+0x25c>)
 80025fc:	5ccb      	ldrb	r3, [r1, r3]
 80025fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <HAL_RCC_ClockConfig+0x260>)
 8002604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <HAL_RCC_ClockConfig+0x264>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fc98 	bl	8000f40 <HAL_InitTick>
 8002610:	4603      	mov	r3, r0
 8002612:	72fb      	strb	r3, [r7, #11]

  return status;
 8002614:	7afb      	ldrb	r3, [r7, #11]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023c00 	.word	0x40023c00
 8002624:	40023800 	.word	0x40023800
 8002628:	08003d18 	.word	0x08003d18
 800262c:	20000194 	.word	0x20000194
 8002630:	20000198 	.word	0x20000198

08002634 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002634:	b5b0      	push	{r4, r5, r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800263a:	4b61      	ldr	r3, [pc, #388]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x18c>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b0c      	cmp	r3, #12
 8002648:	d00d      	beq.n	8002666 <HAL_RCC_GetSysClockFreq+0x32>
 800264a:	2b0c      	cmp	r3, #12
 800264c:	f200 80a4 	bhi.w	8002798 <HAL_RCC_GetSysClockFreq+0x164>
 8002650:	2b04      	cmp	r3, #4
 8002652:	d002      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x26>
 8002654:	2b08      	cmp	r3, #8
 8002656:	d003      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x2c>
 8002658:	e09e      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800265a:	4b5a      	ldr	r3, [pc, #360]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x190>)
 800265c:	613b      	str	r3, [r7, #16]
      break;
 800265e:	e0a9      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002660:	4b59      	ldr	r3, [pc, #356]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x194>)
 8002662:	613b      	str	r3, [r7, #16]
      break;
 8002664:	e0a6      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	0c9b      	lsrs	r3, r3, #18
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	4a57      	ldr	r2, [pc, #348]	; (80027cc <HAL_RCC_GetSysClockFreq+0x198>)
 8002670:	5cd3      	ldrb	r3, [r2, r3]
 8002672:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	0d9b      	lsrs	r3, r3, #22
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	3301      	adds	r3, #1
 800267e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002680:	4b4f      	ldr	r3, [pc, #316]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x18c>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d041      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	461c      	mov	r4, r3
 8002690:	f04f 0500 	mov.w	r5, #0
 8002694:	4620      	mov	r0, r4
 8002696:	4629      	mov	r1, r5
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	014b      	lsls	r3, r1, #5
 80026a2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026a6:	0142      	lsls	r2, r0, #5
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	1b00      	subs	r0, r0, r4
 80026ae:	eb61 0105 	sbc.w	r1, r1, r5
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	018b      	lsls	r3, r1, #6
 80026bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80026c0:	0182      	lsls	r2, r0, #6
 80026c2:	1a12      	subs	r2, r2, r0
 80026c4:	eb63 0301 	sbc.w	r3, r3, r1
 80026c8:	f04f 0000 	mov.w	r0, #0
 80026cc:	f04f 0100 	mov.w	r1, #0
 80026d0:	00d9      	lsls	r1, r3, #3
 80026d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026d6:	00d0      	lsls	r0, r2, #3
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	1912      	adds	r2, r2, r4
 80026de:	eb45 0303 	adc.w	r3, r5, r3
 80026e2:	f04f 0000 	mov.w	r0, #0
 80026e6:	f04f 0100 	mov.w	r1, #0
 80026ea:	0259      	lsls	r1, r3, #9
 80026ec:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80026f0:	0250      	lsls	r0, r2, #9
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	461a      	mov	r2, r3
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	f7fd fd3b 	bl	800017c <__aeabi_uldivmod>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4613      	mov	r3, r2
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	e040      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	461c      	mov	r4, r3
 8002714:	f04f 0500 	mov.w	r5, #0
 8002718:	4620      	mov	r0, r4
 800271a:	4629      	mov	r1, r5
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	014b      	lsls	r3, r1, #5
 8002726:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800272a:	0142      	lsls	r2, r0, #5
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	1b00      	subs	r0, r0, r4
 8002732:	eb61 0105 	sbc.w	r1, r1, r5
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	018b      	lsls	r3, r1, #6
 8002740:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002744:	0182      	lsls	r2, r0, #6
 8002746:	1a12      	subs	r2, r2, r0
 8002748:	eb63 0301 	sbc.w	r3, r3, r1
 800274c:	f04f 0000 	mov.w	r0, #0
 8002750:	f04f 0100 	mov.w	r1, #0
 8002754:	00d9      	lsls	r1, r3, #3
 8002756:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800275a:	00d0      	lsls	r0, r2, #3
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	1912      	adds	r2, r2, r4
 8002762:	eb45 0303 	adc.w	r3, r5, r3
 8002766:	f04f 0000 	mov.w	r0, #0
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	0299      	lsls	r1, r3, #10
 8002770:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002774:	0290      	lsls	r0, r2, #10
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4610      	mov	r0, r2
 800277c:	4619      	mov	r1, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	461a      	mov	r2, r3
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	f7fd fcf9 	bl	800017c <__aeabi_uldivmod>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4613      	mov	r3, r2
 8002790:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	613b      	str	r3, [r7, #16]
      break;
 8002796:	e00d      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x18c>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	0b5b      	lsrs	r3, r3, #13
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	613b      	str	r3, [r7, #16]
      break;
 80027b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027b4:	693b      	ldr	r3, [r7, #16]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bdb0      	pop	{r4, r5, r7, pc}
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	00f42400 	.word	0x00f42400
 80027c8:	007a1200 	.word	0x007a1200
 80027cc:	08003d0c 	.word	0x08003d0c

080027d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d4:	4b02      	ldr	r3, [pc, #8]	; (80027e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	20000194 	.word	0x20000194

080027e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027e8:	f7ff fff2 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 80027ec:	4602      	mov	r2, r0
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4903      	ldr	r1, [pc, #12]	; (8002808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40023800 	.word	0x40023800
 8002808:	08003d28 	.word	0x08003d28

0800280c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002810:	f7ff ffde 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	0adb      	lsrs	r3, r3, #11
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4903      	ldr	r1, [pc, #12]	; (8002830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40023800 	.word	0x40023800
 8002830:	08003d28 	.word	0x08003d28

08002834 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002840:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d12c      	bne.n	80028a6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800284c:	4b26      	ldr	r3, [pc, #152]	; (80028e8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	e016      	b.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002864:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	4a1f      	ldr	r2, [pc, #124]	; (80028e8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800286a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286e:	6253      	str	r3, [r2, #36]	; 0x24
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800287c:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002884:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002886:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	4a17      	ldr	r2, [pc, #92]	; (80028e8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800288c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002890:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002898:	d105      	bne.n	80028a6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028a0:	d101      	bne.n	80028a6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80028a2:	2301      	movs	r3, #1
 80028a4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80028ac:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0f      	ldr	r2, [pc, #60]	; (80028f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028b2:	f043 0304 	orr.w	r3, r3, #4
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f023 0201 	bic.w	r2, r3, #1
 80028c0:	490b      	ldr	r1, [pc, #44]	; (80028f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028c8:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d001      	beq.n	80028da <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40007000 	.word	0x40007000
 80028f0:	40023c00 	.word	0x40023c00

080028f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e031      	b.n	800296a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe f9e6 	bl	8000cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3304      	adds	r3, #4
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f000 fc7c 	bl	8003230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d001      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e03a      	b.n	8002a02 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ac:	d00e      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x58>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a16      	ldr	r2, [pc, #88]	; (8002a0c <HAL_TIM_Base_Start_IT+0x98>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d009      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x58>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a14      	ldr	r2, [pc, #80]	; (8002a10 <HAL_TIM_Base_Start_IT+0x9c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d004      	beq.n	80029cc <HAL_TIM_Base_Start_IT+0x58>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a13      	ldr	r2, [pc, #76]	; (8002a14 <HAL_TIM_Base_Start_IT+0xa0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d111      	bne.n	80029f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b06      	cmp	r3, #6
 80029dc:	d010      	beq.n	8002a00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0201 	orr.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ee:	e007      	b.n	8002a00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	40000400 	.word	0x40000400
 8002a10:	40000800 	.word	0x40000800
 8002a14:	40010800 	.word	0x40010800

08002a18 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e031      	b.n	8002a8e <HAL_TIM_OC_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f829 	bl	8002a96 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3304      	adds	r3, #4
 8002a54:	4619      	mov	r1, r3
 8002a56:	4610      	mov	r0, r2
 8002a58:	f000 fbea 	bl	8003230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e031      	b.n	8002b1e <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f829 	bl	8002b26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f000 fba2 	bl	8003230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d109      	bne.n	8002b5c <HAL_TIM_PWM_Start+0x24>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	bf14      	ite	ne
 8002b54:	2301      	movne	r3, #1
 8002b56:	2300      	moveq	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	e022      	b.n	8002ba2 <HAL_TIM_PWM_Start+0x6a>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d109      	bne.n	8002b76 <HAL_TIM_PWM_Start+0x3e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	bf14      	ite	ne
 8002b6e:	2301      	movne	r3, #1
 8002b70:	2300      	moveq	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	e015      	b.n	8002ba2 <HAL_TIM_PWM_Start+0x6a>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d109      	bne.n	8002b90 <HAL_TIM_PWM_Start+0x58>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	bf14      	ite	ne
 8002b88:	2301      	movne	r3, #1
 8002b8a:	2300      	moveq	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	e008      	b.n	8002ba2 <HAL_TIM_PWM_Start+0x6a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	bf14      	ite	ne
 8002b9c:	2301      	movne	r3, #1
 8002b9e:	2300      	moveq	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e051      	b.n	8002c4e <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d104      	bne.n	8002bba <HAL_TIM_PWM_Start+0x82>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002bb8:	e013      	b.n	8002be2 <HAL_TIM_PWM_Start+0xaa>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d104      	bne.n	8002bca <HAL_TIM_PWM_Start+0x92>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002bc8:	e00b      	b.n	8002be2 <HAL_TIM_PWM_Start+0xaa>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d104      	bne.n	8002bda <HAL_TIM_PWM_Start+0xa2>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002bd8:	e003      	b.n	8002be2 <HAL_TIM_PWM_Start+0xaa>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2201      	movs	r2, #1
 8002be8:	6839      	ldr	r1, [r7, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fd1b 	bl	8003626 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf8:	d00e      	beq.n	8002c18 <HAL_TIM_PWM_Start+0xe0>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a16      	ldr	r2, [pc, #88]	; (8002c58 <HAL_TIM_PWM_Start+0x120>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d009      	beq.n	8002c18 <HAL_TIM_PWM_Start+0xe0>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a14      	ldr	r2, [pc, #80]	; (8002c5c <HAL_TIM_PWM_Start+0x124>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d004      	beq.n	8002c18 <HAL_TIM_PWM_Start+0xe0>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <HAL_TIM_PWM_Start+0x128>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d111      	bne.n	8002c3c <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d010      	beq.n	8002c4c <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0201 	orr.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c3a:	e007      	b.n	8002c4c <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40000400 	.word	0x40000400
 8002c5c:	40000800 	.word	0x40000800
 8002c60:	40010800 	.word	0x40010800

08002c64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d122      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d11b      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0202 	mvn.w	r2, #2
 8002c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 faa6 	bl	80031f8 <HAL_TIM_IC_CaptureCallback>
 8002cac:	e005      	b.n	8002cba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fa99 	bl	80031e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 faa8 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d122      	bne.n	8002d14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d11b      	bne.n	8002d14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0204 	mvn.w	r2, #4
 8002ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fa7c 	bl	80031f8 <HAL_TIM_IC_CaptureCallback>
 8002d00:	e005      	b.n	8002d0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fa6f 	bl	80031e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 fa7e 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d122      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d11b      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f06f 0208 	mvn.w	r2, #8
 8002d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fa52 	bl	80031f8 <HAL_TIM_IC_CaptureCallback>
 8002d54:	e005      	b.n	8002d62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fa45 	bl	80031e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fa54 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	2b10      	cmp	r3, #16
 8002d74:	d122      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d11b      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f06f 0210 	mvn.w	r2, #16
 8002d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2208      	movs	r2, #8
 8002d92:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fa28 	bl	80031f8 <HAL_TIM_IC_CaptureCallback>
 8002da8:	e005      	b.n	8002db6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fa1b 	bl	80031e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fa2a 	bl	800320a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d10e      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d107      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0201 	mvn.w	r2, #1
 8002de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fd fdf6 	bl	80009d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df2:	2b40      	cmp	r3, #64	; 0x40
 8002df4:	d10e      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e00:	2b40      	cmp	r3, #64	; 0x40
 8002e02:	d107      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fa04 	bl	800321c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_TIM_OC_ConfigChannel+0x1e>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e048      	b.n	8002ecc <HAL_TIM_OC_ConfigChannel+0xb0>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b0c      	cmp	r3, #12
 8002e46:	d839      	bhi.n	8002ebc <HAL_TIM_OC_ConfigChannel+0xa0>
 8002e48:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4e:	bf00      	nop
 8002e50:	08002e85 	.word	0x08002e85
 8002e54:	08002ebd 	.word	0x08002ebd
 8002e58:	08002ebd 	.word	0x08002ebd
 8002e5c:	08002ebd 	.word	0x08002ebd
 8002e60:	08002e93 	.word	0x08002e93
 8002e64:	08002ebd 	.word	0x08002ebd
 8002e68:	08002ebd 	.word	0x08002ebd
 8002e6c:	08002ebd 	.word	0x08002ebd
 8002e70:	08002ea1 	.word	0x08002ea1
 8002e74:	08002ebd 	.word	0x08002ebd
 8002e78:	08002ebd 	.word	0x08002ebd
 8002e7c:	08002ebd 	.word	0x08002ebd
 8002e80:	08002eaf 	.word	0x08002eaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fa40 	bl	8003310 <TIM_OC1_SetConfig>
      break;
 8002e90:	e017      	b.n	8002ec2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68b9      	ldr	r1, [r7, #8]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fa75 	bl	8003388 <TIM_OC2_SetConfig>
      break;
 8002e9e:	e010      	b.n	8002ec2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 faac 	bl	8003404 <TIM_OC3_SetConfig>
      break;
 8002eac:	e009      	b.n	8002ec2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fae2 	bl	800347e <TIM_OC4_SetConfig>
      break;
 8002eba:	e002      	b.n	8002ec2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8002ec0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e0ae      	b.n	8003050 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b0c      	cmp	r3, #12
 8002efe:	f200 809f 	bhi.w	8003040 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f02:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f08:	08002f3d 	.word	0x08002f3d
 8002f0c:	08003041 	.word	0x08003041
 8002f10:	08003041 	.word	0x08003041
 8002f14:	08003041 	.word	0x08003041
 8002f18:	08002f7d 	.word	0x08002f7d
 8002f1c:	08003041 	.word	0x08003041
 8002f20:	08003041 	.word	0x08003041
 8002f24:	08003041 	.word	0x08003041
 8002f28:	08002fbf 	.word	0x08002fbf
 8002f2c:	08003041 	.word	0x08003041
 8002f30:	08003041 	.word	0x08003041
 8002f34:	08003041 	.word	0x08003041
 8002f38:	08002fff 	.word	0x08002fff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f9e4 	bl	8003310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0208 	orr.w	r2, r2, #8
 8002f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0204 	bic.w	r2, r2, #4
 8002f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6999      	ldr	r1, [r3, #24]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	619a      	str	r2, [r3, #24]
      break;
 8002f7a:	e064      	b.n	8003046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fa00 	bl	8003388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6999      	ldr	r1, [r3, #24]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	021a      	lsls	r2, r3, #8
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	619a      	str	r2, [r3, #24]
      break;
 8002fbc:	e043      	b.n	8003046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fa1d 	bl	8003404 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69da      	ldr	r2, [r3, #28]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0208 	orr.w	r2, r2, #8
 8002fd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69da      	ldr	r2, [r3, #28]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0204 	bic.w	r2, r2, #4
 8002fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69d9      	ldr	r1, [r3, #28]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	61da      	str	r2, [r3, #28]
      break;
 8002ffc:	e023      	b.n	8003046 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	4618      	mov	r0, r3
 8003006:	f000 fa3a 	bl	800347e <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69d9      	ldr	r1, [r3, #28]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	021a      	lsls	r2, r3, #8
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	61da      	str	r2, [r3, #28]
      break;
 800303e:	e002      	b.n	8003046 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	75fb      	strb	r3, [r7, #23]
      break;
 8003044:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800304e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_TIM_ConfigClockSource+0x1c>
 8003070:	2302      	movs	r3, #2
 8003072:	e0b4      	b.n	80031de <HAL_TIM_ConfigClockSource+0x186>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800309a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ac:	d03e      	beq.n	800312c <HAL_TIM_ConfigClockSource+0xd4>
 80030ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b2:	f200 8087 	bhi.w	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ba:	f000 8086 	beq.w	80031ca <HAL_TIM_ConfigClockSource+0x172>
 80030be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c2:	d87f      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030c4:	2b70      	cmp	r3, #112	; 0x70
 80030c6:	d01a      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0xa6>
 80030c8:	2b70      	cmp	r3, #112	; 0x70
 80030ca:	d87b      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030cc:	2b60      	cmp	r3, #96	; 0x60
 80030ce:	d050      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0x11a>
 80030d0:	2b60      	cmp	r3, #96	; 0x60
 80030d2:	d877      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030d4:	2b50      	cmp	r3, #80	; 0x50
 80030d6:	d03c      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0xfa>
 80030d8:	2b50      	cmp	r3, #80	; 0x50
 80030da:	d873      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030dc:	2b40      	cmp	r3, #64	; 0x40
 80030de:	d058      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x13a>
 80030e0:	2b40      	cmp	r3, #64	; 0x40
 80030e2:	d86f      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030e4:	2b30      	cmp	r3, #48	; 0x30
 80030e6:	d064      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x15a>
 80030e8:	2b30      	cmp	r3, #48	; 0x30
 80030ea:	d86b      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d060      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x15a>
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d867      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d05c      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x15a>
 80030f8:	2b10      	cmp	r3, #16
 80030fa:	d05a      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x15a>
 80030fc:	e062      	b.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	6899      	ldr	r1, [r3, #8]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f000 fa6b 	bl	80035e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003120:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	609a      	str	r2, [r3, #8]
      break;
 800312a:	e04f      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6899      	ldr	r1, [r3, #8]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f000 fa54 	bl	80035e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800314e:	609a      	str	r2, [r3, #8]
      break;
 8003150:	e03c      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	6859      	ldr	r1, [r3, #4]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	461a      	mov	r2, r3
 8003160:	f000 f9cb 	bl	80034fa <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2150      	movs	r1, #80	; 0x50
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fa22 	bl	80035b4 <TIM_ITRx_SetConfig>
      break;
 8003170:	e02c      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	6859      	ldr	r1, [r3, #4]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	461a      	mov	r2, r3
 8003180:	f000 f9e9 	bl	8003556 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2160      	movs	r1, #96	; 0x60
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fa12 	bl	80035b4 <TIM_ITRx_SetConfig>
      break;
 8003190:	e01c      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6859      	ldr	r1, [r3, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	461a      	mov	r2, r3
 80031a0:	f000 f9ab 	bl	80034fa <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2140      	movs	r1, #64	; 0x40
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fa02 	bl	80035b4 <TIM_ITRx_SetConfig>
      break;
 80031b0:	e00c      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4619      	mov	r1, r3
 80031bc:	4610      	mov	r0, r2
 80031be:	f000 f9f9 	bl	80035b4 <TIM_ITRx_SetConfig>
      break;
 80031c2:	e003      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      break;
 80031c8:	e000      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
	...

08003230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003246:	d00f      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a2b      	ldr	r2, [pc, #172]	; (80032f8 <TIM_Base_SetConfig+0xc8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00b      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a2a      	ldr	r2, [pc, #168]	; (80032fc <TIM_Base_SetConfig+0xcc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d007      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a29      	ldr	r2, [pc, #164]	; (8003300 <TIM_Base_SetConfig+0xd0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <TIM_Base_SetConfig+0x38>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a28      	ldr	r2, [pc, #160]	; (8003304 <TIM_Base_SetConfig+0xd4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d108      	bne.n	800327a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003280:	d017      	beq.n	80032b2 <TIM_Base_SetConfig+0x82>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a1c      	ldr	r2, [pc, #112]	; (80032f8 <TIM_Base_SetConfig+0xc8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <TIM_Base_SetConfig+0x82>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a1b      	ldr	r2, [pc, #108]	; (80032fc <TIM_Base_SetConfig+0xcc>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00f      	beq.n	80032b2 <TIM_Base_SetConfig+0x82>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a1a      	ldr	r2, [pc, #104]	; (8003300 <TIM_Base_SetConfig+0xd0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00b      	beq.n	80032b2 <TIM_Base_SetConfig+0x82>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a19      	ldr	r2, [pc, #100]	; (8003304 <TIM_Base_SetConfig+0xd4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d007      	beq.n	80032b2 <TIM_Base_SetConfig+0x82>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a18      	ldr	r2, [pc, #96]	; (8003308 <TIM_Base_SetConfig+0xd8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d003      	beq.n	80032b2 <TIM_Base_SetConfig+0x82>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a17      	ldr	r2, [pc, #92]	; (800330c <TIM_Base_SetConfig+0xdc>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d108      	bne.n	80032c4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	615a      	str	r2, [r3, #20]
}
 80032ee:	bf00      	nop
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40000800 	.word	0x40000800
 8003300:	40000c00 	.word	0x40000c00
 8003304:	40010800 	.word	0x40010800
 8003308:	40010c00 	.word	0x40010c00
 800330c:	40011000 	.word	0x40011000

08003310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	f023 0201 	bic.w	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0303 	bic.w	r3, r3, #3
 8003346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f023 0302 	bic.w	r3, r3, #2
 8003358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	621a      	str	r2, [r3, #32]
}
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr

08003388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f023 0210 	bic.w	r2, r3, #16
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0320 	bic.w	r3, r3, #32
 80033d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	621a      	str	r2, [r3, #32]
}
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0303 	bic.w	r3, r3, #3
 800343a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800344c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	621a      	str	r2, [r3, #32]
}
 8003474:	bf00      	nop
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr

0800347e <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800347e:	b480      	push	{r7}
 8003480:	b087      	sub	sp, #28
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	031b      	lsls	r3, r3, #12
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	621a      	str	r2, [r3, #32]
}
 80034f0:	bf00      	nop
 80034f2:	371c      	adds	r7, #28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr

080034fa <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b087      	sub	sp, #28
 80034fe:	af00      	add	r7, sp, #0
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f023 0201 	bic.w	r2, r3, #1
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f023 030a 	bic.w	r3, r3, #10
 8003536:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	621a      	str	r2, [r3, #32]
}
 800354c:	bf00      	nop
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr

08003556 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003556:	b480      	push	{r7}
 8003558:	b087      	sub	sp, #28
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f023 0210 	bic.w	r2, r3, #16
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003580:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	031b      	lsls	r3, r3, #12
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003592:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	621a      	str	r2, [r3, #32]
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f043 0307 	orr.w	r3, r3, #7
 80035d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	609a      	str	r2, [r3, #8]
}
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	021a      	lsls	r2, r3, #8
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	431a      	orrs	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4313      	orrs	r3, r2
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	609a      	str	r2, [r3, #8]
}
 800361c:	bf00      	nop
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr

08003626 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003626:	b480      	push	{r7}
 8003628:	b087      	sub	sp, #28
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	2201      	movs	r2, #1
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a1a      	ldr	r2, [r3, #32]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	43db      	mvns	r3, r3
 8003648:	401a      	ands	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1a      	ldr	r2, [r3, #32]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	fa01 f303 	lsl.w	r3, r1, r3
 800365e:	431a      	orrs	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	621a      	str	r2, [r3, #32]
}
 8003664:	bf00      	nop
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr
	...

08003670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003684:	2302      	movs	r3, #2
 8003686:	e046      	b.n	8003716 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ca:	d00e      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a13      	ldr	r2, [pc, #76]	; (8003720 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d009      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a12      	ldr	r2, [pc, #72]	; (8003724 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d004      	beq.n	80036ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a10      	ldr	r2, [pc, #64]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d10c      	bne.n	8003704 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr
 8003720:	40000400 	.word	0x40000400
 8003724:	40000800 	.word	0x40000800
 8003728:	40010800 	.word	0x40010800

0800372c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e042      	b.n	80037c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fd fb3a 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2224      	movs	r2, #36	; 0x24
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800376e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f9af 	bl	8003ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003784:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003794:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	4613      	mov	r3, r2
 80037da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d16d      	bne.n	80038c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_UART_Transmit+0x2c>
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e066      	b.n	80038ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2221      	movs	r2, #33	; 0x21
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800380a:	f7fd fbe5 	bl	8000fd8 <HAL_GetTick>
 800380e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	88fa      	ldrh	r2, [r7, #6]
 8003814:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	88fa      	ldrh	r2, [r7, #6]
 800381a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003824:	d108      	bne.n	8003838 <HAL_UART_Transmit+0x6c>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d104      	bne.n	8003838 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	e003      	b.n	8003840 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800383c:	2300      	movs	r3, #0
 800383e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003840:	e02a      	b.n	8003898 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2200      	movs	r2, #0
 800384a:	2180      	movs	r1, #128	; 0x80
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f8d2 	bl	80039f6 <UART_WaitOnFlagUntilTimeout>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e036      	b.n	80038ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10b      	bne.n	800387a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003870:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	3302      	adds	r3, #2
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	e007      	b.n	800388a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	781a      	ldrb	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	3301      	adds	r3, #1
 8003888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1cf      	bne.n	8003842 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2200      	movs	r2, #0
 80038aa:	2140      	movs	r1, #64	; 0x40
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f8a2 	bl	80039f6 <UART_WaitOnFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e006      	b.n	80038ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	e000      	b.n	80038ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80038c8:	2302      	movs	r3, #2
  }
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3720      	adds	r7, #32
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b08a      	sub	sp, #40	; 0x28
 80038d6:	af02      	add	r7, sp, #8
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	603b      	str	r3, [r7, #0]
 80038de:	4613      	mov	r3, r2
 80038e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d17c      	bne.n	80039ec <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_UART_Receive+0x2c>
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e075      	b.n	80039ee <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2222      	movs	r2, #34	; 0x22
 800390c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003916:	f7fd fb5f 	bl	8000fd8 <HAL_GetTick>
 800391a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	88fa      	ldrh	r2, [r7, #6]
 8003920:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	88fa      	ldrh	r2, [r7, #6]
 8003926:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003930:	d108      	bne.n	8003944 <HAL_UART_Receive+0x72>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d104      	bne.n	8003944 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	e003      	b.n	800394c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003948:	2300      	movs	r3, #0
 800394a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800394c:	e043      	b.n	80039d6 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2200      	movs	r2, #0
 8003956:	2120      	movs	r1, #32
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 f84c 	bl	80039f6 <UART_WaitOnFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e042      	b.n	80039ee <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10c      	bne.n	8003988 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	b29b      	uxth	r3, r3
 8003976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397a:	b29a      	uxth	r2, r3
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	3302      	adds	r3, #2
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	e01f      	b.n	80039c8 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003990:	d007      	beq.n	80039a2 <HAL_UART_Receive+0xd0>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <HAL_UART_Receive+0xde>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	e008      	b.n	80039c2 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3301      	adds	r3, #1
 80039c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1b6      	bne.n	800394e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	e000      	b.n	80039ee <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039ec:	2302      	movs	r3, #2
  }
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3720      	adds	r7, #32
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b090      	sub	sp, #64	; 0x40
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	4613      	mov	r3, r2
 8003a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a06:	e050      	b.n	8003aaa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d04c      	beq.n	8003aaa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d007      	beq.n	8003a26 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a16:	f7fd fadf 	bl	8000fd8 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d241      	bcs.n	8003aaa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a46:	637a      	str	r2, [r7, #52]	; 0x34
 8003a48:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1e5      	bne.n	8003a26 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3314      	adds	r3, #20
 8003a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	613b      	str	r3, [r7, #16]
   return(result);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3314      	adds	r3, #20
 8003a78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a7a:	623a      	str	r2, [r7, #32]
 8003a7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	69f9      	ldr	r1, [r7, #28]
 8003a80:	6a3a      	ldr	r2, [r7, #32]
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e5      	bne.n	8003a5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e00f      	b.n	8003aca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	bf0c      	ite	eq
 8003aba:	2301      	moveq	r3, #1
 8003abc:	2300      	movne	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d09f      	beq.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3740      	adds	r7, #64	; 0x40
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b14:	f023 030c 	bic.w	r3, r3, #12
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a55      	ldr	r2, [pc, #340]	; (8003c94 <UART_SetConfig+0x1c0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d103      	bne.n	8003b4a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b42:	f7fe fe63 	bl	800280c <HAL_RCC_GetPCLK2Freq>
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	e002      	b.n	8003b50 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b4a:	f7fe fe4b 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 8003b4e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b58:	d14c      	bne.n	8003bf4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	009a      	lsls	r2, r3, #2
 8003b64:	441a      	add	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b70:	4a49      	ldr	r2, [pc, #292]	; (8003c98 <UART_SetConfig+0x1c4>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	0119      	lsls	r1, r3, #4
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	009a      	lsls	r2, r3, #2
 8003b84:	441a      	add	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b90:	4b41      	ldr	r3, [pc, #260]	; (8003c98 <UART_SetConfig+0x1c4>)
 8003b92:	fba3 0302 	umull	r0, r3, r3, r2
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	2064      	movs	r0, #100	; 0x64
 8003b9a:	fb00 f303 	mul.w	r3, r0, r3
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	3332      	adds	r3, #50	; 0x32
 8003ba4:	4a3c      	ldr	r2, [pc, #240]	; (8003c98 <UART_SetConfig+0x1c4>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bb2:	4419      	add	r1, r3
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	009a      	lsls	r2, r3, #2
 8003bbe:	441a      	add	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bca:	4b33      	ldr	r3, [pc, #204]	; (8003c98 <UART_SetConfig+0x1c4>)
 8003bcc:	fba3 0302 	umull	r0, r3, r3, r2
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	2064      	movs	r0, #100	; 0x64
 8003bd4:	fb00 f303 	mul.w	r3, r0, r3
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	3332      	adds	r3, #50	; 0x32
 8003bde:	4a2e      	ldr	r2, [pc, #184]	; (8003c98 <UART_SetConfig+0x1c4>)
 8003be0:	fba2 2303 	umull	r2, r3, r2, r3
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	f003 0207 	and.w	r2, r3, #7
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	440a      	add	r2, r1
 8003bf0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bf2:	e04a      	b.n	8003c8a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009a      	lsls	r2, r3, #2
 8003bfe:	441a      	add	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0a:	4a23      	ldr	r2, [pc, #140]	; (8003c98 <UART_SetConfig+0x1c4>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	0119      	lsls	r1, r3, #4
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4613      	mov	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	009a      	lsls	r2, r3, #2
 8003c1e:	441a      	add	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c2a:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <UART_SetConfig+0x1c4>)
 8003c2c:	fba3 0302 	umull	r0, r3, r3, r2
 8003c30:	095b      	lsrs	r3, r3, #5
 8003c32:	2064      	movs	r0, #100	; 0x64
 8003c34:	fb00 f303 	mul.w	r3, r0, r3
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	3332      	adds	r3, #50	; 0x32
 8003c3e:	4a16      	ldr	r2, [pc, #88]	; (8003c98 <UART_SetConfig+0x1c4>)
 8003c40:	fba2 2303 	umull	r2, r3, r2, r3
 8003c44:	095b      	lsrs	r3, r3, #5
 8003c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c4a:	4419      	add	r1, r3
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	009a      	lsls	r2, r3, #2
 8003c56:	441a      	add	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c62:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <UART_SetConfig+0x1c4>)
 8003c64:	fba3 0302 	umull	r0, r3, r3, r2
 8003c68:	095b      	lsrs	r3, r3, #5
 8003c6a:	2064      	movs	r0, #100	; 0x64
 8003c6c:	fb00 f303 	mul.w	r3, r0, r3
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	3332      	adds	r3, #50	; 0x32
 8003c76:	4a08      	ldr	r2, [pc, #32]	; (8003c98 <UART_SetConfig+0x1c4>)
 8003c78:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7c:	095b      	lsrs	r3, r3, #5
 8003c7e:	f003 020f 	and.w	r2, r3, #15
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	440a      	add	r2, r1
 8003c88:	609a      	str	r2, [r3, #8]
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40013800 	.word	0x40013800
 8003c98:	51eb851f 	.word	0x51eb851f

08003c9c <__libc_init_array>:
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	2600      	movs	r6, #0
 8003ca0:	4d0c      	ldr	r5, [pc, #48]	; (8003cd4 <__libc_init_array+0x38>)
 8003ca2:	4c0d      	ldr	r4, [pc, #52]	; (8003cd8 <__libc_init_array+0x3c>)
 8003ca4:	1b64      	subs	r4, r4, r5
 8003ca6:	10a4      	asrs	r4, r4, #2
 8003ca8:	42a6      	cmp	r6, r4
 8003caa:	d109      	bne.n	8003cc0 <__libc_init_array+0x24>
 8003cac:	f000 f822 	bl	8003cf4 <_init>
 8003cb0:	2600      	movs	r6, #0
 8003cb2:	4d0a      	ldr	r5, [pc, #40]	; (8003cdc <__libc_init_array+0x40>)
 8003cb4:	4c0a      	ldr	r4, [pc, #40]	; (8003ce0 <__libc_init_array+0x44>)
 8003cb6:	1b64      	subs	r4, r4, r5
 8003cb8:	10a4      	asrs	r4, r4, #2
 8003cba:	42a6      	cmp	r6, r4
 8003cbc:	d105      	bne.n	8003cca <__libc_init_array+0x2e>
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}
 8003cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc4:	4798      	blx	r3
 8003cc6:	3601      	adds	r6, #1
 8003cc8:	e7ee      	b.n	8003ca8 <__libc_init_array+0xc>
 8003cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cce:	4798      	blx	r3
 8003cd0:	3601      	adds	r6, #1
 8003cd2:	e7f2      	b.n	8003cba <__libc_init_array+0x1e>
 8003cd4:	08003d38 	.word	0x08003d38
 8003cd8:	08003d38 	.word	0x08003d38
 8003cdc:	08003d38 	.word	0x08003d38
 8003ce0:	08003d3c 	.word	0x08003d3c

08003ce4 <memset>:
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	4402      	add	r2, r0
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d100      	bne.n	8003cee <memset+0xa>
 8003cec:	4770      	bx	lr
 8003cee:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf2:	e7f9      	b.n	8003ce8 <memset+0x4>

08003cf4 <_init>:
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	bf00      	nop
 8003cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfa:	bc08      	pop	{r3}
 8003cfc:	469e      	mov	lr, r3
 8003cfe:	4770      	bx	lr

08003d00 <_fini>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr
